language: cs
name: HumanEval_156_int_to_mini_roman
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  var roman = new StringBuilder();\n        foreach (var (num, roman_num) in\
    \ roman_numerals) {\n            if (number < num) {\n                continue;\n\
    \            }\n            while (number >= num) {\n                roman.Append(roman_num);\n\
    \                number -= num;\n            }\n        }\n        return roman.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp40fasgk.cs(18,42): error CS0103: The name ''roman_numerals'' does not
    exist in the current context

    /tmp/tmpp40fasgk.cs(18,23): error CS8130: Cannot infer the type of implicitly-typed
    deconstruction variable ''num''.

    /tmp/tmpp40fasgk.cs(18,28): error CS8130: Cannot infer the type of implicitly-typed
    deconstruction variable ''roman_num''.

    '
  timestamp: 1659823297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  string roman = \"\";\n        for (int i = 1; i <= number; i *= 10) {\n   \
    \         int digit = (int)(number / i) % 10;\n            if (digit < 4) {\n\
    \                roman = new string('I', digit) + roman;\n            } else if\
    \ (digit == 4) {\n                roman = \"IV\" + roman;\n            } else\
    \ if (digit < 9) {\n                roman = \"V\" + new string('I', digit - 5)\
    \ + roman;\n            } else {\n                roman = \"IX\" + roman;\n  \
    \          }\n        }\n        return roman;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9a31eb8180845c186d93fe188939d8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9a31eb8180845c186d93fe188939d8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823297
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  throw new NotImplementedException();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <c8076b1dad124c42b7dc1a142054bc35>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <c8076b1dad124c42b7dc1a142054bc35>:0 \n"
  stdout: ''
  timestamp: 1659823297
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  if (number <= 0 || number > 1000)\n            throw new ArgumentOutOfRangeException();\n\
    \        var digits = Digits(number, 4);\n        return ToMiniRoman(digits);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt9mhj47h.cs(19,22): error CS0103: The name ''Digits'' does not exist in
    the current context

    /tmp/tmpt9mhj47h.cs(20,16): error CS0103: The name ''ToMiniRoman'' does not exist
    in the current context

    '
  timestamp: 1659823297
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  if (number < 1 || number > 1000) {\n            throw new ArgumentOutOfRangeException();\n\
    \        }\n        if (number == 0) {\n            return \"\";\n        }\n\
    \        if (number >= 1000) {\n            return \"m\" + IntToMiniRoman(number\
    \ - 1000);\n        }\n        if (number >= 900) {\n            return \"cm\"\
    \ + IntToMiniRoman(number - 900);\n        }\n        if (number >= 500) {\n \
    \           return \"d\" + IntToMiniRoman(number - 500);\n        }\n        if\
    \ (number >= 400) {\n            return \"cd\" + IntToMiniRoman(number - 400);\n\
    \        }\n        if (number >= 100) {\n            return \"c\" + IntToMiniRoman(number\
    \ - 100);\n        }\n        if (number >= 90) {\n            return \"xc\" +\
    \ IntToMiniRoman(number - 90);\n        }\n        if (number >= 50) {\n     \
    \       return \"l\" + IntToMiniRoman(number - 50);\n        }\n        if (number\
    \ >= 40) {\n            return \"xl\" + IntToMiniRoman(number - 40);\n       \
    \ }\n        if (number >= 10) {\n            return \"x\" + IntToMiniRoman(number\
    \ - 10);\n        }\n        if (number >= 9) {\n            return \"ix\" + IntToMiniRoman(number\
    \ - 9);\n        }\n        if (number >= 5) {\n            return \"v\" + IntToMiniRoman(number\
    \ - 5);\n        }\n        if (number >= 4) {\n            return \"iv\" + IntToMiniRoman(number\
    \ - 4);\n        }\n        if (number >= 1) {\n            return \"i\" + IntToMiniRoman(number\
    \ - 1);\n        }\n        return null;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument\
    \ was out of the range of valid values.\n  at Problem.IntToMiniRoman (System.Int64\
    \ number) [0x00017] in <7db1e295496942bf89c59c2d4964e3c6>:0 \n  at Problem.IntToMiniRoman\
    \ (System.Int64 number) [0x001d2] in <7db1e295496942bf89c59c2d4964e3c6>:0 \n \
    \ at Problem.IntToMiniRoman (System.Int64 number) [0x001a8] in <7db1e295496942bf89c59c2d4964e3c6>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <7db1e295496942bf89c59c2d4964e3c6>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\n  at Problem.IntToMiniRoman\
    \ (System.Int64 number) [0x00017] in <7db1e295496942bf89c59c2d4964e3c6>:0 \n \
    \ at Problem.IntToMiniRoman (System.Int64 number) [0x001d2] in <7db1e295496942bf89c59c2d4964e3c6>:0\
    \ \n  at Problem.IntToMiniRoman (System.Int64 number) [0x001a8] in <7db1e295496942bf89c59c2d4964e3c6>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <7db1e295496942bf89c59c2d4964e3c6>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823297
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  var conv = new Dictionary<int, string> {\n            { 1000, \"m\" },\n  \
    \          { 900, \"cm\" },\n            { 500, \"d\" },\n            { 400, \"\
    cd\" },\n            { 100, \"c\" },\n            { 90, \"xc\" },\n          \
    \  { 50, \"l\" },\n            { 40, \"xl\" },\n            { 10, \"x\" },\n \
    \           { 9, \"ix\" },\n            { 5, \"v\" },\n            { 4, \"iv\"\
    \ },\n            { 1, \"i\" }\n        };\n        var count = 0;\n        var\
    \ res = \"\";\n        foreach (var roman in conv) {\n            count = (int)(number\
    \ / roman.Key);\n            number %= roman.Key;\n            res += roman.Value.ToLower()\
    \ * count;\n        }\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxayi9ngb.cs(37,20): error CS0019: Operator ''*'' cannot be applied to
    operands of type ''string'' and ''int''

    '
  timestamp: 1659823297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  long[] arabic = { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 };\n\
    \        string[] roman = { \"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\"\
    , \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\" };\n        StringBuilder sb = new\
    \ StringBuilder();\n        int i = arabic.Length - 1;\n        while (number\
    \ > 0 || arabic.Length == (i - 1)) {\n            while (number < arabic[i])\n\
    \                i--;\n            number -= arabic[i];\n            sb.Append(roman[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  if(number <= 0 || number > 1000) {\n            throw new ArgumentOutOfRangeException(\"\
    number\", number,\n                \"number must be a positive integer less than\
    \ or equal to 1000\");\n        }\n        var roman = new StringBuilder();\n\
    \        while(number > 0) {\n            if(number >= 900) {\n              \
    \  roman.Append(\"cm\");\n                number -= 900;\n            } else if(number\
    \ >= 500) {\n                roman.Append(\"d\");\n                number -= 500;\n\
    \            } else if(number >= 400) {\n                roman.Append(\"cd\");\n\
    \                number -= 400;\n            } else if(number >= 100) {\n    \
    \            roman.Append(\"c\");\n                number -= 100;\n          \
    \  } else if(number >= 90) {\n                roman.Append(\"xc\");\n        \
    \        number -= 90;\n            } else if(number >= 50) {\n              \
    \  roman.Append(\"l\");\n                number -= 50;\n            } else if(number\
    \ >= 40) {\n                roman.Append(\"xl\");\n                number -= 40;\n\
    \            } else if(number >= 10) {\n                roman.Append(\"x\");\n\
    \                number -= 10;\n            } else if(number >= 9) {\n       \
    \         roman.Append(\"ix\");\n                number -= 9;\n            } else\
    \ if(number >= 5) {\n                roman.Append(\"v\");\n                number\
    \ -= 5;\n            } else if(number >= 4) {\n                roman.Append(\"\
    iv\");\n                number -= 4;\n            } else {\n                roman.Append(\"\
    i\");\n                number -= 1;\n            }\n        }\n        return\
    \ roman.ToString();\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fb75edb1e03142c2935c0ca511ed3090>:0 \n"
  stdout: ''
  timestamp: 1659823297
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  throw new NotImplementedException();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <c8076b1dad124c42b7dc1a142054bc35>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <c8076b1dad124c42b7dc1a142054bc35>:0 \n"
  stdout: ''
  timestamp: 1659823297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  StringBuilder roman = new StringBuilder();\n        while (number >= 1000)\
    \ {\n            roman.Append(\"m\");\n            number -= 1000;\n        }\n\
    \        if (number >= 900) {\n            roman.Append(\"cm\");\n           \
    \ number -= 900;\n        }\n        if (number >= 500) {\n            roman.Append(\"\
    d\");\n            number -= 500;\n        }\n        if (number >= 400) {\n \
    \           roman.Append(\"cd\");\n            number -= 400;\n        }\n   \
    \     while (number >= 100) {\n            roman.Append(\"c\");\n            number\
    \ -= 100;\n        }\n        if (number >= 90) {\n            roman.Append(\"\
    xc\");\n            number -= 90;\n        }\n        if (number >= 50) {\n  \
    \          roman.Append(\"l\");\n            number -= 50;\n        }\n      \
    \  if (number >= 40) {\n            roman.Append(\"xl\");\n            number\
    \ -= 40;\n        }\n        while (number >= 10) {\n            roman.Append(\"\
    x\");\n            number -= 10;\n        }\n        if (number >= 9) {\n    \
    \        roman.Append(\"ix\");\n            number -= 9;\n        }\n        if\
    \ (number >= 5) {\n            roman.Append(\"v\");\n            number -= 5;\n\
    \        }\n        if (number >= 4) {\n            roman.Append(\"iv\");\n  \
    \          number -= 4;\n        }\n        while (number >= 1) {\n          \
    \  roman.Append(\"i\");\n            number -= 1;\n        }\n        return roman.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823297
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  // You need to implement this function.\n        // Otherwise, the function\
    \ always returns a dummy value 42.\n        // Delete this line when you implement\
    \ this function.\n        string output = \"\";\n        string[] unos = new string[]\
    \ {\"i\", \"x\", \"c\", \"m\"};\n        string[] cincos = new string[] {\"v\"\
    , \"l\", \"d\"};\n        int exp = 0;\n        while (number > 0) {\n       \
    \     int digit = (int)(number % 10);\n            output = GetTens(digit, unos[exp],\
    \ cincos[exp]) + output;\n            number /= 10;\n            exp++;\n    \
    \    }\n        return output;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpav8pa9xm.cs(26,22): error CS0103: The name ''GetTens'' does not exist
    in the current context

    '
  timestamp: 1659823297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  if (number <= 0 || number > 1000) {\n            throw new ArgumentOutOfRangeException(\"\
    Number must be in the range 1 to 1000\");\n        }\n        string[,] values\
    \ = new string[,] {\n            { \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\"\
    , \"vi\", \"vii\", \"viii\", \"ix\" },\n            { \"\", \"x\", \"xx\", \"\
    xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\" },\n            { \"\"\
    , \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\" },\n\
    \            { \"\", \"m\", \"mm\", \"mmm\", \"m(v)\", \"v\", \"v(m)\", \"v(m)m\"\
    , \"v(m)mm\", \"m(x)\" }\n        };\n        string roman = \"\";\n        for\
    \ (int i = 0; i < 4; i++) {\n            roman = values[i, number % 10] + roman;\n\
    \            number /= 10;\n        }\n        return roman;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  var output = new StringBuilder();\n        long thousands = number / 1000;\n\
    \        if (thousands > 0) {\n            output.Append(new string('m', (int)thousands));\n\
    \            number %= 1000;\n        }\n        long hundreds = number / 100;\n\
    \        if (hundreds > 0) {\n            if (hundreds == 9) {\n             \
    \   output.Append(\"cm\");\n            } else if (hundreds == 4) {\n        \
    \        output.Append(\"cd\");\n            } else {\n                var fivehundreds\
    \ = hundreds / 5;\n                if (fivehundreds > 0) {\n                 \
    \   output.Append(\"d\");\n                }\n                output.Append(new\
    \ string('c', (int)(hundreds % 5)));\n            }\n            number %= 100;\n\
    \        }\n        long tens = number / 10;\n        if (tens > 0) {\n      \
    \      if (tens == 9) {\n                output.Append(\"xc\");\n            }\
    \ else if (tens == 4) {\n                output.Append(\"xl\");\n            }\
    \ else {\n                var fifties = tens / 5;\n                if (fifties\
    \ > 0) {\n                    output.Append(\"l\");\n                }\n     \
    \           output.Append(new string('x', (int)(tens % 5)));\n            }\n\
    \            number %= 10;\n        }\n        if (number > 0) {\n           \
    \ if (number == 9) {\n                output.Append(\"ix\");\n            } else\
    \ if (number == 4) {\n                output.Append(\"iv\");\n            } else\
    \ {\n                var fives = number / 5;\n                if (fives > 0) {\n\
    \                    output.Append(\"v\");\n                }\n              \
    \  output.Append(new string('i', (int)(number % 5)));\n            }\n       \
    \ }\n        return output.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  StringBuilder result = new StringBuilder();\n        // number should be less\
    \ than 4000\n        while (number >= 1000) {\n            result.Append(\"m\"\
    );\n            number -= 1000;\n        }\n        while (number >= 500) {\n\
    \            result.Append(\"d\");\n            number -= 500;\n        }\n  \
    \      while (number >= 100) {\n            result.Append(\"c\");\n          \
    \  number -= 100;\n        }\n        while (number >= 50) {\n            result.Append(\"\
    l\");\n            number -= 50;\n        }\n        while (number >= 10) {\n\
    \            result.Append(\"x\");\n            number -= 10;\n        }\n   \
    \     while (number >= 5) {\n            result.Append(\"v\");\n            number\
    \ -= 5;\n        }\n        while (number >= 1) {\n            result.Append(\"\
    i\");\n            number -= 1;\n        }\n        return result.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <487cefa3a06742d58687f10cd2bbdd7a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <487cefa3a06742d58687f10cd2bbdd7a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823297
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  throw new NotImplementedException();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <c8076b1dad124c42b7dc1a142054bc35>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <c8076b1dad124c42b7dc1a142054bc35>:0 \n"
  stdout: ''
  timestamp: 1659823297
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  // TODO: Implement me!\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00009] in <b82069e9b5c64d20b8c0ef8167883579>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00009] in <b82069e9b5c64d20b8c0ef8167883579>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  var romanToArabic = new Dictionary<char, int> {\n            { 'i', 1 },\n\
    \            { 'v', 5 },\n            { 'x', 10 },\n            { 'l', 50 },\n\
    \            { 'c', 100 },\n            { 'd', 500 },\n            { 'm', 1000\
    \ }\n        };\n        var arabicToRoman = romanToArabic.ToDictionary(kvp =>\
    \ kvp.Value, kvp => kvp.Key);\n        var arabicToRoman2 = new Dictionary<int,\
    \ char> {\n            { 4, 'i' },\n            { 9, 'x' },\n            { 40,\
    \ 'l' },\n            { 90, 'c' },\n            { 400, 'd' },\n            { 900,\
    \ 'm' }\n        };\n        var number_ = (int)number;\n        var result =\
    \ new StringBuilder();\n        foreach (var pair in arabicToRoman.Reverse())\
    \ {\n            var arabic = pair.Key;\n            var roman = pair.Value;\n\
    \            for (; number_ >= arabic; number_ -= arabic) {\n                result.Append(roman);\n\
    \            }\n        }\n        for (int i = arabicToRoman2.Keys.Count - 1;\
    \ i >= 0; i--) {\n            var arabic = arabicToRoman2.Keys.ElementAt(i);\n\
    \            var roman = arabicToRoman2.Values.ElementAt(i);\n            for\
    \ (; number_ >= arabic - 1; number_ -= arabic - 1) {\n                result.Append(arabicToRoman[1]);\n\
    \                result.Append(roman);\n            }\n        }\n        return\
    \ result.ToString();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a85eef5fb23f4ef79ffb9255aff0339b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a85eef5fb23f4ef79ffb9255aff0339b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26660d3d4ba64ec3856e023b3132bc02>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26660d3d4ba64ec3856e023b3132bc02>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  string res = \"\";\n        while (number > 0) {\n            if (number >=\
    \ 1000) {\n                res += \"m\";\n                number -= 1000;\n  \
    \          } else if (number >= 900) {\n                res += \"cm\";\n     \
    \           number -= 900;\n            } else if (number >= 500) {\n        \
    \        res += \"d\";\n                number -= 500;\n            } else if\
    \ (number >= 400) {\n                res += \"cd\";\n                number -=\
    \ 400;\n            } else if (number >= 100) {\n                res += \"c\"\
    ;\n                number -= 100;\n            } else if (number >= 90) {\n  \
    \              res += \"xc\";\n                number -= 90;\n            } else\
    \ if (number >= 50) {\n                res += \"l\";\n                number -=\
    \ 50;\n            } else if (number >= 40) {\n                res += \"xl\";\n\
    \                number -= 40;\n            } else if (number >= 10) {\n     \
    \           res += \"x\";\n                number -= 10;\n            } else if\
    \ (number >= 9) {\n                res += \"ix\";\n                number -= 9;\n\
    \            } else if (number >= 5) {\n                res += \"v\";\n      \
    \          number -= 5;\n            } else if (number >= 4) {\n             \
    \   res += \"iv\";\n                number -= 4;\n            } else if (number\
    \ >= 1) {\n                res += \"i\";\n                number -= 1;\n     \
    \       }\n        }\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823297
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n \
    \   // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n    public static string IntToMiniRoman(long number) {\n      \
    \  string roman = \"\";\n        List<long> multiples = new List<long> {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        List<string> numbers\
    \ = new List<string> {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        while (number > 0) {\n      \
    \      foreach (var pair in multiples.Zip(numbers, (x, y) => new { x, y })) {\n\
    \                if (number >= pair.x) {\n                    roman += pair.y;\n\
    \                    number -= pair.x;\n                    break;\n         \
    \       }\n            }\n        }\n        return roman;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823297
