name: HumanEval_15_string_sequence
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return a string containing space-delimited numbers starting\
  \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>>\
  \ string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static string StringSequence(long\
  \ n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
  0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
  0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
completions: ["        string ret = \"\";\n        for (long i = 0; i <= n; i++) {\n\
    \            ret += i + \" \";\n        }\n        return ret.Trim();", "    \
    \    if (n == 0) {\n            return \"0\";\n        }\n        StringBuilder\
    \ b = new StringBuilder(n * 2);\n        for (long i = 0; i <= n; i++) {\n   \
    \         b.Append(i).Append(' ');\n        }\n        b.Length--; // Remove the\
    \ last space.\n        return b.ToString();", "        string[] strings = new\
    \ string[n + 1];\n        for (long i = 0; i <= n; i++) {\n            strings[i]\
    \ = i.ToString();\n        }\n        return string.Join(\" \", strings);", " \
    \       if (n == 0) {\n            return \"0\";\n        } else {\n         \
    \   return StringSequence(n - 1) + \" \" + n.ToString();\n        }", "      \
    \  if (n == 0) {\n            return \"0\";\n        }\n        return StringSequence(n\
    \ - 1) + \" \" + n.ToString();", "        if (n == 0) {\n            return \"\
    0\";\n        } else {\n            var sb = new StringBuilder();\n          \
    \  for (long i = 0; i <= n; i++) {\n                sb.Append(i);\n          \
    \      sb.Append(' ');\n            }\n            sb.Length--;\n            return\
    \ sb.ToString();\n        }", '        return Enumerable.Range(0, (int)n + 1).Select(x
    => x.ToString()).Aggregate((x, y) => x + " " + y);', '        return string.Join("
    ", Enumerable.Range(0, (int) n + 1));', "        string string_sequence = \"\"\
    ;\n        for (long i = 0; i <= n; i++) {\n            string_sequence += i +\
    \ \" \";\n        }\n        return string_sequence.Trim();", "        if (n ==\
    \ 0) {\n            return \"0\";\n        }\n        return StringSequence(n\
    \ - 1) + \" \" + n.ToString();", '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', "        string s = \"\";\n        for (long i = 0; i <= n; i++)\
    \ {\n            s += $\"{i} \";\n        }\n        return s.Trim();", "    \
    \    StringBuilder b = new StringBuilder();\n        for (long i = 0; i <= n;\
    \ i++) {\n            b.Append(i.ToString());\n            b.Append(' ');\n  \
    \      }\n        return b.ToString();", "        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString().Trim();", '        return
    string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        if (n == 0) return\
    \ \"0\";\n        StringBuilder builder = new StringBuilder();\n        for (long\
    \ i = 0; i <= n; i++) {\n            builder.Append(i);\n            builder.Append(\"\
    \ \");\n        }\n        return builder.ToString();", "        string res =\
    \ \"\";\n        for (long i = 0; i <= n; i++) {\n            res += \" \" + i;\n\
    \        }\n        return res.Substring(1);", "        if (n == 0) return \"\
    0\";\n        var ans = new StringBuilder();\n        for (long i = 0; i <= n;\
    \ i++) {\n            ans.Append(i + \" \");\n        }\n        return ans.ToString().Trim();",
  "        StringBuilder sb = new StringBuilder();\n        for (long i = 0; i <=\
    \ n; i++) {\n            sb.Append(i);\n            sb.Append(' ');\n        }\n\
    \        return sb.ToString();", "        if (n == 0) {\n            return \"\
    0\";\n        } else {\n            return StringSequence(n - 1) + \" \" + n.ToString();\n\
    \        }"]
stop_tokens:
- "\n    }\n"
