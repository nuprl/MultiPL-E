language: cs
name: HumanEval_143_words_in_sentence
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // This problem is simple,\n        // we have to loop over all the words,\n\
    \        // and check if the length of the word is prime or not,\n        // if\
    \ it is prime, then we add the word to the final string,\n        // otherwise,\
    \ we continue\n        // Time Complexity: O(n), where n is the length of the\
    \ sentence\n        // Space Complexity: O(1)\n        bool IsPrime(int num) {\n\
    \            if (num == 2) return true;\n            if (num == 1 || num % 2 ==\
    \ 0) return false;\n            for (int i = 3; i * i <= num; i += 2) {\n    \
    \            if (num % i == 0) return false;\n            }\n            return\
    \ true;\n        }\n        string ret = \"\";\n        string[] words = sentence.Split(\"\
    \ \");\n        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                ret += word + \" \";\n            }\n        }\n        return\
    \ ret.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823420
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var parts = sentence.Split(' ');\n        var sb = new StringBuilder();\n\
    \        foreach (var word in parts) {\n            if (IsPrime(word.Length))\
    \ {\n                sb.Append(word);\n                sb.Append(' ');\n     \
    \       }\n        }\n        if (sb.Length > 0) {\n            sb.Length--;\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppclt52hd.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823420
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        return String.Join(' ', sentence.Split(' ').Where(w => IsPrime(w.Length)));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxo8dnv8q.cs(24,64): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var primes = new List<int>();\n        // Generate some prime numbers.\n\
    \        {\n            var isPrime = new bool[101];\n            for (int i =\
    \ 2; i < isPrime.Length; i++) {\n                isPrime[i] = true;\n        \
    \    }\n            for (int i = 2; i * i < isPrime.Length; i++) {\n         \
    \       if (isPrime[i]) {\n                    for (int j = i * i; j < isPrime.Length;\
    \ j += i) {\n                        isPrime[j] = false;\n                   \
    \ }\n                }\n            }\n            for (int i = 2; i < isPrime.Length;\
    \ i++) {\n                if (isPrime[i]) {\n                    primes.Add(i);\n\
    \                }\n            }\n        }\n        var words = sentence.Split('\
    \ ');\n        return string.Join(\" \", words.Where(word => primes.Contains(word.Length)));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        if (sentence == null)\n            throw new ArgumentNullException(nameof(sentence));\n\
    \        var words = sentence.Split();\n        var sb = new StringBuilder();\n\
    \        foreach (var word in words) {\n            var len = word.Length;\n \
    \           var isPrime = len > 1;\n            for (var i = 2; i < len; i++)\
    \ {\n                if (len % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                if (sb.Length > 0)\n                    sb.Append('\
    \ ');\n                sb.Append(word);\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823420
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split();\n        var result = new StringBuilder();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Append(word + \" \");\n            }\n        }\n\
    \        return result.ToString().Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz2bktixp.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split();\n        var sb = new StringBuilder();\n\
    \        var primes = new HashSet<int> { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 };\n        foreach (var\
    \ word in words) {\n            if (primes.Contains(word.Length)) {\n        \
    \        sb.Append(word);\n                sb.Append(\" \");\n            }\n\
    \        }\n        if (sb.Length == 0) {\n            return \"\";\n        }\n\
    \        sb.Length--;\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823420
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        string[] words = sentence.Split(' ');\n\
    \        string[] primeWords = new string[words.Length];\n        int primeCount\
    \ = 0;\n        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                primeWords[primeCount] = word;\n                primeCount++;\n\
    \            }\n        }\n        string[] trimedPrimeWords = new string[primeCount];\n\
    \        for (int i = 0; i < primeCount; i++) {\n            trimedPrimeWords[i]\
    \ = primeWords[i];\n        }\n        return string.Join(\" \", trimedPrimeWords);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpebftdl3c.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823420
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // * 1 <= len(sentence) <= 100\n        Debug.Assert(1 <= sentence.Length\
    \ && sentence.Length <= 100);\n        // * sentence contains only letters\n \
    \       Debug.Assert(sentence.All(c => Char.IsLetter(c)));\n        return String.Join(\"\
    \ \", sentence.Split(' ').Where(IsPrimeLength));\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgt9kw2bn.cs(28,59): error CS0103: The name ''IsPrimeLength'' does not
    exist in the current context

    '
  timestamp: 1659823420
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        var sb = new StringBuilder();\n        foreach (var word in words) {\n\
    \            if (IsPrime(word.Length)) {\n                sb.Append(word);\n \
    \               sb.Append(' ');\n            }\n        }\n        return sb.ToString().Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpstqrejsm.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823420
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // For i = 0 to length(sentence):\n        //   Find the index of the\
    \ next space\n        //   If the length of the word is prime:\n        //   \
    \  Add the word to the result string\n        // Return the result string\n  \
    \      string result = \"\";\n        for (int i = 0; i < sentence.Length; i++)\
    \ {\n            int space = sentence.IndexOf(' ', i);\n            if (space\
    \ == -1) {\n                space = sentence.Length;\n            }\n        \
    \    int length = space - i;\n            if (IsPrime(length)) {\n           \
    \     result += sentence.Substring(i, length) + \" \";\n            }\n      \
    \      i = space;\n        }\n        if (result.Length > 0) {\n            result\
    \ = result.Substring(0, result.Length - 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ma_lbnu.cs(36,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823420
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split();\n        var all_is_prime = words.Select(x\
    \ => IsPrime(x.Length));\n        var words_with_prime_length = new List<string>();\n\
    \        for (int i = 0; i < words.Length; i++) {\n            if (all_is_prime[i])\n\
    \                words_with_prime_length.Add(words[i]);\n        }\n        return\
    \ string.Join(\" \", words_with_prime_length);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuz82lpx0.cs(25,46): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823420
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        return String.Join(\" \", sentence.Split(' ').Where(w => isPrime(w.Length)));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpleofya9r.cs(24,64): error CS0103: The name ''isPrime'' does not exist
    in the current context

    '
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var sb = new StringBuilder();\n\
    \        foreach (var word in words) {\n            if (word.Length == 1) continue;\n\
    \            if (word.Length == 2) {\n                sb.Append(word + \" \");\n\
    \                continue;\n            }\n            var max = word.Length;\n\
    \            for (int i = 3; i < max; i += 2) {\n                if (word.Length\
    \ % i == 0) {\n                    goto next;\n                }\n           \
    \ }\n            sb.Append(word + \" \");\n        next:\n            continue;\n\
    \        }\n        return sb.ToString().Trim();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d713ba2ee29a42838611cd76de322916>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d713ba2ee29a42838611cd76de322916>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823420
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var result = new StringBuilder();\n        var words = sentence.Split();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Append(word + \" \");\n            }\n        }\n\
    \        return result.ToString().Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgbhqaui5.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823420
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        List<string> ans = new\
    \ List<string>();\n        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                ans.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", ans);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4gaaqt6o.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823420
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var newWords = new List<string>();\n\
    \        foreach (var word in words) {\n            var len = word.Length;\n \
    \           if (IsPrime(len)) {\n                newWords.Add(word);\n       \
    \     }\n        }\n        return string.Join(\" \", newWords);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwgtfu208.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823420
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split();\n        var sb = new StringBuilder();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                sb.Append(word);\n                sb.Append(\" \");\n   \
    \         }\n        }\n        return sb.ToString().Trim();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz9q7gfqh.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823420
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var result = new StringBuilder();\n        var words = sentence.Split('\
    \ ');\n        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Append(word + \" \");\n            }\n        }\n\
    \        return result.ToString().Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzfy8ix33.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659823420
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        List<string> list = new\
    \ List<string>();\n        foreach (string word in words) {\n            if (Primes.IsPrime(word.Length))\
    \ {\n                list.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", list);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkoai2_9e.cs(27,17): error CS0103: The name ''Primes'' does not exist in
    the current context

    '
  timestamp: 1659823420
