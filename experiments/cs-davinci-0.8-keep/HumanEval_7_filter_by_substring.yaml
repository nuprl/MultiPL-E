name: HumanEval_7_filter_by_substring
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Filter an input list of strings only for ones that contain given\
  \ substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
  \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    public static\
  \ List<string> FilterBySubstring(List<string> strings, string substring) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FilterBySubstring((new\
  \ List<string>()), (\"john\")).Equals((new List<string>())));\n    Debug.Assert(FilterBySubstring((new\
  \ List<string>(new string[]{(string)\"xxx\", (string)\"asd\", (string)\"xxy\", (string)\"\
  john doe\", (string)\"xxxAAA\", (string)\"xxx\"})), (\"xxx\")).Equals((new List<string>(new\
  \ string[]{(string)\"xxx\", (string)\"xxxAAA\", (string)\"xxx\"}))));\n    Debug.Assert(FilterBySubstring((new\
  \ List<string>(new string[]{(string)\"xxx\", (string)\"asd\", (string)\"aaaxxy\"\
  , (string)\"john doe\", (string)\"xxxAAA\", (string)\"xxx\"})), (\"xx\")).Equals((new\
  \ List<string>(new string[]{(string)\"xxx\", (string)\"aaaxxy\", (string)\"xxxAAA\"\
  , (string)\"xxx\"}))));\n    Debug.Assert(FilterBySubstring((new List<string>(new\
  \ string[]{(string)\"grunt\", (string)\"trumpet\", (string)\"prune\", (string)\"\
  gruesome\"})), (\"run\")).Equals((new List<string>(new string[]{(string)\"grunt\"\
  , (string)\"prune\"}))));\n    }\n\n}\n"
completions: ["        List<string> result = new List<string>();\n        foreach\
    \ (string s in strings) {\n            if (s.Contains(substring)) {\n        \
    \        result.Add(s);\n            }\n        }\n        return result;", " \
    \       List<string> filtered = new List<string>();\n        foreach (string str\
    \ in strings) {\n            if (str.Contains(substring)) {\n                filtered.Add(str);\n\
    \            }\n        }\n        return filtered;", "        // Create an empty\
    \ result list\n        List<string> result = new List<string>();\n        // For\
    \ each string in the list:\n        foreach (string s in strings) {\n        \
    \    // Find the substring in the string\n            int index = s.IndexOf(substring);\n\
    \            // If substring is not found in the string - continue\n         \
    \   if (index == -1) continue;\n            // Add the string to the result list\n\
    \            result.Add(s);\n        }\n        // Return the result list\n  \
    \      return result;", "        List<string> result = new List<string>();\n \
    \       foreach (string s in strings) {\n            if (s.Contains(substring))\
    \ {\n                result.Add(s);\n            }\n        }\n        return\
    \ result;", "        List<string> res = new List<string>();\n        foreach (string\
    \ s in strings) {\n            if (s.Contains(substring)) {\n                res.Add(s);\n\
    \            }\n        }\n        return res;", "        // your code here\n\n\
    \        List<string> result = new List<string>();\n        foreach (string s\
    \ in strings)\n        {\n            if (s.Contains(substring))\n           \
    \ {\n                result.Add(s);\n            }\n        }\n        return\
    \ result;", '        return strings.Where(s => s.Contains(substring)).ToList();',
  "        List<string> filtered = new List<string>();\n        foreach (string s\
    \ in strings) {\n            if (s.Contains(substring)) {\n                filtered.Add(s);\n\
    \            }\n        }\n        return filtered;", "        List<string> ret_strings\
    \ = new List<string>();\n        foreach (string s in strings) {\n           \
    \ if (s.Contains(substring)) {\n                ret_strings.Add(s);\n        \
    \    }\n        }\n        return ret_strings;", "        List<string> result\
    \ = new List<string>();\n        for (int i = 0; i < strings.Count; i++) {\n \
    \           if (strings[i].Contains(substring)) {\n                result.Add(strings[i]);\n\
    \            }\n        }\n        return result;", "        List<string> filtered_strings\
    \ = new List<string>();\n        foreach (string s in strings) {\n           \
    \ if (s.Contains(substring)) {\n                filtered_strings.Add(s);\n   \
    \         }\n        }\n        return filtered_strings;", "        var result\
    \ = new List<string>();\n        foreach (var str in strings) {\n            if\
    \ (str.Contains(substring)) {\n                result.Add(str);\n            }\n\
    \        }\n        return result;", '        return strings.Where(x => x.Contains(substring)).ToList();',
  '        return strings.Where(str => str.Contains(substring)).ToList();', '        return
    strings.Where(s => s.Contains(substring)).ToList();', '        return strings.Where(x
    => x.Contains(substring)).ToList();', "        List<string> matching_strings =\
    \ new List<string>();\n        for (int i = 0; i < strings.Count; i++) {\n   \
    \         if (strings[i].Contains(substring)) {\n                matching_strings.Add(strings[i]);\n\
    \            }\n        }\n        return matching_strings;", '        return
    strings.Where(s => s.Contains(substring)).ToList();', '        return strings.Where(str
    => str.Contains(substring)).ToList();', '        return strings.Where(string =>
    string.Contains(substring)).ToList();']
stop_tokens:
- "\n    }\n"
