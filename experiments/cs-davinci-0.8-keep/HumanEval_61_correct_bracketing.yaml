name: HumanEval_61_correct_bracketing
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return True\
  \ if every opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
  (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    // >>>\
  \ correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
  )(()\")\n    // False\n    public static bool CorrectBracketing(string brackets)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
  ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
  \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
  ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
  ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n\
  \    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
  ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
  \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
  ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        var stack = new Stack<char>();\n        foreach (var ch in\
    \ brackets) {\n            if (ch == '(')\n                stack.Push(ch);\n \
    \           else if (ch == ')') {\n                if (stack.Count == 0) return\
    \ false;\n                stack.Pop();\n            }\n        }\n        return\
    \ stack.Count == 0;", "        int open = 0;\n        int closed = 0;\n      \
    \  for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] ==\
    \ '(') {\n                open++;\n            } else if (brackets[i] == ')')\
    \ {\n                closed++;\n            }\n            if (closed > open)\
    \ {\n                return false;\n            }\n        }\n        return open\
    \ == closed;", "        int i = 0;\n        foreach (char c in brackets) {\n \
    \           if (c == '(') {\n                i++;\n            } else {\n    \
    \            i--;\n            }\n            if (i < 0) {\n                return\
    \ false;\n            }\n        }\n        return i == 0;", "        var remaining\
    \ = 0;\n        foreach (var c in brackets) {\n            if (c == '(') {\n \
    \               remaining += 1;\n            } else if (c == ')') {\n        \
    \        remaining -= 1;\n            }\n            if (remaining < 0) {\n  \
    \              return false;\n            }\n        }\n        return remaining\
    \ == 0;", "        int level = 0;\n        foreach (char c in brackets) {\n  \
    \          if (c == '(') level++;\n            else level--;\n            if (level\
    \ < 0) return false;\n        }\n        return level == 0;", "        var stack\
    \ = new Stack<char>();\n        foreach (var ch in brackets) {\n            if\
    \ (ch == '(') {\n                stack.Push(ch);\n            } else if (ch ==\
    \ ')') {\n                if (stack.Count == 0) {\n                    return\
    \ false;\n                }\n                stack.Pop();\n            }\n   \
    \     }\n        return stack.Count == 0;", "        // Implement me!\n      \
    \  return false;", "        Stack<char> stack = new Stack<char>();\n        foreach\
    \ (char c in brackets) {\n            if (c == '(')\n                stack.Push(c);\n\
    \            else if (c == ')') {\n                if (stack.Count == 0)\n   \
    \                 return false;\n                stack.Pop();\n            }\n\
    \        }\n        return stack.Count == 0;", "        bool ans = true;\n   \
    \     Stack<char> st = new Stack<char>();\n        foreach (char ch in brackets)\
    \ {\n            if (ch == '(') {\n                st.Push(ch);\n            }\
    \ else {\n                if (st.Count == 0) {\n                    ans = false;\n\
    \                    break;\n                }\n                st.Pop();\n  \
    \          }\n        }\n        if (st.Count != 0) ans = false;\n        return\
    \ ans;", "        int openCount = 0;\n        int closeCount = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                openCount++;\n\
    \            } else if (c == ')') {\n                closeCount++;\n         \
    \   }\n            if (closeCount > openCount) {\n                return false;\n\
    \            }\n        }\n        return openCount == closeCount;", "       \
    \ int k = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n          \
    \  if (brackets[i] == '(') k++;\n            else k--;\n            if (k < 0)\
    \ return false;\n        }\n        return k == 0;", "        Stack<string> stack\
    \ = new Stack<string>();\n        if (brackets[0] == ')') {\n            return\
    \ false;\n        }\n        for (int i = 0; i < brackets.Length; i++) {\n   \
    \         if (brackets[i] == '(') {\n                stack.Push(\"(\");\n    \
    \        } else {\n                if (stack.Count == 0) {\n                 \
    \   return false;\n                }\n                stack.Pop();\n         \
    \   }\n        }\n        if (stack.Count == 0) {\n            return true;\n\
    \        }\n        return false;", "        int openCount = 0;\n        for (int\
    \ i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(') {\n\
    \                openCount++;\n            } else if (brackets[i] == ')') {\n\
    \                openCount--;\n            }\n            if (openCount < 0) {\n\
    \                return false;\n            }\n        }\n        return openCount\
    \ == 0;", "        // your code here!\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(')\n  \
    \              count++;\n            else\n                count--;\n        \
    \    if (count < 0)\n                return false;\n        }\n        return\
    \ count == 0;", "        int balance = 0;\n        foreach (char c in brackets)\
    \ {\n            if (c == '(') balance++;\n            else if (c == ')') balance--;\n\
    \            if (balance < 0) return false;\n        }\n        return balance\
    \ == 0;", "        if (brackets.Length == 0) {\n            return true;\n   \
    \     }\n        if (brackets[0] == ')') {\n            return false;\n      \
    \  }\n        int openCount = 0;\n        int closeCount = 0;\n        for (int\
    \ i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '(') {\n\
    \                openCount++;\n            } else {\n                closeCount++;\n\
    \            }\n            if (closeCount > openCount) {\n                return\
    \ false;\n            }\n        }\n        return openCount == closeCount;",
  "        if (brackets.Length == 0) {\n            return true;\n        }\n    \
    \    int count = 0;\n        foreach (char c in brackets) {\n            if (c\
    \ == '(') {\n                count++;\n            } else if (c == ')') {\n  \
    \              count--;\n            }\n            if (count < 0) {\n       \
    \         return false;\n            }\n        }\n        return count == 0;",
  "        int counter = 0;\n        foreach (char c in brackets) {\n            if\
    \ (c == '(') {\n                counter++;\n            } else if (c == ')') {\n\
    \                counter--;\n            }\n            if (counter < 0) {\n \
    \               return false;\n            }\n        }\n        return counter\
    \ == 0;", "        int bal = 0;\n        foreach (char c in brackets) {\n    \
    \        if (c == '(') {\n                bal++;\n            } else {\n     \
    \           bal--;\n            }\n            if (bal < 0) {\n              \
    \  return false;\n            }\n        }\n        return bal == 0;", "     \
    \   int n = brackets.Length;\n        int numOpen = 0;\n        for (int i = 0;\
    \ i < n; i++) {\n            if (brackets[i] == '(') {\n                numOpen++;\n\
    \            } else {\n                numOpen--;\n            }\n           \
    \ if (numOpen < 0) {\n                return false;\n            }\n        }\n\
    \        return numOpen == 0;"]
stop_tokens:
- "\n    }\n"
