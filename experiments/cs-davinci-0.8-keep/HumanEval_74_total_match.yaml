name: HumanEval_74_total_match
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that accepts two lists of strings and returns\
  \ the list that has \n    // total number of chars in the all strings of the list\
  \ less than the other list.\n    // if the two lists have the same number of chars,\
  \ return the first list.\n    // Examples\n    // total_match([], []) \u279E []\n\
  \    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    // total_match(['hi',\
  \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    // total_match(['hi',\
  \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'],\
  \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    public static List<string> TotalMatch(List<string>\
  \ lst1, List<string> lst2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TotalMatch((new\
  \ List<string>()), (new List<string>())).Equals((new List<string>())));\n    Debug.Assert(TotalMatch((new\
  \ List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new\
  \ string[]{(string)\"hi\", (string)\"hi\"}))).Equals((new List<string>(new string[]{(string)\"\
  hi\", (string)\"hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"\
  hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hi\", (string)\"\
  hi\", (string)\"admin\", (string)\"project\"}))).Equals((new List<string>(new string[]{(string)\"\
  hi\", (string)\"admin\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new\
  \ string[]{(string)\"4\"})), (new List<string>(new string[]{(string)\"1\", (string)\"\
  2\", (string)\"3\", (string)\"4\", (string)\"5\"}))).Equals((new List<string>(new\
  \ string[]{(string)\"4\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new\
  \ string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"\
  hI\", (string)\"Hi\"}))).Equals((new List<string>(new string[]{(string)\"hI\", (string)\"\
  Hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"\
  hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"\
  hi\", (string)\"hi\"}))).Equals((new List<string>(new string[]{(string)\"hI\", (string)\"\
  hi\", (string)\"hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"\
  hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"\
  hi\", (string)\"hii\"}))).Equals((new List<string>(new string[]{(string)\"hi\",\
  \ (string)\"admin\"}))));\n    Debug.Assert(TotalMatch((new List<string>()), (new\
  \ List<string>(new string[]{(string)\"this\"}))).Equals((new List<string>())));\n\
  \    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"this\"})),\
  \ (new List<string>())).Equals((new List<string>())));\n    }\n\n}\n"
completions: ["        int lst1sum = 0;\n        int lst2sum = 0;\n        foreach\
    \ (string s in lst1) {\n            lst1sum += s.Length;\n        }\n        foreach\
    \ (string s in lst2) {\n            lst2sum += s.Length;\n        }\n        if\
    \ (lst1sum <= lst2sum) {\n            return lst1;\n        } else {\n       \
    \     return lst2;\n        }", "        List<string> list = new List<string>();\n\
    \        int count1 = 0;\n        int count2 = 0;\n        for (int i = 0; i <\
    \ lst1.Count; i++) {\n            count1 += lst1[i].Length;\n        }\n     \
    \   for (int i = 0; i < lst2.Count; i++) {\n            count2 += lst2[i].Length;\n\
    \        }\n        if (count1 < count2)\n            list = lst1;\n        else\
    \ if (count1 > count2)\n            list = lst2;\n        else if (count1 == count2)\n\
    \            list = lst1;\n        return list;", "        int sum1 = 0;\n   \
    \     int sum2 = 0;\n        foreach (string s in lst1) {\n            sum1 +=\
    \ s.Length;\n        }\n        foreach (string s in lst2) {\n            sum2\
    \ += s.Length;\n        }\n        if (sum1 < sum2) {\n            return lst1;\n\
    \        } else {\n            return lst2;\n        }", "        if (lst1.Count\
    \ > lst2.Count) {\n            var lst1c = lst1.Aggregate(string.Empty, (current,\
    \ s) => current + s).Length;\n            var lst2c = lst2.Aggregate(string.Empty,\
    \ (current, s) => current + s).Length;\n            return lst1c > lst2c ? lst2\
    \ : lst1;\n        } else {\n            var lst1c = lst1.Aggregate(string.Empty,\
    \ (current, s) => current + s).Length;\n            var lst2c = lst2.Aggregate(string.Empty,\
    \ (current, s) => current + s).Length;\n            return lst1c > lst2c ? lst2\
    \ : lst1;\n        }", "        int count1 = 0;\n        int count2 = 0;\n   \
    \     foreach (string s in lst1) {\n            count1 += s.Length;\n        }\n\
    \        foreach (string s in lst2) {\n            count2 += s.Length;\n     \
    \   }\n        if (count1 < count2) {\n            return lst1;\n        } else\
    \ {\n            return lst2;\n        }", "        var lst1Chars = lst1.Select(s\
    \ => s.Length).Sum();\n        var lst2Chars = lst2.Select(s => s.Length).Sum();\n\
    \        return lst1Chars > lst2Chars ? lst2 : lst1;", '        return (lst1.Sum(str
    => str.Length) < lst2.Sum(str => str.Length)) ? lst1 : lst2;', "        int tot1\
    \ = 0;\n        int tot2 = 0;\n        for (int i = 0; i < lst1.Count; i++) {\n\
    \            tot1 += lst1[i].Length;\n        }\n        for (int i = 0; i < lst2.Count;\
    \ i++) {\n            tot2 += lst2[i].Length;\n        }\n        if (tot1 < tot2)\
    \ {\n            return lst1;\n        } else {\n            return lst2;\n  \
    \      }", "        var sum1 = lst1.Sum(x => x.Length);\n        var sum2 = lst2.Sum(x\
    \ => x.Length);\n        return sum1 <= sum2 ? lst1 : lst2;", "        int number1\
    \ = 0;\n        int number2 = 0;\n        for (int i = 0; i < lst1.Count; i++)\
    \ {\n            number1 += lst1[i].Length;\n        }\n        for (int i = 0;\
    \ i < lst2.Count; i++) {\n            number2 += lst2[i].Length;\n        }\n\
    \        if (number1 < number2) {\n            return lst1;\n        } else {\n\
    \            return lst2;\n        }", '        return null;', "        // return\
    \ lst1.Sum(s => s.Length) < lst2.Sum(s => s.Length) ? lst1 : lst2;\n        int\
    \ sum1 = 0;\n        foreach (string s in lst1) {\n            sum1 += s.Length;\n\
    \        }\n        int sum2 = 0;\n        foreach (string s in lst2) {\n    \
    \        sum2 += s.Length;\n        }\n        return sum1 < sum2 ? lst1 : lst2;",
  "        int lst1Len = 0;\n        int lst2Len = 0;\n        foreach (string s in\
    \ lst1) {\n            lst1Len += s.Length;\n        }\n        foreach (string\
    \ s in lst2) {\n            lst2Len += s.Length;\n        }\n        if (lst1Len\
    \ <= lst2Len) return lst1;\n        return lst2;", '        return lst1.Sum(i
    => i.Length) < lst2.Sum(i => i.Length) ? lst1 : lst2;', "        int lst1Count\
    \ = 0;\n        int lst2Count = 0;\n        foreach (string item in lst1) {\n\
    \            lst1Count += item.Length;\n        }\n        foreach (string item\
    \ in lst2) {\n            lst2Count += item.Length;\n        }\n        return\
    \ lst1Count < lst2Count ? lst1 : lst2;", "        var totalChars1 = lst1.Sum(str\
    \ => str.Length);\n        var totalChars2 = lst2.Sum(str => str.Length);\n  \
    \      return totalChars1 < totalChars2 ? lst1 : lst2;", "        int first =\
    \ lst1.Sum(x => x.Length);\n        int second = lst2.Sum(x => x.Length);\n  \
    \      return first < second ? lst1 : second < first ? lst2 : lst1;", "      \
    \  int lst1CharCount = 0;\n        int lst2CharCount = 0;\n        foreach (string\
    \ s in lst1) {\n            lst1CharCount += s.Length;\n        }\n        foreach\
    \ (string s in lst2) {\n            lst2CharCount += s.Length;\n        }\n  \
    \      if (lst1CharCount < lst2CharCount) {\n            return lst1;\n      \
    \  } else {\n            return lst2;\n        }", "        int len1 = 0;\n  \
    \      foreach (string i in lst1) len1 += i.Length;\n        int len2 = 0;\n \
    \       foreach (string i in lst2) len2 += i.Length;\n        if (len1 == len2)\
    \ return lst1;\n        return len1 < len2 ? lst1 : lst2;", '        return null;']
stop_tokens:
- "\n    }\n"
