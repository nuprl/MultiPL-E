name: HumanEval_85_add
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a non-empty list of integers lst. add the even elements\
  \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
  \    public static long Add(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
  \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
  \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
  \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
  \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
  \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
completions: ['        return lst.Where((el, i) => i % 2 == 1 && el % 2 == 0).Sum();',
  "        // Write your code here\n        long result = 0;\n        for (int i =\
    \ 0; i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n\
    \                result += lst[i];\n            }\n        }\n        return result;",
  "        if (lst.Count == 0) {\n            return 0;\n        }\n        long sum\
    \ = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 ==\
    \ 1 && lst[i] % 2 == 0) {\n                sum += lst[i];\n            }\n   \
    \     }\n        return sum;", "        // your code here\n        var result\
    \ = lst.Select((v, i) => i % 2 == 1 && v % 2 == 0 ? v : 0).Sum();\n        return\
    \ result;", "        long res = 0;\n        for (int i = 0; i < lst.Count; i +=\
    \ 2) {\n            if (lst[i] % 2 == 0) {\n                res += lst[i];\n \
    \           }\n        }\n        return res;", "        long sum = 0;\n     \
    \   for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i]\
    \ % 2 == 0) {\n                sum += lst[i];\n            }\n        }\n    \
    \    return sum;", "        // your code here\n        long sum = 0;\n       \
    \ int index = 1;\n        foreach (long element in lst) {\n            if (element\
    \ % 2 == 0 && index % 2 != 0) {\n                sum += element;\n           \
    \ }\n            index++;\n        }\n        return sum;", "        long sum\
    \ = 0;\n        for (int i = 0; i < lst.Count; i += 2) {\n            sum += lst[i];\n\
    \        }\n        return sum;", "        long ret = 0;\n        for (int i =\
    \ 0; i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n\
    \                ret += lst[i];\n            }\n        }\n        return ret;",
  "        long sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n        \
    \    if (i % 2 == 1 && lst[i] % 2 == 0)\n                sum += lst[i];\n    \
    \    }\n        return sum;", "        long result = 0;\n        for (int i =\
    \ 0; i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0)\n \
    \               result += lst[i];\n        }\n        return result;", "     \
    \   int res = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if\
    \ (i % 2 == 1 && lst[i] % 2 == 0) {\n                res += lst[i];\n        \
    \    }\n        }\n        return res;", '        return lst.Where((x, i) => i
    % 2 == 1 && x % 2 == 0).Sum();', '        return lst.Where((number, index) =>
    index % 2 == 1 && number % 2 == 0).Sum();', '        return lst.Where((x, i) =>
    i % 2 == 1 && x % 2 == 0).Sum();', "        // Because we want to ignore the first\
    \ element, we start from 1\n        // We continue until \"i < lst.Count\" because\
    \ we are interested in finding the last index\n        // We use i+2 because that\
    \ gives us the index at an odd index. \n        long sum = 0;\n        for (int\
    \ i = 1; i < lst.Count; i+=2) {\n            // Since we know that the index is\
    \ at an odd number, we can only care about even numbers.\n            if (lst[i]\
    \ % 2 == 0) {\n                sum += lst[i];\n            }\n        }\n    \
    \    return sum;", "        long sum = 0;\n        for (long i = 0; i < lst.Count;\
    \ i += 2) {\n            sum += lst[(int)i];\n        }\n        return sum;",
  "        long sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n        \
    \    if (i % 2 == 1 && lst[i] % 2 == 0)\n                sum += lst[i];\n    \
    \    }\n        return sum;", "        long sum = 0;\n        for (int i = 0;\
    \ i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0)\n    \
    \            sum += lst[i];\n        }\n        return sum;", "        long sum\
    \ = 0;\n        for (int i = 0; i < lst.Count; i += 2) {\n            if (lst[i]\
    \ % 2 == 0) {\n                sum += lst[i];\n            }\n        }\n    \
    \    return sum;"]
stop_tokens:
- "\n    }\n"
