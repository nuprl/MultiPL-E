name: HumanEval_27_flip_case
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // For a given string, flip lowercase characters to uppercase and\
  \ uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n    public\
  \ static string FlipCase(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
  \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
  )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\")).Equals((\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        StringBuilder sb = new StringBuilder();\n        foreach (char\
    \ ch in str) {\n            if (char.IsUpper(ch))\n                sb.Append(char.ToLower(ch));\n\
    \            else\n                sb.Append(char.ToUpper(ch));\n        }\n \
    \       return sb.ToString();", "        var result = new char[str.Length];\n\
    \        for (int i = 0; i < str.Length; i++) {\n            var ch = str[i];\n\
    \            result[i] = char.IsLower(ch) ? char.ToUpper(ch) : char.ToLower(ch);\n\
    \        }\n        return new string(result);", "        string output = \"\"\
    ;\n        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (char.IsUpper(chars[i])) {\n                output +=\
    \ char.ToLower(chars[i]);\n            } else {\n                output += char.ToUpper(chars[i]);\n\
    \            }\n        }\n        return output;", "        StringBuilder sb\
    \ = new StringBuilder();\n        foreach (char c in str) {\n            if (char.IsUpper(c))\
    \ {\n                sb.Append(char.ToLower(c));\n            } else {\n     \
    \           sb.Append(char.ToUpper(c));\n            }\n        }\n        return\
    \ sb.ToString();", "        var output = \"\";\n        foreach (var c in str)\
    \ {\n            var up = c.ToString().ToUpper();\n            var low = c.ToString().ToLower();\n\
    \            if (c.ToString() == up)\n                output += low;\n       \
    \     else\n                output += up;\n        }\n        return output;",
  '        return String.Join("", str.Select(x => Char.IsUpper(x) ? Char.ToLower(x)
    : Char.ToUpper(x)));', '        return null;', '        return new string(str.Select(x
    => char.IsUpper(x) ? char.ToLower(x) : char.ToUpper(x)).ToArray());', "      \
    \  string s = \"\";\n        for (int i = 0; i < str.Length; i++) {\n        \
    \    if (str[i] >= 'a' && str[i] <= 'z') {\n                s += char.ToUpper(str[i]);\n\
    \            } else if (str[i] >= 'A' && str[i] <= 'Z') {\n                s +=\
    \ char.ToLower(str[i]);\n            } else {\n                s += str[i];\n\
    \            }\n        }\n        return s;", '        return string.Join("",
    str.Select(x => Char.IsUpper(x) ? Char.ToLower(x) : Char.ToUpper(x)));', '        return
    String.Concat(str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)));',
  '        return string.Concat(str.Select(c => char.IsUpper(c) ? char.ToLower(c)
    : char.ToUpper(c)));', "        char[] chars = str.ToCharArray();\n        for\
    \ (int i = 0; i < chars.Length; i++) {\n            if (char.IsUpper(chars[i]))\
    \ {\n                chars[i] = char.ToLower(chars[i]);\n            } else if\
    \ (char.IsLower(chars[i])) {\n                chars[i] = char.ToUpper(chars[i]);\n\
    \            }\n        }\n        return new string(chars);", "        string\
    \ result = \"\";\n        foreach (char c in str) {\n            if (Char.IsUpper(c))\
    \ {\n                result += Char.ToLower(c);\n            } else {\n      \
    \          result += Char.ToUpper(c);\n            }\n        }\n        return\
    \ result;", "        var result = new StringBuilder();\n        foreach (var c\
    \ in str) {\n            result.Append(char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c));\n\
    \        }\n        return result.ToString();", '        return new string(str.Select(x
    => char.IsLower(x) ? char.ToUpper(x) : char.ToLower(x)).ToArray());', "      \
    \  var sb = new StringBuilder();\n        foreach (var c in str) {\n         \
    \   if (char.IsUpper(c)) {\n                sb.Append(char.ToLower(c));\n    \
    \        } else {\n                sb.Append(char.ToUpper(c));\n            }\n\
    \        }\n        return sb.ToString();", "        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in str) {\n            if (char.IsLower(c)) {\n     \
    \           sb.Append(char.ToUpper(c));\n            } else {\n              \
    \  sb.Append(char.ToLower(c));\n            }\n        }\n        return sb.ToString();",
  "        var buffer = new StringBuilder(str.Length);\n        foreach (var c in\
    \ str) {\n            if (Char.IsLower(c))\n                buffer.Append(Char.ToUpper(c));\n\
    \            else if (Char.IsUpper(c))\n                buffer.Append(Char.ToLower(c));\n\
    \            else\n                buffer.Append(c);\n        }\n        return\
    \ buffer.ToString();", "        string[] s = str.Split();\n        char[] strArr\
    \ = str.ToCharArray();\n        for (int i = 0; i < strArr.Length; i++) {\n  \
    \          if (Char.IsLower(strArr[i])) {\n                strArr[i] = Char.ToUpper(strArr[i]);\n\
    \            } else {\n                strArr[i] = Char.ToLower(strArr[i]);\n\
    \            }\n        }\n        return new string(strArr);"]
stop_tokens:
- "\n    }\n"
