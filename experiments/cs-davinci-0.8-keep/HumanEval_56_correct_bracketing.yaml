name: HumanEval_56_correct_bracketing
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return True\
  \ if every opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
  <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    // >>>\
  \ correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
  ><<>\")\n    // False\n    public static bool CorrectBracketing(string brackets)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
  <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
  \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
  <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
  <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n\
  \    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
  <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
  \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
  <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        int open = 0;\n        int closed = 0;\n        for (int i\
    \ = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n  \
    \              open++;\n            } else {\n                closed++;\n    \
    \        }\n            if (closed > open) {\n                return false;\n\
    \            }\n        }\n        return open == closed;", "        var level\
    \ = 0;\n        foreach (var ch in brackets) {\n            if (ch == '<') {\n\
    \                level++;\n            } else {\n                level--;\n  \
    \          }\n            if (level < 0) {\n                return false;\n  \
    \          }\n        }\n        return level == 0;", "        // replace the\
    \ line below with your code\n        int sum = 0;\n        for (int i = 0; i <\
    \ brackets.Length; i++) {\n            if (brackets[i] == '<') {\n           \
    \     sum++;\n            } else {\n                sum--;\n            }\n  \
    \          if (sum < 0) {\n                return false;\n            }\n    \
    \    }\n        if (sum == 0) {\n            return true;\n        } else {\n\
    \            return false;\n        }", "        var stack = new Stack<char>();\n\
    \        foreach (var c in brackets) {\n            if (c == '<') {\n        \
    \        stack.Push(c);\n            } else {\n                if (stack.Count\
    \ == 0) {\n                    return false;\n                }\n            \
    \    stack.Pop();\n            }\n        }\n        return stack.Count == 0;",
  "        int counter = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n\
    \            if (brackets[i] == '<') {\n                counter++;\n         \
    \   } else {\n                counter--;\n            }\n            if (counter\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ counter == 0;", "        int cnt = 0;\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                cnt++;\n            } else {\n\
    \                cnt--;\n            }\n            if (cnt < 0) return false;\n\
    \        }\n        return cnt == 0;", "        // Your code here.\n        int\
    \ open_count = 0;\n        foreach (char c in brackets) {\n            if (c ==\
    \ '<') {\n                open_count++;\n            } else {\n              \
    \  open_count--;\n            }\n            if (open_count < 0) {\n         \
    \       return false;\n            }\n        }\n        return open_count ==\
    \ 0;", '        return false;', "        return brackets.Count(c => c == '<')\
    \ == brackets.Count(c => c == '>');", "        int count = 0;\n        foreach\
    \ (char ch in brackets) {\n            count += (ch == '<') ? 1 : -1;\n      \
    \      if (count < 0) return false;\n        }\n        return count == 0;", " \
    \       int depth = 0;\n        foreach (char c in brackets) {\n            if\
    \ (c == '<') {\n                depth += 1;\n            } else if (c == '>')\
    \ {\n                depth -= 1;\n            }\n            if (depth < 0) {\n\
    \                return false;\n            }\n        }\n        return depth\
    \ == 0;", "        int balance = 0;\n        foreach (char c in brackets) {\n\
    \            if (c == '<') {\n                balance++;\n            } else if\
    \ (c == '>') {\n                balance--;\n            }\n            if (balance\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ balance == 0;", "        // count the number of open brackets remaining to be\
    \ matched\n        int open = 0;\n        foreach (char c in brackets) {\n   \
    \         if (c == '<') {\n                open++;\n            } else {\n   \
    \             open--;\n            }\n            if (open < 0) {\n          \
    \      return false;\n            }\n        }\n        return open == 0;", " \
    \       int cnt = 0;\n        foreach (char c in brackets) {\n            if (c\
    \ == '<') {\n                cnt++;\n            } else {\n                cnt--;\n\
    \            }\n            if (cnt < 0) {\n                return false;\n  \
    \          }\n        }\n        return cnt == 0;", "        int opened = 0;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         opened++;\n            } else {\n                opened--;\n       \
    \     }\n            if (opened < 0) {\n                return false;\n      \
    \      }\n        }\n        return opened == 0;", "        var stack = new Stack<char>();\n\
    \        foreach (var c in brackets) {\n            if (c == '<') {\n        \
    \        stack.Push(c);\n            } else {\n                if (stack.Count\
    \ == 0) {\n                    return false;\n                }\n            \
    \    stack.Pop();\n            }\n        }\n        return stack.Count == 0;",
  "        // count of the number of open brackets\n        int level = 0;\n     \
    \   foreach (char c in brackets) {\n            // If we see an open bracket,\n\
    \            // increase the level.\n            if (c == '<') {\n           \
    \     level++;\n            }\n            // If we see a closing bracket,\n \
    \           // decrease the level.\n            else if (c == '>') {\n       \
    \         level--;\n            }\n            // If we see anything that isn't\
    \ a bracket,\n            // return false.\n            else {\n             \
    \   return false;\n            }\n            // If we've seen too many closing\
    \ brackets,\n            // return false.\n            if (level < 0) {\n    \
    \            return false;\n            }\n        }\n        // If we've got\
    \ here and the level is zero,\n        // then all of the brackets were matched.\n\
    \        return level == 0;", "        // write this function.\n        int count\
    \ = 0;\n        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;", "        int balance =\
    \ 0;\n        foreach (char c in brackets) {\n            if (c == '<') {\n  \
    \              balance += 1;\n            } else if (c == '>') {\n           \
    \     balance -= 1;\n            }\n            if (balance < 0) {\n         \
    \       return false;\n            }\n        }\n        return balance == 0;",
  "        // TODO(you): create and return an instance of the class that you created.\n\
    \        return false;"]
stop_tokens:
- "\n    }\n"
