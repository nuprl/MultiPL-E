name: HumanEval_54_same_chars
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Check if two words have the same characters.\n    // >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddeddabc')\n    // True\n    // >>> same_chars('abcd', 'dddddddabc')\n\
  \    // True\n    // >>> same_chars('dddddddabc', 'abcd')\n    // True\n    // >>>\
  \ same_chars('eabcd', 'dddddddabc')\n    // False\n    // >>> same_chars('abcd',\
  \ 'dddddddabce')\n    // False\n    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
  \    // False\n    public static bool SameChars(string s0, string s1) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"\
  eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"\
  abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"\
  ), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\"\
  )) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n\
  \    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n\
  \    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n"
completions: ["        if (s0.Length != s1.Length) {\n            return false;\n\
    \        }\n        int maxAscii = 128;\n        int[] chars = new int[maxAscii];\n\
    \        foreach (char c in s0) {\n            chars[c]++;\n        }\n      \
    \  foreach (char c in s1) {\n            chars[c]--;\n        }\n        foreach\
    \ (int n in chars) {\n            if (n != 0) {\n                return false;\n\
    \            }\n        }\n        return true;", "        var c0 = s0.ToCharArray();\n\
    \        var c1 = s1.ToCharArray();\n        var diff = c0.Length - c1.Length;\n\
    \        if (diff != 0) {\n            return false;\n        }\n        Array.Sort(c0);\n\
    \        Array.Sort(c1);\n        var s0s = new string(c0);\n        var s1s =\
    \ new string(c1);\n        if (s0s == s1s) {\n            return true;\n     \
    \   }\n        return false;", "        var c0 = s0.ToCharArray();\n        var\
    \ c1 = s1.ToCharArray();\n        Array.Sort(c0);\n        Array.Sort(c1);\n \
    \       var s = new string(c0);\n        var t = new string(c1);\n        return\
    \ s == t;", "        int[] c0 = new int[256];\n        int[] c1 = new int[256];\n\
    \        foreach (char c in s0) c0[c]++;\n        foreach (char c in s1) c1[c]++;\n\
    \        for (int i = 0; i < 256; i++) {\n            if (c0[i] != c1[i]) return\
    \ false;\n        }\n        return true;", "        var chars = new int[26];\n\
    \        foreach (var c in s0) {\n            chars[c - 'a']++;\n        }\n \
    \       foreach (var c in s1) {\n            chars[c - 'a']--;\n        }\n  \
    \      return chars.All(a => a == 0);", "        var ch0 = s0.ToCharArray();\n\
    \        var ch1 = s1.ToCharArray();\n        Array.Sort(ch0);\n        Array.Sort(ch1);\n\
    \        return new string(ch0) == new string(ch1);", "        if (s0.Length !=\
    \ s1.Length) {\n            return false;\n        }\n        var dict0 = new\
    \ Dictionary<char, int>();\n        var dict1 = new Dictionary<char, int>();\n\
    \        foreach (var c in s0) {\n            if (!dict0.ContainsKey(c)) {\n \
    \               dict0[c] = 0;\n            }\n            dict0[c] += 1;\n   \
    \     }\n        foreach (var c in s1) {\n            if (!dict1.ContainsKey(c))\
    \ {\n                dict1[c] = 0;\n            }\n            dict1[c] += 1;\n\
    \        }\n        return dict0.Keys.All(x => dict0[x] == dict1[x]);", "    \
    \    int[] count = new int[26];\n        foreach (char c in s0) {\n          \
    \  count[c - 'a']++;\n        }\n        foreach (char c in s1) {\n          \
    \  count[c - 'a']--;\n        }\n        foreach (int c in count) {\n        \
    \    if (c != 0) {\n                return false;\n            }\n        }\n\
    \        return true;", "        int[] c0 = new int[26];\n        foreach (char\
    \ c in s0)\n            c0[c - 'a']++;\n        int[] c1 = new int[26];\n    \
    \    foreach (char c in s1)\n            c1[c - 'a']++;\n        for (int i =\
    \ 0; i < 26; i++)\n            if (c0[i] != c1[i])\n                return false;\n\
    \        return true;", "        if (s0.Length != s1.Length) return false;\n \
    \       int[] cnt = new int[26];\n        for (int i = 0; i < s0.Length; i++)\
    \ {\n            cnt[s0[i] - 'a']++;\n            cnt[s1[i] - 'a']--;\n      \
    \  }\n        for (int i = 0; i < 26; i++)\n            if (cnt[i] != 0) return\
    \ false;\n        return true;", "        int n0 = s0.Length;\n        int n1\
    \ = s1.Length;\n        int n = Math.Max(n0, n1);\n        int[] chars = new int[128];\n\
    \        for (int i = 0; i < n; i++) {\n            int c0 = 0;\n            if\
    \ (i < n0) {\n                c0 = s0[i];\n            }\n            int c1 =\
    \ 0;\n            if (i < n1) {\n                c1 = s1[i];\n            }\n\
    \            chars[c0]++;\n            chars[c1]--;\n        }\n        for (int\
    \ i = 0; i < 128; i++) {\n            if (chars[i] != 0) {\n                return\
    \ false;\n            }\n        }\n        return true;", "        var m0 = new\
    \ int[26];\n        var m1 = new int[26];\n        foreach (var c in s0) {\n \
    \           m0[c - 'a']++;\n        }\n        foreach (var c in s1) {\n     \
    \       m1[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n  \
    \          if (m0[i] != m1[i]) {\n                return false;\n            }\n\
    \        }\n        return true;", "        var a0 = s0.ToCharArray();\n     \
    \   var a1 = s1.ToCharArray();\n        var h0 = new Dictionary<char, int>();\n\
    \        var h1 = new Dictionary<char, int>();\n        for (int i = 0; i < a0.Length;\
    \ i++) {\n            var c = a0[i];\n            if (!h0.ContainsKey(c)) {\n\
    \                h0[c] = 0;\n            }\n            h0[c]++;\n        }\n\
    \        for (int i = 0; i < a1.Length; i++) {\n            var c = a1[i];\n \
    \           if (!h1.ContainsKey(c)) {\n                h1[c] = 0;\n          \
    \  }\n            h1[c]++;\n        }\n        foreach (var c in h0.Keys) {\n\
    \            if (!h1.ContainsKey(c)) {\n                return false;\n      \
    \      }\n            if (h0[c] != h1[c]) {\n                return false;\n \
    \           }\n        }\n        foreach (var c in h1.Keys) {\n            if\
    \ (!h0.ContainsKey(c)) {\n                return false;\n            }\n     \
    \       if (h0[c] != h1[c]) {\n                return false;\n            }\n\
    \        }\n        return true;", '        return s0.OrderBy(x => x).SequenceEqual(s1.OrderBy(x
    => x));', "        // YOUR CODE HERE\n        return false;", "        var map0\
    \ = new Dictionary<char, int>();\n        foreach (var c in s0) {\n          \
    \  if (!map0.ContainsKey(c)) map0[c] = 0;\n            map0[c]++;\n        }\n\
    \        var map1 = new Dictionary<char, int>();\n        foreach (var c in s1)\
    \ {\n            if (!map1.ContainsKey(c)) map1[c] = 0;\n            map1[c]++;\n\
    \        }\n        foreach (var x in map0) {\n            if (!map1.ContainsKey(x.Key)\
    \ || map1[x.Key] != x.Value) {\n                return false;\n            }\n\
    \        }\n        foreach (var x in map1) {\n            if (!map0.ContainsKey(x.Key)\
    \ || map0[x.Key] != x.Value) {\n                return false;\n            }\n\
    \        }\n        return true;", "        //if (s0.Length != s1.Length) {\n\
    \        //    return false;\n        //}\n        //Dictionary<char, int> freq0\
    \ = new Dictionary<char, int>();\n        //foreach (char c in s0) {\n       \
    \ //    if (!freq0.ContainsKey(c)) {\n        //        freq0[c] = 0;\n      \
    \  //    }\n        //    freq0[c]++;\n        //}\n        //Dictionary<char,\
    \ int> freq1 = new Dictionary<char, int>();\n        //foreach (char c in s1)\
    \ {\n        //    if (!freq1.ContainsKey(c)) {\n        //        freq1[c] =\
    \ 0;\n        //    }\n        //    freq1[c]++;\n        //}\n        //if (freq0.Count\
    \ != freq1.Count) {\n        //    return false;\n        //}\n        //foreach\
    \ (var kv in freq0) {\n        //    if (!freq1.ContainsKey(kv.Key)) {\n     \
    \   //        return false;\n        //    }\n        //    if (freq1[kv.Key]\
    \ != kv.Value) {\n        //        return false;\n        //    }\n        //}\n\
    \        //return true;\n        return (s0.OrderBy(c => c).SequenceEqual(s1.OrderBy(c\
    \ => c)));", "        if (s0.Length != s1.Length) return false;\n        int[]\
    \ counts = new int[256];\n        foreach (char c in s0) {\n            counts[c]++;\n\
    \        }\n        foreach (char c in s1) {\n            counts[c]--;\n     \
    \   }\n        foreach (int c in counts) {\n            if (c != 0) return false;\n\
    \        }\n        return true;", "        var m0 = new Dictionary<char, int>();\n\
    \        var m1 = new Dictionary<char, int>();\n        foreach (var c in s0)\
    \ {\n            if (!m0.ContainsKey(c)) {\n                m0[c] = 0;\n     \
    \       }\n            m0[c] += 1;\n        }\n        foreach (var c in s1) {\n\
    \            if (!m1.ContainsKey(c)) {\n                m1[c] = 0;\n         \
    \   }\n            m1[c] += 1;\n        }\n        foreach (var kv in m0) {\n\
    \            if (!m1.ContainsKey(kv.Key)) {\n                return false;\n \
    \           }\n            if (m1[kv.Key] != kv.Value) {\n                return\
    \ false;\n            }\n        }\n        foreach (var kv in m1) {\n       \
    \     if (!m0.ContainsKey(kv.Key)) {\n                return false;\n        \
    \    }\n            if (m0[kv.Key] != kv.Value) {\n                return false;\n\
    \            }\n        }\n        return true;", "        return s0.Length ==\
    \ s1.Length &&\n               s0.Length == s0.Union(s1).Count();"]
stop_tokens:
- "\n    }\n"
