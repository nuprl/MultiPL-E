name: HumanEval_87_get_row
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n   \
  \ // which is similar to matrix, however, unlike matrices,\n    // each row may\
  \ contain a different number of columns.\n    // Given lst, and integer x, find\
  \ integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2)\
  \ ...] such that\n    // each tuple is a coordinate - (row, columns), starting with\
  \ 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also,\
  \ sort coordinates of the row by columns in descending order.\n    // Examples:\n\
  \    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n\
  \    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1)\
  \ == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static\
  \ List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),\
  \ (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,\
  \ long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,\
  \ long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,\
  \ (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,\
  \ long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,\
  \ (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,\
  \ long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,\
  \ long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,\
  \ long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,\
  \ long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,\
  \ long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),\
  \ (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),\
  \ (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new\
  \ List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,\
  \ long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
completions: ["        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(new Tuple<long, long>(i, j));\n                }\n       \
    \     }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1 !=\
    \ b.Item1) {\n                return a.Item1 < b.Item1 ? -1 : 1;\n           \
    \ }\n            return a.Item2 > b.Item2 ? -1 : 1;\n        });\n        return\
    \ result;", "        // Fill in your code here\n        return null;", "     \
    \   // (row, column) => (y, x)\n        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        long y = 0;\n        foreach (List<long> row in lst) {\n\
    \            long x = 0;\n            foreach (long i in row) {\n            \
    \    if (i == x) {\n                    result.Add(new Tuple<long, long>(y, x));\n\
    \                }\n                x++;\n            }\n            y++;\n  \
    \      }\n        result.Sort((a, b) => {\n            if (a.Item1 < b.Item1)\
    \ return -1;\n            if (a.Item1 > b.Item1) return 1;\n            if (a.Item2\
    \ > b.Item2) return -1;\n            if (a.Item2 < b.Item2) return 1;\n      \
    \      return 0;\n        });\n        return result;", "        List<Tuple<long,\
    \ long>> tl = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            var row = lst[i];\n            for (int j = 0; j < row.Count;\
    \ j++) {\n                if (row[j] == x) {\n                    tl.Add(new Tuple<long,\
    \ long>(i, j));\n                }\n            }\n        }\n        tl.Sort((a,\
    \ b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return tl;", "        var ret = new List<Tuple<long, long>>();\n    \
    \    for (long i = 0; i < lst.Count; i++) {\n            for (long j = 0; j <\
    \ lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j] == x) {\n\
    \                    ret.Add(new Tuple<long, long>(i, j));\n                }\n\
    \            }\n        }\n        ret.Sort((Tuple<long, long> a, Tuple<long,\
    \ long> b) => {\n            if (a.Item1 == b.Item1) {\n                return\
    \ b.Item2.CompareTo(a.Item2);\n            }\n            return a.Item1.CompareTo(b.Item1);\n\
    \        });\n        return ret;", "        List<Tuple<long, long>> res = new\
    \ List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++) {\n\
    \            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]\
    \ == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n       \
    \         }\n            }\n        }\n        res.Sort((a, b) => a.Item1 < b.Item1\
    \ ? -1 : (a.Item1 > b.Item1 ? 1 :\n                    a.Item2 > b.Item2 ? -1\
    \ : (a.Item2 < b.Item2 ? 1 : 0)));\n        return res;", "        var res = new\
    \ List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++) {\n\
    \            var row = lst[i];\n            for (int j = 0; j < row.Count; j++)\
    \ {\n                if (row[j] == x) {\n                    res.Add(new Tuple<long,\
    \ long>(i, j));\n                }\n            }\n        }\n        return res;",
  "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> sublst in lst) {\n            for (int i = 0; i < sublst.Count;\
    \ i++) {\n                if (sublst[i] == x) {\n                    ret.Add(new\
    \ Tuple<long, long>(lst.IndexOf(sublst), i));\n                }\n           \
    \ }\n        }\n        return ret;", "        if (lst == null) {\n          \
    \  return new List<Tuple<long, long>>();\n        }\n        // TODO: Implement\
    \ Me\n        return null;", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 res.Add(new Tuple<long, long>(i, j));\n                }\n \
    \           }\n        }\n        res.Sort((x1, x2) => x1.Item1 == x2.Item1 ?\
    \ x2.Item2.CompareTo(x1.Item2) : x1.Item1.CompareTo(x2.Item1));\n        return\
    \ res;", "        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x)\n              \
    \      row.Add(new Tuple<long, long>(i, j));\n            }\n        }\n     \
    \   var sorted_row = row.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();\n\
    \        return sorted_row;", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            List<long>\
    \ row = lst[i];\n            for (int j = 0; j < row.Count; j++) {\n         \
    \       if (row[j] == x)\n                    res.Add(new Tuple<long, long>(i,\
    \ j));\n            }\n        }\n        res.Sort((a, b) => {\n            if\
    \ (a.Item1 == b.Item1)\n                return b.Item2.CompareTo(a.Item2);\n \
    \           return a.Item1.CompareTo(b.Item1);\n        });\n        return res;",
  "        var ret = new List<Tuple<long, long>>();\n        for (long i = 0; i <\
    \ lst.Count; i++) {\n            for (long j = 0; j < lst[(int)i].Count; j++)\
    \ {\n                if (lst[(int)i][(int)j] == x) {\n                    ret.Add(new\
    \ Tuple<long, long>(i, j));\n                }\n            }\n        }\n   \
    \     ret.Sort((a, b) => a.Item1 == b.Item1 ? b.Item2.CompareTo(a.Item2) : a.Item1.CompareTo(b.Item1));\n\
    \        return ret;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        long row = 0;\n        foreach (List<long> temp in lst) {\n\
    \            long col = 0;\n            foreach (long num in temp) {\n       \
    \         if (num == x) {\n                    result.Add(new Tuple<long, long>(row,\
    \ col));\n                }\n                col++;\n            }\n         \
    \   row++;\n        }\n        result.Sort((a, b) =>\n            {\n        \
    \        if (a.Item1 != b.Item1)\n                    return a.Item1.CompareTo(b.Item1);\n\
    \                else\n                    return -a.Item2.CompareTo(b.Item2);\n\
    \            });\n        return result;", "        var res = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n       \
    \         }\n            }\n        }\n        res.Sort((a, b) => {\n        \
    \    if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return res;", "        // your code here\n        var result = new List<Tuple<long,\
    \ long>>();\n        // filling result\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n             \
    \   if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i,\
    \ j));\n                }\n            }\n        }\n        // sorting result\n\
    \        result.Sort((x1, x2) => {\n            if (x1.Item1 != x2.Item1) {\n\
    \                return x1.Item1.CompareTo(x2.Item1);\n            } else {\n\
    \                return x2.Item2.CompareTo(x1.Item2);\n            }\n       \
    \ });\n        return result;", "        // BEGIN (write your solution here)\n\
    \        List<Tuple<long, long>> list = new List<Tuple<long, long>>();\n     \
    \   long i = 0;\n        long j = 0;\n        foreach (var row in lst)\n     \
    \   {\n            j = 0;\n            foreach (var column in row)\n         \
    \   {\n                if (column == x)\n                {\n                 \
    \   list.Add(new Tuple<long, long>(i, j));\n                }\n              \
    \  j++;\n            }\n            i++;\n        }\n        var result = list.OrderBy(a\
    \ => a.Item1).ThenByDescending(a => a.Item2).ToList();\n        return result;\n\
    \        // END", "        var result = new List<Tuple<long, long>>();\n     \
    \   for (long row = 0; row < lst.Count; row++) {\n            for (long col =\
    \ 0; col < lst[row].Count; col++) {\n                if (lst[row][col] == x) {\n\
    \                    result.Add(new Tuple<long, long>(row, col));\n          \
    \      }\n            }\n        }\n        return result.OrderBy(v => v.Item1).ThenByDescending(v\
    \ => v.Item2).ToList();", "        return lst.Select((e, i) => Tuple.Create(i,\
    \ e.FindLastIndex(n => n == x)))\n                  .Where(t => t.Item2 != -1)\n\
    \                  .ToList();", "        // your code here\n        return null;"]
stop_tokens:
- "\n    }\n"
