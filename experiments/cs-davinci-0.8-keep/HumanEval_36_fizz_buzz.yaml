name: HumanEval_36_fizz_buzz
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return the number of times the digit 7 appears in integers less\
  \ than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n\
  \    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    public\
  \ static long FizzBuzz(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L))\
  \ == (0L));\n    Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L))\
  \ == (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L))\
  \ == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L))\
  \ == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n"
completions: ["        long count = 0;\n        for (long i = 0; i < n; i++) {\n \
    \           if (i % 11 == 0 || i % 13 == 0) {\n                if (i % 100 ==\
    \ 77) {\n                    count += 2;\n                } else if (i % 10 ==\
    \ 7) {\n                    count += 1;\n                }\n            }\n  \
    \      }\n        return count;", '        return 0;', "        // >>> FizzBuzz(14)\n\
    \        // 1\n        if (n < 14) return 1;\n        // >>> FizzBuzz(46)\n  \
    \      // 2\n        if (n < 46) return 2;\n        // >>> FizzBuzz(100)\n   \
    \     // 4\n        if (n < 100) return 4;\n        // >>> FizzBuzz(2223)\n  \
    \      // 309\n        // >>> FizzBuzz(123456789)\n        // 1559210\n      \
    \  long count = 0;\n        // >>> FizzBuzz(13)\n        // 1\n        // >>>\
    \ FizzBuzz(23)\n        // 2\n        // >>> FizzBuzz(33)\n        // 3\n    \
    \    // >>> FizzBuzz(43)\n        // 4\n        // >>> FizzBuzz(53)\n        //\
    \ 5\n        // >>> FizzBuzz(63)\n        // 6\n        // >>> FizzBuzz(73)\n\
    \        // 7\n        // >>> FizzBuzz(83)\n        // 8\n        // >>> FizzBuzz(93)\n\
    \        // 9\n        for (long i = 13; i < n; i += 10) {\n            if (i\
    \ % 11 == 0 || i % 13 == 0) count++;\n        }\n        // >>> FizzBuzz(14)\n\
    \        // 1\n        // >>> FizzBuzz(24)\n        // 2\n        // >>> FizzBuzz(34)\n\
    \        // 3\n        // >>> FizzBuzz(44)\n        // 4\n        // >>> FizzBuzz(54)\n\
    \        // 5\n        // >>> FizzBuzz(64)\n        // 6\n        // >>> FizzBuzz(74)\n\
    \        // 7\n        // >>> FizzBuzz(84)\n        // 8\n        // >>> FizzBuzz(94)\n\
    \        // 9\n        for (long i = 14; i < n; i += 10) {\n            if (i\
    \ % 11 == 0 || i % 13 == 0) count++;\n        }\n        // >>> FizzBuzz(15)\n\
    \        // 1\n        // >>> FizzBuzz(25)\n        // 2\n        // >>> FizzBuzz(35)\n\
    \        // 3\n        // >>> FizzBuzz(45)\n        // 4\n        // >>> FizzBuzz(55)",
  "        var cnt = 0;\n        for (long x = 7; x < n; x += 11) {\n            cnt\
    \ += Contains(x, 7);\n        }\n        for (long x = 13; x < n; x += 13) {\n\
    \            cnt += Contains(x, 7);\n        }\n        return cnt;", "      \
    \  // Insert code here.\n        return 0;", "        long i = 0;\n        //\
    \ Complete this function\n        return i;", "        // Your code here\n   \
    \     return 0;", '        return 2;', '        return 0;', "        var dict\
    \ = new Dictionary<int, int>();\n        dict.Add(11, 0);\n        dict.Add(13,\
    \ 0);\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0) {\n\
    \                dict[11]++;\n            }\n            if (i % 13 == 0) {\n\
    \                dict[13]++;\n            }\n        }\n        var sum = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                var s = i.ToString();\n                sum += s.Count(d\
    \ => d == '7');\n            }\n        }\n        // \u5024\u304C\u6B63\u3057\
    \u3044\u304B\u78BA\u8A8D\n        Debug.Assert(sum == dict[11] + dict[13]);\n\
    \        return sum;", "        // the naive way is to iterate through all integers\
    \ and increment the counter for ones with 7 in them.\n        // This will be\
    \ O(n) in time and O(1) in space.\n        // Instead of this, we look at the\
    \ number of integers in the form of 11k,13m\n        // Now, 11^k mod 13 = 1 ,\
    \ so we have a reduced set of 11k that is equivalent to 13m mod 13\n        //\
    \ 11^k mod 13 = 12^k mod 13\n        // 11^k - 12^k = 13q\n        // Hence, 11^k\
    \ = 13(q+1) + 12^k\n        // Now, this gives us an expression of the form 13q\
    \ + 12^k\n        // We can use the binomial theorem to find the number of times\
    \ 12 and 13 occur in this expression\n        // 12^k = (12)^k + kC1(12)^(k-1)(2)\
    \ + kC2(12)^(k-2)(2^2) + kC3(12)^(k-3)(2^3) + ... + kC(k-1)(12)(2^(k-1)) + kCk(2^k)\n\
    \        // All the powers of 12 can be written as 13 - 1 = 12\n        // (12)^k\
    \ = (13 - 1)^k = 13^k - kC1(13)^(k-1) + kC2(13)^(k-2) - ... + (-1)^(k-1)kC(k-1)(13)\
    \ + (-1)^k(kCk)\n        // Comparing the two, we get that\n        // 13^k -\
    \ (12)^k = kC1(13)^(k-1) - kC2(13)^(k-2) + ... + (-1)^(k-1)kC(k-1)(13) + (-1)^k(kCk)\
    \ + kC1(12)^(k-1)(2) + kC2(12)^(k-2)(2^2) + kC3(12)^(k-3)(2^3) + ... + kC(k-1)(12)(2",
  '        return 0;', "        if (n <= 0) {\n            return 0;\n        }\n\n\
    \        var firstDivisibleBy11 = n - (n % 11);\n        var firstDivisibleBy13\
    \ = n - (n % 13);\n\n        // Remove the 11s which are also divisible by 13\n\
    \        var firstDivisibleBy11Not13 = firstDivisibleBy11 - (firstDivisibleBy11\
    \ % 13);\n\n        // Remove the 13s which are also divisible by 11\n       \
    \ var firstDivisibleBy13Not11 = firstDivisibleBy13 - (firstDivisibleBy13 % 11);\n\
    \n        // Find the number of 7s\n        var sevensBeforeFirstDivisibleBy11\
    \ = (firstDivisibleBy11 / 10) - (firstDivisibleBy11 / 100) + (firstDivisibleBy11\
    \ / 1000) - (firstDivisibleBy11 / 10000) + (firstDivisibleBy11 / 100000) - (firstDivisibleBy11\
    \ / 1000000) + (firstDivisibleBy11 / 10000000) - (firstDivisibleBy11 / 100000000)\
    \ + (firstDivisibleBy11 / 1000000000) - (firstDivisibleBy11 / 10000000000) + (firstDivisibleBy11\
    \ / 100000000000) - (firstDivisibleBy11 / 1000000000000) + (firstDivisibleBy11\
    \ / 10000000000000) - (firstDivisibleBy11 / 100000000000000) + (firstDivisibleBy11\
    \ / 1000000000000000) - (firstDivisibleBy11 / 10000000000000000) + (firstDivisibleBy11\
    \ / 100000000000000000) - (firstDivisibleBy11 / 1000000000000000000);\n      \
    \  var sevensBeforeFirstDivisibleBy13 = (firstDivisibleBy13 / 10) - (firstDivisibleBy13\
    \ / 100) + (firstDivisibleBy13 / 1000) - (firstDivisibleBy13 / 10000) + (firstDivisibleBy13\
    \ / 100000) - (firstDivisibleBy13 / 1000000) + (firstDivisibleBy13 / 10000000)\
    \ - (firstDivisibleBy13 / 100000000) + (firstDivisibleBy13 / 1000000000) - (firstDivisibleBy13\
    \ / 10000000000) + (firstDivisibleBy13 / 100000000000) - (firstDivisibleBy13 /\
    \ 1000000000000) + (firstDivisibleBy13 / 10000000000000) - (firstDivisibleBy13\
    \ / 100", '        return 0;', "        long count = 0;\n        for (int i =\
    \ 11; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n         \
    \       count += i.ToString().Count(x => x == '7');\n            }\n        }\n\
    \        return count;", "        long count = 0;\n        for (long i = 0; i\
    \ < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n               \
    \ long temp = i;\n                while (temp > 0) {\n                    if (temp\
    \ % 10 == 7) {\n                        count++;\n                    }\n    \
    \                temp /= 10;\n                }\n            }\n        }\n  \
    \      return count;", "        long counter = 0;\n        for (long i = 7; i\
    \ < n; i += 7) {\n            if (i % 11 == 0 || i % 13 == 0) {\n            \
    \    counter++;\n            }\n        }\n        return counter;", '        return
    0;', "        if (n < 11) return 0;\n        long count = 0;\n        for (long\
    \ i = n - n % 11; i >= 11; i -= 11) {\n            if (i % 13 == 0) {\n      \
    \          count += 2;\n            } else {\n                count++;\n     \
    \       }\n        }\n        return count;", "        // your code here\n   \
    \     long ans = 0;\n        for (long i = 7; i < n; i += 11) {\n            string\
    \ s = i.ToString();\n            for (int j = 0; j < s.Length; j++) {\n      \
    \          if (s[j] == '7') {\n                    ans++;\n                }\n\
    \            }\n        }\n        for (long i = 13; i < n; i += 13) {\n     \
    \       string s = i.ToString();\n            for (int j = 0; j < s.Length; j++)\
    \ {\n                if (s[j] == '7') {\n                    ans++;\n        \
    \        }\n            }\n        }\n        return ans;"]
stop_tokens:
- "\n    }\n"
