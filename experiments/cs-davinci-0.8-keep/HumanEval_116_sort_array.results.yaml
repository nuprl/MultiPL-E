language: cs
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count;\
    \ j++) {\n                if (arr[i] > arr[j]) {\n                    long tmp\
    \ = arr[i];\n                    arr[i] = arr[j];\n                    arr[j]\
    \ = tmp;\n                }\n            }\n        }\n        // count how many\
    \ digits of 1\n        Dictionary<long, int> dic = new Dictionary<long, int>();\n\
    \        List<long> ans = new List<long>();\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            long num = arr[i];\n            int counter = 0;\n     \
    \       while (num > 0) {\n                if (num % 2 == 1) {\n             \
    \       counter++;\n                }\n                num /= 2;\n           \
    \ }\n            dic.Add(arr[i], counter);\n        }\n        // arr.Sort((a,\
    \ b) => dic[a].CompareTo(dic[b]));\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            int min = int.MaxValue;\n            long minNum = long.MaxValue;\n\
    \            for (int j = 0; j < arr.Count; j++) {\n                if (dic[arr[j]]\
    \ < min && !ans.Contains(arr[j])) {\n                    min = dic[arr[j]];\n\
    \                    minNum = arr[j];\n                }\n            }\n    \
    \        ans.Add(minNum);\n        }\n        return ans;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new\
    \ List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L,\
    \ (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,\
    \ (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
    \ (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L,\
    \ (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
    \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
    \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <61120063366740789d6b653a7c7a791a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <61120063366740789d6b653a7c7a791a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823602
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        return\
    \ arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c == '1')).ThenBy(x => x).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,\
    \ (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,\
    \ (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L,\
    \ (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L,\
    \ (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1e9547c05154924ac74e30b6e3c3b00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1e9547c05154924ac74e30b6e3c3b00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823602
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        return\
    \ arr.OrderBy(x => OnesInBinary(x)).ThenBy(x => x).ToList();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new\
    \ List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L,\
    \ (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,\
    \ (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
    \ (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L,\
    \ (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
    \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
    \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp652r9r4x.cs(17,33): error CS0103: The name ''OnesInBinary'' does not exist
    in the current context

    '
  timestamp: 1659823602
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        // Randomly\
    \ shifting the input until the array is sorted\n        Random rand = new Random();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            long temp = arr[i];\n\
    \            int randomIndex = rand.Next(0, arr.Count);\n            arr[i] =\
    \ arr[randomIndex];\n            arr[randomIndex] = temp;\n        }\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,\
    \ (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,\
    \ (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L,\
    \ (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L,\
    \ (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c8ce9a003374c95815eea5297b7a55f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c8ce9a003374c95815eea5297b7a55f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823602
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        List<long>\
    \ result = new List<long>();\n        Dictionary<long, long> dict = new Dictionary<long,\
    \ long>();\n        for (int i = 0; i < arr.Count; i++) {\n            long number\
    \ = arr[i];\n            string binary = Convert.ToString(number, 2);\n      \
    \      long ones = binary.Split('1').Count() - 1;\n            dict.Add(ones,\
    \ number);\n        }\n        foreach (var d in dict.OrderBy(x => x.Key)) {\n\
    \            result.Add(d.Value);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,\
    \ (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,\
    \ (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L,\
    \ (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L,\
    \ (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same\
    \ key has already been added. Key: 1\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.SortArray (System.Collections.Generic.List`1[T] arr) [0x00037] in\
    \ <fb8d6e5fa23248dd90fb916ee4b8bb68>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x00017] in <fb8d6e5fa23248dd90fb916ee4b8bb68>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentException: An item with the same key has already been\
    \ added. Key: 1\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.SortArray (System.Collections.Generic.List`1[T] arr) [0x00037] in\
    \ <fb8d6e5fa23248dd90fb916ee4b8bb68>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x00017] in <fb8d6e5fa23248dd90fb916ee4b8bb68>:0 \n"
  stdout: ''
  timestamp: 1659823602
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        List<long>\
    \ sorted = new List<long>();\n        int[] ones = new int[arr.Count];\n     \
    \   for (int i = 0; i < arr.Count; i++) {\n            long number = arr[i];\n\
    \            ones[i] = CountBinaryOnes(number);\n        }\n        Array.Sort(ones,\
    \ arr.ToArray());\n        return arr;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new\
    \ List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L,\
    \ (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,\
    \ (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
    \ (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L,\
    \ (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
    \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
    \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4sco1tc4.cs(21,23): error CS0103: The name ''CountBinaryOnes'' does not
    exist in the current context

    '
  timestamp: 1659823602
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        return\
    \ arr.OrderBy(x => CountOnes(x))\n                  .ThenBy(x => x)\n        \
    \          .ToList();\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new\
    \ List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L,\
    \ (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,\
    \ (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
    \ (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L,\
    \ (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
    \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
    \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp65o23h6q.cs(17,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659823602
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        var list\
    \ = new List<long>();\n        var orderedList = new List<long>();\n        var\
    \ sorted = false;\n        foreach (var n in arr) {\n            list.Add(n);\n\
    \        }\n        while (!sorted) {\n            sorted = true;\n          \
    \  var minVal = list.Min();\n            orderedList.Add(minVal);\n          \
    \  list.Remove(minVal);\n            if (list.Count != 0) {\n                sorted\
    \ = false;\n            }\n        }\n        return orderedList;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new\
    \ List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L,\
    \ (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,\
    \ (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
    \ (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L,\
    \ (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
    \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
    \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a5b0c56488b48bf83f55700b25fcc21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a5b0c56488b48bf83f55700b25fcc21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823602
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        // Pending\n\
    \        arr.Sort();\n        return arr;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new\
    \ List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L,\
    \ (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,\
    \ (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
    \ (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L,\
    \ (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
    \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
    \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36d57fa821604a8793e57093b5c44474>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36d57fa821604a8793e57093b5c44474>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823602
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        arr.Sort(\n\
    \            (a, b) => {\n                int aOnes = (int)Math.Log2(a);\n   \
    \             int bOnes = (int)Math.Log2(b);\n                return aOnes ==\
    \ bOnes ? a.CompareTo(b) : aOnes.CompareTo(bOnes);\n            }\n        );\n\
    \        return arr;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new\
    \ List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L,\
    \ (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,\
    \ (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
    \ (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L,\
    \ (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
    \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
    \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf_1nnqzz.cs(19,39): error CS0117: ''Math'' does not contain a definition
    for ''Log2''

    /tmp/tmpf_1nnqzz.cs(20,39): error CS0117: ''Math'' does not contain a definition
    for ''Log2''

    '
  timestamp: 1659823602
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        // Your\
    \ code goes here\n        return null;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new\
    \ List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L,\
    \ (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,\
    \ (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
    \ (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L,\
    \ (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
    \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
    \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00032] in <a45e637c302e42b99f79dd8a0f19da4f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00032] in <a45e637c302e42b99f79dd8a0f19da4f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823602
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        List<long>\
    \ newArr = new List<long>();\n        arr.Sort((a, b) => {\n            if (NumOnes(a)\
    \ == NumOnes(b))\n                return a.CompareTo(b);\n            return NumOnes(a).CompareTo(NumOnes(b));\n\
    \        });\n        return arr;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new\
    \ List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L,\
    \ (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,\
    \ (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
    \ (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L,\
    \ (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
    \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
    \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpke6f6nj0.cs(19,17): error CS0103: The name ''NumOnes'' does not exist
    in the current context

    /tmp/tmpke6f6nj0.cs(19,31): error CS0103: The name ''NumOnes'' does not exist
    in the current context

    /tmp/tmpke6f6nj0.cs(21,20): error CS0103: The name ''NumOnes'' does not exist
    in the current context

    /tmp/tmpke6f6nj0.cs(21,41): error CS0103: The name ''NumOnes'' does not exist
    in the current context

    '
  timestamp: 1659823602
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        return\
    \ arr.OrderBy(x => GetBinaryRepresentation(x))\n            .ThenBy(x => x)\n\
    \            .ToList();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new\
    \ List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L,\
    \ (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,\
    \ (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
    \ (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L,\
    \ (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
    \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
    \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp94fn0chh.cs(17,33): error CS0103: The name ''GetBinaryRepresentation''
    does not exist in the current context

    '
  timestamp: 1659823602
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        // your\
    \ code goes here\n        List<long> result = new List<long>();\n        List<long>\
    \ temp = new List<long>();\n        var t = arr.GroupBy(x => x).Select(y => new\
    \ { Element = y.Key, Count = y.Count() }).ToList();\n        foreach (var a in\
    \ t) {\n            for (int i = 0; i < a.Count; i++) {\n                temp.Add(a.Element);\n\
    \            }\n        }\n        result = temp.OrderBy(x => Ones(x)).ThenBy(x\
    \ => x).ToList();\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new\
    \ List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L,\
    \ (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,\
    \ (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
    \ (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L,\
    \ (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
    \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
    \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppss2nqne.cs(26,36): error CS0103: The name ''Ones'' does not exist in
    the current context

    '
  timestamp: 1659823602
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        int[]\
    \ count = new int[arr.Count];\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            count[i] = NumberOfOnes(arr[i]);\n        }\n        Array.Sort(count,\
    \ arr.ToArray());\n        return arr;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new\
    \ List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L,\
    \ (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,\
    \ (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
    \ (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L,\
    \ (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
    \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
    \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp49h4bvl3.cs(19,24): error CS0103: The name ''NumberOfOnes'' does not exist
    in the current context

    '
  timestamp: 1659823602
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        var onesCount\
    \ = new List<KeyValuePair<long, int>>();\n        arr.ForEach(x => onesCount.Add(new\
    \ KeyValuePair<long, int>(x, x.BitCount())));\n        return onesCount.OrderBy(x\
    \ => x.Value).ThenBy(x => x.Key).Select(x => x.Key).ToList();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new\
    \ List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L,\
    \ (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,\
    \ (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
    \ (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L,\
    \ (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
    \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
    \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpklotgamz.cs(18,73): error CS1061: ''long'' does not contain a definition
    for ''BitCount'' and no accessible extension method ''BitCount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659823602
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        List<long>\
    \ toReturn = new List<long>();\n        toReturn.AddRange(arr);\n        toReturn.Sort((a,\
    \ b) => {\n            // Sort by number of 1s in binary representation.\n   \
    \         int a1s = Count1s(a);\n            int b1s = Count1s(b);\n         \
    \   if (a1s != b1s) {\n                return a1s - b1s;\n            } else {\n\
    \                return (int)a - (int)b;\n            }\n        });\n       \
    \ return toReturn;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,\
    \ (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,\
    \ (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L,\
    \ (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L,\
    \ (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp67a7sgp8.cs(21,23): error CS0103: The name ''Count1s'' does not exist
    in the current context

    /tmp/tmp67a7sgp8.cs(22,23): error CS0103: The name ''Count1s'' does not exist
    in the current context

    '
  timestamp: 1659823602
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        var numStrings\
    \ = new List<string>();\n        var vals = new List<long>();\n        for (var\
    \ i = 0; i < arr.Count; i++) {\n            var temp = arr[i];\n            var\
    \ binary = Convert.ToString(temp, 2);\n            numStrings.Add(binary);\n \
    \           vals.Add(temp);\n        }\n        var sorted = vals.Zip(numStrings,\
    \ (x, y) => new {\n            val = x,\n            num = y\n        }).OrderBy(x\
    \ => x.num.Count(c => c == '1')).ThenBy(x => x.val).Select(x => x.val).ToList();\n\
    \        return sorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new\
    \ List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L,\
    \ (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,\
    \ (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
    \ (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L,\
    \ (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
    \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
    \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4cb9f12da3544b2bbc28f575c9ed53d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4cb9f12da3544b2bbc28f575c9ed53d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823602
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        var res\
    \ = new List<long>();\n        foreach (var n in arr) {\n            var bin =\
    \ Convert.ToString(n, 2);\n            var zeroCount = bin.Count(c => c == '0');\n\
    \            var oneCount = bin.Count(c => c == '1');\n            var num = new\
    \ Tuple<int, int, long>(zeroCount, oneCount, n);\n            res.Add(num);\n\
    \        }\n        return res.OrderBy(n => n.Item1).ThenBy(n => n.Item2).Select(n\
    \ => n.Item3).ToList();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new\
    \ List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L,\
    \ (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,\
    \ (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
    \ (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L,\
    \ (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
    \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
    \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa264akja.cs(23,21): error CS1503: Argument 1: cannot convert from ''System.Tuple<int,
    int, long>'' to ''long''

    /tmp/tmpa264akja.cs(25,35): error CS1061: ''long'' does not contain a definition
    for ''Item1'' and no accessible extension method ''Item1'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659823602
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static List<long> SortArray(List<long> arr) {\n        arr.Sort((a,\
    \ b) => {\n            // return (count1(a) == count1(b)) ? a.CompareTo(b) : count1(a).CompareTo(count1(b));\n\
    \            int c1 = count1(a);\n            int c2 = count1(b);\n          \
    \  if (c1 == c2) return a.CompareTo(b);\n            return c1.CompareTo(c2);\n\
    \        });\n        return arr;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new\
    \ List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new\
    \ List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L,\
    \ (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,\
    \ (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
    \ (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L,\
    \ (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
    \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
    \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n\
    \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
    \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcvrwf1h2.cs(19,22): error CS0103: The name ''count1'' does not exist in
    the current context

    /tmp/tmpcvrwf1h2.cs(20,22): error CS0103: The name ''count1'' does not exist in
    the current context

    '
  timestamp: 1659823602
