name: HumanEval_132_is_nested
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that takes a string as input which contains\
  \ only square brackets.\n    // The function should return True if and only if there\
  \ is a valid subsequence of brackets \n    // where at least one bracket in the\
  \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
  \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]') \u279E\
  \ False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[') \u279E\
  \ True\n    public static bool IsNested(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNested((\"\
  [[]]\")) == (true));\n    Debug.Assert(IsNested((\"[]]]]]]][[[[[]\")) == (false));\n\
  \    Debug.Assert(IsNested((\"[][]\")) == (false));\n    Debug.Assert(IsNested((\"\
  []\")) == (false));\n    Debug.Assert(IsNested((\"[[[[]]]]\")) == (true));\n   \
  \ Debug.Assert(IsNested((\"[]]]]]]]]]]\")) == (false));\n    Debug.Assert(IsNested((\"\
  [][][[]]\")) == (true));\n    Debug.Assert(IsNested((\"[[]\")) == (false));\n  \
  \  Debug.Assert(IsNested((\"[]]\")) == (false));\n    Debug.Assert(IsNested((\"\
  [[]][[\")) == (true));\n    Debug.Assert(IsNested((\"[[][]]\")) == (true));\n  \
  \  Debug.Assert(IsNested((\"\")) == (false));\n    Debug.Assert(IsNested((\"[[[[[[[[\"\
  )) == (false));\n    Debug.Assert(IsNested((\"]]]]]]]]\")) == (false));\n    }\n\
  \n}\n"
completions: ["        bool result = false;\n        Stack<char> st = new Stack<char>();\n\
    \        foreach (char c in str) {\n            if (c == '[') st.Push(c);\n  \
    \          else if (c == ']') {\n                if (st.Count == 0) return false;\n\
    \                st.Pop();\n                result = true;\n            }\n  \
    \      }\n        return result;", "        int count = 0;\n        foreach (char\
    \ c in str) {\n            if (c == '[') {\n                count++;\n       \
    \     } else if (c == ']') {\n                count--;\n            }\n      \
    \      if (count < 0) {\n                return false;\n            }\n      \
    \  }\n        return count > 0 ? false : true;", '        return false;', "  \
    \      if (str.Length < 2) return false;\n        for (int i = 0; i < str.Length\
    \ - 1; i++) {\n            if (str[i] == '[' && str[i + 1] == ']') {\n       \
    \         return true;\n            }\n        }\n        return false;", '        throw
    new NotImplementedException();', '        throw new NotImplementedException();',
  "        bool nested = false;\n        Stack<int> s = new Stack<int>();\n      \
    \  foreach (char c in str) {\n            if (c == '[') {\n                s.Push(0);\n\
    \            } else if (c == ']') {\n                if (s.Count == 0) {\n   \
    \                 s.Push(1);\n                } else {\n                    s.Pop();\n\
    \                }\n            }\n        }\n        if (s.Count == 0) {\n  \
    \          nested = true;\n        }\n        return nested;", "        int open\
    \ = 0;\n        int close = 0;\n        foreach (char c in str) {\n          \
    \  if (c == '[') {\n                open++;\n            } else if (c == ']')\
    \ {\n                close++;\n            }\n            if (close > open) {\n\
    \                return false;\n            }\n        }\n        return true;",
  "        if (str.Length == 0) {\n            return false;\n        }\n        var\
    \ open = new Stack<int>();\n        for (int i = 0; i < str.Length; i++) {\n \
    \           if (str[i] == '[') {\n                open.Push(i);\n            }\
    \ else {\n                if (open.Count > 0) {\n                    open.Pop();\n\
    \                } else {\n                    return false;\n               \
    \ }\n            }\n        }\n        return true;", '        // Your code goes
    here', '        throw new NotImplementedException();', '        return false;',
  "        // \n        throw new NotImplementedException();", "        var s = new\
    \ Stack<char>();\n        bool result = false;\n        foreach (var c in str)\
    \ {\n            if (c == '[') {\n                s.Push(c);\n            } else\
    \ if (c == ']') {\n                if (s.Count > 0) {\n                    s.Pop();\n\
    \                    result = true;\n                }\n            }\n      \
    \  }\n        return result;", "        return new string(str.Where(x => x ==\
    \ '[' || x == ']').ToArray()).Contains(\"[]\");", "        int depth = 0;\n  \
    \      foreach (char c in str) {\n            if (c == '[') {\n              \
    \  depth++;\n            } else if (c == ']') {\n                depth--;\n  \
    \          }\n            if (depth < 0) {\n                return false;\n  \
    \          }\n        }\n        return depth != 0;", "        int score = 0;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            score += str[i] ==\
    \ '[' ? 1 : -1;\n            if (score < 0) {\n                return false;\n\
    \            }\n        }\n        return score > 0;", '        return false;',
  "        string pattern = \"][\";\n        while (str.Contains(pattern))\n     \
    \       str = str.Replace(pattern, \"\");\n        return str.StartsWith(\"[\"\
    ) && str.EndsWith(\"]\");", "        if (str.Length == 0) {\n            return\
    \ false;\n        }\n        Stack<char> stack = new Stack<char>();\n        for\
    \ (int i = 0; i < str.Length; i++) {\n            if (str[i] == '[') {\n     \
    \           stack.Push(str[i]);\n            } else {\n                if (stack.Count\
    \ == 0) {\n                    return false;\n                }\n            \
    \    stack.Pop();\n            }\n        }\n        return stack.Count > 0;"]
stop_tokens:
- "\n    }\n"
