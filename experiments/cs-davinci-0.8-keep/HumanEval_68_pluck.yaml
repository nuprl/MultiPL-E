name: HumanEval_68_pluck
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n    // your task is to pluck one of the nodes and return it.\n\
  \    // The plucked node should be the node with the smallest even value.\n    //\
  \ If multiple nodes with the same smallest even value are found return the node\
  \ that has smallest index.\n    // The plucked node should be returned in a list,\
  \ [ smalest_value, its index ],\n    // If there are no even values or the given\
  \ array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:\
  \ [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //\
  \ Explanation: 2 has the smallest even value, and 2 has the smallest index. \n \
  \   // Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    //\
  \ Input: [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the\
  \ smallest value, but  there are two zeros,\n    // so we will choose the first\
  \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
  \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
  \ arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,\
  \ (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,\
  \ (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        // var min = arr.Where(x => x % 2 == 0).Min();\n        var\
    \ min = -1;\n        var minIndex = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (min == -1 ||\
    \ arr[i] < min) {\n                    min = arr[i];\n                    minIndex\
    \ = i;\n                }\n            }\n        }\n        return min == -1\
    \ ? new List<long>() : new List<long>{min, minIndex};", "        // TODO:\n  \
    \      return null;", "        // Your code goes here.\n        // Console.WriteLine(\"\
    arr: \" + arr.Count);\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long smallest = arr[0];\n        long index = 0;\n       \
    \ foreach (long item in arr) {\n            if (item % 2 == 0 && item < smallest)\
    \ {\n                smallest = item;\n                index = arr.IndexOf(item);\n\
    \            }\n        }\n        if (smallest % 2 == 0) {\n            return\
    \ new List<long>{smallest, index};\n        }\n        return new List<long>();",
  "        // Implement here\n        // Use a for loop\n        //if the value is\
    \ even (if (val % 2 == 0) return val)\n        //if the value is even, replace\
    \ the value at the given index with the value\n        //if the value is even\
    \ and the value is less than the previous value replace the value at the given\
    \ index with the value\n        //else, return []\n        long smallestEvenValue\
    \ = -1;\n        long indexOfSmallestEvenValue = -1;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            long val = arr[i];\n            if (val %\
    \ 2 == 0) {\n                if (smallestEvenValue == -1) {\n                \
    \    smallestEvenValue = val;\n                    indexOfSmallestEvenValue =\
    \ i;\n                } else if (val < smallestEvenValue) {\n                \
    \    smallestEvenValue = val;\n                    indexOfSmallestEvenValue =\
    \ i;\n                }\n            }\n        }\n        List<long> result =\
    \ new List<long>();\n        if (smallestEvenValue == -1) {\n            return\
    \ result;\n        } else {\n            result.Add(smallestEvenValue);\n    \
    \        result.Add(indexOfSmallestEvenValue);\n            return result;\n \
    \       }", "        // You must return a List<long> here.\n        return new\
    \ List<long>();", "        // We need to return the smallest even number and its\
    \ index.\n        // We will do this by creating an array with the same number\
    \ of elements\n        // as the input array and mark the even numbers with their\
    \ indexes.\n        // We will then go through the array and find the smallest\
    \ even number.\n        // We will mark the index of the array with the smallest\
    \ even number,\n        // and return that to the caller.\n        // We will\
    \ also return the even number we found.\n        if (arr.Count == 0) {\n     \
    \       return new List<long>();\n        }\n        // Lets create an array of\
    \ the same length as the input array\n        long[] output = new long[arr.Count];\n\
    \        // Next we will go through the input array and place the even numbers\n\
    \        // with their indexes in the output array\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                output[i]\
    \ = arr[i];\n            }\n        }\n        // Now we have to get the smallest\
    \ even number\n        // and its index.\n        long smallest_even = long.MaxValue;\n\
    \        int smallest_even_index = -1;\n        for (int i = 0; i < output.Length;\
    \ i++) {\n            if (output[i] > 0 && output[i] < smallest_even) {\n    \
    \            smallest_even = output[i];\n                smallest_even_index =\
    \ i;\n            }\n        }\n        // We will now return the smallest even\
    \ number and its index.\n        List<long> result = new List<long>();\n     \
    \   result.Add(smallest_even);\n        result.Add(smallest_even_index);\n   \
    \     return result;", "        // Your code goes here.\n        // return the\
    \ list [ smallest_even_value, its_index ].\n        List<long> result = new List<long>();\n\
    \        long smallEven = long.MaxValue;\n        long index = 0;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < smallEven) {\n                smallEven = arr[i];\n                index =\
    \ i;\n            }\n        }\n        if (smallEven != long.MaxValue) {\n  \
    \          result.Add(smallEven);\n            result.Add(index);\n        }\n\
    \        return result;", "        var l = arr.Where(x => x % 2 == 0).ToList();\n\
    \        if (l.Count > 0) {\n            var ans = l.Min();\n            var idx\
    \ = arr.IndexOf(ans);\n            return new List<long> { ans, idx };\n     \
    \   }\n        return new List<long>();", "        if (arr.Count == 0) {\n   \
    \         return new List<long>();\n        }\n        var smallestIndex = 0;\n\
    \        var smallestValue = arr[0];\n        for (var i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0 && (arr[i] < smallestValue || smallestValue\
    \ % 2 != 0)) {\n                smallestIndex = i;\n                smallestValue\
    \ = arr[i];\n            }\n        }\n        if (smallestValue % 2 != 0) {\n\
    \            return new List<long>();\n        }\n        return new List<long>\
    \ { smallestValue, smallestIndex };", "        // your code goes here\n      \
    \  return null;", '        return new List<long>();', "        // Your code here\n\
    \        return new List<long>();", "        List<long> ret = new List<long>();\n\
    \        long smallestEven = long.MaxValue;\n        long smallestEvenIndex =\
    \ long.MaxValue;\n        long counter = 0;\n        foreach (long num in arr)\
    \ {\n            if (num % 2 == 0 && num < smallestEven) {\n                smallestEven\
    \ = num;\n                smallestEvenIndex = counter;\n            }\n      \
    \      counter++;\n        }\n        if (smallestEvenIndex == long.MaxValue)\
    \ {\n            return ret;\n        }\n        ret.Add(smallestEven);\n    \
    \    ret.Add(smallestEvenIndex);\n        return ret;", "        // write your\
    \ code here\n        return new List<long>();", "        long min_even = long.MaxValue;\n\
    \        long res_i = -1;\n        for (long i = 0; i < arr.Count; i++) {\n  \
    \          long val = arr[(int)i];\n            if (val == 0) {\n            \
    \    res_i = 0;\n                break;\n            }\n            if (val %\
    \ 2 == 0 && val < min_even) {\n                min_even = val;\n             \
    \   res_i = i;\n            }\n        }\n        if (res_i == -1) {\n       \
    \     return new List<long>();\n        }\n        return new List<long> { min_even,\
    \ res_i };", "        long s_even = -1;\n        long index = -1;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            long v = arr[i];\n          \
    \  if (v % 2 == 0) {\n                if (s_even == -1 || v < s_even) {\n    \
    \                s_even = v;\n                    index = i;\n               \
    \ }\n            }\n        }\n        if (s_even == -1) return new List<long>();\n\
    \        return new List<long> { s_even, index };", "        var res = arr.Where(n\
    \ => n % 2 == 0).OrderBy(n => n).ToList();\n        return res.Count() > 0 ? new\
    \ List<long> { res[0], arr.IndexOf(res[0]) } : new List<long>();", "        return\
    \ arr.Select((val, i) => new { val, i })\n            .Where(x => x.val % 2 ==\
    \ 0)\n            .OrderBy(x => x.val)\n            .ThenBy(x => x.i)\n      \
    \      .Select(x => new List<long> { x.val, x.i }).FirstOrDefault() ?? new List<long>();",
  "        // your code here\n        List<long> result = new List<long>();\n    \
    \    if (arr.Count == 0) {\n            return result;\n        }\n\n        int\
    \ index = 0;\n        bool hasEvenNumber = false;\n        long minValue = Int64.MaxValue;\n\
    \        foreach (long item in arr) {\n            if (item % 2 == 0) {\n    \
    \            hasEvenNumber = true;\n                if (item < minValue) {\n \
    \                   minValue = item;\n                    result.Clear();\n  \
    \                  result.Add(item);\n                    result.Add(index);\n\
    \                }\n            }\n            index++;\n        }\n\n       \
    \ if (!hasEvenNumber) {\n            result.Clear();\n        }\n\n        return\
    \ result;", "        // Find the smallest even value\n        long minValue =\
    \ arr.Where(x => x % 2 == 0).Min();\n        // Find the index of the first occurrence\
    \ of that value\n        int index = arr.IndexOf(minValue);\n        // Return\
    \ the value and the index\n        return new List<long> { minValue, index };"]
stop_tokens:
- "\n    }\n"
