name: HumanEval_133_sum_squares
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list of numbers.\n    // You need to return\
  \ the sum of squared numbers in the given list,\n    // round each element in the\
  \ list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]\
  \ the output should be 14\n    // For lst = [1,4,9] the output should be 98\n  \
  \  // For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0]\
  \ the output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n\
  \    public static long SumSquares(List<float> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
  \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
  \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
  \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
  \ (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new\
  \ List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n\
  \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,\
  \ (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,\
  \ (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
  \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
  \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
  \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,\
  \ (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new\
  \ List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new\
  \ List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new\
  \ List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n\
  \    }\n\n}\n"
completions: ['        return 0;', "        long result = 0;\n        for (int i =\
    \ 0; i < lst.Count; i++) {\n            result += (long)Math.Ceiling(lst[i]) *\
    \ (long)Math.Ceiling(lst[i]);\n        }\n        return result;", '        throw
    new NotImplementedException();', '        throw new NotImplementedException();',
  "        long sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n        \
    \    lst[i] = (float)Math.Ceiling(lst[i]);\n            sum += (long)Math.Pow(lst[i],\
    \ 2);\n        }\n        return sum;", '        return lst.Sum(x => (long) Math.Ceiling(x
    * x));', "        lst = lst.Select(i => (float)Math.Ceiling(i)).ToList();\n  \
    \      long result = 0;\n        foreach (var el in lst) {\n            result\
    \ += (long)Math.Pow(el, 2);\n        }\n        return result;", "        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;", "        return lst.Select(x => Convert.ToInt64(Math.Ceiling(x)))\n\
    \                  .Select(x => x * x)\n                  .Sum();", '        throw
    new NotImplementedException();', '        throw new NotImplementedException();',
  '        return lst.Sum(x => (long)Math.Ceiling(x) * (long)Math.Ceiling(x));', '        return
    lst.Sum(x => (long)Math.Ceiling(x) * (long)Math.Ceiling(x));', "        long sum\
    \ = 0;\n        // todo..\n        // add your code here and remove the below\
    \ exception.\n        return sum;", "        if (lst.Count == 0) {\n         \
    \   return 0;\n        }\n        long sum = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            sum += Convert.ToInt64(Math.Ceiling(lst[i])) * Convert.ToInt64(Math.Ceiling(lst[i]));\n\
    \        }\n        return sum;", "        long sum = 0;\n        foreach (float\
    \ item in lst) {\n            // Math.Round(double, int, MidpointRounding)\n \
    \           // Math.Ceiling(double)\n            sum += (long)Math.Pow(Math.Ceiling(item),\
    \ 2);\n        }\n        return sum;", "        // Write your code here\n   \
    \     return 0;", "        long answer = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            answer += (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n\
    \        }\n        return answer;", '        return lst.Select(x => (long) Math.Ceiling(x)).Select(x
    => x * x).Sum();', "        // Your code here.\n        return 0;"]
stop_tokens:
- "\n    }\n"
