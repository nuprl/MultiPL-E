language: cs
name: HumanEval_99_closest_integer
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        // Find\
    \ the closest integer to the given value\n        long ret = 0;\n        if (value\
    \ == null) {\n            return ret;\n        }\n        var dbl = double.Parse(value);\n\
    \        ret = (long)dbl;\n        if (dbl < 0) {\n            if (ret == dbl)\
    \ {\n                ret -= 1;\n            }\n        } else {\n            if\
    \ (ret != dbl) {\n                ret += 1;\n            }\n        }\n      \
    \  return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"\
    10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n  \
    \  Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"\
    15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <511fe8eae9b04639ace348d88c8c7b54>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <511fe8eae9b04639ace348d88c8c7b54>:0 \n"
  stdout: ''
  timestamp: 1659824630
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        // ...\n\
    \        // TODO: Implement your solution here\n        // ...\n        return\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"\
    10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n  \
    \  Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"\
    15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <909242e89f5a4bb88334bab6d2b1bd6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <909242e89f5a4bb88334bab6d2b1bd6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824629
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        // TODO\n\
    \        // return Convert.ToInt64(Math.Round(Double.Parse(value)));\n       \
    \ return (long) Math.Round(Double.Parse(value));\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n\
    \    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"\
    -15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n\
    \    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <79e64b78dd324efea9d46f26a53ce8d1>:0 \n"
  stdout: ''
  timestamp: 1659824629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        throw new\
    \ NotImplementedException();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"\
    14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n\
    \    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"\
    0\")) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <c53a04560bf64107a74249cabe72bc05>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <c53a04560bf64107a74249cabe72bc05>:0 \n"
  stdout: ''
  timestamp: 1659824629
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        // Your\
    \ code goes here\n        long num = (long)Math.Round(Double.Parse(value));\n\
    \        return num;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"\
    14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n\
    \    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"\
    0\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9214bb118aef46759df0e357c661a013>:0 \n"
  stdout: ''
  timestamp: 1659824630
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        // write\
    \ your code here\n        return default(long);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n\
    \    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"\
    -15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n\
    \    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b707a423c3a94eafb38015da8b756932>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b707a423c3a94eafb38015da8b756932>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824629
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        long rounded\
    \ = (long)Math.Round(double.Parse(value));\n        double diff = Math.Abs(double.Parse(value)\
    \ - rounded);\n        return diff < 0.5 ? rounded : rounded + (long)Math.Sign(rounded);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"\
    10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n  \
    \  Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"\
    15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0da878da45e64af7b61684f27bf50a1b>:0 \n"
  stdout: ''
  timestamp: 1659824630
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        return\
    \ (long)Math.Round(Double.Parse(value));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"\
    14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n\
    \    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"\
    0\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <09332297b7034f8f86123ec4aab269ff>:0 \n"
  stdout: ''
  timestamp: 1659824629
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        long integer\
    \ = 0;\n        string[] split = value.Split('.');\n        // Check if the number\
    \ is a whole number\n        if (split.Length == 1) {\n            return long.Parse(value);\n\
    \        } else {\n            // If the number is a decimal, check the decimal\
    \ part\n            float decimalPart = float.Parse(split[1]);\n            if\
    \ (decimalPart > 5) {\n                integer = long.Parse(split[0]) + 1;\n \
    \           } else {\n                integer = long.Parse(split[0]);\n      \
    \      }\n        }\n        return integer;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"\
    14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n\
    \    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"\
    0\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cda123011e854b708c136a14113d07a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cda123011e854b708c136a14113d07a2>:0 \n"
  stdout: ''
  timestamp: 1659824629
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        double\
    \ num = double.Parse(value);\n        if (num < 0) {\n            num -= 0.5;\n\
    \        } else {\n            num += 0.5;\n        }\n        return (long)num;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"\
    10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n  \
    \  Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"\
    15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        var remaining_error\
    \ = double.Parse(value);\n        var digit = 0;\n        var closest_integer\
    \ = 0;\n        while (remaining_error > 0) {\n            var digit_plus_one\
    \ = Math.Ceiling(remaining_error * 10);\n            var digit_minus_one = Math.Floor(remaining_error\
    \ * 10);\n            if (Math.Abs(digit_plus_one - remaining_error * 10) < Math.Abs(digit_minus_one\
    \ - remaining_error * 10)) {\n                closest_integer += 1 * (long)Math.Pow(10,\
    \ digit);\n                remaining_error -= 1;\n            } else {\n     \
    \           closest_integer += 0 * (long)Math.Pow(10, digit);\n              \
    \  remaining_error -= 0;\n            }\n            remaining_error *= 10;\n\
    \            digit += 1;\n        }\n        return closest_integer;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"\
    10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n  \
    \  Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"\
    15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5v5fe3qq.cs(30,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5v5fe3qq.cs(33,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        var number\
    \ = long.Parse(value);\n        return number;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n\
    \    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"\
    -15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n\
    \    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.ClosestInteger (System.String value) [0x00001] in <d4cb7609c502446c83a19f7e040c23fe>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00016] in <d4cb7609c502446c83a19f7e040c23fe>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.ClosestInteger (System.String value) [0x00001] in <d4cb7609c502446c83a19f7e040c23fe>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00016] in <d4cb7609c502446c83a19f7e040c23fe>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824629
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        float val\
    \ = float.Parse(value);\n        return (long)Math.Round(val, 0, MidpointRounding.AwayFromZero);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"\
    10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n  \
    \  Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"\
    15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        long closest\
    \ = long.MaxValue;\n        try {\n            closest = Convert.ToInt64(value);\n\
    \        } catch {\n            char[] val = value.ToCharArray();\n          \
    \  int len = val.Length;\n            int i = val.Length - 1;\n            for\
    \ (; i >= 0; i--) {\n                if (val[i] == '.') break;\n            }\n\
    \            if (i < 0) throw new ArgumentException();\n            i++;\n   \
    \         int s = 1;\n            if (val[0] == '-') {\n                s = -1;\n\
    \                i = 1;\n            }\n            int d = val[i] - '0';\n  \
    \          if (d >= 5) {\n                int j = i - 1;\n                for\
    \ (; j >= 0; j--) {\n                    if (val[j] == '-') break;\n         \
    \           val[j]++;\n                    if (val[j] == '9' + 1) {\n        \
    \                val[j] = '0';\n                    } else {\n               \
    \         break;\n                    }\n                }\n                if\
    \ (j < 0) {\n                    string outStr = new string(val);\n          \
    \          return Convert.ToInt64(outStr);\n                }\n            }\n\
    \            if (i < len) val[i] = '\\0';\n            string outStrr = new string(val);\n\
    \            closest = Convert.ToInt64(outStrr);\n        }\n        return closest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"\
    10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n  \
    \  Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"\
    15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int64.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt64\
    \ (System.String value) [0x0000c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem.ClosestInteger (System.String value) [0x0011e] in <4776049495944e72ad76fffba86012e3>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00016] in <4776049495944e72ad76fffba86012e3>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int64.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt64\
    \ (System.String value) [0x0000c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem.ClosestInteger (System.String value) [0x0011e] in <4776049495944e72ad76fffba86012e3>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00016] in <4776049495944e72ad76fffba86012e3>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824629
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        // convert\
    \ value to a number\n        double val = double.Parse(value);\n        // round\
    \ the number to get the closest integer\n        long rounded = (long)Math.Round(val);\n\
    \        // return the value of the closest integer\n        return rounded;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"\
    10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n  \
    \  Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"\
    15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d039f52278c1485ba51746ccbebbe59b>:0 \n"
  stdout: ''
  timestamp: 1659824629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        throw new\
    \ NotImplementedException();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"\
    14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n\
    \    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"\
    0\")) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <c53a04560bf64107a74249cabe72bc05>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <c53a04560bf64107a74249cabe72bc05>:0 \n"
  stdout: ''
  timestamp: 1659824629
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        // Check\
    \ whether the value is a valid number\n        if (!double.TryParse(value, out\
    \ double doubleValue)) {\n            throw new ArgumentException(\"The value\
    \ must be a valid number.\");\n        }\n        // If the number is an integer,\
    \ return that value\n        if (doubleValue % 1 == 0) {\n            return (long)doubleValue;\n\
    \        }\n        // Round the value away from zero\n        doubleValue = Math.Round(doubleValue,\
    \ MidpointRounding.AwayFromZero);\n        // Convert back to an integer\n   \
    \     return (long)doubleValue;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"\
    14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n\
    \    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"\
    0\")) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        return\
    \ Math.Round(Convert.ToDouble(value));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"\
    14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n\
    \    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"\
    0\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm2cf6v6p.cs(23,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824629
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        double\
    \ d = double.Parse(value);\n        return (long)d;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n\
    \    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"\
    -15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n\
    \    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a1ad0f86f8e4a6f8a55f7e195888d2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a1ad0f86f8e4a6f8a55f7e195888d2b>:0 \n"
  stdout: ''
  timestamp: 1659824629
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long ClosestInteger(string value) {\n        // Your\
    \ code here\n        return 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"\
    14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n\
    \    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"\
    0\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fae6d9eef7144a4c8003cd2b7e734453>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fae6d9eef7144a4c8003cd2b7e734453>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824629
