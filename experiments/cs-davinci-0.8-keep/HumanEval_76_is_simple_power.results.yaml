language: cs
name: HumanEval_76_is_simple_power
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        var power = (int) Math.Log(x, n);\n        var result\
    \ = Math.Pow(n, power);\n        return result == x;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659820886
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1 && n == 1) {\n            return true;\n  \
    \      }\n        int k = 0;\n        while (x % n == 0) {\n            x /= n;\n\
    \            k++;\n        }\n        return x == 1 && k > 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d02c268dc10f42e59f2aea00d7e00824>:0 \n"
  stdout: ''
  timestamp: 1659820886
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        var p = (int) Math.Log(x, n);\n        return n == 1 ||\
    \ n == x || n > 1 && n.Pow(p) == x;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcnfciyux.cs(21,47): error CS1061: ''long'' does not contain a definition
    for ''Pow'' and no accessible extension method ''Pow'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659820886
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here.\n        int cnt = 0;\n        long\
    \ num = n;\n        while (num <= x) {\n            if (num == x) {\n        \
    \        cnt++;\n                break;\n            }\n            num *= n;\n\
    \        }\n        return cnt == 1;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <02edae453b4447d7a6856d56d1711058>:0 \n"
  stdout: ''
  timestamp: 1659820886
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        for (long y = 1; y * y <= x; y++) {\n            if (x\
    \ % y == 0) {\n                long z = x / y;\n                if (z != y &&\
    \ BigInteger.Pow(n, y) == x) return true;\n                if (BigInteger.Pow(n,\
    \ z) == x) return true;\n            }\n        }\n        return false;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbgnnw4y_.cs(23,49): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpbgnnw4y_.cs(24,39): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659820886
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        double ln = Math.Log(x, n);\n        double log = Math.Log10(ln);\n\
    \        if (Math.Abs(Math.Truncate(log) - log) <= 0.000000000000001) {\n    \
    \        return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <214571416fc14441bd7153741901bded>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <214571416fc14441bd7153741901bded>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659820886
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Please insert your code here\n        throw new NotImplementedException();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <416949cab467486caf72a271dec874cb>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <416949cab467486caf72a271dec874cb>:0 \n"
  stdout: ''
  timestamp: 1659820886
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        return Math.Log(x, n) % 1 == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c10c5c1cf02c46fba31840ac08c091df>:0 \n"
  stdout: ''
  timestamp: 1659820886
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        throw new NotImplementedException();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <51d5f3598c994dcf95ae1b5d5ad24986>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <51d5f3598c994dcf95ae1b5d5ad24986>:0 \n"
  stdout: ''
  timestamp: 1659820886
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code goes here\n        var result = false;\n\
    \        if (x == 1) {\n            result = true;\n        } else {\n       \
    \     var power = 1;\n            var log = Math.Log(x, n);\n            if (log\
    \ == (int)log) {\n                result = true;\n            }\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659820886
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // return true if x is a simple power of n, false otherwise\n\
    \        if (x == 1) {\n            return true;\n        }\n        long p =\
    \ n;\n        while (p < x) {\n            p *= n;\n        }\n        return\
    \ p == x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659820886
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       for (int i = 2; i <= Math.Sqrt(x); i++) {\n            if (n * n == x)\
    \ {\n                return true;\n            }\n            if (x % i == 0)\
    \ {\n                return false;\n            }\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <822be45da3e344c2b844f9305f3f22c0>:0 \n"
  stdout: ''
  timestamp: 1659820886
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // First check if n is a power of x\n        double a\
    \ = Math.Log(x) / Math.Log(n);\n        // Then check if a is integer\n      \
    \  return (Math.Abs(a - Math.Round(a)) < 0.000000000000001);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ab1167afd88496fac2c6c7b78ce9376>:0 \n"
  stdout: ''
  timestamp: 1659820886
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        int z = 0;\n        long y = x;\n        while (y % n\
    \ == 0) {\n            y /= n;\n            z++;\n        }\n        return y\
    \ == 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659820891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return BigInteger.Pow(n, (int)Math.Log(x,\
    \ n)) == x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: The number\
    \ must be greater than or equal to zero.\nParameter name: exponent\n  at System.Numerics.BigInteger.Pow\
    \ (System.Numerics.BigInteger value, System.Int32 exponent) [0x00004] in <60e4143c0cb74cd7b46ca0d0274780b4>:0\
    \ \n  at Problem.IsSimplePower (System.Int64 x, System.Int64 n) [0x00010] in <6cd9b241f9a94880a03adb65bdeae9c9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00093] in <6cd9b241f9a94880a03adb65bdeae9c9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: The\
    \ number must be greater than or equal to zero.\nParameter name: exponent\n  at\
    \ System.Numerics.BigInteger.Pow (System.Numerics.BigInteger value, System.Int32\
    \ exponent) [0x00004] in <60e4143c0cb74cd7b46ca0d0274780b4>:0 \n  at Problem.IsSimplePower\
    \ (System.Int64 x, System.Int64 n) [0x00010] in <6cd9b241f9a94880a03adb65bdeae9c9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00093] in <6cd9b241f9a94880a03adb65bdeae9c9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659820886
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        long root = (long)Math.Pow(x, 1.0 / n);\n        return\
    \ Math.Pow(root, n) == x;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fee5b34dfe1a4b0eb2380faf9937becd>:0 \n"
  stdout: ''
  timestamp: 1659820886
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        // WARNING: this is inexact and gives wrong answers for all large numbers!\n\
    \        double d = Math.Log(x) / Math.Log(n);\n        return Math.Abs(d - Math.Round(d))\
    \ < 1e-14;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659820886
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // n**int = x <=> int * lg(n) = lg(x)\n        // int\
    \ * lg(n) - lg(x) < epsilon\n        return Math.Abs(Math.Log(x, n) % 1) < 1e-5;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c07c561728f49b2beb8026a6bbcf825>:0 \n"
  stdout: ''
  timestamp: 1659820886
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        long? y = null;\n        long x1 = x;\n        while (x\
    \ > 1) {\n            if (x % n != 0) {\n                return false;\n     \
    \       }\n            y = x;\n            x /= n;\n        }\n        return\
    \ y == x1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <196c230ccc484e57bf1e6a4bfadf8919>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <196c230ccc484e57bf1e6a4bfadf8919>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659820886
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        return Math.Log(x) / Math.Log(n) % 1 == 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <99c1d68682694f9aafc0347ee30d338b>:0 \n"
  stdout: ''
  timestamp: 1659820886
