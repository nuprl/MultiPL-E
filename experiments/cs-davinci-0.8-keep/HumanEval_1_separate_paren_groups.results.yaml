language: cs
name: HumanEval_1_separate_paren_groups
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        var result = new List<string>();\n\
    \        var currentString = new StringBuilder();\n        int parenCount = 0;\n\
    \        foreach (var ch in paren_string) {\n            if (ch == ' ') {\n  \
    \              continue;\n            }\n            if (ch == '(') {\n      \
    \          parenCount++;\n            }\n            if (ch == ')') {\n      \
    \          parenCount--;\n            }\n            currentString.Append(ch);\n\
    \            if (parenCount == 0) {\n                result.Add(currentString.ToString());\n\
    \                currentString.Clear();\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"\
    (()())\", (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n \
    \   Debug.Assert(SeparateParenGroups((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"((()))\"\
    , (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\"\
    )).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"}))));\n  \
    \  Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new List<string>(new\
    \ string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2330e9aafe9143cbb3f600284a66145c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2330e9aafe9143cbb3f600284a66145c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823662
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        List<string> parens = new\
    \ List<string>();\n        int brace_depth = 0;\n        int prev_brace_depth\
    \ = 0;\n        string current_string = \"\";\n        foreach (char ch in paren_string)\
    \ {\n            if (ch == '(') {\n                brace_depth++;\n          \
    \  } else if (ch == ')') {\n                brace_depth--;\n            }\n  \
    \          if (ch != ' ') {\n                current_string += ch;\n         \
    \   }\n            if (brace_depth == 0 && current_string != \"\") {\n       \
    \         parens.Add(current_string);\n                current_string = \"\";\n\
    \            }\n        }\n        return parens;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).Equals((new List<string>(new string[]{(string)\"(()())\",\
    \ (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"\
    () (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\"\
    , (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"\
    (()(())((())))\")).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"\
    }))));\n    Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8cfd11cdd4224ba3817d28c91229fbc8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8cfd11cdd4224ba3817d28c91229fbc8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823662
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        List<string> groups = new\
    \ List<string>();\n        int start = 0;\n        int close = 0;\n        int\
    \ open = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n       \
    \     if (paren_string[i] == '(') {\n                open++;\n            } else\
    \ if (paren_string[i] == ')') {\n                close++;\n            }\n   \
    \         if (open > 0 && open == close) {\n                groups.Add(paren_string.Substring(start,\
    \ i - start + 1));\n                start = i + 1;\n                open = 0;\n\
    \                close = 0;\n            }\n        }\n        return groups;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"\
    (()())\", (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n \
    \   Debug.Assert(SeparateParenGroups((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"((()))\"\
    , (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\"\
    )).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"}))));\n  \
    \  Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new List<string>(new\
    \ string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5e57790a4e2f463aaddc053642c5522a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5e57790a4e2f463aaddc053642c5522a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823662
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        var l = new List<string>();\n\
    \        var sb = new StringBuilder();\n        int open = 0;\n        foreach\
    \ (var c in paren_string) {\n            if (c == ' ') continue;\n           \
    \ if (c == '(') open++;\n            if (c == ')') open--;\n            sb.Append(c);\n\
    \            if (open == 0) {\n                l.Add(sb.ToString());\n       \
    \         sb.Clear();\n            }\n        }\n        return l;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"\
    (()())\", (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n \
    \   Debug.Assert(SeparateParenGroups((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"((()))\"\
    , (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\"\
    )).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"}))));\n  \
    \  Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new List<string>(new\
    \ string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <02e6827c0718412cb94d4aaa9f450857>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <02e6827c0718412cb94d4aaa9f450857>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823662
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        string group = \"\";\n \
    \       List<string> groups = new List<string>();\n        int count = 0;\n  \
    \      for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                if (count == 0) {\n                    group = \"\
    \";\n                }\n                count++;\n                group += paren_string[i];\n\
    \            } else if (paren_string[i] == ')') {\n                count--;\n\
    \                group += paren_string[i];\n                if (count == 0) {\n\
    \                    groups.Add(group);\n                }\n            }\n  \
    \      }\n        return groups;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\"\
    , (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"\
    () (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\"\
    , (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"\
    (()(())((())))\")).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"\
    }))));\n    Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e76f8e7af18441e0b04d93685ead462d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e76f8e7af18441e0b04d93685ead462d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823662
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        return new List<string>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"\
    (()())\", (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n \
    \   Debug.Assert(SeparateParenGroups((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"((()))\"\
    , (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\"\
    )).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"}))));\n  \
    \  Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new List<string>(new\
    \ string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5c4e6fe2d6a547bdbd7aceaf0147a323>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5c4e6fe2d6a547bdbd7aceaf0147a323>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823662
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        List<string> ret = new List<string>();\n\
    \        int open_count = 0;\n        int last_open = 0;\n        for (int i =\
    \ 0; i < paren_string.Length; i++) {\n            if (paren_string[i] == '(')\
    \ {\n                open_count++;\n            } else if (paren_string[i] ==\
    \ ')') {\n                open_count--;\n                if (open_count == 0)\
    \ {\n                    ret.Add(paren_string.Substring(last_open, i - last_open\
    \ + 1));\n                    last_open = i + 1;\n                }\n        \
    \    }\n        }\n        return ret;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\"\
    , (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"\
    () (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\"\
    , (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"\
    (()(())((())))\")).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"\
    }))));\n    Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4914ff4b77e9430b95c31f354a6f0c8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4914ff4b77e9430b95c31f354a6f0c8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823662
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        int numOpenParens = 0;\n\
    \        int numClosedParens = 0;\n        string currString = \"\";\n       \
    \ List<string> retList = new List<string>();\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                numOpenParens++;\n\
    \                currString += paren_string[i];\n            } else if (paren_string[i]\
    \ == ')') {\n                numClosedParens++;\n                currString +=\
    \ paren_string[i];\n            }\n            if (numOpenParens == numClosedParens)\
    \ {\n                if (numOpenParens != 0) {\n                    retList.Add(currString);\n\
    \                }\n                numOpenParens = 0;\n                numClosedParens\
    \ = 0;\n                currString = \"\";\n            }\n        }\n       \
    \ return retList;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"\
    (()())\", (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n \
    \   Debug.Assert(SeparateParenGroups((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"((()))\"\
    , (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\"\
    )).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"}))));\n  \
    \  Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new List<string>(new\
    \ string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c5f8262adea41e1b827ee47bf1fea9f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c5f8262adea41e1b827ee47bf1fea9f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823662
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        var result = new List<string>();\n\
    \        var stack = new Stack<char>();\n        var temp = new StringBuilder();\n\
    \        foreach (var c in paren_string) {\n            if (c == ' ') continue;\n\
    \            if (c == '(') {\n                if (stack.Count == 0) {\n      \
    \              temp.Clear();\n                }\n                stack.Push(c);\n\
    \                temp.Append(c);\n            } else {\n                stack.Pop();\n\
    \                temp.Append(c);\n                if (stack.Count == 0) {\n  \
    \                  result.Add(temp.ToString());\n                }\n         \
    \   }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\"\
    , (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"\
    () (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\"\
    , (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"\
    (()(())((())))\")).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"\
    }))));\n    Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39d71507b4c4454f8c2751d6aee0e309>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39d71507b4c4454f8c2751d6aee0e309>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823662
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        List<string> result = new\
    \ List<string>();\n        int idx = 0;\n        while (idx < paren_string.Length)\
    \ {\n            // Skip all whitespace\n            while (idx < paren_string.Length\
    \ && paren_string[idx] == ' ') {\n                idx++;\n            }\n    \
    \        // Can't start a group with a ')'\n            if (idx < paren_string.Length\
    \ && paren_string[idx] == ')') {\n                throw new ArgumentException(\"\
    Invalid parenthesis group starting at index \" + idx);\n            }\n      \
    \      // Record the start of the next group\n            int start = idx;\n \
    \           int count = 0;\n            // Look for the end of the group\n   \
    \         while (idx < paren_string.Length) {\n                if (paren_string[idx]\
    \ == ' ') {\n                    // Skip whitespace\n                    idx++;\n\
    \                } else if (paren_string[idx] == '(') {\n                    //\
    \ Note the nested parenthesis, then skip it\n                    count++;\n  \
    \                  idx++;\n                } else if (paren_string[idx] == ')')\
    \ {\n                    // If the count is non-zero we are in a nested group,\
    \ so just note this parens\n                    if (count > 0) {\n           \
    \             count--;\n                        idx++;\n                    }\
    \ else {\n                        // This is the end of the current group, so\
    \ add it to the list and start over\n                        result.Add(paren_string.Substring(start,\
    \ idx-start+1));\n                        idx++;\n                        break;\n\
    \                    }\n                } else {\n                    // Not a\
    \ valid character, fail.\n                    throw new ArgumentException(\"Invalid\
    \ parenthesis group starting at index \" + idx);\n                }\n        \
    \    }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<string>(new string[]{(string)\"(()())\", (string)\"((()))\"\
    , (string)\"()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"\
    () (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\"\
    , (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"\
    (()(())((())))\")).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"\
    }))));\n    Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <decc31a7ddbc42d4b7911f157b4efd35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <decc31a7ddbc42d4b7911f157b4efd35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823662
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        List<string> results = new\
    \ List<string>();\n        int start = 0;\n        int depth = 0;\n        for\
    \ (int end = 0; end < paren_string.Length; end++) {\n            char c = paren_string[end];\n\
    \            if (c == '(') {\n                depth++;\n            } else if\
    \ (c == ')') {\n                depth--;\n            }\n            if (depth\
    \ == 0) {\n                results.Add(paren_string.Substring(start, end - start\
    \ + 1));\n                start = end + 1;\n            }\n        }\n       \
    \ return results;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"\
    (()())\", (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n \
    \   Debug.Assert(SeparateParenGroups((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"((()))\"\
    , (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\"\
    )).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"}))));\n  \
    \  Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new List<string>(new\
    \ string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c80d950a1c8940f1b92e88cfaa2f8406>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c80d950a1c8940f1b92e88cfaa2f8406>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823662
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        List<string> result = new\
    \ List<string>();\n        int depth = 0;\n        int start = 0;\n        for\
    \ (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                depth++;\n            } else if (paren_string[i]\
    \ == ')') {\n                depth--;\n            }\n            if (depth ==\
    \ 0) {\n                result.Add(paren_string.Substring(start, i - start + 1));\n\
    \                start = i + 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"\
    (()())\", (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n \
    \   Debug.Assert(SeparateParenGroups((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"((()))\"\
    , (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\"\
    )).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"}))));\n  \
    \  Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new List<string>(new\
    \ string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff041c8d176644cfb9f3c87b8fce1c94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff041c8d176644cfb9f3c87b8fce1c94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823662
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        List<string> res = new List<string>();\n\
    \        int open = 0;\n        int start = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') open++;\n            else if\
    \ (paren_string[i] == ')') open--;\n            if (open == 0) {\n           \
    \     res.Add(paren_string.Substring(start, i - start + 1));\n               \
    \ start = i + 1;\n            }\n        }\n        return res;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"\
    (()())\", (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n \
    \   Debug.Assert(SeparateParenGroups((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"((()))\"\
    , (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\"\
    )).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"}))));\n  \
    \  Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new List<string>(new\
    \ string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c05418644664dffa4114caf2eb74278>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c05418644664dffa4114caf2eb74278>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823662
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        throw new NotImplementedException();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"\
    (()())\", (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n \
    \   Debug.Assert(SeparateParenGroups((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"((()))\"\
    , (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\"\
    )).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"}))));\n  \
    \  Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new List<string>(new\
    \ string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <0228a7b6cb5f4e73bbfc35729534f119>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <0228a7b6cb5f4e73bbfc35729534f119>:0 \n"
  stdout: ''
  timestamp: 1659823662
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        if (paren_string == null)\
    \ {\n            throw new ArgumentNullException();\n        }\n        var ans\
    \ = new List<string>();\n        var builder = new StringBuilder();\n        int\
    \ level = 0;\n        foreach (var c in paren_string) {\n            if (c ==\
    \ ' ') {\n                continue;\n            }\n            if (c == '(')\
    \ {\n                level++;\n            } else if (c == ')') {\n          \
    \      level--;\n            }\n            builder.Append(c);\n            if\
    \ (level == 0) {\n                ans.Add(builder.ToString());\n             \
    \   builder.Clear();\n            }\n        }\n        return ans;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"\
    (()())\", (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n \
    \   Debug.Assert(SeparateParenGroups((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"((()))\"\
    , (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\"\
    )).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"}))));\n  \
    \  Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new List<string>(new\
    \ string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ac7525a8e7249e9b6f8790bf10b5de2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ac7525a8e7249e9b6f8790bf10b5de2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823662
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        List<string> groups = new\
    \ List<string>();\n        Stack<int> stack = new Stack<int>();\n        int start\
    \ = 0;\n        int i = 0;\n        while (i < paren_string.Length) {\n      \
    \      if (paren_string[i] == '(') {\n                stack.Push(i);\n       \
    \     } else if (paren_string[i] == ')') {\n                stack.Pop();\n   \
    \             if (stack.Count == 0) {\n                    groups.Add(paren_string.Substring(start,\
    \ i - start + 1));\n                    start = i + 1;\n                }\n  \
    \          }\n            i++;\n        }\n        return groups;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"\
    (()())\", (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n \
    \   Debug.Assert(SeparateParenGroups((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"((()))\"\
    , (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\"\
    )).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"}))));\n  \
    \  Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new List<string>(new\
    \ string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <002d83d0bd1e47059d300855e61990c3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <002d83d0bd1e47059d300855e61990c3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823662
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        // replace all spaces with\
    \ no spaces so we can ignore spaces\n        paren_string = paren_string.Replace(\"\
    \ \", \"\");\n        var groups = new List<string>();\n        int current_brace_count\
    \ = 0;\n        int start_index = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                if (current_brace_count\
    \ == 0) {\n                    start_index = i;\n                }\n         \
    \       current_brace_count++;\n            } else if (paren_string[i] == ')')\
    \ {\n                current_brace_count--;\n                if (current_brace_count\
    \ == 0) {\n                    groups.Add(paren_string.Substring(start_index,\
    \ i - start_index + 1));\n                }\n            }\n        }\n      \
    \  return groups;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"\
    (()())\", (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n \
    \   Debug.Assert(SeparateParenGroups((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"((()))\"\
    , (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\"\
    )).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"}))));\n  \
    \  Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new List<string>(new\
    \ string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <37777855347f4772bc3725bb1773bc37>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <37777855347f4772bc3725bb1773bc37>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823662
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        // Function for parsing\
    \ your input string\n        // Returns a list of strings representing separate\
    \ groups of parentheses\n        throw new NotImplementedException();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"\
    (()())\", (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n \
    \   Debug.Assert(SeparateParenGroups((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"((()))\"\
    , (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\"\
    )).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"}))));\n  \
    \  Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new List<string>(new\
    \ string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2c68ae8771cd4c33b4290335c8280623>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <2c68ae8771cd4c33b4290335c8280623>:0 \n"
  stdout: ''
  timestamp: 1659823662
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        var ret = new List<string>();\n\
    \        return ret;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SeparateParenGroups((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<string>(new string[]{(string)\"(()())\", (string)\"((()))\", (string)\"\
    ()\", (string)\"((())()())\"}))));\n    Debug.Assert(SeparateParenGroups((\"()\
    \ (()) ((())) (((())))\")).Equals((new List<string>(new string[]{(string)\"()\"\
    , (string)\"(())\", (string)\"((()))\", (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"\
    (()(())((())))\")).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"\
    }))));\n    Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"\
    }))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2521c350b65148679f0f3334a26a10f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2521c350b65148679f0f3334a26a10f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823662
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string containing multiple\
    \ groups of nested parentheses. Your goal is to\n    // separate those group into\
    \ separate strings and return the list of those.\n    // Separate groups are balanced\
    \ (each open brace is properly closed) and not nested within each other\n    //\
    \ Ignore any spaces in the input string.\n    // >>> separate_paren_groups('(\
    \ ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static List<string>\
    \ SeparateParenGroups(string paren_string) {\n        return null;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SeparateParenGroups((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<string>(new string[]{(string)\"\
    (()())\", (string)\"((()))\", (string)\"()\", (string)\"((())()())\"}))));\n \
    \   Debug.Assert(SeparateParenGroups((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"((()))\"\
    , (string)\"(((())))\"}))));\n    Debug.Assert(SeparateParenGroups((\"(()(())((())))\"\
    )).Equals((new List<string>(new string[]{(string)\"(()(())((())))\"}))));\n  \
    \  Debug.Assert(SeparateParenGroups((\"( ) (( )) (( )( ))\")).Equals((new List<string>(new\
    \ string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00036] in <a14ea167ab0740c88fa2bd2ab7b6f7ab>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00036] in <a14ea167ab0740c88fa2bd2ab7b6f7ab>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823662
