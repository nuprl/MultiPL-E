name: HumanEval_44_change_base
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Change numerical base of input number x to base.\n    // return\
  \ string representation after the conversion.\n    // base numbers are less than\
  \ 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n\
  \    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static string\
  \ ChangeBase(long x, long numBase) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
  \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\"\
  )));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L),\
  \ (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"\
  1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L),\
  \ (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\"\
  )));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L),\
  \ (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\"\
  )));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n}\n"
completions: ["        string res = \"\";\n        while (x > 0) {\n            res\
    \ = (x % numBase).ToString() + res;\n            x /= numBase;\n        }\n  \
    \      return res;", "        List<long> ret = new List<long>();\n        while\
    \ (x != 0) {\n            long cur = x % numBase;\n            ret.Add(cur);\n\
    \            x /= numBase;\n        }\n        return string.Join(\"\", ret.AsEnumerable().Reverse());",
  "        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n    \
    \        sb.Append(x % numBase);\n            x /= numBase;\n        }\n     \
    \   return string.Join(\"\", sb.ToString().Reverse());", "        StringBuilder\
    \ sb = new StringBuilder();\n        long tmp = x;\n        while (tmp > 0) {\n\
    \            sb.Append(tmp % numBase);\n            tmp /= numBase;\n        }\n\
    \        return string.Join(\"\", sb.ToString().Reverse());", "        var digits\
    \ = new List<int>();\n        while (x > 0) {\n            digits.Add((int)(x\
    \ % numBase));\n            x /= numBase;\n        }\n        return string.Join(\"\
    \", digits.ToArray());", "        var ret = \"\";\n        for (var i = 0; i <\
    \ numBase; i++) {\n            ret = (x % 2).ToString() + ret;\n            x\
    \ = x / 2;\n        }\n        return ret;", "        string result = \"\";\n\
    \        while (x != 0) {\n            result = (x % numBase).ToString() + result;\n\
    \            x /= numBase;\n        }\n        return result;", "        var result\
    \ = new StringBuilder();\n        var a = new List<long>();\n        for (int\
    \ i = 0; x != 0; i++) {\n            a.Add(x % numBase);\n            x /= numBase;\n\
    \        }\n        a.Reverse();\n        return String.Join(\"\", a);", "   \
    \     StringBuilder result = new StringBuilder();\n        while (x > 0) {\n \
    \           result.Append(x % numBase);\n            x /= numBase;\n        }\n\
    \        return new string(result.ToString().Reverse().ToArray());", "       \
    \ string result = \"\";\n        while (x > 0) {\n            result = (x % numBase).ToString()\
    \ + result;\n            x /= numBase;\n        }\n        return result;", " \
    \       var result = new StringBuilder();\n        while (x != 0) {\n        \
    \    result.Append(x % numBase);\n            x /= numBase;\n        }\n     \
    \   return result.ToString();", "        string str = \"\";\n        while (x\
    \ > 0) {\n            str = (x % numBase).ToString() + str;\n            x /=\
    \ numBase;\n        }\n        return str;", "        var sb = new StringBuilder();\n\
    \        var check = 0L;\n        while (x > 0) {\n            check = x % numBase;\n\
    \            x /= numBase;\n            sb.Append(check);\n        }\n       \
    \ return new string(sb.ToString().Reverse().ToArray());", "        var result\
    \ = new List<long>();\n        while (x > 0) {\n            var div = x / numBase;\n\
    \            var mod = x % numBase;\n            result.Add(mod);\n          \
    \  x = div;\n        }\n        result.Reverse();\n        return string.Join(\"\
    \", result);", "        var ret = new StringBuilder();\n        while (x > 0)\
    \ {\n            var r = x % numBase;\n            ret.Append(r);\n          \
    \  x /= numBase;\n        }\n        var arr = ret.ToString().ToCharArray();\n\
    \        Array.Reverse(arr);\n        return new string(arr);", "        var y\
    \ = x;\n        long n = 0;\n        for (; y > 0; y /= numBase) {\n         \
    \   n += 1;\n        }\n        var ret = new char[n];\n        y = x;\n     \
    \   for (long i = 0; i < n; i++) {\n            ret[i] = (char)('0' + y % numBase);\n\
    \            y /= numBase;\n        }\n        Array.Reverse(ret);\n        return\
    \ new string(ret);", "        var result = new StringBuilder();\n        while\
    \ (x > 0) {\n            result.Append(x % numBase);\n            x /= numBase;\n\
    \        }\n        return result.ToString();", "        var array = new char[128];\n\
    \        var len = 0;\n        while (x > 0) {\n            array[len++] = (char)(x\
    \ % numBase + '0');\n            x /= numBase;\n        }\n        var sb = new\
    \ StringBuilder();\n        while (len > 0) {\n            sb.Append(array[--len]);\n\
    \        }\n        return sb.ToString();", "        List<long> digits = new List<long>();\n\
    \        while (x > 0) {\n            digits.Add(x % numBase);\n            x\
    \ /= numBase;\n        }\n        digits.Reverse();\n        return string.Join(\"\
    \", digits);", "        Debug.Assert(numBase <= 10);\n        string result =\
    \ \"\";\n        while (x > 0) {\n            result = (x % numBase).ToString()\
    \ + result;\n            x /= numBase;\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
