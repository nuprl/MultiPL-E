name: HumanEval_158_find_max
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that accepts a list of strings.\n    // The\
  \ list contains different words. Return the word with maximum number\n    // of\
  \ unique characters. If multiple strings have maximum number of unique\n    // characters,\
  \ return the one which comes first in lexicographical order.\n    // find_max([\"\
  name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\"\
  , \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"\
  aaaaaaa\"\n    public static string FindMax(List<string> words) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
  }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
  }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\"\
  , (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",\
  \ (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
  nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
  this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"\
  }))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
completions: ["        if (words.Count == 0)\n            return null;\n        string\
    \ max = words[0];\n        foreach (string word in words) {\n            int num\
    \ = 0;\n            foreach (char letter in word) {\n                if (!max.Contains(letter))\n\
    \                    num++;\n            }\n            if (num > max.Length)\n\
    \                max = word;\n        }\n        return max;", "        // Your\
    \ code goes here\n        return \"\";", '        return words.Aggregate("", (a,
    w) => a == "" || w.Distinct().Count() > a.Distinct().Count() ? w : a);', '        throw
    new NotImplementedException();', "        if (words.Count == 0)\n            return\
    \ \"\";\n        int max = 0;\n        String res = \"\";\n        for (int i\
    \ = 0; i < words.Count; i++) {\n            int k = 0;\n            String s =\
    \ words[i];\n            while (k < s.Length) {\n                char c = s[k];\n\
    \                s = s.Remove(k, 1);\n                if (s.IndexOf(c) == -1)\
    \ {\n                    s = s.Insert(k, c.ToString());\n                    k++;\n\
    \                }\n            }\n            if (s.Length > max) {\n       \
    \         max = s.Length;\n                res = words[i];\n            }\n  \
    \      }\n        return res;", "        string max = \"\";\n        foreach (string\
    \ word in words) {\n            if (word.Distinct().Count() > max.Distinct().Count())\
    \ {\n                max = word;\n            }\n        }\n        return max;",
  "        // your solution here\n        string result = \"\";\n        int maxUnique\
    \ = 0;\n        int wordLen = 0;\n        foreach (string word in words) {\n \
    \           HashSet<char> chars = new HashSet<char>();\n            wordLen =\
    \ word.Length;\n            for (int i = 0; i < wordLen; i++) {\n            \
    \    chars.Add(word[i]);\n            }\n            if (chars.Count > maxUnique)\
    \ {\n                maxUnique = chars.Count;\n                result = word;\n\
    \            }\n        }\n        return result;", "        // TODO: Implement\
    \ FindMax()\n        // Return the longest word\n        return \"\";", "    \
    \    if (words.Count == 0) {\n            return \"\";\n        }\n        int\
    \ max = 0;\n        string max_word = \"\";\n        foreach (string s in words)\
    \ {\n            int len = MaxUnique(s);\n            if (len > max) {\n     \
    \           max = len;\n                max_word = s;\n            }\n       \
    \ }\n        return max_word;", "        int max_count = -1;\n        string result\
    \ = \"\";\n        foreach (string w in words) {\n            int count = w.Distinct().Count();\n\
    \            if (count > max_count) {\n                max_count = count;\n  \
    \              result = w;\n            }\n        }\n        return result;",
  "        // input list is not empty\n        Debug.Assert(words.Count > 0);\n  \
    \      var max_chars = words[0].Length;\n        var max_index = 0;\n        for\
    \ (int i = 1; i < words.Count; i++) {\n            if (words[i].Length > max_chars)\
    \ {\n                max_chars = words[i].Length;\n                max_index =\
    \ i;\n            }\n        }\n        return words[max_index];", "        if\
    \ (words.Count < 1) return \"\";\n        var maxStr = words[0];\n        foreach\
    \ (var str in words) {\n            if (str.Distinct().Count() > maxStr.Distinct().Count())\
    \ {\n                maxStr = str;\n            }\n        }\n        return maxStr;",
  "        return words.Aggregate((word, next) =>\n            word.Length == next.Length\
    \ ?\n                word.CompareTo(next) < 0 ? word : next :\n              \
    \  word.Length > next.Length ? word : next);", "        string result = \"\";\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     HashSet<char> set = new HashSet<char>();\n            foreach (char ch in\
    \ word) {\n                set.Add(ch);\n            }\n            if (set.Count\
    \ > maxCount) {\n                maxCount = set.Count;\n                result\
    \ = word;\n            }\n        }\n        return result;", "        // Write\
    \ your code here.\n        string res = \"\";\n        int counter = 0;\n    \
    \    for (int i = 0; i < words.Count; i++) {\n            int currentLength =\
    \ FindUniqueChars(words[i]);\n            if (currentLength > counter) {\n   \
    \             counter = currentLength;\n                res = words[i];\n    \
    \        }\n        }\n        return res;", "        var max = 0;\n        var\
    \ max_word = \"\";\n        foreach (var word in words) {\n            var chars\
    \ = new Dictionary<char, int>();\n            foreach (var ch in word) {\n   \
    \             if (!chars.ContainsKey(ch)) {\n                    chars[ch] = 1;\n\
    \                }\n            }\n            if (chars.Count > max) {\n    \
    \            max = chars.Count;\n                max_word = word;\n          \
    \  }\n        }\n        return max_word;", "        if (words.Count == 0) {\n\
    \            return \"\";\n        }\n\n        var maxLength = 0;\n        var\
    \ result = \"\";\n        foreach (var word in words) {\n            var uniqueChars\
    \ = new HashSet<char>();\n            foreach (var c in word) {\n            \
    \    uniqueChars.Add(c);\n            }\n            if (uniqueChars.Count > maxLength)\
    \ {\n                maxLength = uniqueChars.Count;\n                result =\
    \ word;\n            }\n        }\n        return result;", '        throw new
    NotImplementedException();', "        string maxword = \"\";\n        int maxcount\
    \ = 0;\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (word.IndexOf(c) ==\
    \ word.LastIndexOf(c)) {\n                    count++;\n                }\n  \
    \          }\n            if (count > maxcount) {\n                maxcount =\
    \ count;\n                maxword = word;\n            }\n        }\n        return\
    \ maxword;", "        // We're looking for\n        //  1. Highest count of distinct\
    \ letters\n        //  2. Ties broken by being the earliest in the list (lexicographical\
    \ order)\n        // So we'll use some LINQ to enumerate all the distinct letters\
    \ in each\n        // word and have the Query compare those values.\n        var\
    \ result = words.Select(word => (word, word.Distinct().Count()))\n           \
    \               .OrderByDescending(t => t.Item2)\n                          .ThenBy(t\
    \ => t.Item1)\n                          .First().Item1;\n        return result;"]
stop_tokens:
- "\n    }\n"
