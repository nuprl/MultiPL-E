name: HumanEval_71_triangle_area
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given the lengths of the three sides of a triangle. Return the\
  \ area of\n    // the triangle rounded to 2 decimal points if the three sides form\
  \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
  \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
  \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
  \ 2, 10) == -1\n    public static float TriangleArea(long a, long b, long c) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),\
  \ (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n\
  \    Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),\
  \ (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n\
  \    Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),\
  \ (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==\
  \ (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n\
  \    }\n\n}\n"
completions: ["        if (a + b > c && a + c > b && b + c > a) {\n            float\
    \ p = (a + b + c) / 2f;\n            float area = (float)Math.Sqrt(p * (p - a)\
    \ * (p - b) * (p - c));\n            return (float)Math.Round(area, 2);\n    \
    \    }\n        return -1;", '        return (float) (a + b > c && b + c > a &&
    a + c > b ? Math.Sqrt((a + b + c) * (a + b - c) * (b + c - a) * (c + a - b)) /
    4 : -1);', "        return a + b > c && a + c > b && b + c > a\n            ?\
    \ (float)Math.Round(0.5 * Math.Sqrt(a * a + b * b - c * c) * Math.Sqrt(a * a +\
    \ c * c - b * b) * Math.Sqrt(b * b + c * c - a * a), 2)\n            : -1;", '        throw
    new NotImplementedException();', "        // your code here\n        float perimeter\
    \ = (float)(a + b + c);\n        float x = (float)((a + b - c) * (a - b + c) *\
    \ (-a + b + c) * (a + b + c));\n        x = (float)Math.Sqrt(x);\n        x =\
    \ x / (float)4;\n        return x;", "        // validate input\n        // check\
    \ if any of the sides are negative or zero\n        if (a <= 0 || b <= 0 || c\
    \ <= 0) return -1;\n        // check if any two sides make the third side larger\
    \ than itself\n        if (a + b <= c || a + c <= b || b + c <= a) return -1;\n\
    \        // calculate\n        float p = (a + b + c) / 2f;\n        float area\
    \ = (float)Math.Sqrt(p * (p - a) * (p - b) * (p - c));\n        return (float)Math.Round(area,\
    \ 2);", '        throw new NotImplementedException();', "        float result\
    \ = (float)(Math.Sqrt((a + b + c) * (-a + b + c) * (a - b + c) * (a + b - c))\
    \ / 4);\n        if (a + b < c || a + c < b || b + c < a) return -1;\n       \
    \ return result;", "        float s = (a + b + c) / 2.0f;\n        if (s - a <=\
    \ 0 || s - b <= 0 || s - c <= 0) {\n            return -1;\n        }\n      \
    \  return (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));", "        // Your\
    \ code here\n        return 0;", "        if (a < 0 || b < 0 || c < 0) return\
    \ -1;\n        if (a + b <= c || a + c <= b || b + c <= a) return -1;\n      \
    \  float p = (a + b + c) / 2f;\n        return (float)Math.Sqrt(p * (p - a) *\
    \ (p - b) * (p - c));", "        float r;\n        if ((a + b > c) && (a + c >\
    \ b) && (b + c > a)) {\n            // area of triangle is: sqrt(p(p-a)(p-b)(p-c))\
    \ where p = (a+b+c)/2\n            float p = (a + b + c) / 2;\n            r =\
    \ (float)Math.Sqrt(p * (p - a) * (p - b) * (p - c));\n        } else {\n     \
    \       r = -1;\n        }\n        return r;", "        // Now, how could I make\
    \ this code more Ruby-like?\n        if (a+b <= c || a+c <= b || b+c <= a) {\n\
    \            return -1;\n        }\n        else {\n            float s = (a+b+c)/2.0f;\n\
    \            return (float)Math.Sqrt(s*(s-a)*(s-b)*(s-c));\n        }", "    \
    \    if (a <= 0 || b <= 0 || c <= 0) return -1;\n        var area = (float)0.5\
    \ * (a * b * c);\n        return area;", "        float s = (a + b + c) / 2.0f;\n\
    \        float area = (float)Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n   \
    \     return area;", '        return 0.0f;', "        if (a+b>c && a+c>b && b+c>a)\n\
    \            return (float)Math.Round(Math.Sqrt((a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c))/4,\
    \ 2);\n        else\n            return -1;", "        double s = (a + b + c)\
    \ / 2.0;\n        double area = Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \        if (area > 0) {\n            return (float) Math.Round(area, 2);\n  \
    \      } else {\n            return -1;\n        }", '        return -1;', " \
    \       if (a + b > c && a + c > b && b + c > a) {\n            double s = (a\
    \ + b + c) / 2.0;\n            return (float)Math.Sqrt(s * (s - a) * (s - b) *\
    \ (s - c));\n        }\n        return -1;"]
stop_tokens:
- "\n    }\n"
