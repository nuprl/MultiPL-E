name: HumanEval_155_even_odd_count
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given an integer. return a tuple that has the number of even\
  \ and odd digits respectively.\n    // Example:\n    // even_odd_count(-12) ==>\
  \ (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Tuple<long, long>\
  \ EvenOddCount(long num) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(EvenOddCount((7L)).Equals((Tuple.Create(0L,\
  \ 1L))));\n    Debug.Assert(EvenOddCount((-78L)).Equals((Tuple.Create(1L, 1L))));\n\
  \    Debug.Assert(EvenOddCount((3452L)).Equals((Tuple.Create(2L, 2L))));\n    Debug.Assert(EvenOddCount((346211L)).Equals((Tuple.Create(3L,\
  \ 3L))));\n    Debug.Assert(EvenOddCount((-345821L)).Equals((Tuple.Create(3L, 3L))));\n\
  \    Debug.Assert(EvenOddCount((-2L)).Equals((Tuple.Create(1L, 0L))));\n    Debug.Assert(EvenOddCount((-45347L)).Equals((Tuple.Create(2L,\
  \ 3L))));\n    Debug.Assert(EvenOddCount((0L)).Equals((Tuple.Create(1L, 0L))));\n\
  \    }\n\n}\n"
completions: ["        // write your code here\n        int even = 0;\n        int\
    \ odd = 0;\n        for (int i = 0; i < Math.Abs(num).ToString().Length; i++)\n\
    \        {\n            if (Math.Abs(num).ToString()[i] % 2 == 0)\n          \
    \  {\n                even++;\n            }\n            else\n            {\n\
    \                odd++;\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long Even = 0;\n        long Odd = 0;\n        bool is_even\
    \ = true;\n        if (num < 0) {\n            is_even = false;\n            num\
    \ = -num;\n        }\n        if (num == 0) {\n            return new Tuple<long,\
    \ long>(1, 0);\n        }\n        while (num > 0) {\n            if (num % 2\
    \ == 0) {\n                Even++;\n            } else {\n                Odd++;\n\
    \            }\n            num /= 10;\n        }\n        if (is_even) {\n  \
    \          return new Tuple<long, long>(Even, Odd);\n        } else {\n      \
    \      return new Tuple<long, long>(Odd, Even);\n        }", "        var even\
    \ = 0;\n        var odd = 0;\n        while (num != 0) {\n            var d =\
    \ num % 10;\n            if (d % 2 == 0) even++;\n            else odd++;\n  \
    \          num /= 10;\n        }\n        return Tuple.Create(even, odd);", '        throw
    new NotImplementedException();', "        long even_count = 0;\n        long odd_count\
    \ = 0;\n        if (num < 0) {\n            num = num * -1;\n        }\n     \
    \   while (num != 0) {\n            long digit = num % 10;\n            if (digit\
    \ % 2 == 0) {\n                even_count += 1;\n            } else {\n      \
    \          odd_count += 1;\n            }\n            num = num / 10;\n     \
    \   }\n        return Tuple.Create(even_count, odd_count);", "        if (num\
    \ < 0)\n            num = -num;\n        long odd = 0;\n        long even = 0;\n\
    \        while (num > 0) {\n            long a = num % 10;\n            if (a\
    \ % 2 == 0)\n                even++;\n            else\n                odd++;\n\
    \            num /= 10;\n        }\n        return new Tuple<long, long>(even,\
    \ odd);", "        if (num < 0) {\n            num = Math.Abs(num);\n        }\n\
    \        return new Tuple<long, long>(0, 0);", "        var even = 0;\n      \
    \  var odd = 0;\n        while (num != 0) {\n            if ((num % 10) % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return new Tuple<long,\
    \ long>(even, odd);", "        // Base case. We are assuming that the integer\
    \ is non-negative.\n        if (num == 0) {\n            return new Tuple<long,\
    \ long>(1, 0);\n        }\n\n        if (num % 2 == 0) {\n            // Even\n\
    \            var t = EvenOddCount(num / 10);\n            return new Tuple<long,\
    \ long>(t.Item1 + 1, t.Item2);\n        }\n        else {\n            // Odd\n\
    \            var t = EvenOddCount(num / 10);\n            return new Tuple<long,\
    \ long>(t.Item1, t.Item2 + 1);\n        }", "        string str = num.ToString();\n\
    \        long oddCount = 0;\n        long evenCount = 0;\n        for (int i =\
    \ 0; i < str.Length; i++) {\n            int digit = int.Parse(str[i].ToString());\n\
    \            if (digit % 2 == 0)\n                evenCount++;\n            else\n\
    \                oddCount++;\n        }\n        return new Tuple<long, long>(evenCount,\
    \ oddCount);", '        throw new NotImplementedException();', "        long evenCount\
    \ = 0;\n        long oddCount = 0;\n        string numStr = num.ToString();\n\
    \        for (int i = 0; i < numStr.Length; i++) {\n            int digit = int.Parse(numStr[i].ToString());\n\
    \            if (digit % 2 == 0) {\n                evenCount++;\n           \
    \ } else {\n                oddCount++;\n            }\n        }\n        return\
    \ new Tuple<long, long>(evenCount, oddCount);", '        return new Tuple<long,
    long>(num.ToString().Where(c => c.ToString() == "0" || c.ToString() == "2" ||
    c.ToString() == "4" || c.ToString() == "6" || c.ToString() == "8").Count(), num.ToString().Where(c
    => c.ToString() == "1" || c.ToString() == "3" || c.ToString() == "5" || c.ToString()
    == "7" || c.ToString() == "9").Count());', '        return Tuple.Create(num.ToString().Count(ch
    => ch % 2 == 0), num.ToString().Count(ch => ch % 2 == 1));', '        throw new
    NotImplementedException();', "        long even = 0;\n        long odd = 0;\n\
    \        num = Math.Abs(num);\n        while (num > 0) {\n            long digit\
    \ = num % 10;\n            if (digit % 2 == 0) {\n                even += 1;\n\
    \            } else {\n                odd += 1;\n            }\n            num\
    \ /= 10;\n        }\n        return new Tuple<long, long>(even, odd);", "    \
    \    if (num < 0) {\n            num = -num;\n        }\n        Tuple<long, long>\
    \ tuple = new Tuple<long, long>(0, 0);\n        for (; num > 0; num /= 10) {\n\
    \            if ((num % 10) % 2 == 0) {\n                tuple = new Tuple<long,\
    \ long>(tuple.Item1 + 1, tuple.Item2);\n            } else {\n               \
    \ tuple = new Tuple<long, long>(tuple.Item1, tuple.Item2 + 1);\n            }\n\
    \        }\n        return tuple;", "        var s = Math.Abs(num).ToString();\n\
    \        return new Tuple<long, long>(s.Count(c => c % 2 == 0), s.Count(c => c\
    \ % 2 == 1));", '        return null;', "        long evenCount = 0;\n       \
    \ long oddCount = 0;\n        while (num != 0) {\n            long digit = num\
    \ % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n   \
    \         } else {\n                oddCount++;\n            }\n            num\
    \ /= 10;\n        }\n        return new Tuple<long, long>(evenCount, oddCount);"]
stop_tokens:
- "\n    }\n"
