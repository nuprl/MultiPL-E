name: HumanEval_29_filter_by_prefix
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Filter an input list of strings only for ones that start with\
  \ a given prefix.\n    // >>> filter_by_prefix([], 'a')\n    // []\n    // >>> filter_by_prefix(['abc',\
  \ 'bcd', 'cde', 'array'], 'a')\n    // ['abc', 'array']\n    public static List<string>\
  \ FilterByPrefix(List<string> strings, string prefix) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FilterByPrefix((new\
  \ List<string>()), (\"john\")).Equals((new List<string>())));\n    Debug.Assert(FilterByPrefix((new\
  \ List<string>(new string[]{(string)\"xxx\", (string)\"asd\", (string)\"xxy\", (string)\"\
  john doe\", (string)\"xxxAAA\", (string)\"xxx\"})), (\"xxx\")).Equals((new List<string>(new\
  \ string[]{(string)\"xxx\", (string)\"xxxAAA\", (string)\"xxx\"}))));\n    }\n\n\
  }\n"
completions: ["        var result = new List<string>();\n        foreach (var s in\
    \ strings) {\n            if (s.StartsWith(prefix)) {\n                result.Add(s);\n\
    \            }\n        }\n        return result;", "        List<string> result\
    \ = new List<string>();\n        foreach (string str in strings) {\n         \
    \   if (str.StartsWith(prefix)) {\n                result.Add(str);\n        \
    \    }\n        }\n        return result;", "        // TODO: implement me!\n\
    \        List<string> result = new List<string>();\n        foreach (string s\
    \ in strings) {\n            if (s.Length >= prefix.Length && s.Substring(0, prefix.Length)\
    \ == prefix) {\n                result.Add(s);\n            }\n        }\n   \
    \     return result;", '        return strings.Where(x => x.StartsWith(prefix)).ToList();',
  "        List<string> ans = new List<string>();\n        foreach (string s in strings)\
    \ {\n            if (s.StartsWith(prefix)) {\n                ans.Add(s);\n  \
    \          }\n        }\n        return ans;", '        return strings.Where(str
    => str.StartsWith(prefix)).ToList();', "        List<string> result = new List<string>();\n\
    \        foreach (string s in strings) {\n            if (s.StartsWith(prefix))\
    \ {\n                result.Add(s);\n            }\n        }\n        return\
    \ result;", '        return strings.Where(x => x.StartsWith(prefix)).ToList();',
  "        var output = new List<string>();\n        for (int i = 0; i < strings.Count;\
    \ i++) {\n            string s = strings[i];\n            if (s.StartsWith(prefix))\
    \ {\n                output.Add(s);\n            }\n        }\n        return\
    \ output;", '        return strings.Where(s => s.StartsWith(prefix)).ToList();',
  '        return strings.Where(str => str.StartsWith(prefix)).ToList();', '        return
    strings.Where(str => str.StartsWith(prefix)).ToList();', "        var result =\
    \ new List<string>();\n        foreach (var s in strings) {\n            if (s.StartsWith(prefix))\
    \ {\n                result.Add(s);\n            }\n        }\n        return\
    \ result;", "        List<string> result = new List<string>();\n        foreach\
    \ (string str in strings) {\n            if (str.StartsWith(prefix)) {\n     \
    \           result.Add(str);\n            }\n        }\n        return result;",
  '        return strings.Where(s => s.StartsWith(prefix)).ToList();', "        var\
    \ result = new List<string>();\n        foreach (var s in strings) {\n       \
    \     if (s.StartsWith(prefix)) {\n                result.Add(s);\n          \
    \  }\n        }\n        return result;", "        List<string> result = new List<string>();\n\
    \        foreach (string str in strings) {\n            if (str.StartsWith(prefix))\
    \ {\n                result.Add(str);\n            }\n        }\n        return\
    \ result;", "        // Implement me!\n        return new List<string>();", " \
    \       List<string> result = new List<string>();\n        foreach (string s in\
    \ strings) {\n            if (s.StartsWith(prefix))\n                result.Add(s);\n\
    \        }\n        return result;", "        var results = new List<string>();\n\
    \        foreach (var item in strings) {\n            if (item.StartsWith(prefix))\
    \ {\n                results.Add(item);\n            }\n        }\n        return\
    \ results;"]
stop_tokens:
- "\n    }\n"
