name: HumanEval_75_is_multiply_prime
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that returns true if the given number is the\
  \ multiplication of 3 prime numbers\n    // and false otherwise.\n    // Knowing\
  \ that (a) is less then 100. \n    // Example:\n    // is_multiply_prime(30) ==\
  \ True\n    // 30 = 2 * 3 * 5\n    public static bool IsMultiplyPrime(long a) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMultiplyPrime((5L))\
  \ == (false));\n    Debug.Assert(IsMultiplyPrime((30L)) == (true));\n    Debug.Assert(IsMultiplyPrime((8L))\
  \ == (true));\n    Debug.Assert(IsMultiplyPrime((10L)) == (false));\n    Debug.Assert(IsMultiplyPrime((125L))\
  \ == (true));\n    Debug.Assert(IsMultiplyPrime((105L)) == (true));\n    Debug.Assert(IsMultiplyPrime((126L))\
  \ == (false));\n    Debug.Assert(IsMultiplyPrime((729L)) == (false));\n    Debug.Assert(IsMultiplyPrime((891L))\
  \ == (false));\n    Debug.Assert(IsMultiplyPrime((1001L)) == (true));\n    }\n\n\
  }\n"
completions: ["        // TODO\n        return false;", '        return Helper(a,
    2);', "        for (long i = 2; i < a; i++) {\n            if (a % i == 0) {\n\
    \                return IsPrime(i) && IsMultiplyPrime(a / i);\n            }\n\
    \        }\n        return false;", '        throw new NotImplementedException();',
  "        bool result = false;\n        if (a <= 1) {\n            return result;\n\
    \        }\n\n        for (int i = 2; i <= a; i++) {\n            if (a % i ==\
    \ 0) {\n                for (int j = 2; j <= a; j++) {\n                    if\
    \ (a % j == 0) {\n                        for (int k = 2; k <= a; k++) {\n   \
    \                         if (a % k == 0) {\n                                if\
    \ (i * j * k == a) {\n                                    result = true;\n   \
    \                             }\n                            }\n             \
    \           }\n                    }\n                }\n            }\n     \
    \   }\n        return result;", "        int i;\n        for (i = 2; i <= a; i++)\
    \ {\n            if (a % i == 0) {\n                a /= i;\n                i--;\n\
    \            }\n        }\n        return a == 1;", "        // Write your code\
    \ here\n        int count = 0;\n        for (int i = 2; i <= a; i++) {\n     \
    \       if (a % i == 0) {\n                if (isPrime(i)) {\n               \
    \     count++;\n                }\n            }\n        }\n        if (count\
    \ == 3) {\n            return true;\n        }\n        return false;", "    \
    \    if (a == 1) return false;\n        long c = a;\n        for (long i = 2;\
    \ i <= a; i++) {\n            if (c % i == 0) {\n                c /= i;\n   \
    \             a /= i;\n                if (c == 1) return true;\n            \
    \    if (a == 1) return false;\n                i--;\n            }\n        }\n\
    \        return false;", "        if (a <= 1) {\n            return false;\n \
    \       }\n        long primes = 0;\n        long n = a;\n        for (long d\
    \ = 2; d * d <= n; d++) {\n            while (n % d == 0) {\n                primes++;\n\
    \                n /= d;\n            }\n        }\n        if (n > 1) {\n   \
    \         primes++;\n        }\n        return primes == 3;", "        // TODO:\
    \ Fill in the body with your own code\n        var result = false;\n        var\
    \ root = (long)Math.Sqrt(a);\n        var primes = new List<long>();\n       \
    \ if (a % 2 == 0)\n        {\n            primes.Add(2);\n            a /= 2;\n\
    \        }\n        for (long i = 3; i <= root; i += 2)\n        {\n         \
    \   if (a % i == 0)\n            {\n                primes.Add(i);\n         \
    \       a /= i;\n            }\n        }\n        if (a > 2)\n        {\n   \
    \         primes.Add(a);\n        }\n        result = primes.Count == 3;\n   \
    \     return result;", "        for (int i = 2; i <= a; i++) {\n            if\
    \ (a % i == 0) {\n                a /= i;\n                if (a % i == 0) {\n\
    \                    return false;\n                }\n            }\n       \
    \ }\n        return true;", '        throw new NotImplementedException();', " \
    \       for (long i = 2; i < Math.Sqrt(a); i++) {\n            if (a % i == 0)\
    \ {\n                return true;\n            }\n        }\n        return false;",
  "        for (int i = 2; i < a; i++) {\n            for (int j = 2; j < a; j++)\
    \ {\n                for (int k = 2; k < a; k++) {\n                    if (i\
    \ * j * k == a) {\n                        if (IsPrime(i) && IsPrime(j) && IsPrime(k))\
    \ {\n                            return true;\n                        }\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ false;", "        if (a == 0) return false;\n        if (a == 1) return true;\n\
    \        bool[] primes = new bool[(int)Math.Sqrt(a)+1];\n        for (int i =\
    \ 2; i < Math.Sqrt(a)+1; i++) {\n            primes[i] = true;\n        }\n  \
    \      for (int i = 2; i < Math.Sqrt(a)+1; i++) {\n            if (primes[i])\
    \ {\n                for (int j = i * i; j < Math.Sqrt(a)+1; j += i) {\n     \
    \               primes[j] = false;\n                }\n            }\n       \
    \ }\n        for (int i = 2; i < a; i++) {\n            if (primes[i]) {\n   \
    \             for (int j = 2; j < a; j++) {\n                    if (primes[j])\
    \ {\n                        if (i * j == a) {\n                            return\
    \ true;\n                        }\n                    }\n                }\n\
    \            }\n        }\n        return false;", "        var is_prime = Problem.IsPrime();\n\
    \        long[] primes = Enumerable.Range(1, (int)a).Where(is_prime).ToArray();\n\
    \        int count = 0;\n        for (int i = 0; i < primes.Length; i++) {\n \
    \           for (int j = i; j < primes.Length; j++) {\n                for (int\
    \ k = j; k < primes.Length; k++) {\n                    count++;\n           \
    \         if (primes[i] * primes[j] * primes[k] == a) {\n                    \
    \    return true;\n                    }\n                }\n            }\n \
    \       }\n        Debug.WriteLine(count);\n        return false;", "        if\
    \ (a % 2 == 0) {\n            long a_half = a / 2;\n            if (IsMultiplyPrime(a_half))\
    \ {\n                return true;\n            }\n        }\n        if (a % 3\
    \ == 0) {\n            long a_third = a / 3;\n            if (IsMultiplyPrime(a_third))\
    \ {\n                return true;\n            }\n        }\n        if (a % 5\
    \ == 0) {\n            long a_fifth = a / 5;\n            if (IsMultiplyPrime(a_fifth))\
    \ {\n                return true;\n            }\n        }\n        if (a % 7\
    \ == 0) {\n            long a_seventh = a / 7;\n            if (IsMultiplyPrime(a_seventh))\
    \ {\n                return true;\n            }\n        }\n        if (a < 2)\
    \ {\n            return false;\n        }\n        for (long i = 2; i < Math.Sqrt(a);\
    \ i++) {\n            if (a % i == 0) {\n                return false;\n     \
    \       }\n        }\n        return true;", '        throw new NotImplementedException();',
  "        var primes = FindPrimes(a);\n        foreach (var prime in primes) {\n\
    \            a /= prime;\n            if (primes.Contains(a)) {\n            \
    \    return true;\n            }\n        }\n        return false;", "       \
    \ var primes = Enumerable.Range(2, (int)Math.Sqrt(a)).Where(i => Enumerable.Range(2,\
    \ i-2).All(j => i % j != 0));\n        foreach (var p in primes) {\n         \
    \   var remainer = a / p;\n            if (primes.Contains(remainer)) {\n    \
    \            return true;\n            }\n        }\n        return false;"]
stop_tokens:
- "\n    }\n"
