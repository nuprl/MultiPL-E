name: HumanEval_148_bf
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // There are eight planets in our solar system: the closerst to\
  \ the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
  \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
  \ names as strings planet1 and planet2. \n    // The function should return a tuple\
  \ containing all planets whose orbits are \n    // located between the orbit of\
  \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
  \ \n    // The function should return an empty tuple if planet1 or planet2\n   \
  \ // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\", \"\
  Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\") ==> (\"\
  Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\"\
  , \"Jupiter\", \"Saturn\")\n    public static List<string> Bf(string planet1, string\
  \ planet2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Bf((\"\
  Jupiter\"), (\"Neptune\")).Equals((new List<string>(new string[]{(string)\"Saturn\"\
  , (string)\"Uranus\"}))));\n    Debug.Assert(Bf((\"Earth\"), (\"Mercury\")).Equals((new\
  \ List<string>(new string[]{(string)\"Venus\"}))));\n    Debug.Assert(Bf((\"Mercury\"\
  ), (\"Uranus\")).Equals((new List<string>(new string[]{(string)\"Venus\", (string)\"\
  Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\"}))));\n    Debug.Assert(Bf((\"\
  Neptune\"), (\"Venus\")).Equals((new List<string>(new string[]{(string)\"Earth\"\
  , (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\", (string)\"Uranus\"\
  }))));\n    Debug.Assert(Bf((\"Earth\"), (\"Earth\")).Equals((new List<string>())));\n\
  \    Debug.Assert(Bf((\"Mars\"), (\"Earth\")).Equals((new List<string>())));\n \
  \   Debug.Assert(Bf((\"Jupiter\"), (\"Makemake\")).Equals((new List<string>())));\n\
  \    }\n\n}\n"
completions: ["        List<string> ans = new List<string>();\n        if (planet1\
    \ == \"Mercury\") {\n            if (planet2 == \"Venus\") {\n               \
    \ ans.Add(\"Venus\");\n            }\n            if (planet2 == \"Earth\") {\n\
    \                ans.Add(\"Venus\");\n                ans.Add(\"Earth\");\n  \
    \          }\n            if (planet2 == \"Mars\") {\n                ans.Add(\"\
    Venus\");\n                ans.Add(\"Earth\");\n                ans.Add(\"Mars\"\
    );\n            }\n            if (planet2 == \"Jupiter\") {\n               \
    \ ans.Add(\"Venus\");\n                ans.Add(\"Earth\");\n                ans.Add(\"\
    Mars\");\n                ans.Add(\"Jupiter\");\n            }\n            if\
    \ (planet2 == \"Saturn\") {\n                ans.Add(\"Venus\");\n           \
    \     ans.Add(\"Earth\");\n                ans.Add(\"Mars\");\n              \
    \  ans.Add(\"Jupiter\");\n                ans.Add(\"Saturn\");\n            }\n\
    \            if (planet2 == \"Uranus\") {\n                ans.Add(\"Venus\");\n\
    \                ans.Add(\"Earth\");\n                ans.Add(\"Mars\");\n   \
    \             ans.Add(\"Jupiter\");\n                ans.Add(\"Saturn\");\n  \
    \              ans.Add(\"Uranus\");\n            }\n            if (planet2 ==\
    \ \"Neptune\") {\n                ans.Add(\"Venus\");\n                ans.Add(\"\
    Earth\");\n                ans.Add(\"Mars\");\n                ans.Add(\"Jupiter\"\
    );\n                ans.Add(\"Saturn\");\n                ans.Add(\"Uranus\");\n\
    \                ans.Add(\"Neptune\");\n            }\n        }\n        if (planet1\
    \ == \"Venus\") {\n            if (planet2 == \"Earth\") {\n                ans.Add(\"\
    Earth\");\n            }\n            if (planet2 == \"Mars\") {\n           \
    \     ans.Add(\"Earth\");\n                ans.Add(\"Mars\");\n            }\n\
    \            if (planet2 == \"Jupiter\") {\n                ans.Add(\"Earth\"\
    );\n                ans.Add(\"Mars\");\n                ans.Add(\"Jupiter\");\n\
    \            }\n            if (planet2 == \"Saturn\") {\n                ans.Add(\"\
    Earth\");\n                ans.Add(\"Mars\");\n               ", '        // Your
    code here', "        List<string> rv = new List<string>();\n        string[] planets\
    \ = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\" };\n        int p1 = Array.IndexOf(planets, planet1);\n\
    \        int p2 = Array.IndexOf(planets, planet2);\n        if (p1 == -1 || p2\
    \ == -1) {\n            return rv;\n        }\n        if (p1 > p2) {\n      \
    \      int tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n        }\n\
    \        for (int i = p1 + 1; i < p2; i++) {\n            rv.Add(planets[i]);\n\
    \        }\n        return rv;", "        var planets = new List<string>() {\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"};\n        var planetsForReturn = new List<string>();\n        var\
    \ planetIdx1 = planets.IndexOf(planet1);\n        var planetIdx2 = planets.IndexOf(planet2);\n\
    \        if (planetIdx1 == -1 || planetIdx2 == -1) {\n            return planetsForReturn;\n\
    \        }\n        for (int i = planetIdx1 + 1; i < planetIdx2; i++) {\n    \
    \        planetsForReturn.Add(planets[i]);\n        }\n        return planetsForReturn;",
  "        string[] planets = new string[] { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        if (planets.Contains(planet1)\
    \ && planets.Contains(planet2)) {\n            if (Array.IndexOf(planets, planet1)\
    \ < Array.IndexOf(planets, planet2)) {\n                return planets.Skip(Array.IndexOf(planets,\
    \ planet1)).Take(Array.IndexOf(planets, planet2) - Array.IndexOf(planets, planet1)).ToList();\n\
    \            } else {\n                return planets.Take(Array.IndexOf(planets,\
    \ planet1)).Reverse().Skip(1).Take(Array.IndexOf(planets, planet2) + 1).Reverse().ToList();\n\
    \            }\n        } else {\n            return new List<string>();\n   \
    \     }", "        // write your code here\n        string[] planets = new string[]\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var planet1_index = Array.IndexOf(planets, planet1);\n\
    \        var planet2_index = Array.IndexOf(planets, planet2);\n        if (planet1_index\
    \ < 0 || planet2_index < 0) {\n            return new List<string>();\n      \
    \  }\n        var result = new List<string>();\n        for (int i = planet1_index\
    \ + 1; i < planet2_index; i++) {\n            result.Add(planets[i]);\n      \
    \  }\n        return result;", "        var planets = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        int low,\
    \ high;\n        if (p1 < p2) {\n            low = p1;\n            high = p2;\n\
    \        } else {\n            low = p2;\n            high = p1;\n        }\n\
    \        var result = new List<string>();\n        for (int i = low + 1; i < high;\
    \ i++) {\n            result.Add(planets[i]);\n        }\n        return result;",
  "        var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var c1 =\
    \ planets.IndexOf(planet1);\n        var c2 = planets.IndexOf(planet2);\n    \
    \    if (c1 == -1 || c2 == -1) {\n            return new List<string>();\n   \
    \     }\n        else if (c1 > c2) {\n            var t = c1;\n            c1\
    \ = c2;\n            c2 = t;\n        }\n        return planets.GetRange(c1 +\
    \ 1, c2 - c1 - 1);", "        var planets = new List<string>() { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 < 0 || p2 < 0) return new List<string>();\n        var planetsInBetween\
    \ = planets.Skip(p1 + 1).Take(p2 - p1 - 1).ToList();\n        if (p1 > p2) planetsInBetween.Reverse();\n\
    \        return planetsInBetween;", '        return new List<string>();', "  \
    \      List<string> planets = new List<string>{\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        int idx1\
    \ = planets.IndexOf(planet1);\n        int idx2 = planets.IndexOf(planet2);\n\
    \        if (idx1 == -1 || idx2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (idx1 > idx2) {\n            var tmp = idx1;\n        \
    \    idx1 = idx2;\n            idx2 = tmp;\n        }\n        return planets.GetRange(idx1\
    \ + 1, idx2 - idx1 - 1);", "        // Your code goes here.\n        throw new\
    \ NotImplementedException();", "        string[] plan = new string[]{\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n        List<string> r = new List<string>();\n        bool flag1 = false;\n\
    \        bool flag2 = false;\n        for (int i = 0; i < plan.Length; i++) {\n\
    \            if (plan[i] == planet1) {\n                flag1 = true;\n      \
    \      }\n            if (plan[i] == planet2) {\n                flag2 = true;\n\
    \            }\n        }\n        if (flag1 && flag2) {\n            for (int\
    \ i = 0; i < plan.Length; i++) {\n                if (plan[i] == planet1) {\n\
    \                    if (i < 4) {\n                        for (int j = i; j <\
    \ 4; j++) {\n                            r.Add(plan[j]);\n                   \
    \     }\n                    }\n                    else {\n                 \
    \       for (int j = i; j > 3; j--) {\n                            r.Add(plan[j]);\n\
    \                        }\n                    }\n                }\n       \
    \         if (plan[i] == planet2) {\n                    if (i < 4) {\n      \
    \                  for (int j = i; j < 4; j++) {\n                           \
    \ r.Add(plan[j]);\n                        }\n                    }\n        \
    \            else {\n                        for (int j = i; j > 3; j--) {\n \
    \                           r.Add(plan[j]);\n                        }\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ r;", "        var arr = new List<string>();\n        if (planet1 == \"Mercury\"\
    ) {\n            arr.Add(\"Venus\");\n            if (planet2 == \"Jupiter\")\
    \ {\n                arr.Add(\"Earth\");\n                arr.Add(\"Mars\");\n\
    \                return arr;\n            }\n            if (planet2 == \"Saturn\"\
    ) {\n                arr.Add(\"Earth\");\n                arr.Add(\"Mars\");\n\
    \                arr.Add(\"Jupiter\");\n                return arr;\n        \
    \    }\n            if (planet2 == \"Uranus\") {\n                arr.Add(\"Earth\"\
    );\n                arr.Add(\"Mars\");\n                arr.Add(\"Jupiter\");\n\
    \                arr.Add(\"Saturn\");\n                return arr;\n         \
    \   }\n            if (planet2 == \"Neptune\") {\n                arr.Add(\"Earth\"\
    );\n                arr.Add(\"Mars\");\n                arr.Add(\"Jupiter\");\n\
    \                arr.Add(\"Saturn\");\n                arr.Add(\"Uranus\");\n\
    \                return arr;\n            }\n        }\n        if (planet1 ==\
    \ \"Venus\") {\n            arr.Add(\"Earth\");\n            if (planet2 == \"\
    Jupiter\") {\n                arr.Add(\"Mars\");\n                return arr;\n\
    \            }\n            if (planet2 == \"Saturn\") {\n                arr.Add(\"\
    Mars\");\n                arr.Add(\"Jupiter\");\n                return arr;\n\
    \            }\n            if (planet2 == \"Uranus\") {\n                arr.Add(\"\
    Mars\");\n                arr.Add(\"Jupiter\");\n                arr.Add(\"Saturn\"\
    );\n                return arr;\n            }\n            if (planet2 == \"\
    Neptune\") {\n                arr.Add(\"Mars\");\n                arr.Add(\"Jupiter\"\
    );\n                arr.Add(\"Saturn\");\n                arr.Add(\"Uranus\");\n\
    \                return arr;\n            }\n        }\n        if (planet1 ==\
    \ \"Earth\") {\n            arr.Add(\"Mars\");\n            if (planet2 == \"\
    Jupiter\") {\n                return arr;\n            }\n            if (planet2\
    \ == \"Saturn\") {\n                arr.Add(\"Jupiter\");\n                return\
    \ arr;\n            }\n            if (planet2 == \"Uranus\") {\n            \
    \    arr", "        if (planet1 == \"Mercury\") {\n            if (planet2 ==\
    \ \"Venus\") return new List<string>();\n            if (planet2 == \"Earth\"\
    ) return new List<string>() { \"Venus\" };\n            if (planet2 == \"Mars\"\
    ) return new List<string>() { \"Venus\", \"Earth\" };\n            if (planet2\
    \ == \"Jupiter\") return new List<string>() { \"Venus\", \"Earth\", \"Mars\" };\n\
    \            if (planet2 == \"Saturn\") return new List<string>() { \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\" };\n            if (planet2 == \"Uranus\")\
    \ return new List<string>() { \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\" };\n            if (planet2 == \"Neptune\") return new List<string>()\
    \ { \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\" };\n \
    \       }\n        if (planet1 == \"Venus\") {\n            if (planet2 == \"\
    Mercury\") return new List<string>();\n            if (planet2 == \"Earth\") return\
    \ new List<string>() { \"Venus\" };\n            if (planet2 == \"Mars\") return\
    \ new List<string>() { \"Venus\", \"Earth\" };\n            if (planet2 == \"\
    Jupiter\") return new List<string>() { \"Venus\", \"Earth\", \"Mars\" };\n   \
    \         if (planet2 == \"Saturn\") return new List<string>() { \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\" };\n            if (planet2 == \"Uranus\") return\
    \ new List<string>() { \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    \ };\n            if (planet2 == \"Neptune\") return new List<string>() { \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\" };\n        }\n   \
    \     if (planet1 == \"Earth\") {\n            if (planet2 == \"Mercury\") return\
    \ new List<string>();\n            if (planet2 == \"Venus\") return new List<string>()\
    \ { \"Venus\" };\n", "        // We do not know the order in which planet1 and\
    \ planet2 are given.\n        // If planet1 comes after planet2, we need to swap\
    \ the two values.\n        string start = planet1, end = planet2;\n        if\
    \ (PlanetNames.IndexOf(planet1) > PlanetNames.IndexOf(planet2)) {\n          \
    \  start = planet2;\n            end = planet1;\n        }\n        // If planet1\
    \ or planet2 are not in the list of known planets, we \n        // return an empty\
    \ tuple.\n        if (!PlanetNames.Contains(start) || !PlanetNames.Contains(end))\n\
    \            return new List<string>();\n        // Create a list of planets between\
    \ planet1 and planet2.\n        List<string> planets = new List<string>();\n \
    \       int startIndex = PlanetNames.IndexOf(start);\n        int endIndex = PlanetNames.IndexOf(end);\n\
    \        planets.AddRange(PlanetNames.Skip(startIndex + 1).Take(endIndex - startIndex\
    \ - 1));\n        return planets;", "        // TODO: Write your code here\n \
    \       string[] planets = new string[] { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        Dictionary<string,\
    \ int> indexOfPlanet = new Dictionary<string, int>();\n        for (int i = 0;\
    \ i < planets.Length; i++) {\n            indexOfPlanet.Add(planets[i], i);\n\
    \        }\n        List<string> result = new List<string>();\n        if (indexOfPlanet.ContainsKey(planet1)\
    \ && indexOfPlanet.ContainsKey(planet2)) {\n            int start = Math.Min(indexOfPlanet[planet1],\
    \ indexOfPlanet[planet2]);\n            int end = Math.Max(indexOfPlanet[planet1],\
    \ indexOfPlanet[planet2]);\n            for (int i = start + 1; i < end; i++)\
    \ {\n                result.Add(planets[i]);\n            }\n        }\n     \
    \   return result;", "        var planets = new List<string> {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 < 0 || p2 < 0) {\n            return new List<string> {};\n  \
    \      }\n        var result = new List<string> {};\n        if (p1 > p2) {\n\
    \            for (var i = p2 + 1; i < p1; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        } else {\n            for (var i = p1 + 1; i < p2; i++)\
    \ {\n                result.Add(planets[i]);\n            }\n        }\n     \
    \   return result;", "        // TODO: Implement this function\n        string[]\
    \ planets = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\" };\n        List<string> result = new List<string>();\n\
    \        if (planets.Contains(planet1) && planets.Contains(planet2)) {\n     \
    \       int index1 = Array.IndexOf(planets, planet1);\n            int index2\
    \ = Array.IndexOf(planets, planet2);\n            if (index1 > index2) {\n   \
    \             for (int i = index2 + 1; i < index1; i++) {\n                  \
    \  result.Add(planets[i]);\n                }\n            } else {\n        \
    \        for (int i = index1 + 1; i < index2; i++) {\n                    result.Add(planets[i]);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   var planets = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var list = new\
    \ List<string>();\n        var a = planets.IndexOf(planet1);\n        var b =\
    \ planets.IndexOf(planet2);\n        if (a < 0 || b < 0) {\n            return\
    \ list;\n        }\n        if (a > b) {\n            var c = a;\n           \
    \ a = b;\n            b = c;\n        }\n        return planets.GetRange(a + 1,\
    \ b - a - 1);"]
stop_tokens:
- "\n    }\n"
