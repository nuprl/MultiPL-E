name: HumanEval_80_is_happy
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a string s.\n    // Your task is to check if the\
  \ string is happy or not.\n    // A string is happy if its length is at least 3\
  \ and every 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
  \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
  \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy) =>\
  \ False\n    public static bool IsHappy(string s) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsHappy((\"\
  a\")) == (false));\n    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
  abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
  adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
  iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
  \    }\n\n}\n"
completions: ["        if (s.Length < 3) {\n            return false;\n        }\n\
    \        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n                return\
    \ false;\n            }\n        }\n        return true;", "        if (s.Length\
    \ < 3) return false;\n        return s.ToCharArray().OrderBy(c => c).ToArray().Zip(s.ToCharArray().OrderBy(c\
    \ => c).Skip(1).ToArray(), (c1, c2) => c1 != c2).All(b => b);", "        if (s.Length\
    \ < 3) return false;\n        for (int i = 0; i < s.Length - 2; i++) {\n     \
    \       if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return\
    \ false;\n        }\n        return true;", "        bool happy = true;\n    \
    \    if (s.Length < 3)\n            happy = false;\n        else\n           \
    \ for (int i = 0; i < s.Length - 2; i++)\n                if (s[i] == s[i + 1]\
    \ || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                    happy = false;\n\
    \        return happy;", "        if (s.Length < 3) {\n            return false;\n\
    \        }\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n               \
    \ return false;\n            }\n        }\n        return true;", "        for\
    \ (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i]\
    \ == s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n    \
    \        }\n        }\n        return true;", "        // Implement your code\
    \ here\n        return false;", "        for (int i = 0; i < s.Length - 2; i++)\
    \ {\n            char a = s[i];\n            char b = s[i + 1];\n            char\
    \ c = s[i + 2];\n            if (a == b || b == c || a == c) {\n             \
    \   return false;\n            }\n        }\n        return true;", "        //\
    \ TODO\n        throw new NotImplementedException();", "        var length = s.Length;\n\
    \        var dict = new Dictionary<char, int>();\n        for (int i = 0; i <\
    \ length; i++) {\n            var c = s[i];\n            if (dict.ContainsKey(c))\
    \ {\n                dict[c] += 1;\n            } else {\n                dict[c]\
    \ = 1;\n            }\n        }\n        var happy = true;\n        var has_less_than_three\
    \ = false;\n        foreach (var item in dict) {\n            if (item.Value >\
    \ 1) {\n                happy = false;\n                break;\n            }\n\
    \            if (item.Value == 1) {\n                has_less_than_three = true;\n\
    \            }\n        }\n        if (length < 3) {\n            happy = false;\n\
    \        }\n        if (!has_less_than_three) {\n            happy = false;\n\
    \        }\n        return happy;", '        return Enumerable.Range(0, s.Length
    - 2).All(i => s[i] != s[i + 1] || s[i] != s[i + 2]);', "        // Write your\
    \ code here\n        return false;", '        return s.Length >= 3 && Enumerable.Range(0,
    s.Length-2).All(i => s[i] != s[i+1] || s[i] != s[i+2]);', '        throw new NotImplementedException();',
  "        if (s.Length < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i]\
    \ == s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n    \
    \        }\n        }\n        return true;", "        if (s.Length < 3) {\n \
    \           return false;\n        }\n        int lastIndex = s.Length - 1;\n\
    \        for (int i = 2; i < s.Length; i++) {\n            if (s[i - 2] == s[i\
    \ - 1] || s[i - 2] == s[i] || s[i - 1] == s[i]) {\n                return false;\n\
    \            }\n        }\n        return true;", "        // TODO: Implement\
    \ this\n        return false;", '        return true;', "        // Write your\
    \ code here.\n        return true;", '        throw new NotImplementedException();']
stop_tokens:
- "\n    }\n"
