name: HumanEval_140_fix_spaces
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string text, replace all spaces in it with underscores,\
  \ \n    // and if a string has more than 2 consecutive spaces, \n    // then replace\
  \ all consecutive spaces with - \n    // fix_spaces(\"Example\") == \"Example\"\n\
  \    // fix_spaces(\"Example 1\") == \"Example_1\"\n    // fix_spaces(\" Example\
  \ 2\") == \"_Example_2\"\n    // fix_spaces(\" Example   3\") == \"_Example-3\"\n\
  \    public static string FixSpaces(string text) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FixSpaces((\"\
  Example\")).Equals((\"Example\")));\n    Debug.Assert(FixSpaces((\"Mudasir Hanif\
  \ \")).Equals((\"Mudasir_Hanif_\")));\n    Debug.Assert(FixSpaces((\"Yellow Yellow\
  \  Dirty  Fellow\")).Equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    Debug.Assert(FixSpaces((\"\
  Exa   mple\")).Equals((\"Exa-mple\")));\n    Debug.Assert(FixSpaces((\"   Exa 1\
  \ 2 2 mple\")).Equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
completions: ["        if (text == null) return null;\n        if (text.Length ==\
    \ 0) return text;\n        if (text.Length == 1) return text[0] == ' ' ? \"_\"\
    \ : text;\n        string s = \"\";\n        int spaces = 0;\n        for (int\
    \ i = 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n        \
    \        spaces++;\n                if (spaces == 1) s += \"_\";\n           \
    \     if (spaces > 2) s += \"-\";\n            } else {\n                s +=\
    \ text[i];\n                spaces = 0;\n            }\n        }\n        return\
    \ s;", "        string answer = \"\";\n        text = text.TrimStart();\n    \
    \    foreach (char c in text) {\n            if (c == ' ') {\n               \
    \ answer += \"_\";\n            } else {\n                answer += c;\n     \
    \       }\n        }\n        return answer;", "        StringBuilder result =\
    \ new StringBuilder();\n        bool spaceFound = false;\n        int spcCount\
    \ = 0;\n        foreach (char c in text) {\n            if (c == ' ') {\n    \
    \            if (spaceFound) {\n                    if (spcCount == 2) {\n   \
    \                     result.Append('-');\n                        spcCount =\
    \ 0;\n                    }\n                    spcCount++;\n               \
    \ } else {\n                    spaceFound = true;\n                    result.Append('_');\n\
    \                }\n            } else {\n                spaceFound = false;\n\
    \                spcCount = 0;\n                result.Append(c);\n          \
    \  }\n        }\n        return result.ToString();", "        //throw new NotImplementedException();\n\
    \        string newText = \"\";\n        int spaces = 0;\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                spaces++;\n     \
    \           if (spaces == 1)\n                    newText += \"_\";\n        \
    \        else if (spaces > 2)\n                    newText += \"-\";\n       \
    \     }\n            else {\n                newText += c;\n                spaces\
    \ = 0;\n            }\n        }\n        return newText;", "        // int cnt\
    \ = 0;\n        // for (int i = 0; i < text.Length; i++) {\n        //     if\
    \ (text[i] == ' ') cnt++;\n        //     else cnt = 0;\n        //     if (cnt\
    \ == 3) {\n        //         text = text.Substring(0, i) + \"-\" + text.Substring(i\
    \ + 1);\n        //         cnt = 1;\n        //     }\n        // }\n       \
    \ // return text.Replace(\" \", \"_\");\n        var r = new StringBuilder();\n\
    \        var cnt = 0;\n        foreach (var ch in text) {\n            if (ch\
    \ == ' ') cnt++;\n            else cnt = 0;\n            if (cnt == 3) {\n   \
    \             r.Append('-');\n                cnt = 1;\n            } else {\n\
    \                r.Append(ch);\n            }\n        }\n        return r.ToString().Replace(\"\
    \ \", \"_\");", "        // TODO: implement\n        return text;", '        return
    text.Replace(" ", "_").Replace("__", "-");', '        return text.Replace("  ",
    "-").Replace(" ", "_");', "        var sb = new StringBuilder();\n        bool\
    \ foundSpace = false;\n        int count = 0;\n        foreach (var ch in text)\
    \ {\n            if (ch == ' ') {\n                if (count == 0) {\n       \
    \             sb.Append('_');\n                }\n                count++;\n \
    \           } else {\n                if (count > 2) {\n                    sb.Append('-');\n\
    \                } else {\n                    sb.Append(' ', count);\n      \
    \          }\n                count = 0;\n                sb.Append(ch);\n   \
    \         }\n        }\n        if (count > 2) {\n            sb.Append('-');\n\
    \        } else {\n            sb.Append(' ', count);\n        }\n        return\
    \ sb.ToString();", "        var buffer = new StringBuilder();\n        bool isSpace\
    \ = false;\n        bool isDoubleSpace = false;\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            if (text[i] == ' ') {\n                if (isSpace) {\n\
    \                    if (isDoubleSpace) {\n                        buffer.Append('-');\n\
    \                    } else {\n                        buffer.Append('_');\n \
    \                   }\n                } else {\n                    buffer.Append('_');\n\
    \                }\n                isSpace = true;\n                isDoubleSpace\
    \ = true;\n            } else {\n                buffer.Append(text[i]);\n   \
    \             isSpace = false;\n                isDoubleSpace = false;\n     \
    \       }\n        }\n        return buffer.ToString();", "        text = text.Replace(\"\
    \  \", \"-\");\n        text = text.Replace(\" \", \"_\");\n        return text;",
  "        // Starting with a empty string in the beginning,\n        // if we see\
    \ any spaces, we start adding - until\n        // we reach a non-space character,\
    \ at which point\n        // we continue adding the characters to the string\n\
    \        StringBuilder builder = new StringBuilder();\n        bool seenSpace\
    \ = false;\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i]\
    \ == ' ') {\n                // If we've seen a space\n                if (seenSpace)\
    \ {\n                    // We've seen more than 2 consecutive spaces\n      \
    \              if (builder[builder.Length - 1] != '-') {\n                   \
    \     // We don't want to add 2 -'s to the end\n                        builder.Append('-');\n\
    \                    }\n                } else {\n                    // We haven't\
    \ seen a space before,\n                    // so we add a - to the end\n    \
    \                builder.Append('-');\n                    seenSpace = true;\n\
    \                }\n            } else {\n                // If we reach a non-space\
    \ character,\n                // then we reset our space flag\n              \
    \  seenSpace = false;\n                builder.Append(text[i]);\n            }\n\
    \        }\n        // We might end with a - at the end of the\n        // string,\
    \ so we replace that with a _\n        return builder.ToString().Replace(\"-\"\
    , \"_\");", "        int pos = 0;\n        string result = \"\";\n        for\
    \ (int i = 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n   \
    \             if (pos == 0) {\n                    result += '_';\n          \
    \      } else if (i > 0 && text[i - 1] == ' ') {\n                    result +=\
    \ '-';\n                } else {\n                    result += '_';\n       \
    \         }\n                pos++;\n            } else {\n                result\
    \ += text[i];\n                pos = 0;\n            }\n        }\n        return\
    \ result;", "        StringBuilder sb = new StringBuilder();\n        bool hasSpace\
    \ = false;\n        int count = 0;\n        for (int i = 0; i < text.Length; i++)\
    \ {\n            if (text[i] == ' ') {\n                if (count == 0) {\n  \
    \                  if (hasSpace) {\n                        sb.Append('-');\n\
    \                    } else {\n                        sb.Append('_');\n     \
    \               }\n                }\n                count++;\n            }\
    \ else {\n                count = 0;\n                sb.Append(text[i]);\n  \
    \          }\n            hasSpace = text[i] == ' ';\n        }\n        return\
    \ sb.ToString();", "        var builder = new StringBuilder();\n        var prevSpace\
    \ = false;\n        var consecSpace = 0;\n        foreach (var ch in text) {\n\
    \            if (ch == ' ') {\n                if (prevSpace) {\n            \
    \        consecSpace++;\n                } else {\n                    consecSpace\
    \ = 1;\n                }\n                prevSpace = true;\n            } else\
    \ {\n                if (prevSpace) {\n                    if (consecSpace > 2)\
    \ {\n                        builder.Append('-');\n                    } else\
    \ {\n                        builder.Append('_');\n                    }\n   \
    \             }\n                builder.Append(ch);\n                prevSpace\
    \ = false;\n            }\n        }\n        if (prevSpace) {\n            if\
    \ (consecSpace > 2) {\n                builder.Append('-');\n            } else\
    \ {\n                builder.Append('_');\n            }\n        }\n        return\
    \ builder.ToString();", "        //throw new NotImplementedException();\n    \
    \    int k = 0;\n        for (int i = 0; i < text.Length; i++) {\n           \
    \ if (text[i] == ' ') {\n                if (k == 0) {\n                    text\
    \ = text.Remove(i, 1);\n                    text = text.Insert(i, \"_\");\n  \
    \                  k++;\n                }\n                else if (k >= 2) {\n\
    \                    text = text.Remove(i, 1);\n                    text = text.Insert(i,\
    \ \"-\");\n                    k++;\n                }\n                else {\n\
    \                    k++;\n                }\n            }\n            else\
    \ {\n                k = 0;\n            }\n        }\n        return text;",
  "        int l = text.Length;\n        StringBuilder sb = new StringBuilder();\n\
    \        int i = 0;\n        while (i < l) {\n            if (text[i] == ' ')\
    \ {\n                sb.Append('_');\n                i++;\n                while\
    \ (i < l && text[i] == ' ') {\n                    i++;\n                }\n \
    \               if (i == l) {\n                    break;\n                }\n\
    \                sb.Append('-');\n            }\n            sb.Append(text[i]);\n\
    \            i++;\n        }\n        return sb.ToString();", '        return
    string.Join("_", text.Split(" ")).Replace("__", "-");', "        StringBuilder\
    \ sb = new StringBuilder();\n        bool saw_space = false;\n        for (int\
    \ i = 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n        \
    \        if (saw_space) {\n                    if (i > 0 && text[i - 1] != '-')\
    \ {\n                        sb.Append('-');\n                    }\n        \
    \        } else {\n                    sb.Append('_');\n                    saw_space\
    \ = true;\n                }\n            } else {\n                sb.Append(text[i]);\n\
    \                saw_space = false;\n            }\n        }\n        return\
    \ sb.ToString();", '        return text.Replace("  ", "-").Replace(" ", "_");']
stop_tokens:
- "\n    }\n"
