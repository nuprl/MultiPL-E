name: HumanEval_101_words_string
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You will be given a string of words separated by commas or spaces.\
  \ Your task is\n    // to split the string into words and return an array of the\
  \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") == [\"\
  Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two, three,\
  \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
  ]\n    public static List<string> WordsString(string s) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsString((\"\
  Hi, my name is John\")).Equals((new List<string>(new string[]{(string)\"Hi\", (string)\"\
  my\", (string)\"name\", (string)\"is\", (string)\"John\"}))));\n    Debug.Assert(WordsString((\"\
  One, two, three, four, five, six\")).Equals((new List<string>(new string[]{(string)\"\
  One\", (string)\"two\", (string)\"three\", (string)\"four\", (string)\"five\", (string)\"\
  six\"}))));\n    Debug.Assert(WordsString((\"Hi, my name\")).Equals((new List<string>(new\
  \ string[]{(string)\"Hi\", (string)\"my\", (string)\"name\"}))));\n    Debug.Assert(WordsString((\"\
  One,, two, three, four, five, six,\")).Equals((new List<string>(new string[]{(string)\"\
  One\", (string)\"two\", (string)\"three\", (string)\"four\", (string)\"five\", (string)\"\
  six\"}))));\n    Debug.Assert(WordsString((\"\")).Equals((new List<string>())));\n\
  \    Debug.Assert(WordsString((\"ahmed     , gamal\")).Equals((new List<string>(new\
  \ string[]{(string)\"ahmed\", (string)\"gamal\"}))));\n    }\n\n}\n"
completions: ["        List<string> result = new List<string>();\n        foreach\
    \ (string split in s.Split(new char[] { ' ', ',' })) {\n            if (split.Length\
    \ > 0) {\n                result.Add(split);\n            }\n        }\n     \
    \   return result;", "        var list = new List<string>();\n        var word\
    \ = new StringBuilder();\n        for (int i = 0; i < s.Length; i++) {\n     \
    \       if (s[i] == ' ' || s[i] == ',') {\n                if (word.Length !=\
    \ 0) {\n                    list.Add(word.ToString());\n                    word.Clear();\n\
    \                }\n            } else {\n                word.Append(s[i]);\n\
    \            }\n        }\n        if (word.Length != 0) {\n            list.Add(word.ToString());\n\
    \        }\n        return list;", "        return s.Split(new char[] { ' ', ','\
    \ }, StringSplitOptions.RemoveEmptyEntries).ToList();", "        var words = new\
    \ List<string>();\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < s.Length; i++) {\n            if (s[i] == ' ' || s[i] == ',')\
    \ {\n                if (sb.Length > 0) {\n                    words.Add(sb.ToString());\n\
    \                    sb.Clear();\n                }\n            } else {\n  \
    \              sb.Append(s[i]);\n            }\n        }\n        if (sb.Length\
    \ > 0) {\n            words.Add(sb.ToString());\n        }\n        return words;",
  '        return s.Split(new[] { ",", " " }, StringSplitOptions.RemoveEmptyEntries).ToList();',
  "        List<string> words = new List<string>();\n        char[] separators = {\
    \ ' ', ',' };\n        string[] split = s.Split(separators);\n        foreach\
    \ (string word in split) {\n            if (word != \"\") {\n                words.Add(word);\n\
    \            }\n        }\n        return words;", "        var split = s.Split(new\
    \ char[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries);\n        return\
    \ split.ToList();", "        return s.Split(new char[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries).ToList();",
  "        return s.Split(new char[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries).ToList();",
  "        // TODO: Implement\n        List<string> string_list = new List<string>();\n\
    \        string_list = s.Split(' ').ToList();\n        return string_list;", " \
    \       return s.Split(',', ' ').ToList();", "        return s.Split(' ', ',').ToList();",
  "        string[] words = s.Split(',', ' ');\n        List<string> result = new\
    \ List<string>();\n        foreach (string word in words) {\n            if (word\
    \ != \"\") {\n                result.Add(word);\n            }\n        }\n  \
    \      return result;", "        return s.Split(' ', ',').ToList();", "      \
    \  List<string> output = new List<string>();\n        int wordStart = 0;\n   \
    \     bool insideWord = false;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            if (char.IsWhiteSpace(s[i]) || s[i] == ',') {\n                if\
    \ (insideWord) {\n                    output.Add(s.Substring(wordStart, i - wordStart));\n\
    \                    insideWord = false;\n                }\n            } else\
    \ {\n                if (!insideWord) {\n                    wordStart = i;\n\
    \                    insideWord = true;\n                }\n            }\n  \
    \      }\n        if (insideWord) {\n            output.Add(s.Substring(wordStart));\n\
    \        }\n        return output;", "        return new List<string>(s.Split(',','\
    \ '));", "        List<string> words = new List<string>();\n        string word\
    \ = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i]\
    \ == ' ' || s[i] == ',') {\n                if (word != \"\") {\n            \
    \        words.Add(word);\n                    word = \"\";\n                }\n\
    \            } else {\n                word += s[i];\n            }\n        }\n\
    \        if (word != \"\") {\n            words.Add(word);\n        }\n      \
    \  return words;", '        throw new NotImplementedException();', "        return\
    \ s.Split(new char[] {' ', ','}, StringSplitOptions.RemoveEmptyEntries).ToList();",
  '        return s.Split(new [] { ", ", " " }, StringSplitOptions.RemoveEmptyEntries).ToList();']
stop_tokens:
- "\n    }\n"
