name: HumanEval_62_derivative
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1]\
  \ * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
  \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    // >>>\
  \ derivative([1, 2, 3])\n    // [2, 6]\n    public static List<long> Derivative(List<long>\
  \ xs) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Derivative((new\
  \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)4L, (long)12L, (long)20L}))));\n    Debug.Assert(Derivative((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)6L}))));\n    Debug.Assert(Derivative((new List<long>(new\
  \ long[]{(long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)2L,\
  \ (long)2L}))));\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)3L,\
  \ (long)2L, (long)1L, (long)0L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
  \ (long)2L, (long)0L, (long)16L}))));\n    Debug.Assert(Derivative((new List<long>(new\
  \ long[]{(long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        List<long> ans = new List<long>();\n        for (int i = 1;\
    \ i < xs.Count; i++) {\n            ans.Add(xs[i] * i);\n        }\n        return\
    \ ans;", "        var n = xs.Count;\n        if (n == 0) {\n            return\
    \ new List<long>();\n        }\n        var ys = new List<long>();\n        for\
    \ (var i = 1; i < n; i++) {\n            ys.Add(xs[i] * i);\n        }\n     \
    \   return ys;", "        List<long> ret = new List<long>();\n        for (int\
    \ i = 1; i < xs.Count; i++)\n            ret.Add(xs[i] * i);\n        return ret;",
  "        if (xs.Count == 0) {\n            return new List<long>();\n        }\n\
    \        List<long> ans = new List<long>();\n        for (int i = 1; i < xs.Count;\
    \ i++) {\n            ans.Add(xs[i] * i);\n        }\n        return ans;", " \
    \       // Return xs.Select((x, i) => x * i).Skip(1).ToList();\n        List<long>\
    \ ret = new List<long>();\n        for (int i = 1; i < xs.Count; i++) {\n    \
    \        ret.Add(xs[i] * i);\n        }\n        return ret;", "        var ys\
    \ = new List<long>();\n        for (int i = 1; i < xs.Count; i++) {\n        \
    \    ys.Add(xs[i] * i);\n        }\n        return ys;", "        if (xs.Count\
    \ == 0) return new List<long>();\n        List<long> res = new List<long>();\n\
    \        for (int i = 1; i < xs.Count; i++) {\n            res.Add(xs[i] * i);\n\
    \        }\n        return res;", "        var ys = new List<long>();\n      \
    \  for (int i = 1; i < xs.Count; i++) {\n            ys.Add(xs[i] * i);\n    \
    \    }\n        return ys;", "        List<long> ys = new List<long>();\n    \
    \    for (int i = 1; i < xs.Count; i++) {\n            ys.Add(xs[i] * i);\n  \
    \      }\n        return ys;", "        var ys = new List<long>();\n        for\
    \ (int i = 1; i < xs.Count; i++) {\n            ys.Add(xs[i] * i);\n        }\n\
    \        return ys;", "        var n = xs.Count - 1;\n        if (n == 0) {\n\
    \            return new List<long>();\n        }\n        var result = new List<long>();\n\
    \        for (int i = 1; i <= n; i++) {\n            result.Add(xs[i] * i);\n\
    \        }\n        return result;", "        List<long> dxs = new List<long>();\n\
    \        for (int i = 1; i < xs.Count; i++) {\n            dxs.Add(xs[i] * i);\n\
    \        }\n        return dxs;", "        var ans = new List<long>();\n     \
    \   for (int i = 1; i < xs.Count; i++) {\n            ans.Add(xs[i] * i);\n  \
    \      }\n        return ans;", "        var n = xs.Count;\n        List<long>\
    \ res = new List<long>();\n        for (int i = 1; i < n; i++) {\n           \
    \ res.Add(xs[i] * i);\n        }\n        return res;", "        var res = new\
    \ List<long>();\n        for (int i = 1; i < xs.Count; i++) {\n            res.Add(xs[i]\
    \ * i);\n        }\n        return res;", "        List<long> ys = new List<long>();\n\
    \        for (int i = 1; i < xs.Count; i++) {\n            ys.Add(xs[i] * i);\n\
    \        }\n        return ys;", "        var ret = new List<long>();\n      \
    \  for (int i = 1; i < xs.Count; i++) {\n            ret.Add(xs[i] * i);\n   \
    \     }\n        return ret;", "        var res = new List<long>();\n        for\
    \ (int i = 1; i < xs.Count; i++) {\n            res.Add(xs[i] * i);\n        }\n\
    \        return res;", "        var ys = new List<long>();\n        for (int i\
    \ = 1; i < xs.Count; i++) {\n            ys.Add(xs[i] * i);\n        }\n     \
    \   return ys;", "        var ys = new List<long>();\n        for (int i = 1;\
    \ i < xs.Count; i++) {\n            ys.Add(xs[i] * i);\n        }\n        return\
    \ ys;"]
stop_tokens:
- "\n    }\n"
