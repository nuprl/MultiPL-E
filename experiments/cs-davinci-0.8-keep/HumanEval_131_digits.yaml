name: HumanEval_131_digits
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a positive integer n, return the product of the odd digits.\n\
  \    // Return 0 if all digits are even.\n    // For example:\n    // digits(1)\
  \  == 1\n    // digits(4)  == 0\n    // digits(235) == 15\n    public static long\
  \ Digits(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))\
  \ == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))\
  \ == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))\
  \ == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))\
  \ == (0L));\n    }\n\n}\n"
completions: ["        long x = 1;\n        for (; n > 0; n /= 10) {\n           \
    \ long digit = n % 10;\n            if (digit % 2 == 1)\n                x *=\
    \ digit;\n        }\n        return x;", '        return 0;', "        // TODO:\
    \ implement this method\n        return 0;", "        long product = 1;\n    \
    \    long result = 1;\n        for (long i = 0; i < n; i++) {\n            if\
    \ (i % 2 != 0) {\n                result *= product;\n            }\n        }\n\
    \        return result;", "        long result = 1;\n        while (n > 0) {\n\
    \            long digit = n % 10;\n            if (digit % 2 == 1) {\n       \
    \         result *= digit;\n            }\n            n /= 10;\n        }\n \
    \       return result;", '        return 0;', '        return 0;', "        long\
    \ prod = 1;\n        while (n > 0) {\n            long d = n % 10;\n         \
    \   if (d % 2 == 1) {\n                prod *= d;\n            }\n           \
    \ n /= 10;\n        }\n        return prod;", "        // Write your code here.\n\
    \        throw new NotImplementedException();", '        return 0;', "       \
    \ long prod = 1;\n        while (n > 0) {\n            long digit = n % 10;\n\
    \            if (digit % 2 == 1) {\n                prod *= digit;\n         \
    \   }\n            n /= 10;\n        }\n        return prod;", "        var result\
    \ = 1L;\n        for (var i = n; i > 0; i /= 10) {\n            var d = i % 10;\n\
    \            if (d % 2 == 1)\n                result *= d;\n        }\n      \
    \  return result;", "        long result = 1;\n        while (n > 0) {\n     \
    \       long digit = n % 10;\n            if (digit % 2 == 1) {\n            \
    \    result *= digit;\n            }\n            n /= 10;\n        }\n      \
    \  return result;", "        long prod = 1;\n        while (n > 0) {\n       \
    \     long digit = n % 10;\n            if (digit % 2 == 1) {\n              \
    \  prod *= digit;\n            }\n            n /= 10;\n        }\n        return\
    \ prod;", "        // Your code here\n        return 0;", "        BigInteger\
    \ number = n;\n        BigInteger result = 1;\n        while (number > 0) {\n\
    \            var digit = number % 10;\n            if (digit % 2 == 1)\n     \
    \           result *= digit;\n            number /= 10;\n        }\n        return\
    \ (long)result;", "        long result = 1;\n        while (n > 0) {\n       \
    \     long digit = n % 10;\n            if (digit % 2 == 1) {\n              \
    \  result *= digit;\n            }\n            n /= 10;\n        }\n        return\
    \ result;", "        long result = 1;\n        while (n > 0) {\n            long\
    \ digit = n % 10;\n            if (digit % 2 == 1) {\n                result *=\
    \ digit;\n            }\n            n /= 10;\n        }\n        return result;",
  "        long result = 1;\n        while (n > 0) {\n            long digit = n %\
    \ 10;\n            if (digit % 2 == 1) {\n                result *= digit;\n \
    \           }\n            n /= 10;\n        }\n        return result;", "   \
    \     long product = 1;\n        while (n > 0) {\n            long digit = n %\
    \ 10;\n            if (digit % 2 == 1) {\n                product *= digit;\n\
    \            }\n            n /= 10;\n        }\n        return product;"]
stop_tokens:
- "\n    }\n"
