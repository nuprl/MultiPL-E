name: HumanEval_57_monotonic
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return True is list elements are monotonically increasing or\
  \ decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1,\
  \ 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n\
  \    public static bool Monotonic(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
  \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
  \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
  \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
  \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
  \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
  \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
  \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L,\
  \ (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
completions: ["        return Enumerable.Range(1, l.Count - 1).All(i => l[i] >= l[i\
    \ - 1]) ||\n               Enumerable.Range(1, l.Count - 1).All(i => l[i] <= l[i\
    \ - 1]);", "        long prev = l[0];\n        for (int i = 1; i < l.Count; i++)\
    \ {\n            if (l[i] < prev) {\n                for (int j = i + 1; j < l.Count;\
    \ j++) {\n                    if (l[j] >= l[i]) {\n                        return\
    \ false;\n                    }\n                }\n                return true;\n\
    \            }\n            if (l[i] > prev) {\n                for (int j = i\
    \ + 1; j < l.Count; j++) {\n                    if (l[j] <= l[i]) {\n        \
    \                return false;\n                    }\n                }\n   \
    \             return true;\n            }\n            prev = l[i];\n        }\n\
    \        return true;", "        if (l.Count == 0) {\n            return true;\n\
    \        }\n        bool increasing = l[0] < l[l.Count - 1];\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (increasing) {\n                if\
    \ (l[i] < l[i - 1]) {\n                    return false;\n                }\n\
    \            } else {\n                if (l[i] > l[i - 1]) {\n              \
    \      return false;\n                }\n            }\n        }\n        return\
    \ true;", "        int n = l.Count;\n        if (n <= 1) return true;\n      \
    \  if (l[1] > l[0]) {\n            for (int i = 2; i < n; i++) {\n           \
    \     if (l[i] < l[i - 1]) return false;\n            }\n        } else {\n  \
    \          for (int i = 2; i < n; i++) {\n                if (l[i] > l[i - 1])\
    \ return false;\n            }\n        }\n        return true;", "        bool\
    \ inc = true;\n        bool dec = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            inc &= l[i] >= l[i - 1];\n            dec &= l[i] <= l[i\
    \ - 1];\n        }\n        return inc || dec;", "        return (l.Zip(l.Skip(1),\
    \ (x, y) => y - x).All(z => z >= 0)) ||\n            (l.Zip(l.Skip(1), (x, y)\
    \ => y - x).All(z => z <= 0));", "        bool increasing = true;\n        bool\
    \ decreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n          \
    \  if (l[i] < l[i - 1]) {\n                increasing = false;\n            }\n\
    \            if (l[i] > l[i - 1]) {\n                decreasing = false;\n   \
    \         }\n        }\n        return increasing || decreasing;", "        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;", "        if (l.Count == 0) return true;\n        long d = l[0];\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] == d) {\n \
    \               continue;\n            }\n            if (l[i] > d) {\n      \
    \          if (d < 0) return false;\n                d = 1;\n            } else\
    \ {\n                if (d > 0) return false;\n                d = -1;\n     \
    \       }\n        }\n        return true;", "        int i;\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (i = 1; i < l.Count; i++)\
    \ {\n            if (l[i - 1] > l[i]) {\n                increasing = false;\n\
    \            }\n            if (l[i - 1] < l[i]) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;",
  "        bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n           \
    \     increasing = false;\n            }\n            if (l[i] > l[i - 1]) {\n\
    \                decreasing = false;\n            }\n        }\n        return\
    \ increasing || decreasing;", "        if (l.Count == 0) return true;\n      \
    \  long old = l[0];\n        bool inc = true;\n        bool dec = true;\n    \
    \    for (int i = 1; i < l.Count; i++) {\n            if (l[i] < old) dec = false;\n\
    \            if (l[i] > old) inc = false;\n            old = l[i];\n        }\n\
    \        return inc || dec;", "        bool increasing = true;\n        bool decreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i -\
    \ 1] > l[i]) {\n                increasing = false;\n            }\n         \
    \   if (l[i - 1] < l[i]) {\n                decreasing = false;\n            }\n\
    \        }\n        return increasing || decreasing;", "        if (l.Count <\
    \ 2) {\n            return true;\n        }\n        var s = l[0] < l[1] ? 1 :\
    \ -1;\n        for (int i = 2; i < l.Count; i++) {\n            if (s * (l[i -\
    \ 1] - l[i]) < 0) {\n                return false;\n            }\n        }\n\
    \        return true;", "        bool increasing = false;\n        bool decreasing\
    \ = false;\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > l[i - 1]) {\n                increasing = true;\n            } else if (l[i]\
    \ < l[i - 1]) {\n                decreasing = true;\n            }\n         \
    \   if (increasing && decreasing) {\n                return false;\n         \
    \   }\n        }\n        return true;", "        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i - 1] != l[i] && l[i - 1] > l[i])\n             \
    \   return false;\n        }\n        return true;", '        return l.Zip(l.Skip(1),
    (x, y) => y - x).Distinct().Count() <= 1;', "        int d = 0;\n        long\
    \ prev = l[0];\n        foreach (long x in l) {\n            if (x == prev) {\n\
    \                continue;\n            }\n            if (d == 0) {\n       \
    \         d = x > prev ? 1 : -1;\n            } else if (d > 0) {\n          \
    \      if (x < prev) {\n                    return false;\n                }\n\
    \            } else {\n                if (x > prev) {\n                    return\
    \ false;\n                }\n            }\n            prev = x;\n        }\n\
    \        return true;", '        return l.Zip(l.Skip(1), (a, b) => a.CompareTo(b)).All(x
    => x == 0 || x == -1 || x == 1);', "        if (l.Count <= 1) return true;\n \
    \       if (l[0] < l[1]) {\n            for (int i = 2; i < l.Count; i++) {\n\
    \                if (l[i] < l[i - 1]) return false;\n            }\n        }\
    \ else if (l[0] > l[1]) {\n            for (int i = 2; i < l.Count; i++) {\n \
    \               if (l[i] > l[i - 1]) return false;\n            }\n        }\n\
    \        return true;"]
stop_tokens:
- "\n    }\n"
