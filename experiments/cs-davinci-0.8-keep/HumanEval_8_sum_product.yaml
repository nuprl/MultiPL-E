name: HumanEval_8_sum_product
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // For a given list of integers, return a tuple consisting of a\
  \ sum and a product of all the integers in a list.\n    // Empty sum should be equal\
  \ to 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n   \
  \ // (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    public static\
  \ Tuple<long, long> SumProduct(List<long> numbers) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
  \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
  \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
  \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,\
  \ 0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,\
  \ (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new\
  \ List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\
  \n}\n"
completions: ["        long sum = 0;\n        long product = 1;\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            sum += numbers[i];\n         \
    \   product *= numbers[i];\n        }\n        Tuple<long, long> tuple = new Tuple<long,\
    \ long>(sum, product);\n        return tuple;", "        long sum = 0;\n     \
    \   long product = 1;\n        foreach (long num in numbers) {\n            sum\
    \ += num;\n            product *= num;\n        }\n        return Tuple.Create(sum,\
    \ product);", '        return new Tuple<long, long>(numbers.Sum(), numbers.Aggregate((x,
    y) => x * y));', "        long sum = 0;\n        long product = 1;\n        foreach\
    \ (var number in numbers) {\n            sum += number;\n            product *=\
    \ number;\n        }\n        return Tuple.Create(sum, product);", "        long\
    \ sum = 0;\n        long product = 1;\n        foreach (long n in numbers) {\n\
    \            sum += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,\
    \ product);", "        // Construct the solution here.\n        return new Tuple<long,\
    \ long>(0, 1);", '        return new Tuple<long, long>(numbers.Sum(), numbers.Aggregate(1L,
    (a, b) => a * b));', "        long sum = 0;\n        long product = 1;\n     \
    \   foreach (long i in numbers) {\n            sum += i;\n            product\
    \ *= i;\n        }\n        return Tuple.Create(sum, product);", "        if (numbers.Count\
    \ > 0) {\n            long sum = 0;\n            long product = 1;\n         \
    \   foreach (var num in numbers) {\n                sum += num;\n            \
    \    product *= num;\n            }\n            return Tuple.Create(sum, product);\n\
    \        }\n        return Tuple.Create(0L, 1L);", "        if (numbers.Count\
    \ == 0) {\n            return new Tuple<long, long>(0, 1);\n        } else {\n\
    \            return new Tuple<long, long>(numbers.Sum(), numbers.Aggregate((a,\
    \ b) => a * b));\n        }", "        long sum = 0;\n        long product = 1;\n\
    \        foreach (long num in numbers) {\n            sum += num;\n          \
    \  product *= num;\n        }\n        return Tuple.Create(sum, product);", " \
    \       // Write your code here\n        long sum = 0;\n        long product =\
    \ 1;\n        for (int i = 0; i < numbers.Count; i++) {\n            sum += numbers[i];\n\
    \            product *= numbers[i];\n        }\n        return Tuple.Create(sum,\
    \ product);", "        long sum = 0;\n        long product = 1;\n        if (numbers.Count\
    \ == 0) {\n            return Tuple.Create(sum, product);\n        }\n       \
    \ else {\n            for (int i = 0; i < numbers.Count; i++) {\n            \
    \    sum += numbers[i];\n                product *= numbers[i];\n            }\n\
    \            return Tuple.Create(sum, product);\n        }", "        long product\
    \ = 1;\n        long sum = 0;\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            product *= numbers[i];\n            sum += numbers[i];\n    \
    \    }\n        return Tuple.Create(sum, product);", "        // TODO: Write code\
    \ here\n        return new Tuple<long, long>(0, 0);", '        throw new NotImplementedException();',
  "        if (numbers.Count == 0)\n            return new Tuple<long, long>(0, 1);\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var item in\
    \ numbers) {\n            sum += item;\n            product *= item;\n       \
    \ }\n        return new Tuple<long, long>(sum, product);", "        long product\
    \ = 1;\n        long sum = 0;\n        foreach (long num in numbers) {\n     \
    \       product *= num;\n            sum += num;\n        }\n        return Tuple.Create(sum,\
    \ product);", "        // Find the sum of all the numbers\n        // Find the\
    \ product of all the numbers\n        var sum = 0L;\n        var product = 1L;\n\
    \        foreach (var num in numbers) {\n            sum += num;\n           \
    \ product *= num;\n        }\n        return Tuple.Create(sum, product);", " \
    \       long sum = 0;\n        long product = 1;\n        foreach (var num in\
    \ numbers) {\n            sum += num;\n            product *= num;\n        }\n\
    \        return Tuple.Create(sum, product);"]
stop_tokens:
- "\n    }\n"
