name: HumanEval_91_is_bored
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You'll be given a string of words, and your task is to count\
  \ the number\n    // of boredoms. A boredom is a sentence that starts with the word\
  \ \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n\
  \    // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
  \ blue. The sun is shining. I love this weather\")\n    // 1\n    public static\
  \ long IsBored(string S) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"\
  Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n\
  \    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"\
  bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.\
  \ will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for\
  \ a walk\")) == (0L));\n    }\n\n}\n"
completions: ["        long total = 0;\n        string[] sentences = S.Split(new string[]\
    \ { \".\", \"?\", \"!\" }, StringSplitOptions.RemoveEmptyEntries);\n        foreach\
    \ (string sentence in sentences) {\n            if (sentence.Trim().StartsWith(\"\
    I\")) {\n                total++;\n            }\n        }\n        return total;",
  "        var N = S.Length;\n        var I = S.IndexOf(\"I\");\n        if (I ==\
    \ -1) return 0;\n        var isSentence = false;\n        var count = 0;\n   \
    \     for (var i = I + 1; i < N; i++) {\n            var c = S[i];\n         \
    \   if (c == ' ') continue;\n            if (c == '.' || c == '?' || c == '!')\
    \ {\n                isSentence = true;\n                continue;\n         \
    \   }\n            if (isSentence) {\n                count++;\n             \
    \   isSentence = false;\n            }\n        }\n        return count;", " \
    \       return S.Split(new[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries)\n\
    \            .Count(s => s.Trim().StartsWith(\"I\"));", "        string[] split\
    \ = S.Split(new char[] { '.', '?', '!' });\n        return split.Count(p => p.Trim().ToLower().StartsWith(\"\
    i\"));", "        long boredoms = 0;\n        var words = S.Split(' ', '.', '?',\
    \ '!');\n        foreach (var word in words) {\n            if (word == \"I\"\
    ) {\n                boredoms++;\n            }\n        }\n        return boredoms;",
  '        return 0;', "        string[] sentences = S.Split(new char[] { '.', '?',\
    \ '!' });\n        long boredoms = 0;\n        foreach (string sentence in sentences)\
    \ {\n            if (sentence.Length == 0) {\n                continue;\n    \
    \        }\n            if (sentence[0] == 'I') {\n                boredoms++;\n\
    \            }\n        }\n        return boredoms;", "        return S.Split(new\
    \ char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries).Count(sentence\
    \ => sentence.Trim().StartsWith(\"I\"));", "        string[] arr = S.Split('.',\
    \ '?', '!');\n        long n = 0;\n        foreach (string s in arr) {\n     \
    \       if (s.Trim().Length > 0 && s.Trim().Split(' ')[0] == \"I\") {\n      \
    \          n++;\n            }\n        }\n        return n;", "        // Given\
    \ a sequence, return the longest palindromic subsequence.\n        // For example:\n\
    \        // >>> longest_palindrome(\"BANANA\")\n        // 5\n        // >>> longest_palindrome(\"\
    ABBA\")\n        // 4\n        // >>> longest_palindrome(\"BABABABABA\")\n   \
    \     // 10\n        // >>> longest_palindrome(\"ABABABABABA\")\n        // 11\n\
    \        // >>> longest_palindrome(\"BACBACBAC\")\n        // 7\n        // >>>\
    \ longest_palindrome(\"ABABABACBABABACBA\")\n        // 15\n        // >>> longest_palindrome(\"\
    BACBAC\")\n        // 6\n        // >>> longest_palindrome(\"BACBACBACBAC\")\n\
    \        // 8\n        // >>> longest_palindrome(\"CDABCDBACA\")\n        // 8\n\
    \        // >>> longest_palindrome(\"ABCDABCDABCD\")\n        // 11\n        //\
    \ >>> longest_palindrome(\"BACBAD\")\n        // 5\n        // >>> longest_palindrome(\"\
    BACBADBAC\")\n        // 7\n        // >>> longest_palindrome(\"CDABCDBACDBAD\"\
    )\n        // 10\n        // >>> longest_palindrome(\"ABCDABCDBACDABCD\")\n  \
    \      // 13\n        // >>> longest_palindrome(\"BACBADBACBAC\")\n        //\
    \ 9\n        // >>> longest_palindrome(\"CDABCDBACDBADBACBAC\")\n        // 16\n\
    \        // >>> longest_palindrome(\"ABCDABCDBACDABCDBACDABCD\")\n        // 19\n\
    \        // >>> longest_palindrome(\"BACBADBACBACBACBAD\")\n        // 13\n  \
    \      // >>> longest_palindrome(\"CDABCDBACDBADBACBACDBAD\")\n        // 18\n\
    \        // >>> longest_palindrome(\"ABCDABCDBACDABCDBACDABCDBACDABCD\")\n   \
    \     // 25\n        // >>> longest_palindrome(\"BACBADBACBACBACBADBACBACBACBAD\"\
    )\n        // 19\n       ", "        var boredomCount = 0;\n        var splitters\
    \ = new[] { '.', '?', '!' };\n        var splitted = S.Split(splitters);\n   \
    \     foreach (var s in splitted) {\n            if (s.Length > 0 && s[0] == 'I')\
    \ {\n                boredomCount++;\n            }\n        }\n        return\
    \ boredomCount;", "        // Your code goes here\n        return 0;", "     \
    \   long r = 0;\n        // Write your solution here\n        // Check for the\
    \ sentences: if you start with \"I\", there's a boredom.\n        for (int i =\
    \ 0; i < S.Length; i++) {\n            if (S[i] == 'I') {\n                bool\
    \ found = false;\n                for (int j = i; j < S.Length; j++) {\n     \
    \               if (S[j] == '.' || S[j] == '?' || S[j] == '!') {\n           \
    \             found = true;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    r++;\n\
    \                }\n            }\n        }\n        return r;", "        return\
    \ S.Split(new char[] { '!', '.', '?' }, StringSplitOptions.RemoveEmptyEntries).Count(x\
    \ => x.TrimStart().StartsWith(\"I \"));", '        return 0;', "        var count\
    \ = 0;\n        var current = \"\";\n        foreach (var ch in S) {\n       \
    \     if (ch == '.' || ch == '?' || ch == '!') {\n                if (current.StartsWith(\"\
    I \")) {\n                    count++;\n                }\n                current\
    \ = \"\";\n            } else {\n                current += ch;\n            }\n\
    \        }\n        return count;", "        string[] sentences = S.Split(new\
    \ char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n        long\
    \ count = 0;\n        foreach (string sentence in sentences) {\n            string[]\
    \ words = sentence.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \            if (words.Length > 0 && words[0] == \"I\") {\n                count++;\n\
    \            }\n        }\n        return count;", "        // Your code goes\
    \ here\n        char[] delims = { '.', '?', '!' };\n        string[] sentences\
    \ = S.Split(delims);\n        long numBoredoms = 0;\n        for (int i = 0; i\
    \ < sentences.Length; i++) {\n            if (sentences[i].StartsWith(\"I\"))\
    \ {\n                numBoredoms++;\n            }\n        }\n        return\
    \ numBoredoms;", "        long result = 0;\n        char[] delimiters = { '.',\
    \ '?', '!' };\n        string[] sentences = S.Split(delimiters);\n        foreach\
    \ (string sentence in sentences) {\n            if (sentence.Length > 0 &&\n \
    \               sentence.Trim().Split(' ')[0] == \"I\") {\n                result++;\n\
    \            }\n        }\n        return result;", "        long boredoms = 0;\n\
    \        var q = S.Split('!', '.', '?');\n        foreach (var item in q) {\n\
    \            if (item.StartsWith(\"I\")) {\n                boredoms++;\n    \
    \        }\n        }\n        return boredoms;"]
stop_tokens:
- "\n    }\n"
