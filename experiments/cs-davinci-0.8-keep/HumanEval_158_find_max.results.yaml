language: cs
name: HumanEval_158_find_max
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        if (words.Count
    == 0)\n            return null;\n        string max = words[0];\n        foreach
    (string word in words) {\n            int num = 0;\n            foreach (char
    letter in word) {\n                if (!max.Contains(letter))\n                    num++;\n
    \           }\n            if (num > max.Length)\n                max = word;\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00fc8e0ffb6241c9bf4db81cfdaa7cf6>:0
    \n"
  stdout: ''
  timestamp: 1659823903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        // Your code goes
    here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <952f703eeb8d4271a9cee942d14bf2c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <952f703eeb8d4271a9cee942d14bf2c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        return words.Aggregate(\"\",
    (a, w) => a == \"\" || w.Distinct().Count() > a.Distinct().Count() ? w : a);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52f9a8dc6c5040eab50dfbf4fdd6a0f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52f9a8dc6c5040eab50dfbf4fdd6a0f8>:0
    \n"
  stdout: ''
  timestamp: 1659823903
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00024] in <2934028ef306427b8707c40579d1d877>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00024]
    in <2934028ef306427b8707c40579d1d877>:0 \n"
  stdout: ''
  timestamp: 1659823903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        if (words.Count
    == 0)\n            return \"\";\n        int max = 0;\n        String res = \"\";\n
    \       for (int i = 0; i < words.Count; i++) {\n            int k = 0;\n            String
    s = words[i];\n            while (k < s.Length) {\n                char c = s[k];\n
    \               s = s.Remove(k, 1);\n                if (s.IndexOf(c) == -1) {\n
    \                   s = s.Insert(k, c.ToString());\n                    k++;\n
    \               }\n            }\n            if (s.Length > max) {\n                max
    = s.Length;\n                res = words[i];\n            }\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <466825108d6b4753b3d737baff4b480f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <466825108d6b4753b3d737baff4b480f>:0
    \n"
  stdout: ''
  timestamp: 1659823903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string max = \"\";\n
    \       foreach (string word in words) {\n            if (word.Distinct().Count()
    > max.Distinct().Count()) {\n                max = word;\n            }\n        }\n
    \       return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <118ec8fe2c7f413184c89565eb1c6e74>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <118ec8fe2c7f413184c89565eb1c6e74>:0
    \n"
  stdout: ''
  timestamp: 1659823903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        // your solution
    here\n        string result = \"\";\n        int maxUnique = 0;\n        int wordLen
    = 0;\n        foreach (string word in words) {\n            HashSet<char> chars
    = new HashSet<char>();\n            wordLen = word.Length;\n            for (int
    i = 0; i < wordLen; i++) {\n                chars.Add(word[i]);\n            }\n
    \           if (chars.Count > maxUnique) {\n                maxUnique = chars.Count;\n
    \               result = word;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38c6107fe69649c2b1433685b0136e04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38c6107fe69649c2b1433685b0136e04>:0
    \n"
  stdout: ''
  timestamp: 1659823903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        // TODO: Implement
    FindMax()\n        // Return the longest word\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <02b02d5b713043519b7730b69931adfb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <02b02d5b713043519b7730b69931adfb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823903
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        if (words.Count
    == 0) {\n            return \"\";\n        }\n        int max = 0;\n        string
    max_word = \"\";\n        foreach (string s in words) {\n            int len =
    MaxUnique(s);\n            if (len > max) {\n                max = len;\n                max_word
    = s;\n            }\n        }\n        return max_word;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo8ee2j63.cs(23,23): error CS0103: The name ''MaxUnique'' does not exist
    in the current context

    '
  timestamp: 1659823903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        int max_count
    = -1;\n        string result = \"\";\n        foreach (string w in words) {\n
    \           int count = w.Distinct().Count();\n            if (count > max_count)
    {\n                max_count = count;\n                result = w;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ae15ac4d8aa412a81b605f9fdfa65f1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ae15ac4d8aa412a81b605f9fdfa65f1>:0
    \n"
  stdout: ''
  timestamp: 1659823903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        // input list
    is not empty\n        Debug.Assert(words.Count > 0);\n        var max_chars =
    words[0].Length;\n        var max_index = 0;\n        for (int i = 1; i < words.Count;
    i++) {\n            if (words[i].Length > max_chars) {\n                max_chars
    = words[i].Length;\n                max_index = i;\n            }\n        }\n
    \       return words[max_index];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c7a030e8ee6e4baa9191da8afbc3e48e>:0
    \n"
  stdout: ''
  timestamp: 1659823903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        if (words.Count
    < 1) return \"\";\n        var maxStr = words[0];\n        foreach (var str in
    words) {\n            if (str.Distinct().Count() > maxStr.Distinct().Count())
    {\n                maxStr = str;\n            }\n        }\n        return maxStr;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <92ca3f297cfa4e0eb090337d07069c20>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <92ca3f297cfa4e0eb090337d07069c20>:0
    \n"
  stdout: ''
  timestamp: 1659823903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        return words.Aggregate((word,
    next) =>\n            word.Length == next.Length ?\n                word.CompareTo(next)
    < 0 ? word : next :\n                word.Length > next.Length ? word : next);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3def93bfec684082a05775a470a62cbb>:0
    \n"
  stdout: ''
  timestamp: 1659823903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string result
    = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           HashSet<char> set = new HashSet<char>();\n            foreach (char
    ch in word) {\n                set.Add(ch);\n            }\n            if (set.Count
    > maxCount) {\n                maxCount = set.Count;\n                result =
    word;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b548460c7b194fe2b606591dc5807e7e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b548460c7b194fe2b606591dc5807e7e>:0
    \n"
  stdout: ''
  timestamp: 1659823903
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        // Write your
    code here.\n        string res = \"\";\n        int counter = 0;\n        for
    (int i = 0; i < words.Count; i++) {\n            int currentLength = FindUniqueChars(words[i]);\n
    \           if (currentLength > counter) {\n                counter = currentLength;\n
    \               res = words[i];\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptug71_s3.cs(21,33): error CS0103: The name ''FindUniqueChars'' does not
    exist in the current context

    '
  timestamp: 1659823903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        var max = 0;\n
    \       var max_word = \"\";\n        foreach (var word in words) {\n            var
    chars = new Dictionary<char, int>();\n            foreach (var ch in word) {\n
    \               if (!chars.ContainsKey(ch)) {\n                    chars[ch] =
    1;\n                }\n            }\n            if (chars.Count > max) {\n                max
    = chars.Count;\n                max_word = word;\n            }\n        }\n        return
    max_word;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d8855e8bae442ada6273296908f58a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d8855e8bae442ada6273296908f58a7>:0
    \n"
  stdout: ''
  timestamp: 1659823903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        if (words.Count
    == 0) {\n            return \"\";\n        }\n\n        var maxLength = 0;\n        var
    result = \"\";\n        foreach (var word in words) {\n            var uniqueChars
    = new HashSet<char>();\n            foreach (var c in word) {\n                uniqueChars.Add(c);\n
    \           }\n            if (uniqueChars.Count > maxLength) {\n                maxLength
    = uniqueChars.Count;\n                result = word;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <222782daecee41db89b14fb788cea732>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <222782daecee41db89b14fb788cea732>:0
    \n"
  stdout: ''
  timestamp: 1659823903
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00024] in <2934028ef306427b8707c40579d1d877>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00024]
    in <2934028ef306427b8707c40579d1d877>:0 \n"
  stdout: ''
  timestamp: 1659823903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        string maxword
    = \"\";\n        int maxcount = 0;\n        foreach (string word in words) {\n
    \           int count = 0;\n            foreach (char c in word) {\n                if
    (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    count++;\n                }\n
    \           }\n            if (count > maxcount) {\n                maxcount =
    count;\n                maxword = word;\n            }\n        }\n        return
    maxword;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5ff4b88c7a348929512c66d04968a1f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5ff4b88c7a348929512c66d04968a1f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823903
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // find_max([\"name\",
    \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"])
    == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n
    \   public static string FindMax(List<string> words) {\n        // We're looking
    for\n        //  1. Highest count of distinct letters\n        //  2. Ties broken
    by being the earliest in the list (lexicographical order)\n        // So we'll
    use some LINQ to enumerate all the distinct letters in each\n        // word and
    have the Query compare those values.\n        var result = words.Select(word =>
    (word, word.Distinct().Count()))\n                          .OrderByDescending(t
    => t.Item2)\n                          .ThenBy(t => t.Item1)\n                          .First().Item1;\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823903
