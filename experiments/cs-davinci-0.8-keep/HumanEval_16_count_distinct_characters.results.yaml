language: cs
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        var temp = str.ToLower().Distinct();\n\
    \        return temp.Count();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        // INSERT YOUR CODE\
    \ HERE\n        HashSet<char> s = new HashSet<char>();\n        foreach (char\
    \ c in str)\n        {\n            s.Add(char.ToLower(c));\n        }\n     \
    \   return s.Count;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        string lowStr = str.ToLower();\n\
    \        return lowStr.Distinct().Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        if (str == null)\
    \ {\n            return 0;\n        }\n\n        str = str.ToLower();\n      \
    \  var distinct = new HashSet<char>();\n        foreach (var c in str) {\n   \
    \         distinct.Add(c);\n        }\n        return distinct.Count;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        return str.Distinct().Count();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b7c20d65e7e4b839ffee93e882fd363>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b7c20d65e7e4b839ffee93e882fd363>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        // ensure str is\
    \ all upper case for comparison purposes\n        str = str.ToUpper();\n     \
    \   // create a list to hold distinct characters\n        List<char> characters\
    \ = new List<char>();\n        // loop through all characters in str\n       \
    \ for (int i = 0; i < str.Length; i++) {\n            // if the character doesn't\
    \ exist in the list\n            if (!characters.Contains(str[i])) {\n       \
    \         // add it to the list\n                characters.Add(str[i]);\n   \
    \         }\n        }\n        // return the length of the list\n        return\
    \ characters.Count;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        var set = new HashSet<char>();\n\
    \        foreach (var ch in str) {\n            set.Add(ch);\n        }\n    \
    \    return set.Count;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d14047dda5034810aab281180bed0566>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d14047dda5034810aab281180bed0566>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        var dict = new Dictionary<char,\
    \ int>();\n        var sb = new StringBuilder();\n        foreach (var c in str)\
    \ {\n            sb.Append(char.ToLower(c));\n        }\n        foreach (var\
    \ c in sb.ToString()) {\n            if (!dict.ContainsKey(c)) {\n           \
    \     dict[c] = 1;\n            }\n        }\n        return dict.Count;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        var hash = new HashSet<char>();\n\
    \        foreach (var c in str) {\n            hash.Add(char.ToLower(c));\n  \
    \      }\n        return hash.Count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        // There are 26 letters,\
    \ and a total of 52 different possible characters, including upper and lower case\n\
    \        // We will use a bit vector to keep track of which characters we have\
    \ seen\n        int seen = 0;\n        // For each character in the string\n \
    \       foreach (char c in str) {\n            // The mask will be zero if the\
    \ character is lowercase, 1 if it is uppercase\n            int mask = c < 'a'\
    \ ? 1 : 0;\n            // We will subtract 1 from the character value if it is\
    \ lowercase\n            // This will preserve the position of the character (e.g.\
    \ 'a' - 1 = 0, 'b' - 1 = 1, 'c' - 1 = 2, etc.)\n            // but will cause\
    \ uppercase letters to occupy the same position as their lowercase counterpart\n\
    \            // (e.g. 'A' - 1 = 0, 'B' - 1 = 1, 'C' - 1 = 2, etc.)\n         \
    \   int ch = (c & 31) - 1;\n            // This is a fancy way of saying seen\
    \ |= (1 << (ch + 26 * mask))\n            // This will mark the character we have\
    \ seen\n            seen |= 1 << (ch + 26 * mask);\n        }\n        // We will\
    \ use the built-in \"popcount\" function to count the set bits in the bit vector\n\
    \        // This will tell us how many distinct characters are present in the\
    \ string\n        return BitOperations.PopCount(seen);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))\
    \ == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3zwwwpva.cs(33,16): error CS0103: The name ''BitOperations'' does not
    exist in the current context

    '
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        int[] map = new int[128];\n\
    \        foreach (char c in str)\n            map[c]++;\n        return map.Where(i\
    \ => i > 0).Count();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d0a88af2f8748e2a435c1d2e5ca49a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d0a88af2f8748e2a435c1d2e5ca49a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        var letters = new\
    \ HashSet<char>();\n        foreach (var c in str) {\n            letters.Add(char.ToLower(c));\n\
    \        }\n        return letters.Count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        // The set of characters\n\
    \        HashSet<Char> set = new HashSet<Char>();\n        foreach (Char c in\
    \ str) {\n            set.Add(Char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        string countstr =\
    \ \"\";\n        foreach (char c in str) {\n            if (!countstr.Contains(c.ToString().ToLower()))\n\
    \                countstr += c.ToString().ToLower();\n        }\n        return\
    \ countstr.Length;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
    \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public\
    \ static long CountDistinctCharacters(string str) {\n        // TODO: implement\
    \ me!\n        return str.ToUpper().Distinct().Count();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))\
    \ == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824690
