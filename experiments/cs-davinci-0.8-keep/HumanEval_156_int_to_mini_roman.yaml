name: HumanEval_156_int_to_mini_roman
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num\
  \ <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
  \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
  \    public static string IntToMiniRoman(long number) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
  xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
  ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n   \
  \ Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
  i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
  xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
  xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n   \
  \ Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
  cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\
  \n}\n"
completions: ["        var roman = new StringBuilder();\n        foreach (var (num,\
    \ roman_num) in roman_numerals) {\n            if (number < num) {\n         \
    \       continue;\n            }\n            while (number >= num) {\n      \
    \          roman.Append(roman_num);\n                number -= num;\n        \
    \    }\n        }\n        return roman.ToString();", "        string roman =\
    \ \"\";\n        for (int i = 1; i <= number; i *= 10) {\n            int digit\
    \ = (int)(number / i) % 10;\n            if (digit < 4) {\n                roman\
    \ = new string('I', digit) + roman;\n            } else if (digit == 4) {\n  \
    \              roman = \"IV\" + roman;\n            } else if (digit < 9) {\n\
    \                roman = \"V\" + new string('I', digit - 5) + roman;\n       \
    \     } else {\n                roman = \"IX\" + roman;\n            }\n     \
    \   }\n        return roman;", '        throw new NotImplementedException();',
  "        if (number <= 0 || number > 1000)\n            throw new ArgumentOutOfRangeException();\n\
    \        var digits = Digits(number, 4);\n        return ToMiniRoman(digits);",
  "        if (number < 1 || number > 1000) {\n            throw new ArgumentOutOfRangeException();\n\
    \        }\n        if (number == 0) {\n            return \"\";\n        }\n\
    \        if (number >= 1000) {\n            return \"m\" + IntToMiniRoman(number\
    \ - 1000);\n        }\n        if (number >= 900) {\n            return \"cm\"\
    \ + IntToMiniRoman(number - 900);\n        }\n        if (number >= 500) {\n \
    \           return \"d\" + IntToMiniRoman(number - 500);\n        }\n        if\
    \ (number >= 400) {\n            return \"cd\" + IntToMiniRoman(number - 400);\n\
    \        }\n        if (number >= 100) {\n            return \"c\" + IntToMiniRoman(number\
    \ - 100);\n        }\n        if (number >= 90) {\n            return \"xc\" +\
    \ IntToMiniRoman(number - 90);\n        }\n        if (number >= 50) {\n     \
    \       return \"l\" + IntToMiniRoman(number - 50);\n        }\n        if (number\
    \ >= 40) {\n            return \"xl\" + IntToMiniRoman(number - 40);\n       \
    \ }\n        if (number >= 10) {\n            return \"x\" + IntToMiniRoman(number\
    \ - 10);\n        }\n        if (number >= 9) {\n            return \"ix\" + IntToMiniRoman(number\
    \ - 9);\n        }\n        if (number >= 5) {\n            return \"v\" + IntToMiniRoman(number\
    \ - 5);\n        }\n        if (number >= 4) {\n            return \"iv\" + IntToMiniRoman(number\
    \ - 4);\n        }\n        if (number >= 1) {\n            return \"i\" + IntToMiniRoman(number\
    \ - 1);\n        }\n        return null;", "        var conv = new Dictionary<int,\
    \ string> {\n            { 1000, \"m\" },\n            { 900, \"cm\" },\n    \
    \        { 500, \"d\" },\n            { 400, \"cd\" },\n            { 100, \"\
    c\" },\n            { 90, \"xc\" },\n            { 50, \"l\" },\n            {\
    \ 40, \"xl\" },\n            { 10, \"x\" },\n            { 9, \"ix\" },\n    \
    \        { 5, \"v\" },\n            { 4, \"iv\" },\n            { 1, \"i\" }\n\
    \        };\n        var count = 0;\n        var res = \"\";\n        foreach\
    \ (var roman in conv) {\n            count = (int)(number / roman.Key);\n    \
    \        number %= roman.Key;\n            res += roman.Value.ToLower() * count;\n\
    \        }\n        return res;", "        long[] arabic = { 1, 4, 5, 9, 10, 40,\
    \ 50, 90, 100, 400, 500, 900, 1000 };\n        string[] roman = { \"i\", \"iv\"\
    , \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"\
    m\" };\n        StringBuilder sb = new StringBuilder();\n        int i = arabic.Length\
    \ - 1;\n        while (number > 0 || arabic.Length == (i - 1)) {\n           \
    \ while (number < arabic[i])\n                i--;\n            number -= arabic[i];\n\
    \            sb.Append(roman[i]);\n        }\n        return sb.ToString();",
  "        if(number <= 0 || number > 1000) {\n            throw new ArgumentOutOfRangeException(\"\
    number\", number,\n                \"number must be a positive integer less than\
    \ or equal to 1000\");\n        }\n        var roman = new StringBuilder();\n\
    \        while(number > 0) {\n            if(number >= 900) {\n              \
    \  roman.Append(\"cm\");\n                number -= 900;\n            } else if(number\
    \ >= 500) {\n                roman.Append(\"d\");\n                number -= 500;\n\
    \            } else if(number >= 400) {\n                roman.Append(\"cd\");\n\
    \                number -= 400;\n            } else if(number >= 100) {\n    \
    \            roman.Append(\"c\");\n                number -= 100;\n          \
    \  } else if(number >= 90) {\n                roman.Append(\"xc\");\n        \
    \        number -= 90;\n            } else if(number >= 50) {\n              \
    \  roman.Append(\"l\");\n                number -= 50;\n            } else if(number\
    \ >= 40) {\n                roman.Append(\"xl\");\n                number -= 40;\n\
    \            } else if(number >= 10) {\n                roman.Append(\"x\");\n\
    \                number -= 10;\n            } else if(number >= 9) {\n       \
    \         roman.Append(\"ix\");\n                number -= 9;\n            } else\
    \ if(number >= 5) {\n                roman.Append(\"v\");\n                number\
    \ -= 5;\n            } else if(number >= 4) {\n                roman.Append(\"\
    iv\");\n                number -= 4;\n            } else {\n                roman.Append(\"\
    i\");\n                number -= 1;\n            }\n        }\n        return\
    \ roman.ToString();", '        throw new NotImplementedException();', "      \
    \  StringBuilder roman = new StringBuilder();\n        while (number >= 1000)\
    \ {\n            roman.Append(\"m\");\n            number -= 1000;\n        }\n\
    \        if (number >= 900) {\n            roman.Append(\"cm\");\n           \
    \ number -= 900;\n        }\n        if (number >= 500) {\n            roman.Append(\"\
    d\");\n            number -= 500;\n        }\n        if (number >= 400) {\n \
    \           roman.Append(\"cd\");\n            number -= 400;\n        }\n   \
    \     while (number >= 100) {\n            roman.Append(\"c\");\n            number\
    \ -= 100;\n        }\n        if (number >= 90) {\n            roman.Append(\"\
    xc\");\n            number -= 90;\n        }\n        if (number >= 50) {\n  \
    \          roman.Append(\"l\");\n            number -= 50;\n        }\n      \
    \  if (number >= 40) {\n            roman.Append(\"xl\");\n            number\
    \ -= 40;\n        }\n        while (number >= 10) {\n            roman.Append(\"\
    x\");\n            number -= 10;\n        }\n        if (number >= 9) {\n    \
    \        roman.Append(\"ix\");\n            number -= 9;\n        }\n        if\
    \ (number >= 5) {\n            roman.Append(\"v\");\n            number -= 5;\n\
    \        }\n        if (number >= 4) {\n            roman.Append(\"iv\");\n  \
    \          number -= 4;\n        }\n        while (number >= 1) {\n          \
    \  roman.Append(\"i\");\n            number -= 1;\n        }\n        return roman.ToString();",
  "        // You need to implement this function.\n        // Otherwise, the function\
    \ always returns a dummy value 42.\n        // Delete this line when you implement\
    \ this function.\n        string output = \"\";\n        string[] unos = new string[]\
    \ {\"i\", \"x\", \"c\", \"m\"};\n        string[] cincos = new string[] {\"v\"\
    , \"l\", \"d\"};\n        int exp = 0;\n        while (number > 0) {\n       \
    \     int digit = (int)(number % 10);\n            output = GetTens(digit, unos[exp],\
    \ cincos[exp]) + output;\n            number /= 10;\n            exp++;\n    \
    \    }\n        return output;", "        if (number <= 0 || number > 1000) {\n\
    \            throw new ArgumentOutOfRangeException(\"Number must be in the range\
    \ 1 to 1000\");\n        }\n        string[,] values = new string[,] {\n     \
    \       { \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\"\
    , \"ix\" },\n            { \"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\"\
    , \"lxx\", \"lxxx\", \"xc\" },\n            { \"\", \"c\", \"cc\", \"ccc\", \"\
    cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\" },\n            { \"\", \"m\",\
    \ \"mm\", \"mmm\", \"m(v)\", \"v\", \"v(m)\", \"v(m)m\", \"v(m)mm\", \"m(x)\"\
    \ }\n        };\n        string roman = \"\";\n        for (int i = 0; i < 4;\
    \ i++) {\n            roman = values[i, number % 10] + roman;\n            number\
    \ /= 10;\n        }\n        return roman;", "        var output = new StringBuilder();\n\
    \        long thousands = number / 1000;\n        if (thousands > 0) {\n     \
    \       output.Append(new string('m', (int)thousands));\n            number %=\
    \ 1000;\n        }\n        long hundreds = number / 100;\n        if (hundreds\
    \ > 0) {\n            if (hundreds == 9) {\n                output.Append(\"cm\"\
    );\n            } else if (hundreds == 4) {\n                output.Append(\"\
    cd\");\n            } else {\n                var fivehundreds = hundreds / 5;\n\
    \                if (fivehundreds > 0) {\n                    output.Append(\"\
    d\");\n                }\n                output.Append(new string('c', (int)(hundreds\
    \ % 5)));\n            }\n            number %= 100;\n        }\n        long\
    \ tens = number / 10;\n        if (tens > 0) {\n            if (tens == 9) {\n\
    \                output.Append(\"xc\");\n            } else if (tens == 4) {\n\
    \                output.Append(\"xl\");\n            } else {\n              \
    \  var fifties = tens / 5;\n                if (fifties > 0) {\n             \
    \       output.Append(\"l\");\n                }\n                output.Append(new\
    \ string('x', (int)(tens % 5)));\n            }\n            number %= 10;\n \
    \       }\n        if (number > 0) {\n            if (number == 9) {\n       \
    \         output.Append(\"ix\");\n            } else if (number == 4) {\n    \
    \            output.Append(\"iv\");\n            } else {\n                var\
    \ fives = number / 5;\n                if (fives > 0) {\n                    output.Append(\"\
    v\");\n                }\n                output.Append(new string('i', (int)(number\
    \ % 5)));\n            }\n        }\n        return output.ToString();", "   \
    \     StringBuilder result = new StringBuilder();\n        // number should be\
    \ less than 4000\n        while (number >= 1000) {\n            result.Append(\"\
    m\");\n            number -= 1000;\n        }\n        while (number >= 500) {\n\
    \            result.Append(\"d\");\n            number -= 500;\n        }\n  \
    \      while (number >= 100) {\n            result.Append(\"c\");\n          \
    \  number -= 100;\n        }\n        while (number >= 50) {\n            result.Append(\"\
    l\");\n            number -= 50;\n        }\n        while (number >= 10) {\n\
    \            result.Append(\"x\");\n            number -= 10;\n        }\n   \
    \     while (number >= 5) {\n            result.Append(\"v\");\n            number\
    \ -= 5;\n        }\n        while (number >= 1) {\n            result.Append(\"\
    i\");\n            number -= 1;\n        }\n        return result.ToString();",
  '        throw new NotImplementedException();', "        // TODO: Implement me!\n\
    \        return null;", "        var romanToArabic = new Dictionary<char, int>\
    \ {\n            { 'i', 1 },\n            { 'v', 5 },\n            { 'x', 10 },\n\
    \            { 'l', 50 },\n            { 'c', 100 },\n            { 'd', 500 },\n\
    \            { 'm', 1000 }\n        };\n        var arabicToRoman = romanToArabic.ToDictionary(kvp\
    \ => kvp.Value, kvp => kvp.Key);\n        var arabicToRoman2 = new Dictionary<int,\
    \ char> {\n            { 4, 'i' },\n            { 9, 'x' },\n            { 40,\
    \ 'l' },\n            { 90, 'c' },\n            { 400, 'd' },\n            { 900,\
    \ 'm' }\n        };\n        var number_ = (int)number;\n        var result =\
    \ new StringBuilder();\n        foreach (var pair in arabicToRoman.Reverse())\
    \ {\n            var arabic = pair.Key;\n            var roman = pair.Value;\n\
    \            for (; number_ >= arabic; number_ -= arabic) {\n                result.Append(roman);\n\
    \            }\n        }\n        for (int i = arabicToRoman2.Keys.Count - 1;\
    \ i >= 0; i--) {\n            var arabic = arabicToRoman2.Keys.ElementAt(i);\n\
    \            var roman = arabicToRoman2.Values.ElementAt(i);\n            for\
    \ (; number_ >= arabic - 1; number_ -= arabic - 1) {\n                result.Append(arabicToRoman[1]);\n\
    \                result.Append(roman);\n            }\n        }\n        return\
    \ result.ToString();", '        return "";', "        string res = \"\";\n   \
    \     while (number > 0) {\n            if (number >= 1000) {\n              \
    \  res += \"m\";\n                number -= 1000;\n            } else if (number\
    \ >= 900) {\n                res += \"cm\";\n                number -= 900;\n\
    \            } else if (number >= 500) {\n                res += \"d\";\n    \
    \            number -= 500;\n            } else if (number >= 400) {\n       \
    \         res += \"cd\";\n                number -= 400;\n            } else if\
    \ (number >= 100) {\n                res += \"c\";\n                number -=\
    \ 100;\n            } else if (number >= 90) {\n                res += \"xc\"\
    ;\n                number -= 90;\n            } else if (number >= 50) {\n   \
    \             res += \"l\";\n                number -= 50;\n            } else\
    \ if (number >= 40) {\n                res += \"xl\";\n                number\
    \ -= 40;\n            } else if (number >= 10) {\n                res += \"x\"\
    ;\n                number -= 10;\n            } else if (number >= 9) {\n    \
    \            res += \"ix\";\n                number -= 9;\n            } else\
    \ if (number >= 5) {\n                res += \"v\";\n                number -=\
    \ 5;\n            } else if (number >= 4) {\n                res += \"iv\";\n\
    \                number -= 4;\n            } else if (number >= 1) {\n       \
    \         res += \"i\";\n                number -= 1;\n            }\n       \
    \ }\n        return res;", "        string roman = \"\";\n        List<long> multiples\
    \ = new List<long> {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n \
    \       List<string> numbers = new List<string> {\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n      \
    \  while (number > 0) {\n            foreach (var pair in multiples.Zip(numbers,\
    \ (x, y) => new { x, y })) {\n                if (number >= pair.x) {\n      \
    \              roman += pair.y;\n                    number -= pair.x;\n     \
    \               break;\n                }\n            }\n        }\n        return\
    \ roman;"]
stop_tokens:
- "\n    }\n"
