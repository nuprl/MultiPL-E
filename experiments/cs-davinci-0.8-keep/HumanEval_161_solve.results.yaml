language: cs
name: HumanEval_161_solve
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        if (s.ToLower().Any(char.IsLetter))\n
    \           return String.Concat(s.Select(c => char.IsLetter(c) ? (char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c)) : c));\n        else\n            return
    String.Concat(s.Reverse());\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823360
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        bool allDigits = true;\n        for (int
    i = 0; i < s.Length; i++) {\n            if (!char.IsDigit(s[i])) {\n                allDigits
    = false;\n                break;\n            }\n        }\n        if (allDigits)
    {\n            return new string(s.Reverse().ToArray());\n        }\n        var
    output = new StringBuilder();\n        for (int i = 0; i < s.Length; i++) {\n
    \           if (char.IsDigit(s[i])) {\n                output.Append(s[i]);\n
    \           } else {\n                output.Append(char.IsUpper(s[i]) ? char.ToLower(s[i])
    : char.ToUpper(s[i]));\n            }\n        }\n        return output.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <48602718bf114c4a81229586027fe454>:0
    \n"
  stdout: ''
  timestamp: 1659823360
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        bool hasLetters = false;\n        StringBuilder
    sb = new StringBuilder();\n        for (int i = 0; i < s.Length; i++) {\n            char
    c = s[i];\n            if (char.IsLetter(c)) {\n                c = char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c);\n                hasLetters = true;\n            }\n
    \           sb.Append(c);\n        }\n        return hasLetters ? sb.ToString()
    : Reverse(sb.ToString());\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjfvkqapn.cs(29,45): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1659823360
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        string r = \"\";\n        for (int i
    = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i])) {\n                r
    += char.IsUpper(s[i]) ? char.ToLower(s[i]) : char.ToUpper(s[i]);\n            }
    else {\n                r += s[i];\n            }\n        }\n        return string.IsNullOrEmpty(r)
    ? Reverse(s) : r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ss_5gxm.cs(27,42): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1659823360
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        if (s.Any(c => Char.IsLetter(c))) {\n
    \           return String.Concat(s.Select(c => Char.IsLetter(c) ? (Char.IsUpper(c)
    ? Char.ToLower(c) : Char.ToUpper(c)) : c));\n        } else {\n            return
    String.Concat(s.Reverse());\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823360
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        if (s.Length == 0) return \"\";\n        //
    TODO: Implementation of your Solution\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5078cbb5f3d9442bbc6bb3b4cfc37e75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5078cbb5f3d9442bbc6bb3b4cfc37e75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823360
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        if (!s.Any(c => char.IsLetter(c))) {\n
    \           return new string(s.Reverse().ToArray());\n        }\n        char[]
    result = new char[s.Length];\n        for (int i = 0; i < s.Length; i++) {\n            char
    c = s[i];\n            if (char.IsLetter(c)) {\n                if (char.IsUpper(c))
    {\n                    result[i] = char.ToLower(c);\n                } else {\n
    \                   result[i] = char.ToUpper(c);\n                }\n            }
    else {\n                result[i] = c;\n            }\n        }\n        return
    new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823360
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        // Your code goes here.\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e078faa27e714b4fb7a64e7e24c7f3a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e078faa27e714b4fb7a64e7e24c7f3a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823360
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        int n = s.Length;\n        if (n == 0)
    return s;\n        char[] t = new char[n];\n        int i = 0;\n        int j
    = n - 1;\n        while (i < j) {\n            if (char.IsLetter(s[i]) && char.IsLetter(s[j]))
    {\n                t[i] = char.IsUpper(s[i]) ? char.ToLower(s[i]) : char.ToUpper(s[i]);\n
    \               t[j] = char.IsUpper(s[j]) ? char.ToLower(s[j]) : char.ToUpper(s[j]);\n
    \               i++;\n                j--;\n            } else if (char.IsLetter(s[i]))
    {\n                t[i] = char.IsUpper(s[i]) ? char.ToLower(s[i]) : char.ToUpper(s[i]);\n
    \               t[j] = s[j];\n                i++;\n                j--;\n            }
    else if (char.IsLetter(s[j])) {\n                t[i] = s[i];\n                t[j]
    = char.IsUpper(s[j]) ? char.ToLower(s[j]) : char.ToUpper(s[j]);\n                i++;\n
    \               j--;\n            } else {\n                t[i] = s[i];\n                t[j]
    = s[j];\n                i++;\n                j--;\n            }\n        }\n
    \       if (i == j) {\n            t[i] = char.IsLetter(s[i]) ? char.IsUpper(s[i])
    ? char.ToLower(s[i]) : char.ToUpper(s[i]) : s[i];\n        }\n        return new
    string(t);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86329dd17c8e47f3957c43de5c0b3ed9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86329dd17c8e47f3957c43de5c0b3ed9>:0
    \n"
  stdout: ''
  timestamp: 1659823360
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        string str = \"\";\n        for (int
    i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i])) {\n                if
    (char.IsUpper(s[i])) {\n                    str += char.ToLower(s[i]);\n                }
    else {\n                    str += char.ToUpper(s[i]);\n                }\n            }
    else {\n                str += s[i];\n            }\n        }\n        return
    str;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc6cbe287b5c47ecab3b53a29e8a3e08>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc6cbe287b5c47ecab3b53a29e8a3e08>:0
    \n"
  stdout: ''
  timestamp: 1659823360
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        string answer = \"\";\n        int N
    = s.Length;\n        bool hasLetter = false;\n        for (int i = 0; i < N; i++)
    {\n            char c = s[i];\n            if (char.IsLetter(c)) {\n                c
    = char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c);\n                hasLetter
    = true;\n            }\n            answer += c;\n        }\n        if (!hasLetter)
    {\n            char[] arr = answer.ToCharArray();\n            Array.Reverse(arr);\n
    \           answer = new string(arr);\n        }\n        return answer;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823360
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        int start = 0;\n        while (start
    < s.Length && !char.IsLetter(s[start])) {\n            start++;\n        }\n        if
    (start == s.Length) {\n            return new string(s.Reverse().ToArray());\n
    \       }\n        bool lower = char.IsLower(s[start]);\n        char[] result
    = new char[s.Length];\n        for (int i = 0; i < s.Length; i++) {\n            if
    (char.IsLetter(s[i])) {\n                result[i] = lower ? char.ToLower(s[i])
    : char.ToUpper(s[i]);\n            } else {\n                result[i] = s[i];\n
    \           }\n        }\n        return new string(result);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <241e3873977e415bbb3ff02d1a4cb73c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <241e3873977e415bbb3ff02d1a4cb73c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823360
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        bool isLower = false;\n        bool isUpper
    = false;\n        for (int i = 0; i < s.Length; i++) {\n            if (char.IsLower(s[i]))
    {\n                isLower = true;\n            }\n            if (char.IsUpper(s[i]))
    {\n                isUpper = true;\n            }\n        }\n        if (isLower
    && isUpper) {\n            return s;\n        }\n        string result = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            if (char.IsLower(s[i]))
    {\n                result += char.ToUpper(s[i]);\n            } else if (char.IsUpper(s[i]))
    {\n                result += char.ToLower(s[i]);\n            } else {\n                result
    += s[i];\n            }\n        }\n        if (result == s) {\n            return
    new string(result.Reverse().ToArray());\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7c86d16313842ef822354b39efd84f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7c86d16313842ef822354b39efd84f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823360
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        // TODO: Implement your solution\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <62e9bdec854b44e18818becdd816b375>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <62e9bdec854b44e18818becdd816b375>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823360
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        if (s.Any(c => char.IsLetter(c))) {\n
    \           return string.Concat(s.Select(c => char.IsLetter(c) ? char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c) : c));\n        }\n        return string.Concat(s.Reverse());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823360
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        if (s.Any(char.IsLetter)) {\n            return
    new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c)
    : char.ToUpper(c) : c).ToArray());\n        } else {\n            return new string(s.Reverse().ToArray());\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823360
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        if (s.Length == 0) {\n            return
    \"\";\n        }\n\n        StringBuilder result = new StringBuilder();\n        for
    (int i = 0; i < s.Length; i++) {\n            var c = s[i];\n            var lower
    = (c >= 'a' && c <= 'z');\n            var upper = (c >= 'A' && c <= 'Z');\n            if
    (lower || upper) {\n                c = (char)(c ^ 32);\n            }\n            result.Append(c);\n
    \       }\n        return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51864b148c974c19ac07759ab74ab2aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51864b148c974c19ac07759ab74ab2aa>:0
    \n"
  stdout: ''
  timestamp: 1659823360
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        // if s has no letters, return the reversed
    string\n        if (!s.Any(c => char.IsLetter(c))) {\n            return new string(s.Reverse().ToArray());\n
    \       }\n        var sb = new StringBuilder();\n        foreach (var c in s)
    {\n            if (char.IsLetter(c)) {\n                sb.Append(char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c));\n            } else {\n                sb.Append(c);\n
    \           }\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823360
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        if (!s.Any(char.IsLetter)) {\n            return
    new string(s.Reverse().ToArray());\n        }\n        var sb = new StringBuilder();\n
    \       foreach (var c in s) {\n            if (char.IsLetter(c)) {\n                if
    (char.IsUpper(c)) {\n                    sb.Append(char.ToLower(c));\n                }
    else {\n                    sb.Append(char.ToUpper(c));\n                }\n            }
    else {\n                sb.Append(c);\n            }\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n
    \   Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n
    \   Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n
    \   Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n
    \   Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823360
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse
    its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n
    \   // If the string contains no letters, reverse the string.\n    // The function
    should return the resulted string.\n    // Examples\n    // solve(\"1234\") =
    \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public
    static string Solve(string s) {\n        // write your code here.\n        throw
    new NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Solve((\"AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\")));\n
    \   Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"#a@C\")).Equals((\"#A@c\")));\n
    \   Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"#aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n
    \   Debug.Assert(Solve((\"#$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <34e96959505c4369825e7abf05728586>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <34e96959505c4369825e7abf05728586>:0 \n"
  stdout: ''
  timestamp: 1659823360
