name: HumanEval_66_digitSum
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Task\n    // Write a function that takes a string as input and\
  \ returns the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
  \    // digitSum(\"\") => 0\n    // digitSum(\"abAB\") => 131\n    // digitSum(\"\
  abcCd\") => 67\n    // digitSum(\"helloE\") => 69\n    // digitSum(\"woArBld\")\
  \ => 131\n    // digitSum(\"aAaaaXa\") => 153\n    public static long Digitsum(string\
  \ s) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digitsum((\"\
  \")) == (0L));\n    Debug.Assert(Digitsum((\"abAB\")) == (131L));\n    Debug.Assert(Digitsum((\"\
  abcCd\")) == (67L));\n    Debug.Assert(Digitsum((\"helloE\")) == (69L));\n    Debug.Assert(Digitsum((\"\
  woArBld\")) == (131L));\n    Debug.Assert(Digitsum((\"aAaaaXa\")) == (153L));\n\
  \    Debug.Assert(Digitsum((\" How are yOu?\")) == (151L));\n    Debug.Assert(Digitsum((\"\
  You arE Very Smart\")) == (327L));\n    }\n\n}\n"
completions: ["        if (s == null) {\n            return 0;\n        }\n      \
    \  int result = 0;\n        foreach (char c in s) {\n            if (c >= 'A'\
    \ && c <= 'Z') {\n                result += (int)c;\n            }\n        }\n\
    \        return result;", "        long sum = 0;\n        if (s.Length == 0) {\n\
    \            return sum;\n        }\n        char[] charArr = s.ToCharArray();\n\
    \        foreach (char c in charArr) {\n            if (c > 64 && c < 91) {\n\
    \                sum += (long)c;\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        foreach (char c in s) {\n            if (c >= 'A'\
    \ && c <= 'Z') {\n                sum += c;\n            }\n        }\n      \
    \  return sum;", "        // Let's take the first example: \"abAB\"\n        //\
    \ Which returns the sum of ASCII codes: 131\n        // 1. Convert the string\
    \ to list of chars:\n        List<char> myList = s.ToList();\n        // 2. Convert\
    \ every character in the list to its ASCII code:\n        List<int> listOfASCII\
    \ = myList.ConvertAll(c => (int)c);\n        // 3. Set up a new list of ints,\
    \ which will contain values from other list only if they are\n        // ASCII\
    \ codes for uppercase letters:\n        List<int> allCapsASCIICodes = new List<int>();\n\
    \        // 4. Go through the list of ASCII codes and if the value is between\
    \ 65 and 90 (inclusive),\n        // add that value to the other list:\n     \
    \   foreach (int number in listOfASCII) {\n            if (number >= 65 && number\
    \ <= 90) {\n                allCapsASCIICodes.Add(number);\n            }\n  \
    \      }\n        // 5. Return the sum of all values from the list with all uppercase\
    \ ASCII codes:\n        return allCapsASCIICodes.Sum();", "        long result\
    \ = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (Char.IsUpper(s[i]))\n\
    \                result += (int)s[i];\n        }\n        return result;", " \
    \       // Your Code\n        return 0;", "        // start\n        if (s ==\
    \ \"\") {\n            return 0;\n        }\n        string uppers = s.ToUpper();\n\
    \        long sum = 0;\n        foreach (char c in uppers) {\n            sum\
    \ += (long)c;\n        }\n        return sum;\n        // end", '        return
    s.Sum(c => char.IsUpper(c) ? c : 0);', "        if (s == \"\") {\n           \
    \ return 0;\n        }\n        long sum = 0;\n        var array = s.ToCharArray();\n\
    \        for (int i = 0; i < array.Length; i++) {\n            if (char.IsUpper(array[i]))\
    \ {\n                sum += array[i];\n            }\n        }\n        return\
    \ sum;", "        // get uppercase letters in a list\n        var upperList =\
    \ s.Where(c => Char.IsUpper(c)).ToList();\n        //convert to a string\n   \
    \     var upperString = new string(upperList.ToArray());\n        // convert to\
    \ ascii\n        var sum = 0;\n        foreach (var letter in upperString) {\n\
    \            sum += (int)letter;\n        }\n        return sum;", "        long\
    \ sum = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (char.IsUpper(s[i]))\
    \ {\n                sum += (int)s[i];\n            }\n        }\n        return\
    \ sum;", "        return s.Sum(x => x >= 'A' && x <= 'Z' ? x : 0);", "       \
    \ long sum = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if\
    \ (s[i] >= 'A' && s[i] <= 'Z') {\n                sum += s[i];\n            }\n\
    \        }\n        return sum;", "        long sum = 0;\n        char[] arr =\
    \ s.ToCharArray();\n        for (int i = 0; i < arr.Length; i++) {\n         \
    \   if (arr[i] >= 65 && arr[i] <= 90) {\n                sum += arr[i];\n    \
    \        }\n        }\n        return sum;", "        long sum = 0;\n        for\
    \ (int i = 0; i < s.Length; i++) {\n            if ((s[i] >= 'A') && (s[i] <=\
    \ 'Z')) {\n                sum += s[i];\n            }\n        }\n        return\
    \ sum;", "        long sum = 0;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            char c = s[i];\n            if (c >= 'A' && c <= 'Z') {\n       \
    \         sum += (long)c;\n            }\n        }\n        return sum;", " \
    \       int sum = 0;\n        if (s.Length == 0) {\n            return sum;\n\
    \        }\n        foreach (char c in s) {\n            if (c >= 'A' && c <=\
    \ 'Z') {\n                sum += (int)c;\n            }\n        }\n        return\
    \ sum;", "        // Your code\n        // ...\n        //\n        // return\
    \ sum of ASCII code\n        //\n        long sum = 0;\n        foreach (char\
    \ c in s)\n        {\n            if (char.IsUpper(c))\n            {\n      \
    \          sum += (int)c;\n            }\n        }\n        return sum;", " \
    \       char[] arr = s.ToCharArray();\n        BigInteger result = 0;\n      \
    \  foreach (char c in arr) {\n            if (Char.IsUpper(c)) {\n           \
    \     result += c;\n            }\n        }\n        return result;", "     \
    \   if (s == null) return 0;\n        return s.Where(char.IsUpper).Sum(x => Convert.ToInt64(x));"]
stop_tokens:
- "\n    }\n"
