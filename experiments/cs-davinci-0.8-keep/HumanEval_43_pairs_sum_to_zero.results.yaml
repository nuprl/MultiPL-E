language: cs
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        foreach (long\
    \ item in l) {\n            if (l.IndexOf(-item) != -1 && l.IndexOf(-item) !=\
    \ l.IndexOf(item)) {\n                return true;\n            }\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))\
    \ == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        // Use a hash\
    \ table.\n        Dictionary<long, int> hash = new Dictionary<long, int>();\n\
    \        for (int i = 0; i < l.Count; i++) {\n            if (hash.ContainsKey(l[i]))\
    \ {\n                hash[l[i]]++;\n            } else {\n                hash[l[i]]\
    \ = 1;\n            }\n        }\n        for (int i = 0; i < l.Count; i++) {\n\
    \            if (hash.ContainsKey(-l[i])) {\n                if (l[i] == 0 &&\
    \ hash[l[i]] == 1) {\n                    continue;\n                }\n     \
    \           return true;\n            }\n        }\n        return false;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))\
    \ == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        bool hasZero =\
    \ false;\n        bool hasNonZero = false;\n        long zeroCount = 0;\n    \
    \    long nonZeroCount = 0;\n        foreach (long num in l) {\n            if\
    \ (num == 0) {\n                hasZero = true;\n                zeroCount++;\n\
    \            } else {\n                hasNonZero = true;\n                nonZeroCount++;\n\
    \            }\n        }\n        if (zeroCount >= 2) {\n            return true;\n\
    \        }\n        if (hasZero && hasNonZero) {\n            return true;\n \
    \       }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,\
    \ (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ebe3d5d9ea1c4bf7bd9cdba3814257ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ebe3d5d9ea1c4bf7bd9cdba3814257ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        // Your code here\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))\
    \ == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af0a02c1400541cc8b72c57a8b38bc1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af0a02c1400541cc8b72c57a8b38bc1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824145
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        throw new NotImplementedException();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))\
    \ == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <be4ef76a35f74aac87b8e4a217f118ab>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]\
    \ in <be4ef76a35f74aac87b8e4a217f118ab>:0 \n"
  stdout: ''
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        // TODO: Fill\
    \ in this function so that it returns the correct value.\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))\
    \ == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5384f107d16b4130a0457e4cb9770709>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5384f107d16b4130a0457e4cb9770709>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))\
    \ == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78358ba063324a47abf9d2855cf2be8c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78358ba063324a47abf9d2855cf2be8c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        // Write your\
    \ code here.\n        // If there are N numbers in the list, the time complexity\n\
    \        // of the algorithm should be O(N).\n        // If there are N numbers\
    \ in the list, the space complexity\n        // of the algorithm should be O(N).\n\
    \        Dictionary<long, long> memo = new Dictionary<long, long>();\n       \
    \ foreach (long i in l) {\n            if (memo.ContainsKey(i)) {\n          \
    \      memo[i]++;\n            } else {\n                memo[i] = 1;\n      \
    \      }\n        }\n        foreach (long key in memo.Keys) {\n            if\
    \ (memo.ContainsKey(-key)) {\n                if (key == 0 && memo[key] > 1) {\n\
    \                    return true;\n                } else if (key != 0) {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))\
    \ == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        int i = 0;\n \
    \       int j = l.Count - 1;\n        while (i < j) {\n            long sum =\
    \ l[i] + l[j];\n            if (sum == 0) return true;\n            if (sum <\
    \ 0) i++;\n            else j--;\n        }\n        return false;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))\
    \ == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <245da9ce5dee46e09ccca78315b19441>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <245da9ce5dee46e09ccca78315b19441>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        // we can solve\
    \ this problem in O(n log n) time by first sorting the\n        // list using\
    \ a comparison sort such as mergesort (which runs in\n        // O(n log n) time)\
    \ and then using two pointers (one pointing to the\n        // first element and\
    \ the other pointing to the last element) to\n        // iterate over the sorted\
    \ list in O(n) time.\n        //\n        // specifically, we first sort the list.\
    \ then, we initialize two\n        // pointers (one pointing to the first element\
    \ and the other\n        // pointing to the last element). then, we iterate as\
    \ long as there\n        // are at least two elements in the list.  if the sum\
    \ of the first\n        // and last elements is zero, we return True.  otherwise,\
    \ if the sum\n        // of the first and last elements is less than zero, we\
    \ increment\n        // the first pointer (to the right).  otherwise, we decrement\
    \ the\n        // last pointer (to the left).  this is a variant of the classic\n\
    \        // two-sum algorithm.\n        //\n        // the above algorithm will\
    \ run in O(n log n) time because the\n        // sorting step runs in O(n log\
    \ n) time, and the iteration over the\n        // sorted list runs in O(n) time.\n\
    \        //\n        // return True if there are two distinct elements in the\
    \ list that\n        // sum to zero, and False otherwise.\n        //\n      \
    \  // Since we do not have a sort function available to us, I am just\n      \
    \  // going to use the sort method from the List class.\n        l.Sort();\n \
    \       for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j\
    \ < l.Count; j++) {\n                if (l[i] + l[j] == 0) {\n               \
    \     return true;\n                }\n            }\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))\
    \ == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824145
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        throw new NotImplementedException();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))\
    \ == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <be4ef76a35f74aac87b8e4a217f118ab>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]\
    \ in <be4ef76a35f74aac87b8e4a217f118ab>:0 \n"
  stdout: ''
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        int n = l.Count;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                if (l[i] + l[j] == 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))\
    \ == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        long[] lArray\
    \ = l.ToArray();\n        for (int i = 0; i < lArray.Length; i++) {\n        \
    \    for (int j = i+1; j < lArray.Length; j++) {\n                if (lArray[i]\
    \ + lArray[j] == 0) {\n                    return true;\n                }\n \
    \           }\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,\
    \ (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        // Your code goes\
    \ here.\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))\
    \ == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8562a810259f4a67960c3f852c1131a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8562a810259f4a67960c3f852c1131a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        // run your function\
    \ through some test cases here\n        // remember: debugging is half the battle!\n\
    \        // throw new NotImplementedException();\n        if (l.Count == 0) return\
    \ false;\n        if (l.Count == 1) return false;\n        var hash = new HashSet<long>();\n\
    \        foreach (var item in l) {\n            if (hash.Contains(-item)) return\
    \ true;\n            hash.Add(item);\n        }\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))\
    \ == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        HashSet<long>\
    \ h = new HashSet<long>();\n        foreach (long i in l) {\n            if (h.Contains(-i))\
    \ {\n                return true;\n            }\n            h.Add(i);\n    \
    \    }\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))\
    \ == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        for (int i = 0;\
    \ i < l.Count(); i++) {\n            for (int j = i + 1; j < l.Count(); j++) {\n\
    \                if (l[i] + l[j] == 0) {\n                    return true;\n \
    \               }\n            }\n        }\n        return false;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))\
    \ == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824145
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        // we can think\
    \ of the problem as follow, we have a set of numbers and we want to find if the\
    \ sum of two of them gives 0\n        // the first idea that we can have is to\
    \ iterate over all the numbers and check if the negative of that number is in\
    \ the list\n        // the problem is that we can have -1 and 1 and we can get\
    \ a false positive\n        // so if there is a better way we can solve this problem\n\
    \        // let's think about this problem as a set of graphs\n        // we have\
    \ a node for each number, and we have to find if there is a cycle\n        //\
    \ so there is a cycle if we have a sequence of numbers that sum up to 0\n    \
    \    // the first idea that comes in mind is a greedy approach, we can keep a\
    \ variable of the current sum, and we iterate over the numbers\n        // adding\
    \ them up, and when the sum is 0 we return true\n        // this approach can't\
    \ work because we can have a sequence like [2, 3, -5, 8] and we would return true\
    \ when the sum is -5, but\n        // if we add the 8, the sum will give 0.\n\
    \        // so this approach is a bit complicated but we have to check the sequence\
    \ of numbers, if we have a sequence of numbers that gives\n        // us 0 we\
    \ return true, otherwise, we return false\n        // so we keep a dictionary\
    \ where we keep the number and the index of it, we iterate over the array and\
    \ add the numbers to the dict\n        // and we keep checking if the negative\
    \ of the current number exists in the dict, if it exists we check the indexes,\
    \ if the index of the\n        // current number is the index of the negative\
    \ of the number we continue, if the index of the current number is less than the\
    \ index of the negative\n        // of the number, we break, if it is greater,\
    \ we return true\n        // the complexity of this algorithm is O(n) where n\
    \ is the length of the array, we iterate over the array once, and the index of\
    \ the negative number\n        // can be found in O(1) if we keep the number and\
    \ the index in a dictionary\n        Dictionary<long, int> d = new Dictionary<long,\
    \ int>();\n        for (int i = 0; i < l.Count; i++) {\n            long currentNumber\
    \ =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))\
    \ == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpicbyj2cm.cs(44,33): error CS1525: Invalid expression term ''}''

    /tmp/tmpicbyj2cm.cs(44,33): error CS1002: ; expected

    /tmp/tmpicbyj2cm.cs(46,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpicbyj2cm.cs(58,2): error CS1513: } expected

    '
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        if (l.Count ==\
    \ 0) {\n            return false;\n        }\n        Dictionary<long, long> counts\
    \ = new Dictionary<long, long>();\n        foreach (long element in l) {\n   \
    \         if (counts.ContainsKey(element)) {\n                counts[element]++;\n\
    \            } else {\n                counts[element] = 1;\n            }\n \
    \       }\n        foreach (long key in counts.Keys) {\n            if (counts.ContainsKey(-key))\
    \ {\n                if (key == 0 && counts[key] == 1) {\n                   \
    \ continue;\n                }\n                return true;\n            }\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,\
    \ (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
    \    // it returns True if there are two distinct elements in the list that\n\
    \    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3,\
    \ 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
    \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
    \    public static bool PairsSumToZero(List<long> l) {\n        long size = l.Count;\n\
    \        for (long i = 0; i < size; i++) {\n            for (long j = i + 1; j\
    \ < size; j++) {\n                if (l[(int)i] + l[(int)j] == 0) {\n        \
    \            return true;\n                }\n            }\n        }\n     \
    \   return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n\
    \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))\
    \ == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))\
    \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
    \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
    \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824145
