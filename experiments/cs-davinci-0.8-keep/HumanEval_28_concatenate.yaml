name: HumanEval_28_concatenate
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Concatenate list of strings into a single string\n    // >>>\
  \ concatenate([])\n    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n\
  \    public static string Concatenate(List<string> strings) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Concatenate((new\
  \ List<string>())).Equals((\"\")));\n    Debug.Assert(Concatenate((new List<string>(new\
  \ string[]{(string)\"x\", (string)\"y\", (string)\"z\"}))).Equals((\"xyz\")));\n\
  \    Debug.Assert(Concatenate((new List<string>(new string[]{(string)\"x\", (string)\"\
  y\", (string)\"z\", (string)\"w\", (string)\"k\"}))).Equals((\"xyzwk\")));\n   \
  \ }\n\n}\n"
completions: ["        StringBuilder stringBuilder = new StringBuilder();\n      \
    \  foreach (string s in strings) {\n            stringBuilder.Append(s);\n   \
    \     }\n        return stringBuilder.ToString();", '        return strings.Aggregate(new
    StringBuilder(), (builder, s) => builder.Append(s)).ToString();', "        var\
    \ strBuilder = new StringBuilder();\n        foreach (var s in strings) {\n  \
    \          strBuilder.Append(s);\n        }\n        return strBuilder.ToString();",
  "        var result = new StringBuilder();\n        foreach (var s in strings) {\n\
    \            result.Append(s);\n        }\n        return result.ToString();",
  "        StringBuilder sb = new StringBuilder();\n        foreach (string s in strings)\n\
    \            sb.Append(s);\n        return sb.ToString();", '        return string.Concat(strings);',
  '        return string.Concat(strings);', "        var sb = new StringBuilder();\n\
    \        foreach (var s in strings) {\n            sb.Append(s);\n        }\n\
    \        return sb.ToString();", "        var builder = new StringBuilder();\n\
    \        foreach (var string_ in strings) {\n            builder.Append(string_);\n\
    \        }\n        return builder.ToString();", "        StringBuilder sb = new\
    \ StringBuilder();\n        foreach (string s in strings) {\n            sb.Append(s);\n\
    \        }\n        return sb.ToString();", '        return strings.Aggregate(new
    StringBuilder(), (acc, s) => acc.Append(s)).ToString();', '        return string.Concat(strings);',
  '        return strings.Aggregate((acc, x) => acc + x);', "        StringBuilder\
    \ sb = new StringBuilder();\n        foreach (string s in strings) {\n       \
    \     sb.Append(s);\n        }\n        return sb.ToString();", "        string\
    \ result = \"\";\n        foreach (string s in strings) {\n            result\
    \ += s;\n        }\n        return result;", "        string result = \"\";\n\
    \        foreach (string s in strings) {\n            result += s;\n        }\n\
    \        return result;", "        string s = \"\";\n        foreach (string t\
    \ in strings) {\n            s += t;\n        }\n        return s;", "       \
    \ var sb = new StringBuilder();\n        foreach (var s in strings) {\n      \
    \      sb.Append(s);\n        }\n        return sb.ToString();", '        return
    strings.Aggregate(new StringBuilder(), (sb, s) => sb.Append(s)).ToString();',
  '        return String.Concat(strings);']
stop_tokens:
- "\n    }\n"
