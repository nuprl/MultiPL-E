language: cs
name: HumanEval_133_sum_squares
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57bfb11983bb45ae894ea76d0c886e3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57bfb11983bb45ae894ea76d0c886e3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        long result = 0;\n        for
    (int i = 0; i < lst.Count; i++) {\n            result += (long)Math.Ceiling(lst[i])
    * (long)Math.Ceiling(lst[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <f540ab0d1e95438a8ce9db8d981d31b3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <f540ab0d1e95438a8ce9db8d981d31b3>:0 \n"
  stdout: ''
  timestamp: 1659824266
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <f540ab0d1e95438a8ce9db8d981d31b3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <f540ab0d1e95438a8ce9db8d981d31b3>:0 \n"
  stdout: ''
  timestamp: 1659824266
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        long sum = 0;\n        for
    (int i = 0; i < lst.Count; i++) {\n            lst[i] = (float)Math.Ceiling(lst[i]);\n
    \           sum += (long)Math.Pow(lst[i], 2);\n        }\n        return sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        return lst.Sum(x => (long)
    Math.Ceiling(x * x));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ded9d44c95f404d827fe7c7556a7257>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ded9d44c95f404d827fe7c7556a7257>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        lst = lst.Select(i => (float)Math.Ceiling(i)).ToList();\n
    \       long result = 0;\n        foreach (var el in lst) {\n            result
    += (long)Math.Pow(el, 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        long sum = 0;\n        for
    (int i = 0; i < lst.Count; i++) {\n            sum += (long)Math.Ceiling(lst[i])
    * (long)Math.Ceiling(lst[i]);\n        }\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        return lst.Select(x => Convert.ToInt64(Math.Ceiling(x)))\n
    \                 .Select(x => x * x)\n                  .Sum();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <f540ab0d1e95438a8ce9db8d981d31b3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <f540ab0d1e95438a8ce9db8d981d31b3>:0 \n"
  stdout: ''
  timestamp: 1659824266
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <f540ab0d1e95438a8ce9db8d981d31b3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <f540ab0d1e95438a8ce9db8d981d31b3>:0 \n"
  stdout: ''
  timestamp: 1659824266
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        return lst.Sum(x => (long)Math.Ceiling(x)
    * (long)Math.Ceiling(x));\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        return lst.Sum(x => (long)Math.Ceiling(x)
    * (long)Math.Ceiling(x));\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        long sum = 0;\n        // todo..\n
    \       // add your code here and remove the below exception.\n        return
    sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce0a533527ce4dc2a19bda15cfbfff72>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce0a533527ce4dc2a19bda15cfbfff72>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        if (lst.Count == 0) {\n            return
    0;\n        }\n        long sum = 0;\n        for (int i = 0; i < lst.Count; i++)
    {\n            sum += Convert.ToInt64(Math.Ceiling(lst[i])) * Convert.ToInt64(Math.Ceiling(lst[i]));\n
    \       }\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        long sum = 0;\n        foreach
    (float item in lst) {\n            // Math.Round(double, int, MidpointRounding)\n
    \           // Math.Ceiling(double)\n            sum += (long)Math.Pow(Math.Ceiling(item),
    2);\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        // Write your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f26f4a5b63594e148137828e7d00b633>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f26f4a5b63594e148137828e7d00b633>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        long answer = 0;\n        for
    (int i = 0; i < lst.Count; i++) {\n            answer += (long)Math.Ceiling(lst[i])
    * (long)Math.Ceiling(lst[i]);\n        }\n        return answer;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        return lst.Select(x => (long)
    Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3]
    the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    //
    For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the
    output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public
    static long SumSquares(List<float> lst) {\n        // Your code here.\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5dd66c3f4b0640618efde16d4baff5b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5dd66c3f4b0640618efde16d4baff5b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824267
