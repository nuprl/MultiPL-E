name: HumanEval_145_order_by_points
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function which sorts the given list of integers\n  \
  \  // in ascending order according to the sum of their digits.\n    // Note: if\
  \ there are several items with similar sum of their digits,\n    // order them based\
  \ on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
  \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([]) ==\
  \ []\n    public static List<long> OrderByPoints(List<long> nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
  \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
  \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
  \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
  \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
  \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
  \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
  \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
  \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
  \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
  \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
  \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,\
  \ (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
  \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,\
  \ (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
  \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,\
  \ (long)6L}))));\n    }\n\n}\n"
completions: ['        return nums;', "        // Write your code here\n        throw\
    \ new NotImplementedException();", "        Dictionary<long, Tuple<long, long>>\
    \ map = new Dictionary<long, Tuple<long, long>>();\n        for (int i = 0; i\
    \ < nums.Count; i++) {\n            long sum = 0;\n            foreach (char c\
    \ in nums[i].ToString()) {\n                sum += (long)Char.GetNumericValue(c);\n\
    \            }\n            if (!map.ContainsKey(sum)) {\n                map.Add(sum,\
    \ new Tuple<long, long>(nums[i], i));\n            } else {\n                if\
    \ (map[sum].Item2 > i) {\n                    map[sum] = new Tuple<long, long>(nums[i],\
    \ i);\n                }\n            }\n        }\n        var ret = new List<long>();\n\
    \        foreach (var item in map.OrderBy(pair => pair.Key)) {\n            ret.Add(item.Value.Item1);\n\
    \        }\n        return ret;", "        Dictionary<int, List<long>> digits\
    \ = new Dictionary<int, List<long>>();\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            int sum = nums[i].ToString().Select(x => int.Parse(x.ToString())).Sum();\n\
    \            if (!digits.ContainsKey(sum)) {\n                digits[sum] = new\
    \ List<long>();\n            }\n            digits[sum].Add(nums[i]);\n      \
    \  }\n        List<long> result = new List<long>();\n        for (int i = 0; i\
    \ < nums.Count; i++) {\n            if (i == 0) {\n                foreach (var\
    \ item in digits) {\n                    result.AddRange(item.Value);\n      \
    \          }\n            } else {\n                var list = digits.OrderBy(x\
    \ => x.Key).First();\n                result.Add(list.Value[0]);\n           \
    \     list.Value.RemoveAt(0);\n                if (list.Value.Count == 0) {\n\
    \                    digits.Remove(list.Key);\n                }\n           \
    \ }\n        }\n        return result;", '        return nums.OrderBy(x => x <
    0 ? -x : x).ThenBy(x => x).ToList();', "        List<long> result = new List<long>();\n\
    \        var ordered_nums = nums.OrderBy(x => x.ToString().Select(y => long.Parse(y.ToString())).Sum());\n\
    \        foreach (var num in ordered_nums)\n        {\n            result.Add(num);\n\
    \        }\n        return result;", "        var len = nums.Count;\n        if\
    \ (len == 0) {\n            return nums;\n        }\n        var result = new\
    \ List<long>(nums);\n        var dict = new Dictionary<long, List<long>>();\n\
    \        for (int i = 0; i < len; i++) {\n            var temp = nums[i];\n  \
    \          long sum = 0;\n            while (temp != 0) {\n                sum\
    \ += temp % 10;\n                temp /= 10;\n            }\n            if (!dict.ContainsKey(sum))\
    \ {\n                dict[sum] = new List<long>();\n            }\n          \
    \  dict[sum].Add(nums[i]);\n        }\n        dict = dict.OrderBy(x => x.Key).ToDictionary(x\
    \ => x.Key, x => x.Value);\n        int index = 0;\n        foreach (var item\
    \ in dict) {\n            foreach (var i in item.Value) {\n                result[index]\
    \ = i;\n                index++;\n            }\n        }\n        return result;",
  '        throw new NotImplementedException();', "        var count = new Dictionary<long,\
    \ long>();\n        for (int i = 0; i < nums.Count; i++) {\n            count[nums[i]]\
    \ = SumDigits(nums[i]);\n        }\n        nums.Sort((a, b) => {\n          \
    \  int cmp = count[a].CompareTo(count[b]);\n            if (cmp != 0) {\n    \
    \            return cmp;\n            }\n            return a.CompareTo(b);\n\
    \        });\n        return nums;", "        return nums.OrderBy(n => (n > 0\
    \ ? n : -n).ToString().Sum(d => d - '0')).ThenBy(n => nums.IndexOf(n)).ToList();",
  '        return null;', '        return nums.OrderBy(n => n.ToString().Select(s
    => (long)Char.GetNumericValue(s)).Sum()).ThenBy(n => nums.IndexOf(n)).ToList();',
  "        return nums.Select((x,i) => new { X = x, I = i, Digits = Math.Abs(x).ToString().Sum(ch\
    \ => ch - '0') })\n            .OrderBy(x => x.Digits).ThenBy(x => x.I).Select(x\
    \ => x.X).ToList();", "        Dictionary<long, long> sums = new Dictionary<long,\
    \ long>();\n        foreach (long n in nums) {\n            long sum = 0;\n  \
    \          foreach (char c in n.ToString()) {\n                sum += int.Parse(c.ToString());\n\
    \            }\n            sums[n] = sum;\n        }\n        List<long> result\
    \ = new List<long>();\n        result.AddRange(sums.OrderBy(x => x.Value).ThenBy(x\
    \ => nums.IndexOf(x.Key)).Select(x => x.Key));\n        return result;", "   \
    \     // Find sum of digits for each number and add it to a dictionary\n     \
    \   // as a key and list of indexes as a value.\n        // Then create a list\
    \ of keys from the dictionary and sort it\n        // in ascending order. After\
    \ that, iterate through keys\n        // and indexes and add numbers to the result\
    \ list.\n        Dictionary<long, List<int>> sumOfDigits = new Dictionary<long,\
    \ List<int>>();\n        long sum = 0;\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            sum = SumOfDigits(nums[i]);\n            if (sumOfDigits.ContainsKey(sum))\
    \ {\n                sumOfDigits[sum].Add(i);\n            } else {\n        \
    \        sumOfDigits.Add(sum, new List<int>() { i });\n            }\n       \
    \ }\n        List<long> sortedKeys = sumOfDigits.Keys.ToList();\n        sortedKeys.Sort();\n\
    \        List<long> result = new List<long>();\n        foreach (long key in sortedKeys)\
    \ {\n            foreach (int index in sumOfDigits[key]) {\n                result.Add(nums[index]);\n\
    \            }\n        }\n        return result;", "        // Implementation\n\
    \        var tmp = new Tuple<long, int>[nums.Count];\n        for (int i = 0;\
    \ i < nums.Count; i++) {\n            tmp[i] = new Tuple<long, int>(nums[i], i);\n\
    \        }\n        Array.Sort(tmp, (a, b) => {\n            var da = SumDigits(a.Item1);\n\
    \            var db = SumDigits(b.Item1);\n            if (da == db) {\n     \
    \           return a.Item2.CompareTo(b.Item2);\n            }\n            return\
    \ da.CompareTo(db);\n        });\n        var res = new List<long>();\n      \
    \  for (int i = 0; i < nums.Count; i++) {\n            res.Add(tmp[i].Item1);\n\
    \        }\n        return res;", "        // for each number, add up all the\
    \ digits\n        // sort the numbers by the sum of digits\n\n        return nums;",
  "        var res = new List<long>();\n        while (nums.Count != 0) {\n      \
    \      var x = nums.Min(num => SumDigits(num));\n            var minNums = nums.Where(num\
    \ => SumDigits(num) == x).ToList();\n            res.AddRange(minNums);\n    \
    \        nums.RemoveAll(num => minNums.Contains(num));\n        }\n        return\
    \ res;", "        // replace 1,1 with your code\n        List<long> res = new\
    \ List<long>();\n        int idx = 0;\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            int sum = 0;\n            foreach (var c in nums[i].ToString())\
    \ {\n                sum += int.Parse(c.ToString());\n            }\n        \
    \    res.Add(sum + 10 * i);\n        }\n        res.Sort();\n        for (int\
    \ i = 0; i < res.Count; i++) {\n            res[i] = nums[res[i] / 10];\n    \
    \    }\n        return res;", "        Dictionary<long, long> sums = new Dictionary<long,\
    \ long>();\n        foreach (long num in nums) {\n            long sum = 0;\n\
    \            while (num != 0) {\n                sum += num % 10;\n          \
    \      num /= 10;\n            }\n            sums[sum] = 1;\n        }\n    \
    \    return sums.Keys.ToList();"]
stop_tokens:
- "\n    }\n"
