name: HumanEval_98_count_upper
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string s, count the number of uppercase vowels in even\
  \ indices.\n    // For example:\n    // count_upper('aBCdEf') returns 1\n    //\
  \ count_upper('abcdefg') returns 0\n    // count_upper('dBBE') returns 0\n    public\
  \ static long CountUpper(string s) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountUpper((\"\
  aBCdEf\")) == (1L));\n    Debug.Assert(CountUpper((\"abcdefg\")) == (0L));\n   \
  \ Debug.Assert(CountUpper((\"dBBE\")) == (0L));\n    Debug.Assert(CountUpper((\"\
  B\")) == (0L));\n    Debug.Assert(CountUpper((\"U\")) == (1L));\n    Debug.Assert(CountUpper((\"\
  \")) == (0L));\n    Debug.Assert(CountUpper((\"EEEE\")) == (2L));\n    }\n\n}\n"
completions: ["        // First, find the uppercase vowels.\n        // We'll do this\
    \ by saving the upper vowels in a List, then converting\n        // the List to\
    \ an array.\n        List<char> upper_vowels = new List<char>();\n        foreach\
    \ (char c in s) {\n            if (char.IsUpper(c) && \"AEIOU\".Contains(c)) {\n\
    \                upper_vowels.Add(c);\n            }\n        }\n        char[]\
    \ upper_vowels_array = upper_vowels.ToArray();\n\n        // Now, count the vowels\
    \ in even positions.\n        long count = 0;\n        for (int i = 0; i < upper_vowels_array.Length;\
    \ i += 2) {\n            count++;\n        }\n        return count;", "      \
    \  var count = 0;\n        var vowels = new HashSet<char> { 'A', 'E', 'I', 'O',\
    \ 'U' };\n        for (var i = 0; i < s.Length; i++) {\n            if (i % 2\
    \ == 0 && vowels.Contains(s[i])) {\n                count++;\n            }\n\
    \        }\n        return count;", "        return s.Where((val, index) => index\
    \ % 2 == 0 && val >= 'A' && val <= 'Z').Count();", '        return 0;', "    \
    \    var lower = s.ToLower();\n        var upper = s.ToUpper();\n        var count\
    \ = 0;\n        for (var i = 0; i < s.Length; i++) {\n            if (s[i] ==\
    \ upper[i] && \"aeiou\".Contains(lower[i])) {\n                count++;\n    \
    \        }\n        }\n        return count;", '        return s.Where((c, i)
    => i % 2 == 0 && "AEIOU".Contains(c)).Count();', "        // TODO: Implement this\n\
    \        return 0;", '        return 0;', '        return 0;', "        return\
    \ s.Where((x, i) => i % 2 == 0 && (x == 'A' || x == 'E' || x == 'I' || x == 'O'\
    \ || x == 'U')).Count();", '        throw new NotImplementedException();', '        return
    0;', "        long ans = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n\
    \            if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U') {\n                ans++;\n            }\n        }\n        return\
    \ ans;", "        int result = 0;\n        for (int i = 0; i < s.Length; i +=\
    \ 2) {\n            if (isVowel(s[i]) && isUpper(s[i]))\n                result++;\n\
    \        }\n        return result;", "        // Fill this in.\n        // return\
    \ 0;\n        long n = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n \
    \           if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U') {\n                n++;\n            }\n        }\n        return n;",
  "        long ans = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n      \
    \      if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] ==\
    \ 'U') {\n                ans++;\n            }\n        }\n        return ans;",
  "        long count = 0;\n        // TODO: Fill this in\n        return count;",
  "        long count = 0;\n        for (int i = 0; i < s.Length; i++) {\n       \
    \     if (i % 2 == 0 && IsUpper(s[i])) {\n                count++;\n         \
    \   }\n        }\n        return count;", '        return s.Where((c, i) => i
    % 2 == 0 && "AEIOU".Contains(c)).Count();', '        return s.Where((c, i) =>
    i % 2 == 0 && "AEIOU".Contains(c)).Count();']
stop_tokens:
- "\n    }\n"
