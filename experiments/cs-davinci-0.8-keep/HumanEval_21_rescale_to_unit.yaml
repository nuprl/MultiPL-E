name: HumanEval_21_rescale_to_unit
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given list of numbers (of at least two elements), apply a linear\
  \ transform to that list,\n    // such that the smallest number will become 0 and\
  \ the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
  \    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static List<float> RescaleToUnit(List<float>\
  \ numbers) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RescaleToUnit((new\
  \ List<float>(new float[]{(float)2.0f, (float)49.9f}))).Equals((new List<float>(new\
  \ float[]{(float)0.0f, (float)1.0f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new\
  \ float[]{(float)100.0f, (float)49.9f}))).Equals((new List<float>(new float[]{(float)1.0f,\
  \ (float)0.0f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)1.0f,\
  \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))).Equals((new List<float>(new\
  \ float[]{(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))));\n\
  \    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)2.0f, (float)1.0f,\
  \ (float)5.0f, (float)3.0f, (float)4.0f}))).Equals((new List<float>(new float[]{(float)0.25f,\
  \ (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f}))));\n    Debug.Assert(RescaleToUnit((new\
  \ List<float>(new float[]{(float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
  \ (float)14.0f}))).Equals((new List<float>(new float[]{(float)0.25f, (float)0.0f,\
  \ (float)1.0f, (float)0.5f, (float)0.75f}))));\n    }\n\n}\n"
completions: ["        var min = numbers.Min();\n        var max = numbers.Max();\n\
    \        return numbers.Select(n => (n - min) / (max - min)).ToList();", "   \
    \     float min = numbers.Min();\n        float max = numbers.Max();\n       \
    \ float d = max - min;\n        for (int i = 0; i < numbers.Count; i++) {\n  \
    \          numbers[i] = (numbers[i] - min) / d;\n        }\n        return numbers;",
  "        float hi = numbers.Max();\n        float lo = numbers.Min();\n        List<float>\
    \ new_numbers = new List<float>();\n        foreach (float x in numbers) {\n \
    \           new_numbers.Add((x - lo) / (hi - lo));\n        }\n        return\
    \ new_numbers;", "        float max = numbers.Max();\n        float min = numbers.Min();\n\
    \        float scale = max - min;\n        return numbers.Select(x => (x - min)\
    \ / scale).ToList();", "        float largest_number = numbers.Max();\n      \
    \  float smallest_number = numbers.Min();\n        // TODO: implement\n      \
    \  List<float> results = new List<float>();\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            results.Add((numbers[i] - smallest_number) / (largest_number\
    \ - smallest_number));\n        }\n        return results;", "        float max\
    \ = numbers.Max();\n        float min = numbers.Min();\n        float scale =\
    \ max - min;\n        return numbers.Select(x => (x - min) / scale).ToList();",
  "        var min = numbers.Min();\n        var max = numbers.Max();\n        var\
    \ range = max - min;\n        return numbers.Select(x => (x - min) / range).ToList();",
  "        float min = numbers.Min();\n        float max = numbers.Max();\n      \
    \  float diff = max - min;\n        return numbers.Select(x => (x - min) / diff).ToList();",
  "        float min = numbers.Min();\n        float max = numbers.Max();\n      \
    \  float range = max - min;\n        if (range < 0.00001) {\n            return\
    \ numbers.Select(e => 0.5f).ToList();\n        }\n        return numbers.Select(e\
    \ => (e - min) / range).ToList();", "        List<float> ret = new List<float>();\n\
    \        float min_number = numbers.Min();\n        float max_number = numbers.Max();\n\
    \        float range = max_number - min_number;\n        if (range == 0.0) {\n\
    \            foreach (float number in numbers) {\n                ret.Add(1.0f);\n\
    \            }\n        } else {\n            foreach (float number in numbers)\
    \ {\n                ret.Add((number - min_number) / range);\n            }\n\
    \        }\n        return ret;", "        float min = numbers.Min();\n      \
    \  float max = numbers.Max();\n        float scale = max - min;\n        float\
    \ offset = min;\n        var result = new List<float>();\n        foreach (float\
    \ number in numbers) {\n            result.Add((number - offset) / scale);\n \
    \       }\n        return result;", "        if (numbers.Count < 2)\n        \
    \    throw new ArgumentException(\"Given list should have at least two elements\"\
    );\n        float minValue = numbers.Min();\n        float maxValue = numbers.Max();\n\
    \        if (minValue == maxValue)\n            throw new ArgumentException(\"\
    Given list contains all equal numbers\");\n        return numbers.Select(\n  \
    \          x => (x - minValue) / (maxValue - minValue)\n        ).ToList();",
  "        var max = numbers.Max();\n        var min = numbers.Min();\n        if\
    \ (max - min == 0) {\n            return numbers;\n        }\n        var result\
    \ = new List<float>();\n        foreach (var n in numbers) {\n            result.Add((n\
    \ - min) / (max - min));\n        }\n        return result;", "        float _min\
    \ = numbers.Min();\n        float _max = numbers.Max();\n        List<float> result\
    \ = new List<float>();\n        for (int i = 0; i < numbers.Count; i++) {\n  \
    \          result.Add((numbers[i] - _min) / (_max - _min));\n        }\n     \
    \   return result;", "        List<float> results = new List<float>();\n     \
    \   float min = numbers.Min();\n        float max = numbers.Max();\n        for\
    \ (int i = 0; i < numbers.Count; i++) {\n            results.Add((numbers[i] -\
    \ min) / (max - min));\n        }\n        return results;", "        float min_n\
    \ = numbers.Min();\n        float max_n = numbers.Max();\n        for (int i =\
    \ 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min_n)\
    \ / (max_n - min_n);\n        }\n        return numbers;", "        float min\
    \ = numbers.Min();\n        float max = numbers.Max();\n        float span = max\
    \ - min;\n        List<float> newNums = new List<float>();\n        foreach (float\
    \ num in numbers) {\n            newNums.Add((num - min) / span);\n        }\n\
    \        return newNums;", "        List<float> res = new List<float>();\n   \
    \     float max = numbers.Max();\n        float min = numbers.Min();\n       \
    \ for (int i = 0; i < numbers.Count; i++) {\n            res.Add((numbers[i] -\
    \ min) / (max - min));\n        }\n        return res;", "        float highest\
    \ = numbers.Max();\n        float lowest = numbers.Min();\n        var ret = new\
    \ List<float>();\n        foreach (var n in numbers) {\n            ret.Add((n\
    \ - lowest) / (highest - lowest));\n        }\n        return ret;", "       \
    \ var n = numbers.Count;\n        // find the smallest and largest\n        var\
    \ minn = numbers.Min();\n        var maxx = numbers.Max();\n        // scale everything\
    \ into 0..1\n        var result = new List<float>();\n        foreach (var x in\
    \ numbers) {\n            result.Add((x - minn) / (maxx - minn));\n        }\n\
    \        return result;"]
stop_tokens:
- "\n    }\n"
