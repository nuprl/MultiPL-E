name: HumanEval_49_modp
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp(3,\
  \ 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0, 101)\n\
  \    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n    // 1\n\
  \    public static long Modp(long n, long p) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Modp((3L),\
  \ (5L)) == (3L));\n    Debug.Assert(Modp((1101L), (101L)) == (2L));\n    Debug.Assert(Modp((0L),\
  \ (101L)) == (1L));\n    Debug.Assert(Modp((3L), (11L)) == (8L));\n    Debug.Assert(Modp((100L),\
  \ (101L)) == (1L));\n    Debug.Assert(Modp((30L), (5L)) == (4L));\n    Debug.Assert(Modp((31L),\
  \ (5L)) == (3L));\n    }\n\n}\n"
completions: ["        if (n == 0) return 1;\n        if (n % 2 == 0) return Modp(n\
    \ / 2, p) * Modp(n / 2, p) % p;\n        return n * Modp(n - 1, p) % p;", "  \
    \      Debug.Assert(n >= 0);\n        Debug.Assert(p >= 2);\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        var ret = Modp(n / 2, p);\n\
    \        ret = (ret * ret) % p;\n        if (n % 2 == 1) {\n            ret =\
    \ (ret * 2) % p;\n        }\n        return ret;", "        Debug.Assert(n >=\
    \ 0);\n        Debug.Assert(p >= 2);\n        Debug.Assert(p < 1 << 32);\n   \
    \     long r = 1;\n        while (n > 0) {\n            if ((n & 1) != 0)\n  \
    \              r = (r * 2) % p;\n            n >>= 1;\n        }\n        return\
    \ r;", "        BigInteger m = 1;\n        while (n > 0) {\n            if ((n\
    \ & 1) != 0) {\n                m = (m * 2) % p;\n            }\n            n\
    \ >>= 1;\n        }\n        return (long)m;", "        long ans = 1;\n      \
    \  while (n > 0) {\n            if ((n & 1) > 0) {\n                ans = (ans\
    \ * 2) % p;\n            }\n            n >>= 1;\n        }\n        return ans;",
  "        if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0)\
    \ {\n            return Modp(n / 2, p) * Modp(n / 2, p) % p;\n        }\n    \
    \    return Modp(n - 1, p) * Modp(1, p) % p;", "        long res = 1;\n      \
    \  while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res\
    \ * n) % p;\n            }\n            n = n >> 1;\n            n = (n * n) %\
    \ p;\n        }\n        return res;", "        var ret = BigInteger.ModPow(2,\
    \ n, p);\n        return (long)ret;", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        long tmp = Modp(n / 2, p);\n        return (tmp * tmp\
    \ * (n % 2 == 0 ? 1 : n)) % p;", "        if (n == 0) {\n            return 1;\n\
    \        }\n        if (n == 1) {\n            return n;\n        }\n        if\
    \ (n % 2 == 0) {\n            return Modp(n / 2, p) * Modp(n / 2, p) % p;\n  \
    \      }\n        return Modp(n / 2, p) * Modp(n / 2, p) * n % p;", "        if\
    \ (n < 0)\n            return Modp(n + p, p);\n        if (n == 0)\n         \
    \   return 1;\n        if (n == 1)\n            return n;\n        if (n % 2 ==\
    \ 0)\n            return (Modp(n / 2, p) * Modp(n / 2, p)) % p;\n        return\
    \ (Modp(n / 2, p) * Modp(n / 2, p) * n) % p;", "        long pow = n;\n      \
    \  long result = 1;\n        while (pow > 0) {\n            if ((pow & 1) == 1)\n\
    \                result = (result * n) % p;\n            n = (n * n) % p;\n  \
    \          pow >>= 1;\n        }\n        return result;", "        if (n == 0)\
    \ return 1;\n        if (n == 1) return n;\n        var m = Modp(n / 2, p);\n\
    \        var ans = (m * m) % p;\n        if (n % 2 == 1) {\n            ans =\
    \ (ans * n) % p;\n        }\n        return ans;", "        long result = 1;\n\
    \        long power = n;\n        while (n > 0) {\n            if (n % 2 == 1)\
    \ {\n                result = (result * power) % p;\n            }\n         \
    \   power = (power * power) % p;\n            n /= 2;\n        }\n        return\
    \ result;", "        long ret = 1;\n        while (n > 0) {\n            if ((n\
    \ & 1) == 1) {\n                ret = (ret * 2) % p;\n            }\n        \
    \    n >>= 1;\n        }\n        return ret;", "        long base_ = 2;\n   \
    \     long exp = n;\n        long mod = p;\n        long result = 1;\n       \
    \ while (exp > 0) {\n            if ((exp & 1) == 1) result = (result * base_)\
    \ % mod;\n            exp >>= 1;\n            base_ = (base_ * base_) % mod;\n\
    \        }\n        return result;", "        long res = 1;\n        long pow\
    \ = n;\n        while (pow > 0) {\n            if ((pow & 1) == 1) {\n       \
    \         res = (res * n) % p;\n            }\n            n = (n * n) % p;\n\
    \            pow >>= 1;\n        }\n        return res;", "        if (n == 0)\
    \ {\n            return 1;\n        }\n        long v = Modp(n / 2, p);\n    \
    \    if (n % 2 == 0) {\n            return (v * v) % p;\n        } else {\n  \
    \          return (((v * v) % p) * 2) % p;\n        }", "        if (n == 0) return\
    \ 1;\n        if (n % 2 == 0) {\n            long a = Modp(n / 2, p);\n      \
    \      return (a * a) % p;\n        } else {\n            return (Modp(n - 1,\
    \ p) * n) % p;\n        }", "        if (n == 0) {\n            return 1;\n  \
    \      }\n        if (n == 1) {\n            return n;\n        }\n        if\
    \ (n % 2 == 0) {\n            return (Modp(n / 2, p) * Modp(n / 2, p)) % p;\n\
    \        }\n        return (Modp(n / 2, p) * Modp(n / 2, p) * n) % p;"]
stop_tokens:
- "\n    }\n"
