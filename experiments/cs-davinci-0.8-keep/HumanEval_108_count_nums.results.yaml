language: cs
name: HumanEval_108_count_nums
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        int L = arr.Count;\n        int[]
    f = new int[L];\n        for (int i = 0; i < L; i++) {\n            if (arr[i]
    < 0) {\n                f[i] = -1;\n            } else {\n                f[i]
    = 1;\n            }\n        }\n        long[] v = new long[L];\n        for (int
    i = 0; i < L; i++) {\n            v[i] = Math.Abs(arr[i]);\n        }\n        int[]
    d = new int[L];\n        for (int i = 0; i < L; i++) {\n            while (v[i]
    > 0) {\n                d[i] += (int)(v[i] % 10);\n                v[i] /= 10;\n
    \           }\n        }\n        int[] fd = new int[L];\n        for (int i =
    0; i < L; i++) {\n            fd[i] = f[i] * d[i];\n        }\n        return
    fd.Count(i => i > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6faea2de501947959aeb9673dd9ae0c6>:0
    \n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // put your code here\n        int
    count = 0;\n        foreach (long item in arr)\n        {\n            var digits
    = Math.Abs(item).ToString().ToCharArray();\n            int sum = 0;\n            foreach
    (char c in digits)\n            {\n                sum += (int)Char.GetNumericValue(c);\n
    \           }\n            if (sum > 0) count++;\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80393834e3914adbac71dafca2efeab4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80393834e3914adbac71dafca2efeab4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        int count = 0;\n        foreach
    (long i in arr) {\n            long sum = 0;\n            long num = Math.Abs(i);\n
    \           while (num > 0) {\n                sum += num % 10;\n                num
    /= 10;\n            }\n            if (sum > 0) count++;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db10fb2bc2b84445a1a280cc55061dc7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db10fb2bc2b84445a1a280cc55061dc7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Write your code here\n        long
    result = 0;\n        foreach (long item in arr)\n        {\n            int sum
    = 0;\n            if (item < 0)\n            {\n                item = item *
    -1;\n            }\n            while (item != 0)\n            {\n                sum
    += (int)(item % 10);\n                item = item / 10;\n            }\n            if
    (sum > 0)\n            {\n                result++;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv22gy5i1.cs(24,17): error CS1656: Cannot assign to ''item'' because it
    is a ''foreach iteration variable''

    /tmp/tmpv22gy5i1.cs(29,17): error CS1656: Cannot assign to ''item'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659823964
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Sum(x => DigitSum(x));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2xl1wx73.cs(17,29): error CS0103: The name ''DigitSum'' does not exist
    in the current context

    '
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(e => e.ToString().Sum(c
    => (int)c - 48) > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9568385b7e1e4964a9464ae96b9434da>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9568385b7e1e4964a9464ae96b9434da>:0
    \n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Where(x => x.ToString().Sum(y
    => y - '0') > 0).Count();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3f5559e9b05f4c8cae18a117b43e8c0e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3f5559e9b05f4c8cae18a117b43e8c0e>:0
    \n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(n => n < 0 ?
    n.ToString().Sum(c => -(c - '0')) : n.ToString().Sum(c => c - '0'));\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9vu5bth8.cs(17,31): error CS0029: Cannot implicitly convert type ''int''
    to ''bool''

    /tmp/tmp9vu5bth8.cs(17,31): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659823964
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x > 0 ?
    x.ToString().ToCharArray().Select(c => int.Parse(c.ToString())).Sum() > 0 : x.ToString().ToCharArray().Select(c
    => int.Parse(c.ToString())).Sum() + 1 > 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_2 (System.Char c) [0x00007] in <67c56eac711746129dc14c5536f5ff35>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].MoveNext
    () [0x0003a] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00024] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x00035] in <67c56eac711746129dc14c5536f5ff35>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <67c56eac711746129dc14c5536f5ff35>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <67c56eac711746129dc14c5536f5ff35>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_2 (System.Char c) [0x00007] in <67c56eac711746129dc14"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long answer = 0;\n        //
    put your code here\n        foreach (long item in arr)\n        {\n            long
    sum = 0;\n            long temp = item;\n            while (temp > 0)\n            {\n
    \               sum += temp % 10;\n                temp /= 10;\n            }\n
    \           if (sum > 0)\n                answer++;\n        }\n        return
    answer;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <622d014a2b664d15aa2460f669509a7c>:0
    \n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <ab2eeec19108482cbb0368a7956d2c06>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]
    in <ab2eeec19108482cbb0368a7956d2c06>:0 \n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long result = 0;\n        foreach
    (long num in arr) {\n            if (NumSum(num) > 0) {\n                result++;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0gbznvyf.cs(19,17): error CS0103: The name ''NumSum'' does not exist in
    the current context

    '
  timestamp: 1659823964
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        int res = 0;\n        foreach
    (long e in arr) {\n            res += (long)Math.Floor(Math.Log10(Math.Abs(e))
    + 1);\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy_f5j672.cs(19,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823964
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long i in arr) {\n            count += count_num(i);\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu86xew3p.cs(19,22): error CS0103: The name ''count_num'' does not exist
    in the current context

    '
  timestamp: 1659823964
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        var longs = arr.Select(i => Math.Abs(i));\n
    \       return longs.Count(IsSumOfDigitsGreaterThanZero);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp33fgqnlm.cs(18,28): error CS0103: The name ''IsSumOfDigitsGreaterThanZero''
    does not exist in the current context

    '
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here!\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef06a4537c9c43c58590369b3ac45f9d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef06a4537c9c43c58590369b3ac45f9d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <356a6721db4f445c85fbe5a3c76d00d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <356a6721db4f445c85fbe5a3c76d00d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // TODO: Write your code here\n
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b4aee4a82bc43b9ac266df298441f25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b4aee4a82bc43b9ac266df298441f25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        for
    (int i = 0; i < arr.Count; i++) {\n            long sum = 0;\n            long
    el = arr[i];\n            long sign = Math.Sign(el);\n            el = Math.Abs(el);\n
    \           while (el > 0) {\n                sum += el % 10;\n                el
    /= 10;\n            }\n            if (sign * sum > 0) count++;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e4e50ad328e4ca5b924f62c557f5f46>:0
    \n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <356a6721db4f445c85fbe5a3c76d00d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <356a6721db4f445c85fbe5a3c76d00d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
