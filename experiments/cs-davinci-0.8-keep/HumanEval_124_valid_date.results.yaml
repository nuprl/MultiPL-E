language: cs
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <0a165d22fd214248a61f2ad18f339dcd>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <0a165d22fd214248a61f2ad18f339dcd>:0 \n"
  stdout: ''
  timestamp: 1659824327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n        if(date.Length == 0) {\n            return false;\n        }\n
    \       var split = date.Split(\"-\");\n        if(split.Length != 3) {\n            return
    false;\n        }\n        var month = Int32.Parse(split[0]);\n        var day
    = Int32.Parse(split[1]);\n        var year = Int32.Parse(split[2]);\n        if(year
    % 4 == 0 && year % 100 != 0) {\n            if(month == 2 && day < 1 || day >
    29) {\n                return false;\n            }\n        } else {\n            if(month
    == 2 && day < 1 || day > 28) {\n                return false;\n            }\n
    \       }\n        if(month == 1 || month == 3 || month == 5 || month == 7 ||
    month == 8 || month == 10 || month == 12) {\n            if(day < 1 || day > 31)
    {\n                return false;\n            }\n        } else if(month == 4
    || month == 6 || month == 9 || month == 11) {\n            if(day < 1 || day >
    30) {\n                return false;\n            }\n        } else {\n            return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n        if (date.Length == 0) return false;\n        string[] mdy = date.Split('-');\n
    \       int m = int.Parse(mdy[0]);\n        int d = int.Parse(mdy[1]);\n        int
    y = int.Parse(mdy[2]);\n        if (m == 0 || m > 12) return false;\n        if
    (m == 2) {\n            if (d > 29) return false;\n            if (d == 29) {\n
    \               if (y % 400 == 0) return true;\n                if (y % 100 ==
    0) return false;\n                if (y % 4 == 0) return true;\n                return
    false;\n            }\n        }\n        if (m == 4 || m == 6 || m == 9 || m
    == 11) {\n            if (d == 0 || d > 30) return false;\n        }\n        if
    (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n            if
    (d == 0 || d > 31) return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.ValidDate (System.String date) [0x0002b]
    in <ed9a19f2e49b428e9be4f906dbf8a717>:0 \n  at Problem.Main (System.String[] args)
    [0x000c3] in <ed9a19f2e49b428e9be4f906dbf8a717>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.ValidDate (System.String date) [0x0002b] in <ed9a19f2e49b428e9be4f906dbf8a717>:0
    \n  at Problem.Main (System.String[] args) [0x000c3] in <ed9a19f2e49b428e9be4f906dbf8a717>:0
    \n"
  stdout: ''
  timestamp: 1659824327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n        return false;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4ccdafdac13432385a06c3e6c272f53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4ccdafdac13432385a06c3e6c272f53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n        // your code here\n        if (date.Length != 10) return false;\n
    \       if (date[2] != '-' || date[5] != '-') return false;\n        var year
    = int.Parse(date.Substring(6, 4));\n        var month = int.Parse(date.Substring(0,
    2));\n        var day = int.Parse(date.Substring(3, 2));\n        if (year < 1900
    || year > 9999) return false;\n        if (month < 1 || month > 12) return false;\n
    \       if (day < 1 || day > 31) return false;\n        if (month == 2) {\n            if
    (day > 29) return false;\n            if (day == 29) {\n                if (year
    % 4 != 0) return false;\n                if (year % 100 == 0 && year % 400 !=
    0) return false;\n            }\n        } else if (month == 4 || month == 6 ||
    month == 9 || month == 11) {\n            if (day > 30) return false;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n        var dateElems = date.Split('-');\n        if (dateElems.Length
    != 3) return false;\n        int days;\n        int month;\n        int year;\n
    \       try {\n            days = Int32.Parse(dateElems[1]);\n            month
    = Int32.Parse(dateElems[0]);\n            year = Int32.Parse(dateElems[2]);\n
    \       } catch {\n            return false;\n        }\n        if (days < 1
    || days > 31) return false;\n        if (month < 1 || month > 12) return false;\n
    \       if (year < 1) return false;\n        if (month == 2) {\n            if
    (days > 29) return false;\n            if (days == 29) {\n                if (year
    % 4 != 0) return false;\n                if (year % 100 == 0 && year % 400 !=
    0) return false;\n            }\n        }\n        if (month == 4 || month ==
    6 || month == 9 || month == 11) {\n            if (days > 30) return false;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n        // Your code here. \n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <8f07156018d442b6b6c815e453f7d687>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <8f07156018d442b6b6c815e453f7d687>:0 \n"
  stdout: ''
  timestamp: 1659824327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n        if (date.Length < 10) return false;\n        date = date.Substring(0,
    10);\n        int[] nums = date.Split('-').Select(x => int.Parse(x)).ToArray();\n
    \       if (nums[0] > 12 || nums[0] < 1) return false;\n        if (nums[1] >
    31 || nums[1] < 1) return false;\n        if (nums[0] == 2) {\n            if
    (nums[1] > 29) return false;\n        } else if (nums[0] == 4 || nums[0] == 6
    || nums[0] == 9 || nums[0] == 11) {\n            if (nums[1] > 30) return false;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n      // your code here\n      return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a009188686f4243a450af88c07ecbac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a009188686f4243a450af88c07ecbac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n        var date_arr = date.Split('-');\n        if (date_arr.Length
    != 3) {\n            return false;\n        }\n        // don't check if yyyy
    is leap year or not yet\n        var d = int.Parse(date_arr[1]);\n        var
    m = int.Parse(date_arr[0]);\n        var y = int.Parse(date_arr[2]);\n        var
    is_leap_year = (y % 4 == 0 && y % 100 != 0) || y % 400 == 0;\n        if (d <
    1 || d > 31 || m < 1 || m > 12) {\n            return false;\n        }\n        switch
    (m) {\n            case 2:\n                if (!is_leap_year && d > 28) {\n                    return
    false;\n                }\n                if (is_leap_year && d > 29) {\n                    return
    false;\n                }\n                break;\n            case 4:\n            case
    6:\n            case 9:\n            case 11:\n                if (d > 30) {\n
    \                   return false;\n                }\n                break;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n        // Your code here\n        DateTime validDate;\n        if(DateTime.TryParse(date,
    out validDate))\n        {\n            return true;\n        }\n        else\n
    \       {\n            return false;\n        }\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5e2b5b17919e48ddbec1d44932b5161b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5e2b5b17919e48ddbec1d44932b5161b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n        return false;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4ccdafdac13432385a06c3e6c272f53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4ccdafdac13432385a06c3e6c272f53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n        string[] strs = date.Split('-');\n        if (strs.Length !=
    3) return false;\n        int month, day, year;\n        if (!int.TryParse(strs[0],
    out month) || !int.TryParse(strs[1], out day) || !int.TryParse(strs[2], out year))
    return false;\n        if (month > 12 || month < 1) return false;\n        if
    (day > 31 || day < 1) return false;\n        if (month == 2) {\n            if
    (day > 29) return false;\n        } else if (month == 4 || month == 6 || month
    == 9 || month == 11) {\n            if (day > 30) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n        var months = new int[] { 0, 31, 29, 31, 30, 31, 30, 31, 31, 30,
    31, 30, 31 };\n        var parts = date.Split('-');\n        if (parts.Length
    != 3) return false;\n        if (!int.TryParse(parts[0], out int month)) return
    false;\n        if (!int.TryParse(parts[1], out int day)) return false;\n        if
    (!int.TryParse(parts[2], out int year)) return false;\n        if (month > 12
    || month < 1) return false;\n        if (day > months[month] || day < 1) return
    false;\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n        bool isValid = true;\n        // Put your code here\n        string[]
    s = date.Split('-');\n        isValid = s.Length == 3;\n        if (isValid) {\n
    \           int month = int.Parse(s[0]);\n            int day = int.Parse(s[1]);\n
    \           int year = int.Parse(s[2]);\n            isValid = month >= 1 && month
    <= 12;\n            if (isValid) {\n                if (month == 2) {\n                    if
    (year % 4 == 0) {\n                        isValid = day >= 1 && day <= 29;\n
    \                   } else {\n                        isValid = day >= 1 && day
    <= 28;\n                    }\n                } else if (month == 1 || month
    == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)
    {\n                    isValid = day >= 1 && day <= 31;\n                } else
    {\n                    isValid = day >= 1 && day <= 30;\n                }\n            }\n
    \       }\n        return isValid;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n        string pattern = @\"^([1-9]|0[1-9]|1[0-2])-([1-9]|0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\";\n
    \       if (System.Text.RegularExpressions.Regex.IsMatch(date, pattern)) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d5534fd54b64404bc5b9e9c8f15c600>:0
    \n"
  stdout: ''
  timestamp: 1659824327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n        // Write your code here\n        int[] valids = { 4, 6, 9, 11
    };\n        int[] invalids = { 2 };\n        var dates = date.Split('-');\n        try
    {\n            int d = int.Parse(dates[0]);\n            int m = int.Parse(dates[1]);\n
    \           int y = int.Parse(dates[2]);\n            if (m <= 0 || m > 12) return
    false;\n            if (y < 0) return false;\n            if (valids.Contains(m))
    {\n                if (d <= 0 || d > 30) return false;\n            } else if
    (invalids.Contains(m)) {\n                if (d <= 0 || d > 29) return false;\n
    \           } else {\n                if (d <= 0 || d > 31) return false;\n            }\n
    \           return true;\n        } catch (Exception) {\n            return false;\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83a4e9ac645c4395ad6c9226c2aa5379>:0
    \n"
  stdout: ''
  timestamp: 1659824327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n        try {\n            DateTime dt = DateTime.Parse(date);\n            return
    true;\n        } catch {\n            return false;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\"))
    == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc88d768a91b481c960fcbe86b9430b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc88d768a91b481c960fcbe86b9430b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n        var parts = date.Split('-');\n        if (parts.Length != 3)
    {\n            return false;\n        }\n        int month = int.Parse(parts[0]);\n
    \       int day = int.Parse(parts[1]);\n        int year = int.Parse(parts[2]);\n
    \       if (month < 1 || month > 12) {\n            return false;\n        }\n
    \       if (day < 1) {\n            return false;\n        }\n        if (month
    == 2) {\n            if (day > 29) {\n                return false;\n            }\n
    \       } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n
    \           if (day > 30) {\n                return false;\n            }\n        }
    else {\n            if (day > 31) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n    Debug.Assert(ValidDate((\"15-01-2012\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\")) == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\"))
    == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\")) == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\"))
    == (false));\n    Debug.Assert(ValidDate((\"\")) == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\")) == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\")) == (true));\n    Debug.Assert(ValidDate((\"04122003\"))
    == (false));\n    Debug.Assert(ValidDate((\"20030412\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\")) == (false));\n    Debug.Assert(ValidDate((\"04-2003\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have to write a function which validates a given date string
    and\n    // returns True if the date is valid otherwise False.\n    // The date
    is valid if all of the following rules are satisfied:\n    // 1. The date string
    is not empty.\n    // 2. The number of days is not less than 1 or higher than
    31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1
    or higher than 30 days for months 4,6,9,11. And, the number of days is not less
    than 1 or higher than 29 for the month 2.\n    // 3. The months should not be
    less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n
    \   // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')
    => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')
    => True\n    // valid_date('06/04/2020') => False\n    public static bool ValidDate(string
    date) {\n        //string[] dateFormat = date.Split('-');\n        //if(dateFormat.Length
    != 3){\n        //    return false;\n        //}\n        //int month = int.Parse(dateFormat[0]);\n
    \       //int day = int.Parse(dateFormat[1]);\n        //int year = int.Parse(dateFormat[2]);\n
    \       //if (month == 2) {\n        //    if (year % 4 == 0 && day == 29) {\n
    \       //        return true;\n        //    }\n        //    else if (day ==
    28) {\n        //        return true;\n        //    }\n        //    else {\n
    \       //        return false;\n        //    }\n        //}\n        //else
    if (day > 0 && day < 31 && month > 0 && month < 13 && year > 0) {\n        //
    \   return true;\n        //}\n        //else {\n        //    return false;\n
    \       //}\n        // This was my first attempt.  I was so close, but I didn't
    realize \n        // that leap years happen every 4 years.  In other words, I
    forgot\n        // to add \"|| year % 400 == 0\" to my first if statement.\n\n
    \       if (string.IsNullOrEmpty(date)) {\n            return false;\n        }\n
    \       if (!date.Contains(\"-\")) {\n            return false;\n        }\n        string[]
    dateSplit = date.Split('-');\n        if (dateSplit.Length != 3) {\n            return
    false;\n        }\n        int day = int.Parse(dateSplit[1]);\n        int month
    = int.Parse(dateSplit[0]);\n        int year = int.Parse(dateSplit[2]);\n        if
    (year % 4 == 0 || year % 400 == 0) {\n            if (month == 2 && day > 0 &&
    day < 30) {\n                return true;\n            }\n        }\n        else
    {\n            if (month == 2 && day > 0 && day < 29) {\n                return
    true;\n            }\n        }\n        if (month > 0 && month < 13) {\n            if
    (month == 1 || month == 3 || month == 5 || month == 7 ||\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(ValidDate((\"03-11-2000\")) == (true));\n
    \   Debug.Assert(ValidDate((\"15-01-2012\")) == (false));\n    Debug.Assert(ValidDate((\"04-0-2040\"))
    == (false));\n    Debug.Assert(ValidDate((\"06-04-2020\")) == (true));\n    Debug.Assert(ValidDate((\"01-01-2007\"))
    == (true));\n    Debug.Assert(ValidDate((\"03-32-2011\")) == (false));\n    Debug.Assert(ValidDate((\"\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-31-3000\")) == (false));\n    Debug.Assert(ValidDate((\"06-06-2005\"))
    == (true));\n    Debug.Assert(ValidDate((\"21-31-2000\")) == (false));\n    Debug.Assert(ValidDate((\"04-12-2003\"))
    == (true));\n    Debug.Assert(ValidDate((\"04122003\")) == (false));\n    Debug.Assert(ValidDate((\"20030412\"))
    == (false));\n    Debug.Assert(ValidDate((\"2003-04\")) == (false));\n    Debug.Assert(ValidDate((\"2003-04-12\"))
    == (false));\n    Debug.Assert(ValidDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp62l6fdh4.cs(75,72): error CS1525: Invalid expression term ''}''

    /tmp/tmp62l6fdh4.cs(75,72): error CS1026: ) expected

    /tmp/tmp62l6fdh4.cs(75,72): error CS1002: ; expected

    /tmp/tmp62l6fdh4.cs(77,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp62l6fdh4.cs(96,2): error CS1513: } expected

    '
  timestamp: 1659824326
