language: cs
name: HumanEval_31_is_prime
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        // First, check if n is divisible by 2 or 3.\n        if (n % 2 ==\
    \ 0 || n % 3 == 0)\n            return false;\n        // We only need to check\
    \ up to sqrt(n).\n        // We can skip even numbers.\n        for (long i =\
    \ 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0)\n\
    \                return false;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n\
    \    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <171849161ebc461496b6a87d495db0ac>:0 \n"
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        if (n < 2) {\n            return false;\n        }\n        if (n\
    \ == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n  \
    \          return false;\n        }\n        for (int i = 3; i <= Math.Sqrt(n);\
    \ i += 2) {\n            if (n % i == 0) {\n                return false;\n  \
    \          }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        if (n < 2) {\n            return false;\n        }\n\n        //\
    \ the only even prime number is 2\n        if (n == 2) {\n            return true;\n\
    \        }\n\n        // all other even numbers are composite\n        if (n %\
    \ 2 == 0) {\n            return false;\n        }\n\n        var sqrt = (long)Math.Sqrt(n);\n\
    \        for (long i = 3; i <= sqrt; i += 2) {\n            if (n % i == 0) {\n\
    \                return false;\n            }\n        }\n\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        // Return true if n is prime, false otherwise.\n        if (n < 2)\
    \ return false;\n        if (n == 2) return true;\n        for (long i = 2; i\
    \ < n; i++) {\n            if (n % i == 0) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        //if (n == 1) {\n        //    return false;\n        //}\n     \
    \   //if (n == 2) {\n        //    return true;\n        //}\n        //if (n\
    \ % 2 == 0) {\n        //    return false;\n        //}\n        //for (long i\
    \ = 3; i * i <= n; i += 2) {\n        //    if (n % i == 0) {\n        //    \
    \    return false;\n        //    }\n        //}\n        //return true;\n   \
    \     if (n == 2 || n == 3) {\n            return true;\n        }\n        if\
    \ (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n       \
    \ for (long i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i\
    \ + 2) == 0) {\n                return false;\n            }\n        }\n    \
    \    return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90237d3fe79749d09212d117bbf64a55>:0 \n"
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        if (n == 1) {\n            return false;\n        }\n        if (n\
    \ == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n  \
    \          return false;\n        }\n        for (int i = 3; i * i <= n; i +=\
    \ 2) {\n            if (n % i == 0) {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        if (n <= 1) {\n            return false;\n        }\n        for\
    \ (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n     \
    \           return false;\n            }\n        }\n        return true;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n   \
    \     if (n % 2 == 0 || n % 3 == 0) return false;\n        for (int i = 5; i *\
    \ i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        if (n < 2) {\n            return false;\n        }\n        if (n\
    \ == 2) {\n            return true;\n        }\n        for (long d = 2; d * d\
    \ <= n; d++) {\n            if (n % d == 0) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        if (n == 1) {\n            return false;\n        }\n        if (n\
    \ < 4) {\n            return true;\n        }\n        if (n % 2 == 0) {\n   \
    \         return false;\n        }\n        if (n < 9) {\n            return true;\n\
    \        }\n        if (n % 3 == 0) {\n            return false;\n        }\n\
    \        long r = (long)Math.Floor(Math.Sqrt(n));\n        long f = 5;\n     \
    \   while (f <= r) {\n            if (n % f == 0) {\n                return false;\n\
    \            }\n            if (n % (f + 2) == 0) {\n                return false;\n\
    \            }\n            f += 6;\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n   \
    \     if (n % 2 == 0) return false;\n        long limit = (long)Math.Sqrt(n);\n\
    \        for (long i = 3; i <= limit; i += 2) {\n            if (n % i == 0) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        if (n <= 1) {\n            return false;\n        }\n        if (n\
    \ <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n %\
    \ 3 == 0) {\n            return false;\n        }\n        long i = 5;\n     \
    \   while (i * i <= n) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n\
    \                return false;\n            }\n            i += 6;\n        }\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        if (n < 2) return false;\n        if (n == 2) return true;\n    \
    \    if (n % 2 == 0) return false;\n        long max = (long)Math.Ceiling(Math.Sqrt(n));\n\
    \        for (long i = 3; i <= max; i += 2) {\n            if (n % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        long divisor = 2;\n        while (divisor < n) {\n            if\
    \ (n % divisor == 0)\n                return false;\n            divisor++;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <16704e70c9d14c89b5354414f66ef2a7>:0 \n"
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        // Handle negative numbers\n        if (n < 0) {\n            n =\
    \ -n;\n        }\n        // Handle zero and one\n        if (n < 2) {\n     \
    \       return false;\n        }\n        // Test from 2 to sqrt(n)\n        for\
    \ (long i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n    \
    \            return false;\n            }\n        }\n        return true;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        // We only need to check up to the square root of the number.\n \
    \       long max = (long)Math.Ceiling(Math.Sqrt(n));\n        // We start at 2,\
    \ and go up to max.\n        for (long i = 2; i <= max; i++) {\n            //\
    \ If n is evenly divisible by i, it's not prime.\n            if (n % i == 0)\
    \ {\n                return false;\n            }\n        }\n        // If we\
    \ got this far, then we know the number is prime.\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be1efea13cd1405e99bbaef75d0e3a16>:0 \n"
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        if (n == 1) return false;\n        if (n < 4) return true;\n    \
    \    if (n % 2 == 0) return false;\n        if (n < 9) return true;\n        if\
    \ (n % 3 == 0) return false;\n        if (n % 5 == 0) return false;\n        if\
    \ (n < 25) return true;\n        var r = (long)Math.Floor(Math.Sqrt(n));\n   \
    \     int f = 5;\n        while (f <= r) {\n            if (n % f == 0) return\
    \ false;\n            if (n % (f + 2) == 0) return false;\n            f += 6;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        // Check to see if n is prime\n        if (n <= 1) {\n          \
    \  return false;\n        }\n        for (long i = 2; i <= n / 2; i++) {\n   \
    \         if (n % i == 0) {\n                return false;\n            }\n  \
    \      }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsPrime((6L)) == (false));\n    Debug.Assert(IsPrime((101L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((13441L))\
    \ == (true));\n    Debug.Assert(IsPrime((61L)) == (true));\n    Debug.Assert(IsPrime((4L))\
    \ == (false));\n    Debug.Assert(IsPrime((1L)) == (false));\n    Debug.Assert(IsPrime((5L))\
    \ == (true));\n    Debug.Assert(IsPrime((11L)) == (true));\n    Debug.Assert(IsPrime((17L))\
    \ == (true));\n    Debug.Assert(IsPrime((85L)) == (false));\n    Debug.Assert(IsPrime((77L))\
    \ == (false));\n    Debug.Assert(IsPrime((255379L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        // A simple implementation of the Miller-Rabin primality test.\n\
    \        if (n < 2) {\n            return false;\n        }\n        if (n !=\
    \ 2 && n % 2 == 0) {\n            return false;\n        }\n        long d = n\
    \ - 1;\n        long s = 0;\n        while (d % 2 == 0) {\n            d /= 2;\n\
    \            s += 1;\n        }\n        var witnesses = new long[] {2, 3, 5,\
    \ 7, 11, 13, 17};\n        foreach (long a in witnesses) {\n            if (a\
    \ >= n) {\n                break;\n            }\n            long x = (long)BigInteger.ModPow(a,\
    \ d, n);\n            if (x == 1 || x == n - 1) {\n                continue;\n\
    \            }\n            bool found = false;\n            for (long r = 1;\
    \ r < s; r++) {\n                x = (long)BigInteger.ModPow(x, 2, n);\n     \
    \           if (x == 1) {\n                    return false;\n               \
    \ }\n                if (x == n - 1) {\n                    found = true;\n  \
    \                  break;\n                }\n            }\n            if (!found)\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n\
    \    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    public static bool IsPrime(long n)\
    \ {\n        if (n <= 3) return n > 1;\n        if (n % 2 == 0 || n % 3 == 0)\
    \ return false;\n        for (long i = 5; i * i <= n; i += 6)\n            if\
    \ (n % i == 0 || n % (i + 2) == 0) return false;\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsPrime((6L))\
    \ == (false));\n    Debug.Assert(IsPrime((101L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((13441L)) == (true));\n    Debug.Assert(IsPrime((61L))\
    \ == (true));\n    Debug.Assert(IsPrime((4L)) == (false));\n    Debug.Assert(IsPrime((1L))\
    \ == (false));\n    Debug.Assert(IsPrime((5L)) == (true));\n    Debug.Assert(IsPrime((11L))\
    \ == (true));\n    Debug.Assert(IsPrime((17L)) == (true));\n    Debug.Assert(IsPrime((85L))\
    \ == (false));\n    Debug.Assert(IsPrime((77L)) == (false));\n    Debug.Assert(IsPrime((255379L))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
