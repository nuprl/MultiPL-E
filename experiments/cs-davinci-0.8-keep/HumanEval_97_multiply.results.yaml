language: cs
name: HumanEval_97_multiply
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        long aUnit = a % 10;\n        long bUnit = b % 10;\n \
    \       return aUnit * bUnit;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Multiply((148L), (412L)) == (16L));\n    Debug.Assert(Multiply((19L),\
    \ (28L)) == (72L));\n    Debug.Assert(Multiply((2020L), (1851L)) == (0L));\n \
    \   Debug.Assert(Multiply((14L), (-15L)) == (20L));\n    Debug.Assert(Multiply((76L),\
    \ (67L)) == (42L));\n    Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L),\
    \ (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <988c80cf9b42446da41a327eaeaade4c>:0 \n"
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        return new long[] { a, b }.Select(n => Math.Abs(n) % 10).Aggregate((n1,\
    \ n2) => n1 * n2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Multiply((148L),\
    \ (412L)) == (16L));\n    Debug.Assert(Multiply((19L), (28L)) == (72L));\n   \
    \ Debug.Assert(Multiply((2020L), (1851L)) == (0L));\n    Debug.Assert(Multiply((14L),\
    \ (-15L)) == (20L));\n    Debug.Assert(Multiply((76L), (67L)) == (42L));\n   \
    \ Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L),\
    \ (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        return (a % 10) * (b % 10);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Multiply((148L), (412L)) == (16L));\n\
    \    Debug.Assert(Multiply((19L), (28L)) == (72L));\n    Debug.Assert(Multiply((2020L),\
    \ (1851L)) == (0L));\n    Debug.Assert(Multiply((14L), (-15L)) == (20L));\n  \
    \  Debug.Assert(Multiply((76L), (67L)) == (42L));\n    Debug.Assert(Multiply((17L),\
    \ (27L)) == (49L));\n    Debug.Assert(Multiply((0L), (1L)) == (0L));\n    Debug.Assert(Multiply((0L),\
    \ (0L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21d74e00be114bfcb0ec160b177720e8>:0 \n"
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        string aStr = Math.Abs(a).ToString();\n        string\
    \ bStr = Math.Abs(b).ToString();\n        int aLast = aStr[aStr.Length - 1] -\
    \ '0';\n        int bLast = bStr[bStr.Length - 1] - '0';\n        return aLast\
    \ * bLast;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Multiply((148L),\
    \ (412L)) == (16L));\n    Debug.Assert(Multiply((19L), (28L)) == (72L));\n   \
    \ Debug.Assert(Multiply((2020L), (1851L)) == (0L));\n    Debug.Assert(Multiply((14L),\
    \ (-15L)) == (20L));\n    Debug.Assert(Multiply((76L), (67L)) == (42L));\n   \
    \ Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L),\
    \ (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        return (a % 10) * (b % 10);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Multiply((148L), (412L)) == (16L));\n\
    \    Debug.Assert(Multiply((19L), (28L)) == (72L));\n    Debug.Assert(Multiply((2020L),\
    \ (1851L)) == (0L));\n    Debug.Assert(Multiply((14L), (-15L)) == (20L));\n  \
    \  Debug.Assert(Multiply((76L), (67L)) == (42L));\n    Debug.Assert(Multiply((17L),\
    \ (27L)) == (49L));\n    Debug.Assert(Multiply((0L), (1L)) == (0L));\n    Debug.Assert(Multiply((0L),\
    \ (0L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21d74e00be114bfcb0ec160b177720e8>:0 \n"
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        var ab = a * b;\n        var unit = ab % 10;\n       \
    \ return unit;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Multiply((148L),\
    \ (412L)) == (16L));\n    Debug.Assert(Multiply((19L), (28L)) == (72L));\n   \
    \ Debug.Assert(Multiply((2020L), (1851L)) == (0L));\n    Debug.Assert(Multiply((14L),\
    \ (-15L)) == (20L));\n    Debug.Assert(Multiply((76L), (67L)) == (42L));\n   \
    \ Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L),\
    \ (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af6ae83b85444a47a63b6e9b4ff07de4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af6ae83b85444a47a63b6e9b4ff07de4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        long unitA = a % 10;\n        long unitB = b % 10;\n \
    \       return unitA * unitB;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Multiply((148L), (412L)) == (16L));\n    Debug.Assert(Multiply((19L),\
    \ (28L)) == (72L));\n    Debug.Assert(Multiply((2020L), (1851L)) == (0L));\n \
    \   Debug.Assert(Multiply((14L), (-15L)) == (20L));\n    Debug.Assert(Multiply((76L),\
    \ (67L)) == (42L));\n    Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L),\
    \ (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <28e2c676b10349b3a147b06d42ceebef>:0 \n"
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        long b_digit = b % 10;\n        long a_digit = a % 10;\n\
    \        if (b_digit < 0) {\n            b_digit = b_digit + 10;\n        }\n\
    \        if (a_digit < 0) {\n            a_digit = a_digit + 10;\n        }\n\
    \        return b_digit * a_digit;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Multiply((148L), (412L)) == (16L));\n    Debug.Assert(Multiply((19L),\
    \ (28L)) == (72L));\n    Debug.Assert(Multiply((2020L), (1851L)) == (0L));\n \
    \   Debug.Assert(Multiply((14L), (-15L)) == (20L));\n    Debug.Assert(Multiply((76L),\
    \ (67L)) == (42L));\n    Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L),\
    \ (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        return (a % 10) * (b % 10);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Multiply((148L), (412L)) == (16L));\n\
    \    Debug.Assert(Multiply((19L), (28L)) == (72L));\n    Debug.Assert(Multiply((2020L),\
    \ (1851L)) == (0L));\n    Debug.Assert(Multiply((14L), (-15L)) == (20L));\n  \
    \  Debug.Assert(Multiply((76L), (67L)) == (42L));\n    Debug.Assert(Multiply((17L),\
    \ (27L)) == (49L));\n    Debug.Assert(Multiply((0L), (1L)) == (0L));\n    Debug.Assert(Multiply((0L),\
    \ (0L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21d74e00be114bfcb0ec160b177720e8>:0 \n"
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        return Math.Abs(a % 10) * Math.Abs(b % 10);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Multiply((148L),\
    \ (412L)) == (16L));\n    Debug.Assert(Multiply((19L), (28L)) == (72L));\n   \
    \ Debug.Assert(Multiply((2020L), (1851L)) == (0L));\n    Debug.Assert(Multiply((14L),\
    \ (-15L)) == (20L));\n    Debug.Assert(Multiply((76L), (67L)) == (42L));\n   \
    \ Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L),\
    \ (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        var a_abs = Math.Abs(a);\n        var b_abs = Math.Abs(b);\n\
    \        var result = (a_abs % 10) * (b_abs % 10);\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Multiply((148L),\
    \ (412L)) == (16L));\n    Debug.Assert(Multiply((19L), (28L)) == (72L));\n   \
    \ Debug.Assert(Multiply((2020L), (1851L)) == (0L));\n    Debug.Assert(Multiply((14L),\
    \ (-15L)) == (20L));\n    Debug.Assert(Multiply((76L), (67L)) == (42L));\n   \
    \ Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L),\
    \ (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        return Math.Abs(a%10) * Math.Abs(b%10);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Multiply((148L), (412L))\
    \ == (16L));\n    Debug.Assert(Multiply((19L), (28L)) == (72L));\n    Debug.Assert(Multiply((2020L),\
    \ (1851L)) == (0L));\n    Debug.Assert(Multiply((14L), (-15L)) == (20L));\n  \
    \  Debug.Assert(Multiply((76L), (67L)) == (42L));\n    Debug.Assert(Multiply((17L),\
    \ (27L)) == (49L));\n    Debug.Assert(Multiply((0L), (1L)) == (0L));\n    Debug.Assert(Multiply((0L),\
    \ (0L)) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        return (Math.Abs(a) % 10) * (Math.Abs(b) % 10);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Multiply((148L),\
    \ (412L)) == (16L));\n    Debug.Assert(Multiply((19L), (28L)) == (72L));\n   \
    \ Debug.Assert(Multiply((2020L), (1851L)) == (0L));\n    Debug.Assert(Multiply((14L),\
    \ (-15L)) == (20L));\n    Debug.Assert(Multiply((76L), (67L)) == (42L));\n   \
    \ Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L),\
    \ (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        return (a % 10) * (b % 10);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Multiply((148L), (412L)) == (16L));\n\
    \    Debug.Assert(Multiply((19L), (28L)) == (72L));\n    Debug.Assert(Multiply((2020L),\
    \ (1851L)) == (0L));\n    Debug.Assert(Multiply((14L), (-15L)) == (20L));\n  \
    \  Debug.Assert(Multiply((76L), (67L)) == (42L));\n    Debug.Assert(Multiply((17L),\
    \ (27L)) == (49L));\n    Debug.Assert(Multiply((0L), (1L)) == (0L));\n    Debug.Assert(Multiply((0L),\
    \ (0L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21d74e00be114bfcb0ec160b177720e8>:0 \n"
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        return Math.Abs(a % 10) * Math.Abs(b % 10);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Multiply((148L),\
    \ (412L)) == (16L));\n    Debug.Assert(Multiply((19L), (28L)) == (72L));\n   \
    \ Debug.Assert(Multiply((2020L), (1851L)) == (0L));\n    Debug.Assert(Multiply((14L),\
    \ (-15L)) == (20L));\n    Debug.Assert(Multiply((76L), (67L)) == (42L));\n   \
    \ Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L),\
    \ (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        return (Math.Abs(a % 10) * Math.Abs(b % 10));\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Multiply((148L),\
    \ (412L)) == (16L));\n    Debug.Assert(Multiply((19L), (28L)) == (72L));\n   \
    \ Debug.Assert(Multiply((2020L), (1851L)) == (0L));\n    Debug.Assert(Multiply((14L),\
    \ (-15L)) == (20L));\n    Debug.Assert(Multiply((76L), (67L)) == (42L));\n   \
    \ Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L),\
    \ (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        return (long)(Math.Abs(a%10) * Math.Abs(b%10));\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Multiply((148L),\
    \ (412L)) == (16L));\n    Debug.Assert(Multiply((19L), (28L)) == (72L));\n   \
    \ Debug.Assert(Multiply((2020L), (1851L)) == (0L));\n    Debug.Assert(Multiply((14L),\
    \ (-15L)) == (20L));\n    Debug.Assert(Multiply((76L), (67L)) == (42L));\n   \
    \ Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L),\
    \ (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        if (a == 0 || b == 0) return 0;\n        return Math.Abs(a\
    \ % 10) * Math.Abs(b % 10);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Multiply((148L), (412L)) == (16L));\n    Debug.Assert(Multiply((19L),\
    \ (28L)) == (72L));\n    Debug.Assert(Multiply((2020L), (1851L)) == (0L));\n \
    \   Debug.Assert(Multiply((14L), (-15L)) == (20L));\n    Debug.Assert(Multiply((76L),\
    \ (67L)) == (42L));\n    Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L),\
    \ (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        // Am I supposed to use the product of their unit digits\n\
    \        // or the sum of their unit digits?\n        return (a%10) * (b%10);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Multiply((148L),\
    \ (412L)) == (16L));\n    Debug.Assert(Multiply((19L), (28L)) == (72L));\n   \
    \ Debug.Assert(Multiply((2020L), (1851L)) == (0L));\n    Debug.Assert(Multiply((14L),\
    \ (-15L)) == (20L));\n    Debug.Assert(Multiply((76L), (67L)) == (42L));\n   \
    \ Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L),\
    \ (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9caccb570fbc4f67a188bd9d43d314cf>:0 \n"
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Complete the function that takes two integers and returns\
    \ \n    // the product of their unit digits.\n    // Assume the input is always\
    \ valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    //\
    \ multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return\
    \ 0.\n    // multiply(14,-15) should return 20.\n    public static long Multiply(long\
    \ a, long b) {\n        long r1 = a % 10;\n        long r2 = b % 10;\n       \
    \ long r = r1 * r2;\n        return r;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Multiply((148L), (412L)) == (16L));\n    Debug.Assert(Multiply((19L),\
    \ (28L)) == (72L));\n    Debug.Assert(Multiply((2020L), (1851L)) == (0L));\n \
    \   Debug.Assert(Multiply((14L), (-15L)) == (20L));\n    Debug.Assert(Multiply((76L),\
    \ (67L)) == (42L));\n    Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L),\
    \ (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac52618d251643619c35295865ffa84d>:0 \n"
  stdout: ''
  timestamp: 1659824146
