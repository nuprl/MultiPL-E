name: HumanEval_142_sum_squares
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // \"\n    // This function will take a list of integers. For all\
  \ entries in the list, the function shall square the integer entry if its index\
  \ is a \n    // multiple of 3 and will cube the integer entry if its index is a\
  \ multiple of 4 and not a multiple of 3. The function will not \n    // change the\
  \ entries in the list whose indexes are not a multiple of 3 or 4. The function shall\
  \ then return the sum of all entries. \n    // Examples:\n    // For lst = [1,2,3]\
  \ the output should be 6\n    // For lst = []  the output should be 0\n    // For\
  \ lst = [-1,-5,2,-1,-5]  the output should be -126\n    public static long SumSquares(List<long>\
  \ lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (6L));\n    Debug.Assert(SumSquares((new\
  \ List<long>(new long[]{(long)1L, (long)4L, (long)9L}))) == (14L));\n    Debug.Assert(SumSquares((new\
  \ List<long>())) == (0L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)1L,\
  \ (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L})))\
  \ == (9L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L, (long)-1L,\
  \ (long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L, (long)-1L})))\
  \ == (-3L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)0L})))\
  \ == (0L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L, (long)-5L,\
  \ (long)2L, (long)-1L, (long)-5L}))) == (-126L));\n    Debug.Assert(SumSquares((new\
  \ List<long>(new long[]{(long)-56L, (long)-99L, (long)1L, (long)0L, (long)-2L})))\
  \ == (3030L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L,\
  \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)-1L})))\
  \ == (0L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-16L,\
  \ (long)-9L, (long)-2L, (long)36L, (long)36L, (long)26L, (long)-20L, (long)25L,\
  \ (long)-40L, (long)20L, (long)-4L, (long)12L, (long)-26L, (long)35L, (long)37L})))\
  \ == (-14196L));\n    Debug.Assert(SumSquares((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)17L, (long)-1L, (long)-15L, (long)13L, (long)-1L, (long)14L,\
  \ (long)-14L, (long)-12L, (long)-5L, (long)14L, (long)-14L, (long)6L, (long)13L,\
  \ (long)11L, (long)16L, (long)16L, (long)4L, (long)10L}))) == (-1448L));\n    }\n\
  \n}\n"
completions: ["        long sum = 0;\n        for (int i = 0; i < lst.Count; i++)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst[i] * lst[i];\n\
    \            } else if (i % 4 == 0) {\n                sum += lst[i] * lst[i]\
    \ * lst[i];\n            } else {\n                sum += lst[i];\n          \
    \  }\n        }\n        return sum;", "        long ret = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 3 == 0) {\n              \
    \  ret += lst[i] * lst[i];\n            } else if (i % 4 == 0) {\n           \
    \     ret += lst[i] * lst[i] * lst[i];\n            } else {\n               \
    \ ret += lst[i];\n            }\n        }\n        return ret;", "        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i %\
    \ 3 == 0) {\n                sum += lst[i] * lst[i];\n            } else if (i\
    \ % 4 == 0) {\n                sum += lst[i] * lst[i] * lst[i];\n            }\
    \ else {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;", "        long result = 0;\n        // TODO\n        return result;",
  "        long sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n        \
    \    if (i % 3 == 0) {\n                sum += lst[i] * lst[i];\n            }\
    \ else if (i % 4 == 0) {\n                sum += lst[i] * lst[i] * lst[i];\n \
    \           } else {\n                sum += lst[i];\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            if (i % 3 == 0) {\n                sum += lst[i] * lst[i];\n\
    \            } else if (i % 4 == 0) {\n                sum += lst[i] * lst[i]\
    \ * lst[i];\n            } else {\n                sum += lst[i];\n          \
    \  }\n        }\n        return sum;", "        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 3 == 0) {\n              \
    \  sum += lst[i] * lst[i];\n            } else if (i % 4 == 0) {\n           \
    \     sum += lst[i] * lst[i] * lst[i];\n            } else {\n               \
    \ sum += lst[i];\n            }\n        }\n        return sum;", '        return
    lst.Sum(x => (long) (IsDivisibleByThree(x) ? Math.Pow(x, 2) : IsDivisibleByFour(x)
    ? Math.Pow(x, 3) : x));', "        // List<int> lst = new List<int> { 1, 2, 3\
    \ };\n        long sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n \
    \           if (i % 3 == 0) {\n                sum += lst[i] * lst[i];\n     \
    \       } else if (i % 4 == 0) {\n                sum += lst[i] * lst[i] * lst[i];\n\
    \            } else {\n                sum += lst[i];\n            }\n       \
    \ }\n        return sum;", "        // Write your code here\n        long sum\
    \ = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 3 ==\
    \ 0) {\n                lst[i] = lst[i] * lst[i];\n            }\n           \
    \ if (i % 4 == 0 && i % 3 != 0) {\n                lst[i] = lst[i] * lst[i] *\
    \ lst[i];\n            }\n            sum += lst[i];\n        }\n        return\
    \ sum;", "        long sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n\
    \            if (i % 3 == 0) sum += lst[i] * lst[i];\n            else if (i %\
    \ 4 == 0) sum += lst[i] * lst[i] * lst[i];\n            else sum += lst[i];\n\
    \        }\n        return sum;", '        return lst.Select((e, i) => i % 3 ==
    0 ? e * e : (i % 4 == 0 ? e * e * e : e)).Sum();', "        long sum = 0;\n  \
    \      for (int i = 0; i < lst.Count; i++) {\n            if (i % 3 == 0) {\n\
    \                lst[i] = lst[i] * lst[i];\n            }\n            if (i %\
    \ 4 == 0 && i % 3 != 0) {\n                lst[i] = lst[i] * lst[i] * lst[i];\n\
    \            }\n            sum += lst[i];\n        }\n        return sum;", " \
    \       long sum = 0;\n        // your code here\n        for (int i = 0; i <\
    \ lst.Count; i++) {\n            if (i % 3 == 0) lst[i] = lst[i] * lst[i];\n \
    \           if (i % 4 == 0 && i % 3 != 0) lst[i] = lst[i] * lst[i] * lst[i];\n\
    \            sum += lst[i];\n        }\n        return sum;", "        long sum\
    \ = 0;\n        long index = 0;\n        foreach (long num in lst) {\n       \
    \     if (index % 3 == 0) {\n                sum += num * num;\n            }\n\
    \            else if (index % 4 == 0) {\n                sum += num * num * num;\n\
    \            }\n            else {\n                sum += num;\n            }\n\
    \            index++;\n        }\n        return sum;", "        long sum = 0;\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            if (i % 3 == 0) {\n\
    \                lst[i] = lst[i] * lst[i];\n            }\n            if (i %\
    \ 4 == 0 && i % 3 != 0) {\n                lst[i] = lst[i] * lst[i] * lst[i];\n\
    \            }\n            sum += lst[i];\n        }\n        return sum;", " \
    \       // Taking the list of integers and iterating through it.\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            // if the\
    \ current index is a multiple of 3, square it.\n            if (i % 3 == 0) {\n\
    \                sum += lst[i] * lst[i];\n            } else if (i % 4 == 0) {\n\
    \                // Else if the current index is a multiple of 4 and not 3, cube\
    \ it.\n                sum += lst[i] * lst[i] * lst[i];\n            } else {\n\
    \                // Otherwise, do nothing.\n                sum += lst[i];\n \
    \           }\n        }\n        return sum;", "        long sum = 0;\n     \
    \   for (int i = 0; i < lst.Count; i++) {\n            if (i % 3 == 0) sum +=\
    \ lst[i] * lst[i];\n            else if (i % 4 == 0) sum += lst[i] * lst[i] *\
    \ lst[i];\n            else sum += lst[i];\n        }\n        return sum;", " \
    \       long sum = 0;\n        long currentNumber;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            currentNumber = lst[i];\n            if (i\
    \ % 3 == 0) {\n                currentNumber = currentNumber * currentNumber;\n\
    \            }\n            if (i % 4 == 0 && i % 3 != 0) {\n                currentNumber\
    \ = currentNumber * currentNumber * currentNumber;\n            }\n          \
    \  sum += currentNumber;\n        }\n        return sum;", "        long ans =\
    \ 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 3 ==\
    \ 0) {\n                lst[i] = lst[i] * lst[i];\n            }\n           \
    \ if (i % 4 == 0 && i % 3 != 0) {\n                lst[i] = lst[i] * lst[i] *\
    \ lst[i];\n            }\n            ans += lst[i];\n        }\n        return\
    \ ans;"]
stop_tokens:
- "\n    }\n"
