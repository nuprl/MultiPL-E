name: HumanEval_48_is_palindrome
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
  \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
  \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    public static\
  \ bool IsPalindrome(string text) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
  \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
  aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
  \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
  xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
  \    }\n\n}\n"
completions: ["        for (int i = 0; i < text.Length; i++) {\n            if (text[i]\
    \ != text[text.Length - i - 1]) {\n                return false;\n           \
    \ }\n        }\n        return true;", "        int n = text.Length;\n       \
    \ for (int i = 0; i < n / 2; i++) {\n            if (text[i] != text[n - i - 1])\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        int text_len = text.Length;\n        for (int i = 0; i < text_len / 2;\
    \ i++) {\n            if (text[i] != text[text_len - i - 1]) {\n             \
    \   return false;\n            }\n        }\n        return true;", "        int\
    \ l = text.Length;\n        for (int i = 0; i < l / 2; i++) {\n            if\
    \ (text[i] != text[l - i - 1]) {\n                return false;\n            }\n\
    \        }\n        return true;", "        for (int i = 0; i < text.Length /\
    \ 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n       \
    \         return false;\n            }\n        }\n        return true;", "  \
    \      int last = text.Length - 1;\n        for (int i = 0; i < last; i++) {\n\
    \            if (text[i] != text[last - i]) {\n                return false;\n\
    \            }\n        }\n        return true;", "        int len = text.Length;\n\
    \        if (len == 0) return true;\n        for (int i = 0; i < len / 2; i++)\
    \ {\n            if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;", "        for (int i = 0; i <\
    \ text.Length / 2; i++) {\n            if (text[i] != text[text.Length - i - 1])\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] !=\
    \ text[text.Length - i - 1])\n                return false;\n        }\n     \
    \   return true;", "        int i, j;\n        for (i = 0, j = text.Length - 1;\
    \ i < j; i++, j--) {\n            if (text[i] != text[j]) {\n                return\
    \ false;\n            }\n        }\n        return true;", "        for (int i\
    \ = 0; i < text.Length; i++) {\n            if (text[i] != text[text.Length -\
    \ i - 1]) {\n                return false;\n            }\n        }\n       \
    \ return true;", "        int n = text.Length;\n        for (int i = 0; i < n\
    \ / 2; i++) {\n            if (text[i] != text[n - i - 1])\n                return\
    \ false;\n        }\n        return true;", "        for (int i = 0; i < text.Length\
    \ / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n     \
    \           return false;\n            }\n        }\n        return true;", " \
    \       int half = text.Length/2;\n        for (int i = 0; i < half; i++) {\n\
    \            if (text[i] != text[text.Length - i - 1]) {\n                return\
    \ false;\n            }\n        }\n        return true;", "        for (int i\
    \ = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;", "        int left = 0;\n        int right = text.Length - 1;\n\
    \        while (left < right) {\n            if (text[left] != text[right]) {\n\
    \                return false;\n            }\n            left++;\n         \
    \   right--;\n        }\n        return true;", "        for (int i = 0; i < text.Length\
    \ / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n     \
    \           return false;\n            }\n        }\n        return true;", " \
    \       int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n    \
    \        if (text[i] != text[n - i - 1]) {\n                return false;\n  \
    \          }\n        }\n        return true;", "        int length = text.Length;\n\
    \        int half = length / 2;\n        for (int i = 0; i < half; i++) {\n  \
    \          if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;", "        int text_length = text.Length;\n\
    \        for (int i = 0; i < text_length / 2; i++) {\n            if (text[i]\
    \ != text[text_length - i - 1]) {\n                return false;\n           \
    \ }\n        }\n        return true;"]
stop_tokens:
- "\n    }\n"
