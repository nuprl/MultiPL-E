language: cs
name: HumanEval_145_order_by_points
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd103d37e50e43dfb0c7e75ba4d05dee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd103d37e50e43dfb0c7e75ba4d05dee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   // Write your code here\n        throw new NotImplementedException();\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <755f175f8ba84b1b8b5a0109bbc15d29>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]\
    \ in <755f175f8ba84b1b8b5a0109bbc15d29>:0 \n"
  stdout: ''
  timestamp: 1659823782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   Dictionary<long, Tuple<long, long>> map = new Dictionary<long, Tuple<long,\
    \ long>>();\n        for (int i = 0; i < nums.Count; i++) {\n            long\
    \ sum = 0;\n            foreach (char c in nums[i].ToString()) {\n           \
    \     sum += (long)Char.GetNumericValue(c);\n            }\n            if (!map.ContainsKey(sum))\
    \ {\n                map.Add(sum, new Tuple<long, long>(nums[i], i));\n      \
    \      } else {\n                if (map[sum].Item2 > i) {\n                 \
    \   map[sum] = new Tuple<long, long>(nums[i], i);\n                }\n       \
    \     }\n        }\n        var ret = new List<long>();\n        foreach (var\
    \ item in map.OrderBy(pair => pair.Key)) {\n            ret.Add(item.Value.Item1);\n\
    \        }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5fab6f1efd204e1b9006c46702c74f1c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5fab6f1efd204e1b9006c46702c74f1c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   Dictionary<int, List<long>> digits = new Dictionary<int, List<long>>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            int sum = nums[i].ToString().Select(x\
    \ => int.Parse(x.ToString())).Sum();\n            if (!digits.ContainsKey(sum))\
    \ {\n                digits[sum] = new List<long>();\n            }\n        \
    \    digits[sum].Add(nums[i]);\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            if (i == 0) {\n \
    \               foreach (var item in digits) {\n                    result.AddRange(item.Value);\n\
    \                }\n            } else {\n                var list = digits.OrderBy(x\
    \ => x.Key).First();\n                result.Add(list.Value[0]);\n           \
    \     list.Value.RemoveAt(0);\n                if (list.Value.Count == 0) {\n\
    \                    digits.Remove(list.Key);\n                }\n           \
    \ }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<OrderByPoints>b__0_0 (System.Char x) [0x00007] in <d234a6e757a8475a9d91710f4e3a56d9>:0\
    \ \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext\
    \ () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00024] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x00040]\
    \ in <d234a6e757a8475a9d91710f4e3a56d9>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00017] in <d234a6e757a8475a9d91710f4e3a56d9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Input string was not in a correct format.\n\
    \  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String\
    \ overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<OrderByPoints>b__0_0 (System.Char x) [0x00007] in <d234a6e757a8475a9d91710f4e3a56d9>:0\
    \ \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext\
    \ () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00024] in <e540098dd111461e91"
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   return nums.OrderBy(x => x < 0 ? -x : x).ThenBy(x => x).ToList();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae11d5d5aa23413ba6d3c8f46db49454>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae11d5d5aa23413ba6d3c8f46db49454>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        var ordered_nums = nums.OrderBy(x\
    \ => x.ToString().Select(y => long.Parse(y.ToString())).Sum());\n        foreach\
    \ (var num in ordered_nums)\n        {\n            result.Add(num);\n       \
    \ }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<OrderByPoints>b__0_1 (System.Char y) [0x00007] in <e81c2aa4d3d44604bf176fddcf7ebe08>:0\
    \ \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext\
    \ () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00025] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem+<>c.<OrderByPoints>b__0_0 (System.Int64 x) [0x0002b] in <e81c2aa4d3d44604bf176fddcf7ebe08>:0\
    \ \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[]\
    \ elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements,\
    \ System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at\
    \ System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32\
    \ count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap\
    \ (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.OrderByPoints\
    \ (System.Collections.Generic.List`1[T] nums) [0x00048] in <e81c2aa4d3d44604bf176fddcf7ebe08>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00017] in <e81c2aa4d3d44604bf176fddcf7ebe08>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not"
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   var len = nums.Count;\n        if (len == 0) {\n            return nums;\n\
    \        }\n        var result = new List<long>(nums);\n        var dict = new\
    \ Dictionary<long, List<long>>();\n        for (int i = 0; i < len; i++) {\n \
    \           var temp = nums[i];\n            long sum = 0;\n            while\
    \ (temp != 0) {\n                sum += temp % 10;\n                temp /= 10;\n\
    \            }\n            if (!dict.ContainsKey(sum)) {\n                dict[sum]\
    \ = new List<long>();\n            }\n            dict[sum].Add(nums[i]);\n  \
    \      }\n        dict = dict.OrderBy(x => x.Key).ToDictionary(x => x.Key, x =>\
    \ x.Value);\n        int index = 0;\n        foreach (var item in dict) {\n  \
    \          foreach (var i in item.Value) {\n                result[index] = i;\n\
    \                index++;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae97e5ba501b4dde8b605120968b9cc2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae97e5ba501b4dde8b605120968b9cc2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   throw new NotImplementedException();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <c3a996b745ae4a58946c9684b3dc0edd>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]\
    \ in <c3a996b745ae4a58946c9684b3dc0edd>:0 \n"
  stdout: ''
  timestamp: 1659823783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   var count = new Dictionary<long, long>();\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            count[nums[i]] = SumDigits(nums[i]);\n        }\n      \
    \  nums.Sort((a, b) => {\n            int cmp = count[a].CompareTo(count[b]);\n\
    \            if (cmp != 0) {\n                return cmp;\n            }\n   \
    \         return a.CompareTo(b);\n        });\n        return nums;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps71bwqrl.cs(19,30): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659823782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   return nums.OrderBy(n => (n > 0 ? n : -n).ToString().Sum(d => d - '0')).ThenBy(n\
    \ => nums.IndexOf(n)).ToList();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7e3e34a257147f587ba717a83b81783>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7e3e34a257147f587ba717a83b81783>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00032] in <9df4806fcd694394897dce94f643b449>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00032] in <9df4806fcd694394897dce94f643b449>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   return nums.OrderBy(n => n.ToString().Select(s => (long)Char.GetNumericValue(s)).Sum()).ThenBy(n\
    \ => nums.IndexOf(n)).ToList();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <121dd9c0e1b24d19bd74e4a2e22a90c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <121dd9c0e1b24d19bd74e4a2e22a90c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   return nums.Select((x,i) => new { X = x, I = i, Digits = Math.Abs(x).ToString().Sum(ch\
    \ => ch - '0') })\n            .OrderBy(x => x.Digits).ThenBy(x => x.I).Select(x\
    \ => x.X).ToList();\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L, (long)-1L,\
    \ (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L, (long)-11L,\
    \ (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L, (long)423L,\
    \ (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L, (long)56L,\
    \ (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L, (long)2L,\
    \ (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,\
    \ (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac88158481af4e90ad445916403b2c15>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac88158481af4e90ad445916403b2c15>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   Dictionary<long, long> sums = new Dictionary<long, long>();\n        foreach\
    \ (long n in nums) {\n            long sum = 0;\n            foreach (char c in\
    \ n.ToString()) {\n                sum += int.Parse(c.ToString());\n         \
    \   }\n            sums[n] = sum;\n        }\n        List<long> result = new\
    \ List<long>();\n        result.AddRange(sums.OrderBy(x => x.Value).ThenBy(x =>\
    \ nums.IndexOf(x.Key)).Select(x => x.Key));\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x00055]\
    \ in <51899bd33d96489283cef300d9a6b373>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00017] in <51899bd33d96489283cef300d9a6b373>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Input string was not in a correct format.\n\
    \  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String\
    \ overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x00055]\
    \ in <51899bd33d96489283cef300d9a6b373>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00017] in <51899bd33d96489283cef300d9a6b373>:0 \n"
  stdout: ''
  timestamp: 1659823783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   // Find sum of digits for each number and add it to a dictionary\n       \
    \ // as a key and list of indexes as a value.\n        // Then create a list of\
    \ keys from the dictionary and sort it\n        // in ascending order. After that,\
    \ iterate through keys\n        // and indexes and add numbers to the result list.\n\
    \        Dictionary<long, List<int>> sumOfDigits = new Dictionary<long, List<int>>();\n\
    \        long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n     \
    \       sum = SumOfDigits(nums[i]);\n            if (sumOfDigits.ContainsKey(sum))\
    \ {\n                sumOfDigits[sum].Add(i);\n            } else {\n        \
    \        sumOfDigits.Add(sum, new List<int>() { i });\n            }\n       \
    \ }\n        List<long> sortedKeys = sumOfDigits.Keys.ToList();\n        sortedKeys.Sort();\n\
    \        List<long> result = new List<long>();\n        foreach (long key in sortedKeys)\
    \ {\n            foreach (int index in sumOfDigits[key]) {\n                result.Add(nums[index]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcrijjkdx.cs(25,19): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659823782
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   // Implementation\n        var tmp = new Tuple<long, int>[nums.Count];\n \
    \       for (int i = 0; i < nums.Count; i++) {\n            tmp[i] = new Tuple<long,\
    \ int>(nums[i], i);\n        }\n        Array.Sort(tmp, (a, b) => {\n        \
    \    var da = SumDigits(a.Item1);\n            var db = SumDigits(b.Item1);\n\
    \            if (da == db) {\n                return a.Item2.CompareTo(b.Item2);\n\
    \            }\n            return da.CompareTo(db);\n        });\n        var\
    \ res = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n  \
    \          res.Add(tmp[i].Item1);\n        }\n        return res;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgjh_0zkl.cs(23,22): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpgjh_0zkl.cs(24,22): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659823782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   // for each number, add up all the digits\n        // sort the numbers by\
    \ the sum of digits\n\n        return nums;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <37723453c4334ce4900425677a114e28>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <37723453c4334ce4900425677a114e28>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   var res = new List<long>();\n        while (nums.Count != 0) {\n         \
    \   var x = nums.Min(num => SumDigits(num));\n            var minNums = nums.Where(num\
    \ => SumDigits(num) == x).ToList();\n            res.AddRange(minNums);\n    \
    \        nums.RemoveAll(num => minNums.Contains(num));\n        }\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpem_lcqut.cs(19,37): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpem_lcqut.cs(20,45): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659823782
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   // replace 1,1 with your code\n        List<long> res = new List<long>();\n\
    \        int idx = 0;\n        for (int i = 0; i < nums.Count; i++) {\n      \
    \      int sum = 0;\n            foreach (var c in nums[i].ToString()) {\n   \
    \             sum += int.Parse(c.ToString());\n            }\n            res.Add(sum\
    \ + 10 * i);\n        }\n        res.Sort();\n        for (int i = 0; i < res.Count;\
    \ i++) {\n            res[i] = nums[res[i] / 10];\n        }\n        return res;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmx95a764.cs(29,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpmx95a764.cs(19,13): warning CS0219: The variable ''idx'' is assigned but
    its value is never used

    '
  timestamp: 1659823782
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   Dictionary<long, long> sums = new Dictionary<long, long>();\n        foreach\
    \ (long num in nums) {\n            long sum = 0;\n            while (num != 0)\
    \ {\n                sum += num % 10;\n                num /= 10;\n          \
    \  }\n            sums[sum] = 1;\n        }\n        return sums.Keys.ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk_imytfw.cs(22,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659823782
