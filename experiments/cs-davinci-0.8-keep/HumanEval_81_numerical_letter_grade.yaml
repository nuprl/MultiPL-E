name: HumanEval_81_numerical_letter_grade
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // It is the last week of the semester and the teacher has to give\
  \ the grades\n    // to students. The teacher has been making her own algorithm\
  \ for grading.\n    // The only problem is, she has lost the code she used for grading.\n\
  \    // She has given you a list of GPAs for some students and you have to write\
  \ \n    // a function that can output a list of letter grades using the following\
  \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n   \
  \ // > 3.7                A \n    // > 3.3                A- \n    // > 3.0    \
  \            B+\n    // > 2.7                B \n    // > 2.3                B-\n\
  \    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3   \
  \             C-\n    // > 1.0                D+ \n    // > 0.7                D\
  \ \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n\
  \    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\
  \    public static List<string> NumericalLetterGrade(List<float> grades) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NumericalLetterGrade((new\
  \ List<float>(new float[]{(float)4.0f, (float)3L, (float)1.7f, (float)2L, (float)3.5f}))).Equals((new\
  \ List<string>(new string[]{(string)\"A+\", (string)\"B\", (string)\"C-\", (string)\"\
  C\", (string)\"A-\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new\
  \ float[]{(float)1.2f}))).Equals((new List<string>(new string[]{(string)\"D+\"}))));\n\
  \    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)0.5f}))).Equals((new\
  \ List<string>(new string[]{(string)\"D-\"}))));\n    Debug.Assert(NumericalLetterGrade((new\
  \ List<float>(new float[]{(float)0.0f}))).Equals((new List<string>(new string[]{(string)\"\
  E\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)1.0f,\
  \ (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f}))).Equals((new List<string>(new\
  \ string[]{(string)\"D\", (string)\"D-\", (string)\"C-\", (string)\"B\", (string)\"\
  B+\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)0.0f,\
  \ (float)0.7f}))).Equals((new List<string>(new string[]{(string)\"E\", (string)\"\
  D-\"}))));\n    }\n\n}\n"
completions: ["        List<string> a = new List<string>();\n        foreach (float\
    \ b in grades) {\n            if (b == 4.0) {\n                a.Add(\"A+\");\n\
    \            } else if (b > 3.7) {\n                a.Add(\"A\");\n          \
    \  } else if (b > 3.3) {\n                a.Add(\"A-\");\n            } else if\
    \ (b > 3.0) {\n                a.Add(\"B+\");\n            } else if (b > 2.7)\
    \ {\n                a.Add(\"B\");\n            } else if (b > 2.3) {\n      \
    \          a.Add(\"B-\");\n            } else if (b > 2.0) {\n               \
    \ a.Add(\"C+\");\n            } else if (b > 1.7) {\n                a.Add(\"\
    C\");\n            } else if (b > 1.3) {\n                a.Add(\"C-\");\n   \
    \         } else if (b > 1.0) {\n                a.Add(\"D+\");\n            }\
    \ else if (b > 0.7) {\n                a.Add(\"D\");\n            } else if (b\
    \ > 0.0) {\n                a.Add(\"D-\");\n            } else {\n           \
    \     a.Add(\"E\");\n            }\n        }\n        return a;", "        return\
    \ grades.Select(grade => {\n            if (grade == 4.0) return \"A+\";\n   \
    \         if (grade > 3.7) return \"A\";\n            if (grade > 3.3) return\
    \ \"A-\";\n            if (grade > 3.0) return \"B+\";\n            if (grade\
    \ > 2.7) return \"B\";\n            if (grade > 2.3) return \"B-\";\n        \
    \    if (grade > 2.0) return \"C+\";\n            if (grade > 1.7) return \"C\"\
    ;\n            if (grade > 1.3) return \"C-\";\n            if (grade > 1.0) return\
    \ \"D+\";\n            if (grade > 0.7) return \"D\";\n            if (grade >\
    \ 0.0) return \"D-\";\n            return \"E\";\n        }).ToList();", "   \
    \     List<string> finalGrades = new List<string>();\n        foreach (float number\
    \ in grades) {\n            finalGrades.Add(grader(number));\n        }\n    \
    \    return finalGrades;", "        List<string> output = new List<string>();\n\
    \        // Write your code here!\n        foreach (float grade in grades) {\n\
    \            if (grade == 4.0) {\n                output.Add(\"A+\");\n      \
    \      } else if (grade > 3.7) {\n                output.Add(\"A\");\n       \
    \     } else if (grade > 3.3) {\n                output.Add(\"A-\");\n       \
    \     } else if (grade > 3.0) {\n                output.Add(\"B+\");\n       \
    \     } else if (grade > 2.7) {\n                output.Add(\"B\");\n        \
    \    } else if (grade > 2.3) {\n                output.Add(\"B-\");\n        \
    \    } else if (grade > 2.0) {\n                output.Add(\"C+\");\n        \
    \    } else if (grade > 1.7) {\n                output.Add(\"C\");\n         \
    \   } else if (grade > 1.3) {\n                output.Add(\"C-\");\n         \
    \   } else if (grade > 1.0) {\n                output.Add(\"D+\");\n         \
    \   } else if (grade > 0.7) {\n                output.Add(\"D\");\n          \
    \  } else if (grade > 0.0) {\n                output.Add(\"D-\");\n          \
    \  } else {\n                output.Add(\"E\");\n            }\n        }\n  \
    \      return output;", "        return grades.Select(grade => {\n           \
    \ if (grade >= 4.0) {\n                return \"A+\";\n            } else if (grade\
    \ >= 3.7) {\n                return \"A\";\n            } else if (grade >= 3.3)\
    \ {\n                return \"A-\";\n            } else if (grade >= 3.0) {\n\
    \                return \"B+\";\n            } else if (grade >= 2.7) {\n    \
    \            return \"B\";\n            } else if (grade >= 2.3) {\n         \
    \       return \"B-\";\n            } else if (grade >= 2.0) {\n             \
    \   return \"C+\";\n            } else if (grade >= 1.7) {\n                return\
    \ \"C\";\n            } else if (grade >= 1.3) {\n                return \"C-\"\
    ;\n            } else if (grade >= 1.0) {\n                return \"D+\";\n  \
    \          } else if (grade >= 0.7) {\n                return \"D\";\n       \
    \     } else if (grade >= 0.0) {\n                return \"D-\";\n           \
    \ } else {\n                return \"E\";\n            }\n        }).ToList();",
  "        var letterGrades = new List<string>();\n        foreach (var g in grades)\
    \ {\n            if (g > 4.0)\n                letterGrades.Add(\"A+\");\n   \
    \         else if (g > 3.7)\n                letterGrades.Add(\"A\");\n      \
    \      else if (g > 3.3)\n                letterGrades.Add(\"A-\");\n        \
    \    else if (g > 3.0)\n                letterGrades.Add(\"B+\");\n          \
    \  else if (g > 2.7)\n                letterGrades.Add(\"B\");\n            else\
    \ if (g > 2.3)\n                letterGrades.Add(\"B-\");\n            else if\
    \ (g > 2.0)\n                letterGrades.Add(\"C+\");\n            else if (g\
    \ > 1.7)\n                letterGrades.Add(\"C\");\n            else if (g > 1.3)\n\
    \                letterGrades.Add(\"C-\");\n            else if (g > 1.0)\n  \
    \              letterGrades.Add(\"D+\");\n            else if (g > 0.7)\n    \
    \            letterGrades.Add(\"D\");\n            else if (g > 0.0)\n       \
    \         letterGrades.Add(\"D-\");\n            else\n                letterGrades.Add(\"\
    E\");\n        }\n        return letterGrades;", "        // Your code here\n\
    \        return new List<string>();", "        // Your Code Here\n        List<string>\
    \ result = new List<string>();\n        foreach (float grade in grades) {\n  \
    \          // Assign the value of each grade to a string.\n            if (grade\
    \ >= 4.0) {\n                result.Add(\"A+\");\n            } else if (grade\
    \ >= 3.7) {\n                result.Add(\"A\");\n            } else if (grade\
    \ >= 3.3) {\n                result.Add(\"A-\");\n            } else if (grade\
    \ >= 3.0) {\n                result.Add(\"B+\");\n            } else if (grade\
    \ >= 2.7) {\n                result.Add(\"B\");\n            } else if (grade\
    \ >= 2.3) {\n                result.Add(\"B-\");\n            } else if (grade\
    \ >= 2.0) {\n                result.Add(\"C+\");\n            } else if (grade\
    \ >= 1.7) {\n                result.Add(\"C\");\n            } else if (grade\
    \ >= 1.3) {\n                result.Add(\"C-\");\n            } else if (grade\
    \ >= 1.0) {\n                result.Add(\"D+\");\n            } else if (grade\
    \ >= 0.7) {\n                result.Add(\"D\");\n            } else if (grade\
    \ >= 0.0) {\n                result.Add(\"D-\");\n            } else {\n     \
    \           result.Add(\"E\");\n            }\n        }\n        return result;",
  "        // TODO: Implement\n        return null;", "        List<string> letterGrades\
    \ = new List<string>();\n        foreach (float GPA in grades) {\n           \
    \ if (GPA == 4.0) {\n                letterGrades.Add(\"A+\");\n            }\
    \ else if (GPA > 3.7) {\n                letterGrades.Add(\"A\");\n          \
    \  } else if (GPA > 3.3) {\n                letterGrades.Add(\"A-\");\n      \
    \      } else if (GPA > 3.0) {\n                letterGrades.Add(\"B+\");\n  \
    \          } else if (GPA > 2.7) {\n                letterGrades.Add(\"B\");\n\
    \            } else if (GPA > 2.3) {\n                letterGrades.Add(\"B-\"\
    );\n            } else if (GPA > 2.0) {\n                letterGrades.Add(\"C+\"\
    );\n            } else if (GPA > 1.7) {\n                letterGrades.Add(\"C\"\
    );\n            } else if (GPA > 1.3) {\n                letterGrades.Add(\"C-\"\
    );\n            } else if (GPA > 1.0) {\n                letterGrades.Add(\"D+\"\
    );\n            } else if (GPA > 0.7) {\n                letterGrades.Add(\"D\"\
    );\n            } else if (GPA > 0.0) {\n                letterGrades.Add(\"D-\"\
    );\n            } else {\n                letterGrades.Add(\"E\");\n         \
    \   }\n        }\n        return letterGrades;", "        List<string> grade =\
    \ new List<string>();\n        foreach (float g in grades) {\n            if (g\
    \ > 4.0) {\n                grade.Add(\"A+\");\n            } else if (g > 3.7)\
    \ {\n                grade.Add(\"A\");\n            } else if (g > 3.3) {\n  \
    \              grade.Add(\"A-\");\n            } else if (g > 3.0) {\n       \
    \         grade.Add(\"B+\");\n            } else if (g > 2.7) {\n            \
    \    grade.Add(\"B\");\n            } else if (g > 2.3) {\n                grade.Add(\"\
    B-\");\n            } else if (g > 2.0) {\n                grade.Add(\"C+\");\n\
    \            } else if (g > 1.7) {\n                grade.Add(\"C\");\n      \
    \      } else if (g > 1.3) {\n                grade.Add(\"C-\");\n           \
    \ } else if (g > 1.0) {\n                grade.Add(\"D+\");\n            } else\
    \ if (g > 0.7) {\n                grade.Add(\"D\");\n            } else if (g\
    \ > 0.0) {\n                grade.Add(\"D-\");\n            } else {\n       \
    \         grade.Add(\"E\");\n            }\n        }\n        return grade;",
  "        List<string> letters = new List<string>();\n        foreach (float g in\
    \ grades) {\n            if (g == 4.0) {\n                letters.Add(\"A+\");\n\
    \            } else if (g > 3.7) {\n                letters.Add(\"A\");\n    \
    \        } else if (g > 3.3) {\n                letters.Add(\"A-\");\n       \
    \     } else if (g > 3.0) {\n                letters.Add(\"B+\");\n          \
    \  } else if (g > 2.7) {\n                letters.Add(\"B\");\n            } else\
    \ if (g > 2.3) {\n                letters.Add(\"B-\");\n            } else if\
    \ (g > 2.0) {\n                letters.Add(\"C+\");\n            } else if (g\
    \ > 1.7) {\n                letters.Add(\"C\");\n            } else if (g > 1.3)\
    \ {\n                letters.Add(\"C-\");\n            } else if (g > 1.0) {\n\
    \                letters.Add(\"D+\");\n            } else if (g > 0.7) {\n   \
    \             letters.Add(\"D\");\n            } else if (g > 0.0) {\n       \
    \         letters.Add(\"D-\");\n            } else {\n                letters.Add(\"\
    E\");\n            }\n        }\n        return letters;", "        var gradesToLetter\
    \ = new Dictionary<float, char>\n        {\n            {4.0f, 'A'},\n       \
    \     {3.7f, 'A'},\n            {3.3f, 'A'},\n            {3.0f, 'B'},\n     \
    \       {2.7f, 'B'},\n            {2.3f, 'B'},\n            {2.0f, 'C'},\n   \
    \         {1.7f, 'C'},\n            {1.3f, 'C'},\n            {1.0f, 'D'},\n \
    \           {0.7f, 'D'},\n            {0.0f, 'E'}\n        };\n        var ret\
    \ = new List<string>();\n        foreach (var g in grades) {\n            var\
    \ grade = ' ';\n            var sign = ' ';\n            foreach (var key in gradesToLetter.Keys)\
    \ {\n                if (g >= key) {\n                    grade = gradesToLetter[key];\n\
    \                    break;\n                }\n            }\n            switch\
    \ (grade) {\n                case 'A':\n                    if (g == 4.0f) sign\
    \ = '+';\n                    else if (g >= 3.3f) sign = '-';\n              \
    \      break;\n                case 'B':\n                    if (g >= 3.0f) sign\
    \ = '+';\n                    else if (g >= 2.3f) sign = '-';\n              \
    \      break;\n                case 'C':\n                    if (g >= 2.0f) sign\
    \ = '+';\n                    else if (g >= 1.3f) sign = '-';\n              \
    \      break;\n                case 'D':\n                    if (g >= 1.0f) sign\
    \ = '+';\n                    else if (g >= 0.7f) sign = '-';\n              \
    \      break;\n            }\n            ret.Add(grade + sign);\n        }\n\
    \        return ret;", "        List<string> result = new List<string>();\n  \
    \      foreach (float grade in grades) {\n            if (grade >= 4.0) {\n  \
    \              result.Add(\"A+\");\n            } else if (grade >= 3.7) {\n \
    \               result.Add(\"A\");\n            } else if (grade >= 3.3) {\n \
    \               result.Add(\"A-\");\n            } else if (grade >= 3.0) {\n\
    \                result.Add(\"B+\");\n            } else if (grade >= 2.7) {\n\
    \                result.Add(\"B\");\n            } else if (grade >= 2.3) {\n\
    \                result.Add(\"B-\");\n            } else if (grade >= 2.0) {\n\
    \                result.Add(\"C+\");\n            } else if (grade >= 1.7) {\n\
    \                result.Add(\"C\");\n            } else if (grade >= 1.3) {\n\
    \                result.Add(\"C-\");\n            } else if (grade >= 1.0) {\n\
    \                result.Add(\"D+\");\n            } else if (grade >= 0.7) {\n\
    \                result.Add(\"D\");\n            } else if (grade >= 0.0) {\n\
    \                result.Add(\"D-\");\n            } else {\n                result.Add(\"\
    E\");\n            }\n        }\n        return result;", "        // Write your\
    \ code here\n        return null;", "        // Write your code here\n       \
    \ List<string> result = new List<string>();\n        foreach (float f in grades)\
    \ {\n            if (f == 4.0) result.Add(\"A+\");\n            else if (f > 3.7)\
    \ result.Add(\"A\");\n            else if (f > 3.3) result.Add(\"A-\");\n    \
    \        else if (f > 3.0) result.Add(\"B+\");\n            else if (f > 2.7)\
    \ result.Add(\"B\");\n            else if (f > 2.3) result.Add(\"B-\");\n    \
    \        else if (f > 2.0) result.Add(\"C+\");\n            else if (f > 1.7)\
    \ result.Add(\"C\");\n            else if (f > 1.3) result.Add(\"C-\");\n    \
    \        else if (f > 1.0) result.Add(\"D+\");\n            else if (f > 0.7)\
    \ result.Add(\"D\");\n            else if (f > 0.0) result.Add(\"D-\");\n    \
    \        else result.Add(\"E\");\n        }\n        return result;", "      \
    \  List<string> letter_grades = new List<string>();\n        foreach (float g\
    \ in grades) {\n            if (g >= 4.0) {\n                letter_grades.Add(\"\
    A+\");\n            } else if (g >= 3.7) {\n                letter_grades.Add(\"\
    A\");\n            } else if (g >= 3.3) {\n                letter_grades.Add(\"\
    A-\");\n            } else if (g >= 3.0) {\n                letter_grades.Add(\"\
    B+\");\n            } else if (g >= 2.7) {\n                letter_grades.Add(\"\
    B\");\n            } else if (g >= 2.3) {\n                letter_grades.Add(\"\
    B-\");\n            } else if (g >= 2.0) {\n                letter_grades.Add(\"\
    C+\");\n            } else if (g >= 1.7) {\n                letter_grades.Add(\"\
    C\");\n            } else if (g >= 1.3) {\n                letter_grades.Add(\"\
    C-\");\n            } else if (g >= 1.0) {\n                letter_grades.Add(\"\
    D+\");\n            } else if (g >= 0.7) {\n                letter_grades.Add(\"\
    D\");\n            } else if (g >= 0.0) {\n                letter_grades.Add(\"\
    D-\");\n            } else {\n                letter_grades.Add(\"E\");\n    \
    \        }\n        }\n        return letter_grades;", "        List<string> output\
    \ = new List<string>();\n        for (int i = 0; i < grades.Count; i++) {\n  \
    \          if (grades[i] == 4.0) {\n                output.Add(\"A+\");\n    \
    \        } else if (grades[i] >= 3.7 && grades[i] < 4.0) {\n                output.Add(\"\
    A\");\n            } else if (grades[i] >= 3.3 && grades[i] < 3.7) {\n       \
    \         output.Add(\"A-\");\n            } else if (grades[i] >= 3.0 && grades[i]\
    \ < 3.3) {\n                output.Add(\"B+\");\n            } else if (grades[i]\
    \ >= 2.7 && grades[i] < 3.0) {\n                output.Add(\"B\");\n         \
    \   } else if (grades[i] >= 2.3 && grades[i] < 2.7) {\n                output.Add(\"\
    B-\");\n            } else if (grades[i] >= 2.0 && grades[i] < 2.3) {\n      \
    \          output.Add(\"C+\");\n            } else if (grades[i] >= 1.7 && grades[i]\
    \ < 2.0) {\n                output.Add(\"C\");\n            } else if (grades[i]\
    \ >= 1.3 && grades[i] < 1.7) {\n                output.Add(\"C-\");\n        \
    \    } else if (grades[i] >= 1.0 && grades[i] < 1.3) {\n                output.Add(\"\
    D+\");\n            } else if (grades[i] >= 0.7 && grades[i] < 1.0) {\n      \
    \          output.Add(\"D\");\n            } else if (grades[i] >= 0.0 && grades[i]\
    \ < 0.7) {\n                output.Add(\"D-\");\n            } else if (grades[i]\
    \ == 0.0) {\n                output.Add(\"E\");\n            }\n        }\n  \
    \      return output;", "        var result = new List<string>();\n        foreach\
    \ (var grade in grades) {\n            if (grade >= 4.0) {\n                result.Add(\"\
    A+\");\n            } else if (grade >= 3.7) {\n                result.Add(\"\
    A\");\n            } else if (grade >= 3.3) {\n                result.Add(\"A-\"\
    );\n            } else if (grade >= 3.0) {\n                result.Add(\"B+\"\
    );\n            } else if (grade >= 2.7) {\n                result.Add(\"B\");\n\
    \            } else if (grade >= 2.3) {\n                result.Add(\"B-\");\n\
    \            } else if (grade >= 2.0) {\n                result.Add(\"C+\");\n\
    \            } else if (grade >= 1.7) {\n                result.Add(\"C\");\n\
    \            } else if (grade >= 1.3) {\n                result.Add(\"C-\");\n\
    \            } else if (grade >= 1.0) {\n                result.Add(\"D+\");\n\
    \            } else if (grade >= 0.7) {\n                result.Add(\"D\");\n\
    \            } else if (grade >= 0.0) {\n                result.Add(\"D-\");\n\
    \            } else {\n                result.Add(\"E\");\n            }\n   \
    \     }\n        return result;", '        throw new NotImplementedException();']
stop_tokens:
- "\n    }\n"
