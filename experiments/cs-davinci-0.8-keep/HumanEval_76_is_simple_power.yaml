name: HumanEval_76_is_simple_power
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Your task is to write a function that returns true if a number\
  \ x is a simple\n    // power of n and false in other cases.\n    // x is a simple\
  \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) => true\n\
  \    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) => true\n  \
  \  // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) => false\n  \
  \  // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
  \ x, long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
  \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
  \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
  \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n \
  \   Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
  \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
  \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
  \ (12L)) == (true));\n    }\n\n}\n"
completions: ["        var power = (int) Math.Log(x, n);\n        var result = Math.Pow(n,\
    \ power);\n        return result == x;", "        if (x == 1 && n == 1) {\n  \
    \          return true;\n        }\n        int k = 0;\n        while (x % n ==\
    \ 0) {\n            x /= n;\n            k++;\n        }\n        return x ==\
    \ 1 && k > 0;", "        var p = (int) Math.Log(x, n);\n        return n == 1\
    \ || n == x || n > 1 && n.Pow(p) == x;", "        // your code here.\n       \
    \ int cnt = 0;\n        long num = n;\n        while (num <= x) {\n          \
    \  if (num == x) {\n                cnt++;\n                break;\n         \
    \   }\n            num *= n;\n        }\n        return cnt == 1;", "        for\
    \ (long y = 1; y * y <= x; y++) {\n            if (x % y == 0) {\n           \
    \     long z = x / y;\n                if (z != y && BigInteger.Pow(n, y) == x)\
    \ return true;\n                if (BigInteger.Pow(n, z) == x) return true;\n\
    \            }\n        }\n        return false;", "        double ln = Math.Log(x,\
    \ n);\n        double log = Math.Log10(ln);\n        if (Math.Abs(Math.Truncate(log)\
    \ - log) <= 0.000000000000001) {\n            return true;\n        }\n      \
    \  return false;", "        // Please insert your code here\n        throw new\
    \ NotImplementedException();", '        return Math.Log(x, n) % 1 == 0;', '        throw
    new NotImplementedException();', "        // your code goes here\n        var\
    \ result = false;\n        if (x == 1) {\n            result = true;\n       \
    \ } else {\n            var power = 1;\n            var log = Math.Log(x, n);\n\
    \            if (log == (int)log) {\n                result = true;\n        \
    \    }\n        }\n        return result;", "        // return true if x is a\
    \ simple power of n, false otherwise\n        if (x == 1) {\n            return\
    \ true;\n        }\n        long p = n;\n        while (p < x) {\n           \
    \ p *= n;\n        }\n        return p == x;", "        if (x == 1) {\n      \
    \      return true;\n        }\n        for (int i = 2; i <= Math.Sqrt(x); i++)\
    \ {\n            if (n * n == x) {\n                return true;\n           \
    \ }\n            if (x % i == 0) {\n                return false;\n          \
    \  }\n        }\n        return false;", "        // First check if n is a power\
    \ of x\n        double a = Math.Log(x) / Math.Log(n);\n        // Then check if\
    \ a is integer\n        return (Math.Abs(a - Math.Round(a)) < 0.000000000000001);",
  "        int z = 0;\n        long y = x;\n        while (y % n == 0) {\n       \
    \     y /= n;\n            z++;\n        }\n        return y == 1;", "       \
    \ // your code here\n        return BigInteger.Pow(n, (int)Math.Log(x, n)) ==\
    \ x;", "        long root = (long)Math.Pow(x, 1.0 / n);\n        return Math.Pow(root,\
    \ n) == x;", "        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        // WARNING: this is inexact and gives wrong answers for all large numbers!\n\
    \        double d = Math.Log(x) / Math.Log(n);\n        return Math.Abs(d - Math.Round(d))\
    \ < 1e-14;", "        // n**int = x <=> int * lg(n) = lg(x)\n        // int *\
    \ lg(n) - lg(x) < epsilon\n        return Math.Abs(Math.Log(x, n) % 1) < 1e-5;",
  "        long? y = null;\n        long x1 = x;\n        while (x > 1) {\n      \
    \      if (x % n != 0) {\n                return false;\n            }\n     \
    \       y = x;\n            x /= n;\n        }\n        return y == x1;", '        return
    Math.Log(x) / Math.Log(n) % 1 == 0;']
stop_tokens:
- "\n    }\n"
