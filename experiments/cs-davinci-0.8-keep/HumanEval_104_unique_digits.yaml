name: HumanEval_104_unique_digits
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of positive integers x. return a sorted list of\
  \ all \n    // elements that hasn't any even digit.\n    // Note: Returned list\
  \ should be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
  \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422, 10])\n\
  \    // []\n    public static List<long> UniqueDigits(List<long> x) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueDigits((new\
  \ List<long>(new long[]{(long)15L, (long)33L, (long)1422L, (long)1L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)15L, (long)33L}))));\n    Debug.Assert(UniqueDigits((new\
  \ List<long>(new long[]{(long)152L, (long)323L, (long)1422L, (long)10L}))).Equals((new\
  \ List<long>())));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)12345L,\
  \ (long)2033L, (long)111L, (long)151L}))).Equals((new List<long>(new long[]{(long)111L,\
  \ (long)151L}))));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)135L,\
  \ (long)103L, (long)31L}))).Equals((new List<long>(new long[]{(long)31L, (long)135L}))));\n\
  \    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        for (int i =\
    \ 0; i < x.Count; i++) {\n            if (x[i] % 2 != 0) {\n                result.Add(x[i]);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        // Your code here.\n        return result;", "      \
    \  var r = new List<long>();\n        foreach (var a in x) {\n            var\
    \ v = a;\n            var has_even = false;\n            while (v > 0) {\n   \
    \             var n = v % 10;\n                if (n % 2 == 0) {\n           \
    \         has_even = true;\n                    break;\n                }\n  \
    \              v /= 10;\n            }\n            if (!has_even) {\n       \
    \         r.Add(a);\n            }\n        }\n        r.Sort();\n        return\
    \ r;", "        // TODO: Implement me\n        return new List<long>();", "  \
    \      var res = new List<long>();\n        foreach (var l in x) {\n         \
    \   if (HasEvenDigit(l)) {\n                continue;\n            }\n       \
    \     res.Add(l);\n        }\n        res.Sort();\n        return res;", "   \
    \     var answer = new List<long>();\n        foreach (var num in x) {\n     \
    \       if (num == 0) {\n                continue;\n            }\n          \
    \  while (num > 0) {\n                if (num % 2 == 0) {\n                  \
    \  break;\n                }\n                num /= 10;\n            }\n    \
    \        if (num == 0) {\n                answer.Add(num);\n            }\n  \
    \      }\n        return answer;", "        // Your code here\n        return\
    \ null;", "        // TODO: Implement this\n        return null;", '        return
    x.Where(v => v.ToString().All(c => c.ToString() != "0" && c.ToString() != "2"
    && c.ToString() != "4" && c.ToString() != "6" && c.ToString() != "8")).ToList();',
  '        return new List<long>();', '        return x.Where(number => number.ToString().All(ch
    => ch % 2 != 0)).ToList();', "        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < x.Count; i++) {\n            int j = 0;\n       \
    \     while (x[i] != 0) {\n                if (x[i] % 2 == 0) {\n            \
    \        break;\n                }\n                j++;\n                x[i]\
    \ /= 10;\n            }\n            if (x[i] == 0) {\n                result.Add(x[i]);\n\
    \            }\n        }\n        result.Sort();\n        return result;", '        return
    x.Where(num => !IsEven(num)).ToList();', '        return x.Where(y => !y.ToString().Any(n
    => n % 2 == 0)).ToList();', "        // check if integer has even digit\n    \
    \    Func<long, bool> hasEvenDigit = (n) => {\n            while (n > 0) {\n \
    \               int r = (int)(n % 10);\n                if (r % 2 == 0) {\n  \
    \                  return true;\n                }\n                n /= 10;\n\
    \            }\n            return false;\n        };\n        // main\n     \
    \   return x.Where(e => !hasEvenDigit(e)).OrderBy(n => n).ToList();", "      \
    \  var res = new List<long>();\n        foreach (var num in x) {\n           \
    \ var unique = true;\n            foreach (var digit in num.ToString()) {\n  \
    \              if (digit % 2 == 0) {\n                    unique = false;\n  \
    \                  break;\n                }\n            }\n            if (unique)\
    \ {\n                res.Add(num);\n            }\n        }\n        res.Sort();\n\
    \        return res;", "        var result = new List<long>();\n        foreach\
    \ (var v in x) {\n            var unique = true;\n            while (v > 0) {\n\
    \                var d = v % 10;\n                if (d % 2 == 0) {\n        \
    \            unique = false;\n                    break;\n                }\n\
    \                v /= 10;\n            }\n            if (unique) result.Add(v);\n\
    \        }\n        result.Sort();\n        return result;", "        return x.Where(item\
    \ =>\n                item.ToString().ToCharArray().All(digit => digit % 2 !=\
    \ 0)\n            ).ToList();", '        return x.Where(i => !i.ToString().Any(d
    => d % 2 == 0)).ToList();', '        throw new NotImplementedException();']
stop_tokens:
- "\n    }\n"
