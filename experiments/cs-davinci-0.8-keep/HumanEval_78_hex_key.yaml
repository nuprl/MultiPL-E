name: HumanEval_78_hex_key
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You have been tasked to write a function that receives \n  \
  \  // a hexadecimal number as a string and counts the number of hexadecimal \n \
  \   // digits that are primes (prime number, or a prime, is a natural number \n\
  \    // greater than 1 that is not a product of two smaller natural numbers).\n\
  \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
  \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
  \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
  \ 13).\n    // Note: you may assume the input is always correct or empty string,\
  \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n   \
  \ // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output\
  \ should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For\
  \ num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"\
  \ the output should be 2.\n    public static long HexKey(string num) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
  AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
  ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
  123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
  )) == (12L));\n    }\n\n}\n"
completions: ["        var dictionary = new Dictionary<char, int>();\n        dictionary.Add('0',\
    \ 0);\n        dictionary.Add('1', 1);\n        dictionary.Add('2', 2);\n    \
    \    dictionary.Add('3', 3);\n        dictionary.Add('4', 4);\n        dictionary.Add('5',\
    \ 5);\n        dictionary.Add('6', 6);\n        dictionary.Add('7', 7);\n    \
    \    dictionary.Add('8', 8);\n        dictionary.Add('9', 9);\n        dictionary.Add('A',\
    \ 10);\n        dictionary.Add('B', 11);\n        dictionary.Add('C', 12);\n \
    \       dictionary.Add('D', 13);\n        dictionary.Add('E', 14);\n        dictionary.Add('F',\
    \ 15);\n        var arr = num.ToCharArray();\n        var result = 0;\n      \
    \  for (int i = 0; i < arr.Length; i++) {\n            if (dictionary[arr[i]]\
    \ == 2 || dictionary[arr[i]] == 3 || dictionary[arr[i]] == 5 || dictionary[arr[i]]\
    \ == 7 || dictionary[arr[i]] == 11 || dictionary[arr[i]] == 13)\n            \
    \    result++;\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (char c in num) {\n            if (Prime(Hex2Dec(c))) {\n   \
    \             result++;\n            }\n        }\n        return result;", " \
    \       Dictionary<char, int> hexDigits = new Dictionary<char, int>() {\n    \
    \        {'0', 0}, {'1', 1}, {'2', 2}, {'3', 3}, {'4', 4}, {'5', 5}, {'6', 6},\
    \ {'7', 7}, {'8', 8}, {'9', 9}, {'A', 10}, {'B', 11}, {'C', 12}, {'D', 13}, {'E',\
    \ 14}, {'F', 15}\n        };\n        return hexDigits.Sum(x => x.Value.IsPrime()\
    \ ? 1 : 0);", "        long count = 0;\n        foreach (char c in num) {\n  \
    \          switch (c) {\n                case '2':\n                case '3':\n\
    \                case '5':\n                case '7':\n                case 'B':\n\
    \                case 'D':\n                    count++;\n                   \
    \ break;\n            }\n        }\n        return count;", "        if (num.Length\
    \ == 0) {\n            return 0;\n        }\n        // Your code is here...\n\
    \        var decNum = (BigInteger)Convert.ToInt64(num, 16);\n        var decCount\
    \ = 0;\n        var primes = new[] { 2, 3, 5, 7, 11, 13 };\n        while (decNum\
    \ > 0) {\n            decCount++;\n            decNum /= 10;\n        }\n    \
    \    var hexCount = 0;\n        foreach (var i in primes) {\n            if (i\
    \ <= decCount) {\n                hexCount++;\n            }\n        }\n    \
    \    return hexCount;", "        // Write your code here\n        long count =\
    \ 0;\n        var primes = new long[] { 2, 3, 5, 7, 11, 13 };\n        var hex\
    \ = new string[] { \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\" };\n        for (int i =\
    \ 0; i < num.Length; i++) {\n            var n = Array.IndexOf(hex, num[i].ToString());\n\
    \            if (Array.IndexOf(primes, n) > -1) {\n                count++;\n\
    \            }\n        }\n        return count;", '        return (long)num.Where(x
    => "2357BDF".Contains(x)).Count();', "        var list = new int[] { 2, 3, 5,\
    \ 7, 11, 13 };\n        var dict = new Dictionary<char, int> { { '0', 0 }, { '1',\
    \ 1 }, { '2', 2 }, { '3', 3 }, { '4', 4 }, { '5', 5 }, { '6', 6 }, { '7', 7 },\
    \ { '8', 8 }, { '9', 9 }, { 'A', 10 }, { 'B', 11 }, { 'C', 12 }, { 'D', 13 },\
    \ { 'E', 14 }, { 'F', 15 } };\n        var len = num.Length;\n        var res\
    \ = 0;\n        foreach (var item in list) {\n            var par = (BigInteger)item;\n\
    \            var n = len - 1;\n            while (n > 0) {\n                par\
    \ *= 16;\n                n--;\n            }\n            par -= 1;\n       \
    \     var i = 0;\n            var num1 = num;\n            while (i < len) {\n\
    \                var current = dict[num1[i]];\n                par -= current;\n\
    \                i++;\n            }\n            if (par <= 1) {\n          \
    \      res++;\n            }\n        }\n        return res;", "        // your\
    \ code here\n        return -1;", "        string hex_prime = \"23B7D\";\n   \
    \     int count = 0;\n        foreach (char character in num) {\n            if\
    \ (hex_prime.Contains(character)) {\n                count++;\n            }\n\
    \        }\n        return count;", "        var hex = new List<int>{0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 11, 13};\n        return num.Select( x => hex.Contains(Convert.ToInt32(x.ToString(),\
    \ 16)) ? 1 : 0).Sum();", "        long count = 0;\n        int s = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] > 64) {\n  \
    \              s = num[i] - 55;\n            } else {\n                s = num[i]\
    \ - 48;\n            }\n            if (s == 2 || s == 3 || s == 5 || s == 7 ||\
    \ s == 11 || s == 13) {\n                count++;\n            }\n        }\n\
    \        return count;", '        return num.ToCharArray().Where(x => "2357BDF".Contains(x)).Count();',
  "        var hex = new HashSet<char> { '0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n        if (!num.Any(hex.Contains)) return\
    \ 0;\n        if (num.ToUpper() == \"2\") return 1;\n        // No point calculating\
    \ more than 1000 digits\n        if (num.Length > 1000) return 0;\n        string\
    \ primes = \"2357BD\";\n        return num.Where(primes.Contains).Count();", " \
    \       //Convert string to hex and then to decimal\n        return num.Select(ch\
    \ => Convert.ToInt32(ch.ToString(), 16)).Where(digit => IsPrime(digit)).Count();",
  "        int r = 0;\n        HashSet<char> set = new HashSet<char>{'2','3','5','7','B','D'};\n\
    \        for (int i = 0; i < num.Length; i++) {\n            if (set.Contains(num[i]))\
    \ r++;\n        }\n        return r;", "        // Your code\n        string tempStr\
    \ = \"\";\n        List<long> tempList = new List<long>();\n        List<long>\
    \ myList = new List<long>() { 2, 3, 5, 7, 11, 13 };\n        foreach (char item\
    \ in num)\n        {\n            tempStr += item;\n            if (tempStr.Length\
    \ == 2)\n            {\n                long tempInt = long.Parse(tempStr, System.Globalization.NumberStyles.HexNumber);\n\
    \                tempList.Add(tempInt);\n                tempStr = \"\";\n   \
    \         }\n        }\n        var list1 = myList.Where(val => tempList.Contains(val));\n\
    \        return list1.Count();", '        return num.Select(c => Convert.ToInt32(c.ToString(),
    16)).Where(i => i%2 != 0 && i%3 != 0 && i%5 != 0 && i%7 != 0 && i%11 != 0 && i%13
    != 0).Count();', "        int[] primes = new int[] { 2, 3, 5, 7, 11, 13 };\n \
    \       return num.Count(ch => primes.Contains(int.Parse(ch.ToString(), System.Globalization.NumberStyles.HexNumber)));",
  "        long res = 0;\n        if(num == \"\") return res;\n        for(int i =\
    \ 0; i < num.Length; i++) {\n            if(IsHexPrime(num[i])) res++;\n     \
    \   }\n        return res;"]
stop_tokens:
- "\n    }\n"
