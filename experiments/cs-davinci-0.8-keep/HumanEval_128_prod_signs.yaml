name: HumanEval_128_prod_signs
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given an array arr of integers and you need to return\n\
  \    // sum of magnitudes of integers multiplied by product of all signs\n    //\
  \ of each number in the array, represented by 1, -1 or 0.\n    // Note: return None\
  \ for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2, -4]) == -9\n\
  \    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) == None\n    public\
  \ static Nullable<long> ProdSigns(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
  \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
  \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
  \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
  \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
  \    }\n\n}\n"
completions: ["        if (arr.Count() == 0) {\n            return null;\n       \
    \ }\n        long sumOfMagnitudes = 0;\n        long prodOfSigns = 1;\n      \
    \  foreach (var item in arr) {\n            sumOfMagnitudes += Math.Abs(item);\n\
    \            if (item != 0) {\n                prodOfSigns *= Math.Sign(item);\n\
    \            }\n        }\n        return sumOfMagnitudes * prodOfSigns;", " \
    \       // Your code\n        if (arr.Count == 0)\n            return null;\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long i in arr)\n\
    \        {\n            prod *= Math.Sign(i);\n            sum += Math.Abs(i);\n\
    \        }\n        return sum * prod;", "        if (arr.Count == 0) {\n    \
    \        return null;\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long elem in arr) {\n            sum += Math.Abs(elem);\n\
    \            if (elem != 0) {\n                product *= Math.Sign(elem);\n \
    \           }\n        }\n        return sum * product;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long prod = 1;\n        long sum =\
    \ 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long n = arr[i];\n\
    \            if (n == 0)\n                continue;\n            else if (n >\
    \ 0)\n                prod *= 1;\n            else\n                prod *= -1;\n\
    \            sum += Math.Abs(n);\n        }\n        return prod * sum;", "  \
    \      if (arr.Count == 0)\n            return null;\n        long absSum = 0;\n\
    \        long prod = 1;\n        foreach (long x in arr) {\n            if (x\
    \ > 0)\n                prod *= 1;\n            else if (x < 0)\n            \
    \    prod *= -1;\n            else\n                prod *= 0;\n            absSum\
    \ += Math.Abs(x);\n        }\n        return absSum * prod;", "        var p =\
    \ arr.Where(i => i != 0)\n            .Aggregate(1L, (a, b) => a * b / Math.Abs(b));\n\
    \        var s = arr.Where(i => i > 0).Sum() - arr.Where(i => i < 0).Sum();\n\
    \        if (!p.HasValue)\n            return null;\n        return p.Value *\
    \ s;", "        //\n        // Your code here.\n        //\n        return null;",
  "        // Your code here\n        if (arr.Count() == 0)\n            return null;\n\
    \        long positive = 1;\n        long negative = 1;\n        long result =\
    \ 0;\n        foreach (var item in arr)\n        {\n            if (item > 0)\n\
    \                positive *= item;\n            else if (item < 0)\n         \
    \       negative *= item;\n            else\n                continue;\n     \
    \   }\n        result = positive * negative;\n        return result;", "     \
    \   long answer = 1;\n        if (arr.Count == 0)\n            return null;\n\
    \        foreach (long integer in arr) {\n            answer *= Math.Sign(integer);\n\
    \        }\n        if (answer == -1)\n            answer = -1;\n        else\n\
    \            answer = 1;\n        long sum = 0;\n        foreach (long integer\
    \ in arr) {\n            sum += Math.Abs(integer);\n        }\n        answer\
    \ *= sum;\n        return answer;", "        if (arr.Count == 0) {\n         \
    \   return null;\n        }\n        long prod = 1;\n        long sum = 0;\n \
    \       foreach (long i in arr) {\n            prod *= i / Math.Abs(i);\n    \
    \        sum += Math.Abs(i);\n        }\n        return prod * sum;", "      \
    \  if (arr.Count == 0) {\n            return null;\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (var num in arr) {\n      \
    \      sum += Math.Abs(num);\n            product *= Math.Sign(num);\n       \
    \ }\n        return sum * product;", "        long sum = 0;\n        long prod\
    \ = 1;\n        if (arr.Count() == 0) {\n            return null;\n        }\n\
    \        foreach (var el in arr) {\n            if (el > 0) {\n              \
    \  sum += el;\n                prod *= 1;\n            } else if (el < 0) {\n\
    \                sum += -el;\n                prod *= -1;\n            } else\
    \ {\n                sum += 0;\n                prod *= 0;\n            }\n  \
    \      }\n        return sum * prod;", "        long mags = 0;\n        long signs\
    \ = 1;\n        foreach (var e in arr) {\n            if (e > 0) {\n         \
    \       mags += e;\n                signs *= 1;\n            } else if (e < 0)\
    \ {\n                mags += -e;\n                signs *= -1;\n            }\
    \ else {\n                signs *= 0;\n            }\n        }\n        return\
    \ signs == 0 ? 0 : signs * mags;", '        return null;', "        long product\
    \ = 1;\n        long sum = 0;\n        foreach (long element in arr) {\n     \
    \       sum += Math.Abs(element);\n            long sign = Math.Sign(element);\n\
    \            if (sign != 0) {\n                product *= sign;\n            }\n\
    \        }\n        if (sum == 0 || product == 0) {\n            return null;\n\
    \        }\n        return sum * product;", "        long res = 1;\n        int\
    \ sign;\n        int count = 0;\n        foreach (long num in arr) {\n       \
    \     if (num == 0) {\n                sign = 0;\n            } else if (num >\
    \ 0) {\n                sign = 1;\n            } else {\n                sign\
    \ = -1;\n            }\n            if (sign != 0) {\n                res *= sign;\n\
    \            }\n            count += 1;\n        }\n        return (count == 0)\
    \ ? (Nullable<long>)null : (long)res;", "        if (arr.Count() == 0) {\n   \
    \         return null;\n        }\n        long product = 1;\n        long sum\
    \ = 0;\n        foreach (long number in arr) {\n            if (number == 0) {\n\
    \                continue;\n            }\n            product *= Math.Sign(number);\n\
    \            sum += Math.Abs(number);\n        }\n        return sum * product;",
  '        return arr.Count > 0 ? (long?)arr.Select(x => x == 0 ? 0 : Math.Abs(x)).Sum()
    * arr.Select(x => x == 0 ? 1 : Math.Sign(x)).Aggregate((a, b) => a * b) : null;',
  "        if (arr.Count < 1) return null;\n        long sum = 0;\n        foreach\
    \ (long a in arr) {\n            sum += Math.Abs(a);\n        }\n        long\
    \ prod = 1;\n        foreach (long a in arr) {\n            if (a > 0) prod *=\
    \ 1;\n            else if (a < 0) prod *= -1;\n            else prod *= 0;\n \
    \       }\n        return sum * prod;", "        if (arr.Count == 0) {\n     \
    \       return null;\n        }\n        int pos = 0;\n        int neg = 0;\n\
    \        long prod = 1;\n        foreach (long n in arr) {\n            if (n\
    \ == 0) {\n                continue;\n            }\n            if (n > 0) {\n\
    \                pos++;\n            } else {\n                neg++;\n      \
    \      }\n            prod *= n;\n        }\n        if (pos == arr.Count || neg\
    \ == arr.Count) {\n            return prod;\n        }\n        return prod *\
    \ -1;"]
stop_tokens:
- "\n    }\n"
