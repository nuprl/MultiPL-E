name: HumanEval_18_how_many_times
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Find how many times a given substring can be found in the original\
  \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n\
  \    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
  \ 'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
  \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) ==\
  \ (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
  \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
  }\n"
completions: ["        long count = 0;\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            if (str.Substring(i, substring.Length) == substring) {\n    \
    \            count++;\n            }\n        }\n        return count;", "   \
    \     long cnt = 0;\n        for (int i = 0; i <= str.Length - substring.Length;\
    \ i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n\
    \                cnt++;\n            }\n        }\n        return cnt;", "   \
    \     long i = 0;\n        long c = 0;\n        while ((i = str.IndexOf(substring,\
    \ (int)i)) != -1) {\n            i += substring.Length;\n            c++;\n  \
    \      }\n        return c;", "        if (str.Length < substring.Length) {\n\
    \            return 0;\n        }\n\n        long result = 0;\n        for (int\
    \ i = 0; i < str.Length - substring.Length + 1; i++) {\n            if (str.Substring(i,\
    \ substring.Length) == substring) {\n                result++;\n            }\n\
    \        }\n        return result;", "        long count = 0;\n        for (long\
    \ i = 0; i < str.Length; i++) {\n            if (i + substring.Length <= str.Length)\
    \ {\n                string sub = str.Substring((int)i, substring.Length);\n \
    \               if (sub == substring) {\n                    count++;\n      \
    \          }\n            }\n        }\n        return count;", "        int len\
    \ = substring.Length;\n        int i = 0;\n        long count = 0;\n        while\
    \ (i < str.Length) {\n            int j = 0;\n            while (i + j < str.Length\
    \ && str[i + j] == substring[j]) {\n                j++;\n            }\n    \
    \        if (j == len) {\n                count++;\n                i += len;\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return count;", "        int n = str.Length, m = substring.Length;\n      \
    \  long[] pi = PrefixFunction(substring);\n        long count = 0;\n        int\
    \ k = 0;\n        for (int i = 0; i < n; i++) {\n            while (k > 0 && substring[k]\
    \ != str[i]) {\n                k = (int)pi[k - 1];\n            }\n         \
    \   if (substring[k] == str[i]) {\n                k++;\n            }\n     \
    \       if (k == m) {\n                count++;\n                k = (int)pi[k\
    \ - 1];\n            }\n        }\n        return count;", "        // Create\
    \ list of indexes of occurrence of substring in str\n        var indexes = new\
    \ List<int>();\n        for (int i = 0; i < str.Length; i++) {\n            int\
    \ j = 0;\n            while (j < substring.Length && i + j < str.Length && str[i\
    \ + j] == substring[j]) {\n                j++;\n            }\n            if\
    \ (j == substring.Length) {\n                indexes.Add(i);\n            }\n\
    \        }\n        long count = 0;\n        int last_index = -1;\n        for\
    \ (int i = 0; i < indexes.Count; i++) {\n            if (indexes[i] != last_index)\
    \ {\n                count++;\n                last_index = indexes[i];\n    \
    \        }\n        }\n        return count;", "        // YOUR CODE HERE\n  \
    \      return 0;", "        long n = 0;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (str.Substring(i, substring.Length) == substring)\n \
    \               n++;\n        }\n        return n;", "        var str_l = str.Length;\n\
    \        var substr_l = substring.Length;\n        long count = 0;\n        for\
    \ (int i = 0; i < str_l; i++) {\n            if (i + substr_l <= str_l && str.Substring(i,\
    \ substr_l) == substring) {\n                count++;\n            }\n       \
    \ }\n        return count;", '        return str.Count(str.StartsWith(substring,
    StringComparison.Ordinal));', "        long cnt = 0;\n        for (int i = 0;\
    \ i <= str.Length - substring.Length; i++) {\n            if (str.Substring(i,\
    \ substring.Length) == substring) {\n                cnt++;\n            }\n \
    \       }\n        return cnt;", "        // assert substring is in str\n    \
    \    long result = 0;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      if (str[i] == substring[0]) {\n                bool found = true;\n   \
    \             for (int j = 1; j < substring.Length; j++) {\n                 \
    \   if (str[i + j] != substring[j]) {\n                        found = false;\n\
    \                        break;\n                    }\n                }\n  \
    \              if (found) {\n                    result++;\n                }\n\
    \            }\n        }\n        return result;", "        var count = 0;\n\
    \        var currentPos = 0;\n        while (currentPos != -1) {\n           \
    \ count++;\n            currentPos = str.IndexOf(substring, currentPos + 1);\n\
    \        }\n        return count;", "        if (substring.Length > str.Length)\n\
    \            return 0;\n        long total = 0;\n        var i = 0;\n        while\
    \ (i < str.Length) {\n            var k = str.IndexOf(substring, i);\n       \
    \     if (k == -1) break;\n            total++;\n            i = k + 1;\n    \
    \    }\n        return total;", "        if (substring.Length > str.Length)\n\
    \            return 0;\n        long result = 0;\n        for (int i = 0; i <\
    \ str.Length - substring.Length + 1; i++) {\n            if (str.Substring(i,\
    \ substring.Length) == substring)\n                result++;\n        }\n    \
    \    return result;", "        long n = 0;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (str.Substring(i, Math.Min(substring.Length, str.Length\
    \ - i)) == substring) {\n                n++;\n            }\n        }\n    \
    \    return n;", "        long times = 0;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (i + substring.Length <= str.Length &&\n            \
    \    substring == str.Substring(i, substring.Length)) {\n                times++;\n\
    \            }\n        }\n        return times;", "        var count = 0;\n \
    \       var length = substring.Length;\n        for (var i = 0; i < str.Length;\
    \ i++) {\n            if (str.Substring(i, length) == substring) {\n         \
    \       count++;\n            }\n        }\n        return count;"]
stop_tokens:
- "\n    }\n"
