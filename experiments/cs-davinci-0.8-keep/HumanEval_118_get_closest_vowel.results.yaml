language: cs
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    if (word.Length < 3) return \"\";\n        for (int i = word.Length - 1;\
    \ i >= 0; i--) {\n            if (i == 0 || i == word.Length - 1) continue;\n\
    \            var prev = word[i - 1];\n            var next = word[i + 1];\n  \
    \          var curr = word[i];\n            if (IsVowel(curr) && !IsVowel(prev)\
    \ && !IsVowel(next)) {\n                return curr.ToString();\n            }\n\
    \        }\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzpfvrtmw.cs(26,17): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    /tmp/tmpzpfvrtmw.cs(26,35): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    /tmp/tmpzpfvrtmw.cs(26,53): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659824024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    string vowels = \"aAeEiIoOuU\";\n        int cons = -1;\n        int closest\
    \ = -1;\n        int dist = int.MaxValue;\n        for (int i = word.Length -\
    \ 1; i >= 0; i--) {\n            char c = word[i];\n            if (vowels.Contains(c))\
    \ {\n                if (cons != -1) {\n                    int d = cons - i;\n\
    \                    if (d < dist) {\n                        dist = d;\n    \
    \                    closest = i;\n                    }\n                }\n\
    \            } else {\n                cons = i;\n            }\n        }\n \
    \       if (closest == -1) {\n            return \"\";\n        }\n        return\
    \ word[closest].ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89d71822b7d24914a6749ba2cd03c406>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89d71822b7d24914a6749ba2cd03c406>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    string vowel = \"aeiou\";\n        List<char> vowels = new List<char>();\n\
    \        int count = 0;\n        for (int i = word.Length - 1; i >= 0; i--) {\n\
    \            if (vowel.Contains(word[i].ToString())) {\n                vowels.Add(word[i]);\n\
    \                count++;\n            }\n            if (count > 1) {\n     \
    \           return vowels[0].ToString();\n            }\n        }\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d84f3c149a644dd994a632d11dcff59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d84f3c149a644dd994a632d11dcff59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    var vowelChars = new List<char>() { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ wordChars = word.ToList();\n        var consonantPositions = new List<int>();\n\
    \        for (int i = 0; i < wordChars.Count; i++) {\n            if (!vowelChars.Contains(wordChars[i]))\
    \ {\n                consonantPositions.Add(i);\n            }\n        }\n  \
    \      if (consonantPositions.Count < 2) {\n            return string.Empty;\n\
    \        }\n        var vowelDistances = new List<Tuple<int, int>>();\n      \
    \  for (int i = 1; i < consonantPositions.Count; i++) {\n            var distance\
    \ = consonantPositions[i] - consonantPositions[i - 1];\n            vowelDistances.Add(new\
    \ Tuple<int, int>(distance, consonantPositions[i - 1]));\n        }\n        var\
    \ lowestDistance = vowelDistances.Min(t => t.Item1);\n        var closestVowelIndex\
    \ = vowelDistances.First(t => t.Item1 == lowestDistance).Item2;\n        return\
    \ wordChars[closestVowelIndex].ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89f88fbc2a944cd6b449e2414d8e4dfe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89f88fbc2a944cd6b449e2414d8e4dfe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    for (int i = word.Length - 1; i >= 0; i--) {\n            if (word[i] ==\
    \ 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\
    \ {\n                if (i < word.Length - 1 && word[i + 1] != 'a' && word[i +\
    \ 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u')\n\
    \                    return word[i].ToString();\n            }\n        }\n  \
    \      return \"\";\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <864d78a43c0c4d239cd05cabe166d842>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <864d78a43c0c4d239cd05cabe166d842>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    string vowels = \"aeiouAEIOU\";\n        string[] letters = word.Split('\
    \ ');\n        letters = letters.Reverse().ToArray();\n        string prev = \"\
    \";\n        string next = \"\";\n        for (int i = 0; i < letters.Length;\
    \ i++) {\n            if (i == 0) {\n                prev = letters[i];\n    \
    \            next = letters[i + 1];\n            } else if (i == letters.Length\
    \ - 1) {\n                prev = letters[i - 1];\n                next = letters[i];\n\
    \            } else {\n                prev = letters[i - 1];\n              \
    \  next = letters[i + 1];\n            }\n            if (vowels.Contains(prev)\
    \ && vowels.Contains(next)) {\n                return letters[i];\n          \
    \  }\n        }\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.GetClosestVowel (System.String word)\
    \ [0x00040] in <f44e0ba682fb4bfeb72843b50dc7dbe5>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <f44e0ba682fb4bfeb72843b50dc7dbe5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.GetClosestVowel (System.String word) [0x00040] in <f44e0ba682fb4bfeb72843b50dc7dbe5>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <f44e0ba682fb4bfeb72843b50dc7dbe5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    // TODO\n        return null;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0000b] in <02617498a7cf4d34b46af9a8009c5a83>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0000b] in <02617498a7cf4d34b46af9a8009c5a83>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    bool bLastVowel = false;\n        string sResult = \"\";\n        for (int\
    \ i = word.Length - 1; i >= 0; i--) {\n            bool bVowel = isVowel(word[i]);\n\
    \            if (bVowel) {\n                if (bLastVowel) {\n              \
    \      return sResult;\n                }\n                else {\n          \
    \          sResult = new string(word[i], 1);\n                    bLastVowel =\
    \ true;\n                }\n            }\n            else {\n              \
    \  if (bLastVowel) {\n                    return sResult;\n                }\n\
    \            }\n        }\n        return \"\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjndcq8l1.cs(23,27): error CS0103: The name ''isVowel'' does not exist
    in the current context

    '
  timestamp: 1659824025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    // Write your code here...\n        return word;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12d02f2dea47406a9556495e4b99d1d2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12d02f2dea47406a9556495e4b99d1d2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    string vowels = \"aeiou\";\n        string closest = null;\n        for (int\
    \ i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                if (closest == null)\n                    closest = word[i].ToString();\n\
    \                else if (i == word.Length - 1)\n                    return closest;\n\
    \                else if (vowels.Contains(word[i + 1]))\n                    return\
    \ word[i].ToString();\n            }\n            else if (closest != null)\n\
    \                return closest;\n        }\n        return \"\";\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <482016f1fd72488ca9b95b0746486289>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <482016f1fd72488ca9b95b0746486289>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    string vowels = \"aeiouAEIOU\";\n        bool vowelSeen = false;\n      \
    \  int distance = 0;\n        int bestDistance = int.MaxValue;\n        string\
    \ bestVowel = \"\";\n        // If you start out with all letters as vowels, then,\n\
    \        // in the end, all of them will be vowels.\n        // 1. You start with\
    \ all letters as vowels\n        // 2. You iterate from left to right\n      \
    \  // 3. For each letter, if the letter is a vowel, nothing changes.\n       \
    \ // 4. For each letter, if the letter is a consonant:\n        //    If you've\
    \ seen a vowel so far, then, you've found the closest vowel,\n        //    so,\
    \ you mark the distance to the vowel, and you remember the vowel.\n        //\
    \    If you've not seen a vowel so far, then, you do nothing.\n        // 5. In\
    \ the end, you return the closest vowel you remember.\n        // If you start\
    \ out with all letters as consonants, then,\n        // in the end, all of them\
    \ will be consonants.\n        // 1. You start with all letters as consonants\n\
    \        // 2. You iterate from left to right\n        // 3. For each letter,\
    \ if the letter is a consonant, nothing changes.\n        // 4. For each letter,\
    \ if the letter is a vowel:\n        //    If you've seen a consonant so far,\
    \ then, you've found the closest consonant,\n        //    so, you mark the distance\
    \ to the consonant, and you remember the consonant.\n        //    If you've not\
    \ seen a consonant so far, then, you do nothing.\n        // 5. In the end, you\
    \ return the closest consonant you remember.\n        // Therefore, the following\
    \ loop works for both cases.\n        for (int i = word.Length - 1; i >= 0; i--)\
    \ {\n            if (vowels.Contains(word[i])) {\n                if (vowelSeen)\
    \ {\n                    bestDistance = distance;\n                    bestVowel\
    \ = word[i].ToString();\n                    break;\n                }\n     \
    \       } else {\n                if (vowelSeen) {\n                    distance++;\n\
    \                }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjmfl30jp.cs(58,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpjmfl30jp.cs(74,2): error CS1513: } expected

    '
  timestamp: 1659824024
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    string vowels = \"aeiou\";\n        string lastConsonant = \"\";\n      \
    \  string result = \"\";\n        int distance = 0;\n        int maxDistance =\
    \ int.MaxValue;\n        // reverse the string\n        char[] input = word.ToCharArray();\n\
    \        Array.Reverse(input);\n        // find closest vowel\n        foreach\
    \ (char ch in input) {\n            if (vowels.Contains(ch)) {\n             \
    \   if (lastConsonant != \"\") {\n                    distance = input.ToList().IndexOf(ch)\
    \ - input.ToList().IndexOf(lastConsonant);\n                    if (distance <\
    \ maxDistance) {\n                        maxDistance = distance;\n          \
    \              result = ch.ToString();\n                    }\n              \
    \  }\n            } else {\n                lastConsonant = ch.ToString();\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpskcj_dv3.cs(32,84): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1659824025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0000b] in <a7f7601dc4a84d7cbafd0781b980f3ad>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0000b] in <a7f7601dc4a84d7cbafd0781b980f3ad>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    // your code here\n        return string.Empty;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3d366fddc6d4766a50099488adef442>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3d366fddc6d4766a50099488adef442>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    int lastVowel = word.Length;\n        for (int i = word.Length - 1; i >=\
    \ 0; i--) {\n            char ch = word[i];\n            if (\"AEIOUaeiou\".IndexOf(ch)\
    \ != -1) {\n                lastVowel = i;\n                break;\n         \
    \   }\n        }\n        if (lastVowel == word.Length) {\n            return\
    \ \"\";\n        }\n        int closestVowel = lastVowel;\n        int closestDistance\
    \ = int.MaxValue;\n        for (int i = lastVowel - 1; i >= 0; i--) {\n      \
    \      char ch = word[i];\n            if (\"AEIOUaeiou\".IndexOf(ch) == -1) {\n\
    \                if (lastVowel - i < closestDistance) {\n                    closestVowel\
    \ = lastVowel;\n                    closestDistance = lastVowel - i;\n       \
    \         }\n            } else {\n                lastVowel = i;\n          \
    \  }\n        }\n        return word[closestVowel].ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\"\
    )).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6341a8a14cab4f2aa0bb2da57ec19074>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6341a8a14cab4f2aa0bb2da57ec19074>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ prevVowel = ' ';\n        var isConsonantFound = false;\n        for (var i\
    \ = word.Length - 1; i >= 0; i--) {\n            var c = word[i];\n          \
    \  if (isConsonantFound && vowels.Contains(c)) {\n                return c.ToString();\n\
    \            }\n            if (vowels.Contains(c)) {\n                prevVowel\
    \ = c;\n            } else {\n                isConsonantFound = true;\n     \
    \       }\n        }\n        return string.Empty;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a794dfa2f0834a59b027edb1d17d7f83>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a794dfa2f0834a59b027edb1d17d7f83>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    // TODO\n        throw new NotImplementedException();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\"\
    )).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <60873091e9b047cca886d28e71b0827d>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <60873091e9b047cca886d28e71b0827d>:0 \n"
  stdout: ''
  timestamp: 1659824025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    // TODO: implement\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <677867abab4d4a1aa1a33697d49a15d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <677867abab4d4a1aa1a33697d49a15d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    throw new NotImplementedException();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <90b077fc6e93470893419d64ba677bb0>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <90b077fc6e93470893419d64ba677bb0>:0 \n"
  stdout: ''
  timestamp: 1659824025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n    \
    \    if (word.Length < 3) return \"\";\n        int i = 0;\n        while (i <\
    \ word.Length && \"aeiou\".Contains(word[i])) i++;\n        if (i == word.Length)\
    \ return \"\";\n        var best = \"\";\n        var bestDist = word.Length;\n\
    \        while (i < word.Length) {\n            while (i < word.Length && \"aeiou\"\
    .Contains(word[i])) i++;\n            var j = i;\n            while (j < word.Length\
    \ && !\"aeiou\".Contains(word[j])) j++;\n            if (j < word.Length) {\n\
    \                var k = j - 1;\n                while (k > i && !\"aeiou\".Contains(word[k]))\
    \ k--;\n                if (k > i) {\n                    var dist = j - k;\n\
    \                    if (dist < bestDist) {\n                        bestDist\
    \ = dist;\n                        best = word[k].ToString();\n              \
    \      }\n                }\n            }\n            i = j;\n        }\n  \
    \      return best;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c02819c28e9e41b4b2c65ebc92eb7349>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c02819c28e9e41b4b2c65ebc92eb7349>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824025
