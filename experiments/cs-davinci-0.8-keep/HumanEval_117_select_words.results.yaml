language: cs
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement me\n        return null;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <33fa3fcb7d6d49978af95474f54e907d>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <33fa3fcb7d6d49978af95474f54e907d>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        return null;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <e6acfa8b771d4a79a94cf625295a2bc3>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <e6acfa8b771d4a79a94cf625295a2bc3>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        return null;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <e6acfa8b771d4a79a94cf625295a2bc3>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <e6acfa8b771d4a79a94cf625295a2bc3>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        throw new NotImplementedException();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <d8ff30ee3ac04d9cbea7f13d0a504200>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <d8ff30ee3ac04d9cbea7f13d0a504200>:0 \n"
  stdout: ''
  timestamp: 1659824630
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        List<char>\
    \ vowels = new List<char>() { 'a', 'e', 'i', 'o', 'u' };\n        List<string>\
    \ words = s.Split(' ').ToList();\n        foreach (string w in words) {\n    \
    \        if (w.Length == 0) {\n                continue;\n            }\n    \
    \        int count = 0;\n            foreach (char c in w) {\n               \
    \ if (!vowels.Contains(char.ToLower(c))) {\n                    count++;\n   \
    \             }\n            }\n            if (count == n) {\n              \
    \  result.Add(w);\n            }\n        }\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad737003bdbd4b04b943a9bdcf9ba899>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad737003bdbd4b04b943a9bdcf9ba899>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824630
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> answer = new List<string>();\n        string[]\
    \ words = s.Split(' ');\n        foreach (string word in words) {\n          \
    \  if (word.Length >= n) {\n                int count = 0;\n                foreach\
    \ (char c in word) {\n                    if (!\"aeiou\".Contains(c)) {\n    \
    \                    count++;\n                    }\n                }\n    \
    \            if (count == n) {\n                    answer.Add(word);\n      \
    \          }\n            }\n        }\n        return answer;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e0909a0c07914c1aa347fa142e6ea104>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e0909a0c07914c1aa347fa142e6ea104>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824630
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        return s.Split(' ').Where(word => word.Count(c => !\"\
    aeiou\".Contains(c)) == n).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <52e9bfd41168436099c0e52eb56df0c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <52e9bfd41168436099c0e52eb56df0c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <92296af1757047849adea530cbcdcbfb>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <92296af1757047849adea530cbcdcbfb>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // Implement your solution here!\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <44719eda0b15412e9937a04db1012035>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <44719eda0b15412e9937a04db1012035>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // Your code goes here.\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpstkwm8dd.cs(20,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659824629
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        string[] words = s.Split(' ');\n        List<string> result\
    \ = new List<string>();\n        foreach (string word in words) {\n          \
    \  int count = 0;\n            foreach (char c in word) {\n                if\
    \ (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n             \
    \       count++;\n                }\n            }\n            if (count == n)\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e637a6091fc4604a7bacb9abaf72181>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e637a6091fc4604a7bacb9abaf72181>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824630
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        return new List<string>();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82d07e4c5e6747feaa26c9de6968d8bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82d07e4c5e6747feaa26c9de6968d8bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824630
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // Implement your function here\n        //HINT: You may\
    \ find the .Split() method useful\n        var result = new List<string>();\n\
    \        var words = s.Split(' ');\n        foreach (var word in words) {\n  \
    \          if (word.Count(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') == n) {\n                result.Add(word);\n            }\n      \
    \  }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e20d9567058447879e61235ac7d8654b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e20d9567058447879e61235ac7d8654b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // Your code here!\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <152c4122767e49dc8d2b0d0c5561c976>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <152c4122767e49dc8d2b0d0c5561c976>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement solution here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <6ffaab85a150402c95a2d3dc06833ae8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <6ffaab85a150402c95a2d3dc06833ae8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // enter your code here\n        List<string> r = new\
    \ List<string>();\n        int pos = 0;\n        bool skip = false;\n        string\
    \ word = \"\";\n        int count = 0;\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            if (s[i] == ' ') {\n                pos = i;\n         \
    \       skip = true;\n            }\n            if (skip == true) {\n       \
    \         word = s.Substring(pos + 1, i - pos - 1);\n                count = 0;\n\
    \                for (int j = 0; j < word.Length; j++) {\n                   \
    \ if (word[j] != 'a' && word[j] != 'e' && word[j] != 'i' && word[j] != 'o' &&\
    \ word[j] != 'u')\n                        count++;\n                }\n     \
    \           if (count == n) {\n                    r.Add(word);\n            \
    \    }\n                skip = false;\n            }\n        }\n        return\
    \ r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Length cannot\
    \ be less than zero.\nParameter name: length\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.SelectWords (System.String s, System.Int64 n) [0x00041] in <010514cd70764bdd95f81baa06de26ec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <010514cd70764bdd95f81baa06de26ec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Length\
    \ cannot be less than zero.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.SelectWords (System.String s, System.Int64 n) [0x00041] in <010514cd70764bdd95f81baa06de26ec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <010514cd70764bdd95f81baa06de26ec>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (CountConsonants(word)\
    \ == n) {\n                result.Add(word);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppvkaaabf.cs(24,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659824629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        throw new NotImplementedException();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <d8ff30ee3ac04d9cbea7f13d0a504200>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <d8ff30ee3ac04d9cbea7f13d0a504200>:0 \n"
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> words = new List<string>();\n        string[]\
    \ word_array = s.Split(new char[] { ' ' });\n        foreach (string word in word_array)\
    \ {\n            long consonants = Consonants(word);\n            if (consonants\
    \ == n) {\n                words.Add(word);\n            }\n        }\n      \
    \  return words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps0g2ndm8.cs(24,31): error CS0103: The name ''Consonants'' does not exist
    in the current context

    '
  timestamp: 1659824629
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> ans = new List<string>();\n        string[]\
    \ arr = s.Split(' ');\n        foreach (string elem in arr) {\n            int\
    \ total = 0;\n            foreach (char c in elem) {\n                if (c !=\
    \ 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                   \
    \ total++;\n                }\n            }\n            if (total == n) {\n\
    \                ans.Add(elem);\n            }\n        }\n        return ans;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ebfd53f9c894e2dbdee8c64b9e08f65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ebfd53f9c894e2dbdee8c64b9e08f65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824630
