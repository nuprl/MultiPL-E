name: HumanEval_108_count_nums
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function count_nums which takes an array of integers\
  \ and returns\n    // the number of elements which has a sum of digits > 0.\n  \
  \  // If a number is negative, then its first signed digit will be negative:\n \
  \   // e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n\
  \    // >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) ==\
  \ 3\n    public static long CountNums(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new\
  \ List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,\
  \ (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new\
  \ long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))\
  \ == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,\
  \ (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new\
  \ List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))\
  \ == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,\
  \ (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new\
  \ List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
completions: ["        int L = arr.Count;\n        int[] f = new int[L];\n       \
    \ for (int i = 0; i < L; i++) {\n            if (arr[i] < 0) {\n             \
    \   f[i] = -1;\n            } else {\n                f[i] = 1;\n            }\n\
    \        }\n        long[] v = new long[L];\n        for (int i = 0; i < L; i++)\
    \ {\n            v[i] = Math.Abs(arr[i]);\n        }\n        int[] d = new int[L];\n\
    \        for (int i = 0; i < L; i++) {\n            while (v[i] > 0) {\n     \
    \           d[i] += (int)(v[i] % 10);\n                v[i] /= 10;\n         \
    \   }\n        }\n        int[] fd = new int[L];\n        for (int i = 0; i <\
    \ L; i++) {\n            fd[i] = f[i] * d[i];\n        }\n        return fd.Count(i\
    \ => i > 0);", "        // put your code here\n        int count = 0;\n      \
    \  foreach (long item in arr)\n        {\n            var digits = Math.Abs(item).ToString().ToCharArray();\n\
    \            int sum = 0;\n            foreach (char c in digits)\n          \
    \  {\n                sum += (int)Char.GetNumericValue(c);\n            }\n  \
    \          if (sum > 0) count++;\n        }\n        return count;", "       \
    \ int count = 0;\n        foreach (long i in arr) {\n            long sum = 0;\n\
    \            long num = Math.Abs(i);\n            while (num > 0) {\n        \
    \        sum += num % 10;\n                num /= 10;\n            }\n       \
    \     if (sum > 0) count++;\n        }\n        return count;", "        // Write\
    \ your code here\n        long result = 0;\n        foreach (long item in arr)\n\
    \        {\n            int sum = 0;\n            if (item < 0)\n            {\n\
    \                item = item * -1;\n            }\n            while (item !=\
    \ 0)\n            {\n                sum += (int)(item % 10);\n              \
    \  item = item / 10;\n            }\n            if (sum > 0)\n            {\n\
    \                result++;\n            }\n        }\n        return result;",
  '        return arr.Sum(x => DigitSum(x));', '        return arr.Count(e => e.ToString().Sum(c
    => (int)c - 48) > 0);', "        return arr.Where(x => x.ToString().Sum(y => y\
    \ - '0') > 0).Count();", "        return arr.Count(n => n < 0 ? n.ToString().Sum(c\
    \ => -(c - '0')) : n.ToString().Sum(c => c - '0'));", '        return arr.Count(x
    => x > 0 ? x.ToString().ToCharArray().Select(c => int.Parse(c.ToString())).Sum()
    > 0 : x.ToString().ToCharArray().Select(c => int.Parse(c.ToString())).Sum() +
    1 > 0);', "        long answer = 0;\n        // put your code here\n        foreach\
    \ (long item in arr)\n        {\n            long sum = 0;\n            long temp\
    \ = item;\n            while (temp > 0)\n            {\n                sum +=\
    \ temp % 10;\n                temp /= 10;\n            }\n            if (sum\
    \ > 0)\n                answer++;\n        }\n        return answer;", '        throw
    new NotImplementedException();', "        long result = 0;\n        foreach (long\
    \ num in arr) {\n            if (NumSum(num) > 0) {\n                result++;\n\
    \            }\n        }\n        return result;", "        int res = 0;\n  \
    \      foreach (long e in arr) {\n            res += (long)Math.Floor(Math.Log10(Math.Abs(e))\
    \ + 1);\n        }\n        return res;", "        long count = 0;\n        foreach\
    \ (long i in arr) {\n            count += count_num(i);\n        }\n        return\
    \ count;", "        var longs = arr.Select(i => Math.Abs(i));\n        return\
    \ longs.Count(IsSumOfDigitsGreaterThanZero);", "        // Your code here!\n \
    \       return 0;", '        return 0;', "        // TODO: Write your code here\n\
    \        return 0;", "        long count = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            long sum = 0;\n            long el = arr[i];\n         \
    \   long sign = Math.Sign(el);\n            el = Math.Abs(el);\n            while\
    \ (el > 0) {\n                sum += el % 10;\n                el /= 10;\n   \
    \         }\n            if (sign * sum > 0) count++;\n        }\n        return\
    \ count;", '        return 0;']
stop_tokens:
- "\n    }\n"
