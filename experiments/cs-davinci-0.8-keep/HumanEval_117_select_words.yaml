name: HumanEval_117_select_words
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string s and a natural number n, you have been tasked\
  \ to implement \n    // a function that returns a list of all words from string\
  \ s that contain exactly \n    // n consonants, in order these words appear in the\
  \ string s.\n    // If the string s is empty then the function should return an\
  \ empty list.\n    // Note: you may assume the input string contains only letters\
  \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
  , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"\
  Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    //\
  \ select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle\
  \ sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string s,\
  \ long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
  Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
  little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
  \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
  simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
  Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
  \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
  \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
  \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
  \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
  f\"}))));\n    }\n\n}\n"
completions: ["        // TODO: Implement me\n        return null;", '        return
    null;', '        return null;', '        throw new NotImplementedException();',
  "        List<string> result = new List<string>();\n        List<char> vowels =\
    \ new List<char>() { 'a', 'e', 'i', 'o', 'u' };\n        List<string> words =\
    \ s.Split(' ').ToList();\n        foreach (string w in words) {\n            if\
    \ (w.Length == 0) {\n                continue;\n            }\n            int\
    \ count = 0;\n            foreach (char c in w) {\n                if (!vowels.Contains(char.ToLower(c)))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == n) {\n                result.Add(w);\n            }\n      \
    \  }\n        return result;", "        List<string> answer = new List<string>();\n\
    \        string[] words = s.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (word.Length >= n) {\n                int count = 0;\n   \
    \             foreach (char c in word) {\n                    if (!\"aeiou\".Contains(c))\
    \ {\n                        count++;\n                    }\n               \
    \ }\n                if (count == n) {\n                    answer.Add(word);\n\
    \                }\n            }\n        }\n        return answer;", "     \
    \   return s.Split(' ').Where(word => word.Count(c => !\"aeiou\".Contains(c))\
    \ == n).ToList();", "        // TODO: Implement this\n        return null;", " \
    \       // Implement your solution here!\n        return null;", '        // Your
    code goes here.', "        string[] words = s.Split(' ');\n        List<string>\
    \ result = new List<string>();\n        foreach (string word in words) {\n   \
    \         int count = 0;\n            foreach (char c in word) {\n           \
    \     if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n      \
    \              count++;\n                }\n            }\n            if (count\
    \ == n) {\n                result.Add(word);\n            }\n        }\n     \
    \   return result;", '        return new List<string>();', "        // Implement\
    \ your function here\n        //HINT: You may find the .Split() method useful\n\
    \        var result = new List<string>();\n        var words = s.Split(' ');\n\
    \        foreach (var word in words) {\n            if (word.Count(c => c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;", "        // Your code here!\n\
    \        return null;", "        // TODO: implement solution here\n        return\
    \ null;", "        // enter your code here\n        List<string> r = new List<string>();\n\
    \        int pos = 0;\n        bool skip = false;\n        string word = \"\"\
    ;\n        int count = 0;\n        for (int i = 0; i < s.Length; i++) {\n    \
    \        if (s[i] == ' ') {\n                pos = i;\n                skip =\
    \ true;\n            }\n            if (skip == true) {\n                word\
    \ = s.Substring(pos + 1, i - pos - 1);\n                count = 0;\n         \
    \       for (int j = 0; j < word.Length; j++) {\n                    if (word[j]\
    \ != 'a' && word[j] != 'e' && word[j] != 'i' && word[j] != 'o' && word[j] != 'u')\n\
    \                        count++;\n                }\n                if (count\
    \ == n) {\n                    r.Add(word);\n                }\n             \
    \   skip = false;\n            }\n        }\n        return r;", "        var\
    \ words = s.Split(' ');\n        var result = new List<string>();\n        foreach\
    \ (var word in words) {\n            if (CountConsonants(word) == n) {\n     \
    \           result.Add(word);\n            }\n        }\n        return result;",
  '        throw new NotImplementedException();', "        List<string> words = new\
    \ List<string>();\n        string[] word_array = s.Split(new char[] { ' ' });\n\
    \        foreach (string word in word_array) {\n            long consonants =\
    \ Consonants(word);\n            if (consonants == n) {\n                words.Add(word);\n\
    \            }\n        }\n        return words;", "        List<string> ans =\
    \ new List<string>();\n        string[] arr = s.Split(' ');\n        foreach (string\
    \ elem in arr) {\n            int total = 0;\n            foreach (char c in elem)\
    \ {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u') {\n                    total++;\n                }\n            }\n   \
    \         if (total == n) {\n                ans.Add(elem);\n            }\n \
    \       }\n        return ans;"]
stop_tokens:
- "\n    }\n"
