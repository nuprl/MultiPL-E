language: cs
name: HumanEval_63_fibfib
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n -\
    \ 2) + Fibfib(n - 3);\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n\
    \    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n\
    \    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L)) ==\
    \ (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824266
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        throw new NotImplementedException();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==\
    \ (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))\
    \ == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))\
    \ == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))\
    \ == (927L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <045f0af1c1234f96b5bbe9b9a033cbb8>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <045f0af1c1234f96b5bbe9b9a033cbb8>:0 \n"
  stdout: ''
  timestamp: 1659824266
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        // Replaced calls to recursive function with\
    \ tail recursive function.\n        // It runs much faster this way.\n       \
    \ return FibFibTail(n, 0, 0, 1);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))\
    \ == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))\
    \ == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))\
    \ == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp40ph45rj.cs(24,16): error CS0103: The name ''FibFibTail'' does not exist
    in the current context

    '
  timestamp: 1659824266
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        // Your code here.\n        return -1;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==\
    \ (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))\
    \ == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))\
    \ == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))\
    \ == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88962f932ea444edb747038c2a57910f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88962f932ea444edb747038c2a57910f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824266
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        if (n == 3) return 1;\n        return\
    \ Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))\
    \ == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))\
    \ == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))\
    \ == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824266
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        long[] fibonacci = new long[3];\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        if (n == 1) {\n         \
    \   return 0;\n        }\n        if (n == 2) {\n            return 1;\n     \
    \   }\n        fibonacci[0] = 0;\n        fibonacci[1] = 0;\n        fibonacci[2]\
    \ = 1;\n        for (int i = 3; i <= n; i++) {\n            fibonacci[i % 3] =\
    \ fibonacci[(i + 2) % 3] + fibonacci[(i + 1) % 3] + fibonacci[i % 3];\n      \
    \  }\n        return fibonacci[n % 3];\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))\
    \ == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))\
    \ == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))\
    \ == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824266
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        // The naive recursive solution is too slow -\
    \ we need to find a faster way.\n        // Hint: it might be helpful to look\
    \ at the fibfib sequence as a 3-dimensional array.\n        //\n        // Put\
    \ your solution here.\n        long last = 0;\n        long last2 = 0;\n     \
    \   long last3 = 0;\n        long current = 0;\n        if (n == 0) {\n      \
    \      return 0;\n        }\n        else if (n == 1) {\n            return 0;\n\
    \        }\n        else if (n == 2) {\n            return 1;\n        }\n   \
    \     else {\n            for (int i = 0; i < n; i++) {\n                current\
    \ = last + last2 + last3;\n                last3 = last2;\n                last2\
    \ = last;\n                last = current;\n            }\n            return\
    \ current;\n        }\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n\
    \    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n\
    \    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L)) ==\
    \ (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8034ea183c84981bb46433efdfb82b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8034ea183c84981bb46433efdfb82b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824266
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        // using a list to store the numbers\n      \
    \  List<long> fibs = new List<long>();\n        fibs.Add(0);\n        fibs.Add(0);\n\
    \        fibs.Add(1);\n        if (n < 2) {\n            return fibs[(int)n];\n\
    \        }\n        for (int i = 3; i <= n; i++) {\n            fibs.Add(fibs[i\
    \ - 1] + fibs[i - 2] + fibs[i - 3]);\n        }\n        return fibs[(int)n];\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))\
    \ == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))\
    \ == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))\
    \ == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))\
    \ == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824266
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        // If n is 0 or 1, then return 0.\n        if\
    \ (n <= 1) return 0;\n        // If n is 2, then return 1.\n        if (n == 2)\
    \ return 1;\n        // Otherwise, compute the answer.\n        long a = 0, b\
    \ = 0, c = 1;\n        for (long i = 3; i <= n; i++) {\n            long d = a\
    \ + b + c;\n            a = b;\n            b = c;\n            c = d;\n     \
    \   }\n        return c;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n\
    \    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n\
    \    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L)) ==\
    \ (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824266
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        if (n == 0) return 0;\n        else if (n ==\
    \ 1) return 0;\n        else if (n == 2) return 1;\n        else return Fibfib(n\
    \ - 1) + Fibfib(n - 2) + Fibfib(n - 3);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))\
    \ == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))\
    \ == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))\
    \ == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824266
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        long a = 0;\n        long b = 0;\n        long\
    \ c = 1;\n        long d = 0;\n        long e = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            d = a + b + c;\n            a = b;\n            b =\
    \ c;\n            c = d;\n        }\n        return d;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))\
    \ == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))\
    \ == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))\
    \ == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46fb67ca302342ea86d81992b683d915>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46fb67ca302342ea86d81992b683d915>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824266
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n\
    \        long c = 1;\n        for (long i = 3; i <= n; i++) {\n            long\
    \ tmp = a + b + c;\n            a = b;\n            b = c;\n            c = tmp;\n\
    \        }\n        return c;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L)) ==\
    \ (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))\
    \ == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))\
    \ == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824266
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        long x = 0;\n        long y = 0;\n\
    \        long z = 1;\n        for (int i = 3; i <= n; i++) {\n            long\
    \ temp = x + y + z;\n            x = y;\n            y = z;\n            z = temp;\n\
    \        }\n        return z;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L)) ==\
    \ (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))\
    \ == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))\
    \ == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824266
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        if (n < 0) throw new ArgumentOutOfRangeException(\"\
    n\");\n        long current = 0;\n        long next = 1;\n        for (long i\
    \ = 0; i < n; i++) {\n            long temp = next;\n            next = current\
    \ + next + (i > 1 ? next - current : 0);\n            current = temp;\n      \
    \  }\n        return current;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L)) ==\
    \ (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))\
    \ == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))\
    \ == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b060b1a5f0254fac8c56e2b6d6e9ddac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b060b1a5f0254fac8c56e2b6d6e9ddac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824266
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        if (n == 0) return 0;\n        else if (n ==\
    \ 1) return 0;\n        else if (n == 2) return 1;\n        else return Fibfib(n\
    \ - 1) + Fibfib(n - 2) + Fibfib(n - 3);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))\
    \ == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))\
    \ == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))\
    \ == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824266
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        long a = 0;\n        long b = 0;\n        long\
    \ c = 1;\n        for (int i = 0; i < n; i++) {\n            a = b;\n        \
    \    b = c;\n            c = a + b + c;\n        }\n        return a;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==\
    \ (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))\
    \ == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))\
    \ == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))\
    \ == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f820c659a26d4a24a58be6df6e95d910>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f820c659a26d4a24a58be6df6e95d910>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824266
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        Debug.Assert(n >= 0);\n        // code here\n\
    \n        // The series starts with: 0, 0, 1, 1, 2, 4, 7, 12, 23, 42, 84, 159,\
    \ 317, 632, 1264, 2499\n        // After a bit of manual observation, the series\
    \ seems to be the sum of 3 consecutive fibonacci numbers minus 1.\n        //\
    \ For instance, fibfib(5) = fibfib(4) + fibfib(3) + fibfib(2) - 1\n        //\
    \ For fibfib(9), fibfib(9) = fibfib(8) + fibfib(7) + fibfib(6) - 1\n\n       \
    \ // Let's look at the fibonacci number sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765\n        // 0, 1,\
    \ 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181,\
    \ 6765\n        //   ^^^ 3, 5, 8\n        //     ^^^ 5, 8, 13\n        //    \
    \   ^^^ 8, 13, 21\n        //         ^^^ 13, 21, 34\n        //           ^^^\
    \ 21, 34, 55\n        //             ^^^ 34, 55, 89\n        //              \
    \ ^^^ 55, 89, 144\n        //                 ^^^ 89, 144, 233\n        //   \
    \                ^^^ 144, 233, 377\n        //                     ^^^ 233, 377,\
    \ 610\n        //                       ^^^ 377, 610, 987\n        //        \
    \                 ^^^ 610, 987, 1597\n        //                           ^^^\
    \ 987, 1597, 2584\n        //                             ^^^ 1597, 2584, 4181\n\
    \        //                               ^^^ 2584, 4181, 6765\n        //\n \
    \       // The first item in each triple is fibfib(n). The next 2 items are the\
    \ 2 previous Fibonacci numbers.\n        // Notice that the Fibonacci numbers\
    \ have a pattern of doubling, plus the last number.\n        // For instance:\
    \ 0, 1, 1\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))\
    \ == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))\
    \ == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))\
    \ == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))\
    \ == (927L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpubw4lmhw.cs(21,24): error CS0161: ''Problem.Fibfib(long)'': not all code
    paths return a value

    '
  timestamp: 1659824266
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        int[] fibfib = new int[(int)n + 1];\n       \
    \ fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        for\
    \ (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i\
    \ - 2] + fibfib[i - 3];\n        }\n        return fibfib[(int)n];\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==\
    \ (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))\
    \ == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))\
    \ == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))\
    \ == (927L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.Fibfib (System.Int64 n) [0x00013] in\
    \ <4240888401a84f559465aa37b2dc6b9e>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x00012] in <4240888401a84f559465aa37b2dc6b9e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.Fibfib (System.Int64 n) [0x00013] in <4240888401a84f559465aa37b2dc6b9e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00012] in <4240888401a84f559465aa37b2dc6b9e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824266
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        throw new NotImplementedException();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==\
    \ (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))\
    \ == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))\
    \ == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))\
    \ == (927L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <045f0af1c1234f96b5bbe9b9a033cbb8>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <045f0af1c1234f96b5bbe9b9a033cbb8>:0 \n"
  stdout: ''
  timestamp: 1659824266
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ long Fibfib(long n) {\n        if (n == 0) {\n            return 0;\n      \
    \  }\n        if (n == 1) {\n            return 0;\n        }\n        if (n ==\
    \ 2) {\n            return 1;\n        }\n        return Fibfib(n - 1) + Fibfib(n\
    \ - 2) + Fibfib(n - 3);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n\
    \    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n\
    \    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L)) ==\
    \ (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824266
