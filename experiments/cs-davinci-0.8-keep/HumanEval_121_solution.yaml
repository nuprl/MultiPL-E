name: HumanEval_121_solution
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a non-empty list of integers, return the sum of all of\
  \ the odd elements that are in even positions.\n    // Examples\n    // solution([5,\
  \ 8, 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
  \ 13, 24, 321]) ==>0\n    public static long Solution(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
  \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
  \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
  \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
  \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
  \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
  \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
  \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
  \ (long)9L}))) == (3L));\n    }\n\n}\n"
completions: ["        long sum = 0;\n        for (int i = 0; i < lst.Count; i++)\
    \ {\n            if (i % 2 == 0 && lst[i] % 2 != 0) {\n                sum +=\
    \ lst[i];\n            }\n        }\n        return sum;", "        long sum =\
    \ 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 ==\
    \ 0 && lst[i] % 2 != 0) {\n                sum += lst[i];\n            }\n   \
    \     }\n        return sum;", "        long sum = 0;\n        for (int i = 0;\
    \ i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 != 0) {\n  \
    \              sum += lst[i];\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        int i = 0;\n        while (i < lst.Count) {\n  \
    \          if (i % 2 == 0 && lst[i] % 2 != 0) {\n                sum += lst[i];\n\
    \            }\n            i++;\n        }\n        return sum;", '        return
    lst.Where((x, i) => i % 2 == 0 && x % 2 != 0).Sum();', '        return lst.Where((x,
    i) => x % 2 == 1 && i % 2 == 0).Sum();', "        long ret = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\n\
    \                ret += lst[i];\n        }\n        return ret;", "        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i %\
    \ 2 == 0 && lst[i] % 2 != 0) {\n                sum += lst[i];\n            }\n\
    \        }\n        return sum;", '        return lst.Where((val,index) => (index
    % 2 == 0 && val % 2 != 0)).Sum();', '        return lst.Where((x, i) => i % 2
    == 0 && x % 2 != 0).Sum();', '        return lst.Where((e, i) => i % 2 == 0 &&
    e % 2 != 0).Sum();', '        return lst.Select((x, i) => new { el = x, pos =
    i }).Where(x => x.pos % 2 == 0 && x.el % 2 != 0).Sum(x => x.el);', "        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i %\
    \ 2 == 0 && lst[i] % 2 != 0) {\n                sum += lst[i];\n            }\n\
    \        }\n        return sum;", "        //\n        // Write your code here.\n\
    \        //\n        long sum = 0;\n        for (int i = 0; i < lst.Count; i++)\
    \ {\n            if (i % 2 == 0 && lst[i] % 2 != 0) {\n                sum +=\
    \ lst[i];\n            }\n        }\n        return sum;", "        long s = 0;\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 &&\
    \ lst[i] % 2 != 0) {\n                s += lst[i];\n            }\n        }\n\
    \        return s;", '        return lst.Where((x, i) => i % 2 == 0 && x % 2 !=
    0).Sum();', "        long sum = 0;\n        for (int i = 0; i < lst.Count; i++)\
    \ {\n            if (i % 2 == 0 && lst[i] % 2 != 0) {\n                sum +=\
    \ lst[i];\n            }\n        }\n        return sum;", "        long sum =\
    \ 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 ==\
    \ 0 && lst[i] % 2 != 0) {\n                sum += lst[i];\n            }\n   \
    \     }\n        return sum;", "        long sum = 0;\n        for (int i = 0;\
    \ i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 != 0) {\n  \
    \              sum += lst[i];\n            }\n        }\n        return sum;",
  "        long result = 0;\n        for (int i = 0; i < lst.Count; i++) {\n     \
    \       if (i % 2 == 0 && lst[i] % 2 != 0) {\n                result += lst[i];\n\
    \            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
