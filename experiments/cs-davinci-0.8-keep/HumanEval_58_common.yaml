name: HumanEval_58_common
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return sorted unique common elements for two lists.\n    //\
  \ >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    // [1, 5,\
  \ 653]\n    // >>> common([5, 3, 2, 8], [3, 2])\n    // [2, 3]\n    public static\
  \ List<long> Common(List<long> l1, List<long> l2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Common((new\
  \ List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L, (long)653L, (long)2L,\
  \ (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)5L,\
  \ (long)9L, (long)653L, (long)121L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)5L, (long)653L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)5L,\
  \ (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(Common((new List<long>(new\
  \ long[]{(long)4L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L,\
  \ (long)2L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L}))));\n\
  \    Debug.Assert(Common((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,\
  \ (long)8L})), (new List<long>())).Equals((new List<long>())));\n    }\n\n}\n"
completions: ['        return l1.Intersect(l2).ToList();', "        l1.Sort();\n \
    \       l2.Sort();\n        var i1 = 0;\n        var i2 = 0;\n        var result\
    \ = new List<long>();\n        while (i1 < l1.Count && i2 < l2.Count) {\n    \
    \        if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n      \
    \          i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return result;", "        var c = new List<long>();\n\
    \        if (l1.Count <= l2.Count) {\n            foreach (var x in l1) {\n  \
    \              if (l2.Contains(x)) {\n                    c.Add(x);\n        \
    \        }\n            }\n        } else {\n            foreach (var x in l2)\
    \ {\n                if (l1.Contains(x)) {\n                    c.Add(x);\n  \
    \              }\n            }\n        }\n        c.Sort();\n        return\
    \ c;", "        l1.Sort();\n        l2.Sort();\n        List<long> result = new\
    \ List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while (i1 <\
    \ l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n        \
    \        result.Add(l1[i1]);\n                i1++;\n                i2++;\n \
    \           } else if (l1[i1] < l2[i2]) {\n                i1++;\n           \
    \ } else {\n                i2++;\n            }\n        }\n        return result;",
  "        l1.Sort();\n        l2.Sort();\n        var result = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while (i1 < l1.Count && i2\
    \ < l2.Count) {\n            long e1 = l1[i1];\n            long e2 = l2[i2];\n\
    \            if (e1 == e2) {\n                result.Add(e1);\n              \
    \  i1++;\n                i2++;\n            } else if (e1 < e2) {\n         \
    \       i1++;\n            } else {\n                i2++;\n            }\n  \
    \      }\n        return result;", "        List<long> res = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long x in\
    \ l1) set.Add(x);\n        foreach (long x in l2) {\n            if (set.Contains(x))\
    \ res.Add(x);\n        }\n        res.Sort();\n        return res;", "       \
    \ var result = new List<long>();\n        var i1 = 0;\n        var i2 = 0;\n \
    \       while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2])\
    \ {\n                result.Add(l1[i1]);\n                i1++;\n            \
    \    i2++;\n            } else if (l1[i1] < l2[i2]) {\n                i1++;\n\
    \            } else {\n                i2++;\n            }\n        }\n     \
    \   return result;", "        var count = new Dictionary<long, int>();\n     \
    \   foreach (var v in l1) {\n            if (!count.ContainsKey(v)) {\n      \
    \          count[v] = 0;\n            }\n            count[v] += 1;\n        }\n\
    \        foreach (var v in l2) {\n            if (!count.ContainsKey(v)) {\n \
    \               count[v] = 0;\n            }\n            count[v] += 1;\n   \
    \     }\n        var result = new List<long>();\n        foreach (var c in count)\
    \ {\n            if (c.Value > 1) {\n                result.Add(c.Key);\n    \
    \        }\n        }\n        result.Sort();\n        return result;", "    \
    \    List<long> res = new List<long>();\n        foreach (long val in l1) {\n\
    \            if (l2.Contains(val)) {\n                res.Add(val);\n        \
    \    }\n        }\n        res.Sort();\n        return res;", "        if (l1.Count\
    \ < l2.Count) {\n            return Common(l2, l1);\n        }\n        l2.Sort();\n\
    \        List<long> ret = new List<long>();\n        foreach (long x in l1) {\n\
    \            if (BinarySearch(l2, x) && (ret.Count == 0 || ret[ret.Count - 1]\
    \ != x)) {\n                ret.Add(x);\n            }\n        }\n        return\
    \ ret;", "        l1.Sort();\n        l2.Sort();\n        var cmn = new List<long>();\n\
    \        for (int i = 0, j = 0; i < l1.Count && j < l2.Count; ) {\n          \
    \  if (l1[i] == l2[j]) {\n                cmn.Add(l1[i]);\n                i++;\n\
    \                j++;\n            } else if (l1[i] < l2[j]) {\n             \
    \   i++;\n            } else {\n                j++;\n            }\n        }\n\
    \        return cmn;", "        Dictionary<long, int> d1 = new Dictionary<long,\
    \ int>();\n        foreach (long n in l1) {\n            if (d1.ContainsKey(n))\n\
    \                d1[n]++;\n            else\n                d1[n] = 1;\n    \
    \    }\n        Dictionary<long, int> d2 = new Dictionary<long, int>();\n    \
    \    foreach (long n in l2) {\n            if (d2.ContainsKey(n))\n          \
    \      d2[n]++;\n            else\n                d2[n] = 1;\n        }\n   \
    \     // Pick all elements with min count.\n        List<long> result = new List<long>();\n\
    \        foreach (KeyValuePair<long, int> pair in d1) {\n            long n =\
    \ pair.Key;\n            int min = Math.Min(pair.Value, d2.ContainsKey(n) ? d2[n]\
    \ : 0);\n            for (int i = 0; i < min; i++)\n                result.Add(n);\n\
    \        }\n        result.Sort();\n        return result;", "        l1.Sort();\n\
    \        l2.Sort();\n        int i1 = 0;\n        int i2 = 0;\n        List<long>\
    \ cl = new List<long>();\n        while (i1 < l1.Count && i2 < l2.Count) {\n \
    \           if (l1[i1] == l2[i2]) {\n                cl.Add(l1[i1]);\n       \
    \         i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return cl;", "        List<long> res = new List<long>();\n\
    \        foreach (var el in l1) {\n            if (l2.Contains(el)) {\n      \
    \          res.Add(el);\n            }\n        }\n        res.Sort();\n     \
    \   return res;", "        if (l1.Count > l2.Count) {\n            List<long>\
    \ tmp = l1;\n            l1 = l2;\n            l2 = tmp;\n        }\n        HashSet<long>\
    \ hs = new HashSet<long>(l1);\n        hs.IntersectWith(l2);\n        return hs.ToList();",
  "        var s1 = new HashSet<long>(l1);\n        var s2 = new HashSet<long>(l2);\n\
    \        s1.IntersectWith(s2);\n        return s1.ToList();", "        var c =\
    \ new List<long>();\n        l1.Sort();\n        l2.Sort();\n        foreach (var\
    \ x in l1) {\n            if (c.Count > 0 && c[c.Count - 1] == x) continue;\n\
    \            if (l2.BinarySearch(x) >= 0) c.Add(x);\n        }\n        return\
    \ c;", "        var result = new List<long>();\n        if (l1.Count < l2.Count)\
    \ {\n            var temp = l1;\n            l1 = l2;\n            l2 = temp;\n\
    \        }\n        var l2Hash = new HashSet<long>(l2);\n        foreach (var\
    \ x in l1) {\n            if (l2Hash.Contains(x)) {\n                result.Add(x);\n\
    \            }\n        }\n        result.Sort();\n        return result;", " \
    \       Dictionary<long, int> counts = new Dictionary<long, int>();\n        foreach\
    \ (long x in l1)\n            if (counts.ContainsKey(x))\n                counts[x]\
    \ += 1;\n            else\n                counts[x] = 1;\n        foreach (long\
    \ x in l2)\n            if (counts.ContainsKey(x))\n                counts[x]\
    \ += 1;\n            else\n                counts[x] = 1;\n        return counts.Where(p\
    \ => p.Value > 1).Select(p => p.Key).ToList();", "        List<long> l = new List<long>();\n\
    \        //\n        // Write your code here\n        //\n        if (l1.Count\
    \ > l2.Count) {\n            var t = l1;\n            l1 = l2;\n            l2\
    \ = t;\n        }\n        l1.Sort();\n        l2.Sort();\n        int i = 0;\n\
    \        int j = 0;\n        while (i < l1.Count && j < l2.Count) {\n        \
    \    if (l1[i] == l2[j]) {\n                l.Add(l1[i]);\n                i++;\n\
    \                j++;\n            } else if (l1[i] < l2[j]) {\n             \
    \   i++;\n            } else {\n                j++;\n            }\n        }\n\
    \        return l;"]
stop_tokens:
- "\n    }\n"
