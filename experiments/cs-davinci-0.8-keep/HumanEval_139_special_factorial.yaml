name: HumanEval_139_special_factorial
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
  \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n \
  \   // >>> special_factorial(4)\n    // 288\n    // The function will receive an\
  \ integer as input and should return the special\n    // factorial of this integer.\n\
  \    public static long SpecialFactorial(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
  \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
  \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\
  \n}\n"
completions: ['        return 1;', "        // remove this line\n        return -1;",
  '        throw new NotImplementedException();', '        return -1;', "        long\
    \ result = n;\n        n--;\n        while (n > 0) {\n            result *= n;\n\
    \            n--;\n        }\n        return result;", "        if (n < 0)\n \
    \           throw new ArgumentException();\n        long result = 1;\n       \
    \ for (long i = n; i > 0; i--)\n            result *= i * SpecialFactorial(i -\
    \ 1);\n        return result;", '        return Factorial(n) * SequenceProduct(n
    - 1);', "        if (n == 0) {\n            return 1;\n        }\n        return\
    \ n * SpecialFactorial(n - 1);", "        // Your code here.\n        return 1;",
  '        return Factorial(n) * Factorial(n - 1);', "        // TODO: Implement this\
    \ function\n        return 0;", "        // Your code goes here\n        return\
    \ 0;", "        long result = 1;\n        for (long i = n; i > 0; i--) {\n   \
    \         result *= Factorial(i);\n        }\n        return result;", "     \
    \   BigInteger fact = 1;\n        for (int i = 1; i <= n; i++) {\n           \
    \ fact *= i;\n        }\n        return fact;", '        return n == 0 ? 1 : n
    * SpecialFactorial(n - 1);', "        // Replace the following line with your\
    \ solution.\n        BigInteger sum = 1;\n        while (n > 0) {\n          \
    \  sum *= Factorial(n);\n            n--;\n        }\n        return (long)sum;",
  "        if (n <= 0) return 0;\n        long r = 1;\n        for (long i = n; i\
    \ > 0; i--)\n            r *= Factorial(i);\n        return r;", "        // implement\
    \ me\n        if (n < 0) return 0;\n        return factorial(n);", "        BigInteger\
    \ result = 1;\n        while (n > 0) {\n            result *= n;\n           \
    \ n--;\n        }\n        return result;", "        if (n == 0) return 1;\n \
    \       long mul = n;\n        while (n-- > 1) {\n            mul *= n;\n    \
    \    }\n        return mul;"]
stop_tokens:
- "\n    }\n"
