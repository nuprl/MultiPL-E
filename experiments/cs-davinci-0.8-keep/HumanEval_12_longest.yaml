name: HumanEval_12_longest
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Out of list of strings, return the longest one. Return the first\
  \ one in case of multiple\n    // strings of the same length. Return None in case\
  \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
  \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n    public\
  \ static string Longest(List<string> strings) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Longest((new\
  \ List<string>())).Equals(null));\n    Debug.Assert(Longest((new List<string>(new\
  \ string[]{(string)\"x\", (string)\"y\", (string)\"z\"}))).Equals((\"x\")));\n \
  \   Debug.Assert(Longest((new List<string>(new string[]{(string)\"x\", (string)\"\
  yyy\", (string)\"zzzz\", (string)\"www\", (string)\"kkkk\", (string)\"abc\"}))).Equals((\"\
  zzzz\")));\n    }\n\n}\n"
completions: ["        // TODO: Implement\n        return \"\";", "        if (strings.Count\
    \ == 0) {\n            return null;\n        }\n        string max = \"\";\n \
    \       foreach (string s in strings) {\n            if (s.Length > max.Length)\
    \ {\n                max = s;\n            }\n        }\n        return max;",
  "        if (strings.Count == 0)\n            return null;\n        string longest\
    \ = strings[0];\n        for (int i = 1; i < strings.Count; i++) {\n         \
    \   if (strings[i].Length > longest.Length)\n                longest = strings[i];\n\
    \        }\n        return longest;", "        if (strings.Count == 0) {\n   \
    \         return null;\n        }\n        // Implement the method\n        int\
    \ max = 0;\n        string str = \"\";\n        foreach (string s in strings)\
    \ {\n            if (s.Length > max) {\n                max = s.Length;\n    \
    \            str = s;\n            }\n        }\n        return str;", "     \
    \   if (strings.Count == 0) {\n            return null;\n        }\n\n       \
    \ var rv = strings[0];\n        for (int i = 1; i < strings.Count; i++) {\n  \
    \          if (strings[i].Length > rv.Length) {\n                rv = strings[i];\n\
    \            }\n        }\n        return rv;", "        if (strings.Count ==\
    \ 0) {\n            return null;\n        }\n        string longest = strings[0];\n\
    \        for (int i = 1; i < strings.Count; i++) {\n            if (strings[i].Length\
    \ > longest.Length) {\n                longest = strings[i];\n            }\n\
    \        }\n        return longest;", '        return "";', "        if (strings.Count\
    \ == 0) {\n            return null;\n        }\n        string max_string = strings[0];\n\
    \        int max_length = max_string.Length;\n        for (int i = 1; i < strings.Count;\
    \ i++) {\n            if (strings[i].Length > max_length) {\n                max_string\
    \ = strings[i];\n                max_length = max_string.Length;\n           \
    \ }\n        }\n        return max_string;", "        if (strings.Count == 0)\n\
    \            return null;\n        string longest = strings[0];\n        foreach\
    \ (string s in strings) {\n            if (s.Length > longest.Length)\n      \
    \          longest = s;\n        }\n        return longest;", "        if (strings.Count()\
    \ == 0) {\n            return null;\n        }\n        string ret = \"\";\n \
    \       foreach (string s in strings) {\n            if (s.Length > ret.Length)\
    \ {\n                ret = s;\n            }\n        }\n        return ret;",
  "        if (strings.Count == 0) {\n            return null;\n        }\n\n    \
    \    int maxLength = -1;\n        string maxString = null;\n        foreach (string\
    \ currentString in strings) {\n            if (currentString.Length > maxLength)\
    \ {\n                maxLength = currentString.Length;\n                maxString\
    \ = currentString;\n            }\n        }\n        return maxString;", "  \
    \      string maxString = \"\";\n        int maxStringLen = 0;\n        foreach\
    \ (string s in strings) {\n            if (s.Length > maxStringLen) {\n      \
    \          maxString = s;\n                maxStringLen = s.Length;\n        \
    \    }\n        }\n        return maxString;", "        int maxLen = 0;\n    \
    \    string longest = null;\n        foreach (string s in strings) {\n       \
    \     if (s.Length > maxLen) {\n                maxLen = s.Length;\n         \
    \       longest = s;\n            }\n        }\n        return longest;", "  \
    \      if (strings.Count == 0)\n            return null;\n        int longest\
    \ = strings[0].Length;\n        int longestString = 0;\n        for (int i = 1;\
    \ i < strings.Count; i++) {\n            if (strings[i].Length > longest) {\n\
    \                longest = strings[i].Length;\n                longestString =\
    \ i;\n            }\n        }\n        return strings[longestString];", "   \
    \     if (strings.Count == 0) {\n            return null;\n        }\n       \
    \ int maxLength = 0;\n        string maxString = \"\";\n        foreach (string\
    \ s in strings) {\n            if (s.Length > maxLength) {\n                maxLength\
    \ = s.Length;\n                maxString = s;\n            }\n        }\n    \
    \    return maxString;", "        // Fill in this function.\n        if (strings.Count\
    \ == 0) {\n            return \"\";\n        }\n        else {\n            var\
    \ maxLength = strings.Max(x => x.Length);\n            return strings.Find(x =>\
    \ x.Length == maxLength);\n        }", "        string longest = \"\";\n     \
    \   foreach (string s in strings) {\n            if (s.Length > longest.Length)\
    \ {\n                longest = s;\n            }\n        }\n        return longest;",
  "        if (strings.Count == 0) {\n            return null;\n        }\n      \
    \  int max_length = 0;\n        string longest = null;\n        foreach (string\
    \ s in strings) {\n            if (s.Length > max_length) {\n                max_length\
    \ = s.Length;\n                longest = s;\n            }\n        }\n      \
    \  return longest;", "        // *** INSERT CODE HERE ***\n        return strings.OrderByDescending(x\
    \ => x.Length).FirstOrDefault();", '        return strings.Aggregate((x, y) =>
    x.Length > y.Length ? x : y);']
stop_tokens:
- "\n    }\n"
