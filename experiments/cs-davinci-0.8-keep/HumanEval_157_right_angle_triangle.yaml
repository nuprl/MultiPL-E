name: HumanEval_157_right_angle_triangle
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given the lengths of the three sides of a triangle. Return True\
  \ if the three\n    // sides form a right-angled triangle, False otherwise.\n  \
  \  // A right-angled triangle is a triangle in which one angle is right angle or\
  \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
  \ True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long\
  \ a, long b, long c) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
  \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
  \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
  \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
  \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))\
  \ == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n\
  \    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),\
  \ (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))\
  \ == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
  \    }\n\n}\n"
completions: ["        if (a < 0 || b < 0 || c < 0) return false;\n        var sorted\
    \ = new List<long> { a, b, c }.OrderBy(x => x).ToList();\n        var squared\
    \ = sorted.Select(x => x * x).ToList();\n        return squared[0] + squared[1]\
    \ == squared[2];", "        //return Math.Pow(a, 2) + Math.Pow(b, 2) == Math.Pow(c,\
    \ 2);\n        return a * a + b * b == c * c;", "        // Good luck!\n     \
    \   return 0;", "        // Write your code here\n\n        return false;", " \
    \       var max = Math.Max(a, Math.Max(b, c));\n        var min = Math.Min(a,\
    \ Math.Min(b, c));\n        var mid = a + b + c - max - min;\n        var max_squared\
    \ = max * max;\n        var min_squared = min * min;\n        var mid_squared\
    \ = mid * mid;\n        return max_squared == min_squared + mid_squared;", " \
    \       var r = a * a + b * b == c * c;\n        var i = a * a == b * b + c *\
    \ c;\n        var o = b * b == a * a + c * c;\n        return r || i || o;", " \
    \       // If the longest side of the triangle is the hypotenuse, then the triangle\n\
    \        // is a right angle.\n        // The sum of the squares of two sides\
    \ of a triangle are equal to the square\n        // of the hypotenuse.\n     \
    \   // Thus, if the square of the longest side equals the sum of the squares of\n\
    \        // the other two sides, then the triangle is a right angle.\n       \
    \ long hypotenuse = Math.Max(a, Math.Max(b, c));\n        long s1 = Math.Min(a,\
    \ Math.Min(b, c));\n        long s2 = a + b + c - hypotenuse - s1;\n        long\
    \ h_squared = hypotenuse * hypotenuse;\n        long s1_squared = s1 * s1;\n \
    \       long s2_squared = s2 * s2;\n        return h_squared == s1_squared + s2_squared;",
  '        return Math.Pow(a, 2) + Math.Pow(b, 2) == Math.Pow(c, 2);', "        //\
    \ An integer n is a perfect square if it is the square of an integer.\n      \
    \  // You can use the sqrt method on a number x in C# to obtain the square root\n\
    \        // of x. \n        // Math.Sqrt(x) == the square root of x\n        //\
    \ Math.Pow(x, y) == x to the power of y\n        // Note: you need to include\
    \ the \"using System;\" line at the top of this\n        // file in order to be\
    \ able to call the sqrt method.\n        // Also, try to see if it is possible\
    \ to solve this problem without using\n        // the sqrt method.\n        return\
    \ false;", '        return (a*a + b*b == c*c) || (b*b + c*c == a*a) || (c*c +
    a*a == b*b);', "        // TODO: Write your code here\n        return false;",
  "        // TODO\n        return false;", "        // your code goes here...\n \
    \       return false;", "        // create a temp variable, this is so we dont\
    \ mess up the order of our\n        // sides.\n        var temp = 0L;\n      \
    \  // check for a triangle\n        if (a + b <= c || a + c <= b || b + c <= a)\
    \ {\n            return false;\n        }\n        // if the greatest side is\
    \ a...\n        if (a > b && a > c) {\n            // swap a and c\n         \
    \   temp = a;\n            a = c;\n            c = temp;\n        }\n        //\
    \ if the greatest side is b...\n        if (b > a && b > c) {\n            //\
    \ swap b and c\n            temp = b;\n            b = c;\n            c = temp;\n\
    \        }\n        // final check...\n        return a * a + b * b == c * c;",
  "        long[] nums = new long[] { a, b, c };\n        Array.Sort(nums);\n    \
    \    // Pythagorean theorem\n        // (c^2) = (a^2) + (b^2)\n        return\
    \ nums[2] * nums[2] == nums[0] * nums[0] + nums[1] * nums[1];", "        // TODO:\
    \ solve it\n        return false;", '        return (a * a + b * b == c * c);',
  '        throw new NotImplementedException();', '        return a * a + b * b ==
    c * c;', '        return false;']
stop_tokens:
- "\n    }\n"
