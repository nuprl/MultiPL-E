language: cs
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str.Substring(i, substring.Length) ==\
    \ substring) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length\
    \ must refer to a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]\
    \ in <9e57384a200742e882e378e3a7cb3534>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00033] in <9e57384a200742e882e378e3a7cb3534>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: Index and length must refer to\
    \ a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]\
    \ in <9e57384a200742e882e378e3a7cb3534>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00033] in <9e57384a200742e882e378e3a7cb3534>:0 \n"
  stdout: ''
  timestamp: 1659823782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long cnt = 0;\n        for (int i = 0; i <=\
    \ str.Length - substring.Length; i++) {\n            if (str.Substring(i, substring.Length)\
    \ == substring) {\n                cnt++;\n            }\n        }\n        return\
    \ cnt;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long i = 0;\n        long c = 0;\n       \
    \ while ((i = str.IndexOf(substring, (int)i)) != -1) {\n            i += substring.Length;\n\
    \            c++;\n        }\n        return c;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n\
    \    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"\
    ), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1caba0f142bc45bc8615c4d53fe70e1b>:0 \n"
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        if (str.Length < substring.Length) {\n   \
    \         return 0;\n        }\n\n        long result = 0;\n        for (int i\
    \ = 0; i < str.Length - substring.Length + 1; i++) {\n            if (str.Substring(i,\
    \ substring.Length) == substring) {\n                result++;\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),\
    \ (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"\
    )) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (long i = 0;\
    \ i < str.Length; i++) {\n            if (i + substring.Length <= str.Length)\
    \ {\n                string sub = str.Substring((int)i, substring.Length);\n \
    \               if (sub == substring) {\n                    count++;\n      \
    \          }\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"\
    x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"\
    john doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823782
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        int len = substring.Length;\n        int i\
    \ = 0;\n        long count = 0;\n        while (i < str.Length) {\n          \
    \  int j = 0;\n            while (i + j < str.Length && str[i + j] == substring[j])\
    \ {\n                j++;\n            }\n            if (j == len) {\n      \
    \          count++;\n                i += len;\n            } else {\n       \
    \         i++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"\
    x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"\
    john doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x0002e] in <a788aeba807444a183d0ffef929f838b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0001a] in <a788aeba807444a183d0ffef929f838b>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x0002e] in <a788aeba807444a183d0ffef929f838b>:0 \n\
    \  at Problem.Main (System.String[] args) [0x0001a] in <a788aeba807444a183d0ffef929f838b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        int n = str.Length, m = substring.Length;\n\
    \        long[] pi = PrefixFunction(substring);\n        long count = 0;\n   \
    \     int k = 0;\n        for (int i = 0; i < n; i++) {\n            while (k\
    \ > 0 && substring[k] != str[i]) {\n                k = (int)pi[k - 1];\n    \
    \        }\n            if (substring[k] == str[i]) {\n                k++;\n\
    \            }\n            if (k == m) {\n                count++;\n        \
    \        k = (int)pi[k - 1];\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdlgkzros.cs(18,21): error CS0103: The name ''PrefixFunction'' does not
    exist in the current context

    '
  timestamp: 1659823782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        // Create list of indexes of occurrence of\
    \ substring in str\n        var indexes = new List<int>();\n        for (int i\
    \ = 0; i < str.Length; i++) {\n            int j = 0;\n            while (j <\
    \ substring.Length && i + j < str.Length && str[i + j] == substring[j]) {\n  \
    \              j++;\n            }\n            if (j == substring.Length) {\n\
    \                indexes.Add(i);\n            }\n        }\n        long count\
    \ = 0;\n        int last_index = -1;\n        for (int i = 0; i < indexes.Count;\
    \ i++) {\n            if (indexes[i] != last_index) {\n                count++;\n\
    \                last_index = indexes[i];\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        // YOUR CODE HERE\n        return 0;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c01e4794ae2a4e63b0dd45e63c984bbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c01e4794ae2a4e63b0dd45e63c984bbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long n = 0;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (str.Substring(i, substring.Length) == substring)\n \
    \               n++;\n        }\n        return n;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n\
    \    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"\
    ), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length\
    \ must refer to a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]\
    \ in <16c119c1c40a4cc89e82f30de005472f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00033] in <16c119c1c40a4cc89e82f30de005472f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: Index and length must refer to\
    \ a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00011]\
    \ in <16c119c1c40a4cc89e82f30de005472f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00033] in <16c119c1c40a4cc89e82f30de005472f>:0 \n"
  stdout: ''
  timestamp: 1659823782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        var str_l = str.Length;\n        var substr_l\
    \ = substring.Length;\n        long count = 0;\n        for (int i = 0; i < str_l;\
    \ i++) {\n            if (i + substr_l <= str_l && str.Substring(i, substr_l)\
    \ == substring) {\n                count++;\n            }\n        }\n      \
    \  return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823782
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        return str.Count(str.StartsWith(substring,\
    \ StringComparison.Ordinal));\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),\
    \ (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"\
    )) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz37gk7f4.cs(17,26): error CS1503: Argument 2: cannot convert from ''bool''
    to ''System.Func<char, bool>''

    '
  timestamp: 1659823782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long cnt = 0;\n        for (int i = 0; i <=\
    \ str.Length - substring.Length; i++) {\n            if (str.Substring(i, substring.Length)\
    \ == substring) {\n                cnt++;\n            }\n        }\n        return\
    \ cnt;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823782
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        // assert substring is in str\n        long\
    \ result = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if\
    \ (str[i] == substring[0]) {\n                bool found = true;\n           \
    \     for (int j = 1; j < substring.Length; j++) {\n                    if (str[i\
    \ + j] != substring[j]) {\n                        found = false;\n          \
    \              break;\n                    }\n                }\n            \
    \    if (found) {\n                    result++;\n                }\n        \
    \    }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),\
    \ (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"\
    )) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <7e6812002c0e44309b87fca6861eea52>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <7e6812002c0e44309b87fca6861eea52>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <7e6812002c0e44309b87fca6861eea52>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <7e6812002c0e44309b87fca6861eea52>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        var count = 0;\n        var currentPos = 0;\n\
    \        while (currentPos != -1) {\n            count++;\n            currentPos\
    \ = str.IndexOf(substring, currentPos + 1);\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: startIndex\n  at System.String.IndexOf (System.String value, System.Int32\
    \ startIndex, System.Int32 count, System.StringComparison comparisonType) [0x0001b]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.String.IndexOf (System.String\
    \ value, System.Int32 startIndex, System.StringComparison comparisonType) [0x00009]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.String.IndexOf (System.String\
    \ value, System.Int32 startIndex) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x0000c]\
    \ in <d9761cfe412248bca4029bbbdde6a61b>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <d9761cfe412248bca4029bbbdde6a61b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must\
    \ be non-negative and less than the size of the collection.\nParameter name: startIndex\n\
    \  at System.String.IndexOf (System.String value, System.Int32 startIndex, System.Int32\
    \ count, System.StringComparison comparisonType) [0x0001b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.IndexOf (System.String value, System.Int32 startIndex,\
    \ System.StringComparison comparisonType) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.IndexOf (System.String value, System.Int32 startIndex)\
    \ [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.HowManyTimes\
    \ (System.String str, System.String substring) [0x0000c] in <d9761cfe412248bca4029bbbdde6a61b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <d9761cfe412248bca4029bbbdde6a61b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        if (substring.Length > str.Length)\n     \
    \       return 0;\n        long total = 0;\n        var i = 0;\n        while\
    \ (i < str.Length) {\n            var k = str.IndexOf(substring, i);\n       \
    \     if (k == -1) break;\n            total++;\n            i = k + 1;\n    \
    \    }\n        return total;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),\
    \ (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"\
    )) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        if (substring.Length > str.Length)\n     \
    \       return 0;\n        long result = 0;\n        for (int i = 0; i < str.Length\
    \ - substring.Length + 1; i++) {\n            if (str.Substring(i, substring.Length)\
    \ == substring)\n                result++;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823782
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long n = 0;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (str.Substring(i, Math.Min(substring.Length, str.Length\
    \ - i)) == substring) {\n                n++;\n            }\n        }\n    \
    \    return n;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long times = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (i + substring.Length <= str.Length &&\n\
    \                substring == str.Substring(i, substring.Length)) {\n        \
    \        times++;\n            }\n        }\n        return times;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        var count = 0;\n        var length = substring.Length;\n\
    \        for (var i = 0; i < str.Length; i++) {\n            if (str.Substring(i,\
    \ length) == substring) {\n                count++;\n            }\n        }\n\
    \        return count;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),\
    \ (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"\
    )) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length\
    \ must refer to a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x0000f]\
    \ in <51fad76fbc4a477f870187551bd6d011>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00033] in <51fad76fbc4a477f870187551bd6d011>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: Index and length must refer to\
    \ a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x0000f]\
    \ in <51fad76fbc4a477f870187551bd6d011>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00033] in <51fad76fbc4a477f870187551bd6d011>:0 \n"
  stdout: ''
  timestamp: 1659823782
