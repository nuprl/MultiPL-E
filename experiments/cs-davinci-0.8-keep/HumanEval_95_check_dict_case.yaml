name: HumanEval_95_check_dict_case
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a dictionary, return True if all keys are strings in lower\
  \ \n    // case or all keys are strings in upper case, else return False.\n    //\
  \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
  \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
  \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
  \ return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
  :\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"John\", \"\
  Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
  STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    public static bool\
  \ CheckDictCase(Dictionary<string,string> dict) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"b\", \"banana\"}})) ==\
  \ (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"\
  p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})) == (false));\n\
  \    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"\
  }, {\"5\", \"banana\"}, {\"a\", \"apple\"}})) == (false));\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\"\
  , \"Houston\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"\
  STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})) == (true));\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))\
  \ == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        // Implement this function so that it passes the tests in Tests.cs\n\
    \        return false;", "        var LowerKeys = dict.Keys.Where(k => k.All(c\
    \ => char.IsLower(c)));\n        var UpperKeys = dict.Keys.Where(k => k.All(c\
    \ => char.IsUpper(c)));\n        if (LowerKeys.Count() == dict.Count()) return\
    \ true;\n        if (UpperKeys.Count() == dict.Count()) return true;\n       \
    \ return false;", "        // write your code here\n        // return true if\
    \ the task is completed successfully\n        if (dict.Count == 0) return false;\n\
    \        bool upper = false;\n        bool lower = false;\n        foreach (var\
    \ pair in dict) {\n            if (pair.Key.All(char.IsUpper)) upper = true;\n\
    \            if (pair.Key.All(char.IsLower)) lower = true;\n        }\n      \
    \  return upper ^ lower;", "        if (dict.Count == 0) {\n            return\
    \ false;\n        }\n\n        bool all_upper = true;\n        bool all_lower\
    \ = true;\n        foreach (string key in dict.Keys) {\n            if (all_upper\
    \ && !key.ToUpper().Equals(key)) {\n                all_upper = false;\n     \
    \       }\n            if (all_lower && !key.ToLower().Equals(key)) {\n      \
    \          all_lower = false;\n            }\n        }\n        return all_upper\
    \ || all_lower;", "        // Your code here\n        return false;", '        throw
    new NotImplementedException();', '        // TODO: Implement check_dict_case function
    here', "        if (dict.Count == 0) return false;\n        bool all_upper = true;\n\
    \        bool all_lower = true;\n        foreach (var kvp in dict) {\n       \
    \     if (kvp.Key.ToUpper() != kvp.Key) all_upper = false;\n            if (kvp.Key.ToLower()\
    \ != kvp.Key) all_lower = false;\n        }\n        return all_upper || all_lower;",
  "        // YOUR CODE HERE\n        throw new NotImplementedException();", "   \
    \     var upper = dict.Keys.ToArray().Select(k => k.ToUpper()).ToArray();\n  \
    \      var lower = dict.Keys.ToArray().Select(k => k.ToLower()).ToArray();\n \
    \       return dict.Keys.ToArray().SequenceEqual(upper) || dict.Keys.ToArray().SequenceEqual(lower);",
  "        if (dict.Count == 0) return false;\n        bool allUpper = true;\n   \
    \     bool allLower = true;\n        foreach (var kvp in dict) {\n           \
    \ if (String.IsNullOrEmpty(kvp.Key)) continue;\n            if (Char.IsLower(kvp.Key[0]))\
    \ {\n                allUpper = false;\n            } else {\n               \
    \ allLower = false;\n            }\n        }\n        return allUpper || allLower;",
  "        // IMPLEMENT ME\n        return false;", "        bool lower = true;\n\
    \        bool upper = true;\n        foreach (string key in dict.Keys) {\n   \
    \         if (key.Any(char.IsUpper)) upper = false;\n            if (key.Any(char.IsLower))\
    \ lower = false;\n        }\n        return upper || lower;", "        // TODO:\
    \ Implement this\n        return false;", "        if (dict.Count == 0) {\n  \
    \          return false;\n        }\n        string[] keys = dict.Keys.ToArray();\n\
    \        if (keys[0].All(Char.IsUpper)) {\n            for (int i = 1; i < keys.Length;\
    \ i++) {\n                if (!keys[i].All(Char.IsUpper)) {\n                \
    \    return false;\n                }\n            }\n        } else if (keys[0].All(Char.IsLower))\
    \ {\n            for (int i = 1; i < keys.Length; i++) {\n                if (!keys[i].All(Char.IsLower))\
    \ {\n                    return false;\n                }\n            }\n   \
    \     } else {\n            return false;\n        }\n        return true;", " \
    \       if (dict.Count == 0) return false;\n        bool upper = dict.Keys.First()\
    \ == dict.Keys.First().ToUpper();\n        return dict.Keys.All(x => x == x.ToUpper()\
    \ == upper);", "        bool result = true;\n        int lower_keys = 0;\n   \
    \     int upper_keys = 0;\n        foreach (KeyValuePair<string, string> pair\
    \ in dict) {\n            if (pair.Key.All(char.IsLower)) {\n                lower_keys\
    \ += 1;\n            } else if (pair.Key.All(char.IsUpper)) {\n              \
    \  upper_keys += 1;\n            } else {\n                result = false;\n \
    \               break;\n            }\n        }\n        if (lower_keys > 0 &&\
    \ upper_keys > 0) {\n            result = false;\n        }\n        return result;",
  "        bool lower = true;\n        bool upper = true;\n        foreach (var key\
    \ in dict.Keys) {\n            if (key != key.ToLower()) lower = false;\n    \
    \        if (key != key.ToUpper()) upper = false;\n        }\n        return lower\
    \ || upper;", "        if (dict.Count == 0) {\n            return false;\n   \
    \     }\n        bool isLower = dict.Keys.First().ToLower() == dict.Keys.First();\n\
    \        foreach (var key in dict.Keys) {\n            if (isLower) {\n      \
    \          if (key.ToLower() != key) {\n                    return false;\n  \
    \              }\n            } else {\n                if (key.ToUpper() != key)\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;", "        bool check = false;\n        bool hasLower\
    \ = false;\n        bool hasUpper = false;\n        foreach (var entry in dict)\
    \ {\n            if (entry.Key.ToLower() == entry.Key) {\n                hasLower\
    \ = true;\n            } else if (entry.Key.ToUpper() == entry.Key) {\n      \
    \          hasUpper = true;\n            } else {\n                return false;\n\
    \            }\n        }\n        if (hasLower && hasUpper) {\n            return\
    \ false;\n        } else {\n            return true;\n        }"]
stop_tokens:
- "\n    }\n"
