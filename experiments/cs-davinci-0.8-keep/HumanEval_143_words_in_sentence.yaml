name: HumanEval_143_words_in_sentence
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a string representing a sentence,\n    // the\
  \ sentence contains some words separated by a space,\n    // and you have to return\
  \ a string that contains the words from the original sentence,\n    // whose lengths\
  \ are prime numbers,\n    // the order of the words in the new string should be\
  \ the same as the original one.\n    // Example 1:\n    // Input: sentence = \"\
  This is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
  \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n \
  \   // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n  \
  \  public static string WordsInSentence(string sentence) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
  This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
  \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
  there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
  Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
  go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\"\
  )).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
  is\")));\n    }\n\n}\n"
completions: ["        // This problem is simple,\n        // we have to loop over\
    \ all the words,\n        // and check if the length of the word is prime or not,\n\
    \        // if it is prime, then we add the word to the final string,\n      \
    \  // otherwise, we continue\n        // Time Complexity: O(n), where n is the\
    \ length of the sentence\n        // Space Complexity: O(1)\n        bool IsPrime(int\
    \ num) {\n            if (num == 2) return true;\n            if (num == 1 ||\
    \ num % 2 == 0) return false;\n            for (int i = 3; i * i <= num; i +=\
    \ 2) {\n                if (num % i == 0) return false;\n            }\n     \
    \       return true;\n        }\n        string ret = \"\";\n        string[]\
    \ words = sentence.Split(\" \");\n        foreach (string word in words) {\n \
    \           if (IsPrime(word.Length)) {\n                ret += word + \" \";\n\
    \            }\n        }\n        return ret.Trim();", "        var parts = sentence.Split('\
    \ ');\n        var sb = new StringBuilder();\n        foreach (var word in parts)\
    \ {\n            if (IsPrime(word.Length)) {\n                sb.Append(word);\n\
    \                sb.Append(' ');\n            }\n        }\n        if (sb.Length\
    \ > 0) {\n            sb.Length--;\n        }\n        return sb.ToString();",
  "        return String.Join(' ', sentence.Split(' ').Where(w => IsPrime(w.Length)));",
  "        var primes = new List<int>();\n        // Generate some prime numbers.\n\
    \        {\n            var isPrime = new bool[101];\n            for (int i =\
    \ 2; i < isPrime.Length; i++) {\n                isPrime[i] = true;\n        \
    \    }\n            for (int i = 2; i * i < isPrime.Length; i++) {\n         \
    \       if (isPrime[i]) {\n                    for (int j = i * i; j < isPrime.Length;\
    \ j += i) {\n                        isPrime[j] = false;\n                   \
    \ }\n                }\n            }\n            for (int i = 2; i < isPrime.Length;\
    \ i++) {\n                if (isPrime[i]) {\n                    primes.Add(i);\n\
    \                }\n            }\n        }\n        var words = sentence.Split('\
    \ ');\n        return string.Join(\" \", words.Where(word => primes.Contains(word.Length)));",
  "        if (sentence == null)\n            throw new ArgumentNullException(nameof(sentence));\n\
    \        var words = sentence.Split();\n        var sb = new StringBuilder();\n\
    \        foreach (var word in words) {\n            var len = word.Length;\n \
    \           var isPrime = len > 1;\n            for (var i = 2; i < len; i++)\
    \ {\n                if (len % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                if (sb.Length > 0)\n                    sb.Append('\
    \ ');\n                sb.Append(word);\n            }\n        }\n        return\
    \ sb.ToString();", "        var words = sentence.Split();\n        var result\
    \ = new StringBuilder();\n        foreach (var word in words) {\n            if\
    \ (IsPrime(word.Length)) {\n                result.Append(word + \" \");\n   \
    \         }\n        }\n        return result.ToString().Trim();", "        var\
    \ words = sentence.Split();\n        var sb = new StringBuilder();\n        var\
    \ primes = new HashSet<int> { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 };\n        foreach (var word\
    \ in words) {\n            if (primes.Contains(word.Length)) {\n             \
    \   sb.Append(word);\n                sb.Append(\" \");\n            }\n     \
    \   }\n        if (sb.Length == 0) {\n            return \"\";\n        }\n  \
    \      sb.Length--;\n        return sb.ToString();", "        // Your code goes\
    \ here\n        string[] words = sentence.Split(' ');\n        string[] primeWords\
    \ = new string[words.Length];\n        int primeCount = 0;\n        foreach (string\
    \ word in words) {\n            if (IsPrime(word.Length)) {\n                primeWords[primeCount]\
    \ = word;\n                primeCount++;\n            }\n        }\n        string[]\
    \ trimedPrimeWords = new string[primeCount];\n        for (int i = 0; i < primeCount;\
    \ i++) {\n            trimedPrimeWords[i] = primeWords[i];\n        }\n      \
    \  return string.Join(\" \", trimedPrimeWords);", "        // * 1 <= len(sentence)\
    \ <= 100\n        Debug.Assert(1 <= sentence.Length && sentence.Length <= 100);\n\
    \        // * sentence contains only letters\n        Debug.Assert(sentence.All(c\
    \ => Char.IsLetter(c)));\n        return String.Join(\" \", sentence.Split(' ').Where(IsPrimeLength));",
  "        string[] words = sentence.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        var sb = new StringBuilder();\n        foreach (var word in words) {\n\
    \            if (IsPrime(word.Length)) {\n                sb.Append(word);\n \
    \               sb.Append(' ');\n            }\n        }\n        return sb.ToString().Trim();",
  "        // For i = 0 to length(sentence):\n        //   Find the index of the next\
    \ space\n        //   If the length of the word is prime:\n        //     Add\
    \ the word to the result string\n        // Return the result string\n       \
    \ string result = \"\";\n        for (int i = 0; i < sentence.Length; i++) {\n\
    \            int space = sentence.IndexOf(' ', i);\n            if (space == -1)\
    \ {\n                space = sentence.Length;\n            }\n            int\
    \ length = space - i;\n            if (IsPrime(length)) {\n                result\
    \ += sentence.Substring(i, length) + \" \";\n            }\n            i = space;\n\
    \        }\n        if (result.Length > 0) {\n            result = result.Substring(0,\
    \ result.Length - 1);\n        }\n        return result;", "        string[] words\
    \ = sentence.Split();\n        var all_is_prime = words.Select(x => IsPrime(x.Length));\n\
    \        var words_with_prime_length = new List<string>();\n        for (int i\
    \ = 0; i < words.Length; i++) {\n            if (all_is_prime[i])\n          \
    \      words_with_prime_length.Add(words[i]);\n        }\n        return string.Join(\"\
    \ \", words_with_prime_length);", "        return String.Join(\" \", sentence.Split('\
    \ ').Where(w => isPrime(w.Length)));", "        var words = sentence.Split(' ');\n\
    \        var sb = new StringBuilder();\n        foreach (var word in words) {\n\
    \            if (word.Length == 1) continue;\n            if (word.Length == 2)\
    \ {\n                sb.Append(word + \" \");\n                continue;\n   \
    \         }\n            var max = word.Length;\n            for (int i = 3; i\
    \ < max; i += 2) {\n                if (word.Length % i == 0) {\n            \
    \        goto next;\n                }\n            }\n            sb.Append(word\
    \ + \" \");\n        next:\n            continue;\n        }\n        return sb.ToString().Trim();",
  "        var result = new StringBuilder();\n        var words = sentence.Split();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Append(word + \" \");\n            }\n        }\n\
    \        return result.ToString().Trim();", "        string[] words = sentence.Split('\
    \ ');\n        List<string> ans = new List<string>();\n        foreach (string\
    \ word in words) {\n            if (IsPrime(word.Length)) {\n                ans.Add(word);\n\
    \            }\n        }\n        return string.Join(\" \", ans);", "       \
    \ var words = sentence.Split(' ');\n        var newWords = new List<string>();\n\
    \        foreach (var word in words) {\n            var len = word.Length;\n \
    \           if (IsPrime(len)) {\n                newWords.Add(word);\n       \
    \     }\n        }\n        return string.Join(\" \", newWords);", "        var\
    \ words = sentence.Split();\n        var sb = new StringBuilder();\n        foreach\
    \ (var word in words) {\n            if (IsPrime(word.Length)) {\n           \
    \     sb.Append(word);\n                sb.Append(\" \");\n            }\n   \
    \     }\n        return sb.ToString().Trim();", "        var result = new StringBuilder();\n\
    \        var words = sentence.Split(' ');\n        foreach (var word in words)\
    \ {\n            if (IsPrime(word.Length)) {\n                result.Append(word\
    \ + \" \");\n            }\n        }\n        return result.ToString().Trim();",
  "        string[] words = sentence.Split(' ');\n        List<string> list = new\
    \ List<string>();\n        foreach (string word in words) {\n            if (Primes.IsPrime(word.Length))\
    \ {\n                list.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", list);"]
stop_tokens:
- "\n    }\n"
