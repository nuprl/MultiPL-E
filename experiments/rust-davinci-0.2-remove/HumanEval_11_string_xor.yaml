name: HumanEval_11_string_xor
language: rust
prompt: "/// Input are two strings a and b consisting only of 1s and 0s.\n/// Perform\
  \ binary XOR on these inputs and return result also as a string.\nfn string_xor(a:\
  \ String, b: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = string_xor;\n    assert_eq!(candidate(String::from(\"\
  111000\"), String::from(\"101010\")), String::from(\"010010\"));\n    assert_eq!(candidate(String::from(\"\
  1\"), String::from(\"1\")), String::from(\"0\"));\n    assert_eq!(candidate(String::from(\"\
  0101\"), String::from(\"0000\")), String::from(\"0101\"));\n}\n"
completions: ["    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        let x = i.to_digit(10).unwrap() ^ j.to_digit(10).unwrap();\n    \
    \    result.push_str(&x.to_string());\n    }\n    result", "    let mut result\
    \ = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match\
    \ (i, j) {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n \
    \           ('1', '0') => '1',\n            ('1', '1') => '0',\n            _\
    \ => panic!(\"Invalid input\"),\n        });\n    }\n    result", "    let mut\
    \ result = String::new();\n    for (a, b) in a.chars().zip(b.chars()) {\n    \
    \    result.push(match (a, b) {\n            ('0', '0') => '0',\n            ('0',\
    \ '1') => '1',\n            ('1', '0') => '1',\n            ('1', '1') => '0',\n\
    \            _ => panic!(\"Invalid input\"),\n        });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        let mut x = i.to_digit(10).unwrap();\n        let mut y = j.to_digit(10).unwrap();\n\
    \        x ^= y;\n        result.push_str(&x.to_string());\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        if i == j {\n            result.push('0');\n        } else {\n  \
    \          result.push('1');\n        }\n    }\n    result", "    let mut result\
    \ = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match\
    \ (i, j) {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n \
    \           ('1', '0') => '1',\n            ('1', '1') => '0',\n            _\
    \ => panic!(\"Invalid input\"),\n        });\n    }\n    result", "    let mut\
    \ result = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n    \
    \    result.push(match (i, j) {\n            ('0', '0') => '0',\n            ('0',\
    \ '1') => '1',\n            ('1', '0') => '1',\n            ('1', '1') => '0',\n\
    \            _ => panic!(\"Invalid input\"),\n        });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for i in 0..a.len()\
    \ {\n        result.push(if a.chars().nth(i).unwrap() == b.chars().nth(i).unwrap()\
    \ {\n            '0'\n        } else {\n            '1'\n        });\n    }\n\
    \    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        if i == j {\n            result.push('0');\n        } else {\n  \
    \          result.push('1');\n        }\n    }\n    result", "    let mut result\
    \ = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match\
    \ (i, j) {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n \
    \           ('1', '0') => '1',\n            ('1', '1') => '0',\n            _\
    \ => panic!(\"Invalid input\"),\n        });\n    }\n    result", "    let mut\
    \ result = String::new();\n    for i in 0..a.len() {\n        if a.chars().nth(i).unwrap()\
    \ == b.chars().nth(i).unwrap() {\n            result.push('0');\n        } else\
    \ {\n            result.push('1');\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n    \
    \    if i == j {\n            result.push('0');\n        } else {\n          \
    \  result.push('1');\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut a_iter = a.chars();\n    let mut b_iter = b.chars();\n    loop {\n\
    \        match (a_iter.next(), b_iter.next()) {\n            (Some(a_char), Some(b_char))\
    \ => {\n                let a_int = a_char.to_digit(10).unwrap();\n          \
    \      let b_int = b_char.to_digit(10).unwrap();\n                let result_int\
    \ = a_int ^ b_int;\n                result.push_str(&result_int.to_string());\n\
    \            }\n            (Some(_), None) => {\n                panic!(\"string_xor:\
    \ a is longer than b\");\n            }\n            (None, Some(_)) => {\n  \
    \              panic!(\"string_xor: b is longer than a\");\n            }\n  \
    \          (None, None) => {\n                break;\n            }\n        }\n\
    \    }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    let mut a_chars =\
    \ a.chars();\n    let mut b_chars = b.chars();\n    loop {\n        let a_char\
    \ = a_chars.next();\n        let b_char = b_chars.next();\n        match (a_char,\
    \ b_char) {\n            (Some(a_char), Some(b_char)) => {\n                result.push(if\
    \ a_char == b_char { '0' } else { '1' });\n            }\n            (Some(_),\
    \ None) => {\n                break;\n            }\n            (None, Some(_))\
    \ => {\n                break;\n            }\n            (None, None) => {\n\
    \                break;\n            }\n        }\n    }\n    result", "    let\
    \ mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n\
    \        result.push(match (i, j) {\n            ('0', '0') => '0',\n        \
    \    ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1', '1')\
    \ => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n    }\n \
    \   result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    let mut a_chars =\
    \ a.chars();\n    let mut b_chars = b.chars();\n    loop {\n        match (a_chars.next(),\
    \ b_chars.next()) {\n            (Some(a_char), Some(b_char)) => {\n         \
    \       let a_int = a_char.to_digit(10).unwrap();\n                let b_int =\
    \ b_char.to_digit(10).unwrap();\n                result.push_str(&(a_int ^ b_int).to_string());\n\
    \            }\n            (Some(_), None) => {\n                panic!(\"Inputs\
    \ are not of equal length\");\n            }\n            (None, Some(_)) => {\n\
    \                panic!(\"Inputs are not of equal length\");\n            }\n\
    \            (None, None) => {\n                break;\n            }\n      \
    \  }\n    }\n    result", "    let mut result = String::new();\n    for (a, b)\
    \ in a.chars().zip(b.chars()) {\n        result.push(if a == b { '0' } else {\
    \ '1' });\n    }\n    result", "    let mut result = String::new();\n    for (i,\
    \ j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j) {\n     \
    \       ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1',\
    \ '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n    }\n    result", "    let a_bytes = a.as_bytes();\n\
    \    let b_bytes = b.as_bytes();\n    let mut result = String::new();\n    for\
    \ i in 0..a_bytes.len() {\n        result.push(match (a_bytes[i], b_bytes[i])\
    \ {\n            (b'0', b'0') => '0',\n            (b'0', b'1') => '1',\n    \
    \        (b'1', b'0') => '1',\n            (b'1', b'1') => '0',\n            _\
    \ => panic!(\"Invalid input\"),\n        });\n    }\n    result", "    let a_bytes\
    \ = a.as_bytes();\n    let b_bytes = b.as_bytes();\n    let mut result = String::new();\n\
    \    for i in 0..a_bytes.len() {\n        if a_bytes[i] == b_bytes[i] {\n    \
    \        result.push('0');\n        } else {\n            result.push('1');\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j { '0' }\
    \ else { '1' });\n    }\n    result", "    let a_bytes = a.as_bytes();\n    let\
    \ b_bytes = b.as_bytes();\n    let mut result = String::new();\n    for i in 0..a_bytes.len()\
    \ {\n        let a_bit = a_bytes[i] - 48;\n        let b_bit = b_bytes[i] - 48;\n\
    \        result.push_str(&((a_bit ^ b_bit) + 48).to_string());\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (a, b) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(if a == b { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for i in 0..a.len() {\n        result.push(if\
    \ a.chars().nth(i).unwrap() == b.chars().nth(i).unwrap() {\n            '0'\n\
    \        } else {\n            '1'\n        });\n    }\n    result", "    let\
    \ mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n\
    \        result.push(match (i, j) {\n            ('0', '0') => '0',\n        \
    \    ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1', '1')\
    \ => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n    }\n \
    \   result", "    let mut result = String::new();\n    for i in 0..a.len() {\n\
    \        let a_char = a.chars().nth(i).unwrap();\n        let b_char = b.chars().nth(i).unwrap();\n\
    \        let result_char = if a_char == b_char {\n            '0'\n        } else\
    \ {\n            '1'\n        };\n        result.push(result_char);\n    }\n \
    \   result", "    let mut result = String::new();\n    for i in 0..a.len() {\n\
    \        let a_char = a.chars().nth(i).unwrap();\n        let b_char = b.chars().nth(i).unwrap();\n\
    \        if a_char == b_char {\n            result.push('0');\n        } else\
    \ {\n            result.push('1');\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n    \
    \    result.push(match (i, j) {\n            ('0', '0') => '0',\n            ('0',\
    \ '1') => '1',\n            ('1', '0') => '1',\n            ('1', '1') => '0',\n\
    \            _ => panic!(\"Invalid input\"),\n        });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(if a == b { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (x, y) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (x, y) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    let mut a_chars = a.chars();\n    let\
    \ mut b_chars = b.chars();\n    loop {\n        match (a_chars.next(), b_chars.next())\
    \ {\n            (Some(a_char), Some(b_char)) => {\n                result.push(if\
    \ a_char == b_char { '0' } else { '1' });\n            }\n            (Some(_),\
    \ None) => {\n                result.push_str(\"0\");\n            }\n       \
    \     (None, Some(_)) => {\n                result.push_str(\"0\");\n        \
    \    }\n            (None, None) => {\n                break;\n            }\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j) {\n \
    \           ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1',\
    \ '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        if i == j {\n         \
    \   result.push('0');\n        } else {\n            result.push('1');\n     \
    \   }\n    }\n    result", "    let mut result = String::new();\n    for (i, j)\
    \ in a.chars().zip(b.chars()) {\n        result.push(if i == j { '0' } else {\
    \ '1' });\n    }\n    result", "    let mut result = String::new();\n    for (i,\
    \ j) in a.chars().zip(b.chars()) {\n        result.push(if i == j { '0' } else\
    \ { '1' });\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j) {\n \
    \           ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1',\
    \ '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for i in 0..a.len() {\n        let a_char = a.chars().nth(i).unwrap();\n\
    \        let b_char = b.chars().nth(i).unwrap();\n        let a_int = a_char.to_digit(10).unwrap();\n\
    \        let b_int = b_char.to_digit(10).unwrap();\n        let xor_int = a_int\
    \ ^ b_int;\n        let xor_char = std::char::from_digit(xor_int, 10).unwrap();\n\
    \        result.push(xor_char);\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        let mut x = i.to_digit(10).unwrap();\n\
    \        let mut y = j.to_digit(10).unwrap();\n        result.push_str(&((x ^\
    \ y).to_string()));\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        if i == j {\n         \
    \   result.push('0');\n        } else {\n            result.push('1');\n     \
    \   }\n    }\n    result", "    let mut result = String::new();\n    for (i, j)\
    \ in a.chars().zip(b.chars()) {\n        result.push(match (i, j) {\n        \
    \    ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1', '0')\
    \ => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"Invalid input\"\
    ),\n        });\n    }\n    result", "    let mut result = String::new();\n  \
    \  for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => unreachable!(),\n\
    \        });\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (i, j) in a.chars().zip(b.chars()) {\n        if i == j {\n            result.push('0');\n\
    \        } else {\n            result.push('1');\n        }\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        if i == j {\n            result.push('0');\n        } else {\n  \
    \          result.push('1');\n        }\n    }\n    result", "    let mut result\
    \ = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if\
    \ i == j { '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for i in 0..a.len() {\n        let a_char = a.chars().nth(i).unwrap();\n\
    \        let b_char = b.chars().nth(i).unwrap();\n        result.push(if a_char\
    \ == b_char { '0' } else { '1' });\n    }\n    result", "    let mut result =\
    \ String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if\
    \ i == j { '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        if a == b {\n         \
    \   result.push('0');\n        } else {\n            result.push('1');\n     \
    \   }\n    }\n    result", "    let mut result = String::new();\n    for (i, j)\
    \ in a.chars().zip(b.chars()) {\n        result.push(match (i, j) {\n        \
    \    ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1', '0')\
    \ => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"Invalid input\"\
    ),\n        });\n    }\n    result", "    let mut result = String::new();\n  \
    \  for i in 0..a.len() {\n        let a_char = a.chars().nth(i).unwrap();\n  \
    \      let b_char = b.chars().nth(i).unwrap();\n        let a_int = a_char.to_digit(10).unwrap();\n\
    \        let b_int = b_char.to_digit(10).unwrap();\n        let xor_result = a_int\
    \ ^ b_int;\n        result.push_str(&xor_result.to_string());\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(if a == b { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(if a == b { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let a_bytes = a.as_bytes();\n    let b_bytes = b.as_bytes();\n\
    \    let mut result = String::new();\n    for i in 0..a_bytes.len() {\n      \
    \  let a_byte = a_bytes[i];\n        let b_byte = b_bytes[i];\n        let result_byte\
    \ = a_byte ^ b_byte;\n        result.push(result_byte as char);\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (a, b) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        if a == b {\n            result.push('0');\n        } else {\n  \
    \          result.push('1');\n        }\n    }\n    result", "    let mut result\
    \ = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n        if i\
    \ == j {\n            result.push('0');\n        } else {\n            result.push('1');\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j) {\n \
    \           ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1',\
    \ '0') => '1',\n            ('1', '1') => '0',\n            _ => ' ',\n      \
    \  });\n    }\n    result", "    let mut result = String::new();\n    for (i,\
    \ j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j) {\n     \
    \       ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1',\
    \ '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut a_iter = a.chars();\n    let mut b_iter = b.chars();\n    loop {\n\
    \        match (a_iter.next(), b_iter.next()) {\n            (Some(a_char), Some(b_char))\
    \ => {\n                result.push(if a_char == b_char { '0' } else { '1' });\n\
    \            }\n            (Some(_), None) => {\n                result.push('1');\n\
    \            }\n            (None, Some(_)) => {\n                result.push('1');\n\
    \            }\n            (None, None) => {\n                break;\n      \
    \      }\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (c1, c2) in a.chars().zip(b.chars()) {\n        result.push(match (c1,\
    \ c2) {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n    \
    \        ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ =>\
    \ panic!(\"Invalid input\"),\n        });\n    }\n    result", "    let mut result\
    \ = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if\
    \ i == j { '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        if i == j {\n         \
    \   result.push('0');\n        } else {\n            result.push('1');\n     \
    \   }\n    }\n    result", "    let mut result = String::new();\n    let mut a_chars\
    \ = a.chars();\n    let mut b_chars = b.chars();\n    loop {\n        let a_char\
    \ = a_chars.next();\n        let b_char = b_chars.next();\n        if a_char ==\
    \ None || b_char == None {\n            break;\n        }\n        let a_char\
    \ = a_char.unwrap();\n        let b_char = b_char.unwrap();\n        if a_char\
    \ == b_char {\n            result.push('0');\n        } else {\n            result.push('1');\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j) {\n \
    \           ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1',\
    \ '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for i in 0..a.len() {\n        let a_char = a.chars().nth(i).unwrap();\n\
    \        let b_char = b.chars().nth(i).unwrap();\n        if a_char == b_char\
    \ {\n            result.push('0');\n        } else {\n            result.push('1');\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (a, b) in a.chars().zip(b.chars()) {\n        if a == b {\n            result.push('0');\n\
    \        } else {\n            result.push('1');\n        }\n    }\n    result",
  "    let mut result = String::new();\n    for i in 0..a.len() {\n        let a_char\
    \ = a.chars().nth(i).unwrap();\n        let b_char = b.chars().nth(i).unwrap();\n\
    \        if a_char == b_char {\n            result.push('0');\n        } else\
    \ {\n            result.push('1');\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n    \
    \    result.push(if i == j { '0' } else { '1' });\n    }\n    result", "    let\
    \ mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars()) {\n\
    \        result.push(match (a, b) {\n            ('0', '0') => '0',\n        \
    \    ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1', '1')\
    \ => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n    }\n \
    \   result", "    let mut result = String::new();\n    for (x, y) in a.chars().zip(b.chars())\
    \ {\n        result.push(if x == y { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    let mut a_iter = a.chars();\n    let mut\
    \ b_iter = b.chars();\n    loop {\n        match (a_iter.next(), b_iter.next())\
    \ {\n            (Some(a_char), Some(b_char)) => {\n                result.push(if\
    \ a_char == b_char { '0' } else { '1' });\n            }\n            (Some(_),\
    \ None) => {\n                result.push_str(&a[result.len()..]);\n         \
    \       break;\n            }\n            (None, Some(_)) => {\n            \
    \    result.push_str(&b[result.len()..]);\n                break;\n          \
    \  }\n            (None, None) => break,\n        }\n    }\n    result", "   \
    \ let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    let mut a_iter = a.chars();\n\
    \    let mut b_iter = b.chars();\n    loop {\n        match (a_iter.next(), b_iter.next())\
    \ {\n            (Some(a_char), Some(b_char)) => {\n                result.push(if\
    \ a_char == b_char { '0' } else { '1' });\n            }\n            (Some(_),\
    \ None) => {\n                result.push('1');\n            }\n            (None,\
    \ Some(_)) => {\n                result.push('1');\n            }\n          \
    \  (None, None) => {\n                break;\n            }\n        }\n    }\n\
    \    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        if i == j {\n            result.push('0');\n        } else {\n  \
    \          result.push('1');\n        }\n    }\n    result", "    let mut result\
    \ = String::new();\n    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(match\
    \ (a, b) {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n \
    \           ('1', '0') => '1',\n            ('1', '1') => '0',\n            _\
    \ => panic!(\"Invalid input\"),\n        });\n    }\n    result", "    let mut\
    \ result = String::new();\n    for i in 0..a.len() {\n        let a_char = a.chars().nth(i).unwrap();\n\
    \        let b_char = b.chars().nth(i).unwrap();\n        let xor_char = if a_char\
    \ == b_char {\n            '0'\n        } else {\n            '1'\n        };\n\
    \        result.push(xor_char);\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut a_iter = a.chars();\n    let mut b_iter = b.chars();\n    loop {\n\
    \        match (a_iter.next(), b_iter.next()) {\n            (Some(a_char), Some(b_char))\
    \ => {\n                if a_char == b_char {\n                    result.push('0');\n\
    \                } else {\n                    result.push('1');\n           \
    \     }\n            }\n            _ => break,\n        }\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => '0',\n        });\n    }\n    result", "    let\
    \ mut result = String::new();\n    for (c1, c2) in a.chars().zip(b.chars()) {\n\
    \        result.push(match (c1, c2) {\n            ('0', '0') => '0',\n      \
    \      ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1', '1')\
    \ => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n    }\n \
    \   result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for i in 0..a.len()\
    \ {\n        let a_char = a.chars().nth(i).unwrap();\n        let b_char = b.chars().nth(i).unwrap();\n\
    \        if a_char == b_char {\n            result.push('0');\n        } else\
    \ {\n            result.push('1');\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let a_bytes = a.as_bytes();\n    let b_bytes =\
    \ b.as_bytes();\n    for i in 0..a_bytes.len() {\n        let a_bit = a_bytes[i]\
    \ - b'0';\n        let b_bit = b_bytes[i] - b'0';\n        let xor_bit = a_bit\
    \ ^ b_bit;\n        result.push(xor_bit as char);\n    }\n    result", "    let\
    \ mut result = String::new();\n    for i in 0..a.len() {\n        if a.chars().nth(i).unwrap()\
    \ == b.chars().nth(i).unwrap() {\n            result.push('0');\n        } else\
    \ {\n            result.push('1');\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n    \
    \    result.push(match (i, j) {\n            ('0', '0') => '0',\n            ('0',\
    \ '1') => '1',\n            ('1', '0') => '1',\n            ('1', '1') => '0',\n\
    \            _ => panic!(\"Invalid input\"),\n        });\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        if a == b {\n            result.push('0');\n        } else {\n  \
    \          result.push('1');\n        }\n    }\n    result", "    let mut result\
    \ = String::new();\n    for (c1, c2) in a.chars().zip(b.chars()) {\n        result.push(if\
    \ c1 == c2 { '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut a_iter = a.chars();\n    let mut b_iter = b.chars();\n    loop {\n\
    \        match (a_iter.next(), b_iter.next()) {\n            (Some(a_char), Some(b_char))\
    \ => {\n                if a_char == b_char {\n                    result.push('0');\n\
    \                } else {\n                    result.push('1');\n           \
    \     }\n            }\n            _ => break,\n        }\n    }\n    result",
  "    let mut result = String::new();\n    for i in 0..a.len() {\n        let a_char\
    \ = a.chars().nth(i).unwrap();\n        let b_char = b.chars().nth(i).unwrap();\n\
    \        let xor = if a_char == b_char {\n            '0'\n        } else {\n\
    \            '1'\n        };\n        result.push(xor);\n    }\n    result", " \
    \   let mut result = String::new();\n    let mut a_iter = a.chars();\n    let\
    \ mut b_iter = b.chars();\n    loop {\n        let a_char = a_iter.next();\n \
    \       let b_char = b_iter.next();\n        match (a_char, b_char) {\n      \
    \      (Some(a_char), Some(b_char)) => {\n                let a_int = a_char.to_digit(10).unwrap();\n\
    \                let b_int = b_char.to_digit(10).unwrap();\n                let\
    \ result_int = a_int ^ b_int;\n                result.push_str(&result_int.to_string());\n\
    \            }\n            (Some(_), None) => {\n                panic!(\"a is\
    \ longer than b\");\n            }\n            (None, Some(_)) => {\n       \
    \         panic!(\"b is longer than a\");\n            }\n            (None, None)\
    \ => {\n                break;\n            }\n        }\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        if i == j {\n            result.push('0');\n        } else {\n  \
    \          result.push('1');\n        }\n    }\n    result", "    let mut result\
    \ = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match\
    \ (i, j) {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n \
    \           ('1', '0') => '1',\n            ('1', '1') => '0',\n            _\
    \ => '0',\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut a_iter = a.chars();\n    let mut b_iter = b.chars();\n    loop {\n\
    \        match (a_iter.next(), b_iter.next()) {\n            (Some(a_char), Some(b_char))\
    \ => {\n                result.push(if a_char == b_char { '0' } else { '1' });\n\
    \            }\n            (Some(_), None) => {\n                result.push('0');\n\
    \            }\n            (None, Some(_)) => {\n                result.push('0');\n\
    \            }\n            (None, None) => {\n                break;\n      \
    \      }\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        let a = i.to_digit(10).unwrap();\n\
    \        let b = j.to_digit(10).unwrap();\n        result.push_str(&(a ^ b).to_string());\n\
    \    }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for i in 0..a.len()\
    \ {\n        let a_char = a.chars().nth(i).unwrap();\n        let b_char = b.chars().nth(i).unwrap();\n\
    \        if a_char == b_char {\n            result.push('0');\n        } else\
    \ {\n            result.push('1');\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut a_iter = a.chars();\n    let mut b_iter\
    \ = b.chars();\n    loop {\n        match (a_iter.next(), b_iter.next()) {\n \
    \           (Some(a_char), Some(b_char)) => {\n                let a_int = a_char.to_digit(10).unwrap();\n\
    \                let b_int = b_char.to_digit(10).unwrap();\n                let\
    \ result_int = a_int ^ b_int;\n                result.push_str(&result_int.to_string());\n\
    \            }\n            (Some(_), None) => panic!(\"a is longer than b\"),\n\
    \            (None, Some(_)) => panic!(\"b is longer than a\"),\n            (None,\
    \ None) => break,\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        if i == j {\n         \
    \   result.push('0');\n        } else {\n            result.push('1');\n     \
    \   }\n    }\n    result", "    let mut result = String::new();\n    for (i, j)\
    \ in a.chars().zip(b.chars()) {\n        result.push(if i == j { '0' } else {\
    \ '1' });\n    }\n    result", "    let mut result = String::new();\n    for (i,\
    \ j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j) {\n     \
    \       ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1',\
    \ '0') => '1',\n            ('1', '1') => '0',\n            _ => '0',\n      \
    \  });\n    }\n    result", "    let mut result = String::new();\n    for (x,\
    \ y) in a.chars().zip(b.chars()) {\n        result.push(if x == y { '0' } else\
    \ { '1' });\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut a_iter = a.chars();\n    let mut b_iter = b.chars();\n    loop {\n     \
    \   match (a_iter.next(), b_iter.next()) {\n            (Some(a_char), Some(b_char))\
    \ => {\n                if a_char == b_char {\n                    result.push('0');\n\
    \                } else {\n                    result.push('1');\n           \
    \     }\n            }\n            (Some(_), None) => {\n                result.push('1');\n\
    \            }\n            (None, Some(_)) => {\n                result.push('1');\n\
    \            }\n            (None, None) => {\n                break;\n      \
    \      }\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(match (a, b)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j {\
    \ '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    // TODO\n    unimplemented!()",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(if a == b { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (a, b) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for i in 0..a.len()\
    \ {\n        let a_char = a.chars().nth(i).unwrap();\n        let b_char = b.chars().nth(i).unwrap();\n\
    \        if a_char == b_char {\n            result.push('0');\n        } else\
    \ {\n            result.push('1');\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n    \
    \    result.push(match (i, j) {\n            ('0', '0') => '0',\n            ('0',\
    \ '1') => '1',\n            ('1', '0') => '1',\n            ('1', '1') => '0',\n\
    \            _ => panic!(\"Invalid input\"),\n        });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(if a == b { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for i in 0..a.len() {\n        result.push(if\
    \ a.chars().nth(i).unwrap() == b.chars().nth(i).unwrap() {\n            '0'\n\
    \        } else {\n            '1'\n        });\n    }\n    result", "    let\
    \ mut result = String::new();\n    for i in 0..a.len() {\n        if a.chars().nth(i).unwrap()\
    \ == b.chars().nth(i).unwrap() {\n            result.push('0');\n        } else\
    \ {\n            result.push('1');\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n    \
    \    result.push(if i == j { '0' } else { '1' });\n    }\n    result", "    let\
    \ mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars()) {\n\
    \        result.push(match (a, b) {\n            ('0', '0') => '0',\n        \
    \    ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1', '1')\
    \ => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n    }\n \
    \   result", "    let mut result = String::new();\n    for i in 0..a.len() {\n\
    \        if a.chars().nth(i).unwrap() == b.chars().nth(i).unwrap() {\n       \
    \     result.push('0');\n        } else {\n            result.push('1');\n   \
    \     }\n    }\n    result", "    let mut result = String::new();\n    for i in\
    \ 0..a.len() {\n        let a_char = a.chars().nth(i).unwrap();\n        let b_char\
    \ = b.chars().nth(i).unwrap();\n        let a_int = a_char.to_digit(10).unwrap();\n\
    \        let b_int = b_char.to_digit(10).unwrap();\n        let result_int = a_int\
    \ ^ b_int;\n        result.push_str(&result_int.to_string());\n    }\n    result",
  "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (a, b) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    let mut a_iter = a.chars();\n\
    \    let mut b_iter = b.chars();\n    loop {\n        match (a_iter.next(), b_iter.next())\
    \ {\n            (Some(a_char), Some(b_char)) => {\n                if a_char\
    \ == b_char {\n                    result.push('0');\n                } else {\n\
    \                    result.push('1');\n                }\n            }\n   \
    \         (None, None) => break,\n            _ => panic!(\"Unequal lengths\"\
    ),\n        }\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (i, j) in a.chars().zip(b.chars()) {\n        result.push(if i == j { '0' }\
    \ else { '1' });\n    }\n    result", "    let mut result = String::new();\n \
    \   for i in 0..a.len() {\n        result.push(if a.chars().nth(i).unwrap() ==\
    \ b.chars().nth(i).unwrap() {\n            '0'\n        } else {\n           \
    \ '1'\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => '0',\n\
    \        });\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (a, b) in a.chars().zip(b.chars()) {\n        result.push(match (a, b) {\n \
    \           ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1',\
    \ '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        let x = i.to_digit(10).unwrap()\
    \ ^ j.to_digit(10).unwrap();\n        result.push_str(&x.to_string());\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut a_iter = a.chars();\n\
    \    let mut b_iter = b.chars();\n    loop {\n        match (a_iter.next(), b_iter.next())\
    \ {\n            (Some(a_char), Some(b_char)) => {\n                let a_int\
    \ = a_char.to_digit(10).unwrap();\n                let b_int = b_char.to_digit(10).unwrap();\n\
    \                let result_int = a_int ^ b_int;\n                result.push_str(&result_int.to_string());\n\
    \            }\n            (Some(_), None) => {\n                panic!(\"a is\
    \ longer than b\");\n            }\n            (None, Some(_)) => {\n       \
    \         panic!(\"b is longer than a\");\n            }\n            (None, None)\
    \ => {\n                break;\n            }\n        }\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(if i == j { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars())\
    \ {\n        result.push(if a == b { '0' } else { '1' });\n    }\n    result",
  "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        if i == j {\n            result.push('0');\n        } else {\n  \
    \          result.push('1');\n        }\n    }\n    result", "    let mut result\
    \ = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(if\
    \ i == j { '0' } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => ' ',\n\
    \        });\n    }\n    result", "    let mut result = String::new();\n    for\
    \ (a, b) in a.chars().zip(b.chars()) {\n        result.push(match (a, b) {\n \
    \           ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1',\
    \ '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        if i == j {\n         \
    \   result.push('0');\n        } else {\n            result.push('1');\n     \
    \   }\n    }\n    result", "    let mut result = String::new();\n    for (i, j)\
    \ in a.chars().zip(b.chars()) {\n        result.push(match (i, j) {\n        \
    \    ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1', '0')\
    \ => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"Invalid input\"\
    ),\n        });\n    }\n    result", "    let mut result = String::new();\n  \
    \  for (i, j) in a.chars().zip(b.chars()) {\n        result.push(match (i, j)\
    \ {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n        \
    \    ('1', '0') => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        if i == j {\n         \
    \   result.push('0');\n        } else {\n            result.push('1');\n     \
    \   }\n    }\n    result", "    let mut result = String::new();\n    for i in\
    \ 0..a.len() {\n        let a_char = a.chars().nth(i).unwrap();\n        let b_char\
    \ = b.chars().nth(i).unwrap();\n        let result_char = if a_char == b_char\
    \ {\n            '0'\n        } else {\n            '1'\n        };\n        result.push(result_char);\n\
    \    }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars())\
    \ {\n        result.push(match (i, j) {\n            ('0', '0') => '0',\n    \
    \        ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1',\
    \ '1') => '0',\n            _ => panic!(\"Invalid input\"),\n        });\n   \
    \ }\n    result", "    let mut result = String::new();\n    for i in 0..a.len()\
    \ {\n        let a_char = a.chars().nth(i).unwrap();\n        let b_char = b.chars().nth(i).unwrap();\n\
    \        let xor = a_char != b_char;\n        result.push(if xor { '1' } else\
    \ { '0' });\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut a_iter = a.chars();\n    let mut b_iter = b.chars();\n    loop {\n     \
    \   let a_char = a_iter.next();\n        let b_char = b_iter.next();\n       \
    \ match (a_char, b_char) {\n            (Some(a_char), Some(b_char)) => {\n  \
    \              let a_bit = a_char.to_digit(10).unwrap();\n                let\
    \ b_bit = b_char.to_digit(10).unwrap();\n                let result_bit = a_bit\
    \ ^ b_bit;\n                result.push_str(&result_bit.to_string());\n      \
    \      }\n            (Some(_), None) => {\n                panic!(\"Length of\
    \ a and b are not equal.\");\n            }\n            (None, Some(_)) => {\n\
    \                panic!(\"Length of a and b are not equal.\");\n            }\n\
    \            (None, None) => {\n                break;\n            }\n      \
    \  }\n    }\n    result", "    let mut result = String::new();\n    for (i, j)\
    \ in a.chars().zip(b.chars()) {\n        result.push(match (i, j) {\n        \
    \    ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1', '0')\
    \ => '1',\n            ('1', '1') => '0',\n            _ => panic!(\"Invalid input\"\
    ),\n        });\n    }\n    result", "    let mut result = String::new();\n  \
    \  for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b { '0'\
    \ } else { '1' });\n    }\n    result", "    let mut result = String::new();\n\
    \    for (i, j) in a.chars().zip(b.chars()) {\n        if i == j {\n         \
    \   result.push('0');\n        } else {\n            result.push('1');\n     \
    \   }\n    }\n    result"]
stop_tokens:
- "\n}"
