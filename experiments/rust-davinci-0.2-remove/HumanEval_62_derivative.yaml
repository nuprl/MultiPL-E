name: HumanEval_62_derivative
language: rust
prompt: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n/// Return derivative of this polynomial in the same form.\nfn derivative(xs:\
  \ Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
  \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
  \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
  \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
  }\n"
completions: ["    let mut ys = vec![];\n    for i in 1..xs.len() {\n        ys.push(xs[i]\
    \ * i as isize);\n    }\n    ys", "    let mut result = Vec::new();\n    for i\
    \ in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ (i, x) in xs.iter().enumerate() {\n        if i == 0 {\n            continue;\n\
    \        }\n        result.push(i as isize * x);\n    }\n    result", "    let\
    \ mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i\
    \ as isize);\n    }\n    ys", "    let mut result = Vec::new();\n    for i in\
    \ 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n \
    \       if i == 0 {\n            continue;\n        }\n        result.push(i as\
    \ isize * x);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i]\
    \ * i as isize);\n    }\n    ys", "    let mut dxs = vec![];\n    for i in 1..xs.len()\
    \ {\n        dxs.push(xs[i] * i as isize);\n    }\n    dxs", "    let mut result\
    \ = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n        if i == 0\
    \ {\n            continue;\n        }\n        result.push(i as isize * x);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    for i in 1..xs.len()\
    \ {\n        result.push(xs[i] * i as isize);\n    }\n    result", "    let mut\
    \ result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut ys = Vec::new();\n    for i\
    \ in 1..xs.len() {\n        ys.push(xs[i] * i as isize);\n    }\n    ys", "  \
    \  let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut res = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        res.push(xs[i] * i as isize);\n    }\n    res",
  "    let mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i]\
    \ * i as isize);\n    }\n    ys", "    let mut result = Vec::new();\n    for i\
    \ in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n \
    \       if i == 0 {\n            continue;\n        }\n        result.push(i as\
    \ isize * x);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut res = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        res.push(xs[i] * i as isize);\n    }\n    res",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut dxs = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n    \
    \    if i == 0 {\n            continue;\n        }\n        dxs.push(i as isize\
    \ * x);\n    }\n    dxs", "    let mut result = Vec::new();\n    for i in 1..xs.len()\
    \ {\n        result.push(xs[i] * i as isize);\n    }\n    result", "    let mut\
    \ result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ (i, x) in xs.iter().enumerate() {\n        if i == 0 {\n            continue;\n\
    \        }\n        result.push(i as isize * x);\n    }\n    result", "    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n \
    \       if i == 0 {\n            continue;\n        }\n        result.push(i as\
    \ isize * x);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n \
    \       if i == 0 {\n            continue;\n        }\n        result.push(i as\
    \ isize * x);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut dxs = Vec::new();\n    for i in 1..xs.len() {\n        dxs.push(xs[i]\
    \ * i as isize);\n    }\n    dxs", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i]\
    \ * i as isize);\n    }\n    ys", "    let mut result = Vec::new();\n    for i\
    \ in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i]\
    \ * i as isize);\n    }\n    ys", "    xs.iter()\n        .enumerate()\n     \
    \   .skip(1)\n        .map(|(i, &x)| x * i as isize)\n        .collect()", " \
    \   let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i]\
    \ * i as isize);\n    }\n    ys", "    let mut result = Vec::new();\n    for i\
    \ in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut dxs = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        dxs.push(xs[i] * i as isize);\n    }\n    dxs",
  "    let mut dxs = Vec::new();\n    for i in 1..xs.len() {\n        dxs.push(xs[i]\
    \ * i as isize);\n    }\n    dxs", "    let mut ys = Vec::new();\n    for i in\
    \ 1..xs.len() {\n        ys.push(xs[i] * i as isize);\n    }\n    ys", "    let\
    \ mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i\
    \ as isize);\n    }\n    ys", "    let mut dxs = Vec::new();\n    for i in 1..xs.len()\
    \ {\n        dxs.push(xs[i] * i as isize);\n    }\n    dxs", "    let mut result\
    \ = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i] * i as\
    \ isize);\n    }\n    result", "    let mut dxs = Vec::new();\n    for i in 1..xs.len()\
    \ {\n        dxs.push(xs[i] * i as isize);\n    }\n    dxs", "    let mut ys =\
    \ vec![];\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i as isize);\n\
    \    }\n    ys", "    let mut ys = Vec::new();\n    for i in 1..xs.len() {\n \
    \       ys.push(xs[i] * i as isize);\n    }\n    ys", "    let mut result = Vec::new();\n\
    \    for i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n\
    \    result", "    let mut ys = Vec::new();\n    for i in 1..xs.len() {\n    \
    \    ys.push(xs[i] * i as isize);\n    }\n    ys", "    xs.iter()\n        .enumerate()\n\
    \        .map(|(i, x)| x * i as isize)\n        .skip(1)\n        .collect()",
  "    let mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n \
    \       if i == 0 {\n            continue;\n        }\n        result.push(i as\
    \ isize * x);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut res = Vec::new();\n    for i in 1..xs.len() {\n        res.push(xs[i]\
    \ * i as isize);\n    }\n    res", "    let mut dxs = Vec::new();\n    for (i,\
    \ x) in xs.iter().enumerate() {\n        if i == 0 {\n            continue;\n\
    \        }\n        dxs.push(i as isize * x);\n    }\n    dxs", "    let mut result\
    \ = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i] * i as\
    \ isize);\n    }\n    result", "    let mut result = Vec::new();\n    for i in\
    \ 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut res = Vec::new();\n    for i in 1..xs.len() {\n        res.push(xs[i]\
    \ * i as isize);\n    }\n    res", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n \
    \       if i == 0 {\n            continue;\n        }\n        result.push(i as\
    \ isize * x);\n    }\n    result", "    let mut ys = Vec::new();\n    for i in\
    \ 1..xs.len() {\n        ys.push(xs[i] * i as isize);\n    }\n    ys", "    let\
    \ mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i\
    \ as isize);\n    }\n    ys", "    let mut dxs = Vec::new();\n    for i in 1..xs.len()\
    \ {\n        dxs.push(xs[i] * i as isize);\n    }\n    dxs", "    let mut result\
    \ = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i] * i as\
    \ isize);\n    }\n    result", "    let mut result = Vec::new();\n    for i in\
    \ 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut dxs = Vec::new();\n    for\
    \ (i, x) in xs.iter().enumerate() {\n        if i == 0 {\n            continue;\n\
    \        }\n        dxs.push(i as isize * x);\n    }\n    dxs", "    let mut result\
    \ = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n        if i == 0\
    \ {\n            continue;\n        }\n        result.push(i as isize * x);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate()\
    \ {\n        if i == 0 {\n            continue;\n        }\n        result.push(i\
    \ as isize * x);\n    }\n    result", "    let mut dxs = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        dxs.push(xs[i] * i as isize);\n    }\n    dxs",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut res = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        res.push(xs[i] * i as isize);\n    }\n    res",
  "    let mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n \
    \       if i == 0 {\n            continue;\n        }\n        result.push(i as\
    \ isize * x);\n    }\n    result", "    let mut ys = Vec::new();\n    for (i,\
    \ x) in xs.iter().enumerate() {\n        if i == 0 {\n            continue;\n\
    \        }\n        ys.push(i as isize * x);\n    }\n    ys", "    let mut ys\
    \ = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i as isize);\n\
    \    }\n    ys", "    let mut res = Vec::new();\n    for i in 1..xs.len() {\n\
    \        res.push(xs[i] * i as isize);\n    }\n    res", "    let mut dxs = Vec::new();\n\
    \    for i in 1..xs.len() {\n        dxs.push(xs[i] * i as isize);\n    }\n  \
    \  dxs", "    let mut dxs = Vec::new();\n    for i in 1..xs.len() {\n        dxs.push(xs[i]\
    \ * i as isize);\n    }\n    dxs", "    let mut ret = Vec::new();\n    for i in\
    \ 1..xs.len() {\n        ret.push(xs[i] * i as isize);\n    }\n    ret", "   \
    \ let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut ys = Vec::new();\n    for i\
    \ in 1..xs.len() {\n        ys.push(xs[i] * i as isize);\n    }\n    ys", "  \
    \  let mut res = Vec::new();\n    for i in 1..xs.len() {\n        res.push(xs[i]\
    \ * i as isize);\n    }\n    res", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut dxs = Vec::new();\n    for i in 1..xs.len() {\n        dxs.push(xs[i]\
    \ * i as isize);\n    }\n    dxs", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut res = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        res.push(xs[i] * i as isize);\n    }\n    res",
  "    let mut ys = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n     \
    \   if i == 0 {\n            continue;\n        }\n        ys.push(i as isize\
    \ * x);\n    }\n    ys", "    let mut result = Vec::new();\n    for i in 1..xs.len()\
    \ {\n        result.push(xs[i] * i as isize);\n    }\n    result", "    let mut\
    \ result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut ys = vec![];\n    for (i, x)\
    \ in xs.iter().enumerate() {\n        if i == 0 {\n            continue;\n   \
    \     }\n        ys.push(i as isize * x);\n    }\n    ys", "    let mut result\
    \ = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i] * i as\
    \ isize);\n    }\n    result", "    let mut dxs = Vec::new();\n    for (i, x)\
    \ in xs.iter().enumerate() {\n        if i == 0 {\n            continue;\n   \
    \     }\n        dxs.push(i as isize * x);\n    }\n    dxs", "    let mut result\
    \ = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i] * i as\
    \ isize);\n    }\n    result", "    let mut result = Vec::new();\n    for i in\
    \ 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = vec![];\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut ys = Vec::new();\n    for i\
    \ in 1..xs.len() {\n        ys.push(xs[i] * i as isize);\n    }\n    ys", "  \
    \  let mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n \
    \       if i == 0 {\n            continue;\n        }\n        result.push(i as\
    \ isize * x);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ (i, x) in xs.iter().enumerate() {\n        if i == 0 {\n            continue;\n\
    \        }\n        result.push(i as isize * x);\n    }\n    result", "    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut res = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        res.push(xs[i] * i as isize);\n    }\n    res",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut res = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        res.push(xs[i] * i as isize);\n    }\n    res",
  "    let mut result = vec![];\n    for (i, x) in xs.iter().enumerate() {\n     \
    \   if i == 0 {\n            continue;\n        }\n        result.push(i as isize\
    \ * x);\n    }\n    result", "    let mut ys = Vec::new();\n    for i in 1..xs.len()\
    \ {\n        ys.push(xs[i] * i as isize);\n    }\n    ys", "    let mut result\
    \ = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i] * i as\
    \ isize);\n    }\n    result", "    let mut result = Vec::new();\n    for (i,\
    \ x) in xs.iter().enumerate() {\n        if i == 0 {\n            continue;\n\
    \        }\n        result.push(i as isize * x);\n    }\n    result", "    let\
    \ mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i\
    \ as isize);\n    }\n    ys", "    let mut ys = Vec::new();\n    for i in 1..xs.len()\
    \ {\n        ys.push(xs[i] * i as isize);\n    }\n    ys", "    let mut result\
    \ = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i] * i as\
    \ isize);\n    }\n    result", "    let mut ys = Vec::new();\n    for i in 1..xs.len()\
    \ {\n        ys.push(xs[i] * i as isize);\n    }\n    ys", "    let mut res =\
    \ Vec::new();\n    for i in 1..xs.len() {\n        res.push(xs[i] * i as isize);\n\
    \    }\n    res", "    let mut result = Vec::new();\n    for i in 1..xs.len()\
    \ {\n        result.push(xs[i] * i as isize);\n    }\n    result", "    let mut\
    \ result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut ys = vec![];\n    for i in\
    \ 1..xs.len() {\n        ys.push(xs[i] * i as isize);\n    }\n    ys", "    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut ys = Vec::new();\n    for i\
    \ in 1..xs.len() {\n        ys.push(xs[i] * i as isize);\n    }\n    ys", "  \
    \  let mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n \
    \       if i == 0 {\n            continue;\n        }\n        result.push(i as\
    \ isize * x);\n    }\n    result", "    let mut ys = Vec::new();\n    for i in\
    \ 1..xs.len() {\n        ys.push(xs[i] * i as isize);\n    }\n    ys", "    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut res = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        res.push(xs[i] * i as isize);\n    }\n    res",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut dxs = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        dxs.push(xs[i] * i as isize);\n    }\n    dxs",
  "    let mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i]\
    \ * i as isize);\n    }\n    ys", "    let mut ys = Vec::new();\n    for i in\
    \ 1..xs.len() {\n        ys.push(xs[i] * i as isize);\n    }\n    ys", "    let\
    \ mut ys = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i\
    \ as isize);\n    }\n    ys", "    let mut result = Vec::new();\n    for i in\
    \ 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut res = Vec::new();\n    for i in 1..xs.len() {\n        res.push(xs[i]\
    \ * i as isize);\n    }\n    res", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n \
    \       if i == 0 {\n            continue;\n        }\n        result.push(i as\
    \ isize * x);\n    }\n    result", "    let mut res = Vec::new();\n    for i in\
    \ 1..xs.len() {\n        res.push(xs[i] * i as isize);\n    }\n    res", "   \
    \ let mut dxs = Vec::new();\n    for i in 1..xs.len() {\n        dxs.push(xs[i]\
    \ * i as isize);\n    }\n    dxs", "    let mut dxs = Vec::new();\n    for (i,\
    \ x) in xs.iter().enumerate() {\n        if i == 0 {\n            continue;\n\
    \        }\n        dxs.push(i as isize * x);\n    }\n    dxs", "    let mut result\
    \ = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i] * i as\
    \ isize);\n    }\n    result", "    let mut result = Vec::new();\n    for i in\
    \ 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::with_capacity(xs.len()\
    \ - 1);\n    for i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    for i in 1..xs.len()\
    \ {\n        result.push(xs[i] * i as isize);\n    }\n    result", "    let mut\
    \ result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = vec![];\n    for i\
    \ in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = vec![];\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    xs.iter()\n        .enumerate()\n \
    \       .map(|(i, &x)| x * i as isize)\n        .skip(1)\n        .collect()",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut ys = Vec::new();\n    for (i,\
    \ x) in xs.iter().enumerate() {\n        if i > 0 {\n            ys.push(i as\
    \ isize * x);\n        }\n    }\n    ys", "    let mut ys = Vec::new();\n    for\
    \ (i, x) in xs.iter().enumerate() {\n        if i == 0 {\n            continue;\n\
    \        }\n        ys.push(i as isize * x);\n    }\n    ys", "    let mut result\
    \ = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i] * i as\
    \ isize);\n    }\n    result", "    let mut ys = Vec::new();\n    for i in 1..xs.len()\
    \ {\n        ys.push(xs[i] * i as isize);\n    }\n    ys", "    let mut result\
    \ = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n        if i == 0\
    \ {\n            continue;\n        }\n        result.push(i as isize * x);\n\
    \    }\n    result", "    let mut ys = Vec::new();\n    for i in 1..xs.len() {\n\
    \        ys.push(xs[i] * i as isize);\n    }\n    ys", "    let mut result = Vec::new();\n\
    \    for (i, x) in xs.iter().enumerate() {\n        if i == 0 {\n            continue;\n\
    \        }\n        result.push(i as isize * x);\n    }\n    result", "    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut dxs = vec![];\n    for i in\
    \ 1..xs.len() {\n        dxs.push(xs[i] * i as isize);\n    }\n    dxs", "   \
    \ let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    xs.iter()\n        .enumerate()\n        .skip(1)\n        .map(|(i, &x)| x\
    \ * i as isize)\n        .collect()", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut dxs = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        dxs.push(xs[i] * i as isize);\n    }\n    dxs",
  "    let mut dxs = Vec::new();\n    for i in 1..xs.len() {\n        dxs.push(xs[i]\
    \ * i as isize);\n    }\n    dxs", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    xs.iter()\n        .enumerate()\n        .map(|(i, &x)| x * i as isize)\n \
    \       .skip(1)\n        .collect()", "    let mut result = Vec::new();\n   \
    \ for i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n  \
    \  result", "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n  \
    \      result.push(xs[i] * i as isize);\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i] * i as\
    \ isize);\n    }\n    result", "    let mut result = Vec::new();\n    for i in\
    \ 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n \
    \       if i == 0 {\n            continue;\n        }\n        result.push(i as\
    \ isize * x);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for (i, x) in xs.iter().enumerate() {\n \
    \       if i == 0 {\n            continue;\n        }\n        result.push(i as\
    \ isize * x);\n    }\n    result", "    let mut ys = Vec::new();\n    for i in\
    \ 1..xs.len() {\n        ys.push(xs[i] * i as isize);\n    }\n    ys", "    let\
    \ mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 1..xs.len() {\n        result.push(xs[i] * i as isize);\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    xs.iter()\n        .enumerate()\n \
    \       .skip(1)\n        .map(|(i, &x)| x * i as isize)\n        .collect()",
  "    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ * i as isize);\n    }\n    result", "    let mut dxs = vec![];\n    for (i,\
    \ x) in xs.iter().enumerate() {\n        if i == 0 {\n            continue;\n\
    \        }\n        dxs.push(i as isize * x);\n    }\n    dxs", "    let mut ys\
    \ = Vec::new();\n    for i in 1..xs.len() {\n        ys.push(xs[i] * i as isize);\n\
    \    }\n    ys"]
stop_tokens:
- "\n}"
