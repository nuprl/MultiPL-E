name: HumanEval_2_truncate_number
language: rust
prompt: "/// Given a positive floating point number, it can be decomposed into\n///\
  \ and integer part (largest integer smaller than given number) and decimals\n///\
  \ (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n\
  fn truncate_number(number: f64) -> f64 {\n"
tests: "}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5),\
  \ 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0),\
  \ 0.0);\n}\n"
completions: ["    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  '    number.fract()', "    let integer_part = number.trunc();\n    number - integer_part",
  '    number - number.floor()', "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", '    number
    - number.floor()', '    number - number.floor()', "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let int_part = number.trunc();\n    number - int_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer = number.trunc();\n    number - integer", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let mut\
    \ number = number;\n    while number >= 1.0 {\n        number -= 1.0;\n    }\n\
    \    number", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let int_part = number.trunc();\n    number - int_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", '    number - number.floor()',
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let truncated = number.trunc();\n    number - truncated", '    number - number.floor()',
  "    let int_part = number.trunc();\n    number - int_part", "    let truncated\
    \ = number.trunc();\n    number - truncated", "    let integer_part = number.trunc();\n\
    \    number - integer_part", '    number - number.floor()', "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  '    number - number.floor()', "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let mut number = number;\n    while number >= 1.0 {\n        number -= 1.0;\n\
    \    }\n    number", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", '    number
    - number.floor()', "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", '    number - number.floor()', "    let int_part = number.trunc();\n\
    \    number - int_part", "    let integer_part = number.trunc();\n    number -\
    \ integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  '    number - number.floor()', "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  '    number - number.floor()', "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let int_part = number.trunc();\n    number -\
    \ int_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", '    number - number.floor()', "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", '    number
    - number.floor()', "    let integer_part = number.trunc();\n    number - integer_part",
  "    let int_part = number.trunc();\n    number - int_part", '    number - number.floor()',
  "    let mut number = number;\n    let mut integer_part = 0;\n    while number >=\
    \ 1.0 {\n        number -= 1.0;\n        integer_part += 1;\n    }\n    number",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  '    number - number.floor()', "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", '    number
    - number.floor()', "    let integer_part = number.trunc();\n    number - integer_part",
  '    number - number.floor()', "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let int_part = number.trunc();\n    number - int_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", '    number - number.floor()',
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", '    number.fract()', "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let mut number_string =\
    \ number.to_string();\n    let mut number_string_chars = number_string.chars();\n\
    \    let mut decimal_part = String::new();\n    let mut found_decimal_point =\
    \ false;\n    for c in number_string_chars {\n        if c == '.' {\n        \
    \    found_decimal_point = true;\n        }\n        if found_decimal_point {\n\
    \            decimal_part.push(c);\n        }\n    }\n    decimal_part.parse::<f64>().unwrap()",
  "    let mut number = number;\n    while number >= 1.0 {\n        number -= 1.0;\n\
    \    }\n    number", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let int_part = number.trunc();\n    return number - int_part;", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let mut number = number;\n\
    \    while number >= 1.0 {\n        number -= 1.0;\n    }\n    number", "    let\
    \ mut number = number;\n    let mut integer_part = 0;\n    while number >= 1.0\
    \ {\n        number -= 1.0;\n        integer_part += 1;\n    }\n    number", " \
    \   let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let truncated = number.trunc();\n    number\
    \ - truncated", '    number - number.floor()', '    number - number.floor()',
  "    let integer_part = number.trunc();\n    number - integer_part", '    number
    - number.floor()', "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", '    number - number.floor()',
  "    let integer_part = number.trunc();\n    number - integer_part", "    let int_part\
    \ = number.trunc();\n    number - int_part", '    number - number.floor()', " \
    \   let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let number_int = number.floor();\n\
    \    number - number_int", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", '    number
    - number.floor()', "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", '    number - number.floor()', '    number - number.floor()',
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let int_part = number.trunc();\n    number - int_part", "    let int_part =\
    \ number.trunc();\n    number - int_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let int_part = number.trunc();\n    number - int_part",
  '    number - number.floor()', "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer = number.trunc();\n    number - integer", "    let mut number =\
    \ number;\n    if number < 0.0 {\n        number = -number;\n    }\n    let integer_part\
    \ = number.floor();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part"]
stop_tokens:
- "\n}"
