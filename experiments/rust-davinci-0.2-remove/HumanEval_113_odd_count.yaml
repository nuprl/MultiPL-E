name: HumanEval_113_odd_count
language: rust
prompt: "/// Given a list of strings, where each string consists of only digits, return\
  \ a list.\n/// Each element i of the output should be \"the number of odd elements\
  \ in the\n/// string i of the input.\" where all the i's should be replaced by the\
  \ number\n/// of odd digits in the i'th string of the input.\n/// \"the number of\
  \ odd elements 8n the str8ng 8 of the 8nput.\"]\nfn odd_count(lst: Vec<String>)\
  \ -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!(candidate(vec![String::from(\"\
  1234567\")]), vec![String::from(\"the number of odd elements 4n the str4ng 4 of\
  \ the 4nput.\")]);\n    assert_eq!(candidate(vec![String::from(\"3\"), String::from(\"\
  11111111\")]), vec![String::from(\"the number of odd elements 1n the str1ng 1 of\
  \ the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng 8 of the\
  \ 8nput.\")]);\n    assert_eq!(candidate(vec![String::from(\"271\"), String::from(\"\
  137\"), String::from(\"314\")]), vec![String::from(\"the number of odd elements\
  \ 2n the str2ng 2 of the 2nput.\"), String::from(\"the number of odd elements 3n\
  \ the str3ng 3 of the 3nput.\"), String::from(\"the number of odd elements 2n the\
  \ str2ng 2 of the 2nput.\")]);\n}\n"
completions: []
stop_tokens:
- "\n}"
