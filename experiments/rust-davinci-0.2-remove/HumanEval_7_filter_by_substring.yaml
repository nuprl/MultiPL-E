name: HumanEval_7_filter_by_substring
language: rust
prompt: "/// Filter an input list of strings only for ones that contain given substring\n\
  fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
  \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
  xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
  xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
  )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
  ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")),\
  \ vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
completions: ["    strings\n        .into_iter()\n        .filter(|string| string.contains(&substring))\n\
    \        .collect()", "    let mut filtered_strings = Vec::new();\n    for s in\
    \ strings {\n        if s.contains(&substring) {\n            filtered_strings.push(s);\n\
    \        }\n    }\n    filtered_strings", "    let mut filtered_strings = Vec::new();\n\
    \    for string in strings {\n        if string.contains(&substring) {\n     \
    \       filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    let mut filtered_strings = Vec::new();\n    for string in strings {\n     \
    \   if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", "    let mut filtered_strings = Vec::new();\n\
    \    for string in strings {\n        if string.contains(&substring) {\n     \
    \       filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.contains(&substring))\n        .collect()", " \
    \   strings\n        .into_iter()\n        .filter(|string| string.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.contains(&substring))\n        .collect()", "    let mut filtered_strings\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    let mut filtered_strings = Vec::new();\n    for string\
    \ in strings {\n        if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    let mut filtered: Vec<String>\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered.push(string);\n        }\n    }\n    filtered", "  \
    \  strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    let mut filtered_strings = Vec::new();\n    for string in strings {\n     \
    \   if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    let mut\
    \ filtered_strings = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    let mut filtered_strings\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|string| string.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|string| string.contains(&substring))\n\
    \        .collect()", "    let mut filtered_strings = Vec::new();\n    for string\
    \ in strings {\n        if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    let mut\
    \ filtered_strings = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    let mut\
    \ filtered_strings = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    let mut filtered: Vec<String> = Vec::new();\n    for\
    \ s in strings {\n        if s.contains(&substring) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered", "    strings\n        .into_iter()\n       \
    \ .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n   \
    \     .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.contains(&substring))\n        .collect()", " \
    \   strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    let mut\
    \ filtered_strings = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    let mut filtered_strings = Vec::new();\n    for string\
    \ in strings {\n        if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.contains(&substring))\n        .collect()", " \
    \   strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|string| string.contains(&substring))\n\
    \        .collect()", "    let mut filtered_strings = Vec::new();\n    for string\
    \ in strings {\n        if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|string| string.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.contains(&substring))\n        .collect()", "    let mut filtered_strings\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.contains(&substring))\n        .collect()", " \
    \   let mut filtered_strings = Vec::new();\n    for string in strings {\n    \
    \    if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", "    let mut filtered_strings = Vec::new();\n\
    \    for string in strings {\n        if string.contains(&substring) {\n     \
    \       filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.contains(&substring))\n        .collect()", " \
    \   strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|string| string.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|string| string.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.contains(&substring))\n        .collect()", " \
    \   strings\n        .into_iter()\n        .filter(|string| string.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|string| string.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|string| string.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|string| string.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    let mut filtered_strings\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    let mut filtered_strings = Vec::new();\n    for string in strings {\n     \
    \   if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    let mut filtered_strings = Vec::new();\n    for string in strings {\n     \
    \   if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.contains(&substring))\n        .collect()", " \
    \   strings\n        .into_iter()\n        .filter(|string| string.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.contains(&substring))\n        .collect()", " \
    \   let mut filtered_strings = Vec::new();\n    for string in strings {\n    \
    \    if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|string| string.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    let mut filtered_strings = Vec::new();\n    for string\
    \ in strings {\n        if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.contains(&substring))\n        .collect()", " \
    \   strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.contains(&substring))\n        .collect()", " \
    \   strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.contains(&substring))\n        .collect()", " \
    \   strings\n        .into_iter()\n        .filter(|string| string.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    let mut filtered_strings = Vec::new();\n    for string\
    \ in strings {\n        if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.contains(&substring))\n        .collect()", " \
    \   strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    let mut filtered_strings = Vec::new();\n    for s in\
    \ strings {\n        if s.contains(&substring) {\n            filtered_strings.push(s);\n\
    \        }\n    }\n    filtered_strings", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    let mut filtered_strings\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    let mut filtered: Vec<String>\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered.push(string);\n        }\n    }\n    filtered", "  \
    \  strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()"]
stop_tokens:
- "\n}"
