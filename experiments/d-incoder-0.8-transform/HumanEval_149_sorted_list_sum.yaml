name: HumanEval_149_sorted_list_sum
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nWrite a function that accepts\
  \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
  \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
  \ is always a list of strings and never an array of numbers,\n    and it may contain\
  \ duplicates.\n    The order of the list should be ascending by length of each word,\
  \ and you\n    should return the list sorted by that rule.\n    If two words have\
  \ the same length, sort the list alphabetically.\n    The function should return\
  \ a list of strings in sorted order.\n    You may assume that all words will have\
  \ the same length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"\
  ])\n    [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\"\
  , \"cd\"]\n    \n*/\nstring[] sorted_list_sum(string[] lst) \n"
tests: "unittest\n{\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"\
  aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\",\
  \ \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
  d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\"\
  , \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"\
  ]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"\
  c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"\
  cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
completions: []
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
