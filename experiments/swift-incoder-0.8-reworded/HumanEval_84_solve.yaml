name: HumanEval_84_solve
language: swift
prompt: "\n/// Given a positive integer N, return the total sum of its digits in binary.\n\
  /// Example\n/// >>> solve(N: 1000)\n/// \"1\"\n/// >>> solve(N: 150)\n/// \"110\"\
  \n/// >>> solve(N: 147)\n/// \"1100\"\n/// Variables:\n/// @N integer\n/// Constraints:\
  \ 0 \u2264 N \u2264 10000.\n/// Output:\n/// a string of binary number\nfunc solve(N:\
  \ Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(solve(N: 1000) == \"1\")\nassert(solve(N:\
  \ 150) == \"110\")\nassert(solve(N: 147) == \"1100\")\nassert(solve(N: 333) == \"\
  1001\")\nassert(solve(N: 963) == \"10010\")"
completions: ["    var result = \"\"\n    for _ in 1...N {\n        var count = 0\n\
    \        var remainder = 0\n        var i = 2\n        var temp = 0\n        while\
    \ i < N {\n            count += 1\n            temp = N % 10\n            remainder\
    \ = temp % 2\n            N = N / 10\n            i += temp\n            if remainder\
    \ == 1 {\n                result += \"1\"\n            }\n        }\n    }\n \
    \   return result", "    var result = \"\"\n    for n in 1...N {\n        result\
    \ += String(Int(truncatingRemainder(dividingBy: n)))\n    }\n    return result",
  "    let mut result = \"\"\n    for n in binary(N) {\n        let mut s = \"\"\n\
    \        for c in n {\n            s += \"01\"[c]\n        }\n        result =\
    \ s + result\n    }\n    return result", "    if N <= 0 {\n        return \"0\"\
    \n    }\n    if N < 10 {\n        return String(N)\n    }\n    let str = String(N).reversed()\n\
    \    let count = (str as NSString).length\n    var result: String = \"\"\n   \
    \ \n    var result2 = \"\"\n    let max = (pow(10, count) as NSString).reversed().map{\
    \ String($0) }\n    \n    var remainder = 10\n    for i in max {\n        let\
    \ num = Int(remainder)\n        result2 = String(num) + result2\n        remainder\
    \ = num % 10\n    }\n    result = String(result2)\n    return result", "    let\
    \ base = String(N).unicodeScalars.filter { $0 != 0 }.map { String(format: \"%08d\"\
    , $0) }.joined()\n    var total = 0\n    for x in base {\n        if x != \"0\"\
    \ && x != \"1\" {\n            total += Int(x)\n        }\n    }\n    return String(total)",
  "    let result = solve2(N)\n    return result", '  return Solve(N).map({$0}).joined(separator:
    "")', "    var sumString = \"\"\n    var result = \"\"\n\n    for i in stride(from:\
    \ N, to: 1, by: 1) {\n        sumString += String(format: \"%0*d\", 0, i)\n  \
    \      result = sumString + result\n    }\n    return result", "    \n    return\
    \ \"\"", "    var ret = \"\"\n    var sum: String = \"\"\n    \n    if N < 0 {\n\
    \        print(\"The sum cannot be negative number\")\n        return\n    }\n\
    \    \n    if N < pow(10, 6) {\n        ret = \"0\"\n    }\n    \n    else if\
    \ N < pow(10, 5) {\n        ret = String(N%10)\n    }\n    \n    else if N < pow(10,\
    \ 4) {\n        ret = String(N%10)+\"0\"\n    }\n    \n    else if N < pow(10,\
    \ 3) {\n        ret = String(N%10)+\"0\"+String(N%10)\n    }\n    \n    else if\
    \ N < pow(10, 2) {\n        ret = String(N%10)+\"0\"+String(N%10)+String(N%10)\n\
    \    }\n    \n    else if N < pow(10, 1) {\n        ret = String(N%10)+\"0\"+String(N%10)+String(N%10)+String(N%10)\n\
    \    }\n    \n    else {\n        ret = String(N%10)+\"0\"+String(N%10)+String(N%10)+String(N%10)+String(N%10)+String(N%10)\n\
    \    }\n    \n    if ret == \"0\" {\n        print(\"The sum is 0\")\n       \
    \ return\n    }\n    \n    if ret == \"\" {\n        print(\"The sum is 0\")\n\
    \        return\n    }\n    \n    if ret != \"0\" {\n        sum += ret\n    }\n\
    \    \n    if ret == String(N%10) {\n        sum = \"0\"+sum\n    }\n    \n  \
    \  if ret == String(N%10)+String(N%10) {\n        sum = \"0\"+sum+\"0\"\n    }\n\
    \    \n    if ret == String(N%10)+String(N%10)+String(N%10) {\n        sum = \"\
    0\"+sum+\"0\"+String(N%10)\n    }\n    \n    if ret == String(N%10)+String(N%10)+String(N%10)+String(N%10)\
    \ {\n        sum = \"0\"+sum+\"0\"+String(N%10)+String(N%10)\n    }\n    \n  \
    \  if ret == String(N%10)+String(N%10)+String(N%10)+String(N%10)+String(N%10)\
    \ {\n        sum = \"0\"+sum+\"0\"+String(N%10)+String(N%10)+String(N%10)\n  \
    \  }\n    \n    if ret == String(N%10)+String(N%10)+String(N%10)+String(N%10)+String(N%10)+String(N%10)\
    \ {\n        sum = \"0\"+sum+\"0\"+String(N%10)+String(N%10)", "    var res =\
    \ 0\n    for _ in 0..<N {\n        res += String(bin(N % 2)!)\n        N /= 2\n\
    \    }\n    return String(res)", "\tvar ans = \"\"\n\t\n\tlet sum = N\n\twhile\
    \ sum > 0 {\n\t\tlet remainder = sum % 2\n\t\tans = String(remainder) + ans\n\t\
    \tsum = (sum - remainder) / 2\n\t}\n\t\n\treturn ans", "    let N = N\n    var\
    \ result: Array<Int> = []\n    for _ in 0..N {\n        let currentResult = currentResult()\
    \ + N % 10\n        N = N / 10\n        result.append(currentResult)\n    }\n\n\
    \    return String(result)", "    var binary = \"\"\n    while N > 0 {\n     \
    \   binary += \"0\"\n        N = N / 2\n    }\n    \n    binary = \"1\" + binary\n\
    \    for char in binary {\n        var num: Int?\n        var newChar: Int?\n\
    \        \n        if char == \"0\" {\n            num = digitToNum(\"0\")\n \
    \           newChar = digitToNum(\"1\")\n        } else {\n            num = digitToNum(char)\n\
    \            newChar = digitToNum(char)\n        }\n        \n        digitSum(num!,\
    \ newChar!)\n    }\n    \n    return binary", "    if N == 0 {\n        return\
    \ String(N)\n    }\n\n    var binary = \"\"\n    var i = 0\n\n    while N > 0\
    \ {\n        binary = \"\\(binary)\\(N mod 2)\"\n        N = (N / 2)\n       \
    \ i = i + 1\n    }\n    return String(binary) + String(repeating: \"0\", count:\
    \ i)", "    \n    var result = \"\"\n    if N > 10000 {\n        return \"\"\n\
    \    }\n    var total = 0\n    for i in 1...N {\n        total += pow((N / i),\
    \ 2)\n    }\n    \n    for _ in 1...total {\n        result += String(format:\
    \ \"%0*d\", 3, 0)\n    }\n    \n    return result", '    return binarySum(Double(N))',
  "    if N < 0 { return \"\" }\n    var result = \"\"\n    var sum = 0\n    for _\
    \ in 0..<N {\n        let index = N % 2 == 1 ? N - 1 : N - 1\n        sum += Int(N\
    \ / pow(2,Double(index)))\n        result += \"1\"\n        N = index\n    }\n\
    \    if N > 0 {\n        result += \"0\"\n    }\n    return String(sum) + result",
  "\tvar result = \"\"\n\tif N == 0 {\n\t\treturn \"\"\n\t}\n\t\n\tfor i in 1...N\
    \ { // the for loop starts from 1 because the first digit is 1, and we want to\
    \ calculate the digits of the binary number starting from 0\n\t\tresult += String(N\
    \ % 2)\n\t\tN = N / 2\n\t}\n\t\n\treturn result", "    \n    let bits = String(N).reversed().reduce(\"\
    \") {\n        if $0 % 2 == 0 {\n            $0 += \"1\"\n        } else {\n \
    \           $0 += \"0\"\n        }\n    }\n    let len = bits.characters.count\n\
    \    var result = \"\"\n    for i in 0..<len {\n        let i = Int(bits.characters.index(of:\
    \ \"1\"), radix: 2)!\n        let index = i / 2\n        let remain = i - (index\
    \ * 2)\n        result = String(remain) + result\n    }\n    return result", " \
    \   var binaryNumber = String()\n    var temp: Int\n    if N < 1 {\n        return\
    \ binaryNumber\n    }\n    while N > 0 {\n        temp = N % 2\n        binaryNumber\
    \ = String(temp) + binaryNumber\n        N /= 2\n    }\n    return binaryNumber",
  "    let result = \"\"\n    var i = 0\n    while i < N {\n        let remainder\
    \ = N % 2\n        if remainder == 0 {\n            result += \"1\"\n        \
    \    N /= 2\n        } else if remainder == 1 {\n            result += \"0\"\n\
    \            N /= 2\n        } else {\n            result += \"0\"\n         \
    \   result += \"1\"\n        }\n        i += 1\n    }\n    return result", "\t\
    let result = Int(N).toBinaryString()\n\tlet sum = 0\n\t\n\tfor n in result {\n\
    \t\tsum += Int(n) \n\t}\n\t\n\treturn String(sum)", "    if N == 0 {\n       \
    \ return \"0\"\n    }\n    var result = \"\"\n    var num : Int = 0\n    for _\
    \ in 0..<N {\n        if num < 10 {\n            result = \"0\"\n        }\n \
    \       result += \"1\"\n        num <<= 1\n    }\n    return result", "    let\
    \ mut sum = 0\n    for n in BinarySearch(digits: &N) {\n        sum += n\n   \
    \ }\n    return String(sum)", "    var result = \"\"\n    var remainder = N\n\
    \    while remainder > 1 {\n        result += String(remainder % 2)\n        remainder\
    \ = (remainder / 2)\n    }\n    return String(remainder)", "    let maxN = (1<<31)\
    \ - 1 // Max allowed value of N\n    var result: Int = 0 // init as zeros\n  \
    \  var carry = 0 // init as zero\n    \n    for n in 1..<maxN {\n        var sum\
    \ = carry + (n & 1) * result\n        result = n >> 1\n        carry = sum\n \
    \   }\n    if carry > 0 {\n        result += 1\n    }\n    return String(result)",
  "    \n    guard N > 0 else {\n        return \"\"\n    }\n    \n    let binaryString\
    \ = \"0\"\n    \n    let digit = N % 10\n    \n    if N > 10 { // 10+\n      \
    \  binaryString += \"1\"\n    } else {\n        binaryString += String(digit)\n\
    \    }\n    \n    return binaryString", "    precondition(N > 0, \"N cannot be\
    \ zero\")\n    precondition(N < 10000, \"N must be < 10000\")\n\n    var result\
    \ = \"0\"\n    for digit in binary(N) {\n        result = result + digit\n   \
    \ }\n\n    return result", '  return solve2(N: N, result: "")', "    var ans =\
    \ \"\"\n    var remainder = N\n    while remainder != 0 {\n        var newDiv\
    \ = remainder % 2\n        ans = String(newDiv) + ans\n        remainder = remainder\
    \ / 2\n    }\n    return ans", "    // Your code here\n    if N < 0 {\n      \
    \  return \"0\";\n    }\n    if N == 0 {\n        return \"1\";\n    }\n    var\
    \ bin = String()\n    for n in 0..N {\n        if n % 2 == 0 {\n            bin\
    \ += \"1\";\n        } else {\n            bin += \"0\";\n        }\n    }\n \
    \   return bin;", "    var result: String = \"\"\n    var sum = 0\n\n    for _\
    \ in 0..<N {\n        let remainder = sum % 10\n        sum += remainder * 2\n\
    \        result += \"\\(remainder)\"\n    }\n    return result", "    \n    var\
    \ result: String = \"\"\n    var sum: Int = 0\n    \n    for n in 0..<N {\n  \
    \      let temp = n >> 1\n        \n        if n & 1 == 0 {\n            sum +=\
    \ temp\n        }\n        else {\n            sum += temp * 10\n        }\n \
    \   }\n    \n    if sum >= 10 {\n        result = \"1\"\n        sum -= 10\n \
    \   }\n    \n    for n in 0..<sum {\n        result += String(format: \"%0*d\"\
    , N - n, n)\n    }\n    \n    return result", '    return solve(N: N, min: 10)',
  "    var binaryString = \"\"\n    for _ in 0..<N { binaryString += \"1\" }\n   \
    \ var sum = 0\n    var i = 0\n    for _ in binaryString.characters {\n       \
    \ sum += Int(binaryString[i..<i].utf8)! * Int(binaryString[i..<i].utf8)!\n   \
    \     i += 1\n    }\n    return String(format: \"%0*d\", Int(binaryString.utf8.count)!,\
    \ sum)", "    var sum = \"\"\n    for number in 1...N {\n        sum += String(pow(Double(number),\
    \ Double(2)))\n    }\n    return sum", '    return binarySearch(IntToBitArray(N))',
  "    var binary: String = \"\"\n    var i = N\n    repeat {\n        let remainder\
    \ = (N % 10).truncatingRemainder(dividingBy: 2)\n        binary = String(remainder)\
    \ + binary\n        N = N / 10\n    } while N > 0\n    return binary", "\tvar\
    \ result = \"0\"\n\t\n\tfor i in 0..<N {\n\t\tvar sum = 0\n\t\t\n\t\tfor j in\
    \ 0..<N {\n\t\t\tsum += digits[Int(i/N%10) + Int(j/N%10)].1\n\t\t}\n\t\tresult\
    \ += digits[Int(i/N%10)].1 + String(sum)\n\t\t\n\t\tN -= 1\n\t}\n\t\n\treturn\
    \ result", "\tswitch N {\n\tcase 0:\n\t\treturn \"0\"\n\tcase 1:\n\t\treturn \"\
    1\"\n\tcase 2:\n\t\treturn \"10\"\n\tcase 3:\n\t\treturn \"11\"\n\tcase 4:\n\t\
    \treturn \"100\"\n\tcase 5:\n\t\treturn \"101\"\n\tcase 6:\n\t\treturn \"110\"\
    \n\tcase 7:\n\t\treturn \"111\"\n\tcase 8:\n\t\treturn \"1000\"\n\tcase 9:\n\t\
    \treturn \"1001\"\n\tcase 10:\n\t\treturn \"1010\"\n\tcase 11:\n\t\treturn \"\
    1011\"\n\tcase 12:\n\t\treturn \"1100\"\n\tcase 13:\n\t\treturn \"1101\"\n\tcase\
    \ 14:\n\t\treturn \"1110\"\n\tcase 15:\n\t\treturn \"1111\"\n\tdefault:\n\t\t\
    return String(N)\n\t}", "    let numDigits = BinaryDigits(N).count\n    var result\
    \ = \"\"\n    for _ in 1...numDigits {\n        result += BinaryDigits(N)\n  \
    \  }\n    return result", "  var s = \"\"\n  for n in binaryToDecimal(N) {\n \
    \   s += \"1\"\n  }\n  return s", "    precondition(N <= 10000, \"N must be in\
    \ range [0, 10000]\");\n    var result = \"\";\n    for i in 1...N {\n       \
    \ var result = result + String(format: \"%0*d\", N, i);\n    }\n    result", " \
    \   let number = BinaryNumberToInt(N);\n    let bits = BinToBinary(number);\n\
    \    var result = \"\";\n    for i in bits {\n        result += String(Int(i));\n\
    \    }\n    return result;", "    // Your code here\n    var result = \"\"\n \
    \   var i = 0\n    var j = 0\n\n    while i < N {\n        if i >= 10 {\n    \
    \        j = 0\n            result += String(N % 2)\n            N = N / 2\n \
    \       }\n        else if i % 2 == 0 {\n            j++\n            result +=\
    \ String(j)\n        }\n        i++\n    }\n    return result", '    return String(solve(N:
    N).reversed())', "    let digits = log2(N)\n    \n    guard digits > 0 else {\n\
    \        return \"0\"\n    }\n    \n    var result = \"\"\n    \n    for index\
    \ in 0..<digits {\n        var tmp = \"\"\n        \n        // left digit\n \
    \       let index = N % 10\n        let isLeft = index < N\n        \n       \
    \ if isLeft {\n            tmp = String(index)\n        } else {\n           \
    \ tmp = String(N % 10) + String(index)\n        }\n        \n        // remove\
    \ left\n        N = N / 10\n        \n        // add right\n        N = N * 2\n\
    \        \n        // add tmp\n        result = result + tmp\n    }\n    \n  \
    \  return result", "    precondition(\n        0 <= N && N < 1000, \"invalid input\"\
    \n    )\n\n    var answer = \"\"\n    var currentNumber: Int = 0\n    var currentDigit:\
    \ Int = 0\n    var lastDigit: Int = 0\n    var lastDigitString = \"\"\n\n    while\
    \ currentNumber != 0 {\n        lastDigitString = String(lastDigit)\n        lastDigit\
    \ = currentNumber % 10\n        currentNumber /= 10\n        currentDigit = lastDigit\
    \ * 2\n        answer += lastDigitString\n    }\n\n    return answer", "    if\
    \ N < 0 {\n        return \"0\"\n    }\n    var ans = \"\"\n    var lastDigit\
    \ = 0\n    var power = 1\n    var currentDigit = 1\n    for i in 0..<N {\n   \
    \     var currentSum = 0\n        for j in 0..<power {\n            currentSum\
    \ += (lastDigit % 10) * currentDigit\n            lastDigit = (lastDigit / 10)\
    \ + 1\n            currentDigit *= 2\n        }\n        ans += String(currentSum)\n\
    \        power = power * 2\n    }\n    return ans", '    return solveHelper(N,
    0)', '    return binarySum(N)', "  var result = \"\"\n  for d in 0 ..< N {\n \
    \   let bin = String(format: \"%01d\", Int64(pow(10, N-d)))\n    result += bin\n\
    \  }\n  return result", "    guard N <= 10000 else {\n        return \"0\"\n \
    \   }\n    let maxSum = Int(pow(2, ceil(log2(N))) + 1)\n    let digits = [Int](0..<maxSum).map({\
    \ _ in\n        return arc4random_uniform(2) == 0\n    })\n    var maxSumDigits\
    \ = [Int](0..<maxSum)\n    digits.forEach { digit in\n        maxSumDigits +=\
    \ digit\n    }\n    let maxSumDigit = maxSumDigits.reduce(0, +)\n    let resultDigits\
    \ = maxSumDigit + digits.reduce(0, +)\n    return String(resultDigits)", "   \
    \ \n    if N < 0 {\n        return \"0\"\n    }\n    \n    var sum = \"\"\n  \
    \  var lastSum = 0\n    var isZero = false\n    \n    for _ in 0..<N {\n     \
    \   sum = String(Int(lastSum) + Int(lastSum))\n        lastSum = 0\n        \n\
    \        if isZero {\n            sum += \"0\"\n        }\n        \n        if\
    \ sum == \"0\" {\n            isZero = true\n        } else {\n            isZero\
    \ = false\n        }\n    }\n    \n    return sum", "    let result = String(repeating:\
    \ \"0\", count: N).reversed().reduce(\"\") {\n        (memo, digit) -> String\
    \ in\n        if memo.characters.count + 1 == memo.utf8.count {\n            memo\
    \ += digit\n        } else {\n            memo += \"0\"\n        }\n        return\
    \ memo\n    }\n    return String(result.reversed())", "  // Your code here\n \
    \ if N < 0 {\n    return \"0\"\n  }\n  var count = 0\n  var str = String()\n \
    \ var remainder = N\n  while remainder > 0 {\n    let mod = remainder % 2\n  \
    \  str = String(mod) + str\n    remainder = Int(remainder / 2)\n    count += 1\n\
    \  }\n  return str", "    var result: String = \"\"\n    var n = N\n    var n2\
    \ = N / 2\n    var i = N / 2\n    var j = 1\n    var k = N - 1\n    var sum =\
    \ \"\"\n    while i >= 1 {\n        sum += String(i % 2)\n        n = n / 2\n\
    \        i = i / 2\n    }\n    while j >= 1 {\n        sum += String(j % 2)\n\
    \        n2 = n2 / 2\n        j = j / 2\n    }\n    sum += String(n2)\n    if\
    \ n == 1 {\n        result = sum\n    } else {\n        result = sum + solve(n)\n\
    \    }\n    return result", '    return strconv.Itoa(N / 2) + solve(N - strconv.Itoa(N
    / 2))', '    return solve(N: N, with: "", separator: "")', "    let binary = toBinary(N)\n\
    \    let result = 0\n    for b in binary.characters {\n        result <<= 1\n\
    \        result |= Int(b) ?? 0\n    }\n    return String(result)", "    let digits\
    \ = Array(1...N).map({ String() }).reduce(\"\", { $0 + String($1) })\n    let\
    \ result = digits[digits.startIndex] + \"0\"\n\n    for i in 1..<digits.count\
    \ {\n        let curDigit = digits[digits.startIndex + i]\n        let nextDigit\
    \ = digits[digits.startIndex + i - 1]\n        let sum = \"0\" + String(curDigit)\
    \ + String(nextDigit)\n        if sum == result {\n            return result\n\
    \        }\n        result = sum\n    }\n    return result", "    let s = String(N).reversed()\n\
    \    return String(\n        s.suffix(\n            s.count/2).reversed().prefix(\n\
    \            s.count/2))", "    if N < 0 || N > 10000 {\n        throw InputError.value(forVariable:\
    \ \"N\", reason: \"N should be in range of 0 to 10000.\")\n    }\n    \n    var\
    \ result: String\n    var remainder: Int\n    var current: Int\n    var total:\
    \ Int\n    \n    for remaining in 0...N {\n        current = remainder % 2\n \
    \       remainder = remainder / 2\n        if current == 0 {\n            total\
    \ += current\n        }\n    }\n    \n    if remainder > 0 {\n        total +=\
    \ remainder\n    }\n    \n    if total == 0 {\n        result = \"0\"\n    } else\
    \ {\n        result = \"1\"\n    }\n    \n    \n    return result + solve(N: total)",
  "    if N == 1 {\n        return \"1\"\n    }\n    var result = \"\"\n    var i\
    \ = 1\n    while i < N {\n        result = result + \"1\"\n        i += 1\n  \
    \  }\n    return result", "\tlet numbers = String(N).binaryString\n\tvar binarySum\
    \ = \"\"\n\tfor i in 0..<numbers.count {\n\t\tbinarySum += \"0\" + numbers[i]\n\
    \t}\n\treturn binarySum", "    let result = \"0\"\n    for i in 0..<N {\n    \
    \    result += \"0\"\n    }\n    return result", "    var sum = N\n    var result\
    \ = \"\"\n    for digit in N.toString(2) { result += digit }\n    return result",
  "    var sum: String = \"\"\n    var count: Int = 1\n    for num in N...0 {\n  \
    \      sum += String(UInt8(num))\n        count += 1\n    }\n    return \"\\(sum)0\"\
    .repeat(count)", '    return solve(N: N, base: 2)', "    let binary = [\n    \
    \    0b0000,\n        0b0010,\n        0b0100,\n        0b1000,\n        0b1110,\n\
    \    ]\n    let binaryString = \"\"\n    let binaryArray = Array(binary)\n   \
    \ var currentBinaryString = \"\"\n    var currentSum = 0\n    let N = abs(N)\n\
    \    var remainder = N % 10\n    var digits = N / 10\n    \n    for i in 0..<digits\
    \ {\n        currentBinaryString = String(binaryArray[i])\n        \n        if\
    \ currentBinaryString != \"0\"{\n            currentSum = currentSum + Int64(currentBinaryString!)\n\
    \        }\n    }\n    \n    while currentBinaryString.count != 0 {\n        currentBinaryString\
    \ = String(binaryArray[currentBinaryString.index(currentBinaryString.startIndex,\
    \ offsetBy: -1)])\n        \n        if currentBinaryString != \"0\" && currentBinaryString.count\
    \ == 1 {\n            currentSum = currentSum + Int64(currentBinaryString!)\n\
    \        }\n        \n        if currentBinaryString != \"0\" && currentBinaryString.count\
    \ == 2 {\n            currentSum = currentSum + Int64(currentBinaryString!) *\
    \ 3\n        }\n        \n        if currentBinaryString != \"0\" && currentBinaryString.count\
    \ == 3 {\n            currentSum = currentSum + Int64(currentBinaryString!) *\
    \ 6\n        }\n        \n        if currentBinaryString != \"0\" && currentBinaryString.count\
    \ == 4 {\n            currentSum = currentSum + Int64(currentBinaryString!) *\
    \ 12\n        }\n        \n        if currentBinaryString != \"0\" && currentBinaryString.count\
    \ == 5 {\n            currentSum = currentSum + Int64(currentBinaryString!) *\
    \ 15\n        }\n        \n        if currentBinaryString != \"0\" && currentBinaryString.count\
    \ == 6 {\n            currentSum = currentSum + Int64(currentBinaryString!) *\
    \ 18\n        }\n        \n        if currentBinaryString != \"0\" && currentBinaryString.count\
    \ == 7 {\n            currentSum = currentSum + Int64(currentBinaryString!) *\
    \ 21\n        }\n        \n        if currentBinaryString != \"0\" && currentBinaryString.count\
    \ == 8 {\n            currentSum = currentSum + Int64(currentBinaryString!) *\
    \ 24\n        }\n        \n        if currentBinaryString != \"0\" && currentBinaryString.count\
    \ == 9 {\n            currentSum = currentSum + Int64(currentBinaryString!) *\
    \ 27\n        }\n        \n        if currentBinaryString != \"0\" && currentBinaryString.count\
    \ == 10 {\n            currentSum = currentSum + Int64(currentBinaryString!) *\
    \ 30\n        }\n        \n        if currentBinaryString != \"0\" && currentBinaryString.count\
    \ == 11 {\n            currentSum = currentSum + Int64(current", "    let s =\
    \ String(N)\n    let ans = \"\"\n\n    for k in stride(from: 0, to: s.count, by:\
    \ 1) {\n        let i = Int(s[k])\n        if i % 2 == 1 {\n            ans =\
    \ \"1\" + ans\n        } else {\n            ans = \"0\" + ans\n        }\n  \
    \  }\n\n    return ans", "    if N == 0 {\n        return \"\"\n    }\n    var\
    \ s = \"\"\n    var n = 0\n    var digits = \"0\"\n    var digit = 0\n    for\
    \ i in 0..<N {\n        n += digit\n        digits = \"\\(digits)\\(n % 2)\"\n\
    \        if digits == \"1\" && digits != \"\" {\n            digit = 0\n     \
    \   } else if digits == \"0\" {\n            digit = 1\n        } else {\n   \
    \         digit = 0\n        }\n    }\n    for i in 0..<(N % 2) {\n        s +=\
    \ \"1\"\n    }\n    return s", "    if N < 0 {\n        throw SolutionError.nMinusZero\n\
    \    }\n    var result = \"\"\n    for _ in 0..<N {\n        result = result +\
    \ \"1\"\n    }\n    return result", "    precondition(N >= 0, \"N must be positive\"\
    )\n    var total = 0\n    var str = \"\"\n    while N != 0 {\n        if N % 2\
    \ == 0 {\n            total += N % 2\n            N = N / 2\n        } else {\n\
    \            total += N\n            N = (N - 1) / 2\n        }\n    }\n    while\
    \ total > 0 {\n        let cur = Int(total)\n        let next = cur / 10\n   \
    \     str.append(String(cur % 10))\n        total = next\n    }\n    return str",
  '    return compute(N, "0", 0)', "    var result: String = \"\"\n    for _ in 0..N\
    \ {\n        let temp: Int = Int(arc4random_uniform(UInt32(2)) + 1)\n        if\
    \ temp == 1 {\n            temp = 2\n        }\n        result += String(temp).reversed()\n\
    \    }\n    return result", '    return String(solve(N: N))', "    var bits: String\
    \ = \"\"\n    var N: String = \"\"\n    for i in 1...N {\n        let remain =\
    \ N % 2\n        N = \"\\(N >> 1)\" + \"\\(remain)\"\n        let N2 = \"\\(N\
    \ & 1)\" + \"\\(remain)\"\n        bits = \"\\(bits)\" + \"\\(N2)\"\n    }\n \
    \   return \"\\(bits)\"", "\tlet s = String(Int(N), radix: 2)\n\treturn s", " \
    \   // TODO: write your code in Swift 5.1 or later\n    \n    var result = \"\"\
    \n    var number = N\n\n    // First we get the first digit\n    let firstDigit\
    \ = number % 10\n    number /= 10\n    let firstBitString = \"1\"\n    let firstBit\
    \ = firstBitString.unicodeScalars\n        .first(where: { $0 >= firstDigit }).value\n\
    \    \n    // Then we get the rest of the digits (right to left)\n    for element\
    \ in number {\n        // If the current digit is a 1\n        if element == 1\
    \ {\n            // If it is first, append it and add the next bit to the result\n\
    \            if result != \"\" {\n                result += String(firstBit +\
    \ result)\n            }\n            // If it is not first, append it and add\
    \ the first bit to the result\n            else {\n                result += firstBit\n\
    \            }\n        }\n        // If the current digit is not a 1\n      \
    \  else {\n            // If it is first, append it and add the next bit to the\
    \ result\n            if result != \"\" {\n                result += String(firstBit\
    \ + result)\n            }\n            // If it is not first, append it and add\
    \ the first bit to the result\n            else {\n                result += firstBit\n\
    \            }\n        }\n    }\n\n    return result", "    let number: Int\n\
    \n    var sum: Int = 0\n    var string = \"\"\n\n    while N > 0 {\n        number\
    \ = N % 2\n        sum += number\n        N /= 2\n    }\n\n    for number in 0..<sum\
    \ {\n        string += String(number % 2)\n    }\n\n    return string", "    var\
    \ sum = 0\n    for digit in String(N) {\n        sum += Int(digit)\n    }\n  \
    \  return String(sum)", "\tguard 0 <= N <= 10000 else {\n\t\treturn \"\"\n\t}\n\
    \n\tvar sum = \"\"\n\tlet logN = Double(N).log10()\n\tlet pow10 = logN / log10\n\
    \tvar pow10 = pow(10.0, Double(logN))\n\tlet lastDigit = pow10 / pow10\n\tfor\
    \ i in 0..<floor(logN) {\n\t\tsum += String(lastDigit)\n\t\tlastDigit /= 10\n\t\
    }\n\tguard let lastDigit = lastDigit else { return \"\" }\n\tfor i in 0..<floor(logN)\
    \ {\n\t\tsum += String(lastDigit % 10)\n\t\tlastDigit /= 10\n\t}\n\tguard sum\
    \ != \"\" else { return \"\" }\n\treturn sum", '  return "TODO"', "    if N ==\
    \ 0 {\n        return String(0)\n    }\n\n    let result = String(N).reversed().reduce(0,\
    \ combine: { (result, digit) -> String in\n        let resultString = String(format:\
    \ \"%08d\", result + Int(digit))\n        return resultString + String(digit)\n\
    \    })\n\n    return result", "\tlet res = \"0\"\n\tfor i in 1 ... N {\n\t\t\
    let string = \"1\"\n\t\tlet count = N % i\n\t\tfor j in 0...count {\n\t\t\tstring\
    \ = string+\"0\"\n\t\t}\n\t\tres += string\n\t}\n\treturn res", "  var result:\
    \ String = \"\"\n  var ones = \"\"\n  var tens = \"\"\n  var hundreds = \"\"\n\
    \n  for n in 1...N {\n    var tmp = \"\"\n    if n <= 0 {\n      continue\n  \
    \  }\n    let p = n / 2\n    if p <= 0 {\n      ones += String(p)\n      continue\n\
    \    }\n\n    var remainder = p\n    while remainder != 0 {\n      remainder /=\
    \ 10\n      tmp = String(remainder)\n    }\n    let remainder = n % 2\n    if\
    \ remainder == 0 {\n      tens += tmp\n      continue\n    }\n    ones += String(p)\n\
    \    hundreds += tmp\n  }\n\n  for n in 1...N {\n    if n == 1 || n == 0 {\n \
    \     continue\n    }\n\n    let p = n / 2\n    if p > 1 {\n      ones += String(p)\n\
    \      continue\n    }\n\n    var remainder = p\n    while remainder != 0 {\n\
    \      remainder /= 10\n      tmp = String(remainder)\n    }\n    let remainder\
    \ = n % 2\n    if remainder == 0 {\n      tens += tmp\n      continue\n    }\n\
    \    hundreds += tmp\n  }\n\n  for n in 2...N {\n    var tmp = \"\"\n    if n\
    \ == 1 || n == 0 {\n      continue\n    }\n\n    let p = n / 2\n    if p > 1 {\n\
    \      ones += String(p)\n      continue\n    }\n\n    var remainder = p\n   \
    \ while remainder != 0 {\n      remainder /= 10\n      tmp = String(remainder)\n\
    \    }\n    let remainder = n % 2\n    if remainder == 0 {\n      tens += tmp\n\
    \      continue\n    }\n    hundreds += tmp\n  }\n\n  if ones != \"\" {\n    result\
    \ = ones\n  } else {\n    result = tens\n  }\n  if hundreds != \"\" {\n    result\
    \ += hundreds\n  }\n  return result", "    let bit = String(N.toBinaryString())\n\
    \    let result = \"\"\n    for character in bit {\n        result += \"0\"\n\
    \    }\n    return result", "    if N < 1 {\n        return \"\"\n    }\n    var\
    \ str = \"\"\n    let digits = \"0123456789\"\n    for _ in 0..<N {\n        str\
    \ += digits[Int(arc4random_uniform(UInt32(digits.characters.count - 1))) % UInt32(digits.characters.count)]\n\
    \    }\n    return str", "    let binaryArray = Array(1...N).map {\n        String($0\
    \ % 2)\n    }\n    return binaryArray.joined()", "    let numBits = countBits(N)\n\
    \n    let maxDigits = countDigits(N)\n    var result: String = \"\"\n    var remainder:\
    \ Int = N % 2\n    for _ in 0..<numBits {\n        result = (result + formatBinary(remainder)).insert(String(formatBinary(N\
    \ - remainder)), \"0\") + formatBinary(N - remainder % 2)\n        remainder =\
    \ remainder / 2\n    }\n    return formatBinary(remainder) + result", "    let\
    \ result = (0..<N).map{ _ in \"0\"}.reduce(\"\") { res, value in\n        res\
    \ += String(value)\n        res += res[res.startIndex...].count > 1 ? String(value).substring(1)\
    \ : \"\"\n        return res\n    }\n    return result.dropFirst()", "    var\
    \ binarySum: String = \"\"\n    var i = N\n    while i > 0 {\n        let remainder\
    \ = i % 10\n        binarySum = String(remainder) + binarySum\n        i = i /\
    \ 10\n    }\n    return binarySum", "    if N == 0 {\n        return \"0\"\n \
    \   }\n    if N == 1 {\n        return \"1\"\n    }\n    if N%2 == 0 {\n     \
    \   return solve(N/2) + \".\" + solve(N/2) + \"0\"\n    }\n    var sum:String\
    \ = \"\"\n    sum += solve(N/2) // 0\n    var mod = N%2\n    if mod == 0 {\n \
    \       return sum\n    }\n    sum += solve(N/2) + \"0\" // 1\n    return sum",
  "    let mut res = String::new();\n    let mut digits = String::new();\n    for\
    \ i in 1..=N {\n        let digit = digits_to_binary(i).to_string();\n       \
    \ digits.push(digit.clone());\n        let bin = digits_to_binary(i);\n      \
    \  res.push_str(&bin);\n        res.push_str(\"0\");\n    }\n    res.push_str(&digits);\n\
    \    debug(&res);\n    return res", '    return binarySum(N.bitWidth).makeString()',
  "    var sum = \"\"\n    var remainder = 0\n    \n    for i in stride(from: 0, to:\
    \ N, by: 1) {\n        let remainderString = (remainder % 2) == 0 ? \"0\" : \"\
    1\"\n        sum += String(remainderString)\n        remainder *= 2\n    }\n \
    \   return sum", "    var result: String = \"\"\n    for _ in 0 ..< N {\n    \
    \    if N > 0 {\n            if N % 2 == 1 {\n                result += \"1\"\n\
    \            } else {\n                result += \"0\"\n            }\n      \
    \      N /= 2\n        } else {\n            result += \" \"\n        }\n    }\n\
    \    return result", "    var result: String = \"\"\n    let bit = N\n    var\
    \ sum: Int = 0\n    var mask = 0\n    for _ in 0..<(bit.truncatingRemainder(dividingBy:\
    \ 2))+1 {\n        mask = 1 << bit.trailingZeroBitCount\n        sum = sum + bit.trailingZeros&mask\
    \ != 0\n        bit = bit.nextPowerOfTwo()\n    }\n    if sum == 1 {\n       \
    \ result = \"0\"\n    } else {\n        result = \"1\"\n    }\n    return result",
  "    var str = \"\"\n    \n    if N < 0 {\n        return \"-1\"\n    }\n    \n\
    \    var sum = 0\n    var i = 0\n    \n    while N > 0 {\n        sum += N % 2\
    \ == 0 ? 1 : 0\n        N = N / 2\n    }\n    \n    for _ in 0..<(Int(log10(sum))\
    \ + 1) {\n        str = str + \"1\" + \"0\"\n    }\n    \n    return str", " \
    \   var result: String = \"\"\n    for i in 0..<N {\n        let digit = pow(2.0,\
    \ Double(i))\n        let binaryString = String(digit)\n        result += binaryString\n\
    \    }\n    return result", "    let digits = String(N).characters.map({ String($0)\
    \ }).reverse()\n    var total = 0\n    digits.forEach { (digit) -> Void in\n \
    \       total += Int(digit)\n    }\n    let result = String(UInt8(total))\n  \
    \  return result", "    let num = \"0\".advanced(by: Int(N))\n    return String(num.chars())",
  '    return str(N, "1")', "    if N == 0 {\n        return \"0\"\n    }\n    var\
    \ sum = 0\n    var binary = \"0\"\n    for i in 1..<N {\n        sum += Int(log2(Double(i)))\n\
    \        binary += \"0\"\n    }\n    binary += String(sum)\n    return binary",
  "    let sum = 0\n    var result: String = \"\"\n    var remainder: Int = 0\n  \
    \  while N > 0 {\n        remainder = N % 2\n        sum += remainder\n      \
    \  N = N / 2\n    }\n\n    while sum >= 10 {\n        result = \"\\(sum % 10)\
    \ + \" + result\n        sum = sum / 10\n    }\n\n    result = \"\\(sum) + \"\
    \ + result\n    return result", "    guard N > 0 else { return \"\" }\n    let\
    \ str = \"\"\n    var totalSum: Int = 0\n    var totalSumDigit = 0\n    for i\
    \ in 1...N {\n        totalSum += i % 2 == 0 ? i / 2 * 2 : 1\n        totalSumDigit\
    \ += i % 2 == 0 ? i / 2 : i % 2\n    }\n    return String(repeating: \"0\", count:\
    \ totalSumDigit + 1) + String(totalSum)", "  if N == 0 || N == 1 { return \"\"\
    \ }\n  var digits = [String]()\n  var sum: Int = 0\n  var last: Int = 0\n  var\
    \ flag = false\n  for n in stride(from: N, to: 1, by: -1) {\n    if flag {\n \
    \     last = n\n    }\n    if last == 0 {\n      digits.append(String(format:\
    \ \"%01d\", n))\n    }\n    else {\n      sum += n % 10\n    }\n    flag = !flag\n\
    \  }\n  return digits.reversed().joined(separator: \"\")", "    var binaryNumber:\
    \ String = \"\"\n\n    var i = 1\n    var binaryNumberString = \"\"\n\n    for\
    \ _ in 1 ..< N {\n        binaryNumberString += String(i % 2)\n        i += 1\n\
    \    }\n\n    binaryNumber = binaryNumberString.reversed()\n\n    let result =\
    \ binaryNumber.dropLast()\n    return String(result.reverse())", '    return String(solveHelper(N))',
  "    if N < 1 {\n        return \"0\"\n    }\n    var res = \"0\"\n    let div =\
    \ N % 10\n    if div != 0 {\n        do {\n            let tmp = N / 10\n    \
    \        res = solve(N: tmp) + String(div) + res\n            N = tmp\n      \
    \      div = N % 10\n        } while div != 0\n    }\n    return res", "    var\
    \ str = \"\"\n    let Nhalf = N / 2\n    var sum = 0\n    for _ in 1..<N {\n \
    \       var nextSum = sum\n        for _ in 0..<Nhalf {\n            nextSum +=\
    \ Nhalf\n        }\n        sum += nextSum\n        str += String(nextSum)\n \
    \   }\n    return str", "    \n    // Solution logic\n    var num: Int = 0\n \
    \   var sum = 0\n    var base: String = \"1\"\n    \n    if N == 0 {\n       \
    \ return base\n    }\n    \n    if N < 0 {\n        return \"0\"\n    }\n    \n\
    \    if N > 1000 {\n        return String(N) + \"0\"\n    }\n    \n    if N <\
    \ 10 {\n        return String(N)\n    }\n    \n    if N < 100 {\n        return\
    \ String(N) + \"0\"\n    }\n    \n    while N > 10 {\n        num *= 10\n    \
    \    sum += N % 10\n        N /= 10\n    }\n    \n    if N > 0 {\n        num\
    \ *= 10\n        sum += N % 10\n        N /= 10\n    }\n    \n    let output =\
    \ String(num.prefix(2))\n    return base + output", "\tlet res = \"\"\n\t\n\t\
    for i in 0..<N {\n\t\tlet remainder = i % 2\n\t\tlet sum = (i % 10) + remainder\n\
    \t\t\n\t\tres += String(sum)\n\t}\n\treturn res", '    return solve(N).joinWithSeparator("")',
  '    return solve(N: N.Ceil())', "    let digits = String(repeating: \" \", count:\
    \ N)\n    let sum: Int = Int(digits.reduce(0, +))\n    return String(repeating:\
    \ (sum == 0 ? \"1\" : \"0\"), repeatedValue: digits.count)", "    var result:\
    \ String = \"\"\n    \n    \n    if N == 0 {\n        result = \"0\"\n    } else\
    \ if N == 1 {\n        result = \"1\"\n    } else {\n        var N2 = N / 2\n\
    \        var remainder = N % 2\n        var left = solve(N: N2)\n        var right\
    \ = solve(N: N2)\n        \n        if remainder == 0 {\n            result +=\
    \ left\n            result += right\n        } else {\n            result += left\n\
    \            result += right\n            result += \"0\"\n        }\n    }\n\
    \    \n    return result", "    let digits = [String]()\n    func addDigits(_\
    \ digit: String) {\n        guard digits.count < N else { return }\n        if\
    \ digit == \"1\" {\n            digits.append(digit)\n        } else if digit\
    \ == \"0\" {\n            digits.append(digit)\n        } else {\n           \
    \ digits.insert(digits.count - 1, digit)\n        }\n    }\n    addDigits(\"0\"\
    )\n    let maxDigit = digits.reduce(\"\") {\n        if $1 == \"\" {\n       \
    \     $0\n        } else {\n            $0 + $1\n        }\n    }\n    let lastDigit\
    \ = digits.count - maxDigit.count\n    if lastDigit > 0 {\n        let digit =\
    \ digits.last\n        addDigits(digit)\n    }\n    return digits.reversed()",
  "    if N <= 0 {\n        return \"0\"\n    }\n    return solve(N: N, str: \"\")",
  "    precondition(N >= 0, \"Negative N given!\")\n    var result = \"\"\n    var\
    \ current = 0\n    var power = 0\n    while N > 0 {\n        current = current\
    \ * 2 + N % 2\n        N /= 2\n    }\n    while current > 0 {\n        if power\
    \ > 0 {\n            result += String(String(current)[power-1])\n        } else\
    \ {\n            result += String(String(current))\n        }\n        power++\n\
    \        current = current / 2\n    }\n    return result", "    let binary = [UInt8](repeating:\
    \ 0, count: N.toIntMax())\n    var totalBinaryDigits = N\n    var digitSum = 0\n\
    \    for _ in 0..<binaryCount {\n        digitSum = digitSum * 2\n        for\
    \ _ in 0..<binaryCount {\n            if digitSum >= binaryCount {\n         \
    \       totalBinaryDigits -= 1\n                digitSum %= binaryCount\n    \
    \        } else {\n                binary[digitSum] += 1\n            }\n    \
    \    }\n    }\n    let stringRepresentation = binary[0..<totalBinaryDigits].reversed().reduce(\"\
    \", { $0 + String(format: \"%c\", $1) })\n    return \"1\".repeat(totalBinaryDigits)\
    \ + stringRepresentation", "    var res = \"\"\n    var s = N / 2\n    while s\
    \ > 0 {\n        if s % 2 == 0 {\n            res += \"1\"\n        } else {\n\
    \            res += \"0\"\n        }\n        s /= 2\n    }\n    return res",
  '    return String(binarySum(from: N))', "    \n    if N == 0 {\n        return\
    \ \"\"\n    }\n    let lower = min(N)\n    let upper = max(N)\n    var result\
    \ = \"\"\n    for d in lower..<upper {\n        let num = pow(2.0, Double(d))\
    \ - 1.0\n        let str = String(format: \"%0.4f\", num)\n        result = result\
    \ + str\n    }\n    return result", "    var sum = \"\"\n    var n = N\n    var\
    \ i = 0\n    var digit = 0\n    repeat {\n        digit = n%2\n        sum +=\
    \ String(digit)\n        n = n/2\n        if n == 0 {\n            break\n   \
    \     }\n        i += 1\n    } while true\n    return sum", "  var sum = 0\n \
    \ for n in N {\n    sum += pow(2, n)\n  }\n  return String(sum)", "    let result\
    \ = \"\"\n    \n    if N <= 0 {\n        return \"\"\n    }\n    \n    let countDigits\
    \ = (N / 100).floor()\n    let remain = N - countDigits * 100\n    \n    if remain\
    \ < 10 {\n        result += String(remain)\n    }\n    \n    while remain > 10\
    \ {\n        result += String(remain%10) + String(10)\n        remain = remain.truncatingRemainder(dividingBy:\
    \ 10)\n    }\n    \n    return result", '    return String(bin(N))', "  if N ==\
    \ 0 {\n    return \"0\"\n  }\n  let result = \"\"\n  for i in 0 ..< N { // N is\
    \ less than 1000\n    if i % 2 == 0 {\n      result = result + \"1\"\n    } else\
    \ {\n      result = result + \"0\"\n    }\n  }\n  return result", '    return
    string(binarySum(N))', "    // write your code in JavaScript (Node.js 8.9.4)\n\
    \    var binNum = Array(1000).fill(\"\")\n    var ans = \"\"\n    var total =\
    \ 0\n    \n    for i in 0..<N {\n        total += i % 2\n        binNum[total\
    \ / 2] = String(i % 2)\n        total = total % 2\n    }\n\n    for i in 0..<N\
    \ {\n        ans += binNum[i]\n    }\n    return ans", '    return String(bin(N:
    N))', "    if N < 0 {\n        print(\"Invalid input\")\n        return \"\"\n\
    \    }\n    var result = \"\"\n    var N = N\n    var sum = 0\n    for _ in 0\
    \ ..< N {\n        let remainder = N % 2\n        sum += remainder\n        N\
    \ = N / 2\n    }\n    if N == 1 {\n        result = String()\n    }\n    for _\
    \ in 0..<sum {\n        let n = String()\n        if sum > 0 {\n            n\
    \ = String(format: \"%d\\r\\n\", sum % 2)\n        }\n        if result != \"\"\
    \ {\n            result += n\n        }\n        sum += 2\n    }\n    return result",
  "  let b = String(repeating: \" \", count: 2 * N).append(String(repeating: \"1\"\
    , count: N))\n  return String(b.prefix(b.count - 2))", "    let s = \"\"\n   \
    \ var remainder = 0\n    var temp = 0\n\n    if N < 0 {\n        return \"0\"\n\
    \    }\n\n    while N > 0 {\n        temp = (N % 2) / 2\n        remainder = N\
    \ % 2\n        s = String(temp) + String(remainder) + String(s)\n        N = N/2\n\
    \    }\n\n    return s", "    if N < 1 {\n        return \"0\"\n    }\n    var\
    \ remainder = N\n    var result = \"\"\n    while remainder > 0 {\n        let\
    \ digit = remainder % 10\n        result = String(digit) + result\n        remainder\
    \ = (remainder - digit) / 10\n    }\n    return result", "    let binaryString\
    \ = [String]()\n\n    if N < 0 {\n        return \"\"\n    }\n\n    // The largest\
    \ power of 2 <= N <= 2^32 - 1. We start counting from the middle of 2^32 and use\
    \ binary division to\n    // get the right digits to append to the end of binaryString.\n\
    \    let binaryStringLength = N\n\n    for powerOf2Index in (Int(log2(binaryStringLength))\
    \ + 1 ..< Int(log2(binaryStringLength))).reversed() {\n        let powerOf2 =\
    \ 1 << powerOf2Index\n        var binaryStringIndex = (powerOf2Index + 1) * 32\n\
    \        for binary in stride(from: binaryStringIndex, through: 0, by: -1) {\n\
    \            let binaryDigit = N & (1<<binary)\n            if binaryDigit ==\
    \ 0 {\n                break\n            }\n            binaryString.append(String(binaryDigit))\n\
    \            binaryStringIndex += 32\n        }\n    }\n\n    return binaryString.reversed().joined()",
  '    return solve(nums: Array(1...N), prefix: "")', "    if N == 0 {\n        return\
    \ \"0\"\n    }\n    var total = 0\n    var currentDigit = 0\n    for _ in 0..<N\
    \ {\n        total += currentDigit\n        currentDigit = Int(N % 2)\n      \
    \  N = N / 2\n    }\n    total += currentDigit\n    return String(total)", " \
    \ // Your code here\n  return \"\"", "  if N == 0 {\n    return \"0\"\n  }\n \
    \ var ans = \"\"\n  for _ in 0 ..< ceil(log2(N)) {\n    var num = 0\n    for _\
    \ in 0 ..< N {\n      num <<= 1\n      num |= N % 2\n      N /= 2\n    }\n   \
    \ ans = bin(Int(num))[num..<num.count] + ans\n  }\n  return ans", '    return
    solve(&N, 1)', "  // Your code here\n  return \"\"", '    return String(BinaryArrayToString(BinaryArray(N)))',
  "    let result = \"\"\n\n    for _ in 0 ..< N {\n        var sum = 0\n\n      \
    \  for _ in 0 ..< N {\n            sum += Int(pow(Double(N), Double(_)))\n   \
    \     }\n\n        let _ = String((sum % 2) == 0 ? \"1\" : \"0\")\n        result\
    \ += String(sum % 2)\n    }\n\n    return result", "    precondition(N > 0, \"\
    N must be positive\")\n    precondition(N < 10000, \"N must be smaller than 10,000\"\
    )\n\n    var total = 0\n    var result = \"\"\n\n    for i in 1...N {\n      \
    \  let remainder: UInt32 = UInt32(i) % (N * 2) - 1\n        total += UInt32(remainder)\n\
    \        let bin: String = String(format: \"%08x\", remainder)\n\n        result\
    \ += String(repeating: bin, count: 8)\n    }\n\n    return String(format: \"%0*d\"\
    , 8, total)", "    var result: String = \"\"\n    if N < 0 {\n        let errorMsg\
    \ = \"N should be non-negative\"\n        XCTFail(errorMsg)\n    }\n\n    for\
    \ _ in 0..<(N / 2) {\n        let value = N % 2 == 0 ? 1 : 2\n        result =\
    \ String(result) + String(value)\n        N = N / 2\n    }\n\n    if N > 0 {\n\
    \        result = String(result) + String(N)\n    }\n    return result", "   \
    \ var result = \"\"\n    var sum = 0\n    var remain = N\n    while remain > 0\
    \ {\n        let n = remain%2\n        remain = remain/2\n        sum += n\n \
    \   }\n    if sum > 0 {\n        result = String(repeating: \"1\", count: sum)\n\
    \    }\n    return result", "    \n    // your code here\n    let res = \"0\"\n\
    \    for i in 1 ..< N {\n        let tmp = String(i%2)\n        res += String(tmp.dropLast())\n\
    \    }\n    return res", "  var res = \"\"\n\n  for n in 1...N {\n    if n >=\
    \ 10 {\n      res += String(format: \"%i\", n)\n    } else {\n      res += String(format:\
    \ \"0%i\", n)\n    }\n  }\n\n  return res", "    var sum = \"\"\n    let digits\
    \ = \"010111\"\n    for i in 0..<(10 - N) {\n        sum += digits[N % 2]\n  \
    \      N = N / 2\n    }\n    sum += digits[N]\n    return sum", "\treturn solution(N,\
    \ 0)", "    if N == 0 || N == 1 {\n        return \"1\"\n    }\n    var res =\
    \ \"\"\n    if N % 2 == 0 {\n        res += solve(N / 2)\n    }\n    \n    if\
    \ N > 1 {\n        res += solve(N / 2)\n    }\n    return res", "    var result:\
    \ String = \"\"\n    for _ in 1...N {\n        if N % 2 == 0 {\n            result\
    \ += String(1)\n        }\n        N /= 2\n    }\n    return result", '    return
    String(sumOfDigits(N))', "    var ans = \"\"\n    if N == 0 {\n        return\
    \ \"\"\n    }\n    let power: Int = log2(N) + 1\n    var sum = 0\n    for _ in\
    \ 0..power {\n        sum += (N & 1)\n        N >>= 1\n    }\n    ans = String(sum)\n\
    \    return ans", "\treturn solution(N, \"\", \"\")", "    var result = \"\"\n\
    \    var sum = 0\n    for _ in 0..<N {\n        if sum > 9 {\n            result\
    \ = result + \"0\"\n        } else {\n            result = result + \"1\"\n  \
    \      }\n        sum += pow(2.0, Double(N - 1))\n    }\n    return result", " \
    \   var result = \"0\"\n    for _ in 0..<N {\n        if result == \"0\", result\
    \ += \"1{\", result += \"0\"\n        else result += \"0\", result += \"1\"\n\
    \    }\n    if result == \"0\", result += \"1{\", result += \"0\"\n    else result\
    \ += \"0\", result += \"1\"\n    return result", "    let digits = String(N).characters\n\
    \    let binaryString = digits.reduce(\"\") { (result: String, b: Character) ->\
    \ String in\n        if b == \"1\" {\n            return result + \"0\"\n    \
    \    } else if b == \"0\" {\n            return result + \"1\"\n        } else\
    \ {\n            return result + b\n        }\n    }\n    return binaryString",
  "    if N < 0 {\n        return \"\"\n    }\n    let ones = StringBuilder(String())\n\
    \    var n = N\n    var sum = \"\"\n    for _ in 0..<(n.truncatingRemainder(2))\
    \ { //binary division\n        ones.append(\"1\")\n        n = (n / 2).toInt()\n\
    \    }\n    for _ in 1..<n { //binary string conversion\n        sum += ones\n\
    \    }\n    return sum", "    guard N <= 10000 else {\n        return \"0\"\n\
    \    }\n    var result = \"\"\n    while N > 0 {\n        let remainder = N %\
    \ 2\n        result += \"1\"\n        N = N / 2\n    }\n    return result", " \
    \   let binary = BinarySearch(N: N)\n    return binary\n        .map({ \"0\" +\
    \ String($0).dropLast() })\n        .joined()", "    guard N > 0 else { return\
    \ \"\" }\n    \n    var res = \"\"\n    \n    var cur = 0\n    \n    var lastBit\
    \ = Bool(truncatingBitPattern: 0)\n    \n    let bits = N.toString(radix: 2).characters\n\
    \    \n    for c in bits {\n        cur += lastBit\n        lastBit = lastBit\
    \ && (c != \"0\") \n        \n        res += String(format: \"%01d\", cur)\n \
    \       cur = cur >> 1\n    }\n    \n    return res", "    guard N >= 0 else {\
    \ return \"0\" }\n    \n    var binary = \"\"\n    for _ in 0..<N {\n        binary\
    \ = String(binary, radix: 2) + String(N % 2, radix: 2)\n        N = N / 2\n  \
    \  }\n    return binary", "    var res = 0\n    var i = 0\n    while N != 0 {\n\
    \        if N % 2 == 1 {\n            res = res * 2 + N % 2\n        }\n     \
    \   N = N >> 1\n        i += 1\n    }\n    var s = \"\"\n    var x = 0\n    for\
    \ x = i; x < i; x++ {\n        s = s + String(x)\n    }\n    return s", '    return
    solve2(N).filter({ $0 != "0" })', "    var result: String = \"\"\n    var remain:\
    \ Int = 0\n    for _ in 0 ..< N {\n        remain = N % 2\n        result += \"\
    1\"\n        N = N / 2\n    }\n    return result.uppercased()", "    if N < 10\
    \ {\n        return String(N)\n    }\n    let binary = createBinary(N).reversed()\n\
    \    return solve(_: binary)", "    let num = \"1\" + \"0\".repeat(Int(N)/2)\n\
    \    let result = String(num[..<N].map { String($0) })\n    return result.dropLast()",
  "    let s = \"\"\n    var lastDigit = 0\n    for i in 1..<N {\n        let digit\
    \ = i / 2\n        s = digit.description + s\n        i -= digit\n        lastDigit\
    \ = digit\n    }\n    let binary = lastDigit == 0 ? \"0\" : s\n    return binary",
  "    var result = \"\"\n\n    let mut sum = 0\n    for _ in 0..<N {\n        sum\
    \ += N % 2\n        N /= 2\n    }\n    while N > 0 {\n        sum += N % 2\n \
    \       N /= 2\n    }\n\n    if sum > 0 {\n        result += \"1\"\n        while\
    \ sum > 0 {\n            result += \"0\"\n            sum /= 2\n        }\n  \
    \  } else {\n        result += \"0\"\n        while sum < 0 {\n            result\
    \ += \"1\"\n            sum /= 2\n        }\n    }\n\n    return result", "  \
    \  if N < 0 {\n        return \"0\"\n    }\n    if N == 0 {\n        return \"\
    1\"\n    }\n    return String(\n        UInt64((N.toString(radix: 16)) as NSString).reversed().map{$0.value}.joined()\n\
    \    )", "    precondition(N >= 0)\n    precondition(N < 10000)\n    if N == 0\
    \ {\n        return \"0\"\n    }\n    var digits = String()\n    var carry = 0\n\
    \    for _ in 0 ..< N {\n        let digit = pow(2.0, Double(digits.count) - 1)\n\
    \        let totalDigit = carry + digit\n        if totalDigit > 0 {\n       \
    \     digits += \"1\"\n            carry = totalDigit - 1\n        } else {\n\
    \            digits += \"0\"\n            carry = 0\n        }\n    }\n    if\
    \ carry > 0 {\n        digits += \"1\"\n    }\n    return digits", "    var result:\
    \ String = \"\"\n    let base = 2\n    let limit = pow(base, N) + 1\n    let digits\
    \ = String(repeating: 0, count: limit)\n    guard N == 0 else {\n        digits\
    \ = \"0\"\n    }\n    for n in 1...limit {\n        let temp = digits[Int(n) -\
    \ 1]\n        digits[Int(n)] = \"1\"\n        if temp == \"0\" && N % n != 0 {\n\
    \            digits[Int(n) - 1] = \"0\"\n        }\n        if temp == \"1\" &&\
    \ N % n == 0 {\n            digits[Int(n)] = \"0\"\n        }\n        result\
    \ += \"0\" + temp\n    }\n    result.removeLast()\n    return result", "    if\
    \ N < 10000 {\n        return String(N)\n    } else {\n        let num: Int =\
    \ Int(log2(N))\n        return solve(num).prefix(Int(log2(N))).append(solve(N\
    \ / pow(2,(num+1)))) as String\n    }", "    if N == 0 {\n        return \"0\"\
    \n    }\n    if N < 10 {\n        return \"0\"\n    }\n    var result = \"\"\n\
    \    var power = 0\n    var digit = 0\n    while N > 0 {\n        digit = N %\
    \ 10\n        result += String(digit)\n        N /= 10\n        if power == 0\
    \ {\n            power = digit\n        } else {\n            power += digit\n\
    \        }\n    }\n    while power > 0 {\n        result += \"1\"\n        power\
    \ -= 1\n    }\n    return result", "    var result = \"\"\n    var binary = \"\
    \"\n    var resultArray = BinaryToString(N) ?? \"\"\n\n    for i in 0...resultArray.count\
    \ {\n        binary += String(resultArray[i])\n        if i > 0 {\n          \
    \  result += binary\n            binary = \"\"\n        }\n    }\n    return result",
  "    let a = Array(1...N)\n    let b = a.map({ String($0, radix: 2) })\n    return\
    \ b.reduce(\"\", +)", "    if N < 0 {\n        return \"0\";\n    }\n    var ans\
    \ = String(N);\n    if N > 1 {\n        ans = \"1\" + solve(Int(N / 2)) + String(N\
    \ % 2);\n    }\n    return ans;", "    let binary = String(repeating: \"0\", count:\
    \ 10)\n\n    for i in 0..<N {\n        let result = binary.reduce(\"\", combine:\
    \ {$0 + String($1) + String($2)})\n        binary = String(repeating: \"0\", count:\
    \ 9 - result.count)\n        binary = String(repeating: \"1\", count: result.count)\
    \ + binary\n    }\n\n    return String(binary)", "    // Your code here\n    var\
    \ result: String = \"\"\n    var remainder: Int = N\n    for _ in 0..<(9 - 1)\
    \ {\n        var remainderToSum = remainder\n        remainderToSum %= 2\n   \
    \     remainder = remainderToSum / 2\n        if remainder == 0 {\n          \
    \  result += \"1\"\n        } else {\n            result += \"0\"\n        }\n\
    \    }\n    return result", "    let base = String(N) \n    var binary = \"\"\n\
    \    \n    for i in base{\n        binary += String(i)\n    }\n    \n    return\
    \ binary", '    return solve(N: N, base: 2)', "    guard N <= 10000 else {\n \
    \       return \"\"\n    }\n    let arr = Array(0..<N).map { Int8(String($0))\
    \ }\n    let binary = arr.map { String($0, radix: 2) }.joined()\n    return String(arr[arr.count\
    \ - 1], radix: 2)", '    return ""', "    if N < 1 {\n        return \"\"\n  \
    \  }\n    var sum: Int = 0\n    for _ in 0..<N {\n        sum += N % 2\n     \
    \   N = N / 2\n    }\n    return String(sum)", "    guard N >= 0 && N <= 10000\
    \ else { return \"\" }\n    return String(N).padToString(2)", "    let result\
    \ = Array(0..<N).reduce(\"\") { (result, i) in\n        guard i % 2 == 0 else\
    \ {\n            return result + String(Int($0) % 2)\n        }\n        return\
    \ result + String(Int($0) / 2)\n    }\n    return result.isEmpty ? \"1\" : result",
  "    if N < 1 {\n        return \"\"\n    }\n    return binarySumToString(N)", " \
    \   let s = \"\"\n    for _ in 0..<N {\n        s += \"1\"\n    }\n    return\
    \ s", "    // Write your code here\n    var result = 0\n    if N > 0 {\n     \
    \   result = N % 2\n        N = (N - 1) / 2\n    }\n    if N != 0 {\n        result\
    \ = result + solve(N)\n    }\n    if result < 10 {\n        return String(result)\n\
    \    } else {\n        return String(\"0\") + String(result)\n    }", "    var\
    \ sum: String = \"\"\n    var tempString = \"\"\n    var temp: Int = 0\n    \n\
    \    for _ in 0..<N {\n        temp = N % 2\n        N = N / 2\n        sum +=\
    \ String(format: \"%0*d\", 1, Int(temp))\n        tempString = String(format:\
    \ \"%0*d\", 1, Int(temp))\n    }\n    \n    return sum + tempString", "\tlet number\
    \ = BinaryToString(N)\n\tlet result = number\n\tlet digits = String(result[..<result.index(before:\
    \ result.endIndex, offsetBy: -2) - 1])\n\treturn digits", "    // write your code\
    \ in Python 3.7\n    if N < 0 {\n        return \"\"\n    }\n    var ans = \"\"\
    \n    var N: Int = N\n    var currentBinary = 0\n    repeat {\n        if N %\
    \ 2 == 0 {\n            currentBinary = currentBinary + N / 2\n            N =\
    \ N / 2\n        } else {\n            currentBinary = currentBinary + (N / 2)\n\
    \            N = N / 2\n        }\n        if N == 0 {\n            break\n  \
    \      }\n        ans = String(currentBinary) + String(ans)\n    }\n    return\
    \ ans", "    var result: String = \"\"\n    for n in 0..<N {\n        var temp\
    \ = n\n        var tempResult: String = \"\"\n        var bit = 1\n        for\
    \ _ in 0..<8 {\n            if temp&bit == 1 {\n                tempResult = \"\
    1\" + tempResult\n            } else {\n                tempResult = \"0\" + tempResult\n\
    \            }\n            bit = bit << 1\n        }\n        result = tempResult\
    \ + result\n    }\n    return result", "    var res = \"0\"\n    for i in 1...N\
    \ {\n        if i % 2 == 1 {\n            res = res + String(format: \"%i\", i).reversed()\n\
    \        } else {\n            res = res + String(format: \"%i\", i)\n       \
    \ }\n    }\n    return res", '    return String(format: "%0*d", N, N).reversed().reduce("")
    { $0 + String($1) }']
stop_tokens:
- "\n}"
