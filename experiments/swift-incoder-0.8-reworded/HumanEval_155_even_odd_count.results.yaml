language: swift
name: HumanEval_155_even_odd_count
results:
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even: Int = 0\n    var odd: Int = 0\n    for num\
    \ > 0 {\n        num /= 10\n        if num % 2 == 0 {\n            even++\n  \
    \      } else {\n            odd++\n        }\n    }\n    return (even, odd)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp6nmij003.swift:11:13: error: expected 'in' after for-each pattern\n\
    \    for num > 0 {\n            ^\n/tmp/tmp6nmij003.swift:11:13: error: unary\
    \ operator cannot be separated from its operand\n    for num > 0 {\n         \
    \   ^~\n             \n/tmp/tmp6nmij003.swift:11:13: error: '>' is not a prefix\
    \ unary operator\n    for num > 0 {\n            ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    if num\
    \ < 0 {\n        evenCount = abs(num)\n        oddCount = evenCount\n    } else\
    \ {\n        for num in String(num).characters {\n            if num % 2 == 0\
    \ {\n                evenCount += 1\n            } else {\n                oddCount\
    \ += 1\n            }\n        }\n    }\n    return (evenCount, oddCount)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp13zl2nnq.swift:15:32: error: 'characters' is unavailable: Please\
    \ use String directly\n        for num in String(num).characters {\n         \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp13zl2nnq.swift:16:16: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n            if num % 2 == 0 {\n           \
    \    ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    switch num {\n\
    \    case 0 ... 1:\n        even = 1\n        odd = 1\n    case 0 ... 3:\n   \
    \     even = 2\n        odd = 0\n    case 0 ... 5:\n        even = 3\n       \
    \ odd = 1\n    case 0 ... 7:\n        even = 4\n        odd = 0\n    case 0 ...\
    \ 9:\n        even = 5\n        odd = 2\n    case 0 ... 11:\n        even = 6\n\
    \        odd = 3\n    case 0 ... 13:\n        even = 7\n        odd = 4\n    case\
    \ 0 ... 15:\n        even = 8\n        odd = 5\n    case 0 ... 17:\n        even\
    \ = 9\n        odd = 6\n    case 0 ... 19:\n        even = 10\n        odd = 7\n\
    \    case 0 ... 21:\n        even = 11\n        odd = 8\n    case 0 ... 23:\n\
    \        even = 12\n        odd = 9\n    case 0 ... 25:\n        even = 13\n \
    \       odd = 10\n    case 0 ... 27:\n        even = 14\n        odd = 11\n  \
    \  case 0 ... 29:\n        even = 15\n        odd = 12\n    case 0 ... 31:\n \
    \       even = 16\n        odd = 13\n    case 0 ... 33:\n        even = 17\n \
    \       odd = 14\n    case 0 ... 35:\n        even = 18\n        odd = 15\n  \
    \  case 0 ... 37:\n        even = 19\n        odd = 16\n    case 0 ... 39:\n \
    \       even = 20\n        odd = 17\n    case 0 ... 41:\n        even = 21\n \
    \       odd = 18\n    case 0 ... 43:\n        even = 22\n        odd = 19\n  \
    \  case 0 ... 45:\n        even = 23\n        odd = 20\n    case 0 ... 47:\n \
    \       even = 24\n        odd = 21\n    case 0 ... 49:\n        even = 25\n \
    \       odd = 22\n    case 0 ... 51:\n        even = 26\n        odd = 23\n  \
    \  case 0 ... 53:\n        even = 27\n        odd = 24\n    case 0 ... 55:\n \
    \       even = 28\n        odd = 25\n    case 0 ... 57:\n        even = 29\n \
    \       odd = 26\n    case 0 ... 59:\n        even = 30\n        odd = 27\n  \
    \  case 0 ... 61:\n        even = 31\n        odd = 28\n    case 0 ... 63:\n \
    \       even = 32\n        odd = 29\n    case 0 ... 65:\n        even = 33\n \
    \       odd = 30\n    case 0 \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmps_4doavr.swift:111:11: error: expected ':' after 'case'\n    case\
    \ 0 \n          ^\n/tmp/tmps_4doavr.swift:134:41: error: expected '}' at end of\
    \ brace statement\nassert(even_odd_count(num: 0) == (1, 0))\n                \
    \                        ^\n/tmp/tmps_4doavr.swift:8:45: note: to match this opening\
    \ '{'\nfunc even_odd_count(num: Int) -> (Int, Int) {\n                       \
    \                     ^\n/tmp/tmps_4doavr.swift:11:5: error: switch must be exhaustive\n\
    \    switch num {\n    ^\n/tmp/tmps_4doavr.swift:11:5: note: do you want to add\
    \ a default clause?\n    switch num {\n    ^\n/tmp/tmps_4doavr.swift:115:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmps_4doavr.swift:9:9:\
    \ warning: variable 'even' was written to, but never read\n    var even = 0\n\
    \        ^\n/tmp/tmps_4doavr.swift:10:9: warning: variable 'odd' was written to,\
    \ but never read\n    var odd = 0\n        ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0, odd = 0, i : Int\n\n    if num < 0 {\n\
    \        num ^= num\n    }\n\n    for i = num; i != 0; i = i / 10 {\n        if\
    \ i % 2 != 0 {\n            odd++\n        } else {\n            even++\n    \
    \    }\n    }\n\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1,\
    \ 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpyaw8zo0m.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = num; i != 0; i = i / 10 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyaw8zo0m.swift:12:13: error: left side of mutating operator isn't mutable:\
    \ 'num' is a 'let' constant\n        num ^= num\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var odd = 1\n    var even = 1\n    var total = 0\n\
    \    var digit = 0\n    var evenDigit = 0\n    while num > 0 {\n        digit\
    \ = num % 10\n        total = total + digit\n        num = num / 10\n        if\
    \ digit % 2 == 0 {\n            even = even + 1\n            evenDigit = digit\n\
    \        } else {\n            odd = odd + digit\n        }\n    }\n\n    return\
    \ (odd, even)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp2i31bggv.swift:17:9: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n        num = num / 10\n        ^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n\n    for\
    \ remainder in num.quotientAndRemainder(dividingBy: 2) {\n        if remainder\
    \ == 0 {\n            break\n        }\n        evenCount += 1\n    }\n\n    for\
    \ remainder in num.quotientAndRemainder(dividingBy: 2) {\n        if remainder\
    \ == 1 {\n            break\n        }\n        oddCount += 1\n    }\n\n    return\
    \ (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpk0d5bwkh.swift:12:26: error: for-in loop requires '(quotient: Int,\
    \ remainder: Int)' to conform to 'Sequence'\n    for remainder in num.quotientAndRemainder(dividingBy:\
    \ 2) {\n                     ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpk0d5bwkh.swift:19:26:\
    \ error: for-in loop requires '(quotient: Int, remainder: Int)' to conform to\
    \ 'Sequence'\n    for remainder in num.quotientAndRemainder(dividingBy: 2) {\n\
    \                     ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0, odd = 0, remainder = num\n\n    while\
    \ remainder > 0 {\n        if remainder % 2 == 0 {\n            even++\n     \
    \   }\n        odd += 1\n        remainder = remainder / 2\n    }\n    return\
    \ (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp0sf056q7.swift:13:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            even++\n                ^~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = Int(0)\n    var odd = Int(0)\n    if num\
    \ < 0 {\n        return (0, num)\n    }\n    \n    if num >= 10 {\n        for\
    \ i = Int(10); i > 0; i-- {\n            if num % i == 0 {\n                even\
    \ = even + Int(1)\n            } else {\n                odd = odd + Int(1)\n\
    \            }\n        }\n        return (even, odd)\n    }\n    \n    if num\
    \ < 0 {\n        return (0, num)\n    }\n    \n    odd = num / 2\n    for i =\
    \ Int(10); i > 0; i-- {\n        if odd % i == 0 {\n            even = even +\
    \ Int(1)\n        } else {\n            odd = odd + Int(1)\n        }\n    }\n\
    \    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp08w5hq1g.swift:16:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for i = Int(10); i > 0; i-- {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp08w5hq1g.swift:31:5: error: C-style for statement has been removed in\
    \ Swift 3\n    for i = Int(10); i > 0; i-- {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n\tvar even, odd, count int\n\n\tfor i := 0; i < num; i++\
    \ {\n\t\tdigit, digit := num % 10, num / 10\n\t\tif digit == 0 {\n\t\t\tcount++\n\
    \t\t} else {\n\t\t\tif digit % 2 == 0 {\n\t\t\t\teven++\n\t\t\t} else {\n\t\t\t\
    \todd++\n\t\t\t}\n\t\t}\n\t\tnum = digit\n\t}\n\n\treturn (even, odd)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpmzhpwujr.swift:9:23: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n        var even, odd,\
    \ count int\n                             ^\n/tmp/tmpmzhpwujr.swift:9:23: note:\
    \ join the identifiers together\n        var even, odd, count int\n          \
    \             ~~~~~~^~~\n                       countint\n/tmp/tmpmzhpwujr.swift:9:23:\
    \ note: join the identifiers together with camel-case\n        var even, odd,\
    \ count int\n                       ~~~~~~^~~\n                       countInt\n\
    /tmp/tmpmzhpwujr.swift:11:9: error: expected type\n        for i := 0; i < num;\
    \ i++ {\n               ^\n                <#type#>\n/tmp/tmpmzhpwujr.swift:11:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < num; i++\
    \ {\n               ^\n/tmp/tmpmzhpwujr.swift:11:9: error: expected Sequence expression\
    \ for for-each loop\n        for i := 0; i < num; i++ {\n               ^\n/tmp/tmpmzhpwujr.swift:12:8:\
    \ error: consecutive statements on a line must be separated by ';'\n         \
    \       digit, digit := num % 10, num / 10\n                     ^\n         \
    \            ;\n/tmp/tmpmzhpwujr.swift:12:8: error: expected expression\n    \
    \            digit, digit := num % 10, num / 10\n                     ^\n/tmp/tmpmzhpwujr.swift:9:6:\
    \ error: type annotation missing in pattern\n        var even, odd, count int\n\
    \            ^\n/tmp/tmpmzhpwujr.swift:9:12: error: type annotation missing in\
    \ pattern\n        var even, odd, count int\n                  ^\n/tmp/tmpmzhpwujr.swift:9:17:\
    \ error: type annotation missing in pattern\n        var even, odd, count int\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num < 0 {\n        throwError(\"Negative argument\"\
    , num: num, error: 1)\n    }\n    var even = 0, odd = 1\n    for _ in 0..<num\
    \ {\n        let remainder = num % 10\n        if remainder % 2 == 0 {\n     \
    \       even = even * 10 + remainder\n        } else {\n            odd = odd\
    \ * 10 + remainder\n        }\n        num = num / 10\n    }\n    return (even,\
    \ odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7)\
    \ == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp9td1cyjh.swift:10:9: error: cannot find 'throwError' in scope\n\
    \        throwError(\"Negative argument\", num: num, error: 1)\n        ^~~~~~~~~~\n\
    /tmp/tmp9td1cyjh.swift:20:9: error: cannot assign to value: 'num' is a 'let' constant\n\
    \        num = num / 10\n        ^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n\n    for digit in\
    \ String(num).reverse() {\n        if Int(digit) % 2 == 0 {\n            even\
    \ += 1\n        } else {\n            odd += 1\n        }\n    }\n    return (even,\
    \ odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7)\
    \ == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpmn2hk5q4.swift:12:30: error: value of type 'String' has no member\
    \ 'reverse'\n    for digit in String(num).reverse() {\n                 ~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even: Int = 0\n    var odd: Int = 0\n    for num\
    \ >= 0 {\n        num /= 10\n        even++\n    }\n    for num != 0 {\n     \
    \   num /= 10\n        odd++\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp_yx59wjk.swift:11:13: error: expected 'in' after for-each pattern\n\
    \    for num >= 0 {\n            ^\n/tmp/tmp_yx59wjk.swift:11:13: error: unary\
    \ operator cannot be separated from its operand\n    for num >= 0 {\n        \
    \    ^ ~\n              \n/tmp/tmp_yx59wjk.swift:15:13: error: expected 'in' after\
    \ for-each pattern\n    for num != 0 {\n            ^\n/tmp/tmp_yx59wjk.swift:15:13:\
    \ error: unary operator cannot be separated from its operand\n    for num != 0\
    \ {\n            ^ ~\n              \n/tmp/tmp_yx59wjk.swift:11:13: error: '>='\
    \ is not a prefix unary operator\n    for num >= 0 {\n            ^\n/tmp/tmp_yx59wjk.swift:15:13:\
    \ error: '!=' is not a prefix unary operator\n    for num != 0 {\n           \
    \ ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even, odd: Int = 0\n    switch num {\n    case\
    \ 0: // case is required to cover negative numbers as well\n    case 1:\n    \
    \    even = 0\n        odd = 1\n    case 2:\n        even = 1\n        odd = 0\n\
    \    case 3:\n        even = 1\n        odd = 1\n    case 4:\n        even = 1\n\
    \        odd = 2\n    case 5:\n        even = 2\n        odd = 1\n    case 6:\n\
    \        even = 2\n        odd = 2\n    case 7:\n        even = 2\n        odd\
    \ = 3\n    case 8:\n        even = 3\n        odd = 1\n    case 9:\n        even\
    \ = 3\n        odd = 2\n    case 10:\n        even = 3\n        odd = 3\n    case\
    \ 11:\n        even = 4\n        odd = 1\n    case 12:\n        even = 4\n   \
    \     odd = 2\n    case 13:\n        even = 4\n        odd = 3\n    case 14:\n\
    \        even = 4\n        odd = 4\n    case 15:\n        even = 5\n        odd\
    \ = 1\n    case 16:\n        even = 5\n        odd = 2\n    case 17:\n       \
    \ even = 5\n        odd = 3\n    case 18:\n        even = 5\n        odd = 4\n\
    \    case 19:\n        even = 6\n        odd = 1\n    case 20:\n        even =\
    \ 6\n        odd = 2\n    case 21:\n        even = 6\n        odd = 3\n    case\
    \ 22:\n        even = 6\n        odd = 4\n    case 23:\n        even = 7\n   \
    \     odd = 1\n    case 24:\n        even = 7\n        odd = 2\n    case 25:\n\
    \        even = 7\n        odd = 3\n    case 26:\n        even = 7\n        odd\
    \ = 4\n    case 27:\n        even = 8\n        odd = 1\n    case 28:\n       \
    \ even = 8\n        odd = 2\n    case 29:\n        even = 8\n        odd = 3\n\
    \    case 30:\n        even = 8\n        odd = 4\n    case 31:\n        even =\
    \ 9\n        odd = 1\n    case 32:\n        even = 9\n        odd = 2\n    case\
    \ 33:\n        even = 9\n        odd = 3\n    case 34:\n        even = 9\n   \
    \     odd = 4\n    case 35:\n        even = 10\n        odd = 1\n    case 36:\n\
    \        even = 10\n        odd = 2\n    case 37:\n        even = 10\n       \
    \ odd = 3\n    case 38:\n        even = 10\n        odd = 4\n    case 39:\n  \
    \      even = 11\n        odd = 1\n    case 40:\n        even = 11\n        odd\
    \ = 2\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7)\
    \ == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpv9bu8jwt.swift:11:5: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n    case 0: // case is required to cover\
    \ negative numbers as well\n    ^~~~~~~\n            break\n/tmp/tmpv9bu8jwt.swift:155:41:\
    \ error: expected '}' at end of brace statement\nassert(even_odd_count(num: 0)\
    \ == (1, 0))\n                                        ^\n/tmp/tmpv9bu8jwt.swift:8:45:\
    \ note: to match this opening '{'\nfunc even_odd_count(num: Int) -> (Int, Int)\
    \ {\n                                            ^\n/tmp/tmpv9bu8jwt.swift:9:9:\
    \ error: type annotation missing in pattern\n    var even, odd: Int = 0\n    \
    \    ^\n/tmp/tmpv9bu8jwt.swift:10:5: error: switch must be exhaustive\n    switch\
    \ num {\n    ^\n/tmp/tmpv9bu8jwt.swift:10:5: note: do you want to add a default\
    \ clause?\n    switch num {\n    ^\n/tmp/tmpv9bu8jwt.swift:136:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0, odd = 1\n    for i in num {\n      \
    \  switch i % 10 {\n        case 0, 2, 4, 5, 7, 9, 11:\n            even++\n \
    \       case 1, 3, 5, 7, 9:\n            odd++\n        }\n    }\n    return (even,\
    \ odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7)\
    \ == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpxlkxaqjy.swift:10:14: error: for-in loop requires 'Int' to conform\
    \ to 'Sequence'\n    for i in num {\n             ^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return num.modPow(Int32(pow(2.0, Double(num.intValue))),\
    \ &Int32(pow(2.0, Double(num.intValue / Int32(pow(2.0, Double(num.intValue)))))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp3pvae6f4.swift:9:29: error: cannot find 'pow' in scope\n    return\
    \ num.modPow(Int32(pow(2.0, Double(num.intValue))), &Int32(pow(2.0, Double(num.intValue\
    \ / Int32(pow(2.0, Double(num.intValue)))))))\n                            ^~~\n\
    /tmp/tmp3pvae6f4.swift:9:69: error: cannot find 'pow' in scope\n    return num.modPow(Int32(pow(2.0,\
    \ Double(num.intValue))), &Int32(pow(2.0, Double(num.intValue / Int32(pow(2.0,\
    \ Double(num.intValue)))))))\n                                               \
    \                     ^~~\n/tmp/tmp3pvae6f4.swift:9:106: error: cannot find 'pow'\
    \ in scope\n    return num.modPow(Int32(pow(2.0, Double(num.intValue))), &Int32(pow(2.0,\
    \ Double(num.intValue / Int32(pow(2.0, Double(num.intValue)))))))\n          \
    \                                                                            \
    \                   ^~~\n/tmp/tmp3pvae6f4.swift:9:16: error: value of type 'Int'\
    \ has no member 'modPow'\n    return num.modPow(Int32(pow(2.0, Double(num.intValue))),\
    \ &Int32(pow(2.0, Double(num.intValue / Int32(pow(2.0, Double(num.intValue)))))))\n\
    \           ~~~ ^~~~~~\n/tmp/tmp3pvae6f4.swift:9:49: error: value of type 'Int'\
    \ has no member 'intValue'\n    return num.modPow(Int32(pow(2.0, Double(num.intValue))),\
    \ &Int32(pow(2.0, Double(num.intValue / Int32(pow(2.0, Double(num.intValue)))))))\n\
    \                                            ~~~ ^~~~~~~~\n/tmp/tmp3pvae6f4.swift:9:89:\
    \ error: value of type 'Int' has no member 'intValue'\n    return num.modPow(Int32(pow(2.0,\
    \ Double(num.intValue))), &Int32(pow(2.0, Double(num.intValue / Int32(pow(2.0,\
    \ Double(num.intValue)))))))\n                                               \
    \                                     ~~~ ^~~~~~~~\n/tmp/tmp3pvae6f4.swift:9:126:\
    \ error: value of type 'Int' has no member 'intValue'\n    return num.modPow(Int32(pow(2.0,\
    \ Double(num.intValue))), &Int32(pow(2.0, Double(num.intValue / Int32(pow(2.0,\
    \ Double(num.intValue)))))))\n                                               \
    \                                                                          ~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013829
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenDigits = 0\n    var oddDigits = 0\n    for\
    \ n in String(num).characters {\n        if n % 2 == 0 {\n            evenDigits\
    \ += 1\n        } else {\n            oddDigits += 1\n        }\n    }\n    return\
    \ (evenDigits, oddDigits)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp00qatbfi.swift:11:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for n in String(num).characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp00qatbfi.swift:12:12: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if n % 2 == 0 {\n           ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 1, odd = 1\n    var remainder: Int\n  \
    \  for _ in 0..<num {\n        remainder = num % 10\n        if remainder % 2\
    \ == 0 {\n            even++\n        } else {\n            odd++\n        }\n\
    \        num /= 10\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp5ps2d9qi.swift:14:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            even++\n                ^~\n/tmp/tmp5ps2d9qi.swift:16:16:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  odd++\n               ^~\n/tmp/tmp5ps2d9qi.swift:18:13: error: left side of\
    \ mutating operator isn't mutable: 'num' is a 'let' constant\n        num /= 10\n\
    \        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var power\
    \ = 1\n    var digit = 0\n    for digit in 0 ..< Int(log10(Double(num))) + 1 {\n\
    \        let power = pow(10, Double(digit))\n        let result = Double(num)\
    \ / power\n        if result % 2 != 0 {\n            oddCount += Int(result)\n\
    \        } else {\n            evenCount += Int(result)\n        }\n    }\n  \
    \  return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpw5i41aha.swift:13:28: error: cannot find 'log10' in scope\n   \
    \ for digit in 0 ..< Int(log10(Double(num))) + 1 {\n                         \
    \  ^~~~~\n/tmp/tmpw5i41aha.swift:14:21: error: cannot find 'pow' in scope\n  \
    \      let power = pow(10, Double(digit))\n                    ^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n  var even = 0, odd = 1\n  for _ in 0..<num.asDigit()\
    \ {\n    let digit = num % 10\n    if digit % 2 == 0 {\n      even += digit\n\
    \    } else {\n      odd *= digit\n    }\n    num /= 10\n  }\n  return even, odd\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpkyaqnl7j.swift:19:14: error: consecutive statements on a line must\
    \ be separated by ';'\n  return even, odd\n             ^\n             ;\n/tmp/tmpkyaqnl7j.swift:19:14:\
    \ error: expected expression\n  return even, odd\n             ^\n/tmp/tmpkyaqnl7j.swift:10:20:\
    \ error: value of type 'Int' has no member 'asDigit'\n  for _ in 0..<num.asDigit()\
    \ {\n               ~~~ ^~~~~~~\n/tmp/tmpkyaqnl7j.swift:19:10: error: cannot convert\
    \ return expression of type 'Int' to return type '(Int, Int)'\n  return even,\
    \ odd\n         ^~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (num % 2 == 0 ? 1 : 0, num % 2 == 1 ? 1 : 0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpg8ggyzh0/tmpg8ggyzh0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06d95a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06d929fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06d929f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06d929e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8ggyzh0                        0x000055a377cae3cd <unavailable> + 5069

    5    libc.so.6                          0x00002b06d9794460 __libc_start_main +
    245

    6    tmpg8ggyzh0                        0x000055a377cadf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 1, odd = 1\n    for n in num.quotientAndRemainder(dividingBy:\
    \ 2) {\n        even += n\n    }\n    for n in num.quotientAndRemainder(dividingBy:\
    \ 2) { odd += n }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpsyznev4j.swift:10:18: error: for-in loop requires '(quotient: Int,\
    \ remainder: Int)' to conform to 'Sequence'\n    for n in num.quotientAndRemainder(dividingBy:\
    \ 2) {\n             ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsyznev4j.swift:13:18:\
    \ error: for-in loop requires '(quotient: Int, remainder: Int)' to conform to\
    \ 'Sequence'\n    for n in num.quotientAndRemainder(dividingBy: 2) { odd += n\
    \ }\n             ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0, odd = 1\n    if num < 0 {\n        return\
    \ (-even, -odd)\n    }\n    var remainder = num\n    var numDigits = 0\n    while\
    \ remainder > 0 {\n        remainder = remainder % 10\n        even++\n      \
    \  remainder = (remainder / 10) % 10\n        odd++\n        remainder = (remainder\
    \ / 10) % 10\n        numDigits++\n    }\n    return (even, odd)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp7owv4b8u.swift:17:13: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        even++\n            ^~\n/tmp/tmp7owv4b8u.swift:19:12:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        odd++\n\
    \           ^~\n/tmp/tmp7owv4b8u.swift:21:18: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        numDigits++\n                 ^~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for number in String(num).characters\
    \ {\n        switch number {\n        case '0':\n            even++\n        case\
    \ '1':\n            odd++\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp2i9fn4_2.swift:13:14: error: single-quoted string literal found,\
    \ use '\"'\n        case '0':\n             ^~~\n             \"0\"\n/tmp/tmp2i9fn4_2.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case '1':\n   \
    \          ^~~\n             \"1\"\n/tmp/tmp2i9fn4_2.swift:11:31: error: 'characters'\
    \ is unavailable: Please use String directly\n    for number in String(num).characters\
    \ {\n                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2i9fn4_2.swift:14:17: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            even++\n                ^~\n/tmp/tmp2i9fn4_2.swift:16:16:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  odd++\n               ^~\n/tmp/tmp2i9fn4_2.swift:12:9: error: switch must be\
    \ exhaustive\n        switch number {\n        ^\n/tmp/tmp2i9fn4_2.swift:12:9:\
    \ note: do you want to add a default clause?\n        switch number {\n      \
    \  ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenDigits = 0, oddDigits = 0\n    for x in num\
    \ {\n        if x % 2 == 0 {\n            evenDigits++\n        } else {\n   \
    \         oddDigits++\n        }\n    }\n    return (evenDigits, oddDigits)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmplkiwk_7p.swift:10:14: error: for-in loop requires 'Int' to conform\
    \ to 'Sequence'\n    for x in num {\n             ^~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var oddDigits = 0\n    var evenDigits = 0\n    if\
    \ num < 0 {\n        num *= -1\n    }\n    \n    for _ in 0..<(Int(log2(num))+1){\n\
    \        let digit = num % 10\n        num /= 10\n        \n        if digit >\
    \ 0 {\n            evenDigits++\n        } else {\n            oddDigits++\n \
    \       }\n    }\n    \n    return (evenDigits, oddDigits)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmppshe7afo.swift:12:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num *= -1\n        ~~~ ^\n/tmp/tmppshe7afo.swift:15:23:\
    \ error: cannot find 'log2' in scope\n    for _ in 0..<(Int(log2(num))+1){\n \
    \                     ^~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var nStr\
    \ = \"\"\n    \n    guard num > 0 else { return (0, 0) }\n    \n    for i in 0\
    \ ..< Int(floor(log2(Double(num)))) + 1 {\n        guard num % 2 == 0 else { continue\
    \ }\n        evenCount += 1\n    }\n    \n    for i in 0 ..< Int(floor(log2(Double(num))))\
    \ + 1 {\n        guard num % 2 != 0 else { continue }\n        oddCount += 1\n\
    \    }\n    \n    nStr = String(num)\n    \n    return (evenCount, oddCount)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp_cjgjwc3.swift:15:24: error: cannot find 'floor' in scope\n   \
    \ for i in 0 ..< Int(floor(log2(Double(num)))) + 1 {\n                       ^~~~~\n\
    /tmp/tmp_cjgjwc3.swift:15:30: error: cannot find 'log2' in scope\n    for i in\
    \ 0 ..< Int(floor(log2(Double(num)))) + 1 {\n                             ^~~~\n\
    /tmp/tmp_cjgjwc3.swift:20:24: error: cannot find 'floor' in scope\n    for i in\
    \ 0 ..< Int(floor(log2(Double(num)))) + 1 {\n                       ^~~~~\n/tmp/tmp_cjgjwc3.swift:20:30:\
    \ error: cannot find 'log2' in scope\n    for i in 0 ..< Int(floor(log2(Double(num))))\
    \ + 1 {\n                             ^~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenDigit = 0\n    var oddDigit = 0\n    for n\
    \ in num.toString() {\n        switch n {\n        case \"1\":\n            evenDigit\
    \ += 1\n        case \"0\":\n            oddDigit += 1\n        default:\n   \
    \         break\n        }\n    }\n    return (evenDigit, oddDigit)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpq_13xto0.swift:11:18: error: value of type 'Int' has no member\
    \ 'toString'\n    for n in num.toString() {\n             ~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for x in num {\n\
    \        if x % 2 == 0 {\n            even += 1\n        } else {\n          \
    \  odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpfq2frt38.swift:11:14: error: for-in loop requires 'Int' to conform\
    \ to 'Sequence'\n    for x in num {\n             ^~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let numInt = Int(num)\n    var evenCount = 0\n   \
    \ var oddCount = 0\n    if numInt <= 0 {\n        return (0, 0)\n    }\n    var\
    \ dividend = 1\n    \n    for dividend <= numInt {\n        if numInt % dividend\
    \ == 0 {\n            evenCount += 1\n        } else {\n            oddCount +=\
    \ 1\n        }\n    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp56dtaob0.swift:17:18: error: expected 'in' after for-each pattern\n\
    \    for dividend <= numInt {\n                 ^\n/tmp/tmp56dtaob0.swift:17:18:\
    \ error: unary operator cannot be separated from its operand\n    for dividend\
    \ <= numInt {\n                 ^ ~\n                   \n/tmp/tmp56dtaob0.swift:17:18:\
    \ error: '<=' is not a prefix unary operator\n    for dividend <= numInt {\n \
    \                ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even, odd = 0, 1\n    for n in num.toString()\
    \ {\n        let intDigit = Int(n)!\n        if intDigit % 2 == 0 {\n        \
    \    even += intDigit\n        } else {\n            odd += intDigit\n       \
    \ }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1,\
    \ 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpv9lzo8jh.swift:9:24: error: expected pattern\n    var even, odd\
    \ = 0, 1\n                       ^\n/tmp/tmpv9lzo8jh.swift:9:9: error: type annotation\
    \ missing in pattern\n    var even, odd = 0, 1\n        ^\n/tmp/tmpv9lzo8jh.swift:10:18:\
    \ error: value of type 'Int' has no member 'toString'\n    for n in num.toString()\
    \ {\n             ~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0, odd = 0, i = 0\n    while i < num {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n        i += 1\n    }\n    return (even, odd)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp0693rqy5.swift:12:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            even++\n                ^~\n/tmp/tmp0693rqy5.swift:14:16:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  odd++\n               ^~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num < 0 {\n        return (0,0)\n    }\n    var\
    \ evenCount = 0\n    var oddCount = 0\n    while num > 0 {\n        if num%2 ==\
    \ 0 {\n            evenCount += 1\n        } else {\n            oddCount += 1\n\
    \        }\n        num /= 10\n    }\n    return (evenCount, oddCount)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpqq_lrmlz.swift:20:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num /= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var numStr\
    \ = String(num)\n    for char in numStr {\n        switch char {\n        case\
    \ \"0\":\n            evenCount++\n        case \"1\":\n            oddCount++\n\
    \        default:\n            throw(ArgumentError.noMoreZero())\n        }\n\
    \    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1,\
    \ 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmppsc_kluf.swift:15:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            evenCount++\n                     ^~\n/tmp/tmppsc_kluf.swift:17:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  oddCount++\n                    ^~\n/tmp/tmppsc_kluf.swift:19:19: error: cannot\
    \ find 'ArgumentError' in scope\n            throw(ArgumentError.noMoreZero())\n\
    \                  ^~~~~~~~~~~~~\n/tmp/tmppsc_kluf.swift:19:13: error: error is\
    \ not handled because the enclosing function is not declared 'throws'\n      \
    \      throw(ArgumentError.noMoreZero())\n            ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0, odd = 0, i = 0\n    for x in num {\n\
    \        if x%2 == 0 {\n            even += x\n        } else {\n            odd\
    \ += x\n        }\n        i += 1\n    }\n    return even, odd\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpct8j16a5.swift:18:16: error: consecutive statements on a line must\
    \ be separated by ';'\n    return even, odd\n               ^\n              \
    \ ;\n/tmp/tmpct8j16a5.swift:18:16: error: expected expression\n    return even,\
    \ odd\n               ^\n/tmp/tmpct8j16a5.swift:10:14: error: for-in loop requires\
    \ 'Int' to conform to 'Sequence'\n    for x in num {\n             ^~~\n/tmp/tmpct8j16a5.swift:18:12:\
    \ error: cannot convert return expression of type 'Int' to return type '(Int,\
    \ Int)'\n    return even, odd\n           ^~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n\n    if\
    \ num < 0 {\n        return (0, 0)\n    }\n\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            evenCount++\n        } else {\n            oddCount++\n\
    \        }\n        num /= 10\n    }\n\n    return (evenCount, oddCount)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp4l46myb0.swift:18:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            evenCount++\n                     ^~\n/tmp/tmp4l46myb0.swift:20:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  oddCount++\n                    ^~\n/tmp/tmp4l46myb0.swift:22:13: error: left\
    \ side of mutating operator isn't mutable: 'num' is a 'let' constant\n       \
    \ num /= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num < 0 {\n        return (-1, 0)\n    }\n\n  \
    \  var (even, odd) = divrem(num, 10)\n    if even == 0 {\n        return (odd,\
    \ odd)\n    }\n    return (even, odd - 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp4fyti7yb.swift:13:23: error: cannot find 'divrem' in scope\n  \
    \  var (even, odd) = divrem(num, 10)\n                      ^~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num == 0 || num == 1 {\n        return (0, 0)\n\
    \    }\n    \n    // Count the number of even digits.\n    var even: Int = 0\n\
    \    for _ in 0..<num / 2 {\n        even += 1\n    }\n    \n    // Count the\
    \ number of odd digits.\n    var odd: Int = 0\n    for _ in num.stride(through:\
    \ 0, by: -1) {\n        odd += 1\n    }\n    \n    return (even, odd)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmps0jkwx87.swift:21:18: error: value of type 'Int' has no member\
    \ 'stride'\n    for _ in num.stride(through: 0, by: -1) {\n             ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let zero = num == 0\n    let evenDigits = (num / 10).rounded(.towardZero)\n\
    \    let oddDigits = (num - evenDigits * 10).rounded(.towardZero)\n    return\
    \ (evenDigits, oddDigits) // the tuple has even and odd digits, therefore odd\
    \ is always larger than even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpgoum3dyy.swift:10:27: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Float16'\n    let evenDigits = (num / 10).rounded(.towardZero)\n\
    \                      ~~~ ^ ~~\n/tmp/tmpgoum3dyy.swift:10:27: note: overloads\
    \ for '/' exist with these partially matching parameter lists: (Double, Double),\
    \ (Float, Float), (Float16, Float16), (Float80, Float80)\n    let evenDigits =\
    \ (num / 10).rounded(.towardZero)\n                          ^\n/tmp/tmpgoum3dyy.swift:11:54:\
    \ error: cannot infer contextual base in reference to member 'towardZero'\n  \
    \  let oddDigits = (num - evenDigits * 10).rounded(.towardZero)\n            \
    \                                        ~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenNum = 0\n    var oddNum = 0\n    var i = num\n\
    \    while i > 0 {\n        i = i / 10\n        evenNum += 1\n    }\n    i = num\n\
    \    while i > 0 {\n        i = i / 10\n        oddNum += 1\n    }\n    return\
    \ (evenNum, oddNum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpn7xjdryu/tmpn7xjdryu.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad84f027c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad84ed1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad84ed1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad84ed1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn7xjdryu                        0x00005582ec2d5304 <unavailable> + 4868

    5    libc.so.6                          0x00002ad84f213460 __libc_start_main +
    245

    6    tmpn7xjdryu                        0x00005582ec2d4f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    guard\
    \ num != 0 else { return (evenCount, oddCount) }\n    let string = \"\\(num)\"\
    .stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())\n\
    \    guard let str = string else { return (evenCount, oddCount) }\n    for i in\
    \ 0..<str.count {\n        let digit = Int(str[i])\n        if digit % 2 == 0\
    \ {\n            evenCount += 1\n        } else {\n            oddCount += 1\n\
    \        }\n    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp574uj_l9.swift:12:59: error: cannot find 'NSCharacterSet' in scope\n\
    \    let string = \"\\(num)\".stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())\n\
    \                                                          ^~~~~~~~~~~~~~\n/tmp/tmp574uj_l9.swift:12:27:\
    \ error: value of type 'String' has no member 'stringByTrimmingCharactersInSet'\n\
    \    let string = \"\\(num)\".stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())\n\
    \                 ~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let result = (num as NSString).componentsSeparatedByString(\"\
    .\").map{ Int($0) }\n    guard result.count > 0 else {\n        return result\n\
    \    }\n    let even = result.filter{ $0 % 2 == 0 }.count\n    let odd = result.filter{\
    \ $0 % 2 != 0 }.count\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp4rtutnb6.swift:9:26: error: cannot find type 'NSString' in scope\n\
    \    let result = (num as NSString).componentsSeparatedByString(\".\").map{ Int($0)\
    \ }\n                         ^~~~~~~~\n/tmp/tmp4rtutnb6.swift:9:36: error: value\
    \ of type 'Int' has no member 'componentsSeparatedByString'\n    let result =\
    \ (num as NSString).componentsSeparatedByString(\".\").map{ Int($0) }\n      \
    \           ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let base = getBaseFromInt64(num)\n    let remainder\
    \ = getRemainderFromInt64(num)\n\n    var evenCount = 0\n    var oddCount = 0\n\
    \    while remainder > 0 {\n        if remainder % 2 == 0 {\n            evenCount\
    \ += 1\n        }\n        remainder /= 2\n    }\n\n    if base == 10 {\n    \
    \    return evenCount, oddCount\n    }\n\n    if remainder > 0 {\n        oddCount\
    \ += 1\n    }\n\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hrb66la.swift:22:25: error: consecutive statements on a line must\
    \ be separated by ';'\n        return evenCount, oddCount\n                  \
    \      ^\n                        ;\n/tmp/tmp6hrb66la.swift:22:25: error: expected\
    \ expression\n        return evenCount, oddCount\n                        ^\n\
    /tmp/tmp6hrb66la.swift:9:16: error: cannot find 'getBaseFromInt64' in scope\n\
    \    let base = getBaseFromInt64(num)\n               ^~~~~~~~~~~~~~~~\n/tmp/tmp6hrb66la.swift:10:21:\
    \ error: cannot find 'getRemainderFromInt64' in scope\n    let remainder = getRemainderFromInt64(num)\n\
    \                    ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6hrb66la.swift:22:16: error:\
    \ cannot convert return expression of type 'Int' to return type '(Int, Int)'\n\
    \        return evenCount, oddCount\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num < 0 {\n        fatalError(\"cannot count negative\
    \ number\")\n    }\n    var evenCount = 0\n    var oddCount = 0\n    var temp\
    \ = Int()\n    var quotient: Int\n    quotient = num / 10\n    if quotient ==\
    \ 0 {\n        evenCount = 1\n    } else {\n        while quotient != 0 {\n  \
    \          temp = (quotient % 10) * 2\n            if temp % 2 == 0 {\n      \
    \          evenCount++\n            }\n            quotient = quotient / 10\n\
    \        }\n    }\n    quotient = num / 100\n    if quotient != 0 {\n        temp\
    \ = (quotient % 10) * 2\n        if temp % 2 == 0 {\n            evenCount++\n\
    \        }\n        quotient = quotient / 100\n    }\n    quotient = num / 1000\n\
    \    if quotient != 0 {\n        temp = (quotient % 10) * 2\n        if temp %\
    \ 2 == 0 {\n            evenCount++\n        }\n        quotient = quotient /\
    \ 1000\n    }\n    quotient = num / 10000\n    if quotient != 0 {\n        temp\
    \ = (quotient % 10) * 2\n        if temp % 2 == 0 {\n            evenCount++\n\
    \        }\n        quotient = quotient / 10000\n    }\n    quotient = num / 100000\n\
    \    if quotient != 0 {\n        temp = (quotient % 10) * 2\n        if temp %\
    \ 2 == 0 {\n            evenCount++\n        }\n        quotient = quotient /\
    \ 100000\n    }\n    quotient = num / 1000000\n    if quotient != 0 {\n      \
    \  temp = (quotient % 10) * 2\n        if temp % 2 == 0 {\n            evenCount++\n\
    \        }\n        quotient = quotient / 1000000\n    }\n    quotient = num /\
    \ 10000000\n    if quotient != 0 {\n        temp = (quotient % 10) * 2\n     \
    \   if temp % 2 == 0 {\n            evenCount++\n        }\n        quotient =\
    \ quotient / 10000000\n    }\n    quotient = num / 100000000\n    if quotient\
    \ != 0 {\n        temp = (quotient % 10) * 2\n        if temp % 2 == 0 {\n   \
    \         evenCount++\n        }\n        quotient = quotient / 100000000\n  \
    \  }\n    quotient = num / 1000000000\n    if quotient != 0 {\n        temp =\
    \ (quotient % 10) * 2\n        if temp % 2 == 0 {\n            evenCount++\n \
    \       }\n        quotient = quotient / 1000000000\n    }\n    quotient = num\
    \ / 10000000000\n    if quotient != 0 {\n        temp = (quotient % 10) * 2\n\
    \        if temp % 2 == 0 {\n            evenCount++\n        }\n        quotient\
    \ = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0,\
    \ 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpw6ovtvst.swift:99:1: error: expected expression in assignment\n\
    }\n^\n/tmp/tmpw6ovtvst.swift:121:41: error: expected '}' at end of brace statement\n\
    assert(even_odd_count(num: 0) == (1, 0))\n                                   \
    \     ^\n/tmp/tmpw6ovtvst.swift:8:45: note: to match this opening '{'\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n                                            ^\n/tmp/tmpw6ovtvst.swift:23:26:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      evenCount++\n                         ^~\n/tmp/tmpw6ovtvst.swift:32:22:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  evenCount++\n                     ^~\n/tmp/tmpw6ovtvst.swift:40:22: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            evenCount++\n\
    \                     ^~\n/tmp/tmpw6ovtvst.swift:48:22: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            evenCount++\n             \
    \        ^~\n/tmp/tmpw6ovtvst.swift:56:22: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n            evenCount++\n                     ^~\n\
    /tmp/tmpw6ovtvst.swift:64:22: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n            evenCount++\n                     ^~\n/tmp/tmpw6ovtvst.swift:72:22:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  evenCount++\n                     ^~\n/tmp/tmpw6ovtvst.swift:80:22: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            evenCount++\n\
    \                     ^~\n/tmp/tmpw6ovtvst.swift:88:22: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            evenCount++\n             \
    \        ^~\n/tmp/tmpw6ovtvst.swift:96:22: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n            evenCount++\n                     ^~\n\
    /tmp/tmpw6ovtvst.swift:102:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num == 0 || num == -1 {\n        return (0, 0)\n\
    \    }\n\n    var oddDigits : Int = 0\n    var evenDigits : Int = 0\n    var numToInt\
    \ : Int = 0\n    var nextIsEven : Bool = false\n\n    if num < 0 {\n        numToInt\
    \ = abs(num)\n        nextIsEven = false\n    } else {\n        numToInt = num\n\
    \        nextIsEven = true\n    }\n\n    while numToInt > 0 {\n        numToInt\
    \ /= 10\n        if nextIsEven {\n            evenDigits += numToInt\n       \
    \ } else {\n            oddDigits += numToInt\n        }\n        nextIsEven =\
    \ !nextIsEven\n    }\n\n    return (evenDigits, oddDigits)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpsll732jk/tmpsll732jk.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae68afd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae68accbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae68accb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae68acca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsll732jk                        0x0000557ad49213e4 <unavailable> + 5092

    5    libc.so.6                          0x00002ae68b1c0460 __libc_start_main +
    245

    6    tmpsll732jk                        0x0000557ad4921049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n\n   \
    \ var evenCount = 0\n    var oddCount = 0\n    var digit = num\n\n    for _ in\
    \ 0 ..< Digits {\n        if digit % 2 == 0 {\n            evenCount += 1\n  \
    \      } else {\n            oddCount += 1\n        }\n        digit = digit /\
    \ 2\n    }\n\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp0tk0tc11.swift:17:20: error: cannot find 'Digits' in scope\n  \
    \  for _ in 0 ..< Digits {\n                   ^~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num == 0 || (num % 2 == 0 && num != 1) {\n    \
    \    return (0, 0)\n    }\n    var even = 0\n    var odd = 0\n    if num > 0 {\n\
    \        var temp = num\n        while temp > 0 {\n            temp = temp / 10\n\
    \            if temp % 2 == 0 {\n                even++\n            } else {\n\
    \                odd++\n            }\n        }\n    }\n    return (even, odd)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp0q4d5nqi.swift:19:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                even++\n                    ^~\n/tmp/tmp0q4d5nqi.swift:21:20:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      odd++\n                   ^~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var current\
    \ = 0\n    var remainder = num\n    for _ in 0..<MAX {\n        if num == 0 {\n\
    \            return (0, 0)\n        }\n        remainder /= 10\n        current\
    \ = remainder\n        if current % 2 == 0 {\n            evenCount += 1\n   \
    \     } else {\n            oddCount += 1\n        }\n    }\n    return (evenCount,\
    \ oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpgrl94w9f.swift:13:18: error: cannot find 'MAX' in scope\n    for\
    \ _ in 0..<MAX {\n                 ^~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n\tvar even, odd Int = 0\n\tvar temp Int = 0\n\t\n\ttemp\
    \ = num\n\twhile temp > 0 {\n\t\tif temp % 2 == 0 {\n\t\t\teven++\n\t\t} else\
    \ {\n\t\t\todd++\n\t\t}\n\t\ttemp /= 10\n\t}\n\t\n\treturn (even, odd)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmptpspr562.swift:9:16: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n        var even, odd\
    \ Int = 0\n                      ^\n/tmp/tmptpspr562.swift:9:16: note: join the\
    \ identifiers together\n        var even, odd Int = 0\n                  ~~~~^~~\n\
    \                  oddInt\n/tmp/tmptpspr562.swift:10:11: error: found an unexpected\
    \ second identifier in variable declaration; is there an accidental break?\n \
    \       var temp Int = 0\n                 ^\n/tmp/tmptpspr562.swift:10:11: note:\
    \ join the identifiers together\n        var temp Int = 0\n            ~~~~~^~~\n\
    \            tempInt\n/tmp/tmptpspr562.swift:9:6: error: type annotation missing\
    \ in pattern\n        var even, odd Int = 0\n            ^\n/tmp/tmptpspr562.swift:15:8:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \              even++\n                            ^~\n/tmp/tmptpspr562.swift:17:7:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \              odd++\n                           ^~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even: Int = 0\n    var odd: Int = 0\n    for digit\
    \ in String(num).characters {\n        if digit % 2 == 0 {\n            even +=\
    \ 1\n        } else {\n            odd += 1\n        }\n    }\n    return (even,\
    \ odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7)\
    \ == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpz9v9lbdj.swift:11:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(num).characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpz9v9lbdj.swift:12:12: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if digit % 2 == 0 {\n           ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0, odd = 1\n    \n    for number in String(num).characters\
    \ {\n        if number % 2 == 0 {\n            even += 1\n        } else {\n \
    \           odd += 1\n        }\n    }\n    \n    return (even, odd)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp40sqcqtz.swift:11:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for number in String(num).characters {\n          \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp40sqcqtz.swift:12:12: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if number % 2 == 0 {\n           ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    switch num {\n    case 0: return (0, 0)\n    case\
    \ 1: return (1, 0)\n    case 2: return (0, 1)\n    case 3: return (1, 1)\n   \
    \ case 4: return (2, 0)\n    case 5: return  (2, 1)\n    case 6: return (0, 1)\n\
    \    case 7: return (2, 1)\n    case 8: return (1, 2)\n    case 9: return (2,\
    \ 2)\n    case 10: return (1, 3)\n    case 11: return (3, 1)\n    case 12: return\
    \ (1, 4)\n    case 13: return (2, 3)\n    case 14: return (3, 2)\n    case 15:\
    \ return (2, 4)\n    case 16: return (3, 3)\n    case 17: return (4, 2)\n    case\
    \ 18: return (3, 4)\n    case 19: return (4, 3)\n    case 20: return (4, 4)\n\
    \    case 21: return (4, 5)\n    case 22: return (5, 4)\n    case 23: return (5,\
    \ 5)\n    case 24: return (5, 6)\n    case 25: return (6, 5)\n    case 26: return\
    \ (7, 5)\n    case 27: return (8, 5)\n    case 28: return (9, 5)\n    case 29:\
    \ return (11, 5)\n    case 30: return (12, 5)\n    case 31: return (13, 5)\n \
    \   case 32: return (14, 5)\n    case 33: return (15, 5)\n    case 34: return\
    \ (16, 5)\n    case 35: return (17, 5)\n    case 36: return (18, 5)\n    case\
    \ 37: return (19, 5)\n    case 38: return (20, 5)\n    case 39: return (21, 5)\n\
    \    case 40: return (22, 5)\n    case 41: return (23, 5)\n    case 42: return\
    \ (24, 5)\n    case 43: return (25, 5)\n    case 44: return (26, 5)\n    case\
    \ 45: return (27, 5)\n    case 46: return (28, 5)\n    case 47: return (29, 5)\n\
    \    case 48: return (30, 5)\n    case 49: return (31, 5)\n    case 50: return\
    \ (32, 5)\n    case 51: return (33, 5)\n    case 52: return (34, 5)\n    case\
    \ 53: return (35, 5)\n    case 54: return (36, 5)\n    case 55: return (37, 5)\n\
    \    case 56: return (38, 5)\n    case 57: return (39, 5)\n    case 58: return\
    \ (40, 5)\n    case 59: return (41, 5)\n    case 60: return (42, 5)\n    case\
    \ 61: return (43, 5)\n    case 62: return (44, 5)\n    case 63: return (45, 5)\n\
    \    case 64: return (46, 5)\n    case 65: return (47, 5)\n    case 66: return\
    \ (48, 5)\n    case 67: return (49, 5)\n    case 68: return (50, 5)\n    case\
    \ 69: return (51, 5)\n    case 70: return (52, 5)\n    case 71: return (53, 5)\n\
    \    case 72: return (54, 5)\n    case 73: return (55, 5)\n    case 74: return\
    \ (56, 5)\n    case 75: return (\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpw5px10g4.swift:86:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpw5px10g4.swift:108:41: error: expected '}' at end of brace statement\n\
    assert(even_odd_count(num: 0) == (1, 0))\n                                   \
    \     ^\n/tmp/tmpw5px10g4.swift:8:45: note: to match this opening '{'\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n                                            ^\n/tmp/tmpw5px10g4.swift:85:21:\
    \ error: cannot convert return expression of type '()' to return type '(Int, Int)'\n\
    \    case 75: return (\n                    ^\n/tmp/tmpw5px10g4.swift:9:5: error:\
    \ switch must be exhaustive\n    switch num {\n    ^\n/tmp/tmpw5px10g4.swift:9:5:\
    \ note: do you want to add a default clause?\n    switch num {\n    ^\n/tmp/tmpw5px10g4.swift:89:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    guard num > 0 else { return (1, 0) }\n    guard num\
    \ == abs(num) else { return (1, 1) }\n\n    var even = 0, odd = 1\n    var num\
    \ = abs(num)\n\n    while num > 0 {\n        let lastDigit = num % 10\n      \
    \  if lastDigit % 2 == 0 {\n            even += 1\n        } else {\n        \
    \    odd += 1\n        }\n        num /= 10\n    }\n    return (even, odd)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmprwnd9a0a/tmprwnd9a0a.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdb6746c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdb643db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdb643d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdb643c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprwnd9a0a                        0x00005589d36a73e4 <unavailable> + 5092

    5    libc.so.6                          0x00002abdb6932460 __libc_start_main +
    245

    6    tmprwnd9a0a                        0x00005589d36a7049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if\
    \ num == 0 { return (1, 0) }\n\n    evenCount := 0\n    oddCount := 0\n\n    var\
    \ digits : [Int] = []\n    var digitNum Int = num\n\n    for digitNum > 0 {\n\
    \        digits.append(digitNum % 10)\n        digitNum = digitNum / 10\n    }\n\
    \n    for index, digit := range digits {\n        if digit % 2 != 0 { // if any\
    \ digit in the odd position\n            oddCount += index\n        }\n      \
    \  else {\n            evenCount += index\n        }\n    }\n\n    return (evenCount,\
    \ oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpum900ffs.swift:14:14: error: consecutive statements on a line must\
    \ be separated by ';'\n    evenCount := 0\n             ^\n             ;\n/tmp/tmpum900ffs.swift:14:15:\
    \ error: expected expression\n    evenCount := 0\n              ^\n/tmp/tmpum900ffs.swift:18:18:\
    \ error: found an unexpected second identifier in variable declaration; is there\
    \ an accidental break?\n    var digitNum Int = num\n                 ^\n/tmp/tmpum900ffs.swift:18:18:\
    \ note: join the identifiers together\n    var digitNum Int = num\n        ~~~~~~~~~^~~\n\
    \        digitNumInt\n/tmp/tmpum900ffs.swift:20:18: error: expected 'in' after\
    \ for-each pattern\n    for digitNum > 0 {\n                 ^\n/tmp/tmpum900ffs.swift:20:18:\
    \ error: unary operator cannot be separated from its operand\n    for digitNum\
    \ > 0 {\n                 ^~\n                  \n/tmp/tmpum900ffs.swift:25:14:\
    \ error: expected 'in' after for-each pattern\n    for index, digit := range digits\
    \ {\n             ^\n/tmp/tmpum900ffs.swift:25:14: error: expected Sequence expression\
    \ for for-each loop\n    for index, digit := range digits {\n             ^\n\
    /tmp/tmpum900ffs.swift:14:5: error: cannot find 'evenCount' in scope\n    evenCount\
    \ := 0\n    ^~~~~~~~~\n/tmp/tmpum900ffs.swift:20:18: error: '>' is not a prefix\
    \ unary operator\n    for digitNum > 0 {\n                 ^\n/tmp/tmpum900ffs.swift:34:13:\
    \ error: cannot find 'evenCount' in scope\n    return (evenCount, oddCount)\n\
    \            ^~~~~~~~~\n/tmp/tmpum900ffs.swift:34:24: error: cannot find 'oddCount'\
    \ in scope\n    return (evenCount, oddCount)\n                       ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num < 0 {\n        return (Int.min, Int.max)\n\
    \    }\n    var even = num\n    var odd = num\n    for _ in 0..<num.bitWidth {\n\
    \        odd = odd.multiplying(by: 2)\n        if odd.isOdd() {\n            even\
    \ = even.adding(by: 1)\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpnkh9e4oz.swift:15:19: error: value of type 'Int' has no member\
    \ 'multiplying'\n        odd = odd.multiplying(by: 2)\n              ~~~ ^~~~~~~~~~~\n\
    /tmp/tmpnkh9e4oz.swift:16:16: error: value of type 'Int' has no member 'isOdd'\n\
    \        if odd.isOdd() {\n           ~~~ ^~~~~\n/tmp/tmpnkh9e4oz.swift:17:25:\
    \ error: value of type 'Int' has no member 'adding'\n            even = even.adding(by:\
    \ 1)\n                   ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n\n    var\
    \ result = Int()\n    while num > 0 {\n        num /= 10\n        result = (10\
    \ * result + num) % 100\n        evenCount++\n    }\n\n    while num > 0 {\n \
    \       num /= 10\n        result = (10 * result + num) % 100\n        oddCount++\n\
    \    }\n\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpnn7svo8v.swift:14:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num /= 10\n        ~~~ ^\n/tmp/tmpnn7svo8v.swift:16:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        evenCount++\n\
    \                 ^~\n/tmp/tmpnn7svo8v.swift:20:13: error: left side of mutating\
    \ operator isn't mutable: 'num' is a 'let' constant\n        num /= 10\n     \
    \   ~~~ ^\n/tmp/tmpnn7svo8v.swift:22:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        oddCount++\n                ^~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: -1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    var\
    \ remainder = num\n    while remainder > 0 {\n        remainder %= 10\n      \
    \  if remainder % 2 == 0 {\n            even_count += 1\n        } else {\n  \
    \          odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013827
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num < 0 {\n        guard let a = abs(num) else\
    \ {\n            return (0, 0)\n        }\n        return (a, 0)\n    }\n    let\
    \ len = Int.bitWidth\n    guard num >= 0 else { return (0, 1) }\n    var even\
    \ = UInt32(0), odd = UInt32(0)\n    for i in 0 ..< len {\n        let mask = UInt32(1)\
    \ << UInt32(i + 1)\n        if num.bitwiseAnd(mask).isZero {\n            even\
    \ = even.bitwiseOr(UInt32(0))\n        } else {\n            odd = odd.bitwiseOr(UInt32(0))\n\
    \        }\n    }\n    return (even.bitCount & 1 ? even : odd, odd.bitCount &\
    \ 1 ? odd : even)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpczg85y6z.swift:10:15: error: initializer for conditional binding\
    \ must have Optional type, not 'Int'\n        guard let a = abs(num) else {\n\
    \              ^       ~~~~~~~~\n/tmp/tmpczg85y6z.swift:20:16: error: value of\
    \ type 'Int' has no member 'bitwiseAnd'\n        if num.bitwiseAnd(mask).isZero\
    \ {\n           ~~~ ^~~~~~~~~~\n/tmp/tmpczg85y6z.swift:21:25: error: value of\
    \ type 'UInt32' has no member 'bitwiseOr'\n            even = even.bitwiseOr(UInt32(0))\n\
    \                   ~~~~ ^~~~~~~~~\n/tmp/tmpczg85y6z.swift:23:23: error: value\
    \ of type 'UInt32' has no member 'bitwiseOr'\n            odd = odd.bitwiseOr(UInt32(0))\n\
    \                  ~~~ ^~~~~~~~~\n/tmp/tmpczg85y6z.swift:26:12: error: cannot\
    \ convert return expression of type '(UInt32, UInt32)' to return type '(Int, Int)'\n\
    \    return (even.bitCount & 1 ? even : odd, odd.bitCount & 1 ? odd : even)\n\
    \           ^\n/tmp/tmpczg85y6z.swift:26:18: error: value of type 'UInt32' has\
    \ no member 'bitCount'\n    return (even.bitCount & 1 ? even : odd, odd.bitCount\
    \ & 1 ? odd : even)\n            ~~~~ ^~~~~~~~\n/tmp/tmpczg85y6z.swift:26:27:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \ return (even.bitCount & 1 ? even : odd, odd.bitCount & 1 ? odd : even)\n   \
    \                       ^\n            ((               ) != 0)\n/tmp/tmpczg85y6z.swift:26:49:\
    \ error: value of type 'UInt32' has no member 'bitCount'\n    return (even.bitCount\
    \ & 1 ? even : odd, odd.bitCount & 1 ? odd : even)\n                         \
    \                   ~~~ ^~~~~~~~\n/tmp/tmpczg85y6z.swift:26:58: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n    return (even.bitCount\
    \ & 1 ? even : odd, odd.bitCount & 1 ? odd : even)\n                         \
    \                                ^\n                                         \
    \   ((              ) != 0)\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even, odd, i : Int\n\n    if num < 0 {\n     \
    \   return (0, 0)\n    }\n\n    even = 0\n    odd = 0\n    i = 1\n\n    while\
    \ num >= 0 {\n        if num % 2 == 0 {\n            even += i\n        } else\
    \ {\n            odd += i\n        }\n\n        num = Int(Int(num / 2))\n    \
    \    i += 1\n    }\n\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp1xt9uchp.swift:26:9: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n        num = Int(Int(num / 2))\n        ^~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    // initialize variables to zero for even and odd count\n\
    \    var even = 0, odd = 1\n\n    // find number of digits in number\n    let\
    \ numDigits = num.log10()\n\n    for i in 0..<numDigits {\n        if num >= 0\
    \ {\n            if num % i == 0 {\n                even += 1;\n            }\
    \ else {\n                odd += 1;\n            }\n        }\n\n        // add\
    \ one to num\n        num /= i\n    }\n\n    return (even, odd)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp9_4sfy3j.swift:13:25: error: value of type 'Int' has no member\
    \ 'log10'\n    let numDigits = num.log10()\n                    ~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let rem = num % 10\n    return (num / 10, rem % 2\
    \ == 0 ? 1 : 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpxdo90l0d/tmpxdo90l0d.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afedfa75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afedf76cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afedf76c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afedf76b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxdo90l0d                        0x000055ed3e495304 <unavailable> + 4868

    5    libc.so.6                          0x00002afedfc61460 __libc_start_main +
    245

    6    tmpxdo90l0d                        0x000055ed3e494f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even: Int = 0\n    var odd: Int = 0\n    \n  \
    \  if num >= 0 {\n        while num > 0 {\n            let temp: Int = num % 10\n\
    \            num -= temp\n            \n            if temp % 2 == 0 {\n     \
    \           even += 1\n            } else {\n                odd += 1\n      \
    \      }\n        }\n    } else {\n        while num >= 0 {\n            let temp:\
    \ Int = num % 10\n            num -= temp\n            \n            if temp %\
    \ 2 == 1 {\n                even += 1\n            } else {\n                odd\
    \ += 1\n            }\n        }\n    }\n    \n    return (even, odd)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpuoz6b1dd.swift:15:17: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n            num -= temp\n            ~~~\
    \ ^\n/tmp/tmpuoz6b1dd.swift:26:17: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n            num -= temp\n            ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    let\
    \ count = (num / 2).floor()\n    return (count % 2 == 0, count % 2 == 1)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpdcftmf0y.swift:12:27: error: value of type 'Int' has no member\
    \ 'floor'\n    let count = (num / 2).floor()\n                ~~~~~~~~~ ^~~~~\n\
    /tmp/tmpdcftmf0y.swift:13:12: error: cannot convert return expression of type\
    \ '(Bool, Bool)' to return type '(Int, Int)'\n    return (count % 2 == 0, count\
    \ % 2 == 1)\n           ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = Int(0)\n    var odd = Int(0)\n    for num\
    \ >= 0 {\n        let remainder = num % 10\n        num = num / 10\n        if\
    \ remainder % 2 == 0 {\n            even = even * 10 + remainder\n        } else\
    \ {\n            odd = odd * 10 + remainder\n        }\n    }\n    return (even,\
    \ odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7)\
    \ == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp8kv9bi6j.swift:11:13: error: expected 'in' after for-each pattern\n\
    \    for num >= 0 {\n            ^\n/tmp/tmp8kv9bi6j.swift:11:13: error: unary\
    \ operator cannot be separated from its operand\n    for num >= 0 {\n        \
    \    ^ ~\n              \n/tmp/tmp8kv9bi6j.swift:11:13: error: '>=' is not a prefix\
    \ unary operator\n    for num >= 0 {\n            ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0, odd = 1\n    for _ in 0 ..< num {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n        num /= 10\n    }\n    return (even, odd)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpno8zatkt.swift:12:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            even++\n                ^~\n/tmp/tmpno8zatkt.swift:14:16:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  odd++\n               ^~\n/tmp/tmpno8zatkt.swift:16:13: error: left side of\
    \ mutating operator isn't mutable: 'num' is a 'let' constant\n        num /= 10\n\
    \        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var sumEven: Int = 0\n    var sumOdd: Int = 0\n  \
    \  for n in 1...num {\n        if n % 2 == 0 {\n            sumEven += Int(n)\n\
    \        } else {\n            sumOdd += Int(n)\n        }\n    }\n    return\
    \ (sumEven, sumOdd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_gd4pyk5/tmp_gd4pyk5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1181b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba117ea8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba117ea8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba117ea77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_gd4pyk5                        0x000055e8aed65524 <unavailable> + 5412

    5    libc.so.6                          0x00002ba11839d460 __libc_start_main +
    245

    6    tmp_gd4pyk5                        0x000055e8aed65189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let count = pow(10.0, Double(num)).truncatingRemainder(dividingBy:\
    \ 2.0)\n    return (Int(count), Int(Int(count).truncatingRemainder(dividingBy:\
    \ 2.0)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp_j1kqs4o.swift:9:17: error: cannot find 'pow' in scope\n    let\
    \ count = pow(10.0, Double(num)).truncatingRemainder(dividingBy: 2.0)\n      \
    \          ^~~\n/tmp/tmp_j1kqs4o.swift:10:40: error: reference to member 'truncatingRemainder'\
    \ cannot be resolved without a contextual type\n    return (Int(count), Int(Int(count).truncatingRemainder(dividingBy:\
    \ 2.0)))\n                                       ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n\n    for\
    \ _ in 0..<num {\n        if num % 2 == 0 {\n            evenCount += 1\n    \
    \    } else {\n            oddCount += 1\n        }\n        num /= 10\n    }\n\
    \n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1,\
    \ 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpu_6bwl22.swift:18:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num /= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (num % 2 == 0), ((num + 3) % 2 == 0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpci2l8kco.swift:9:26: error: consecutive statements on a line must\
    \ be separated by ';'\n    return (num % 2 == 0), ((num + 3) % 2 == 0)\n     \
    \                    ^\n                         ;\n/tmp/tmpci2l8kco.swift:9:26:\
    \ error: expected expression\n    return (num % 2 == 0), ((num + 3) % 2 == 0)\n\
    \                         ^\n/tmp/tmpci2l8kco.swift:9:21: error: cannot convert\
    \ return expression of type 'Bool' to return type '(Int, Int)'\n    return (num\
    \ % 2 == 0), ((num + 3) % 2 == 0)\n           ~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for\
    \ digit in num {\n        if digit % 2 == 0 {\n            even_count += 1\n \
    \       } else {\n            odd_count += 1\n        }\n    }\n    return (even_count,\
    \ odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpqpd16tfp.swift:11:18: error: for-in loop requires 'Int' to conform\
    \ to 'Sequence'\n    for digit in num {\n                 ^~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    var\
    \ even = 0, odd = 1\n    var n = abs(num)\n    while n > 0 {\n        var remaining\
    \ = n & 1\n        n = n >> 1\n        if remaining {\n            even++\n  \
    \      } else {\n            odd++\n        }\n    }\n    return (even, odd)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpo55gyepy.swift:17:12: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n        if remaining {\n           ^\n           (\
    \         != 0)\n/tmp/tmpo55gyepy.swift:18:17: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            even++\n                ^~\n/tmp/tmpo55gyepy.swift:20:16:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  odd++\n               ^~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    while\
    \ num != 0 {\n        if num % 2 == 0 {\n            evenCount += 1\n        }\
    \ else {\n            oddCount += 1\n        }\n        num = num / 2\n    }\n\
    \    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpw05zieyo.swift:17:9: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n        num = num / 2\n        ^~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even, odd : Int = 0\n    if num >= 0 {\n     \
    \   for _ in 0..<(math.ceil(Double(num) / 2)) {\n            if num % 2 == 0 {\n\
    \                even += 1\n            } else {\n                odd += 1\n \
    \           }\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp7o78z_f7.swift:9:9: error: type annotation missing in pattern\n\
    \    var even, odd : Int = 0\n        ^\n/tmp/tmp7o78z_f7.swift:11:23: error:\
    \ cannot find 'math' in scope\n        for _ in 0..<(math.ceil(Double(num) / 2))\
    \ {\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n\n    for\
    \ n in num.digits() {\n        if n % 2 == 0 {\n            evenCount += 1\n \
    \       } else {\n            oddCount += 1\n        }\n    }\n\n    return (evenCount,\
    \ oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmphzcsigtv.swift:12:18: error: value of type 'Int' has no member\
    \ 'digits'\n    for n in num.digits() {\n             ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num == 0 {\n        return (0,0)\n    }\n    if\
    \ num < 0 {\n        return (0,0)\n    }\n    var evens = 0\n    var odds = 0\n\
    \    var temp = 0\n    temp = num / 2\n    while(temp != 0){\n        if temp\
    \ % 2 == 0 {\n            evens++\n        }\n        temp = temp / 2\n    }\n\
    \    temp = num / 2\n    while(temp != 0){\n        if temp % 2 == 1 {\n     \
    \       odds++\n        }\n        temp = temp / 2\n    }\n    return (evens,odds)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpbxq3ei8b.swift:21:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            evens++\n                 ^~\n/tmp/tmpbxq3ei8b.swift:28:17:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  odds++\n                ^~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0, odd_count = 0\n    for digit in\
    \ num.binaryRepresentation.characters {\n        if digit == '1' {\n         \
    \   odd_count++\n        } else if digit == '0' {\n            even_count++\n\
    \        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpoh7qyqxs.swift:11:21: error: single-quoted string literal found,\
    \ use '\"'\n        if digit == '1' {\n                    ^~~\n             \
    \       \"1\"\n/tmp/tmpoh7qyqxs.swift:13:28: error: single-quoted string literal\
    \ found, use '\"'\n        } else if digit == '0' {\n                        \
    \   ^~~\n                           \"0\"\n/tmp/tmpoh7qyqxs.swift:10:22: error:\
    \ value of type 'Int' has no member 'binaryRepresentation'\n    for digit in num.binaryRepresentation.characters\
    \ {\n                 ~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even: Int = 0\n    var odd: Int = 0\n    for number\
    \ in String(num) {\n        switch number {\n        case \"0\", \"2\", \"4\"\
    , \"6\", \"8\", \"10\":\n        case \"12\", \"14\", \"16\", \"18\", \"20\":\n\
    \            even++\n        case \"1\", \"3\", \"5\", \"7\", \"9\":\n       \
    \ case \"11\", \"13\", \"15\", \"17\", \"19\":\n            odd++\n        }\n\
    \    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp7_3eawad.swift:13:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"0\", \"2\", \"4\", \"6\",\
    \ \"8\", \"10\":\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n              \
    \                              break\n/tmp/tmp7_3eawad.swift:16:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ \"1\", \"3\", \"5\", \"7\", \"9\":\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \                                      break\n/tmp/tmp7_3eawad.swift:13:39: error:\
    \ expression pattern of type 'String' cannot match values of type 'Character'\n\
    \        case \"0\", \"2\", \"4\", \"6\", \"8\", \"10\":\n                   \
    \                   ^~~~\n/tmp/tmp7_3eawad.swift:14:14: error: expression pattern\
    \ of type 'String' cannot match values of type 'Character'\n        case \"12\"\
    , \"14\", \"16\", \"18\", \"20\":\n             ^~~~\n/tmp/tmp7_3eawad.swift:14:20:\
    \ error: expression pattern of type 'String' cannot match values of type 'Character'\n\
    \        case \"12\", \"14\", \"16\", \"18\", \"20\":\n                   ^~~~\n\
    /tmp/tmp7_3eawad.swift:14:26: error: expression pattern of type 'String' cannot\
    \ match values of type 'Character'\n        case \"12\", \"14\", \"16\", \"18\"\
    , \"20\":\n                         ^~~~\n/tmp/tmp7_3eawad.swift:14:32: error:\
    \ expression pattern of type 'String' cannot match values of type 'Character'\n\
    \        case \"12\", \"14\", \"16\", \"18\", \"20\":\n                      \
    \         ^~~~\n/tmp/tmp7_3eawad.swift:14:38: error: expression pattern of type\
    \ 'String' cannot match values of type 'Character'\n        case \"12\", \"14\"\
    , \"16\", \"18\", \"20\":\n                                     ^~~~\n/tmp/tmp7_3eawad.swift:17:14:\
    \ error: expression pattern of type 'String' cannot match values of type 'Character'\n\
    \        case \"11\", \"13\", \"15\", \"17\", \"19\":\n             ^~~~\n/tmp/tmp7_3eawad.swift:17:20:\
    \ error: expression pattern of type 'String' cannot match values of type 'Character'\n\
    \        case \"11\", \"13\", \"15\", \"17\", \"19\":\n                   ^~~~\n\
    /tmp/tmp7_3eawad.swift:17:26: error: expression pattern of type 'String' cannot\
    \ match values"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount, oddCount : Int = 0\n    for n in num\
    \ {\n        if n % 2 == 0 {\n            evenCount += 1\n        } else {\n \
    \           oddCount += 1\n        }\n    }\n    return evenCount, oddCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmprgjnewla.swift:17:21: error: consecutive statements on a line must\
    \ be separated by ';'\n    return evenCount, oddCount\n                    ^\n\
    \                    ;\n/tmp/tmprgjnewla.swift:17:21: error: expected expression\n\
    \    return evenCount, oddCount\n                    ^\n/tmp/tmprgjnewla.swift:9:9:\
    \ error: type annotation missing in pattern\n    var evenCount, oddCount : Int\
    \ = 0\n        ^\n/tmp/tmprgjnewla.swift:10:14: error: for-in loop requires 'Int'\
    \ to conform to 'Sequence'\n    for n in num {\n             ^~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0, odd = 0, remainder = 0\n    switch num\
    \ {\n    case 0:\n        return (0, 0)\n    case 1:\n        return (1, 0)\n\
    \    }\n    while num >= 0 {\n        remainder = num % 10\n        even = even\
    \ * 10 + remainder\n        odd = odd * 10 + remainder / 2\n        num = num\
    \ / 10\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1,\
    \ 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpuhjsjl7m.swift:10:5: error: switch must be exhaustive\n    switch\
    \ num {\n    ^\n/tmp/tmpuhjsjl7m.swift:10:5: note: do you want to add a default\
    \ clause?\n    switch num {\n    ^\n/tmp/tmpuhjsjl7m.swift:20:9: error: cannot\
    \ assign to value: 'num' is a 'let' constant\n        num = num / 10\n       \
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let divisor = pow(10, Int(log10(num) + 1))\n    let\
    \ even_digit = (num / divisor).rounded(.towardZero)\n    let odd_digit = num %\
    \ divisor\n    return (even_digit, odd_digit)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp0snkmz92.swift:9:19: error: cannot find 'pow' in scope\n    let\
    \ divisor = pow(10, Int(log10(num) + 1))\n                  ^~~\n/tmp/tmp0snkmz92.swift:9:31:\
    \ error: cannot find 'log10' in scope\n    let divisor = pow(10, Int(log10(num)\
    \ + 1))\n                              ^~~~~\n/tmp/tmp0snkmz92.swift:10:47: error:\
    \ cannot infer contextual base in reference to member 'towardZero'\n    let even_digit\
    \ = (num / divisor).rounded(.towardZero)\n                                   \
    \          ~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    guard num >= 0 else { return (1, 0) }\n    var evenDigits\
    \ = 0, oddDigits = 0\n    for i in 0 ..< num {\n        if num % i == 0 {\n  \
    \          evenDigits += 1\n        } else {\n            oddDigits += 1\n   \
    \     }\n    }\n    return (evenDigits, oddDigits)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f627a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f6249c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8f6249c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8f6249c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8f6249bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpo8mpwknh                        0x000055b85b19dbbb <unavailable> + 7099

    6    tmpo8mpwknh                        0x000055b85b19d33b <unavailable> + 4923

    7    libc.so.6                          0x00002b8f62991460 __libc_start_main +
    245

    8    tmpo8mpwknh                        0x000055b85b19d059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let count = String(self).characters.count\n    let\
    \ even = count / 2\n    let odd = count - even\n    return (even, odd)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpk3if9r2y.swift:9:24: error: cannot find 'self' in scope; did you\
    \ mean to use it in a type or extension context?\n    let count = String(self).characters.count\n\
    \                       ^~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for _ in 0..<num\
    \ {\n        switch num % 10 {\n        case 0, 2, 4, 6, 8, 10, 12:\n        \
    \    even += 1\n            break\n        case 1, 3, 5, 7, 9:\n            odd\
    \ += 1\n            break\n        default:\n            break\n        }\n  \
    \      num /= 10\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpd7bdvhhy.swift:22:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num /= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (num / 2, num % (num / 2))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpiqca3gsm/tmpiqca3gsm.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d35075c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d34d6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d34d6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d34d6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqca3gsm                        0x0000560c8d6f7304 <unavailable> + 4868

    5    libc.so.6                          0x00002b2d35261460 __libc_start_main +
    245

    6    tmpiqca3gsm                        0x0000560c8d6f6f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for _ in 0..<abs(num)\
    \ {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n    \
    \        odd += 1\n        }\n        num /= 10\n    }\n    return (even, odd)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp5n0x99q4.swift:17:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num /= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    \n    while num\
    \ != 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n\
    \            odd += 1\n        }\n        \n        num /= 10\n    }\n    \n \
    \   return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpgodgw5rc.swift:19:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num /= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    if num\
    \ >= 0 {\n        let numAsInt = num.intValue\n        var numDivisor = numAsInt\n\
    \        var dividend = numAsInt\n        while dividend > 0 {\n            dividend\
    \ /= 10\n            oddCount += 1\n        }\n        while numDivisor > 0 {\n\
    \            numDivisor /= 10\n            evenCount += 1\n        }\n    } else\
    \ {\n        oddCount = -1\n        numDivisor = -1\n        dividend = num\n\
    \        while dividend > 0 {\n            dividend /= 10\n            oddCount\
    \ += 1\n        }\n        while numDivisor > 0 {\n            numDivisor /= 10\n\
    \            evenCount += 1\n        }\n    }\n    return (evenCount, oddCount)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp50xvbo_e.swift:12:28: error: value of type 'Int' has no member\
    \ 'intValue'\n        let numAsInt = num.intValue\n                       ~~~\
    \ ^~~~~~~~\n/tmp/tmp50xvbo_e.swift:25:9: error: cannot find 'numDivisor' in scope\n\
    \        numDivisor = -1\n        ^~~~~~~~~~\n/tmp/tmp50xvbo_e.swift:26:9: error:\
    \ cannot find 'dividend' in scope\n        dividend = num\n        ^~~~~~~~\n\
    /tmp/tmp50xvbo_e.swift:27:15: error: cannot find 'dividend' in scope\n       \
    \ while dividend > 0 {\n              ^~~~~~~~\n/tmp/tmp50xvbo_e.swift:28:13:\
    \ error: cannot find 'dividend' in scope\n            dividend /= 10\n       \
    \     ^~~~~~~~\n/tmp/tmp50xvbo_e.swift:31:15: error: cannot find 'numDivisor'\
    \ in scope\n        while numDivisor > 0 {\n              ^~~~~~~~~~\n/tmp/tmp50xvbo_e.swift:32:13:\
    \ error: cannot find 'numDivisor' in scope\n            numDivisor /= 10\n   \
    \         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let (odd, even) = div_rem_pow(num, 2, &(_: Int, _:\
    \ Int))\n    return (odd, even)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp1e2s8n75.swift:9:23: error: cannot find 'div_rem_pow' in scope\n\
    \    let (odd, even) = div_rem_pow(num, 2, &(_: Int, _: Int))\n              \
    \        ^~~~~~~~~~~\n/tmp/tmp1e2s8n75.swift:9:43: error: cannot pass immutable\
    \ value of type '(Int, Int).Type' as inout argument\n    let (odd, even) = div_rem_pow(num,\
    \ 2, &(_: Int, _: Int))\n                                          ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (num, num % (num / 10.0)) / 2.0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpo4i1cjis.swift:9:31: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    return (num, num % (num / 10.0)) / 2.0\n\
    \                              ^\n                              Int()\n/tmp/tmpo4i1cjis.swift:9:38:\
    \ error: binary operator '/' cannot be applied to operands of type '(Int, Int)'\
    \ and 'Double'\n    return (num, num % (num / 10.0)) / 2.0\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~\n/tmp/tmpo4i1cjis.swift:9:38: note: overloads for '/' exist with these\
    \ partially matching parameter lists: (Double, Double), (Duration, Double)\n \
    \   return (num, num % (num / 10.0)) / 2.0\n                                 \
    \    ^\n/tmp/tmpo4i1cjis.swift:9:38: error: no '/' candidates produce the expected\
    \ contextual result type '(Int, Int)'\n    return (num, num % (num / 10.0)) /\
    \ 2.0\n                                     ^\nSwift.Duration:4:24: note: '/'\
    \ produces 'Duration', not the expected contextual result type '(Int, Int)'\n\
    \    public static func / (lhs: Duration, rhs: Double) -> Duration\n         \
    \              ^\nSwift.Double:5:24: note: '/' produces 'Double', not the expected\
    \ contextual result type '(Int, Int)'\n    public static func / (lhs: Double,\
    \ rhs: Double) -> Double\n                       ^\nSwift.FloatingPoint:29:17:\
    \ note: '/' produces 'Double', not the expected contextual result type '(Int,\
    \ Int)'\n    static func / (lhs: Self, rhs: Self) -> Self\n                ^\n\
    Swift.Duration:4:24: note: '/' produces 'Duration', not the expected contextual\
    \ result type '(Int, Int)'\n    public static func / (lhs: Duration, rhs: Double)\
    \ -> Duration\n                       ^\nSwift.Double:5:24: note: '/' produces\
    \ 'Double', not the expected contextual result type '(Int, Int)'\n    public static\
    \ func / (lhs: Double, rhs: Double) -> Double\n                       ^\nSwift.FloatingPoint:29:17:\
    \ note: '/' produces 'Double', not the expected contextual result type '(Int,\
    \ Int)'\n    static func / (lhs: Self, rhs: Self) -> Self\n                ^\n\
    Swift.Duration:4:24: note: '/' produces 'Duration', not the expected contextual\
    \ result "
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 1, odd = 1\n    for n in String(num).characters\
    \ {\n        if n % 2 == 0 {\n            even++\n        } else {\n         \
    \   odd++\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpm0j67g3y.swift:10:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for n in String(num).characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpm0j67g3y.swift:11:12: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if n % 2 == 0 {\n           ^\n/tmp/tmpm0j67g3y.swift:12:17:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  even++\n                ^~\n/tmp/tmpm0j67g3y.swift:14:16: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            odd++\n          \
    \     ^~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even, odd = 0, 1\n    if num < 0 {\n        num\
    \ = -num\n        even = 1\n    }\n    if num == 0 {\n        return (even, odd)\n\
    \    }\n    if num % 2 == 0 {\n        even += 2\n    }\n    if num % 2 == 1 {\n\
    \        odd += 1\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpaeah7gfd.swift:9:24: error: expected pattern\n    var even, odd\
    \ = 0, 1\n                       ^\n/tmp/tmpaeah7gfd.swift:9:9: error: type annotation\
    \ missing in pattern\n    var even, odd = 0, 1\n        ^\n/tmp/tmpaeah7gfd.swift:11:9:\
    \ error: cannot assign to value: 'num' is a 'let' constant\n        num = -num\n\
    \        ^~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even, odd: Int\n    var numberAsString = String(num)\n\
    \    var numberAsStringCharacters = numberAsString.characters\n    if numberAsString.isEmpty\
    \ {\n        return (1, 1)\n    }\n    \n    for character in numberAsStringCharacters\
    \ {\n        if character % 2 == 0 {\n            even++\n        } else {\n \
    \           odd++\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpj6vx_gb3.swift:11:51: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numberAsStringCharacters = numberAsString.characters\n\
    \                                                  ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpj6vx_gb3.swift:17:12: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n        if character\
    \ % 2 == 0 {\n           ^\n/tmp/tmpj6vx_gb3.swift:18:17: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            even++\n                ^~\n\
    /tmp/tmpj6vx_gb3.swift:20:16: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n            odd++\n               ^~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num < 0 {\n        return (num, 0)\n    }\n   \
    \ var evenCount = 0\n    var oddCount = 0\n    var temp = num\n    while temp\
    \ > 0 {\n        if temp & 1 == 1 {\n            evenCount++\n        }\n    \
    \    temp = temp >> 1\n    }\n    temp = num\n    while temp > 0 {\n        if\
    \ temp & 1 == 0 {\n            oddCount++\n        }\n        temp = temp >> 1\n\
    \    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1,\
    \ 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp9fvjdbaj.swift:17:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            evenCount++\n                     ^~\n/tmp/tmp9fvjdbaj.swift:24:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  oddCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n\n    for num > 0 {\n\
    \        if num % 2 == 0 {\n            even += num / 2\n        } else {\n  \
    \          odd += num / 2\n        }\n\n        num = num / 2\n    }\n\n    return\
    \ (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpf7gh5t20.swift:12:13: error: expected 'in' after for-each pattern\n\
    \    for num > 0 {\n            ^\n/tmp/tmpf7gh5t20.swift:12:13: error: unary\
    \ operator cannot be separated from its operand\n    for num > 0 {\n         \
    \   ^~\n             \n/tmp/tmpf7gh5t20.swift:12:13: error: '>' is not a prefix\
    \ unary operator\n    for num > 0 {\n            ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenNum = 0\n    var oddNum = 0\n    for n in\
    \ String(num).characters {\n        if n % 2 == 0 {\n            evenNum++\n \
    \       } else {\n            oddNum++\n        }\n    }\n    return (evenNum,\
    \ oddNum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpqvecj55e.swift:11:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for n in String(num).characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpqvecj55e.swift:12:12: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if n % 2 == 0 {\n           ^\n/tmp/tmpqvecj55e.swift:13:20:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  evenNum++\n                   ^~\n/tmp/tmpqvecj55e.swift:15:19: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            oddNum++\n  \
    \                ^~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var tmp\
    \ = num\n    while tmp > 0 {\n        if tmp % 2 == 0 {\n            evenCount\
    \ += 1\n        } else {\n            oddCount += 1\n        }\n        tmp =\
    \ tmp / 2\n    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpot2q6fo8/tmpot2q6fo8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b45072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b44d69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b44d69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b44d687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpot2q6fo8                        0x00005609b7c19304 <unavailable> + 4868

    5    libc.so.6                          0x00002b2b4525e460 __libc_start_main +
    245

    6    tmpot2q6fo8                        0x00005609b7c18f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num <= 0 {\n        return (0,0)\n    }\n    var\
    \ even = num / 2\n    var odd = num / 2 - even\n    return (even, odd)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpji0duqq6/tmpji0duqq6.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88bc9e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88bc6dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88bc6da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88bc6d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpji0duqq6                        0x000055e65df1a304 <unavailable> + 4868

    5    libc.so.6                          0x00002b88bcbcf460 __libc_start_main +
    245

    6    tmpji0duqq6                        0x000055e65df19f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var odd = 0, even = 1\n    \n    while num > 0 {\n\
    \        num /= 10\n        \n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n    }\n    \n    return (even,\
    \ odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7)\
    \ == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmptdea1wf0.swift:12:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num /= 10\n        ~~~ ^\n/tmp/tmptdea1wf0.swift:15:17:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  even++\n                ^~\n/tmp/tmptdea1wf0.swift:17:16: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            odd++\n          \
    \     ^~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var total\
    \ = 0\n\n    for _ in 0..<num {\n        total += num % 10\n        if total%2\
    \ == 0 {\n            evenCount += 1\n        } else {\n            oddCount +=\
    \ 1\n        }\n        num /= 10\n    }\n\n    return (evenCount, oddCount)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpat79e066.swift:20:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num /= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n  var even, odd : Int = 0\n  num -= Int(log2(num))\n \
    \ num /= Int(log2(num))\n  while num > 0 {\n    let temp = num / (Int(pow(2,Int(ceil(log2(num))))))\n\
    \    if temp%2 == 0 {\n      even += 1\n    } else {\n      odd += 1\n    }\n\
    \    num /= Int(pow(2,Int(ceil(log2(num))))\n  }\n  return (even, odd)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpork5fj5_.swift:20:3: error: expected ')' in expression list\n \
    \ }\n  ^\n/tmp/tmpork5fj5_.swift:19:15: note: to match this opening '('\n    num\
    \ /= Int(pow(2,Int(ceil(log2(num))))\n              ^\n/tmp/tmpork5fj5_.swift:9:7:\
    \ error: type annotation missing in pattern\n  var even, odd : Int = 0\n     \
    \ ^\n/tmp/tmpork5fj5_.swift:10:14: error: cannot find 'log2' in scope\n  num -=\
    \ Int(log2(num))\n             ^~~~\n/tmp/tmpork5fj5_.swift:11:14: error: cannot\
    \ find 'log2' in scope\n  num /= Int(log2(num))\n             ^~~~\n/tmp/tmpork5fj5_.swift:13:27:\
    \ error: cannot find 'pow' in scope\n    let temp = num / (Int(pow(2,Int(ceil(log2(num))))))\n\
    \                          ^~~\n/tmp/tmpork5fj5_.swift:13:37: error: cannot find\
    \ 'ceil' in scope\n    let temp = num / (Int(pow(2,Int(ceil(log2(num))))))\n \
    \                                   ^~~~\n/tmp/tmpork5fj5_.swift:13:42: error:\
    \ cannot find 'log2' in scope\n    let temp = num / (Int(pow(2,Int(ceil(log2(num))))))\n\
    \                                         ^~~~\n/tmp/tmpork5fj5_.swift:19:16:\
    \ error: cannot find 'pow' in scope\n    num /= Int(pow(2,Int(ceil(log2(num))))\n\
    \               ^~~\n/tmp/tmpork5fj5_.swift:19:26: error: cannot find 'ceil' in\
    \ scope\n    num /= Int(pow(2,Int(ceil(log2(num))))\n                        \
    \ ^~~~\n/tmp/tmpork5fj5_.swift:19:31: error: cannot find 'log2' in scope\n   \
    \ num /= Int(pow(2,Int(ceil(log2(num))))\n                              ^~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even: Int = 0\n    var odd: Int = 0\n    var n:\
    \ Int = 0\n    while num >= 0 {\n        n = num % 10\n        if n == 0 {\n \
    \           even++\n        } else if n != 0 {\n            odd++\n        }\n\
    \        num /= 10\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp9sy1pljs.swift:15:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            even++\n                ^~\n/tmp/tmp9sy1pljs.swift:17:16:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  odd++\n               ^~\n/tmp/tmp9sy1pljs.swift:19:13: error: left side of\
    \ mutating operator isn't mutable: 'num' is a 'let' constant\n        num /= 10\n\
    \        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenDigit = 0\n    var oddDigit = 0\n\n    //\
    \ get digits in number\n    let numDigits = (num / 10).rounded()\n\n    // get\
    \ number of even digits\n    for i in 0..<numDigits {\n        if num % 10 ==\
    \ 0 {\n            evenDigit += 1\n        } else {\n            oddDigit += 1\n\
    \        }\n        num /= 10\n    }\n\n    return (evenDigit, oddDigit)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpd9l7ecl5.swift:13:26: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Float16'\n    let numDigits = (num / 10).rounded()\n\
    \                     ~~~ ^ ~~\n/tmp/tmpd9l7ecl5.swift:13:26: note: overloads\
    \ for '/' exist with these partially matching parameter lists: (Double, Double),\
    \ (Float, Float), (Float16, Float16), (Float80, Float80)\n    let numDigits =\
    \ (num / 10).rounded()\n                         ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even, odd : Int\n    var sum : Int = 0\n    var\
    \ temp : Int = 0\n    \n    // Compute odd digits\n    for temp = num; temp !=\
    \ 0; temp = temp >> 1 {\n        odd = odd+temp\n    }\n    \n    // Compute even\
    \ digits\n    temp = odd\n    while temp != 0 {\n        even = even+temp%10\n\
    \        temp = temp / 10\n    }\n    \n    // Return the tuple for even_odd_count\n\
    \    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmphrmskwyj.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for temp = num; temp != 0; temp = temp >> 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0, odd = 1\n    while num > 0 {\n     \
    \   num /= 10\n        even += num & 1\n        odd *= 10\n    }\n    return (even,\
    \ odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7)\
    \ == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp198w3aq5.swift:11:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num /= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenDigit = 0\n    var oddDigit = 0\n\n    while\
    \ num > 0 {\n        var remaining = num % 10\n        oddDigit += (remaining\
    \ % 2)\n        num /= 10\n        evenDigit += (remaining % 2)\n    }\n\n   \
    \ return (evenDigit, oddDigit)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpgat08lvg.swift:15:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num /= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0, odd = 0, i = 1\n    var power = 1\n\
    \    var digit = num\n    while i < digit {\n        if ((digit % 10) == 0) {\n\
    \            even++\n        } else {\n            odd++\n        }\n        power\
    \ = power * 10\n        digit = digit / 10\n        i++\n    }\n\n    return ((even,\
    \ odd), (even + odd, odd))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpjqk8888d.swift:14:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            even++\n                ^~\n/tmp/tmpjqk8888d.swift:16:16:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  odd++\n               ^~\n/tmp/tmpjqk8888d.swift:20:10: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        i++\n         ^~\n/tmp/tmpjqk8888d.swift:23:12:\
    \ error: cannot convert return expression of type '((Int, Int), (Int, Int))' to\
    \ return type '(Int, Int)'\n    return ((even, odd), (even + odd, odd))\n    \
    \       ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (num / 10).truncatingRemainder(dividingBy:\
    \ 10).map { $0 + 1 }, (num %\n        10).truncatingRemainder(dividingBy: 10).map\
    \ { $0 + 1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpuhhk3yrw.swift:9:73: error: consecutive statements on a line must\
    \ be separated by ';'\n    return (num / 10).truncatingRemainder(dividingBy: 10).map\
    \ { $0 + 1 }, (num %\n                                                       \
    \                 ^\n                                                        \
    \                ;\n/tmp/tmpuhhk3yrw.swift:9:73: error: expected expression\n\
    \    return (num / 10).truncatingRemainder(dividingBy: 10).map { $0 + 1 }, (num\
    \ %\n                                                                        ^\n\
    /tmp/tmpuhhk3yrw.swift:9:23: error: value of type 'Int' has no member 'truncatingRemainder'\n\
    \    return (num / 10).truncatingRemainder(dividingBy: 10).map { $0 + 1 }, (num\
    \ %\n           ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let n = num.abs\n\n    var evenCount = 0\n    var\
    \ oddCount = 0\n    var sum = 0\n\n    // Find the sum of digits in n\n    sum\
    \ += n / 10_0\n    n %= 10_0\n\n    sum += n / 10_1\n    n %= 10_1\n\n    sum\
    \ += n / 10_2\n    n %= 10_2\n\n    // Traverse through the digits in reverse\n\
    \    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n\n    // If\
    \ the number is odd, find the number of odd digits\n    if sum > 0 {\n       \
    \ // If sum of digits is odd, oddCount is oddCount + 1\n        oddCount += Int(sum\
    \ % 2 == 1)\n        sum += sum / 2\n    }\n\n    // If the number is even, find\
    \ the number of even digits\n    if sum < 0 {\n        // If sum of digits is\
    \ even, evenCount is evenCount + 1\n        evenCount += Int(sum % 2 == 0)\n \
    \       sum += sum / 2\n    }\n\n    // Return results\n    return (evenCount,\
    \ oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpg15kubsm.swift:9:17: error: value of type 'Int' has no member 'abs'\n\
    \    let n = num.abs\n            ~~~ ^~~\n/tmp/tmpg15kubsm.swift:34:21: error:\
    \ no exact matches in call to initializer \n        oddCount += Int(sum % 2 ==\
    \ 1)\n                    ^\nSwift.Int:7:12: note: candidate expects value of\
    \ type 'Float16' for parameter #1 (got 'Bool')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Bool')\n    public init(_ source: Float)\n          \
    \ ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Bool')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Bool')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Bool')\n    public\
    \ init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate\
    \ expects value of type 'Builtin.Word' for parameter #1 (got 'Bool')\n    public\
    \ init(_ _v: Builtin.Word)\n           ^\n/tmp/tmpg15kubsm.swift:41:22: error:\
    \ no exact matches in call to initializer \n        evenCount += Int(sum % 2 ==\
    \ 0)\n                     ^\nSwift.Int:7:12: note: candidate expects value of\
    \ type 'Float16' for parameter #1 (got 'Bool')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Bool')\n    public init(_ source: Float)\n          \
    \ ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Bool')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Bool')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Bool')\n    public\
    \ init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate\
    \ expects value of type 'Builtin.W"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n\n    var\
    \ digit = num\n    while num != 0 {\n        digit = num / 10\n        if digit\
    \ % 2 == 0 {\n            evenCount += 1\n        } else {\n            oddCount\
    \ += 1\n        }\n        num /= 10\n    }\n\n    return (evenCount, oddCount)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp0cc6w8_u.swift:20:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num /= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var result: (Int, Int)\n\n    if num < 0 {\n     \
    \   return (num, 0)\n    }\n\n    // get power of 2 of num\n    let powerOf2 =\
    \ 2\n    let powerOf2Index = num.integerLog2(&powerOf2)\n    let powerOf2Len =\
    \ Int(powerOf2)\n\n    // get power of 2 of num\n    let powerOf2Index2 = num.integerLog2(&powerOf2)\n\
    \    let powerOf2Len2 = Int(powerOf2)\n\n    // get even power of 2\n    var evenPowerOf2\
    \ = 1\n    if powerOf2Index == 0 {\n        evenPowerOf2 = 2\n    }\n\n    //\
    \ get odd power of 2\n    var oddPowerOf2 = 1\n    if powerOf2Index2 == 0 {\n\
    \        oddPowerOf2 = 2\n    }\n\n    // get length of power of 2 that has the\
    \ most digits\n    var mostDigitsPower = 1\n    if powerOf2Len > powerOf2Len2\
    \ {\n        mostDigitsPower = powerOf2Len\n    } else {\n        mostDigitsPower\
    \ = powerOf2Len2\n    }\n\n    // get length of power of 2 that has the least\
    \ digits\n    var leastDigitsPower = 1\n    if powerOf2Len < powerOf2Len2 {\n\
    \        leastDigitsPower = powerOf2Len\n    } else {\n        leastDigitsPower\
    \ = powerOf2Len2\n    }\n\n    // get digits\n    var digits = \"\"\n    if mostDigitsPower\
    \ < leastDigitsPower {\n        digits = \"0\"\n    }\n\n    for i in 0..<mostDigitsPower\
    \ {\n        digits += \"0\"\n    }\n\n    let numString = digits.unicodeScalars\n\
    \    let numLen = numString.count\n\n    // get even digits\n    for i in 0..<powerOf2Len\
    \ {\n        var evenDigit = \"\"\n        if i % 2 == 0 {\n            let numStringDigit\
    \ = String(numString[Int(i)])\n            evenDigit += numStringDigit\n     \
    \   }\n\n        // get odd digits\n        if i < (powerOf2Len - 1) {\n     \
    \       let numStringDigit = String(numString[Int(i) + 1])\n            evenDigit\
    \ += numStringDigit\n        }\n\n        result = (Int(evenDigit), result!.0)\n\
    \    }\n\n    // get odd digits\n    for i in 0..<powerOf2Len {\n        var oddDigit\
    \ = \"\"\n        if i < (powerOf2Len - 1) {\n            let numStringDigit =\
    \ String(numString[Int(i) + 1])\n            oddDigit += numStringDigit\n    \
    \    }\n\n        result = (result!.0, Int(oddDigit))\n    }\n\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp343qf465.swift:17:29: error: value of type 'Int' has no member\
    \ 'integerLog2'\n    let powerOf2Index = num.integerLog2(&powerOf2)\n        \
    \                ~~~ ^~~~~~~~~~~\n/tmp/tmp343qf465.swift:17:41: error: cannot\
    \ pass immutable value as inout argument: 'powerOf2' is a 'let' constant\n   \
    \ let powerOf2Index = num.integerLog2(&powerOf2)\n                           \
    \             ^~~~~~~~~\n/tmp/tmp343qf465.swift:16:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let powerOf2 = 2\n    ^~~\n    var\n/tmp/tmp343qf465.swift:21:30:\
    \ error: value of type 'Int' has no member 'integerLog2'\n    let powerOf2Index2\
    \ = num.integerLog2(&powerOf2)\n                         ~~~ ^~~~~~~~~~~\n/tmp/tmp343qf465.swift:21:42:\
    \ error: cannot pass immutable value as inout argument: 'powerOf2' is a 'let'\
    \ constant\n    let powerOf2Index2 = num.integerLog2(&powerOf2)\n            \
    \                             ^~~~~~~~~\n/tmp/tmp343qf465.swift:16:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let powerOf2 = 2\n    ^~~\n    var\n\
    /tmp/tmp343qf465.swift:69:50: error: no exact matches in call to subscript \n\
    \            let numStringDigit = String(numString[Int(i)])\n                \
    \                                 ^\nSwift.String.UnicodeScalarView:7:23: note:\
    \ candidate expects value of type 'String.UnicodeScalarView.Index' (aka 'String.Index')\
    \ for parameter #1 (got 'Int')\n    @inlinable public subscript(position: String.UnicodeScalarView.Index)\
    \ -> Unicode.Scalar { get }\n                      ^\nSwift.String.UnicodeScalarView:4:12:\
    \ note: candidate expects value of type 'Range<String.UnicodeScalarView.Index>'\
    \ (aka 'Range<String.Index>') for parameter #1 (got 'Int')\n    public subscript(r:\
    \ Range<String.UnicodeScalarView.Index>) -> String.UnicodeScalarView.SubSequence\
    \ { get }\n           ^\nSwift.Collection:3:23: note: candidate expects value\
    \ of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\n/tmp/tmp343qf465.swift:75:50: error: no ex"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    // Return zero for negative number\n    if num < 0\
    \ {\n        return (0, 0)\n    }\n    // Create a reversed number\n    var reversed\
    \ = num\n    if num < 0 {\n        reversed = reversed*-1\n    }\n    // Initialize\
    \ odd counter to zero\n    var odd = Int()\n    // Initialize even counter to\
    \ zero\n    var even = Int()\n    // Loop over each digit in reversed\n    while\
    \ reversed != 0 {\n        // If the current digit (in the reversed number) is\
    \ a 1, add one to even counter\n        if reversed % 10 == 1 {\n            even\
    \ += Int()\n        }\n        // If the current digit (in the reversed number)\
    \ is a 0, subtract one from odd counter\n        else if reversed % 10 == 0 {\n\
    \            odd += Int()\n        }\n        // Remove the 10 from the reversed\
    \ number\n        reversed = reversed / 10\n    }\n    return (odd, even)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpes22m2j0.swift:16:28: error: missing whitespace between '*' and\
    \ '-' operators\n        reversed = reversed*-1\n                           ^~\n\
    \                             \n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num < 0 {\n        throw IllegalArgumentException(\"\
    illegal argument for even_odd_count\")\n    }\n    var evenCount = 0\n    var\
    \ oddCount = 0\n    for digit in String(num) {\n        if digit == \"0\" {\n\
    \            evenCount += 1\n        } else {\n            oddCount += 1\n   \
    \     }\n    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmptv0oyzxn.swift:10:15: error: cannot find 'IllegalArgumentException'\
    \ in scope\n        throw IllegalArgumentException(\"illegal argument for even_odd_count\"\
    )\n              ^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptv0oyzxn.swift:10:9: error:\
    \ error is not handled because the enclosing function is not declared 'throws'\n\
    \        throw IllegalArgumentException(\"illegal argument for even_odd_count\"\
    )\n        ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenDigitsCount = 0\n    var oddDigitsCount =\
    \ 0\n    var numberAsString = \"\"\n\n    if num == 0 {\n        return (evenDigitsCount,\
    \ oddDigitsCount)\n    }\n    numberAsString = String(num)\n    var chars = [Character]()\n\
    \    for char in numberAsString {\n        chars.append(char)\n    }\n    for\
    \ char in chars {\n        if char.isEven() {\n            evenDigitsCount = evenDigitsCount\
    \ + 1\n        }\n        if char.isOdd() {\n            oddDigitsCount = oddDigitsCount\
    \ + 1\n        }\n    }\n    return (evenDigitsCount, oddDigitsCount)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpo7dt1hvh.swift:22:17: error: value of type 'Character' has no member\
    \ 'isEven'\n        if char.isEven() {\n           ~~~~ ^~~~~~\n/tmp/tmpo7dt1hvh.swift:25:17:\
    \ error: value of type 'Character' has no member 'isOdd'\n        if char.isOdd()\
    \ {\n           ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    \n  \
    \  if num > 0 {\n        let digitCount = num.intDigits.count\n        for (_,\
    \ digit) in num.intDigits.enumerated() {\n            if digit % 2 == 0 {\n  \
    \              evenCount += 1\n            } else {\n                oddCount\
    \ += 1\n            }\n        }\n    }\n    return (evenCount, oddCount)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp80edrqfh.swift:13:30: error: value of type 'Int' has no member\
    \ 'intDigits'\n        let digitCount = num.intDigits.count\n                \
    \         ~~~ ^~~~~~~~~\n/tmp/tmp80edrqfh.swift:14:9: error: failed to produce\
    \ diagnostic for expression; please submit a bug report (https://swift.org/contributing/#reporting-bugs)\
    \ and include the project\n        for (_, digit) in num.intDigits.enumerated()\
    \ {\n        ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let digits = String(num).characters.map { Int(String($0))\
    \ }\n    var evenDigits = 0\n    var oddDigits = 0\n    for digit in digits {\n\
    \        if digit % 2 == 0 {\n            evenDigits += 1\n        } else {\n\
    \            oddDigits += 1\n        }\n    }\n    return (evenDigits, oddDigits)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp9x8o2wm8.swift:9:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let digits = String(num).characters.map { Int(String($0))\
    \ }\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9x8o2wm8.swift:13:12: error: value of optional type\
    \ 'Int?' must be unwrapped to a value of type 'Int'\n        if digit % 2 == 0\
    \ {\n           ^\n/tmp/tmp9x8o2wm8.swift:13:12: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n        if digit %\
    \ 2 == 0 {\n           ^\n           (     ?? <#default value#>)\n/tmp/tmp9x8o2wm8.swift:13:12:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if digit % 2 == 0 {\n           ^\n                !\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even, odd = 0, 1\n    for numDigit in 0..<Int(pow(2.0,\
    \ Double(num).bitWidth)) {\n        let lastDigit = Double(num) % pow(2.0, Double(numDigit).bitWidth)\n\
    \        if lastDigit > 0 {\n            odd += lastDigit\n        } else {\n\
    \            even += lastDigit\n        }\n        num /= 10\n    }\n    return\
    \ (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmppppxkgil.swift:9:24: error: expected pattern\n    var even, odd\
    \ = 0, 1\n                       ^\n/tmp/tmppppxkgil.swift:9:9: error: type annotation\
    \ missing in pattern\n    var even, odd = 0, 1\n        ^\n/tmp/tmppppxkgil.swift:10:29:\
    \ error: cannot find 'pow' in scope\n    for numDigit in 0..<Int(pow(2.0, Double(num).bitWidth))\
    \ {\n                            ^~~\n/tmp/tmppppxkgil.swift:10:50: error: value\
    \ of type 'Double' has no member 'bitWidth'\n    for numDigit in 0..<Int(pow(2.0,\
    \ Double(num).bitWidth)) {\n                                     ~~~~~~~~~~~ ^~~~~~~~\n\
    /tmp/tmppppxkgil.swift:11:39: error: cannot find 'pow' in scope\n        let lastDigit\
    \ = Double(num) % pow(2.0, Double(numDigit).bitWidth)\n                      \
    \                ^~~\n/tmp/tmppppxkgil.swift:11:65: error: reference to member\
    \ 'bitWidth' cannot be resolved without a contextual type\n        let lastDigit\
    \ = Double(num) % pow(2.0, Double(numDigit).bitWidth)\n                      \
    \                                          ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let x = num / 10\n    let y = num % 10\n    let count\
    \ = (x % 2 == 0) && (y % 2 != 0)\n    return (x, y)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpgnwow2d9/tmpgnwow2d9.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba520405c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5200fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5200fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5200fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgnwow2d9                        0x00005573d2beb304 <unavailable> + 4868

    5    libc.so.6                          0x00002ba5205f1460 __libc_start_main +
    245

    6    tmpgnwow2d9                        0x00005573d2beaf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    for _\
    \ in 0..<(floor(log10(num)) + 1) {\n        if num % 10 == 0 {\n            evenCount\
    \ += 1\n        } else if num % 10 != 0 {\n            oddCount += 1\n       \
    \ }\n        num /= 10\n    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp5swyw9b5.swift:11:19: error: cannot find 'floor' in scope\n   \
    \ for _ in 0..<(floor(log10(num)) + 1) {\n                  ^~~~~\n/tmp/tmp5swyw9b5.swift:11:25:\
    \ error: cannot find 'log10' in scope\n    for _ in 0..<(floor(log10(num)) + 1)\
    \ {\n                        ^~~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even, odd: Int = 0\n    let count = String(num).characters.count\n\
    \    for index in 0..<count {\n        let digit = String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpddqp_9ru.swift:12:1798: error: structure nesting level exceeded\
    \ maximum of 256\n        let digit = String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(St"
  stdout: ''
  timestamp: 1660013851
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    guard num >= 0 else { return (-1, 1) }\n    guard\
    \ num < 10 else { return (0, 0) }\n\n    var even = 0, odd = 1\n    for digit\
    \ in String(num).unicodeScalars {\n        if digit % 2 == 0 {\n            even\
    \ = even + digit\n        } else {\n            odd = odd + digit\n        }\n\
    \    }\n\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp_sw5ddl5.swift:14:12: error: cannot convert value of type 'Unicode.Scalar'\
    \ to expected argument type 'Int'\n        if digit % 2 == 0 {\n           ^\n\
    /tmp/tmp_sw5ddl5.swift:15:27: error: cannot convert value of type 'Unicode.Scalar'\
    \ to expected argument type 'Int'\n            even = even + digit\n         \
    \                 ^\n/tmp/tmp_sw5ddl5.swift:17:25: error: cannot convert value\
    \ of type 'Unicode.Scalar' to expected argument type 'Int'\n            odd =\
    \ odd + digit\n                        ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (num.truncatingRemainder(dividingBy: 2).map\
    \ { $0 / 2 }.reduce(by: 1), num.truncatingRemainder(dividingBy: 2).map { $0 /\
    \ 2 }.reduce(by: 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpn9qlduzo.swift:9:17: error: value of type 'Int' has no member 'truncatingRemainder'\n\
    \    return (num.truncatingRemainder(dividingBy: 2).map { $0 / 2 }.reduce(by:\
    \ 1), num.truncatingRemainder(dividingBy: 2).map { $0 / 2 }.reduce(by: 1))\n \
    \           ~~~ ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpn9qlduzo.swift:9:86: error: value\
    \ of type 'Int' has no member 'truncatingRemainder'\n    return (num.truncatingRemainder(dividingBy:\
    \ 2).map { $0 / 2 }.reduce(by: 1), num.truncatingRemainder(dividingBy: 2).map\
    \ { $0 / 2 }.reduce(by: 1))\n                                                \
    \                                 ~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num >= 0 {\n        var even:Int = 0\n        var\
    \ odd:Int = 0\n        for _ in 0..(num / 2) {\n            even++\n        }\n\
    \        for _ in (num % 2..<num) {\n            odd++\n        }\n        return\
    \ (even, odd)\n    } else {\n        return (abs(num), -abs(num))\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp03_l_ynb.swift:12:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for _ in 0..(num / 2) {\n                  ^~\n\
    \                  ...\n/tmp/tmp03_l_ynb.swift:16:16: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            odd++\n               ^~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evens, odds int\n    let remainder = num % 10\n\
    \    switch remainder {\n    case 0: evens += 1 case 1: odds += 1\n    }\n   \
    \ return (evens, odds)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp3xs_i__t.swift:9:21: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n    var evens, odds\
    \ int\n                    ^\n/tmp/tmp3xs_i__t.swift:9:21: note: join the identifiers\
    \ together\n    var evens, odds int\n               ~~~~~^~~\n               oddsint\n\
    /tmp/tmp3xs_i__t.swift:9:21: note: join the identifiers together with camel-case\n\
    \    var evens, odds int\n               ~~~~~^~~\n               oddsInt\n/tmp/tmp3xs_i__t.swift:9:9:\
    \ error: type annotation missing in pattern\n    var evens, odds int\n       \
    \ ^\n/tmp/tmp3xs_i__t.swift:9:16: error: type annotation missing in pattern\n\
    \    var evens, odds int\n               ^\n/tmp/tmp3xs_i__t.swift:11:5: error:\
    \ switch must be exhaustive\n    switch remainder {\n    ^\n/tmp/tmp3xs_i__t.swift:11:5:\
    \ note: do you want to add a default clause?\n    switch remainder {\n    ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var num1 = abs(num)\n    var countEven = 0\n    var\
    \ countOdd = 0\n    var currentDigit = 0\n    for currentDigit in num1 {\n   \
    \     if currentDigit % 2 == 0 {\n            countEven++\n        } else {\n\
    \            countOdd++\n        }\n    }\n    return (countEven, countOdd)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpr2ym4vvl.swift:13:25: error: for-in loop requires 'Int' to conform\
    \ to 'Sequence'\n    for currentDigit in num1 {\n                        ^~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num == 0 { return (0, 0), 1 }\n    var odd = num\n\
    \    var even = num\n\n    while even > 0 {\n        odd = odd / 10\n        even\
    \ = even % 10\n    }\n\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpa365pnmb.swift:9:32: error: consecutive statements on a line must\
    \ be separated by ';'\n    if num == 0 { return (0, 0), 1 }\n                \
    \               ^\n                               ;\n/tmp/tmpa365pnmb.swift:9:32:\
    \ error: expected expression\n    if num == 0 { return (0, 0), 1 }\n         \
    \                      ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even, odd = 0, 1\n    func isEven(index: Int,\
    \ num: Int) {\n        if num % 2 == 0 {\n            even++\n        } else {\n\
    \            odd++\n        }\n    }\n    func isOdd(index: Int, num: Int) {\n\
    \        if num % 2 != 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    for index in 0..<(10 * num.magnitude) {\n     \
    \   var numIndex: Int = index\n        while numIndex > 0 {\n            isEven(numIndex,\
    \ num: num)\n            isOdd(numIndex, num: num)\n            numIndex -= 1\n\
    \        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpcqstkdxl.swift:9:24: error: expected pattern\n    var even, odd\
    \ = 0, 1\n                       ^\n/tmp/tmpcqstkdxl.swift:9:9: error: type annotation\
    \ missing in pattern\n    var even, odd = 0, 1\n        ^\n/tmp/tmpcqstkdxl.swift:12:17:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  even++\n                ^~\n/tmp/tmpcqstkdxl.swift:14:16: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            odd++\n          \
    \     ^~\n/tmp/tmpcqstkdxl.swift:19:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            even++\n                ^~\n/tmp/tmpcqstkdxl.swift:21:16:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  odd++\n               ^~\n/tmp/tmpcqstkdxl.swift:25:29: error: cannot convert\
    \ value of type 'UInt' to specified type 'Int'\n        var numIndex: Int = index\n\
    \                            ^~~~~\n                            Int( )\n/tmp/tmpcqstkdxl.swift:27:19:\
    \ error: missing argument label 'index:' in call\n            isEven(numIndex,\
    \ num: num)\n                  ^\n                   index: \n/tmp/tmpcqstkdxl.swift:28:18:\
    \ error: missing argument label 'index:' in call\n            isOdd(numIndex,\
    \ num: num)\n                 ^\n                  index: \n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n\tlet result = num % 10\n\tlet remainder = num / 10\n\t\
    return (remainder % 2 == 0 && result % 2 == 0) || (remainder % 2 != 0 && result\
    \ % 2 != 0), result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpk0vlm04a.swift:11:91: error: consecutive statements on a line must\
    \ be separated by ';'\n        return (remainder % 2 == 0 && result % 2 == 0)\
    \ || (remainder % 2 != 0 && result % 2 != 0), result\n                       \
    \                                                                          ^\n\
    \                                                                            \
    \                     ;\n/tmp/tmpk0vlm04a.swift:11:91: error: expected expression\n\
    \        return (remainder % 2 == 0 && result % 2 == 0) || (remainder % 2 != 0\
    \ && result % 2 != 0), result\n                                              \
    \                                                   ^\n/tmp/tmpk0vlm04a.swift:11:49:\
    \ error: cannot convert return expression of type 'Bool' to return type '(Int,\
    \ Int)'\n        return (remainder % 2 == 0 && result % 2 == 0) || (remainder\
    \ % 2 != 0 && result % 2 != 0), result\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n  var even, odd = 0, 1\n  for n in num {\n    if n%2 ==\
    \ 0 {\n      even += n\n    } else {\n      odd += n\n    }\n  }\n  return (even,\
    \ odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7)\
    \ == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpjxod1mke.swift:9:22: error: expected pattern\n  var even, odd =\
    \ 0, 1\n                     ^\n/tmp/tmpjxod1mke.swift:9:7: error: type annotation\
    \ missing in pattern\n  var even, odd = 0, 1\n      ^\n/tmp/tmpjxod1mke.swift:10:12:\
    \ error: for-in loop requires 'Int' to conform to 'Sequence'\n  for n in num {\n\
    \           ^~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (even_count(num), odd_count(num))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpyhbvukeo.swift:9:13: error: cannot find 'even_count' in scope\n\
    \    return (even_count(num), odd_count(num))\n            ^~~~~~~~~~\n/tmp/tmpyhbvukeo.swift:9:30:\
    \ error: cannot find 'odd_count' in scope\n    return (even_count(num), odd_count(num))\n\
    \                             ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even: Int = 0\n    var odd: Int = 0\n    var remainder:\
    \ Int\n\n    while num > 0 {\n        remainder = num % 10\n        even = even\
    \ * 10 + remainder\n        odd = odd * 10 + remainder\n        num /= 10\n  \
    \  }\n\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp44paqqqa.swift:17:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num /= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var odd = 0\n    var even = 0\n\n    while num > 0\
    \ {\n        even += num / 10\n        num %= 10\n    }\n\n    odd = even + 1\
    \ // + 1 because even has 1 even digit and odd has 0 even digits\n\n    return\
    \ (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpciqsk39k.swift:14:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0, odd = 1\n    for _ in 0 ..< num {\n\
    \        if num % 2 == 0 {\n            even += 1\n        } else {\n        \
    \    odd += 1\n        }\n        num /= 10\n    }\n    return (even, odd)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpl3lqqgsu.swift:16:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num /= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num < 0 {\n        return (num, num)\n    }\n \
    \   var odd = 0\n    var even = 0\n    var i = 2\n    while num > 0 {\n      \
    \  if num % i == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        i += 1\n        num /= 10\n    }\n    return (even,\
    \ odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7)\
    \ == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpdd8bsl6g.swift:22:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num /= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: -1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenDigits = 0\n    var oddDigits = 0\n    var\
    \ remainder = num\n\n    while remainder >= 0 {\n        remainder %= 10\n   \
    \     evenDigits += Int(remainder) / 2\n        remainder = Int(remainder) - Int(remainder)\
    \ / 10\n        oddDigits += Int(remainder) / 2\n    }\n\n    return (evenDigits,\
    \ oddDigits)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013828
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let digits = num % 10\n    if digits == 0 {\n    \
    \    return (1, 0)\n    }\n    return (digits + 1, digits)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp33q362rp/tmp33q362rp.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08a66dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08a63d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08a63d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08a63d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33q362rp                        0x0000557ef2ef6304 <unavailable> + 4868

    5    libc.so.6                          0x00002b08a68c7460 __libc_start_main +
    245

    6    tmp33q362rp                        0x0000557ef2ef5f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    // Write your code here.\n    if num == 0 { return\
    \ (1, 0) }\n\n    var even = 1\n    var odd = 0\n\n    for i in 1...num {\n  \
    \      if i % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp4xfx7cdh/tmp4xfx7cdh.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4323d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4320cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4320cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4320cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4xfx7cdh                        0x000055aba02ab3f4 <unavailable> + 5108

    5    libc.so.6                          0x00002ae4325c2460 __libc_start_main +
    245

    6    tmp4xfx7cdh                        0x000055aba02ab059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    func isOdd(_ i: Int) -> Bool {\n        return i %\
    \ 2 == 1\n    }\n    func isEven(_ i: Int) -> Bool {\n        return i % 2 ==\
    \ 0\n    }\n    var evenCount = 0\n    var oddCount = 0\n    for i in 0..<num.count\
    \ {\n        if isEven(num[i]) {\n            evenCount += 1\n        } else {\n\
    \            oddCount += 1\n        }\n    }\n    return (evenCount, oddCount)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpzwxjlnru.swift:17:22: error: value of type 'Int' has no member\
    \ 'count'\n    for i in 0..<num.count {\n                 ~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num < 0 {\n        guard let negative = num where\
    \ negative >= 0 else { fatalError() }\n        num = -num\n    }\n    guard num\
    \ > 0 else { fatalError() }\n    var evenDigits = Int()\n    var oddDigits = Int()\n\
    \    for _ in 1...num {\n        guard num >= 0 else {\n            fatalError()\n\
    \        }\n        let remainder = num % 10\n        if remainder % 2 == 0 {\n\
    \            evenDigits += 1\n        } else {\n            oddDigits += 1\n \
    \       }\n        num = num / 10\n    }\n    return (evenDigits, oddDigits)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp5nuu5t8m.swift:10:34: error: expected ',' joining parts of a multi-clause\
    \ condition\n        guard let negative = num where negative >= 0 else { fatalError()\
    \ }\n                                ~^~~~~\n                                ,\n\
    /tmp/tmp5nuu5t8m.swift:10:15: error: initializer for conditional binding must\
    \ have Optional type, not 'Int'\n        guard let negative = num where negative\
    \ >= 0 else { fatalError() }\n              ^              ~~~\n/tmp/tmp5nuu5t8m.swift:11:9:\
    \ error: cannot assign to value: 'num' is a 'let' constant\n        num = -num\n\
    \        ^~~\n/tmp/tmp5nuu5t8m.swift:26:9: error: cannot assign to value: 'num'\
    \ is a 'let' constant\n        num = num / 10\n        ^~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0, odd = 1\n    for n in 1...num {\n  \
    \      if n % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpnfqc_2r3.swift:12:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            even++\n                ^~\n/tmp/tmpnfqc_2r3.swift:14:16:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  odd++\n               ^~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    guard num <= 0 else {\n        return (0, 0)\n   \
    \ }\n    var evenDigitCount = 0\n    var oddDigitCount = 0\n    var remainder\
    \ = num\n    while remainder > 0 {\n        remainder /= 10\n        if remainder\
    \ % 2 == 0 {\n            evenDigitCount += 1\n        } else {\n            oddDigitCount\
    \ += 1\n        }\n    }\n    return (evenDigitCount, oddDigitCount)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpo0ta4xh8/tmpo0ta4xh8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b817a4e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b817a1d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b817a1d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b817a1d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo0ta4xh8                        0x00005650996b8304 <unavailable> + 4868

    5    libc.so.6                          0x00002b817a6cd460 __libc_start_main +
    245

    6    tmpo0ta4xh8                        0x00005650996b7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num == 0 || num == 1 {\n        return (0, 0)\n\
    \    }\n    if num < 0 {\n        return (num / 2, num % 2)\n    }\n    if num\
    \ % 2 == 0 {\n        return (2, 1)\n    }\n    return (num / 2, num % 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp11dlamov/tmp11dlamov.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace7e15fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace7de56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace7de56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace7de557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp11dlamov                        0x0000565431e5f304 <unavailable> + 4868

    5    libc.so.6                          0x00002ace7e34b460 __libc_start_main +
    245

    6    tmp11dlamov                        0x0000565431e5ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var oddCount = 0\n    var evenCount = 0\n    var digit\
    \ = 0\n    var isEven = false\n\n    while num != 0 {\n        digit = num % 10\n\
    \        isEven = (digit % 2) == 0\n        if (isEven) {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n        num = num / 10\n\
    \    }\n\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmppaobc7ty.swift:18:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            evenCount++\n                     ^~\n/tmp/tmppaobc7ty.swift:20:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  oddCount++\n                    ^~\n/tmp/tmppaobc7ty.swift:22:9: error: cannot\
    \ assign to value: 'num' is a 'let' constant\n        num = num / 10\n       \
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    var count = 0\n\
    \    for n in num {\n        count = count + 1\n        if n % 2 == 0 {\n    \
    \        even = even + 1\n        } else {\n            odd = odd + 1\n      \
    \  }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1,\
    \ 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp0fs8amdb.swift:12:14: error: for-in loop requires 'Int' to conform\
    \ to 'Sequence'\n    for n in num {\n             ^~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even, odd = 0, 1\n    var numDigits = Int(NSString(string:\
    \ String(num)).length)\n    if numDigits > 0 {\n        let remainder = num %\
    \ 10\n        if remainder == 0 {\n            even++\n        } else {\n    \
    \        odd++\n        }\n        numDigits = numDigits - 1\n    }\n    return\
    \ (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpfex8g2m6.swift:9:24: error: expected pattern\n    var even, odd\
    \ = 0, 1\n                       ^\n/tmp/tmpfex8g2m6.swift:9:9: error: type annotation\
    \ missing in pattern\n    var even, odd = 0, 1\n        ^\n/tmp/tmpfex8g2m6.swift:10:25:\
    \ error: cannot find 'NSString' in scope\n    var numDigits = Int(NSString(string:\
    \ String(num)).length)\n                        ^~~~~~~~\n/tmp/tmpfex8g2m6.swift:14:17:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  even++\n                ^~\n/tmp/tmpfex8g2m6.swift:16:16: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            odd++\n          \
    \     ^~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenDigits = 0\n    var oddDigits = 0\n    if\
    \ num < 0 {\n        oddDigits = num / 10\n        num = num % 10\n    }\n   \
    \ for _ in 0..<num {\n        if num % 2 == 0 {\n            evenDigits += 1\n\
    \        }\n        num /= 2\n    }\n    return (evenDigits, oddDigits)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpabw7mao1.swift:13:9: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n        num = num % 10\n        ^~~\n/tmp/tmpabw7mao1.swift:19:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num /= 2\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let numStr = String(num)\n    var evenCount = 0\n\
    \    var oddCount = 0\n    for char in numStr {\n        if char == \"0\" {\n\
    \            evenCount++\n        } else if char == \"1\" {\n            oddCount++\n\
    \        }\n    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpetmwwq7c.swift:14:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            evenCount++\n                     ^~\n/tmp/tmpetmwwq7c.swift:16:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  oddCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount : Int = 0\n    var oddCount : Int =\
    \ 0\n\n    for i in 0..<num {\n        if num % 2 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n    }\n    return (evenCount,\
    \ oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpcrbswfnp.swift:14:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            evenCount++\n                     ^~\n/tmp/tmpcrbswfnp.swift:16:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  oddCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0, odd = 0, i = 0\n    while (i < num)\
    \ {\n        i += 1\n        if (num % 2 == 0) {\n            even += 1\n    \
    \    } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpisv_kw_j/tmpisv_kw_j.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9b3b87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9b387eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9b387e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9b387d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpisv_kw_j                        0x0000561a40f7c304 <unavailable> + 4868

    5    libc.so.6                          0x00002af9b3d73460 __libc_start_main +
    245

    6    tmpisv_kw_j                        0x0000561a40f7bf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even, odd = 0, 0\n    for _ in 1..<num {\n   \
    \     switch num % 10 {\n        case 0: even++\n        case 1: odd++\n     \
    \   }\n        num /= 10\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpg6czheq3.swift:9:24: error: expected pattern\n    var even, odd\
    \ = 0, 0\n                       ^\n/tmp/tmpg6czheq3.swift:9:9: error: type annotation\
    \ missing in pattern\n    var even, odd = 0, 0\n        ^\n/tmp/tmpg6czheq3.swift:12:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        case\
    \ 0: even++\n                    ^~\n/tmp/tmpg6czheq3.swift:13:20: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        case 1: odd++\n \
    \                  ^~\n/tmp/tmpg6czheq3.swift:11:9: error: switch must be exhaustive\n\
    \        switch num % 10 {\n        ^\n/tmp/tmpg6czheq3.swift:11:9: note: do you\
    \ want to add a default clause?\n        switch num % 10 {\n        ^\n/tmp/tmpg6czheq3.swift:15:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num /= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return even_odd_count_recursive(num)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp40575zcz.swift:9:12: error: cannot find 'even_odd_count_recursive'\
    \ in scope\n    return even_odd_count_recursive(num)\n           ^~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var divisor\
    \ = num\n    while divisor > 0 {\n        divisor /= 10\n        if num%2 == 0\
    \ {\n            evenCount += 1\n        } else {\n            oddCount += 1\n\
    \        }\n    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpu853gwvq/tmpu853gwvq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91572eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9156fe1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9156fe1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9156fe07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu853gwvq                        0x000055888fbd53cd <unavailable> + 5069

    5    libc.so.6                          0x00002b91574d6460 __libc_start_main +
    245

    6    tmpu853gwvq                        0x000055888fbd4f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (num.truncatingRemainder(dividingBy: 2).isMultiple(of:\
    \ 2), num.truncatingRemainder(dividingBy: 2).isMultiple(of: 1) ? 2 : 1)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpjcza9c8m.swift:9:17: error: value of type 'Int' has no member 'truncatingRemainder'\n\
    \    return (num.truncatingRemainder(dividingBy: 2).isMultiple(of: 2), num.truncatingRemainder(dividingBy:\
    \ 2).isMultiple(of: 1) ? 2 : 1)\n            ~~~ ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpjcza9c8m.swift:9:75:\
    \ error: value of type 'Int' has no member 'truncatingRemainder'\n    return (num.truncatingRemainder(dividingBy:\
    \ 2).isMultiple(of: 2), num.truncatingRemainder(dividingBy: 2).isMultiple(of:\
    \ 1) ? 2 : 1)\n                                                              \
    \        ~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: -1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenDigits = 0\n    var oddDigits = 0\n    var\
    \ i = num\n\n    while i >= 0 {\n        i /= 10\n        if i % 2 == 0 {\n  \
    \          evenDigits += 1\n        } else {\n            oddDigits += 1\n   \
    \     }\n    }\n\n    return (evenDigits, oddDigits)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013828
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var (even, odd) = (0, 0)\n\n    for i in 1...num {\n\
    \        let digit = num / pow(10, i)\n        if digit % 2 == 0 {\n         \
    \   even += 1\n        } else {\n            odd += 1\n        }\n    }\n    return\
    \ (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpgnvitj92.swift:12:27: error: cannot find 'pow' in scope\n     \
    \   let digit = num / pow(10, i)\n                          ^~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenDigit = 0\n    var oddDigit = 0\n\n    //\
    \ Find all the even digits and the odd digits\n    for n in num.magnitude.magnitude.digits(from:\
    \ 0, to: 10).reverse() {\n        if n % 2 == 0 {\n            evenDigit += 1\n\
    \        } else {\n            oddDigit += 1\n        }\n    }\n\n    return (evenDigit,\
    \ oddDigit)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp6f24pm97.swift:13:38: error: value of type 'UInt' has no member\
    \ 'digits'\n    for n in num.magnitude.magnitude.digits(from: 0, to: 10).reverse()\
    \ {\n             ~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let count = (num as! NSString).length\n    let evenCount\
    \ = (count % 2 == 0)\n    let oddCount = (count % 2 != 0)\n    return (evenCount,\
    \ oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpmdtev583.swift:9:26: error: cannot find type 'NSString' in scope\n\
    \    let count = (num as! NSString).length\n                         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    guard num >= 0 else {\n        return (0, 0)\n   \
    \ }\n    var even = 0\n    var odd = 0\n    while num > 0 {\n        num /= 10\n\
    \        odd += (num % 2 == 1)\n        even += (num % 2 == 0)\n    }\n    return\
    \ (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp8aftahvy.swift:15:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num /= 10\n        ~~~ ^\n/tmp/tmp8aftahvy.swift:16:25:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \        odd += (num % 2 == 1)\n                        ^\n/tmp/tmp8aftahvy.swift:17:26:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \        even += (num % 2 == 0)\n                         ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    var num = abs(num)\n\
    \    // check odd num\n    if num%2 != 0 {\n        odd++\n    }\n    // check\
    \ even num\n    if num%2 == 0 {\n        even++\n    }\n    return (even, odd)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpehr7tl55.swift:14:12: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        odd++\n           ^~\n/tmp/tmpehr7tl55.swift:18:13:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        even++\n\
    \            ^~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num < 0 {\n        return (-1, 1)\n    }\n    var\
    \ even = 0, odd = 0, count = 0\n    for numInt := num; numInt > 0; numInt /= 10\
    \ {\n        if numInt%2 == 0 {\n            even += count\n        }\n      \
    \  else {\n            odd += count\n        }\n        count += 1\n    }\n  \
    \  return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmphkfxy6bx.swift:13:17: error: expected type\n    for numInt := num;\
    \ numInt > 0; numInt /= 10 {\n                ^\n                 <#type#>\n/tmp/tmphkfxy6bx.swift:13:17:\
    \ error: expected 'in' after for-each pattern\n    for numInt := num; numInt >\
    \ 0; numInt /= 10 {\n                ^\n/tmp/tmphkfxy6bx.swift:13:17: error: expected\
    \ Sequence expression for for-each loop\n    for numInt := num; numInt > 0; numInt\
    \ /= 10 {\n                ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even, odd: Int\n    even = 0\n    odd = 0\n  \
    \  for _ in 0..<10 {\n        switch num % 10 {\n        case 0: even += 1; break\n\
    \        case 1: odd += 1; break\n        default: break\n        }\n        num\
    \ /= 10\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1,\
    \ 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp68rum_0l.swift:18:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num /= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, -1)\n    }\n    let\
    \ numStr = String(num)\n    let evenCount = 0\n    var oddCount = 0\n    for char\
    \ in numStr {\n        if char == \"0\" {\n            evenCount += 1\n      \
    \  } else {\n            oddCount += 1\n        }\n    }\n    return (evenCount,\
    \ oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp0w62izc5.swift:17:23: error: left side of mutating operator isn't\
    \ mutable: 'evenCount' is a 'let' constant\n            evenCount += 1\n     \
    \       ~~~~~~~~~ ^\n/tmp/tmp0w62izc5.swift:13:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let evenCount = 0\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    var temp: Int\n\
    \    for num != 0 {\n        temp = num % 10\n        num = num / 10\n       \
    \ if temp % 2 == 0 {\n            even = even * 10 + temp\n        } else {\n\
    \            odd = odd * 10 + temp\n        }\n    }\n    return (even, odd)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp_etyp1oa.swift:12:13: error: expected 'in' after for-each pattern\n\
    \    for num != 0 {\n            ^\n/tmp/tmp_etyp1oa.swift:12:13: error: unary\
    \ operator cannot be separated from its operand\n    for num != 0 {\n        \
    \    ^ ~\n              \n/tmp/tmp_etyp1oa.swift:12:13: error: '!=' is not a prefix\
    \ unary operator\n    for num != 0 {\n            ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenNum = 0\n    var oddNum = 0\n\n    // To find\
    \ the even and odd numbers, we can use the following logic:\n    // If we have\
    \ a number 'n', we add its digits to 'evenNum' and 'oddNum' only if\n    // the\
    \ number is even; if the number is odd, we add its digits to 'evenNum' and\n \
    \   // 'oddNum', and then subtract 1 from both 'evenNum' and 'oddNum'.\n\n   \
    \ // Initialize two counters; one for even and one for odd numbers.\n    for digit\
    \ in String(num) {\n        if digit == \"0\" {\n            evenNum += 0\n  \
    \          oddNum += 0\n        } else if digit == \"1\" {\n            evenNum\
    \ += 1\n            oddNum += 0\n        } else {\n            evenNum += 1\n\
    \            oddNum += 1\n        }\n    }\n\n    return (evenNum, oddNum)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpapplx57x/tmpapplx57x.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cf7a75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cf776cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cf776c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cf776b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpapplx57x                        0x0000559184a384d4 <unavailable> + 5332

    5    libc.so.6                          0x00002b7cf7c61460 __libc_start_main +
    245

    6    tmpapplx57x                        0x0000559184a38139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even: Int = 0\n    var odd: Int = 0\n    for _\
    \ in 0..<num {\n        if num % 2 != 0 {\n            odd += 1\n        } else\
    \ {\n            even += 1\n        }\n        num /= 10\n    }\n    return (even,\
    \ odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7)\
    \ == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpzvamzmm3.swift:17:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num /= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num < 0 { return (1, 1) }\n    if num == 0 { return\
    \ (1, 0) }\n    var odd, even: Int = 0\n    var remainder: Int\n    var num =\
    \ num\n    repeat\n    {\n        remainder = num % 10\n        if remainder %\
    \ 2 == 1 { odd += 1 }\n        num /= 10\n    } while num != 0\n    return (odd,\
    \ even)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7)\
    \ == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpjn8qocka.swift:11:9: error: type annotation missing in pattern\n\
    \    var odd, even: Int = 0\n        ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    even_odd_count_aux {\n        even_count = even_count\n\
    \        odd_count = odd_count\n        num = num\n    }\n    return (even_count,\
    \ odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpctmo67no.swift:9:5: error: cannot find 'even_odd_count_aux' in\
    \ scope\n    even_odd_count_aux {\n    ^~~~~~~~~~~~~~~~~~\n/tmp/tmpctmo67no.swift:10:9:\
    \ error: cannot find 'even_count' in scope\n        even_count = even_count\n\
    \        ^~~~~~~~~~\n/tmp/tmpctmo67no.swift:10:22: error: cannot find 'even_count'\
    \ in scope\n        even_count = even_count\n                     ^~~~~~~~~~\n\
    /tmp/tmpctmo67no.swift:11:9: error: cannot find 'odd_count' in scope\n       \
    \ odd_count = odd_count\n        ^~~~~~~~~\n/tmp/tmpctmo67no.swift:11:21: error:\
    \ cannot find 'odd_count' in scope\n        odd_count = odd_count\n          \
    \          ^~~~~~~~~\n/tmp/tmpctmo67no.swift:14:13: error: cannot find 'even_count'\
    \ in scope\n    return (even_count, odd_count)\n            ^~~~~~~~~~\n/tmp/tmpctmo67no.swift:14:25:\
    \ error: cannot find 'odd_count' in scope\n    return (even_count, odd_count)\n\
    \                        ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return even_odd_count(num, num: num)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp_jo216ou.swift:9:27: error: extra argument in call\n    return\
    \ even_odd_count(num, num: num)\n                         ~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: -1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount : Int = 0\n    var oddCount : Int =\
    \ 0\n    var i = num\n    while (i >= 0) {\n        if ((i % 2) == 0) {\n    \
    \        evenCount = evenCount + 1\n        }\n        else {\n            oddCount\
    \ = oddCount + 1\n        }\n        i = i / 10\n    }\n    return (evenCount,\
    \ oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013828
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let num_str = String(num)\n    let num_arr = num_str.unicodeScalars.filter\
    \ { !$0.isWhitespace }.map { $0.value }\n    return (num_arr.count, num_arr.count\
    \ % 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7)\
    \ == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpxkcdydge.swift:10:55: error: value of type 'Unicode.Scalar' has\
    \ no member 'isWhitespace'\n    let num_arr = num_str.unicodeScalars.filter {\
    \ !$0.isWhitespace }.map { $0.value }\n                                      \
    \             ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 1, odd = 1\n    while num >= 0 {\n    \
    \    if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        num = num / 2\n    }\n    return (even, odd)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpnmu45dwy.swift:12:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            even++\n                ^~\n/tmp/tmpnmu45dwy.swift:14:16:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  odd++\n               ^~\n/tmp/tmpnmu45dwy.swift:16:9: error: cannot assign\
    \ to value: 'num' is a 'let' constant\n        num = num / 2\n        ^~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for num != 0 {\n\
    \        num /= 10\n        even++\n    }\n    for num != 0 {\n        num /=\
    \ 10\n        odd++\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp6pluwjcd.swift:11:13: error: expected 'in' after for-each pattern\n\
    \    for num != 0 {\n            ^\n/tmp/tmp6pluwjcd.swift:11:13: error: unary\
    \ operator cannot be separated from its operand\n    for num != 0 {\n        \
    \    ^ ~\n              \n/tmp/tmp6pluwjcd.swift:15:13: error: expected 'in' after\
    \ for-each pattern\n    for num != 0 {\n            ^\n/tmp/tmp6pluwjcd.swift:15:13:\
    \ error: unary operator cannot be separated from its operand\n    for num != 0\
    \ {\n            ^ ~\n              \n/tmp/tmp6pluwjcd.swift:11:13: error: '!='\
    \ is not a prefix unary operator\n    for num != 0 {\n            ^\n/tmp/tmp6pluwjcd.swift:15:13:\
    \ error: '!=' is not a prefix unary operator\n    for num != 0 {\n           \
    \ ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenDigits = 0, oddDigits = 0\n    switch num\
    \ {\n    case 0:\n        evenDigits = 1\n    case 1:\n        evenDigits = 0\n\
    \    case 2:\n        evenDigits = 1\n    case 3:\n        evenDigits = 2\n  \
    \  case 4:\n        evenDigits = 1\n    case 5:\n        evenDigits = 1\n    case\
    \ 6:\n        evenDigits = 2\n    case 7:\n        evenDigits = 2\n    case 8:\n\
    \        evenDigits = 2\n    case 9:\n        evenDigits = 3\n    case 10:\n \
    \       evenDigits = 2\n    case 11:\n        evenDigits = 2\n    case 12:\n \
    \       evenDigits = 3\n    case 13:\n        evenDigits = 2\n    case 14:\n \
    \       evenDigits = 2\n    case 15:\n        evenDigits = 2\n    case 16:\n \
    \       evenDigits = 3\n    case 17:\n        evenDigits = 2\n    case 18:\n \
    \       evenDigits = 2\n    case 19:\n        evenDigits = 2\n    case 20:\n \
    \       evenDigits = 3\n    case 21:\n        evenDigits = 2\n    case 22:\n \
    \       evenDigits = 2\n    case 23:\n        evenDigits = 2\n    case 24:\n \
    \       evenDigits = 3\n    case 25:\n        evenDigits = 2\n    case 26:\n \
    \       evenDigits = 2\n    case 27:\n        evenDigits = 2\n    case 28:\n \
    \       evenDigits = 2\n    case 29:\n        evenDigits = 2\n    case 30:\n \
    \       evenDigits = 3\n    case 31:\n        evenDigits = 2\n    case 32:\n \
    \       evenDigits = 2\n    case 33:\n        evenDigits = 2\n    case 34:\n \
    \       evenDigits = 2\n    case 35:\n        evenDigits = 3\n    case 36:\n \
    \       evenDigits = 2\n    case 37:\n        evenDigits = 2\n    case 38:\n \
    \       evenDigits = 2\n    case 39:\n        evenDigits = 2\n    case 40:\n \
    \       evenDigits = 3\n    case 41:\n        evenDigits = 2\n    case 42:\n \
    \       evenDigits = 2\n    case 43:\n        evenDigits = 2\n    case 44:\n \
    \       evenDigits = 2\n    case 45:\n        evenDigits = 2\n    case 46:\n \
    \       evenDigits = 3\n    case 47:\n        evenDigits = 2\n    case 48:\n \
    \       evenDigits = 2\n    case 49:\n        evenDigits = 2\n    case 50:\n \
    \       evenDigits = 3\n    case 51:\n        evenDigits = 2\n    case 52:\n \
    \       evenDigits = 2\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpxu9smopv.swift:140:41: error: expected '}' at end of brace statement\n\
    assert(even_odd_count(num: 0) == (1, 0))\n                                   \
    \     ^\n/tmp/tmpxu9smopv.swift:8:45: note: to match this opening '{'\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n                                            ^\n/tmp/tmpxu9smopv.swift:10:5:\
    \ error: switch must be exhaustive\n    switch num {\n    ^\n/tmp/tmpxu9smopv.swift:10:5:\
    \ note: do you want to add a default clause?\n    switch num {\n    ^\n/tmp/tmpxu9smopv.swift:121:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpxu9smopv.swift:9:9:\
    \ warning: variable 'evenDigits' was written to, but never read\n    var evenDigits\
    \ = 0, oddDigits = 0\n        ^\n/tmp/tmpxu9smopv.swift:9:25: warning: variable\
    \ 'oddDigits' was never used; consider replacing with '_' or removing it\n   \
    \ var evenDigits = 0, oddDigits = 0\n                        ^~~~~~~~~\n     \
    \                   _\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even, odd : Int = 0\n    for num < 0 {\n     \
    \   odd++\n        num = -num\n    }\n    for num > 0 {\n        even++\n    \
    \    num = num / 10\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp78r8hs9s.swift:10:13: error: expected 'in' after for-each pattern\n\
    \    for num < 0 {\n            ^\n/tmp/tmp78r8hs9s.swift:10:13: error: unary\
    \ operator cannot be separated from its operand\n    for num < 0 {\n         \
    \   ^~\n             \n/tmp/tmp78r8hs9s.swift:14:13: error: expected 'in' after\
    \ for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmp78r8hs9s.swift:14:13:\
    \ error: unary operator cannot be separated from its operand\n    for num > 0\
    \ {\n            ^~\n             \n/tmp/tmp78r8hs9s.swift:9:9: error: type annotation\
    \ missing in pattern\n    var even, odd : Int = 0\n        ^\n/tmp/tmp78r8hs9s.swift:10:13:\
    \ error: '<' is not a prefix unary operator\n    for num < 0 {\n            ^\n\
    /tmp/tmp78r8hs9s.swift:14:13: error: '>' is not a prefix unary operator\n    for\
    \ num > 0 {\n            ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n  var even = 0, odd = 0, remainder = num;\n  while remainder\
    \ > 0 {\n    remainder /= 10;\n    even += 1;\n  }\n  while remainder < 0 {\n\
    \    remainder *= 10;\n    odd += 1;\n  }\n  return (even, odd)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp0oia1t5z/tmp0oia1t5z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e39611c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e39308b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e39308988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e393077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oia1t5z                        0x000055770ea55304 <unavailable> + 4868

    5    libc.so.6                          0x00002b6e397fd460 __libc_start_main +
    245

    6    tmp0oia1t5z                        0x000055770ea54f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let remainder = num % 10\n    let remainder3 = remainder\
    \ % 3\n    return (remainder, Int(remainder3) + 1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp4z4jllgk/tmp4z4jllgk.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04324b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04321aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04321ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04321ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4z4jllgk                        0x00005615a22e7434 <unavailable> + 5172

    5    libc.so.6                          0x00002b04326a3460 __libc_start_main +
    245

    6    tmp4z4jllgk                        0x00005615a22e7099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    if num\
    \ > 0 {\n        evenCount = countEven(num)\n        oddCount = countOdd(num)\n\
    \    }\n\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpytqe31yy.swift:12:21: error: cannot find 'countEven' in scope\n\
    \        evenCount = countEven(num)\n                    ^~~~~~~~~\n/tmp/tmpytqe31yy.swift:13:20:\
    \ error: cannot find 'countOdd' in scope\n        oddCount = countOdd(num)\n \
    \                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount: Int = 0\n    var oddCount: Int = 0\n\
    \    var n = num\n    while (n > 0 || n == 0) {\n        if ((n % 2) == 0) {\n\
    \            evenCount++\n        } else {\n            oddCount++\n        }\n\
    \        n = Int(n/2)\n    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmptsirxakk.swift:14:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            evenCount++\n                     ^~\n/tmp/tmptsirxakk.swift:16:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  oddCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for n in num {\n\
    \        if n % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpxd0kong3.swift:11:14: error: for-in loop requires 'Int' to conform\
    \ to 'Sequence'\n    for n in num {\n             ^~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var currentNumber\
    \ = num\n\n    while currentNumber != 0 {\n        let currentDigit = currentNumber\
    \ % 10\n        evenCount += currentDigit == 0 ? 0 : 2\n        oddCount += currentDigit\
    \ == 1 ? 0 : 1\n        currentNumber /= 10\n    }\n\n    return (evenCount, oddCount)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpyvwk5bwb/tmpyvwk5bwb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b157e51ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b157e215b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b157e215988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b157e2147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyvwk5bwb                        0x000055a0e0981304 <unavailable> + 4868

    5    libc.so.6                          0x00002b157e70a460 __libc_start_main +
    245

    6    tmpyvwk5bwb                        0x000055a0e0980f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    // TODO: Write code here\n    return (num / 10, num\
    \ % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7)\
    \ == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpxjpx8uj5/tmpxjpx8uj5.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add4f061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add4ed58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add4ed58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add4ed577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjpx8uj5                        0x000055f06812f304 <unavailable> + 4868

    5    libc.so.6                          0x00002add4f24d460 __libc_start_main +
    245

    6    tmpxjpx8uj5                        0x000055f06812ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0, odd = 0, lastEven, lastOdd : Int?\n\
    \    \n    for i in 1..<num {\n        let c = i % 2\n        if c == 0 {\n  \
    \          lastEven = i\n        } else {\n            lastOdd = i\n        }\n\
    \        \n        if lastEven == lastOdd {\n            even = even + 1\n   \
    \     } else {\n            odd = odd + 1\n        }\n    }\n\n    return (1,\
    \ 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0,\
    \ 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpwvugsc01/tmpwvugsc01.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b299e076c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b299dd6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b299dd6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b299dd6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvugsc01                        0x00005614475093f4 <unavailable> + 5108

    5    libc.so.6                          0x00002b299e262460 __libc_start_main +
    245

    6    tmpwvugsc01                        0x0000561447509059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even: Int = 0, odd: Int = 0\n    for n in num\
    \ {\n        switch n {\n        case 0:\n            even += 1;\n        case\
    \ 1:\n            odd += 1;\n        }\n    }\n    return (even, odd)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpfy2mrhy4.swift:10:14: error: for-in loop requires 'Int' to conform\
    \ to 'Sequence'\n    for n in num {\n             ^~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even, odd = 0, 1\n    for _ in 0..<num.truncatingRemainder(10)\
    \ {\n        if num.truncatingRemainder(10) % 2 == 0 {\n            even += 10\n\
    \        } else {\n            odd += 10\n        }\n    }\n    return (even,\
    \ odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7)\
    \ == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpww0wj10f.swift:9:24: error: expected pattern\n    var even, odd\
    \ = 0, 1\n                       ^\n/tmp/tmpww0wj10f.swift:9:9: error: type annotation\
    \ missing in pattern\n    var even, odd = 0, 1\n        ^\n/tmp/tmpww0wj10f.swift:10:22:\
    \ error: value of type 'Int' has no member 'truncatingRemainder'\n    for _ in\
    \ 0..<num.truncatingRemainder(10) {\n                 ~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even:Int = 0\n    var odd:Int = 0\n    for index\
    \ in 0..<Int(num.log10()) {\n        if ((num / 10) % 2 == 0) {\n            even++\n\
    \        }\n        else {\n            odd++\n        }\n    }\n    return (even,\
    \ odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7)\
    \ == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpecqkzmrv.swift:11:30: error: value of type 'Int' has no member\
    \ 'log10'\n    for index in 0..<Int(num.log10()) {\n                         ~~~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    for num\
    \ != 0 {\n        if num % 2 == 0 {\n            evenCount++\n        } else {\n\
    \            oddCount++\n        }\n        num /= 10\n    }\n    return (evenCount,\
    \ oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpfr5ya5rc.swift:11:13: error: expected 'in' after for-each pattern\n\
    \    for num != 0 {\n            ^\n/tmp/tmpfr5ya5rc.swift:11:13: error: unary\
    \ operator cannot be separated from its operand\n    for num != 0 {\n        \
    \    ^ ~\n              \n/tmp/tmpfr5ya5rc.swift:11:13: error: '!=' is not a prefix\
    \ unary operator\n    for num != 0 {\n            ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    // Initialize tuple\n    var even = 0, odd = 1\n \
    \   // Iterate through digits in the number from right to left.\n    for digit\
    \ = Int(num); digit != 0; digit = digit / 10 {\n        // If current digit is\
    \ an even digit, increment even counter\n        if digit % 2 == 0 {\n       \
    \     even += 1\n        } else {\n            odd += 1\n        }\n    }\n  \
    \  return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmplsnw2g9q.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for digit = Int(num); digit != 0; digit = digit / 10 {\n   \
    \ ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = Int()\n    var odd = Int()\n    var i =\
    \ Int()\n    i = num\n    while i >= 0 {\n        if (i % 2 == 0) {\n        \
    \    even++\n        } else {\n            odd++\n        }\n        i /= 10\n\
    \    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpfu3wy6gn.swift:15:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            even++\n                ^~\n/tmp/tmpfu3wy6gn.swift:17:16:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  odd++\n               ^~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (num % 2 == 0), (num % 2 != 0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpbrbljyhq.swift:9:26: error: consecutive statements on a line must\
    \ be separated by ';'\n    return (num % 2 == 0), (num % 2 != 0)\n           \
    \              ^\n                         ;\n/tmp/tmpbrbljyhq.swift:9:26: error:\
    \ expected expression\n    return (num % 2 == 0), (num % 2 != 0)\n           \
    \              ^\n/tmp/tmpbrbljyhq.swift:9:21: error: cannot convert return expression\
    \ of type 'Bool' to return type '(Int, Int)'\n    return (num % 2 == 0), (num\
    \ % 2 != 0)\n           ~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n\n    var\
    \ n = num\n\n    while n > 0 {\n        if n % 2 == 0 {\n            evenCount\
    \ += 1\n        }\n        n /= 2\n    }\n\n    n -= 1\n\n    while n > 0 {\n\
    \        if n % 2 == 0 {\n            oddCount += 1\n        }\n        n /= 2\n\
    \    }\n\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpg51jzgct/tmpg51jzgct.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b003842bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0038122b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0038122988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00381217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg51jzgct                        0x00005624598c4304 <unavailable> + 4868

    5    libc.so.6                          0x00002b0038617460 __libc_start_main +
    245

    6    tmpg51jzgct                        0x00005624598c3f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (num, num/2 + num%2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpv91lwyoi/tmpv91lwyoi.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc3f5c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc3f2beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc3f2be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc3f2bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv91lwyoi                        0x000055ee1cbaf304 <unavailable> + 4868

    5    libc.so.6                          0x00002adc3f7b3460 __libc_start_main +
    245

    6    tmpv91lwyoi                        0x000055ee1cbaef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even, odd, remainder : Int\n\n    remainder =\
    \ num % 10\n    num = num / 10\n    even = (num / 4) * 4\n    odd = (num % 4)\
    \ * 10\n    return (even, odd + remainder)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpcomr1wkv.swift:12:5: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n    num = num / 10\n    ^~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    if num\
    \ > 0 {\n        for _ in 0..<num {\n            if num % 2 == 0 {\n         \
    \       evenCount += 1\n            } else {\n                oddCount += 1\n\
    \            }\n            num /= 10\n        }\n    }\n    return (evenCount,\
    \ oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp5lhsnu5r.swift:18:17: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n            num /= 10\n            ~~~ ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    var n = num\n \
    \   do {\n        n = n/10\n        even = even*10 + (n%10)\n        odd = odd*10\
    \ + (n%10)\n    } while n > 0\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp0vi9onf5.swift:12:5: error: 'do-while' statement is not allowed\n\
    \    do {\n    ^\n/tmp/tmp0vi9onf5.swift:12:5: note: did you mean 'repeat-while'\
    \ statement?\n    do {\n    ^~\n    repeat\n/tmp/tmp0vi9onf5.swift:12:5: note:\
    \ did you mean separate 'do' and 'while' statements?\n    do {\n    ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var (evenCount, oddCount) = (0, 0)\n    for n in num.str().characters\
    \ {\n        let char = n.unicodeScalars.first!.intValue\n        switch char\
    \ {\n        case .Zero:\n            evenCount++\n        case .Odd:\n      \
    \      oddCount++\n        }\n    }\n    return (evenCount, oddCount)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp1j74_xps.swift:10:18: error: value of type 'Int' has no member\
    \ 'str'\n    for n in num.str().characters {\n             ~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let even_digits = Int(log10(num)) + 2\n    let odd_digits\
    \ = Int(log10(num))\n    return (even_digits, odd_digits)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp19fcb7zc.swift:9:27: error: cannot find 'log10' in scope\n    let\
    \ even_digits = Int(log10(num)) + 2\n                          ^~~~~\n/tmp/tmp19fcb7zc.swift:10:26:\
    \ error: cannot find 'log10' in scope\n    let odd_digits = Int(log10(num))\n\
    \                         ^~~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenDigitCount = 0\n    var oddDigitCount = 0\n\
    \    var digitSum = 0\n\n    var remainder = num\n    for _ in 0..<Int(log10(Double(num)))\
    \ + 1 {\n        digitSum += Double(remainder)\n        remainder = Int(remainder\
    \ * 10)\n        if Double(digitSum) / Double(num) == 0.0 {\n            if remainder\
    \ == 0 {\n                evenDigitCount += 1\n                digitSum = 0\n\
    \            } else {\n                oddDigitCount += 1\n                digitSum\
    \ = 0\n            }\n        }\n    }\n    return (evenDigitCount, oddDigitCount)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpch264ja1.swift:14:22: error: cannot find 'log10' in scope\n   \
    \ for _ in 0..<Int(log10(Double(num))) + 1 {\n                     ^~~~~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (Int((num % 2) == 0), (Int((num % 2) == 1),\
    \ ))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0,\
    \ 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpdtf_ukoa.swift:9:56: error: unexpected ',' separator\n    return\
    \ (Int((num % 2) == 0), (Int((num % 2) == 1), ))\n                           \
    \                          ~ ^\n                                             \
    \        \n/tmp/tmpdtf_ukoa.swift:9:13: error: no exact matches in call to initializer\
    \ \n    return (Int((num % 2) == 0), (Int((num % 2) == 1), ))\n            ^\n\
    /tmp/tmpdtf_ukoa.swift:9:13: note: candidate expects value of type 'Float16' for\
    \ parameter #1 (got 'Bool')\n    return (Int((num % 2) == 0), (Int((num % 2) ==\
    \ 1), ))\n            ^\n/tmp/tmpdtf_ukoa.swift:9:13: note: candidate expects\
    \ value of type 'Float' for parameter #1 (got 'Bool')\n    return (Int((num %\
    \ 2) == 0), (Int((num % 2) == 1), ))\n            ^\n/tmp/tmpdtf_ukoa.swift:9:13:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'Bool')\n\
    \    return (Int((num % 2) == 0), (Int((num % 2) == 1), ))\n            ^\n/tmp/tmpdtf_ukoa.swift:9:13:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Bool')\n\
    \    return (Int((num % 2) == 0), (Int((num % 2) == 1), ))\n            ^\n/tmp/tmpdtf_ukoa.swift:9:13:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Bool')\n    return (Int((num % 2) == 0), (Int((num % 2) == 1), ))\n       \
    \     ^\n/tmp/tmpdtf_ukoa.swift:9:13: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Bool')\n    return (Int((num % 2) == 0), (Int((num %\
    \ 2) == 1), ))\n            ^\n/tmp/tmpdtf_ukoa.swift:9:35: error: no exact matches\
    \ in call to initializer \n    return (Int((num % 2) == 0), (Int((num % 2) ==\
    \ 1), ))\n                                  ^\n/tmp/tmpdtf_ukoa.swift:9:35: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Bool')\n  \
    \  return (Int((num % 2) == 0), (Int((num % 2) == 1), ))\n                   \
    \               ^\n/tmp/tmpdtf_ukoa.swift:9:35: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Bool')\n    return (Int((num % 2) ==\
    \ 0), (Int((num % 2) == 1), ))\n                                  ^\n/tmp/tmpdtf_ukoa"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n\n   \
    \ var even = 0\n    var odd = 0\n    var numStr = String(num)\n\n    for i in\
    \ numStr {\n        if i % 2 == 0 {\n            even++\n        } else {\n  \
    \          odd++\n        }\n    }\n\n    return (even, odd)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpzn_o8nht.swift:18:12: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if i % 2 == 0 {\n           ^\n/tmp/tmpzn_o8nht.swift:19:17:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  even++\n                ^~\n/tmp/tmpzn_o8nht.swift:21:16: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            odd++\n          \
    \     ^~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    \n    let even = (num / 2) % 2 == 0\n    let odd =\
    \ (num / 2) == 0 ? 1 : 0\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpgotvy00h.swift:12:12: error: cannot convert return expression of\
    \ type '(Bool, Int)' to return type '(Int, Int)'\n    return (even, odd)\n   \
    \        ^\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0, odd = 0, temp = 0\n    for d in String(num).characters\
    \ {\n        if d % 2 == 0 {\n            even++\n        } else {\n         \
    \   odd++\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpliom8h3_.swift:10:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for d in String(num).characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpliom8h3_.swift:11:12: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if d % 2 == 0 {\n           ^\n/tmp/tmpliom8h3_.swift:12:17:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  even++\n                ^~\n/tmp/tmpliom8h3_.swift:14:16: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            odd++\n          \
    \     ^~\n"
  stdout: ''
  timestamp: 1660013823
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (num / 2 % 2 == 0, num / 2 % 2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp7g8pkuq9.swift:9:12: error: cannot convert return expression of\
    \ type '(Bool, Int)' to return type '(Int, Int)'\n    return (num / 2 % 2 == 0,\
    \ num / 2 % 2)\n           ^\n"
  stdout: ''
  timestamp: 1660013823
