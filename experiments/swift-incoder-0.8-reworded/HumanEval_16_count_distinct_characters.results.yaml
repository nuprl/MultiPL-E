language: swift
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.unicodeScalars.map { $0.value }.distinct().count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp35ybt1rh.swift:8:51: error: value of type '[UInt32]' has no member\
    \ 'distinct'\n    return string.unicodeScalars.map { $0.value }.distinct().count\n\
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characterSet = CharacterSet(charactersIn: string)\n\
    \    \n    return characterSet.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp1si_3ywb.swift:8:24: error: cannot find 'CharacterSet' in scope\n\
    \    let characterSet = CharacterSet(charactersIn: string)\n                 \
    \      ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    var last: Character?\n    for character in string {\n       \
    \ if character.isCaseIgnorable {\n            if last != nil {\n             \
    \   count += 1\n                last?.isCaseIgnorable = false\n            } else\
    \ {\n                last = character\n            }\n        } else {\n     \
    \       last = nil\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp1u4xzthp.swift:14:22: error: value of type 'Character' has no member\
    \ 'isCaseIgnorable'\n        if character.isCaseIgnorable {\n           ~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~\n/tmp/tmp1u4xzthp.swift:17:23: error: value of type 'Character'\
    \ has no member 'isCaseIgnorable'\n                last?.isCaseIgnorable = false\n\
    \                ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string == \"\" {\n        return 0\n    }\n\n    var\
    \ count : Int = 0\n    var lowerCaseLettersCounter : Int = 0\n    var upperCaseLettersCounter\
    \ : Int = 0\n    var numberCounter : Int = 0\n    var othersCounter : Int = 0\n\
    \n    var character: Character?\n\n    for character in string.characters {\n\
    \        var uppercaseLetter = false\n        var lowercaseLetter = false\n  \
    \      var number = false\n\n        if character >= 'A' && character <= 'Z' {\n\
    \            uppercaseLetter = true\n        } else if character >= 'a' && character\
    \ <= 'z' {\n            lowercaseLetter = true\n        }\n\n        if character\
    \ >= '0' && character <= '9' {\n            number = true\n        }\n\n     \
    \   if uppercaseLetter && lowercaseLetter && number {\n            othersCounter++\n\
    \        } else if uppercaseLetter || lowercaseLetter || number {\n          \
    \  othersCounter--\n        }\n\n        if uppercaseLetter {\n            upperCaseLettersCounter++\n\
    \        } else if lowercaseLetter {\n            lowerCaseLettersCounter++\n\
    \        } else if number {\n            numberCounter++\n        }\n        \n\
    \        count++\n    }\n    \n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmphue6s7c1.swift:25:25: error: single-quoted string literal found,\
    \ use '\"'\n        if character >= 'A' && character <= 'Z' {\n              \
    \          ^~~\n                        \"A\"\n/tmp/tmphue6s7c1.swift:25:45: error:\
    \ single-quoted string literal found, use '\"'\n        if character >= 'A' &&\
    \ character <= 'Z' {\n                                            ^~~\n      \
    \                                      \"Z\"\n/tmp/tmphue6s7c1.swift:27:32: error:\
    \ single-quoted string literal found, use '\"'\n        } else if character >=\
    \ 'a' && character <= 'z' {\n                               ^~~\n            \
    \                   \"a\"\n/tmp/tmphue6s7c1.swift:27:52: error: single-quoted\
    \ string literal found, use '\"'\n        } else if character >= 'a' && character\
    \ <= 'z' {\n                                                   ^~~\n         \
    \                                          \"z\"\n/tmp/tmphue6s7c1.swift:31:25:\
    \ error: single-quoted string literal found, use '\"'\n        if character >=\
    \ '0' && character <= '9' {\n                        ^~~\n                   \
    \     \"0\"\n/tmp/tmphue6s7c1.swift:31:45: error: single-quoted string literal\
    \ found, use '\"'\n        if character >= '0' && character <= '9' {\n       \
    \                                     ^~~\n                                  \
    \          \"9\"\n/tmp/tmphue6s7c1.swift:20:29: error: 'characters' is unavailable:\
    \ Please use String directly\n    for character in string.characters {\n     \
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmphue6s7c1.swift:36:26: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            othersCounter++\n              \
    \           ^~\n/tmp/tmphue6s7c1.swift:38:26: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            othersCounter--\n              \
    \           ^~\n/tmp/tmphue6s7c1.swift:42:36: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            upperCaseLettersCounter++\n    \
    \                           "
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.unicodeScalars.reduce(0) { (total: Int,\
    \ char: UnicodeScalar) -> Int in\n        let codepoint = char.value.codepoint\n\
    \        return total + (codepoint > 0xFFFF ? 2 : 1)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpo9l70wge.swift:9:36: error: value of type 'UInt32' has no member\
    \ 'codepoint'\n        let codepoint = char.value.codepoint\n                \
    \        ~~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.characters {\n    \
    \    if let x = string.lowercaseString.characters.index(of: String(Character(c)))\
    \ { count = count + 1; count = count + x - x }\n        else if let x = string.uppercaseString.characters.index(of:\
    \ String(Character(c))) { count = count + 1; count = count + x - x }\n       \
    \ else if let x = string.camelCaseString.characters.index(of: String(Character(c)))\
    \ { count = count + 1; count = count + x - x }\n        else if let x = string.kebabCaseString.characters.index(of:\
    \ String(Character(c))) { count = count + 1; count = count + x - x }\n       \
    \ else if let x = string.escapedDashesString.characters.index(of: String(Character(c)))\
    \ { count = count + 1; count = count + x - x }\n        else if let x = string.escapedUnderscoresString.characters.index(of:\
    \ String(Character(c))) { count = count + 1; count = count + x - x }\n       \
    \ else if let x = string.nonAsciiString.characters.index(of: String(Character(c)))\
    \ { count = count + 1; count = count + x - x }\n        else if let x = string.numberString.characters.index(of:\
    \ String(Character(c))) { count = count + 1; count = count + x - x }\n       \
    \ else if let x = string.punctuationString.characters.index(of: String(Character(c)))\
    \ { count = count + 1; count = count + x - x }\n        else if let x = string.uppercaseLetter.characters.index(of:\
    \ String(Character(c))) { count = count + 1; count = count + x - x }\n       \
    \ else if let x = string.lowercaseLetter.characters.index(of: String(Character(c)))\
    \ { count = count + 1; count = count + x - x }\n        else if let x = string.numberLetter.characters.index(of:\
    \ String(Character(c))) { count = count + 1; count = count + x - x }\n       \
    \ else if let x = string.punctuationLetter.characters.index(of: String(Character(c)))\
    \ { count = count + 1; count = count + x - x }\n        else if let x = string.whitespace.characters.index(of:\
    \ String(Character(c))) { count = count + 1; count = count + x - x }\n       \
    \ else if let x = string.eight.characters.index(of: String(Character(c))) { count\
    \ = count + 1; count = count + x - x }\n        else if let x = string.twelve.characters.index(of:\
    \ String(Character(c))) { count = count + 1; count = count + x - x }\n       \
    \ else if let x = string.one.characters.index(of: String(Character(c))) { count\
    \ = count + 1; count = count + x - x }\n        else if let \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpsnkwctdo.swift:27:20: error: expected pattern\n        else if\
    \ let \n                   ^\n/tmp/tmpsnkwctdo.swift:27:17: error: unwrap condition\
    \ requires a valid identifier\n        else if let \n                ^\n     \
    \           <#identifier#> = \n/tmp/tmpsnkwctdo.swift:27:20: error: expected '{'\
    \ after 'if' condition\n        else if let \n                   ^\n/tmp/tmpsnkwctdo.swift:47:69:\
    \ error: expected '}' at end of brace statement\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)\n                                            \
    \                        ^\n/tmp/tmpsnkwctdo.swift:7:55: note: to match this opening\
    \ '{'\nfunc count_distinct_characters(string: String) -> Int {\n             \
    \                                         ^\n/tmp/tmpsnkwctdo.swift:9:21: error:\
    \ 'characters' is unavailable: Please use String directly\n    for c in string.characters\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpsnkwctdo.swift:10:27: error: value of type 'String' has\
    \ no member 'lowercaseString'\n        if let x = string.lowercaseString.characters.index(of:\
    \ String(Character(c))) { count = count + 1; count = count + x - x }\n       \
    \            ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpsnkwctdo.swift:10:81: error: missing\
    \ argument label 'extendedGraphemeClusterLiteral:' in call\n        if let x =\
    \ string.lowercaseString.characters.index(of: String(Character(c))) { count =\
    \ count + 1; count = count + x - x }\n                                       \
    \                                         ^\n                                \
    \                                                extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmpsnkwctdo.swift:11:32: error: value of type 'String' has no member\
    \ 'uppercaseString'\n        else if let x = string.uppercaseString.characters.index(of:\
    \ String(Character(c))) { count = count + 1; count = count + x - x }\n       \
    \                 ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpsnkwctdo.swift:11:86: error:\
    \ missing ar"
  stdout: ''
  timestamp: 1660015491
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n\tlet set = Set<Character>(string)\n\treturn set.count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpoiwsqsvo/tmpoiwsqsvo.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3336b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3333acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3333ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3333ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoiwsqsvo                        0x000055789528b561 <unavailable> + 5473

    5    libc.so.6                          0x00002ad3338a1460 __libc_start_main +
    245

    6    tmpoiwsqsvo                        0x000055789528b099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCount = 0\n    for character in string {\n\
    \        if isDistinct(character) {\n            distinctCount += 1\n        }\n\
    \    }\n    return distinctCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpkcxh1bie.swift:10:12: error: cannot find 'isDistinct' in scope\n\
    \        if isDistinct(character) {\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var result = 0\n    for c in string {\n        switch\
    \ c.unicodeScalars.count {\n        case 0:\n            result += 1\n       \
    \ case 1:\n            result += c\n        default:\n            result += c.unicodeScalars.count\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpob0behg4.swift:14:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n            result += c\n                 \
    \     ^\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let alphabet = string.unicodeScalars\n        .map { unicodeScalarToString\
    \ $0 }\n        .joined()\n\n    return alphabet.characters.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp4loem6ai.swift:9:37: error: consecutive statements on a line must\
    \ be separated by ';'\n        .map { unicodeScalarToString $0 }\n           \
    \                         ^\n                                    ;\n/tmp/tmp4loem6ai.swift:9:16:\
    \ error: cannot find 'unicodeScalarToString' in scope\n        .map { unicodeScalarToString\
    \ $0 }\n               ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return strings.Count(strings.Unique(string))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp6voc579m.swift:8:12: error: cannot find 'strings' in scope\n  \
    \  return strings.Count(strings.Unique(string))\n           ^~~~~~~\n/tmp/tmp6voc579m.swift:8:26:\
    \ error: cannot find 'strings' in scope\n    return strings.Count(strings.Unique(string))\n\
    \                         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let alphabet = CharacterSet.lowercaseLetters.union(CharacterSet.uppercaseLetters).union(CharacterSet.numbers)\n\
    \    let count = string.characters.filter({ alphabet.contains($0) }).count\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp_ttj3gwi.swift:8:20: error: cannot find 'CharacterSet' in scope\n\
    \    let alphabet = CharacterSet.lowercaseLetters.union(CharacterSet.uppercaseLetters).union(CharacterSet.numbers)\n\
    \                   ^~~~~~~~~~~~\n/tmp/tmp_ttj3gwi.swift:8:56: error: cannot find\
    \ 'CharacterSet' in scope\n    let alphabet = CharacterSet.lowercaseLetters.union(CharacterSet.uppercaseLetters).union(CharacterSet.numbers)\n\
    \                                                       ^~~~~~~~~~~~\n/tmp/tmp_ttj3gwi.swift:8:93:\
    \ error: cannot find 'CharacterSet' in scope\n    let alphabet = CharacterSet.lowercaseLetters.union(CharacterSet.uppercaseLetters).union(CharacterSet.numbers)\n\
    \                                                                            \
    \                ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n\treturn count_distinct_characters(string: string, separator:\
    \ \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp19ehggly.swift:8:62: error: extra argument 'separator' in call\n\
    \        return count_distinct_characters(string: string, separator: \"\")\n \
    \                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var num = 0\n    var upperCase = false\n    var lowerCase\
    \ = false\n    for symbol in string {\n        if symbol.isUppercase {\n     \
    \       if !upperCase {\n                upperCase = true\n                num++\n\
    \            }\n        } else {\n            if !lowerCase {\n              \
    \  lowerCase = true\n                num++\n            }\n        }\n    }\n\
    \    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpg1bdbkuc.swift:15:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                num++\n                   ^~\n/tmp/tmpg1bdbkuc.swift:20:20:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      num++\n                   ^~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let stringData = string.data(using: .utf8)!\n    var distinctChars\
    \ = 0\n    let distinctCharSet = CharacterSet.lowercased\n    string.unicodeScalars.forEach\
    \ { (scalar) in\n        let unicodeScalar = Scalar(scalar.value)\n        if\
    \ !distinctCharSet.contains(unicodeScalar) {\n            distinctChars += 1\n\
    \        }\n    }\n    return distinctChars\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp1_jpkkoq.swift:8:29: error: value of type 'String' has no member\
    \ 'data'\n    let stringData = string.data(using: .utf8)!\n                  \
    \   ~~~~~~ ^~~~\n/tmp/tmp1_jpkkoq.swift:8:42: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let stringData = string.data(using: .utf8)!\n\
    \                                        ~^~~~\n/tmp/tmp1_jpkkoq.swift:10:27:\
    \ error: cannot find 'CharacterSet' in scope\n    let distinctCharSet = CharacterSet.lowercased\n\
    \                          ^~~~~~~~~~~~\n/tmp/tmp1_jpkkoq.swift:12:29: error:\
    \ cannot find 'Scalar' in scope\n        let unicodeScalar = Scalar(scalar.value)\n\
    \                            ^~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let count = countElements(string)\n\n    if count == 0\
    \ {\n        return count\n    }\n\n    var distinctCharacterCount = 0\n    var\
    \ distinctCharacterSet = CharacterSet.new()\n\n    for character in string {\n\
    \        guard let character = character else {\n            continue\n      \
    \  }\n\n        if distinctCharacterSet.contains(character) {\n            distinctCharacterCount\
    \ += 1\n        } else {\n            distinctCharacterSet = CharacterSet(charactersIn:\
    \ string).union(distinctCharacterSet)\n            distinctCharacterCount += 1\n\
    \        }\n    }\n\n    return distinctCharacterCount\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp63kg3yfy.swift:8:17: error: cannot find 'countElements' in scope\n\
    \    let count = countElements(string)\n                ^~~~~~~~~~~~~\n/tmp/tmp63kg3yfy.swift:15:32:\
    \ error: cannot find 'CharacterSet' in scope\n    var distinctCharacterSet = CharacterSet.new()\n\
    \                               ^~~~~~~~~~~~\n/tmp/tmp63kg3yfy.swift:18:15: error:\
    \ initializer for conditional binding must have Optional type, not 'Character'\n\
    \        guard let character = character else {\n              ^             \
    \  ~~~~~~~~~\n/tmp/tmp63kg3yfy.swift:25:36: error: cannot find 'CharacterSet'\
    \ in scope\n            distinctCharacterSet = CharacterSet(charactersIn: string).union(distinctCharacterSet)\n\
    \                                   ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    \n    func characterCountClosure(_ string: String, countingAccumulator:\
    \ Int) {\n        if let char = string.character(at: 0) {\n            countingAccumulator\
    \ += 1\n            if let nextString = string.substring(from: String.Index.init(location:\
    \ countingAccumulator, length: 1)) {\n                characterCountClosure(nextString,\
    \ countingAccumulator: countingAccumulator)\n            }\n        }\n    }\n\
    \    \n    var count = 0\n    characterCountClosure(string: String, countingAccumulator:\
    \ count)\n    \n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpj72xpxw0.swift:10:30: error: value of type 'String' has no member\
    \ 'character'\n        if let char = string.character(at: 0) {\n             \
    \         ~~~~~~ ^~~~~~~~~\n/tmp/tmpj72xpxw0.swift:11:33: error: left side of\
    \ mutating operator isn't mutable: 'countingAccumulator' is a 'let' constant\n\
    \            countingAccumulator += 1\n            ~~~~~~~~~~~~~~~~~~~ ^\n/tmp/tmpj72xpxw0.swift:12:40:\
    \ error: value of type 'String' has no member 'substring'\n            if let\
    \ nextString = string.substring(from: String.Index.init(location: countingAccumulator,\
    \ length: 1)) {\n                                ~~~~~~ ^~~~~~~~~\n/tmp/tmpj72xpxw0.swift:12:56:\
    \ error: initializer 'init(utf16Offset:in:)' requires that 'Int' conform to 'StringProtocol'\n\
    \            if let nextString = string.substring(from: String.Index.init(location:\
    \ countingAccumulator, length: 1)) {\n                                       \
    \                ^\nSwift.String.Index:5:12: note: where 'S' = 'Int'\n    public\
    \ init<S>(utf16Offset offset: Int, in s: S) where S : StringProtocol\n       \
    \    ^\n/tmp/tmpj72xpxw0.swift:12:73: error: incorrect argument labels in call\
    \ (have 'location:length:', expected 'utf16Offset:in:')\n            if let nextString\
    \ = string.substring(from: String.Index.init(location: countingAccumulator, length:\
    \ 1)) {\n                                                                    \
    \    ^~~~~~~~~                       ~~~~~~\n                                \
    \                                         utf16Offset                    in\n\
    /tmp/tmpj72xpxw0.swift:19:26: error: extraneous argument label 'string:' in call\n\
    \    characterCountClosure(string: String, countingAccumulator: count)\n     \
    \                    ^~~~~~~~~\n                          \n/tmp/tmpj72xpxw0.swift:19:35:\
    \ error: cannot convert value of type 'String.Type' to expected argument type\
    \ 'String'\n    characterCountClosure(string: String, countingAccumulator: count)\n\
    \                                  ^\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.unicodeScalars.filter({ !$0.isControl }).map({\
    \ $0.value }).reduce(into: [Int](), { $1[$0.value] = $1[$0.value] + 1 })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpxpea4ky_.swift:8:47: error: value of type 'Unicode.Scalar' has\
    \ no member 'isControl'\n    return string.unicodeScalars.filter({ !$0.isControl\
    \ }).map({ $0.value }).reduce(into: [Int](), { $1[$0.value] = $1[$0.value] + 1\
    \ })\n                                           ~~ ^~~~~~~~~\n/tmp/tmpxpea4ky_.swift:8:78:\
    \ error: cannot convert return expression of type '[Int]' to return type 'Int'\n\
    \    return string.unicodeScalars.filter({ !$0.isControl }).map({ $0.value }).reduce(into:\
    \ [Int](), { $1[$0.value] = $1[$0.value] + 1 })\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxpea4ky_.swift:8:104: error: value of type 'UInt32' has no subscripts\n\
    \    return string.unicodeScalars.filter({ !$0.isControl }).map({ $0.value }).reduce(into:\
    \ [Int](), { $1[$0.value] = $1[$0.value] + 1 })\n                            \
    \                                                                         ~~^\n\
    /tmp/tmpxpea4ky_.swift:8:108: error: value of type '[Int]' has no member 'value'\n\
    \    return string.unicodeScalars.filter({ !$0.isControl }).map({ $0.value }).reduce(into:\
    \ [Int](), { $1[$0.value] = $1[$0.value] + 1 })\n                            \
    \                                                                            ~~\
    \ ^~~~~\n/tmp/tmpxpea4ky_.swift:8:119: error: value of type 'UInt32' has no subscripts\n\
    \    return string.unicodeScalars.filter({ !$0.isControl }).map({ $0.value }).reduce(into:\
    \ [Int](), { $1[$0.value] = $1[$0.value] + 1 })\n                            \
    \                                                                            \
    \            ~~^\n/tmp/tmpxpea4ky_.swift:8:123: error: value of type '[Int]' has\
    \ no member 'value'\n    return string.unicodeScalars.filter({ !$0.isControl }).map({\
    \ $0.value }).reduce(into: [Int](), { $1[$0.value] = $1[$0.value] + 1 })\n   \
    \                                                                            \
    \                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, removeNulls:\
    \ true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppgtgt_28.swift:8:67: error: extra argument 'removeNulls' in call\n\
    \    return count_distinct_characters(string: string, removeNulls: true)\n   \
    \                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let charCounts = string.unicodeScalars.map(\\.value).reduce(into:\
    \ [Int:Int]()) {\n        if let count = charCounts[$0] {\n            charCounts[$0]\
    \ += 1\n        } else {\n            charCounts[$0] = 1\n        }\n    }\n \
    \   return charCounts.values.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpa706m6ik.swift:8:83: error: contextual closure type '(inout [Int\
    \ : Int], UInt32) throws -> ()' expects 2 arguments, but 1 was used in closure\
    \ body\n    let charCounts = string.unicodeScalars.map(\\.value).reduce(into:\
    \ [Int:Int]()) {\n                                                           \
    \                       ^\n/tmp/tmpa706m6ik.swift:9:35: error: cannot convert\
    \ value of type '[Int : Int]' to expected argument type 'Int'\n        if let\
    \ count = charCounts[$0] {\n                                  ^\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_in_string(string.lowercase)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmps05wder2.swift:8:12: error: cannot find 'count_distinct_characters_in_string'\
    \ in scope\n    return count_distinct_characters_in_string(string.lowercase)\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmps05wder2.swift:8:55:\
    \ error: value of type 'String' has no member 'lowercase'\n    return count_distinct_characters_in_string(string.lowercase)\n\
    \                                               ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct(string.unicodeScalars)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpa3nuifpv.swift:8:12: error: cannot find 'count_distinct' in scope\n\
    \    return count_distinct(string.unicodeScalars)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let unique = string.unicodeScalars.filter { !$0.isWhitespace}.map\
    \ { $0.value }\n    return unique.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpse04l6z8.swift:8:53: error: value of type 'Unicode.Scalar' has\
    \ no member 'isWhitespace'\n    let unique = string.unicodeScalars.filter { !$0.isWhitespace}.map\
    \ { $0.value }\n                                                 ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinct = 0\n    for character in string {\n    \
    \    if let _ = character.unicodeScalars.first {\n            distinct += 1\n\
    \        }\n    }\n    return distinct\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpuach2_c3/tmpuach2_c3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d7c2e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d7bfdcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d7bfdc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d7bfdb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuach2_c3                        0x000056418c3945d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b4d7c4d1460 __libc_start_main +
    245

    6    tmpuach2_c3                        0x000056418c394109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n\n    for c in string.characters {\n  \
    \      if let range = string.rangeOfCharacter(from: c) {\n            count +=\
    \ 1\n        }\n    }\n\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp4aok9lg9.swift:10:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in string.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4aok9lg9.swift:11:31:\
    \ error: value of type 'String' has no member 'rangeOfCharacter'\n        if let\
    \ range = string.rangeOfCharacter(from: c) {\n                       ~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_in(string)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpp32g8auc.swift:8:12: error: cannot find 'count_distinct_characters_in'\
    \ in scope\n    return count_distinct_characters_in(string)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n\treturn count_distinct_characters_in_string(string)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp5sq0p19s.swift:8:9: error: cannot find 'count_distinct_characters_in_string'\
    \ in scope\n        return count_distinct_characters_in_string(string)\n     \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count(compact(string)) + count(lowercase(string))\
    \ + count(uppercase(string))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp7eqdf_1i.swift:8:12: error: cannot find 'count' in scope\n    return\
    \ count(compact(string)) + count(lowercase(string)) + count(uppercase(string))\n\
    \           ^~~~~\n/tmp/tmp7eqdf_1i.swift:8:18: error: cannot find 'compact' in\
    \ scope\n    return count(compact(string)) + count(lowercase(string)) + count(uppercase(string))\n\
    \                 ^~~~~~~\n/tmp/tmp7eqdf_1i.swift:8:37: error: cannot find 'count'\
    \ in scope\n    return count(compact(string)) + count(lowercase(string)) + count(uppercase(string))\n\
    \                                    ^~~~~\n/tmp/tmp7eqdf_1i.swift:8:43: error:\
    \ cannot find 'lowercase' in scope\n    return count(compact(string)) + count(lowercase(string))\
    \ + count(uppercase(string))\n                                          ^~~~~~~~~\n\
    /tmp/tmp7eqdf_1i.swift:8:64: error: cannot find 'count' in scope\n    return count(compact(string))\
    \ + count(lowercase(string)) + count(uppercase(string))\n                    \
    \                                           ^~~~~\n/tmp/tmp7eqdf_1i.swift:8:70:\
    \ error: cannot find 'uppercase' in scope\n    return count(compact(string)) +\
    \ count(lowercase(string)) + count(uppercase(string))\n                      \
    \                                               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        guard let\
    \ unicodeScalar = UnicodeScalar(c) else {\n            return count\n        }\n\
    \        if let characterCount = unicodeScalar.value.unicodeScalarCount {\n  \
    \          count += characterCount\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpufjqrni6.swift:10:35: error: no exact matches in call to initializer\
    \ \n        guard let unicodeScalar = UnicodeScalar(c) else {\n              \
    \                    ^\nSwift.Unicode.Scalar:5:23: note: candidate expects value\
    \ of type 'UInt32' for parameter #1 (got 'Character')\n    @inlinable public init?(_\
    \ v: UInt32)\n                      ^\nSwift.Unicode.Scalar:6:23: note: candidate\
    \ expects value of type 'UInt16' for parameter #1 (got 'Character')\n    @inlinable\
    \ public init?(_ v: UInt16)\n                      ^\nSwift.Unicode.Scalar:2:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n\
    Swift.Unicode.Scalar:2:23: note: candidate expects value of type 'Int' for parameter\
    \ #1 (got 'Character')\n    @inlinable public init?(_ v: Int)\n              \
    \        ^\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string.characters.count == 0 { return 0 }\n    return\
    \ Int((string.lowercased().count + string.uppercased().count) / 2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpd4hq7var.swift:8:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    if string.characters.count == 0 { return 0 }\n    \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct(string.lowercased().unicodeScalars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpxpb01pgd.swift:8:12: error: cannot find 'count_distinct' in scope\n\
    \    return count_distinct(string.lowercased().unicodeScalars)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = UInt64(0)\n    for character in string {\n\
    \        count = count + 1\n    }\n    return Int(count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpcww5cd9g/tmpcww5cd9g.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68787fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68784f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68784f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68784f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcww5cd9g                        0x0000559c346945f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b68789e7460 __libc_start_main +
    245

    6    tmpcww5cd9g                        0x0000559c34694129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660015492
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharactersCount = 0\n    for character in\
    \ string {\n        if character.isUppercase || character.isLowercase {\n    \
    \        distinctCharactersCount += 1\n        }\n    }\n    return distinctCharactersCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp_t4dti91/tmp_t4dti91.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6b3393c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6b308ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6b308a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6b30897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_t4dti91                        0x00005617b386a521 <unavailable> + 5409

    5    libc.so.6                          0x00002ac6b357f460 __libc_start_main +
    245

    6    tmp_t4dti91                        0x00005617b386a059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_impl(string: string)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpn0b0tc2b.swift:8:12: error: cannot find 'count_distinct_characters_impl'\
    \ in scope\n    return count_distinct_characters_impl(string: string)\n      \
    \     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if let string = string {\n        var distinctCharacterCount\
    \ = 0\n        for char in string.unicodeScalars {\n            if let codepoint\
    \ = char.codepoint,\n               char.uppercase == false && char.lowercase\
    \  == false {\n                distinctCharacterCount += 1\n            }\n  \
    \      }\n        return distinctCharacterCount\n    }\n    return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpss6qkz7s.swift:11:37: error: value of type 'Unicode.Scalar' has\
    \ no member 'codepoint'\n            if let codepoint = char.codepoint,\n    \
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpss6qkz7s.swift:12:21: error:\
    \ value of type 'Unicode.Scalar' has no member 'uppercase'\n               char.uppercase\
    \ == false && char.lowercase  == false {\n               ~~~~ ^~~~~~~~~\n/tmp/tmpss6qkz7s.swift:12:48:\
    \ error: value of type 'Unicode.Scalar' has no member 'lowercase'\n          \
    \     char.uppercase == false && char.lowercase  == false {\n                \
    \                          ~~~~ ^~~~~~~~~\n/tmp/tmpss6qkz7s.swift:8:8: error:\
    \ initializer for conditional binding must have Optional type, not 'String'\n\
    \    if let string = string {\n       ^            ~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string.characters.count == 0 {\n        return 0\n\
    \    }\n    var count = 0\n    var lastChar: Character?\n    for ch in string.characters\
    \ {\n        if case .Upper = ch.unicodeScalars.first {\n            count +=\
    \ 2\n            lastChar = ch\n        } else {\n            count += 1\n   \
    \         lastChar = nil\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpk9xvd_3p.swift:8:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    if string.characters.count == 0 {\n              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpk9xvd_3p.swift:13:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    for ch in\
    \ string.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpk9xvd_3p.swift:14:44: error: type 'Unicode.Scalar?'\
    \ has no member 'Upper'\n        if case .Upper = ch.unicodeScalars.first {\n\
    \                ~~~~~~                     ^~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let alphabet = string.unicodeScalars\n        .filter\
    \ { $0.isUppercase }\n        .sorted(by: { $0.value < $1.value })\n\n    return\
    \ Int(alphabet.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpzxp7qifm.swift:9:22: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        .filter { $0.isUppercase }\n              \
    \    ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !c.isEmpty\
    \ && !Character.isUpper(c.unicodeScalars.first!.value)\n        {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpugrtahh4.swift:10:15: error: value of type 'Character' has no member\
    \ 'isEmpty'\n        if !c.isEmpty && !Character.isUpper(c.unicodeScalars.first!.value)\n\
    \            ~ ^~~~~~~\n/tmp/tmpugrtahh4.swift:10:37: error: type 'Character'\
    \ has no member 'isUpper'\n        if !c.isEmpty && !Character.isUpper(c.unicodeScalars.first!.value)\n\
    \                          ~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n\tvar uniqueChars = [String]()\n\tlet regex = try! NSRegularExpression(pattern:\
    \ \"[^a-zA-Z]\", options: .caseInsensitive)\n\tfor _ in string.utf8.enumerated()\
    \ {\n\t\tif let matchRange = regex.firstMatch(in: string, range: NSMakeRange(_,\
    \ string.utf8.count)) {\n\t\t\tlet matchString = string.substring(with: matchRange)\n\
    \t\t\tuniqueChars.append(matchString)\n\t\t}\n\t}\n\treturn uniqueChars.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpp39uri_k.swift:9:19: error: cannot find 'NSRegularExpression' in\
    \ scope\n        let regex = try! NSRegularExpression(pattern: \"[^a-zA-Z]\",\
    \ options: .caseInsensitive)\n                         ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpp39uri_k.swift:9:71:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \        let regex = try! NSRegularExpression(pattern: \"[^a-zA-Z]\", options:\
    \ .caseInsensitive)\n                                                        \
    \                    ~^~~~~~~~~~~~~~~\n/tmp/tmpp39uri_k.swift:11:59: error: cannot\
    \ find 'NSMakeRange' in scope\n                if let matchRange = regex.firstMatch(in:\
    \ string, range: NSMakeRange(_, string.utf8.count)) {\n                      \
    \                                                  ^~~~~~~~~~~\n/tmp/tmpp39uri_k.swift:11:71:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \                if let matchRange = regex.firstMatch(in: string, range: NSMakeRange(_,\
    \ string.utf8.count)) {\n                                                    \
    \                                ^\n/tmp/tmpp39uri_k.swift:12:29: error: value\
    \ of type 'String' has no member 'substring'\n                        let matchString\
    \ = string.substring(with: matchRange)\n                                     \
    \     ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characterSet = CharacterSet(charactersIn: string)\n\
    \    return count(for: characterSet)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpuocir8ip.swift:8:24: error: cannot find 'CharacterSet' in scope\n\
    \    let characterSet = CharacterSet(charactersIn: string)\n                 \
    \      ^~~~~~~~~~~~\n/tmp/tmpuocir8ip.swift:9:12: error: cannot find 'count' in\
    \ scope\n    return count(for: characterSet)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if let s = string.unicodeScalars {\n        return s.reduce(0)\
    \ {\n            if case .Letter(_) = $1 {\n                return $0 + 1 // count\
    \ the letter alone as one character\n            }\n            return $1\n  \
    \      }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppdjd6sx3.swift:10:29: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n            if case .Letter(_) = $1 {\n \
    \                           ^\n/tmp/tmppdjd6sx3.swift:10:34: error: type 'Unicode.Scalar'\
    \ has no member 'Letter'\n            if case .Letter(_) = $1 {\n            \
    \        ~~~~~~~~~~   ^~\n/tmp/tmppdjd6sx3.swift:8:8: error: initializer for conditional\
    \ binding must have Optional type, not 'String.UnicodeScalarView'\n    if let\
    \ s = string.unicodeScalars {\n       ^       ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015491
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if count < 3 {\n            count += 1\n        } else if count < 6 {\n\
    \            count += 2\n        } else {\n            count += 3\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpd2iu__h9/tmpd2iu__h9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab60de20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab60db17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab60db17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab60db167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2iu__h9                        0x000055885158246a <unavailable> + 5226

    5    libc.so.6                          0x00002ab60e00c460 __libc_start_main +
    245

    6    tmpd2iu__h9                        0x0000558851582049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // TODO: Use itertools instead?\n    return string.lowercase().chars().filter{\
    \ $0 != \"z\" }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpjtxw5wev.swift:9:19: error: value of type 'String' has no member\
    \ 'lowercase'\n    return string.lowercase().chars().filter{ $0 != \"z\" }.count\n\
    \           ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n\tlet count = countUniqCharacters(string)\n\treturn count\
    \ - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpdl1yr4og.swift:8:14: error: cannot find 'countUniqCharacters' in\
    \ scope\n        let count = countUniqCharacters(string)\n                   \
    \ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let mut distinctCharCount = 0\n    for i in string.unicodeScalars\
    \ {\n        let charCount = i.count\n        if charCount > distinctCharCount\
    \ {\n            distinctCharCount = charCount\n        }\n    }\n    return distinctCharCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp4378c8b3.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut distinctCharCount\
    \ = 0\n            ^\n/tmp/tmp4378c8b3.swift:8:13: note: join the identifiers\
    \ together\n    let mut distinctCharCount = 0\n        ~~~~^~~~~~~~~~~~~~~~~\n\
    \        mutdistinctCharCount\n/tmp/tmp4378c8b3.swift:8:13: note: join the identifiers\
    \ together with camel-case\n    let mut distinctCharCount = 0\n        ~~~~^~~~~~~~~~~~~~~~~\n\
    \        mutDistinctCharCount\n/tmp/tmp4378c8b3.swift:10:27: error: value of type\
    \ 'Unicode.Scalar' has no member 'count'\n        let charCount = i.count\n  \
    \                      ~ ^~~~~\n/tmp/tmp4378c8b3.swift:11:24: error: cannot find\
    \ 'distinctCharCount' in scope\n        if charCount > distinctCharCount {\n \
    \                      ^~~~~~~~~~~~~~~~~\n/tmp/tmp4378c8b3.swift:12:13: error:\
    \ cannot find 'distinctCharCount' in scope\n            distinctCharCount = charCount\n\
    \            ^~~~~~~~~~~~~~~~~\n/tmp/tmp4378c8b3.swift:15:12: error: cannot find\
    \ 'distinctCharCount' in scope\n    return distinctCharCount\n           ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: -1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n\treturn count_distinct_characters(string: string.lowercased())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660015497
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    guard let length = string.characters.count else { return\
    \ 0 }\n    var hash = [UInt8](repeating: 0, count: length)\n    let count = _helper(string:\
    \ &string, hash: &hash)\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp_9api_yb.swift:8:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    guard let length = string.characters.count else { return\
    \ 0 }\n                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_9api_yb.swift:8:11: error: initializer for conditional\
    \ binding must have Optional type, not 'Int'\n    guard let length = string.characters.count\
    \ else { return 0 }\n          ^            ~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9api_yb.swift:10:17:\
    \ error: cannot find '_helper' in scope\n    let count = _helper(string: &string,\
    \ hash: &hash)\n                ^~~~~~~\n/tmp/tmp_9api_yb.swift:10:33: error:\
    \ cannot pass immutable value as inout argument: 'string' is a 'let' constant\n\
    \    let count = _helper(string: &string, hash: &hash)\n                     \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var result = 0\n    for ch in string {\n        switch\
    \ ch {\n        case \"A\":\n        case \"B\":\n        case \"C\":\n      \
    \  case \"D\":\n        case \"E\":\n        case \"F\":\n        case \"G\":\n\
    \        case \"H\":\n        case \"I\":\n        case \"J\":\n        case \"\
    K\":\n        case \"L\":\n        case \"M\":\n        case \"N\":\n        case\
    \ \"O\":\n        case \"P\":\n        case \"Q\":\n        case \"R\":\n    \
    \    case \"S\":\n        case \"T\":\n        case \"U\":\n        case \"V\"\
    :\n        case \"W\":\n        case \"X\":\n        case \"Y\":\n        case\
    \ \"Z\":\n            result += 1\n        default:\n            result += 0\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp3s0zyry8.swift:11:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"A\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp3s0zyry8.swift:12:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"B\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp3s0zyry8.swift:13:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"C\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp3s0zyry8.swift:14:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"D\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp3s0zyry8.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"E\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp3s0zyry8.swift:16:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"F\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp3s0zyry8.swift:17:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"G\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp3s0zyry8.swift:18:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"H\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp3s0zyry8.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"I\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp3s0zyry8.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"J\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp3s0zyry8.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"K\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp3s0zyry8.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"L\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp3s0zyry8.swift:23:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowerCaseString = string.lowercased()\n    var distinctCharacters\
    \ = 0\n\n    for characterToCheck in lowerCaseString {\n        if string.lowercased.contains(String(characterToCheck))\
    \ {\n            distinctCharacters = distinctCharacters + 1\n        }\n    }\n\
    \    return distinctCharacters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp8bfc__f_.swift:12:19: error: method 'lowercased' was used as a\
    \ property; add () to call it\n        if string.lowercased.contains(String(characterToCheck))\
    \ {\n                  ^\n                            ()\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let chars = string.characters\n    let count = stride(from:\
    \ 0, through: chars.count, by: 1).reduce(0, {$0 + $1.isUpper})\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpvm3zfija.swift:8:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars = string.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpvm3zfija.swift:9:81:\
    \ error: value of type 'Int' has no member 'isUpper'\n    let count = stride(from:\
    \ 0, through: chars.count, by: 1).reduce(0, {$0 + $1.isUpper})\n             \
    \                                                                ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var result = 1\n\n    for char in string {\n        let\
    \ isCharInUppercase = !isUppercase(char)\n        let isCharInLowercase = !isLowercase(char)\n\
    \        let isCharInTitlecase = !isTitlecase(char)\n\n        if isCharInUppercase\
    \ && isCharInLowercase && isCharInTitlecase {\n            result++\n        }\n\
    \    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp2hfx1svf.swift:11:34: error: cannot find 'isUppercase' in scope\n\
    \        let isCharInUppercase = !isUppercase(char)\n                        \
    \         ^~~~~~~~~~~\n/tmp/tmp2hfx1svf.swift:12:34: error: cannot find 'isLowercase'\
    \ in scope\n        let isCharInLowercase = !isLowercase(char)\n             \
    \                    ^~~~~~~~~~~\n/tmp/tmp2hfx1svf.swift:13:34: error: cannot\
    \ find 'isTitlecase' in scope\n        let isCharInTitlecase = !isTitlecase(char)\n\
    \                                 ^~~~~~~~~~~\n/tmp/tmp2hfx1svf.swift:16:19: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            result++\n\
    \                  ^~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacterCount: Int = 0\n    for character\
    \ in string {\n        guard let lowercaseCharacter = character.lowercaseString\
    \ else {\n            break\n        }\n        if lowercaseCharacter != character\
    \ {\n            distinctCharacterCount += 1\n        }\n    }\n    return distinctCharacterCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfqrxmhw7.swift:10:50: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n        guard let lowercaseCharacter = character.lowercaseString\
    \ else {\n                                       ~~~~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n\tcountSet := Set()\n\n\tfor _, character := range string\
    \ {\n\t\tcountSet.Add(character)\n\t}\n\n\treturn countSet.Count()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpx717js5k.swift:8:10: error: consecutive statements on a line must\
    \ be separated by ';'\n        countSet := Set()\n                ^\n        \
    \        ;\n/tmp/tmpx717js5k.swift:8:11: error: expected expression\n        countSet\
    \ := Set()\n                 ^\n/tmp/tmpx717js5k.swift:10:7: error: expected 'in'\
    \ after for-each pattern\n        for _, character := range string {\n       \
    \      ^\n/tmp/tmpx717js5k.swift:10:7: error: expected Sequence expression for\
    \ for-each loop\n        for _, character := range string {\n             ^\n\
    /tmp/tmpx717js5k.swift:8:2: error: cannot find 'countSet' in scope\n        countSet\
    \ := Set()\n        ^~~~~~~~\n/tmp/tmpx717js5k.swift:14:9: error: cannot find\
    \ 'countSet' in scope\n        return countSet.Count()\n               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string.characters.isEmpty { return 1 }\n    let string\
    \ = string.lowercased()\n    var count = 1\n    for character in string {\n  \
    \      if string.characters.filter({ $0 == character }).count > 1 {\n        \
    \    count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfceae484.swift:8:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    if string.characters.isEmpty { return 1 }\n       \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpfceae484.swift:12:19:\
    \ error: 'characters' is unavailable: Please use String directly\n        if string.characters.filter({\
    \ $0 == character }).count > 1 {\n                  ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // Find out how many times each letter occurs in the string\n\
    \    // For each letter, find the number of times it occurs in the original string\n\
    \    // And then add them all together\n    // So 'a' would occur 2 times at the\
    \ start and 3 times at the end\n    // 'b' would occur 4 times at the start and\
    \ 0 times at the end\n    var letterCounts: [Character: [Int]] = [:]\n    for\
    \ letter in string {\n        let char = String(letter)\n        if let existingCount\
    \ = letterCounts[char] {\n            let currentCount = existingCount.reduce(0,\
    \ +) + 1 // Add 1 since count is 1-based, not 0-based\n            letterCounts[char]\
    \ = currentCount\n        } else {\n            letterCounts[char] = 1\n     \
    \   }\n    }\n\n    // Now for each letter, we want to find the minimum number\
    \ of occurrences it is missing in the original string\n    // So if the original\
    \ string has 'a' and it is missing 'b' we will need to add 'a' to the count\n\
    \    // Since 'a' occurs 2 times, and 'b' occurs 3 times, we add 2 to the count\n\
    \    // Then we iterate through the original string and add 'b' to all letters\
    \ in the string\n    // And then the count will be the total number of characters\
    \ (excluding 'b')\n    var totalCount = 0\n    var count = 1\n    for letter in\
    \ string {\n        let char = String(letter)\n        totalCount += count //\
    \ Total count so far is 1 as no letters have been added to count\n        if let\
    \ existingCount = letterCounts[char] {\n            let currentCount = existingCount.reduce(0,\
    \ +) + 1 // Add 1 since count is 1-based, not 0-based\n            count += currentCount\
    \ - existingCount // Add all letters that occurred in the original string that\
    \ were missing\n        } else {\n            count += 1\n        }\n    }\n\n\
    \    return totalCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp91vuj6rj.swift:16:45: error: cannot convert value of type 'String'\
    \ to expected argument type 'Character'\n        if let existingCount = letterCounts[char]\
    \ {\n                                            ^\n/tmp/tmp91vuj6rj.swift:18:26:\
    \ error: cannot convert value of type 'String' to expected argument type 'Character'\n\
    \            letterCounts[char] = currentCount\n                         ^\n/tmp/tmp91vuj6rj.swift:20:26:\
    \ error: cannot convert value of type 'String' to expected argument type 'Character'\n\
    \            letterCounts[char] = 1\n                         ^\n/tmp/tmp91vuj6rj.swift:20:34:\
    \ error: cannot assign value of type 'Int' to subscript of type '[Int]'\n    \
    \        letterCounts[char] = 1\n                                 ^\n/tmp/tmp91vuj6rj.swift:34:45:\
    \ error: cannot convert value of type 'String' to expected argument type 'Character'\n\
    \        if let existingCount = letterCounts[char] {\n                       \
    \                     ^\n/tmp/tmp91vuj6rj.swift:36:35: error: cannot convert value\
    \ of type 'Duration' to expected argument type 'Int'\n            count += currentCount\
    \ - existingCount // Add all letters that occurred in the original string that\
    \ were missing\n                                  ^\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if let characterSet = string.characters {\n        return\
    \ characterSet.count\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpyi726nqq.swift:8:34: error: 'characters' is unavailable: Please\
    \ use String directly\n    if let characterSet = string.characters {\n       \
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpyi726nqq.swift:8:8: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n    if let characterSet = string.characters\
    \ {\n       ^                  ~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, caseSensitive:\
    \ false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppm3nwd2f.swift:8:69: error: extra argument 'caseSensitive' in call\n\
    \    return count_distinct_characters(string: string, caseSensitive: false)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n\tvar count = 0\n\tfor character in string {\n\t\tif let index\
    \ = string.firstIndex(of: character) {\n\t\t\tcount += index - string[string.startIndex].count\
    \ + index\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp877ogb7z.swift:11:13: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n                        count += index - string[string.startIndex].count\
    \ + index\n                                 ^\n/tmp/tmp877ogb7z.swift:11:27: error:\
    \ subscript 'subscript(_:)' requires that 'String.Index' conform to 'RangeExpression'\n\
    \                        count += index - string[string.startIndex].count + index\n\
    \                                               ^\nSwift.Collection:2:23: note:\
    \ where 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence\
    \ where R : RangeExpression, Self.Index == R.Bound { get }\n                 \
    \     ^\n/tmp/tmp877ogb7z.swift:11:55: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n                        count += index - string[string.startIndex].count\
    \ + index\n                                                                  \
    \         ^\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, startIndex:\
    \ 0, endIndex: string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq93316ev.swift:8:37: error: extra arguments at positions #2, #3\
    \ in call\n    return count_distinct_characters(string: string, startIndex: 0,\
    \ endIndex: string.count)\n                                    ^\n/tmp/tmpq93316ev.swift:7:6:\
    \ note: 'count_distinct_characters(string:)' declared here\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let mut freqs = [Int]()\n\n    for ch in string {\n  \
    \      freqs[Character(ch).case_insensitive()] = freqs[Character(ch).case_insensitive()]\
    \ + 1\n    }\n\n    return freqs.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpcbe64q07.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut freqs =\
    \ [Int]()\n            ^\n/tmp/tmpcbe64q07.swift:8:13: note: join the identifiers\
    \ together\n    let mut freqs = [Int]()\n        ~~~~^~~~~\n        mutfreqs\n\
    /tmp/tmpcbe64q07.swift:8:13: note: join the identifiers together with camel-case\n\
    \    let mut freqs = [Int]()\n        ~~~~^~~~~\n        mutFreqs\n/tmp/tmpcbe64q07.swift:11:9:\
    \ error: cannot find 'freqs' in scope\n        freqs[Character(ch).case_insensitive()]\
    \ = freqs[Character(ch).case_insensitive()] + 1\n        ^~~~~\n/tmp/tmpcbe64q07.swift:11:51:\
    \ error: cannot find 'freqs' in scope\n        freqs[Character(ch).case_insensitive()]\
    \ = freqs[Character(ch).case_insensitive()] + 1\n                            \
    \                      ^~~~~\n/tmp/tmpcbe64q07.swift:11:25: error: missing argument\
    \ label 'extendedGraphemeClusterLiteral:' in call\n        freqs[Character(ch).case_insensitive()]\
    \ = freqs[Character(ch).case_insensitive()] + 1\n                        ^\n \
    \                       extendedGraphemeClusterLiteral: \n/tmp/tmpcbe64q07.swift:11:29:\
    \ error: value of type 'Character' has no member 'case_insensitive'\n        freqs[Character(ch).case_insensitive()]\
    \ = freqs[Character(ch).case_insensitive()] + 1\n              ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcbe64q07.swift:11:67: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n        freqs[Character(ch).case_insensitive()] = freqs[Character(ch).case_insensitive()]\
    \ + 1\n                                                                  ^\n \
    \                                                                 extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmpcbe64q07.swift:11:71: error: value of type 'Character' has no member\
    \ 'case_insensitive'\n        freqs[Character(ch).case_insensitive()] = freqs[Character(ch).case_insensitive()]\
    \ + 1\n                                                        ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcbe64q07.swift:14:12: error: cannot find 'freqs' in sc"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let alphabet: CharacterSet = CharacterSet(charactersIn:\
    \ string)\n    return alphabet.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpvr5o8l7d.swift:8:19: error: cannot find type 'CharacterSet' in\
    \ scope\n    let alphabet: CharacterSet = CharacterSet(charactersIn: string)\n\
    \                  ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(\n        string: string,\n\
    \        distinctCharacters: Set<Character>(),\n        lowercaseCaseCounts: Dictionary<Int,\
    \ Int>(),\n        uppercaseCaseCounts: Dictionary<Int, Int>(),\n        numberCounts:\
    \ Dictionary<Int, Int>(),\n        otherCounts: Dictionary<Int, Int>()\n    )\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpt6_1kr10.swift:8:37: error: extra arguments at positions #2, #3,\
    \ #4, #5, #6 in call\n    return count_distinct_characters(\n                \
    \                    ^\n/tmp/tmpt6_1kr10.swift:7:6: note: 'count_distinct_characters(string:)'\
    \ declared here\nfunc count_distinct_characters(string: String) -> Int {\n   \
    \  ^\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        guard !is_uppercase(c)\
    \ && !is_lowercase(c) else { continue }\n        if !contains_non_ascii_characters(string:\
    \ string) {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9thvt2og.swift:10:16: error: cannot find 'is_uppercase' in scope\n\
    \        guard !is_uppercase(c) && !is_lowercase(c) else { continue }\n      \
    \         ^~~~~~~~~~~~\n/tmp/tmp9thvt2og.swift:10:36: error: cannot find 'is_lowercase'\
    \ in scope\n        guard !is_uppercase(c) && !is_lowercase(c) else { continue\
    \ }\n                                   ^~~~~~~~~~~~\n/tmp/tmp9thvt2og.swift:11:13:\
    \ error: cannot find 'contains_non_ascii_characters' in scope\n        if !contains_non_ascii_characters(string:\
    \ string) {\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string == \"\" {\n        return 0\n    }\n    if string.isEmpty\
    \ {\n        return 0\n    }\n\n    var maxCount = 0\n    var currentChar = \"\
    \"\n    for char in string.unicodeScalars {\n        let unicodeScalar = char\n\
    \        let charLower = unicodeScalar.lowercaseScalar\n\n        guard maxCount\
    \ < charLower.unicodeScalars.count else {\n            return maxCount\n     \
    \   }\n        currentChar = charLower\n\n        if !currentChar.hasPrefix(unicodeScalar)\
    \ {\n            guard maxCount > 0 else {\n                return 0\n       \
    \     }\n            maxCount += 1\n        }\n    }\n\n    return maxCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpjbaaizzx.swift:19:39: error: value of type 'Unicode.Scalar' has\
    \ no member 'lowercaseScalar'\n        let charLower = unicodeScalar.lowercaseScalar\n\
    \                        ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpjbaaizzx.swift:26:13:\
    \ error: instance method 'hasPrefix' requires that 'Unicode.Scalar' conform to\
    \ 'StringProtocol'\n        if !currentChar.hasPrefix(unicodeScalar) {\n     \
    \       ^\nSwift.StringProtocol:2:28: note: where 'Prefix' = 'Unicode.Scalar'\n\
    \    @inlinable public func hasPrefix<Prefix>(_ prefix: Prefix) -> Bool where\
    \ Prefix : StringProtocol\n                           ^\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    var prev: Int = 0\n    var i = 0\n\
    \    var lastChar: Int = 0\n\n    while i < string.count {\n        if isAlpha(string[i])\
    \ {\n            lastChar = string[i]\n        } else {\n            count +=\
    \ lastChar - prev + 1\n            prev = lastChar\n            lastChar = 0\n\
    \        }\n        i += 1\n    }\n    count += lastChar - prev + 1\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpmyfk9ial.swift:14:12: error: cannot find 'isAlpha' in scope\n \
    \       if isAlpha(string[i]) {\n           ^~~~~~~\n/tmp/tmpmyfk9ial.swift:15:30:\
    \ error: cannot assign value of type 'Character' to type 'Int'\n            lastChar\
    \ = string[i]\n                       ~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let array = string.characters()\n    .map { String($0,\
    \ radix: 16) }\n    .sorted()\n    .reduce(0) { $0 + $1.characters.map { $0.characters.reduce(0)\
    \ { $0 + 1 }.value } }\n    return Int(max(1, min(array, string.characters.count)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp6ar60guh.swift:8:24: error: cannot call value of non-function type\
    \ 'String'\n    let array = string.characters()\n                       ^    \
    \     ~~\n                                 \n"
  stdout: ''
  timestamp: 1660015503
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_in_range(string.startIndex,\
    \ string.endIndex)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpxdp9fiot.swift:8:12: error: cannot find 'count_distinct_characters_in_range'\
    \ in scope\n    return count_distinct_characters_in_range(string.startIndex, string.endIndex)\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string == \"\" {\n        return 0\n    }\n    var\
    \ distinctCharacters = Set<Character>()\n    for character in string.unicodeScalars\
    \ {\n        distinctCharacters = distinctCharacters.union(Set([character]))\n\
    \    }\n    return distinctCharacters.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpw4j68zzw.swift:13:60: error: cannot convert value of type 'Unicode.Scalar'\
    \ to expected element type 'Character'\n        distinctCharacters = distinctCharacters.union(Set([character]))\n\
    \                                                           ^\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    guard let lowercaseString = string.lowercased(),\n   \
    \     let uniqueArray = Set(lowercaseString) else { return 0 }\n    return uniqueArray.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpc5a250l_.swift:8:11: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n    guard let lowercaseString = string.lowercased(),\n\
    \          ^                     ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc5a250l_.swift:9:9:\
    \ error: initializer for conditional binding must have Optional type, not 'Set<String.Element>'\
    \ (aka 'Set<Character>')\n        let uniqueArray = Set(lowercaseString) else\
    \ { return 0 }\n        ^                 ~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let distinctCharacters = countUniqueCharacters(string)\n\
    \    let numberOfCharacters = string.count\n    return distinctCharacters / numberOfCharacters\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp2je0q9dx.swift:8:30: error: cannot find 'countUniqueCharacters'\
    \ in scope\n    let distinctCharacters = countUniqueCharacters(string)\n     \
    \                        ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    string.lowercased(\n    for: \\character,\
    \ range: nil, locale: nil) in\n        if character != nil {\n            count\
    \ += 1 //TODO: Should we add this character to an array?\n        }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpty0uk1hj.swift:10:46: error: consecutive statements on a line must\
    \ be separated by ';'\n    for: \\character, range: nil, locale: nil) in\n   \
    \                                          ^\n                               \
    \              ;\n/tmp/tmpty0uk1hj.swift:10:47: error: expected expression\n \
    \   for: \\character, range: nil, locale: nil) in\n                          \
    \                    ^\n/tmp/tmpty0uk1hj.swift:10:11: error: cannot find 'character'\
    \ in scope\n    for: \\character, range: nil, locale: nil) in\n          ^~~~~~~~~\n\
    /tmp/tmpty0uk1hj.swift:10:11: error: invalid component of Swift key path\n   \
    \ for: \\character, range: nil, locale: nil) in\n          ^\n/tmp/tmpty0uk1hj.swift:9:22:\
    \ error: argument passed to call that takes no arguments\n    string.lowercased(\n\
    \                     ^\n                     \n/tmp/tmpty0uk1hj.swift:10:29:\
    \ error: 'nil' requires a contextual type\n    for: \\character, range: nil, locale:\
    \ nil) in\n                            ^\n/tmp/tmpty0uk1hj.swift:10:42: error:\
    \ 'nil' requires a contextual type\n    for: \\character, range: nil, locale:\
    \ nil) in\n                                         ^\n/tmp/tmpty0uk1hj.swift:11:12:\
    \ error: cannot find 'character' in scope\n        if character != nil {\n   \
    \        ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n\tlet counts = dict.init()\n\n\tlet len = string.characters.count\n\
    \n\tfor _ in 0 ..< len {\n\t\tcounts[string.characters[$0]] = 1\n\t}\n\n\treturn\
    \ dict.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpxe0gcu0l.swift:13:28: error: anonymous closure argument not contained\
    \ in a closure\n                counts[string.characters[$0]] = 1\n          \
    \                               ^\n/tmp/tmpxe0gcu0l.swift:8:15: error: cannot\
    \ find 'dict' in scope\n        let counts = dict.init()\n                   \
    \  ^~~~\n/tmp/tmpxe0gcu0l.swift:10:19: error: 'characters' is unavailable: Please\
    \ use String directly\n        let len = string.characters.count\n           \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpxe0gcu0l.swift:16:9: error: cannot find 'dict' in scope\n       \
    \ return dict.count\n               ^~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercaseCharacterCount = countElements(string.lowercased())\n\
    \    let uppercaseCharacterCount = countElements(string.uppercased())\n    return\
    \ lowercaseCharacterCount + uppercaseCharacterCount\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpqqhel5xp.swift:8:35: error: cannot find 'countElements' in scope\n\
    \    let lowercaseCharacterCount = countElements(string.lowercased())\n      \
    \                            ^~~~~~~~~~~~~\n/tmp/tmpqqhel5xp.swift:9:35: error:\
    \ cannot find 'countElements' in scope\n    let uppercaseCharacterCount = countElements(string.uppercased())\n\
    \                                  ^~~~~~~~~~~~~\n/tmp/tmpqqhel5xp.swift:10:36:\
    \ error: cannot convert return expression of type 'String' to return type 'Int'\n\
    \    return lowercaseCharacterCount + uppercaseCharacterCount\n           ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Int(count_distinct(string, { (_, i) -> Bool in\n\
    \        return i >= 1\n    }))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp3tz2unql.swift:8:16: error: cannot find 'count_distinct' in scope\n\
    \    return Int(count_distinct(string, { (_, i) -> Bool in\n               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if let count = string.unicodeScalars.count {\n       \
    \ return count\n    }\n    if let count = string.unicodeScalars.filter({ $0.isUpperCase\
    \ }).count {\n        return count + 1\n    }\n    if let count = string.unicodeScalars.filter({\
    \ $0.isLowerCase }).count {\n        return count + 1\n    }\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpf9pnu9nj.swift:8:8: error: initializer for conditional binding\
    \ must have Optional type, not 'Int'\n    if let count = string.unicodeScalars.count\
    \ {\n       ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf9pnu9nj.swift:11:54:\
    \ error: value of type 'Unicode.Scalar' has no member 'isUpperCase'\n    if let\
    \ count = string.unicodeScalars.filter({ $0.isUpperCase }).count {\n         \
    \                                         ~~ ^~~~~~~~~~~\n/tmp/tmpf9pnu9nj.swift:14:54:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowerCase'\n    if let\
    \ count = string.unicodeScalars.filter({ $0.isLowerCase }).count {\n         \
    \                                         ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.unicodeScalars.reduce(0) { $0 + $1.value.unicodeScalar.value\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpc5_pw8zx.swift:8:60: error: value of type 'UInt32' has no member\
    \ 'unicodeScalar'\n    return string.unicodeScalars.reduce(0) { $0 + $1.value.unicodeScalar.value\
    \ }\n                                                  ~~~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var num = 0\n    for ch in string {\n        guard let\
    \ c = Unicode.Scalar(UnicodeScalar(Int(ch)))\n            else { continue }\n\
    \        num += 1\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpr1x2o15r.swift:10:52: error: no exact matches in call to initializer\
    \ \n        guard let c = Unicode.Scalar(UnicodeScalar(Int(ch)))\n           \
    \                                        ^\n/tmp/tmpr1x2o15r.swift:10:52: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n        guard let c = Unicode.Scalar(UnicodeScalar(Int(ch)))\n\
    \                                                   ^\n/tmp/tmpr1x2o15r.swift:10:52:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n        guard let c = Unicode.Scalar(UnicodeScalar(Int(ch)))\n\
    \                                                   ^\n/tmp/tmpr1x2o15r.swift:10:52:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n        guard let c = Unicode.Scalar(UnicodeScalar(Int(ch)))\n\
    \                                                   ^\n/tmp/tmpr1x2o15r.swift:10:52:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n        guard let c = Unicode.Scalar(UnicodeScalar(Int(ch)))\n\
    \                                                   ^\n/tmp/tmpr1x2o15r.swift:10:52:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>'))\n        guard let c = Unicode.Scalar(UnicodeScalar(Int(ch)))\n\
    \                                                   ^\n/tmp/tmpr1x2o15r.swift:10:52:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n        guard let c = Unicode.Scalar(UnicodeScalar(Int(ch)))\n\
    \                                                   ^\n/tmp/tmpr1x2o15r.swift:10:38:\
    \ error: value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>')\
    \ must be unwrapped to a value of type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \        guard let c = Unicode.Scalar(UnicodeScalar(Int(ch)))\n           "
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for char in string {\n        if let\
    \ unicodeScalar = UnicodeScalar(Int(char)) {\n            if unicodeScalar.value\
    \ > 0xFF {\n                return 1\n            }\n            count += 1\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp89wv2pej.swift:10:46: error: no exact matches in call to initializer\
    \ \n        if let unicodeScalar = UnicodeScalar(Int(char)) {\n              \
    \                               ^\nSwift.Int:7:12: note: candidate expects value\
    \ of type 'Float16' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'Character')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Double)\n    \
    \       ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float80)\n       \
    \    ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacterCount = 0\n    for character in string\
    \ {\n        if CharacterSet.lowercaseLetters.contains(character) {\n        \
    \    distinctCharacterCount += 1\n        }\n        if CharacterSet.uppercaseLetters.contains(character)\
    \ {\n            distinctCharacterCount += 1\n        }\n        if CharacterSet.punctuationChars.contains(character)\
    \ {\n            distinctCharacterCount += 1\n        }\n    }\n    return distinctCharacterCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmplaxxblhb.swift:10:12: error: cannot find 'CharacterSet' in scope\n\
    \        if CharacterSet.lowercaseLetters.contains(character) {\n           ^~~~~~~~~~~~\n\
    /tmp/tmplaxxblhb.swift:13:12: error: cannot find 'CharacterSet' in scope\n   \
    \     if CharacterSet.uppercaseLetters.contains(character) {\n           ^~~~~~~~~~~~\n\
    /tmp/tmplaxxblhb.swift:16:12: error: cannot find 'CharacterSet' in scope\n   \
    \     if CharacterSet.punctuationChars.contains(character) {\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for ch in string {\n        if ch.isLowercase\
    \ || ch.isUppercase {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpansrstg0/tmpansrstg0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf8d401c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf8d0f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf8d0f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf8d0f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpansrstg0                        0x00005652bc0d0521 <unavailable> + 5409

    5    libc.so.6                          0x00002acf8d5ed460 __libc_start_main +
    245

    6    tmpansrstg0                        0x00005652bc0d0059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660015492
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n\tvar count = 0\n\tfor _ in string.unicodeScalars {\n\t\t\
    count += 1\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp2wo51_nu/tmp2wo51_nu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b935470dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9354404b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9354404988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93544037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2wo51_nu                        0x0000562a34986511 <unavailable> + 5393

    5    libc.so.6                          0x00002b93548f9460 __libc_start_main +
    245

    6    tmp2wo51_nu                        0x0000562a34986049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count(string, &char_distinct)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp16dw0kb2.swift:8:12: error: cannot find 'count' in scope\n    return\
    \ count(string, &char_distinct)\n           ^~~~~\n/tmp/tmp16dw0kb2.swift:8:27:\
    \ error: cannot find 'char_distinct' in scope\n    return count(string, &char_distinct)\n\
    \                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    guard let stringToCheck = string else { return 0 }\n \
    \   guard !stringToCheck.isEmpty else { return 0 }\n\n    var distinctCharacters\
    \ = Set<Character>()\n\n    for i in 0..<stringToCheck.count {\n        distinctCharacters.insert(stringToCheck[i])\n\
    \    }\n\n    return distinctCharacters.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmps9v35nna.swift:8:11: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n    guard let stringToCheck = string\
    \ else { return 0 }\n          ^                   ~~~~~~\n/tmp/tmps9v35nna.swift:14:35:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        distinctCharacters.insert(stringToCheck[i])\n\
    \                                  ^~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string == \"\" {\n        return 0\n    }\n    let\
    \ regex = try! NSRegularExpression(pattern: \"[^\\\\w]\",\n                  \
    \                        options: .CaseInsensitive,\n                        \
    \                  error: nil)\n    return Int(regex.numberOfMatchesInString(string,\
    \ options: .CaseInsensitiveSearch, range: NSMakeRange(0, string.characters.count)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9471kp10.swift:11:22: error: cannot find 'NSRegularExpression'\
    \ in scope\n    let regex = try! NSRegularExpression(pattern: \"[^\\\\w]\",\n\
    \                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp9471kp10.swift:12:53: error:\
    \ cannot infer contextual base in reference to member 'CaseInsensitive'\n    \
    \                                      options: .CaseInsensitive,\n          \
    \                                         ~^~~~~~~~~~~~~~~\n/tmp/tmp9471kp10.swift:13:50:\
    \ error: 'nil' requires a contextual type\n                                  \
    \        error: nil)\n                                                 ^\n/tmp/tmp9471kp10.swift:14:94:\
    \ error: cannot find 'NSMakeRange' in scope\n    return Int(regex.numberOfMatchesInString(string,\
    \ options: .CaseInsensitiveSearch, range: NSMakeRange(0, string.characters.count)))\n\
    \                                                                            \
    \                 ^~~~~~~~~~~\n/tmp/tmp9471kp10.swift:14:64: error: cannot infer\
    \ contextual base in reference to member 'CaseInsensitiveSearch'\n    return Int(regex.numberOfMatchesInString(string,\
    \ options: .CaseInsensitiveSearch, range: NSMakeRange(0, string.characters.count)))\n\
    \                                                              ~^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var n = 0\n    for i in string.unicodeScalars {\n    \
    \    if i.isUppercase {\n            if n == 0 {\n                n = 1\n    \
    \        } else {\n                n += 1\n            }\n        } else if i.isLowercase\
    \ {\n            if n == 0 {\n                n = 1\n            } else {\n  \
    \              n += 1\n            }\n        } else if i.isTitle {\n        \
    \    if n == 0 {\n                n = 1\n            } else {\n              \
    \  n += 1\n            }\n        } else {\n            if n == 0 {\n        \
    \        n = 2\n            } else {\n                n += 2\n            }\n\
    \        }\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpr2koypkg.swift:10:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if i.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpr2koypkg.swift:16:21: error: value of type 'Unicode.Scalar' has no member\
    \ 'isLowercase'\n        } else if i.isLowercase {\n                  ~ ^~~~~~~~~~~\n\
    /tmp/tmpr2koypkg.swift:22:21: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitle'\n        } else if i.isTitle {\n                  ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Int((string.lowercaseString.count) + string.uppercaseString.count\
    \ + string.whitespaceString.count + string.nonWhitespaceString.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpwtjxl6ao.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return Int((string.lowercaseString.count) + string.uppercaseString.count\
    \ + string.whitespaceString.count + string.nonWhitespaceString.count)\n      \
    \          ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpwtjxl6ao.swift:8:56: error: value of\
    \ type 'String' has no member 'uppercaseString'\n    return Int((string.lowercaseString.count)\
    \ + string.uppercaseString.count + string.whitespaceString.count + string.nonWhitespaceString.count)\n\
    \                                                ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpwtjxl6ao.swift:8:87:\
    \ error: value of type 'String' has no member 'whitespaceString'\n    return Int((string.lowercaseString.count)\
    \ + string.uppercaseString.count + string.whitespaceString.count + string.nonWhitespaceString.count)\n\
    \                                                                            \
    \   ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpwtjxl6ao.swift:8:119: error: value of type\
    \ 'String' has no member 'nonWhitespaceString'\n    return Int((string.lowercaseString.count)\
    \ + string.uppercaseString.count + string.whitespaceString.count + string.nonWhitespaceString.count)\n\
    \                                                                            \
    \                                   ~~~~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015499
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string == \"\" {\n        return 0\n    }\n\n    var\
    \ distinctCharacters = Set<Character.UppercaseLetter>()\n    for (_, character)\
    \ in string.enumerated() {\n        distinctCharacters.insert(character)\n   \
    \ }\n\n    return distinctCharacters.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp56alpgd0.swift:12:44: error: 'UppercaseLetter' is not a member\
    \ type of struct 'Swift.Character'\n    var distinctCharacters = Set<Character.UppercaseLetter>()\n\
    \                                 ~~~~~~~~~ ^\nSwift.Character:1:23: note: 'Character'\
    \ declared here\n@frozen public struct Character : Sendable {\n              \
    \        ^\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for s in string.characters {\n    \
    \    if !is_distinct_characters(s) {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpkralgdkx.swift:9:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for s in string.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpkralgdkx.swift:10:13:\
    \ error: cannot find 'is_distinct_characters' in scope\n        if !is_distinct_characters(s)\
    \ {\n            ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for char in string.characters.reversed()\
    \ {\n        guard let _ = char.asciiValue, let _ = char.lowercaseValue.asciiValue\
    \ else { continue }\n        count += 1\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpvn_nzetl.swift:9:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters.reversed() {\n      \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpvn_nzetl.swift:10:68: error: type of expression is ambiguous without\
    \ more context\n        guard let _ = char.asciiValue, let _ = char.lowercaseValue.asciiValue\
    \ else { continue }\n                                               ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var result: Int = 0\n    for character in string.characters\
    \ {\n        guard let _ = String(character).range(of: CharacterSet.lowercaseLetters.inverted)\
    \ else { continue }\n        result += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpqp1urtdi.swift:9:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in string.characters {\n            \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpqp1urtdi.swift:10:51: error: cannot find 'CharacterSet' in scope\n\
    \        guard let _ = String(character).range(of: CharacterSet.lowercaseLetters.inverted)\
    \ else { continue }\n                                                  ^~~~~~~~~~~~\n\
    /tmp/tmpqp1urtdi.swift:10:41: error: value of type 'String' has no member 'range'\n\
    \        guard let _ = String(character).range(of: CharacterSet.lowercaseLetters.inverted)\
    \ else { continue }\n                      ~~~~~~~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    var lastChar = Character(\"z\")\n\n\
    \    for c in string {\n        if c != lastChar {\n            count++\n    \
    \        lastChar = c\n        }\n    }\n\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpbz3wsots.swift:13:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            count++\n                 ^~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string.charactersIgnoringCase)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph4wfj0ip.swift:8:38: error: missing argument label 'string:' in\
    \ call\n    return count_distinct_characters(string.charactersIgnoringCase)\n\
    \                                     ^\n                                    \
    \ string: \n/tmp/tmph4wfj0ip.swift:8:45: error: value of type 'String' has no\
    \ member 'charactersIgnoringCase'\n    return count_distinct_characters(string.charactersIgnoringCase)\n\
    \                                     ~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return reduce(string.lowercaseString.unicodeScalars.lazy.map\
    \ { $0.value }) {\n        switch ($0, $1) {\n        case (\"\", \"\"):\n   \
    \         return 0\n        case (\"\", let rest):\n            return 1 + count(rest)\n\
    \        case (let prev, let rest):\n            return 1 + count(prev + rest)\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp5ajtcq50.swift:8:12: error: cannot find 'reduce' in scope\n   \
    \ return reduce(string.lowercaseString.unicodeScalars.lazy.map { $0.value }) {\n\
    \           ^~~~~~\n/tmp/tmp5ajtcq50.swift:13:24: error: cannot find 'count' in\
    \ scope\n            return 1 + count(rest)\n                       ^~~~~\n/tmp/tmp5ajtcq50.swift:15:24:\
    \ error: cannot find 'count' in scope\n            return 1 + count(prev + rest)\n\
    \                       ^~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n\tvar distinctCharacters = \"\"\n\tfor char in string {\n\t\
    \tif char.isAlpha() {\n\t\t\tif distinctCharacters == \"\" {\n\t\t\t\tdistinctCharacters\
    \ = char\n\t\t\t} else {\n\t\t\t\tdistinctCharacters = distinctCharacters + char\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count(distinctCharacters, \".\") + 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp_sb8fiks.swift:10:11: error: value of type 'Character' has no member\
    \ 'isAlpha'\n                if char.isAlpha() {\n                   ~~~~ ^~~~~~~\n\
    /tmp/tmp_sb8fiks.swift:12:26: error: cannot assign value of type 'Character' to\
    \ type 'String'\n                                distinctCharacters = char\n \
    \                                                    ^~~~\n/tmp/tmp_sb8fiks.swift:14:47:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                                distinctCharacters = distinctCharacters + char\n\
    \                                                                          ^\n\
    /tmp/tmp_sb8fiks.swift:18:9: error: cannot find 'count' in scope\n        return\
    \ count(distinctCharacters, \".\") + 1\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for character in string {\n       \
    \ if !dictionary.contains(where: { $0.characterCaseInsensitiveCompare(character)\
    \ == .orderedSame }) {\n            count = count + 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp33sgyfdq.swift:10:13: error: cannot find 'dictionary' in scope\n\
    \        if !dictionary.contains(where: { $0.characterCaseInsensitiveCompare(character)\
    \ == .orderedSame }) {\n            ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_in_string(string, string.lowercased())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpoqapyqlr.swift:8:12: error: cannot find 'count_distinct_characters_in_string'\
    \ in scope\n    return count_distinct_characters_in_string(string, string.lowercased())\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.characters.reduce(0) { $0 + $1.isUppercaseLetter\
    \ ? 1 : 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmprgwjerh8.swift:8:36: error: missing argument label 'into:' in call\n\
    \    return string.characters.reduce(0) { $0 + $1.isUppercaseLetter ? 1 : 0 }\n\
    \                                   ^\n                                    into:\
    \ \n/tmp/tmprgwjerh8.swift:8:30: error: no 'reduce' candidates produce the expected\
    \ contextual result type 'Int'\n    return string.characters.reduce(0) { $0 +\
    \ $1.isUppercaseLetter ? 1 : 0 }\n                             ^\nSwift.Sequence:3:28:\
    \ note: 'reduce(into:_:)' produces '(String, _) -> Int', not the expected contextual\
    \ result type 'Int'\n    @inlinable public func reduce<Result>(into initialResult:\
    \ __owned Result, _ updateAccumulatingResult: (_ partialResult: inout Result,\
    \ Self.Element) throws -> ()) rethrows -> Result\n                           ^\n\
    Swift.Sequence:3:28: note: 'reduce(into:_:)' produces '(Duration, _) -> Int',\
    \ not the expected contextual result type 'Int'\n    @inlinable public func reduce<Result>(into\
    \ initialResult: __owned Result, _ updateAccumulatingResult: (_ partialResult:\
    \ inout Result, Self.Element) throws -> ()) rethrows -> Result\n             \
    \              ^\nSwift.Sequence:3:28: note: 'reduce(into:_:)' produces '(Float16,\
    \ _) -> Int', not the expected contextual result type 'Int'\n    @inlinable public\
    \ func reduce<Result>(into initialResult: __owned Result, _ updateAccumulatingResult:\
    \ (_ partialResult: inout Result, Self.Element) throws -> ()) rethrows -> Result\n\
    \                           ^\nSwift.Sequence:3:28: note: 'reduce(into:_:)' produces\
    \ '(Float, _) -> Int', not the expected contextual result type 'Int'\n    @inlinable\
    \ public func reduce<Result>(into initialResult: __owned Result, _ updateAccumulatingResult:\
    \ (_ partialResult: inout Result, Self.Element) throws -> ()) rethrows -> Result\n\
    \                           ^\nSwift.Sequence:3:28: note: 'reduce(into:_:)' produces\
    \ '(Double, _) -> Int', not the expected contextual result type 'Int'\n    @inlinable\
    \ public func reduce<Result>(into initialResult: __owned Result, _ updateAccumulatingResult:\
    \ (_ partialResult: inout R"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n\n    guard let unicodeScalars = string.unicodeScalars\
    \ else {\n        return count\n    }\n\n    for unicodeScalar in unicodeScalars\
    \ {\n        guard let character = unicodeScalar.value else { continue }\n\n \
    \       guard let lowercase = String(Character(character).lowercaseString) else\
    \ { continue }\n        guard let uppercase = String(Character(character).uppercaseString)\
    \ else { continue }\n        guard let capitalized = String(Character(character).capitalizedString)\
    \ else { continue }\n\n        guard lowercase.isEmpty && !uppercase.isEmpty &&\
    \ !capitalized.isEmpty else { continue }\n\n        count += 1\n    }\n\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpw870b96t.swift:10:11: error: initializer for conditional binding\
    \ must have Optional type, not 'String.UnicodeScalarView'\n    guard let unicodeScalars\
    \ = string.unicodeScalars else {\n          ^                    ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpw870b96t.swift:15:15: error: initializer for conditional binding must\
    \ have Optional type, not 'UInt32'\n        guard let character = unicodeScalar.value\
    \ else { continue }\n              ^               ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw870b96t.swift:17:38:\
    \ error: no exact matches in call to initializer \n        guard let lowercase\
    \ = String(Character(character).lowercaseString) else { continue }\n         \
    \                            ^\n/tmp/tmpw870b96t.swift:17:38: note: found candidate\
    \ with type '(Unicode.Scalar) -> Character'\n        guard let lowercase = String(Character(character).lowercaseString)\
    \ else { continue }\n                                     ^\n/tmp/tmpw870b96t.swift:17:38:\
    \ note: found candidate with type '(String) -> Character'\n        guard let lowercase\
    \ = String(Character(character).lowercaseString) else { continue }\n         \
    \                            ^\n/tmp/tmpw870b96t.swift:17:59: error: value of\
    \ type 'Character' has no member 'lowercaseString'\n        guard let lowercase\
    \ = String(Character(character).lowercaseString) else { continue }\n         \
    \                            ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpw870b96t.swift:18:38:\
    \ error: no exact matches in call to initializer \n        guard let uppercase\
    \ = String(Character(character).uppercaseString) else { continue }\n         \
    \                            ^\n/tmp/tmpw870b96t.swift:18:38: note: found candidate\
    \ with type '(Unicode.Scalar) -> Character'\n        guard let uppercase = String(Character(character).uppercaseString)\
    \ else { continue }\n                                     ^\n/tmp/tmpw870b96t.swift:18:38:\
    \ note: found candidate with type '(String) -> Character'\n        guard let uppercase\
    \ = String(Character(character).uppercaseString) else { continue }\n         \
    \                            ^\n/tmp/tm"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let string = string.toLowercase()\n    var distinctCount\
    \ = 0\n    for character in string {\n        if string.index(of: character) !=\
    \ nil {\n            distinctCount += 1\n        }\n    }\n    return distinctCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpmrzz5hmf.swift:8:25: error: value of type 'String' has no member\
    \ 'toLowercase'\n    let string = string.toLowercase()\n                 ~~~~~~\
    \ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(characters: string, encoding:\
    \ .ascii)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpt9j66ahn.swift:8:37: error: extra arguments at positions #1, #2\
    \ in call\n    return count_distinct_characters(characters: string, encoding:\
    \ .ascii)\n                                    ^\n/tmp/tmpt9j66ahn.swift:7:6:\
    \ note: 'count_distinct_characters(string:)' declared here\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n     ^\n/tmp/tmpt9j66ahn.swift:8:38: error: missing argument\
    \ for parameter 'string' in call\n    return count_distinct_characters(characters:\
    \ string, encoding: .ascii)\n                                     ^\n        \
    \                             string: <#String#>, \n/tmp/tmpt9j66ahn.swift:7:6:\
    \ note: 'count_distinct_characters(string:)' declared here\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n     ^\n/tmp/tmpt9j66ahn.swift:8:69: error: cannot infer contextual\
    \ base in reference to member 'ascii'\n    return count_distinct_characters(characters:\
    \ string, encoding: .ascii)\n                                                \
    \                   ~^~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let str = string.lowercased()\n    let str = str.unicodeScalars\n\
    \        .filter{ !$0.isControl }\n        .filter{ !$0.isWhitespace }\n     \
    \   .count\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpuhvhidwk.swift:10:22: error: value of type 'Unicode.Scalar' has\
    \ no member 'isControl'\n        .filter{ !$0.isControl }\n                  ~~\
    \ ^~~~~~~~~\n/tmp/tmpuhvhidwk.swift:11:22: error: value of type 'Unicode.Scalar'\
    \ has no member 'isWhitespace'\n        .filter{ !$0.isWhitespace }\n        \
    \          ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var result = 0\n    for character in string.unicodeScalars\
    \ {\n        result = result + 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpaglikgav/tmpaglikgav.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b075f35dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b075f054b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b075f054988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b075f0537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaglikgav                        0x000055eb5c3f8511 <unavailable> + 5393

    5    libc.so.6                          0x00002b075f549460 __libc_start_main +
    245

    6    tmpaglikgav                        0x000055eb5c3f8049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n\n    for ch in string {\n        count\
    \ = max(count, count_distinct_characters_case_insensitive(ch))\n    }\n\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp5v9p5eli.swift:11:28: error: cannot find 'count_distinct_characters_case_insensitive'\
    \ in scope\n        count = max(count, count_distinct_characters_case_insensitive(ch))\n\
    \                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_characters(string, \"\", false)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppr_n6jh1.swift:8:12: error: cannot find 'count_characters' in scope\n\
    \    return count_characters(string, \"\", false)\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n\tlet characterCounts: Dictionary<String, Int> = Dictionary(uniqueKeysWithValues:\
    \ string.characters\n\t\t.map { unichar($0) }\n\t\t.reduce(into: [String: Int]())\
    \ {\n\t\t$0[$1] = 1\n\t},\n\t\tcount: string.characters.count)\n\n\treturn (characterCounts.keys.reduce(0,\
    \ combine: +)) + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp_mdl3vjx.swift:9:10: error: cannot find 'unichar' in scope\n  \
    \              .map { unichar($0) }\n                       ^~~~~~~\n/tmp/tmp_mdl3vjx.swift:15:37:\
    \ error: extraneous argument label 'combine:' in call\n        return (characterCounts.keys.reduce(0,\
    \ combine: +)) + 1\n                                           ^   ~~~~~~~~~\n\
    \                                               \n/tmp/tmp_mdl3vjx.swift:15:50:\
    \ error: cannot convert value of type '(Int) -> Int' to expected argument type\
    \ '(Int, Dictionary<String, Int>.Keys.Element) throws -> Int' (aka '(Int, String)\
    \ throws -> Int')\n        return (characterCounts.keys.reduce(0, combine: +))\
    \ + 1\n                                                        ^\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_characters(string: string, isDistinct: true)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp_ijdqii_.swift:8:12: error: cannot find 'count_characters' in scope\n\
    \    return count_characters(string: string, isDistinct: true)\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = UInt32()\n    count = _countCharacters(string,\
    \ &count)\n    return Int(count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpmd7k4rj1.swift:9:13: error: cannot find '_countCharacters' in scope\n\
    \    count = _countCharacters(string, &count)\n            ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string.count == 0 {\n        return 0\n    }\n    \n\
    \    let mut seen = [Character]()\n    var distinctCharacters = 0\n    \n    for\
    \ char in string.unicodeScalars {\n        let char = char.value as UInt16\n \
    \       \n        if let char = char {\n            if !seen[char] {\n       \
    \         distinctCharacters += 1;\n                seen[char] = true;\n     \
    \       }\n        }\n    }\n    \n    return distinctCharacters;\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp83szgitw.swift:12:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut seen = [Character]()\n\
    \            ^\n/tmp/tmp83szgitw.swift:12:13: note: join the identifiers together\n\
    \    let mut seen = [Character]()\n        ~~~~^~~~\n        mutseen\n/tmp/tmp83szgitw.swift:12:13:\
    \ note: join the identifiers together with camel-case\n    let mut seen = [Character]()\n\
    \        ~~~~^~~~\n        mutSeen\n/tmp/tmp83szgitw.swift:16:31: error: cannot\
    \ convert value of type 'UInt32' to type 'UInt16' in coercion\n        let char\
    \ = char.value as UInt16\n                   ~~~~~~~~~~~^~~~~~~~~\n          \
    \         UInt16(             )\n/tmp/tmp83szgitw.swift:19:17: error: cannot find\
    \ 'seen' in scope\n            if !seen[char] {\n                ^~~~\n/tmp/tmp83szgitw.swift:21:17:\
    \ error: cannot find 'seen' in scope\n                seen[char] = true;\n   \
    \             ^~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let string = string.lowercased()\n    var count = 0\n\
    \    for character in string {\n        if character != character {\n        \
    \    count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp8134kl8r/tmp8134kl8r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b323ab1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b323a812b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b323a812988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b323a8117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8134kl8r                        0x000055cb89bd047a <unavailable> + 5242

    5    libc.so.6                          0x00002b323ad07460 __libc_start_main +
    245

    6    tmp8134kl8r                        0x000055cb89bd0059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_helper(string).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpzo6oovf2.swift:8:12: error: cannot find 'count_distinct_characters_helper'\
    \ in scope\n    return count_distinct_characters_helper(string).count\n      \
    \     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string == \"\" {\n        return 0\n    }\n    var\
    \ distinctCharacters: Int = 0\n    var lowerCaseString = [Character : Int]()\n\
    \    var upperCaseString = [Character : Int]()\n    var i = 0\n    while i < string.characters.count\
    \ {\n        let character = string.characters.elementAt(i)\n        if case let\
    \ character as Character? {\n            switch character {\n            case\
    \ Character(character.lowercaseString):\n                lowerCaseString[character]\
    \ = distinctCharacters\n                distinctCharacters += lowerCaseString.count\n\
    \            case Character(character.uppercaseString):\n                upperCaseString[character]\
    \ = distinctCharacters\n                distinctCharacters += upperCaseString.count\n\
    \            default:\n                break\n            }\n        } else {\n\
    \            break\n        }\n        i += 1\n    }\n    return distinctCharacters\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpw8bqeoxj.swift:17:45: error: variable binding in a condition requires\
    \ an initializer\n        if case let character as Character? {\n            \
    \                                ^\n/tmp/tmpw8bqeoxj.swift:15:22: error: 'characters'\
    \ is unavailable: Please use String directly\n    while i < string.characters.count\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpw8bqeoxj.swift:16:43: error: value of type 'String' has\
    \ no member 'elementAt'\n        let character = string.characters.elementAt(i)\n\
    \                        ~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(chars: string.unicodeScalars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpullm0sd3.swift:8:37: error: incorrect argument label in call (have\
    \ 'chars:', expected 'string:')\n    return count_distinct_characters(chars: string.unicodeScalars)\n\
    \                                    ^~~~~~\n                                \
    \     string\n/tmp/tmpullm0sd3.swift:8:52: error: cannot convert value of type\
    \ 'String.UnicodeScalarView' to expected argument type 'String'\n    return count_distinct_characters(chars:\
    \ string.unicodeScalars)\n                                                   ^\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.unicodeScalars.map({ $0 }).reduce(0) { _\
    \ + $1.value }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppoa5v6dk.swift:8:58: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n    return string.unicodeScalars.map({ $0\
    \ }).reduce(0) { _ + $1.value }\n                                            \
    \             ^\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let stringCut = string.unicodeScalars\n        .map({$0.value})\n\
    \        .sorted(by: {$0 < $1})\n        .unique()\n\n    return stringCut.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpqsmvqhs0.swift:11:10: error: value of type '[UInt32]' has no member\
    \ 'unique'\n        .unique()\n         ^~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = Int()\n    for character in string {\n   \
    \     guard !character.isEmpty else { return 0 }\n        let currentCharIndex\
    \ = string.index(string.startIndex, offsetBy: 1)\n        guard let currentChar\
    \ = string.substring(with: currentCharIndex) else { return 0 }\n        guard\
    \ let previousChar = string.substring(with: currentCharIndex.advanced(by: -1))\
    \ else { return 0 }\n        guard let currentCharLowercase = Character(currentChar).lowercased()\
    \ else {\n            return count\n        }\n        guard let previousCharLowercase\
    \ = Character(previousChar).lowercased() else {\n            return count\n  \
    \      }\n        if currentCharLowercase == previousCharLowercase {\n       \
    \     count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpptoez58n.swift:10:26: error: value of type 'Character' has no member\
    \ 'isEmpty'\n        guard !character.isEmpty else { return 0 }\n            \
    \   ~~~~~~~~~ ^~~~~~~\n/tmp/tmpptoez58n.swift:12:40: error: value of type 'String'\
    \ has no member 'substring'\n        guard let currentChar = string.substring(with:\
    \ currentCharIndex) else { return 0 }\n                                ~~~~~~\
    \ ^~~~~~~~~\n/tmp/tmpptoez58n.swift:13:41: error: value of type 'String' has no\
    \ member 'substring'\n        guard let previousChar = string.substring(with:\
    \ currentCharIndex.advanced(by: -1)) else { return 0 }\n                     \
    \            ~~~~~~ ^~~~~~~~~\n/tmp/tmpptoez58n.swift:13:74: error: value of type\
    \ 'String.Index' has no member 'advanced'\n        guard let previousChar = string.substring(with:\
    \ currentCharIndex.advanced(by: -1)) else { return 0 }\n                     \
    \                                   ~~~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // If string is empty, return 0\n    if string.count ==\
    \ 0 {\n        return 0\n    }\n    // Create a HashSet to store all unique characters\n\
    \    let set: Set<String> = Set(string)\n    return set.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp4vy1_u3l.swift:13:32: error: missing argument label 'arrayLiteral:'\
    \ in call\n    let set: Set<String> = Set(string)\n                          \
    \     ^\n                               arrayLiteral: \n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    \n    guard let stringToCheck = string.lowercased(), let\
    \ characters = Array(stringToCheck) else {\n        return 0\n    }\n    var distinctCount\
    \ = 0\n    \n    for character in characters {\n        if let index = characters.index(of:\
    \ character) {\n            let substring = characters.index(before: index)\n\
    \            distinctCount += substring - index\n        }\n    }\n    return\
    \ distinctCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp7ecyvx4m.swift:9:11: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n    guard let stringToCheck = string.lowercased(),\
    \ let characters = Array(stringToCheck) else {\n          ^                  \
    \ ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ecyvx4m.swift:9:52: error: initializer for conditional\
    \ binding must have Optional type, not 'Array<String.Element>' (aka 'Array<Character>')\n\
    \    guard let stringToCheck = string.lowercased(), let characters = Array(stringToCheck)\
    \ else {\n                                                   ^               \
    \ ~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ecyvx4m.swift:15:35: warning: 'index(of:)' is\
    \ deprecated: renamed to 'firstIndex(of:)'\n        if let index = characters.index(of:\
    \ character) {\n                                  ^\n/tmp/tmp7ecyvx4m.swift:15:35:\
    \ note: use 'firstIndex(of:)' instead\n        if let index = characters.index(of:\
    \ character) {\n                                  ^~~~~\n                    \
    \              firstIndex\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count: Int = 0\n    for character in string {\n  \
    \      if character != character {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpq8rjzv4c/tmpq8rjzv4c.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d7d759c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d7d450b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d7d450988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d7d44f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq8rjzv4c                        0x000055c003b7941a <unavailable> + 5146

    5    libc.so.6                          0x00002b2d7d945460 __libc_start_main +
    245

    6    tmpq8rjzv4c                        0x000055c003b78ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string.characters.isEmpty { return 0 }\n    var count\
    \ = 1\n    for c in string.characters {\n        if case .upper = c.caseStyle\
    \ {\n            count *= 2\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpoaplcy9s.swift:8:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    if string.characters.isEmpty { return 0 }\n       \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpoaplcy9s.swift:10:21:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ string.characters {\n                    ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpoaplcy9s.swift:11:28: error: value of type\
    \ 'Character' has no member 'caseStyle'\n        if case .upper = c.caseStyle\
    \ {\n                         ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_impl(string, 0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp3z0z0s7l.swift:8:12: error: cannot find 'count_distinct_characters_impl'\
    \ in scope\n    return count_distinct_characters_impl(string, 0)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpgpnqb98m.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015421
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var i = 0\n    for c in string.unicodeScalars {\n    \
    \    if i == 0 {\n            i = 1\n        }\n        if c != c {\n        \
    \    i += 1\n        }\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmprxvma93_/tmprxvma93_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ffde65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ffdb5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ffdb5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ffdb5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprxvma93_                        0x000055e2bef5a46a <unavailable> + 5226

    5    libc.so.6                          0x00002b7ffe051460 __libc_start_main +
    245

    6    tmprxvma93_                        0x000055e2bef5a049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characterSet = CharacterSet(charactersIn: string)\n\
    \    return characterSet.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpbqfi8w7n.swift:8:24: error: cannot find 'CharacterSet' in scope\n\
    \    let characterSet = CharacterSet(charactersIn: string)\n                 \
    \      ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015421
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var uniqueChars = 0\n\n    for char in string.lowercased().unicodeScalars\
    \ {\n        if string.lowercased().unicodeScalars.contains(char) {\n        \
    \    uniqueChars += 1\n        }\n    }\n\n    return uniqueChars\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpb1qe8xyh/tmpb1qe8xyh.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17fd01fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17fcd16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17fcd16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17fcd157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb1qe8xyh                        0x000055f2181416b1 <unavailable> + 5809

    5    libc.so.6                          0x00002b17fd20b460 __libc_start_main +
    245

    6    tmpb1qe8xyh                        0x000055f2181411e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let alphabet = string.unicodeScalars\n        .flatMap\
    \ { UnicodeScalar($0) }\n        .map(String.init)\n        .sorted()\n      \
    \  .reduce(\"\") { (s, c) in\n            s + c.unicodeScalars.reduce(\"\") {\
    \ $0 + $1.unicodeScalars.reduce(\"\") { $0 + $1 } }\n        }\n    return alphabet.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpldti2ng_.swift:8:20: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let alphabet = string.unicodeScalars\n                \
    \   ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015509
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCount = 0\n    for c in string {\n       \
    \ if string[string.index(string.startIndex, offsetBy: 1)] != c {\n           \
    \ distinctCount += 1\n        }\n    }\n    return distinctCount\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpn27b4x9b/tmpn27b4x9b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bf8aacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bf87a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bf87a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bf87a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn27b4x9b                        0x00005595f47f553a <unavailable> + 5434

    5    libc.so.6                          0x00002b0bf8c98460 __libc_start_main +
    245

    6    tmpn27b4x9b                        0x00005595f47f5119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var numberOfDistinctCharacters = 0\n    var index = 0\n\
    \    \n    for _ in string {\n        if string[index] == string[index+1] {\n\
    \            numberOfDistinctCharacters += 2\n        }\n        \n        index\
    \ += 1\n    }\n    \n    return numberOfDistinctCharacters\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp5dnh06hy.swift:12:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if string[index]\
    \ == string[index+1] {\n           ^~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp5dnh06hy.swift:12:29: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if string[index] == string[index+1] {\n                            ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Int((string.unicodeScalars.dropFirst().map { $0.value\
    \ }).reduce({ $0 + 1 }))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpey633603.swift:8:12: error: no exact matches in call to initializer\
    \ \n    return Int((string.unicodeScalars.dropFirst().map { $0.value }).reduce({\
    \ $0 + 1 }))\n           ^\n/tmp/tmpey633603.swift:8:12: note: found candidate\
    \ with type '(@escaping (Int) -> Int) -> Int'\n    return Int((string.unicodeScalars.dropFirst().map\
    \ { $0.value }).reduce({ $0 + 1 }))\n           ^\n/tmp/tmpey633603.swift:8:86:\
    \ error: missing argument for parameter #2 in call\n    return Int((string.unicodeScalars.dropFirst().map\
    \ { $0.value }).reduce({ $0 + 1 }))\n                                        \
    \                                             ^\n                            \
    \                                                         , <#(@escaping (Int)\
    \ -> Int, UInt32) throws -> (Int) -> Int#>\nSwift.Sequence:2:28: note: 'reduce'\
    \ declared here\n    @inlinable public func reduce<Result>(_ initialResult: Result,\
    \ _ nextPartialResult: (_ partialResult: Result, Self.Element) throws -> Result)\
    \ rethrows -> Result\n                           ^\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.chars().distinct.count()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpn4n2c39a.swift:8:19: error: value of type 'String' has no member\
    \ 'chars'\n    return string.chars().distinct.count()\n           ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n\t\n\tlet length = string.characters.count\n\tvar distinct_characters\
    \ = Array<Int>(repeating: 0, count: length)\n\t\n\tfor index = 0 to string.characters.count\
    \ {\n\t\tlet char = string.characters[index]\n\t\tif let char = char.lowercaseString\
    \ {\n\t\t\tdistinct_characters[distinct_characters.index(of: char)!] += 1\n\t\t\
    } else {\n\t\t\tdistinct_characters[distinct_characters.index(of: char)!] += 1\n\
    \t\t}\n\t}\n\t\n\treturn distinct_characters.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9lg5pbnr.swift:12:12: error: expected 'in' after for-each pattern\n\
    \        for index = 0 to string.characters.count {\n                  ^\n/tmp/tmp9lg5pbnr.swift:12:12:\
    \ error: expected Sequence expression for for-each loop\n        for index = 0\
    \ to string.characters.count {\n                  ^\n/tmp/tmp9lg5pbnr.swift:9:22:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ length = string.characters.count\n                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for character in string {\n       \
    \ if case .caseInsensitive = character.unicodeScalars.first!.caseStyle {\n   \
    \         count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpoc7lx2t7.swift:10:68: error: value of type 'Unicode.Scalar' has\
    \ no member 'caseStyle'\n        if case .caseInsensitive = character.unicodeScalars.first!.caseStyle\
    \ {\n                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for character in string {\n       \
    \ if let _ = character.toUppercase(), let _ = character.toLowercase() {\n    \
    \        count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpxji_ryv0.swift:10:30: error: value of type 'Character' has no member\
    \ 'toUppercase'\n        if let _ = character.toUppercase(), let _ = character.toLowercase()\
    \ {\n                   ~~~~~~~~~ ^~~~~~~~~~~\n/tmp/tmpxji_ryv0.swift:10:63: error:\
    \ value of type 'Character' has no member 'toLowercase'\n        if let _ = character.toUppercase(),\
    \ let _ = character.toLowercase() {\n                                        \
    \            ~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var characterSet: [Character] = []\n    var count = 0\n\
    \    for char in string {\n        guard let index = characterSet.index(of: char)\
    \ else { characterSet.append(char); count += 1 }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq_lp2bfk.swift:11:40: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        guard let index = characterSet.index(of: char)\
    \ else { characterSet.append(char); count += 1 }\n                           \
    \            ^\n/tmp/tmpq_lp2bfk.swift:11:40: note: use 'firstIndex(of:)' instead\n\
    \        guard let index = characterSet.index(of: char) else { characterSet.append(char);\
    \ count += 1 }\n                                       ^~~~~\n               \
    \                        firstIndex\n/tmp/tmpq_lp2bfk.swift:11:19: warning: value\
    \ 'index' was defined but never used; consider replacing with boolean test\n \
    \       guard let index = characterSet.index(of: char) else { characterSet.append(char);\
    \ count += 1 }\n              ~~~~^~~~~~~~\n                                 \
    \                      != nil\n/tmp/tmpq_lp2bfk.swift:11:101: error: 'guard' body\
    \ must not fall through, consider using a 'return' or 'throw' to exit the scope\n\
    \        guard let index = characterSet.index(of: char) else { characterSet.append(char);\
    \ count += 1 }\n                                                             \
    \                                       ^\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count: Int = 0\n    var lastChar = \"\"\n    for char\
    \ in string {\n        if char != lastChar  {\n            lastChar = char\n \
    \           count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp307z297n.swift:11:20: error: cannot convert value of type 'String'\
    \ to expected argument type 'Character'\n        if char != lastChar  {\n    \
    \               ^\n/tmp/tmp307z297n.swift:12:24: error: cannot assign value of\
    \ type 'Character' to type 'String'\n            lastChar = char\n           \
    \            ^~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var chars = Set<Character>()\n    for ch in string {\n\
    \        chars.insert(ch as Character)\n    }\n    return chars.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpbwltvvfi/tmpbwltvvfi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7c306bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7c2d62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7c2d62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7c2d617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbwltvvfi                        0x00005637938d15f1 <unavailable> + 5617

    5    libc.so.6                          0x00002ae7c3257460 __libc_start_main +
    245

    6    tmpbwltvvfi                        0x00005637938d1129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n\tvar count : Int = 0\n\tfor _  in string.characters {\n\t\
    \tif case .caseInsensitive = string {\n\t\t\tif count > 0 {\n\t\t\t\treturn count\n\
    \t\t\t}\n\t\t} else {\n\t\t\tif count >= Character.UnicodeScalarCount() {\n\t\t\
    \t\treturn count\n\t\t\t}\n\t\t}\n\t\tcount += 1\n\t}\n\treturn count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppyxci_vl.swift:9:19: error: 'characters' is unavailable: Please\
    \ use String directly\n        for _  in string.characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmppyxci_vl.swift:10:12: error: reference to member 'caseInsensitive' cannot\
    \ be resolved without a contextual type\n                if case .caseInsensitive\
    \ = string {\n                         ^\n/tmp/tmppyxci_vl.swift:15:26: error:\
    \ type 'Character' has no member 'UnicodeScalarCount'\n                      \
    \  if count >= Character.UnicodeScalarCount() {\n                            \
    \        ~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let count = Set(string).count\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpfl7e04ki/tmpfl7e04ki.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad268bf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2688eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2688ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2688ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfl7e04ki                        0x000055f1e024f561 <unavailable> + 5473

    5    libc.so.6                          0x00002ad268de3460 __libc_start_main +
    245

    6    tmpfl7e04ki                        0x000055f1e024f099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let length = string.characters.count\n    let count =\
    \ (string\n        .characters\n        .filter({\n            if case let c =\
    \ $0 as UInt8 where c >= \"a\" && c <= \"z\" {\n                true\n       \
    \     } else {\n                false\n            }\n        })\n        .map({\
    \ $0 as String })\n        .map({ (String.init($0) ?? \"\").characters.count })\n\
    \        .reduce({\n            if $0 > 1 {\n                $0 + 1\n        \
    \    } else {\n                $0\n            }\n        }, 1))\n    return length\
    \ - ((length + count.characters.count) * (count.characters.count / 2))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpxw9hb066.swift:12:41: error: expected ',' joining parts of a multi-clause\
    \ condition\n            if case let c = $0 as UInt8 where c >= \"a\" && c <=\
    \ \"z\" {\n                                       ~^~~~~\n                   \
    \                    ,\n/tmp/tmpxw9hb066.swift:8:25: error: 'characters' is unavailable:\
    \ Please use String directly\n    let length = string.characters.count\n     \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpxw9hb066.swift:12:32: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to type 'UInt8' in coercion\n            if case let c = $0\
    \ as UInt8 where c >= \"a\" && c <= \"z\" {\n                            ~~~^~~~~~~~\n\
    /tmp/tmpxw9hb066.swift:26:12: error: cannot convert value of type 'Int' to expected\
    \ argument type '(@escaping (_) -> (), Int) throws -> (_) -> ()'\n        }, 1))\n\
    \           ^\n/tmp/tmpxw9hb066.swift:18:19: error: cannot convert value of type\
    \ 'String.Element' (aka 'Character') to type 'String' in coercion\n        .map({\
    \ $0 as String })\n               ~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_characters(string, false)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp868am8de.swift:8:12: error: cannot find 'count_characters' in scope\n\
    \    return count_characters(string, false)\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n\treturn count(string: string).distinctChar\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9k9s2v7i.swift:8:9: error: cannot find 'count' in scope\n     \
    \   return count(string: string).distinctChar\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015492
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string.characters.count == 0 {\n        return 0\n\
    \    }\n\n    let length = string.characters.count\n    var total = 0\n    var\
    \ characterIndex = 0\n    while characterIndex < length {\n        if string.distance(from:\
    \ String.Index(encodedOffset: characterIndex, in: string)) != 0 {\n          \
    \  let current = string.substring(with: String.Index(encodedOffset: characterIndex,\
    \ in: string))\n            let previous = string.substring(with: String.Index(encodedOffset:\
    \ characterIndex - 1, in: string))\n            let next = string.substring(with:\
    \ String.Index(encodedOffset: characterIndex + 1, in: string))\n            if\
    \ current.lowercased() != previous.lowercased() {\n                total += 1\n\
    \            }\n        }\n\n        characterIndex += 1\n    }\n\n    return\
    \ total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp3233_d74.swift:8:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    if string.characters.count == 0 {\n              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp3233_d74.swift:12:25:\
    \ error: 'characters' is unavailable: Please use String directly\n    let length\
    \ = string.characters.count\n                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3233_d74.swift:16:89: error: missing\
    \ argument for parameter 'to' in call\n        if string.distance(from: String.Index(encodedOffset:\
    \ characterIndex, in: string)) != 0 {\n                                      \
    \                                                  ^\n                       \
    \                                                                 , to: <#String.Index#>\n\
    Swift.String:11:17: note: 'distance(from:to:)' declared here\n    public func\
    \ distance(from start: String.Index, to end: String.Index) -> Int\n          \
    \      ^\n/tmp/tmp3233_d74.swift:16:46: error: incorrect argument label in call\
    \ (have 'encodedOffset:in:', expected 'utf16Offset:in:')\n        if string.distance(from:\
    \ String.Index(encodedOffset: characterIndex, in: string)) != 0 {\n          \
    \                                   ^~~~~~~~~~~~~~\n                         \
    \                     utf16Offset\n/tmp/tmp3233_d74.swift:17:34: error: value\
    \ of type 'String' has no member 'substring'\n            let current = string.substring(with:\
    \ String.Index(encodedOffset: characterIndex, in: string))\n                 \
    \         ~~~~~~ ^~~~~~~~~\n/tmp/tmp3233_d74.swift:17:62: error: incorrect argument\
    \ label in call (have 'encodedOffset:in:', expected 'utf16Offset:in:')\n     \
    \       let current = string.substring(with: String.Index(encodedOffset: characterIndex,\
    \ in: string))\n                                                             ^~~~~~~~~~~~~~\n\
    \                                                "
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return distinct_characters(string: string)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp0x7_s0mn.swift:8:12: error: cannot find 'distinct_characters' in\
    \ scope\n    return distinct_characters(string: string)\n           ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.unicodeScalars.reduce(0) { count, character\
    \ in\n        if let character = character {\n            if !character.isUppercase\
    \ && !character.isLowercase && !character.isDecimalDigit {\n                count\
    \ += 1\n            }\n        }\n        return count\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpdj5x_qgg.swift:8:40: error: missing argument label 'into:' in call\n\
    \    return string.unicodeScalars.reduce(0) { count, character in\n          \
    \                             ^\n                                        into:\
    \ \n/tmp/tmpdj5x_qgg.swift:8:34: error: cannot convert return expression of type\
    \ '(_, _) -> _' to return type 'Int'\n    return string.unicodeScalars.reduce(0)\
    \ { count, character in\n           ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpdj5x_qgg.swift:8:41: error: cannot convert value of type 'Int' to expected\
    \ argument type '(inout @escaping (_, _) -> _, Unicode.Scalar) throws -> ()'\n\
    \    return string.unicodeScalars.reduce(0) { count, character in\n          \
    \                              ^\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for _ in string.unicodeScalars {\n\
    \        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpojwawn5c/tmpojwawn5c.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd72401c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd720f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd720f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd720f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpojwawn5c                        0x000056038a69e511 <unavailable> + 5393

    5    libc.so.6                          0x00002abd725ed460 __libc_start_main +
    245

    6    tmpojwawn5c                        0x000056038a69e049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var result = 1\n    for letter in string {\n        if\
    \ letter.lowercaseString != letter {\n            result++\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpezfi658i.swift:10:19: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n        if letter.lowercaseString != letter {\n         \
    \  ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpezfi658i.swift:11:19: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            result++\n                \
    \  ^~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n\tvar counter:Int = 0\n\tfor c in string.unicodeScalars {\n\
    \t\tif !c.isLowercase {\n\t\t\tcounter += 1\n\t\t}\n\t}\n\treturn counter\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp23gvjdwr.swift:10:9: error: value of type 'Unicode.Scalar' has\
    \ no member 'isLowercase'\n                if !c.isLowercase {\n             \
    \       ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let chars = string.unicodeScalars.map({$0.value})\n  \
    \  let set = Set<UnicodeScalar>(chars)\n    return set.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp99pojr4k.swift:9:15: error: no exact matches in call to initializer\
    \ \n    let set = Set<UnicodeScalar>(chars)\n              ^\nSwift.Set:14:23:\
    \ note: candidate requires that the types 'UnicodeScalar' (aka 'Unicode.Scalar')\
    \ and 'UInt32' be equivalent (requirement specified as 'Element' == 'Source.Element')\n\
    \    @inlinable public init<Source>(_ sequence: __owned Source) where Element\
    \ == Source.Element, Source : Sequence\n                      ^\nSwift.SetAlgebra:2:23:\
    \ note: candidate requires that the types 'Set<UnicodeScalar>.Element' (aka 'Unicode.Scalar')\
    \ and 'UInt32' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n\
    \    @inlinable public init<S>(_ sequence: __owned S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(\n        characters:\
    \ string.characters,\n        range: string.rangeOfCharacterFromSet(\n       \
    \     NSCharacterSet.uppercaseLetterCharacterSet(),\n            options: []))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpt4srzfw5.swift:11:13: error: cannot find 'NSCharacterSet' in scope\n\
    \            NSCharacterSet.uppercaseLetterCharacterSet(),\n            ^~~~~~~~~~~~~~\n\
    /tmp/tmpt4srzfw5.swift:8:37: error: extra arguments at positions #1, #2 in call\n\
    \    return count_distinct_characters(\n                                    ^\n\
    /tmp/tmpt4srzfw5.swift:7:6: note: 'count_distinct_characters(string:)' declared\
    \ here\nfunc count_distinct_characters(string: String) -> Int {\n     ^\n/tmp/tmpt4srzfw5.swift:9:9:\
    \ error: missing argument for parameter 'string' in call\n        characters:\
    \ string.characters,\n        ^\n        string: <#String#>, \n/tmp/tmpt4srzfw5.swift:7:6:\
    \ note: 'count_distinct_characters(string:)' declared here\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n     ^\n/tmp/tmpt4srzfw5.swift:10:23: error: value of type\
    \ 'String' has no member 'rangeOfCharacterFromSet'\n        range: string.rangeOfCharacterFromSet(\n\
    \               ~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    guard let characters = string.unicodeScalars else {\n\
    \        return 0\n    }\n    var distinctCharacters = Set<Character>()\n    for\
    \ character in characters {\n        distinctCharacters?.insert(character)\n \
    \   }\n    return distinctCharacters.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfobsukxk.swift:8:11: error: initializer for conditional binding\
    \ must have Optional type, not 'String.UnicodeScalarView'\n    guard let characters\
    \ = string.unicodeScalars else {\n          ^                ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpfobsukxk.swift:13:27: error: cannot use optional chaining on non-optional\
    \ value of type 'Set<Character>'\n        distinctCharacters?.insert(character)\n\
    \        ~~~~~~~~~~~~~~~~~~^\n                          \n/tmp/tmpfobsukxk.swift:13:36:\
    \ error: cannot convert value of type 'Unicode.Scalar' to expected argument type\
    \ 'Character'\n        distinctCharacters?.insert(character)\n               \
    \                    ^\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCount = 0\n    for character in string {\n\
    \        guard let lowerCaseCharacter = character as? Character, !character.isLetter,\
    \ !character.isPunctuation, !character.isWhitespace, distinctCount <= distinctCount\
    \ else { continue }\n        distinctCount += 1\n    }\n    return distinctCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpmxt20uhy/tmpmxt20uhy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3defe99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3defb90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3defb90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3defb8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmxt20uhy                        0x000056113320c4da <unavailable> + 5338

    5    libc.so.6                          0x00002b3df0085460 __libc_start_main +
    245

    6    tmpmxt20uhy                        0x000056113320c0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660015493
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // Special case: empty string\n    if string.count ==\
    \ 0 { return 0 }\n\n    // Special case: single character\n    guard string.count\
    \ >= 2 else {\n        return 0\n    }\n\n    // Get lower case string and count\
    \ distinct characters\n    let lowerString = string.lowercased()\n\n    // Use\
    \ set to remove duplicate characters and return count\n    return Set(lowerString).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    \n    if string.characters.count == 0 {\n        return\
    \ 0\n    }\n    \n    var distinct = 0\n    \n    for c in string.characters {\n\
    \        if let v = distinctLetters[c] {\n            v += 1 // increment the\
    \ value for the current character\n            if v > 1 {\n                distinct\
    \ += v // count the distinct characters only\n            }\n        } else {\n\
    \            distinctLetters[c] = 1 // no previous value set for c\n        }\n\
    \    }\n    \n    return distinct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmphvp28bhl.swift:9:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    if string.characters.count == 0 {\n              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphvp28bhl.swift:15:21:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ string.characters {\n                    ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmphvp28bhl.swift:16:20: error: cannot find\
    \ 'distinctLetters' in scope\n        if let v = distinctLetters[c] {\n      \
    \             ^~~~~~~~~~~~~~~\n/tmp/tmphvp28bhl.swift:22:13: error: cannot find\
    \ 'distinctLetters' in scope\n            distinctLetters[c] = 1 // no previous\
    \ value set for c\n            ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string == \"\" { return 0 }\n\n    var distinctChars:\
    \ Int = 0\n    var count: Int = 0\n    for character in string {\n        if character\
    \ == character {\n            count += 1\n        }\n        else {\n        \
    \    distinctChars += 1\n        }\n    }\n    return distinctChars\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmprj57fp3f/tmprj57fp3f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad67ef37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad67ec2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad67ec2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad67ec2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprj57fp3f                        0x000055b33606f47a <unavailable> + 5242

    5    libc.so.6                          0x00002ad67f123460 __libc_start_main +
    245

    6    tmprj57fp3f                        0x000055b33606f059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string.characters.count == 0 {\n        return 0;\n\
    \    }\n    var distinctCharCounts = HashSet<Character>();\n    for _ in 0..<string.characters.count\
    \ {\n        distinctCharCounts.insert(string.characters[string.startIndex])\n\
    \    }\n    return distinctCharCounts.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp6w56um57.swift:8:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    if string.characters.count == 0 {\n              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp6w56um57.swift:11:30:\
    \ error: cannot find 'HashSet' in scope\n    var distinctCharCounts = HashSet<Character>();\n\
    \                             ^~~~~~~\n/tmp/tmp6w56um57.swift:12:25: error: 'characters'\
    \ is unavailable: Please use String directly\n    for _ in 0..<string.characters.count\
    \ {\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacters = Set<Character>()\n    var counter\
    \ = 0\n\n    for char in string {\n        distinctCharacters.insert(char)\n \
    \       counter += 1\n    }\n\n    return counter\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpdghozoyu/tmpdghozoyu.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7f2355c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7f204cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7f204c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7f204b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdghozoyu                        0x000055efeb4595a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ae7f2541460 __libc_start_main +
    245

    6    tmpdghozoyu                        0x000055efeb4590d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let len = string.characters.count\n    var result = 0\n\
    \    var upperCaseCount = 0\n    var lowerCaseCount = 0\n\n    for i in 0..<len\
    \ {\n        let char = string.characters.at(i)\n\n        if char.caseInsensitiveCompare(\"\
    A\") == .orderedSame {\n            result += 1\n            if char.lowercased()\
    \ != char { // in case of a special char, \"A\".lowercased() == \"a\"\n      \
    \          lowerCaseCount += 1\n            }\n        } else if char.caseInsensitiveCompare(\"\
    a\") == .orderedSame {\n            result += 1\n            if char.uppercased()\
    \ != char { // in case of a special char, \"A\".uppercased() == \"A\"\n      \
    \          upperCaseCount += 1\n            }\n        } else {\n            result\
    \ += char.uppercased().unicodeScalars.filter({ (unicodeScalar: UnicodeScalar)\
    \ -> Bool in\n                return !unicodeScalar.isUppercase\n            }).count\n\
    \            result += char.lowercased().unicodeScalars.filter({ (unicodeScalar:\
    \ UnicodeScalar) -> Bool in\n                return !unicodeScalar.isLowercase\n\
    \            }).count\n        }\n    }\n\n    return max(upperCaseCount, lowerCaseCount)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpsae7nduv.swift:8:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = string.characters.count\n               \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpsae7nduv.swift:14:38:\
    \ error: value of type 'String' has no member 'at'\n        let char = string.characters.at(i)\n\
    \                   ~~~~~~~~~~~~~~~~~ ^~\n/tmp/tmpsae7nduv.swift:28:39: error:\
    \ value of type 'UnicodeScalar' (aka 'Unicode.Scalar') has no member 'isUppercase'\n\
    \                return !unicodeScalar.isUppercase\n                        ~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~\n/tmp/tmpsae7nduv.swift:31:39: error: value of type 'UnicodeScalar'\
    \ (aka 'Unicode.Scalar') has no member 'isLowercase'\n                return !unicodeScalar.isLowercase\n\
    \                        ~~~~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    guard string != \"\" else {\n        return 0\n    }\n\
    \    var count = 0\n    string.makeIterator().forEach { char in\n        if let\
    \ _ = Character(char), string.rangeOfCharacter(from: char) == nil {\n        \
    \    count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpdx_0r3mc.swift:12:27: error: value of type 'String.Iterator' has\
    \ no member 'forEach'\n    string.makeIterator().forEach { char in\n    ~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var characterSet = [Character]()\n    var distinctCharactersCount\
    \ = 0\n    for character in string {\n        if characterSet.contains(character)\
    \ {\n            distinctCharactersCount += 1\n        }\n        characterSet.insert(character)\n\
    \    }\n    return distinctCharactersCount\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpcujc_pcy.swift:14:38: error: missing argument for parameter 'at'\
    \ in call\n        characterSet.insert(character)\n                          \
    \           ^\n                                     , at: <#Int#>\nSwift.Array:11:37:\
    \ note: 'insert(_:at:)' declared here\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacterCount = 0\n    for character in string.characters\
    \ {\n        switch character {\n        case \" \":\n            distinctCharacterCount\
    \ += 1\n        case \"a\": distinctCharacterCount += 1\n        case \"A\": distinctCharacterCount\
    \ += 1\n        case \"b\": distinctCharacterCount += 1\n        case \"B\": distinctCharacterCount\
    \ += 1\n        case \"c\": distinctCharacterCount += 1\n        case \"C\": distinctCharacterCount\
    \ += 1\n        case \"d\": distinctCharacterCount += 1\n        case \"D\": distinctCharacterCount\
    \ += 1\n        case \"e\": distinctCharacterCount += 1\n        case \"E\": distinctCharacterCount\
    \ += 1\n        case \"f\": distinctCharacterCount += 1\n        case \"F\": distinctCharacterCount\
    \ += 1\n        case \"g\": distinctCharacterCount += 1\n        case \"G\": distinctCharacterCount\
    \ += 1\n        case \"h\": distinctCharacterCount += 1\n        case \"H\": distinctCharacterCount\
    \ += 1\n        case \"i\": distinctCharacterCount += 1\n        case \"I\": distinctCharacterCount\
    \ += 1\n        case \"j\": distinctCharacterCount += 1\n        case \"J\": distinctCharacterCount\
    \ += 1\n        case \"k\": distinctCharacterCount += 1\n        case \"K\": distinctCharacterCount\
    \ += 1\n        case \"l\": distinctCharacterCount += 1\n        case \"L\": distinctCharacterCount\
    \ += 1\n        case \"m\": distinctCharacterCount += 1\n        case \"M\": distinctCharacterCount\
    \ += 1\n        case \"n\": distinctCharacterCount += 1\n        case \"N\": distinctCharacterCount\
    \ += 1\n        case \"o\": distinctCharacterCount += 1\n        case \"O\": distinctCharacterCount\
    \ += 1\n        case \"p\": distinctCharacterCount += 1\n        case \"P\": distinctCharacterCount\
    \ += 1\n        case \"q\": distinctCharacterCount += 1\n        case \"Q\": distinctCharacterCount\
    \ += 1\n        case \"r\": distinctCharacterCount += 1\n        case \"R\": distinctCharacterCount\
    \ += 1\n        case \"s\": distinctCharacterCount += 1\n        case \"S\": distinctCharacterCount\
    \ += 1\n        case \"t\": distinctCharacterCount += 1\n        case \"T\": distinctCharacterCount\
    \ += 1\n        case \"u\": distinctCharacterCount += 1\n        case \"U\": distinctCharacterCount\
    \ += 1\n        case \"v\": distinctCharacterCount += 1\n        case \"V\": distinctCharacterCount\
    \ += 1\n        case \"w\": distinctCharacterCount += 1\n        case \"W\": distinctCharacterCount\
    \ += 1\n        case \"x\": distinctCharacterCount += 1\n        case \"X\": distinctCharacterCount\
    \ += 1\n        case \"y\": distinctCharacterCount += 1\n        case \"Y\": distinctCharacterCount\
    \ += 1\n        case \"z\": distinctCharacterCount += 1\n        case \"Z\": distinctCharacterCount\
    \ += 1\n        default:\n            distinctCharacterCount += 1\n        }\n\
    \    }\n    return distinctCharacterCount\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppi4uyu3j.swift:9:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in string.characters {\n            \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count(\n        string, stringToLetters, letterToNum,\n\
    \        { $0.toUpperCase() }, { $0.toUpperCase() }\n    )\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppdavcepp.swift:8:12: error: cannot find 'count' in scope\n    return\
    \ count(\n           ^~~~~\n/tmp/tmppdavcepp.swift:9:17: error: cannot find 'stringToLetters'\
    \ in scope\n        string, stringToLetters, letterToNum,\n                ^~~~~~~~~~~~~~~\n\
    /tmp/tmppdavcepp.swift:9:34: error: cannot find 'letterToNum' in scope\n     \
    \   string, stringToLetters, letterToNum,\n                                 ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    for char in string {\n        guard let cased_char = char.cased(),\
    \ cased_char != char else {\n            break\n        }\n        if let index\
    \ = cases.firstIndex(where: {$0.caseInsensitive() == cased_char}) {\n        \
    \    count += index - cases.startIndex\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpe99fk4kd.swift:13:37: error: value of type 'Character' has no member\
    \ 'cased'\n        guard let cased_char = char.cased(), cased_char != char else\
    \ {\n                               ~~~~ ^~~~~\n/tmp/tmpe99fk4kd.swift:16:24:\
    \ error: cannot find 'cases' in scope\n        if let index = cases.firstIndex(where:\
    \ {$0.caseInsensitive() == cased_char}) {\n                       ^~~~~\n/tmp/tmpe99fk4kd.swift:17:30:\
    \ error: cannot find 'cases' in scope\n            count += index - cases.startIndex\n\
    \                             ^~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var result: Int = 0\n    string.forEach {\n        if\
    \ stringToUppercase($0) != stringToUppercase($0) {\n            result++\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp3entz4ka.swift:10:12: error: cannot find 'stringToUppercase' in\
    \ scope\n        if stringToUppercase($0) != stringToUppercase($0) {\n       \
    \    ^~~~~~~~~~~~~~~~~\n/tmp/tmp3entz4ka.swift:10:37: error: cannot find 'stringToUppercase'\
    \ in scope\n        if stringToUppercase($0) != stringToUppercase($0) {\n    \
    \                                ^~~~~~~~~~~~~~~~~\n/tmp/tmp3entz4ka.swift:11:19:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  result++\n                  ^~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if c.isUppercase() {\n            count += 1\n        } else if c.isLowercase()\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpv39tukzl.swift:10:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase() {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpv39tukzl.swift:12:21: error: value of type 'Unicode.Scalar' has no member\
    \ 'isLowercase'\n        } else if c.isLowercase() {\n                  ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.unicodeScalars.map { $0.value[0] }.distinct().count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp1yaz1zrs.swift:8:54: error: value of type 'Array<_>' has no member\
    \ 'distinct'\n    return string.unicodeScalars.map { $0.value[0] }.distinct().count\n\
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmp1yaz1zrs.swift:8:48:\
    \ error: value of type 'UInt32' has no subscripts\n    return string.unicodeScalars.map\
    \ { $0.value[0] }.distinct().count\n                                       ~~~~~~~~^\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var counter: Int = 0\n    for i in 0..<string.characters.count\
    \ {\n        if string.characters[i] != '@' {\n            counter += 1\n    \
    \    }\n    }\n    return counter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpqchv1efw.swift:10:36: error: single-quoted string literal found,\
    \ use '\"'\n        if string.characters[i] != '@' {\n                       \
    \            ^~~\n                                   \"@\"\n/tmp/tmpqchv1efw.swift:9:25:\
    \ error: 'characters' is unavailable: Please use String directly\n    for i in\
    \ 0..<string.characters.count {\n                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpqchv1efw.swift:10:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if string.characters[i] != '@' {\n           ^~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqchv1efw.swift:10:19:\
    \ error: 'characters' is unavailable: Please use String directly\n        if string.characters[i]\
    \ != '@' {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string == \"\" {\n        return 0\n    }\n    return\
    \ count_distinct_characters_c(string.unicodeScalars)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp5hxlgq8p.swift:11:12: error: cannot find 'count_distinct_characters_c'\
    \ in scope\n    return count_distinct_characters_c(string.unicodeScalars)\n  \
    \         ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacters: Set<Character> = Set()\n    for\
    \ c in string.characters\n    {\n        distinctCharacters.add(c)\n    }\n  \
    \  return distinctCharacters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpsgj1peoa.swift:9:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in string.characters\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsgj1peoa.swift:11:28:\
    \ error: value of type 'Set<Character>' has no member 'add'\n        distinctCharacters.add(c)\n\
    \        ~~~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 1\n    for c in string.unicodeScalars {\n\
    \        if string.unicodeScalars.contains(c) {\n            count += 1\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpfzmkuisi/tmpfzmkuisi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad33c7bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad33c4b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad33c4b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad33c4b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfzmkuisi                        0x000056127b272513 <unavailable> + 5395

    5    libc.so.6                          0x00002ad33c9aa460 __libc_start_main +
    245

    6    tmpfzmkuisi                        0x000056127b272199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660015493
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowerCaseString = string.lowercased()\n    return\
    \ lowerCaseString.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpxkr5xvcm/tmpxkr5xvcm.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48df3b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48df0a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48df0a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48df0a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkr5xvcm                        0x0000556990971461 <unavailable> + 5217

    5    libc.so.6                          0x00002b48df59c460 __libc_start_main +
    245

    6    tmpxkr5xvcm                        0x0000556990970f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_helper(string)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpcshz3epc.swift:8:12: error: cannot find 'count_distinct_characters_helper'\
    \ in scope\n    return count_distinct_characters_helper(string)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.characters\n        .filter({ $0 < 'a' })\n\
    \        .filter { $0 != 'a' && ($0 != 'z' || $0 != 'Z') }\n        .count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpx6ep4olt.swift:9:24: error: single-quoted string literal found,\
    \ use '\"'\n        .filter({ $0 < 'a' })\n                       ^~~\n      \
    \                 \"a\"\n/tmp/tmpx6ep4olt.swift:10:25: error: single-quoted string\
    \ literal found, use '\"'\n        .filter { $0 != 'a' && ($0 != 'z' || $0 !=\
    \ 'Z') }\n                        ^~~\n                        \"a\"\n/tmp/tmpx6ep4olt.swift:10:39:\
    \ error: single-quoted string literal found, use '\"'\n        .filter { $0 !=\
    \ 'a' && ($0 != 'z' || $0 != 'Z') }\n                                      ^~~\n\
    \                                      \"z\"\n/tmp/tmpx6ep4olt.swift:10:52: error:\
    \ single-quoted string literal found, use '\"'\n        .filter { $0 != 'a' &&\
    \ ($0 != 'z' || $0 != 'Z') }\n                                               \
    \    ^~~\n                                                   \"Z\"\n/tmp/tmpx6ep4olt.swift:8:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    return string.characters\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Int((string.unicodeScalars.filter { $0.value !=\
    \ 0xFFFF }.count) + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpmpbob_gv/tmpmpbob_gv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9cbbcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9cb8c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9cb8c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9cb8c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmpbob_gv                        0x0000561c5b3f4613 <unavailable> + 5651

    5    libc.so.6                          0x00002ba9cbdb9460 __libc_start_main +
    245

    6    tmpmpbob_gv                        0x0000561c5b3f4299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.utf8.filter({ !$0.isWhitespace}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmplkezeir2.swift:8:37: error: value of type 'String.UTF8View.Element'\
    \ (aka 'UInt8') has no member 'isWhitespace'\n    return string.utf8.filter({\
    \ !$0.isWhitespace}).count\n                                 ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpgpnqb98m.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015421
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinct_characters = 0\n    let characters = string.characters\n\
    \n    for character in characters {\n        if CharacterSet.lowercaseLetters.contains(character)\
    \ || CharacterSet.uppercaseLetters.contains(character) || CharacterSet.numbersAndPunctuation.contains(character)\
    \ {\n            distinct_characters += 1\n        }\n    }\n    return distinct_characters\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpjc3ogr9p.swift:9:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = string.characters\n              \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpjc3ogr9p.swift:12:12: error: cannot find 'CharacterSet' in scope\n\
    \        if CharacterSet.lowercaseLetters.contains(character) || CharacterSet.uppercaseLetters.contains(character)\
    \ || CharacterSet.numbersAndPunctuation.contains(character) {\n           ^~~~~~~~~~~~\n\
    /tmp/tmpjc3ogr9p.swift:12:65: error: cannot find 'CharacterSet' in scope\n   \
    \     if CharacterSet.lowercaseLetters.contains(character) || CharacterSet.uppercaseLetters.contains(character)\
    \ || CharacterSet.numbersAndPunctuation.contains(character) {\n              \
    \                                                  ^~~~~~~~~~~~\n/tmp/tmpjc3ogr9p.swift:12:118:\
    \ error: cannot find 'CharacterSet' in scope\n        if CharacterSet.lowercaseLetters.contains(character)\
    \ || CharacterSet.uppercaseLetters.contains(character) || CharacterSet.numbersAndPunctuation.contains(character)\
    \ {\n                                                                        \
    \                                             ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    var lastChar: Character?\n    for char\
    \ in string {\n        if char == lastChar! {\n            count += 1\n      \
    \  } else {\n            lastChar = char\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpo_9jn92t/tmpo_9jn92t.swift:11: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7b1ee7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7b1bde561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac7b1bde286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac7b1bde13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac7b1bddbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpo_9jn92t                        0x000055bbbb27886a <unavailable> + 6250

    6    tmpo_9jn92t                        0x000055bbbb27842c <unavailable> + 5164

    7    libc.so.6                          0x00002ac7b20d3460 __libc_start_main +
    245

    8    tmpo_9jn92t                        0x000055bbbb278089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string.isEmpty {\n        return 0\n    }\n    var\
    \ distinctCharacters = \"\"\n    let lowercaseString = string.lowercased()\n \
    \   for i in lowercaseString.indices {\n        distinctCharacters += lowercaseString[i]\n\
    \    }\n    return distinctCharacters.characters.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpz2nhutcp.swift:14:46: error: subscript 'subscript(_:)' requires\
    \ that 'DefaultIndices<String>.Element' (aka 'String.Index') conform to 'RangeExpression'\n\
    \        distinctCharacters += lowercaseString[i]\n                          \
    \                   ^\nSwift.Collection:2:23: note: where 'R' = 'DefaultIndices<String>.Element'\
    \ (aka 'String.Index')\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence\
    \ where R : RangeExpression, Self.Index == R.Bound { get }\n                 \
    \     ^\n/tmp/tmpz2nhutcp.swift:16:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    return distinctCharacters.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacterCount = 0\n    for c in string {\n\
    \        if isDistinctCharacter(c) {\n            distinctCharacterCount += 1\n\
    \        }\n    }\n    return distinctCharacterCount\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp_y678lpp.swift:10:12: error: cannot find 'isDistinctCharacter'\
    \ in scope\n        if isDistinctCharacter(c) {\n           ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 1\n    for c in string.characters {\n    \
    \    if string.lowercaseString.characters.contains(c) == false && string.uppercaseString.characters.contains(c)\
    \ == false {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpyddjkwke.swift:9:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in string.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpyddjkwke.swift:10:19:\
    \ error: value of type 'String' has no member 'lowercaseString'\n        if string.lowercaseString.characters.contains(c)\
    \ == false && string.uppercaseString.characters.contains(c) == false {\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpyddjkwke.swift:10:77: error: value of type\
    \ 'String' has no member 'uppercaseString'\n        if string.lowercaseString.characters.contains(c)\
    \ == false && string.uppercaseString.characters.contains(c) == false {\n     \
    \                                                                ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n\treturn count_characters(string, true, nil)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmprvu65d3r.swift:8:9: error: cannot find 'count_characters' in scope\n\
    \        return count_characters(string, true, nil)\n               ^~~~~~~~~~~~~~~~\n\
    /tmp/tmprvu65d3r.swift:8:40: error: 'nil' requires a contextual type\n       \
    \ return count_characters(string, true, nil)\n                               \
    \               ^\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    guard let uppercase = string.unicodeScalars.filter({ $0.isUppercase\
    \ }).count else {\n        return 0\n    }\n\n    guard let lowercase = string.unicodeScalars.filter({\
    \ $0.isLowercase }).count else {\n        return 0\n    }\n\n    return uppercase\
    \ + lowercase\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpcdq6liu1.swift:8:61: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    guard let uppercase = string.unicodeScalars.filter({\
    \ $0.isUppercase }).count else {\n                                           \
    \              ~~ ^~~~~~~~~~~\n/tmp/tmpcdq6liu1.swift:12:61: error: value of type\
    \ 'Unicode.Scalar' has no member 'isLowercase'\n    guard let lowercase = string.unicodeScalars.filter({\
    \ $0.isLowercase }).count else {\n                                           \
    \              ~~ ^~~~~~~~~~~\n/tmp/tmpcdq6liu1.swift:16:22: error: cannot convert\
    \ return expression of type 'String' to return type 'Int'\n    return uppercase\
    \ + lowercase\n           ~~~~~~~~~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var total = 0\n    var lowest = 0\n    for _ in 0..<string.count\
    \ {\n        if string.lowercaseString.contains(string.lowercaseString[lowest..<string.count])\
    \ {\n            lowest = lowest + 1\n        }\n        total = total + 1\n \
    \   }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp_69370ga.swift:11:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n        if string.lowercaseString.contains(string.lowercaseString[lowest..<string.count])\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp_69370ga.swift:11:51: error: value\
    \ of type 'String' has no member 'lowercaseString'\n        if string.lowercaseString.contains(string.lowercaseString[lowest..<string.count])\
    \ {\n                                           ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string == \"\" {\n        return 0\n    }\n    let\
    \ chars = string.unicodeScalars\n    let count = chars.reduce(0) {\n        (count,\
    \ char) in\n        let index = string.unicodeScalars.index(of: char)\n      \
    \  return (index != nil ? count + 1 : count)\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpktyrbjwr/tmpktyrbjwr.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4dddb81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ddd878b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ddd878988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ddd8777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpktyrbjwr                        0x0000560d8a31d691 <unavailable> + 5777

    5    libc.so.6                          0x00002b4dddd6d460 __libc_start_main +
    245

    6    tmpktyrbjwr                        0x0000560d8a31d1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n\treturn count_distinct_characters(string: string, caseSensitive:\
    \ false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpwg5olli4.swift:8:66: error: extra argument 'caseSensitive' in call\n\
    \        return count_distinct_characters(string: string, caseSensitive: false)\n\
    \                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.lowercaseString.characters\n \
    \   let counts = characters.reduce([Character: Int]()) { (_, counts, c) in\n \
    \       guard let previousCount = counts[c] else { counts[c] = 1 }\n        let\
    \ newCount = previousCount + 1\n        counts[c] = newCount\n        return counts\n\
    \    }\n    return counts.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmph0qpbjcj.swift:8:29: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    let characters = string.lowercaseString.characters\n\
    \                     ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpgpnqb98m.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015421
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // Find out how many times a character is repeated in\
    \ the string\n    // E.g. \"a\" occurs 1 time, \"b\" occurs 2 times, \"c\" occurs\
    \ 2 times\n    let counts = Dictionary(uniqueKeysWithValues: string.characters\n\
    \        .enumerated().map { index, character -> [Character: [Int]] in\n     \
    \       var result = Dictionary<Character: [Int], Int>()\n            result[character]\
    \ = [index: index]\n            return result\n        })\n        .compactMap\
    \ { characters, index in\n            let count = characters.reduce(0) { (sum,\
    \ character) -> Int in\n                // Count how many times a character is\
    \ repeated in a string\n                // E.g. \"a\" occurs 1 time, \"b\" occurs\
    \ 2 times\n                // \"a\" occurs 0 times, \"b\" occurs 1 times\n   \
    \             // \"a\" occurs 0 times, \"b\" occurs 0 times\n                //\
    \ \"a\" occurs 2 times\n                return sum + counts[character][index]\n\
    \            }\n            return count, index\n        }\n        .sorted()\n\
    \        // Ignore the first element which represent the character itself\n  \
    \      .dropFirst()\n\n    // Find the first character\n    let firstChar = string.characters.first!\n\
    \    let firstCharCount = counts[firstChar]\n\n    // Find the last character\n\
    \    let lastChar = string.characters.last!\n    let lastCharCount = counts[lastChar]\n\
    \n    return lastCharCount + firstCharCount + 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpx6vqo0x7.swift:12:46: error: consecutive statements on a line must\
    \ be separated by ';'\n            var result = Dictionary<Character: [Int], Int>()\n\
    \                                             ^\n                            \
    \                 ;\n/tmp/tmpx6vqo0x7.swift:12:46: error: expected expression\n\
    \            var result = Dictionary<Character: [Int], Int>()\n              \
    \                               ^\n/tmp/tmpx6vqo0x7.swift:25:25: error: consecutive\
    \ statements on a line must be separated by ';'\n            return count, index\n\
    \                        ^\n                        ;\n/tmp/tmpx6vqo0x7.swift:25:25:\
    \ error: expected expression\n            return count, index\n              \
    \          ^\n/tmp/tmpx6vqo0x7.swift:29:10: error: type of expression is ambiguous\
    \ without more context\n        .dropFirst()\n~~~~~~~~~^~~~~~~~~~~\n/tmp/tmpx6vqo0x7.swift:32:28:\
    \ error: 'characters' is unavailable: Please use String directly\n    let firstChar\
    \ = string.characters.first!\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpx6vqo0x7.swift:36:27: error: 'characters'\
    \ is unavailable: Please use String directly\n    let lastChar = string.characters.last!\n\
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpx6vqo0x7.swift:39:26: error: cannot convert value of type\
    \ 'String' to expected argument type 'Int'\n    return lastCharCount + firstCharCount\
    \ + 1\n                         ^\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    guard let string = string.lowercaseString(),\n       \
    \ let array = string.unicodeScalars.filter { !$0.isControl && !$0.isCombiningDiacritical\
    \ },\n        let count = array.count else {\n            return 0\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpeh024ju5.swift:8:31: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    guard let string = string.lowercaseString(),\n      \
    \                 ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return strings.Count(strings.ToLower(string), strings.ToUpper(string))\
    \ + strings.Count(strings.ToLower(string), strings.ToLower(string)) + strings.Count(strings.ToUpper(string),\
    \ strings.ToUpper(string)) + strings.Count(strings.ToUpper(string), strings.ToLower(string))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpryna82bv.swift:8:12: error: cannot find 'strings' in scope\n  \
    \  return strings.Count(strings.ToLower(string), strings.ToUpper(string)) + strings.Count(strings.ToLower(string),\
    \ strings.ToLower(string)) + strings.Count(strings.ToUpper(string), strings.ToUpper(string))\
    \ + strings.Count(strings.ToUpper(string), strings.ToLower(string))\n        \
    \   ^~~~~~~\n/tmp/tmpryna82bv.swift:8:26: error: cannot find 'strings' in scope\n\
    \    return strings.Count(strings.ToLower(string), strings.ToUpper(string)) +\
    \ strings.Count(strings.ToLower(string), strings.ToLower(string)) + strings.Count(strings.ToUpper(string),\
    \ strings.ToUpper(string)) + strings.Count(strings.ToUpper(string), strings.ToLower(string))\n\
    \                         ^~~~~~~\n/tmp/tmpryna82bv.swift:8:51: error: cannot\
    \ find 'strings' in scope\n    return strings.Count(strings.ToLower(string), strings.ToUpper(string))\
    \ + strings.Count(strings.ToLower(string), strings.ToLower(string)) + strings.Count(strings.ToUpper(string),\
    \ strings.ToUpper(string)) + strings.Count(strings.ToUpper(string), strings.ToLower(string))\n\
    \                                                  ^~~~~~~\n/tmp/tmpryna82bv.swift:8:78:\
    \ error: cannot find 'strings' in scope\n    return strings.Count(strings.ToLower(string),\
    \ strings.ToUpper(string)) + strings.Count(strings.ToLower(string), strings.ToLower(string))\
    \ + strings.Count(strings.ToUpper(string), strings.ToUpper(string)) + strings.Count(strings.ToUpper(string),\
    \ strings.ToLower(string))\n                                                 \
    \                            ^~~~~~~\n/tmp/tmpryna82bv.swift:8:92: error: cannot\
    \ find 'strings' in scope\n    return strings.Count(strings.ToLower(string), strings.ToUpper(string))\
    \ + strings.Count(strings.ToLower(string), strings.ToLower(string)) + strings.Count(strings.ToUpper(string),\
    \ strings.ToUpper(string)) + strings.Count(strings.ToUpper(string), strings.ToLower(string))\n\
    \                                                                            \
    \               ^~~~~~~\n/tmp/tmpryna82bv.swift:8:117: error: cannot find 'stri"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    guard let chars = string.unicodeScalars.filter { $0.isUppercase()\
    \ || $0.isLowercase() }\n        else { return 0 }\n    return chars.count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpvtaa420t.swift:8:52: error: expected 'else' after 'guard' condition\n\
    \    guard let chars = string.unicodeScalars.filter { $0.isUppercase() || $0.isLowercase()\
    \ }\n                                                   ^\n                  \
    \                                 else \n/tmp/tmpvtaa420t.swift:8:54: error: anonymous\
    \ closure argument not contained in a closure\n    guard let chars = string.unicodeScalars.filter\
    \ { $0.isUppercase() || $0.isLowercase() }\n                                 \
    \                    ^\n/tmp/tmpvtaa420t.swift:8:74: error: anonymous closure\
    \ argument not contained in a closure\n    guard let chars = string.unicodeScalars.filter\
    \ { $0.isUppercase() || $0.isLowercase() }\n                                 \
    \                                        ^\n/tmp/tmpvtaa420t.swift:9:9: error:\
    \ expected expression\n        else { return 0 }\n        ^\n/tmp/tmpvtaa420t.swift:8:11:\
    \ error: initializer for conditional binding must have Optional type, not '((Unicode.Scalar)\
    \ throws -> Bool) throws -> String.UnicodeScalarView'\n    guard let chars = string.unicodeScalars.filter\
    \ { $0.isUppercase() || $0.isLowercase() }\n          ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvtaa420t.swift:10:18: error: value of type '((Unicode.Scalar) throws ->\
    \ Bool) throws -> String.UnicodeScalarView' has no member 'count'\n    return\
    \ chars.count\n           ~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count: Int = 0\n    string.enumerateSubstrings(in:\
    \ NSMakeRange(0, string.count)) { substring, range, stop in\n        let char\
    \ = substring! as NSString\n        let lowercaseChar = char.lowercaseString as\
    \ NSString\n        if lowercaseChar.hasPrefix(substring!) && lowercaseChar !=\
    \ char {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpxj2unvr6.swift:9:36: error: cannot find 'NSMakeRange' in scope\n\
    \    string.enumerateSubstrings(in: NSMakeRange(0, string.count)) { substring,\
    \ range, stop in\n                                   ^~~~~~~~~~~\n/tmp/tmpxj2unvr6.swift:10:34:\
    \ error: cannot find type 'NSString' in scope\n        let char = substring! as\
    \ NSString\n                                 ^~~~~~~~\n/tmp/tmpxj2unvr6.swift:9:12:\
    \ error: value of type 'String' has no member 'enumerateSubstrings'\n    string.enumerateSubstrings(in:\
    \ NSMakeRange(0, string.count)) { substring, range, stop in\n    ~~~~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string.unicodeScalars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpm32y20kz.swift:8:38: error: missing argument label 'string:' in\
    \ call\n    return count_distinct_characters(string.unicodeScalars)\n        \
    \                             ^\n                                     string:\
    \ \n/tmp/tmpm32y20kz.swift:8:45: error: cannot convert value of type 'String.UnicodeScalarView'\
    \ to expected argument type 'String'\n    return count_distinct_characters(string.unicodeScalars)\n\
    \                                            ^\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    var characters = CharacterSet.lowercaseLetters\n\
    \n    for character in string {\n        characters.removeCharacter(character)\n\
    \        count += 1\n    }\n\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpgc8xqrgk.swift:9:22: error: cannot find 'CharacterSet' in scope\n\
    \    var characters = CharacterSet.lowercaseLetters\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let chars = Array(string)\n    var count = 0\n    for\
    \ char in chars {\n        count = count_unique_characters(chars: &char, count:\
    \ &count) + 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp1iuu0wor.swift:11:17: error: cannot find 'count_unique_characters'\
    \ in scope\n        count = count_unique_characters(chars: &char, count: &count)\
    \ + 1\n                ^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1iuu0wor.swift:11:48:\
    \ error: cannot pass immutable value as inout argument: 'char' is a 'let' constant\n\
    \        count = count_unique_characters(chars: &char, count: &count) + 1\n  \
    \                                             ^~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let alphabet = string.unicodeScalars.map { $0.value }\n\
    \    let count = alphabet.map { alphabet\n        .filter { $0 == alphabet[$0]\
    \ }\n        .count\n    }.reduce(0)\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpn8w3ny7h.swift:9:30: error: contextual type for closure argument\
    \ list expects 1 argument, which cannot be implicitly ignored\n    let count =\
    \ alphabet.map { alphabet\n                             ^\n                  \
    \             _ in\n/tmp/tmpn8w3ny7h.swift:12:15: error: missing argument for\
    \ parameter #2 in call\n    }.reduce(0)\n              ^\n              , <#(Int,\
    \ Int) throws -> Int#>\nSwift.Sequence:2:28: note: 'reduce' declared here\n  \
    \  @inlinable public func reduce<Result>(_ initialResult: Result, _ nextPartialResult:\
    \ (_ partialResult: Result, Self.Element) throws -> Result) rethrows -> Result\n\
    \                           ^\n/tmp/tmpn8w3ny7h.swift:10:34: error: cannot convert\
    \ value of type 'UInt32' to expected argument type 'Int'\n        .filter { $0\
    \ == alphabet[$0] }\n                                 ^\n                    \
    \             Int( )\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return countSet(string).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpxjref93p.swift:8:12: error: cannot find 'countSet' in scope\n \
    \   return countSet(string).count\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    guard let uppercaseString = string.uppercased(),\n   \
    \     let charArray = uppercaseString.characters.map { String($0) },\n       \
    \ let charArrayCount = charArray.count else {\n            return 0\n    }\n \
    \   return charArrayCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpa98z2tx8.swift:9:41: error: 'characters' is unavailable: Please\
    \ use String directly\n        let charArray = uppercaseString.characters.map\
    \ { String($0) },\n                                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpa98z2tx8.swift:9:56: warning: trailing\
    \ closure in this context is confusable with the body of the statement; pass as\
    \ a parenthesized argument to silence this warning\n        let charArray = uppercaseString.characters.map\
    \ { String($0) },\n                                                      ~^\n\
    \                                                      (              )\n/tmp/tmpa98z2tx8.swift:8:11:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \    guard let uppercaseString = string.uppercased(),\n          ^           \
    \          ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa98z2tx8.swift:9:9: error: initializer\
    \ for conditional binding must have Optional type, not '[String]'\n        let\
    \ charArray = uppercaseString.characters.map { String($0) },\n        ^      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa98z2tx8.swift:10:9:\
    \ error: initializer for conditional binding must have Optional type, not 'Int'\n\
    \        let charArrayCount = charArray.count else {\n        ^              \
    \      ~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let unicodeScalars = string.unicodeScalars\n    var distinctCharacters\
    \ = 0\n\n    for characters in unicodeScalars {\n        if characters.isLowercase\
    \ || characters.isUppercase {\n            distinctCharacters++\n        }\n \
    \   }\n\n    return distinctCharacters\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9q1gs_e8.swift:12:23: error: value of type 'Unicode.Scalar' has\
    \ no member 'isLowercase'\n        if characters.isLowercase || characters.isUppercase\
    \ {\n           ~~~~~~~~~~ ^~~~~~~~~~~\n/tmp/tmp9q1gs_e8.swift:12:49: error: value\
    \ of type 'Unicode.Scalar' has no member 'isUppercase'\n        if characters.isLowercase\
    \ || characters.isUppercase {\n                                     ~~~~~~~~~~\
    \ ^~~~~~~~~~~\n/tmp/tmp9q1gs_e8.swift:13:31: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            distinctCharacters++\n         \
    \                     ^~\n"
  stdout: ''
  timestamp: 1660015493
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 1 // Start with one distinct character\n \
    \   for character in string {\n        if character == character {\n         \
    \   count += 1\n        } else {\n            count = 0 // We didn't find the\
    \ character before\n        }\n    }\n\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpykqxvldd/tmpykqxvldd.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00fc16cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00fbe63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00fbe63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00fbe627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpykqxvldd                        0x0000562c8b8bb373 <unavailable> + 4979

    5    libc.so.6                          0x00002b00fc358460 __libc_start_main +
    245

    6    tmpykqxvldd                        0x0000562c8b8baff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660015494
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let chars = string.unicodeScalars.map { $0.value }\n\n\
    \    var count = chars.reduce(0) {\n        if !self.contains($0) {\n        \
    \    count += 1\n        }\n        return count\n    }\n\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpizissgr9.swift:11:13: error: cannot find 'self' in scope; did you\
    \ mean to use it in a type or extension context?\n        if !self.contains($0)\
    \ {\n            ^~~~\n"
  stdout: ''
  timestamp: 1660015493
