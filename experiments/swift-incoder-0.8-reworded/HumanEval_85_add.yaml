name: HumanEval_85_add
language: swift
prompt: "\n/// Given a non-empty array of integers lst. add the even elements that\
  \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\nfunc\
  \ add(lst: [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst:\
  \ [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
  \ [4, 4, 6, 8]) == 12)"
completions: ["    if lst.indices.contains(0) {\n        return 0\n    }\n    var\
    \ even: Int = lst[0]\n    for index in lst.indices {\n        if index % 2 ==\
    \ 0 {\n            even += lst[index]\n        }\n    }\n    return even", " \
    \   if lst.isEmpty {\n        return 0\n    }\n\n    var sum = 0\n    var i =\
    \ 0\n    var lastIdx = 0\n\n    while i < lst.count {\n        if i % 2 != 0 {\n\
    \            sum += lst[i]\n        }\n\n        lastIdx = i\n        i += 1\n\
    \    }\n\n    if lastIdx < lst.count {\n        sum += lst[lastIdx]\n    }\n\n\
    \    return sum", "\tguard lst.count > 0 else {\n\t\tpreconditionFailure(\"Given\
    \ array is empty.\")\n\t\treturn 0\n\t}\n\n\tlet evenIdxs = lst.filter { $0 %\
    \ 2 == 0 }\n\tlet oddIdxs = lst.filter { $0 % 2 != 0 }\n\n\treturn evenIdxs.reduce(0,+)",
  '    return lst', "    let even = lst.filter{$0 % 2 == 0}\n    let odd = lst.filter{$0\
    \ % 2 == 1}\n    return (even.count)+(odd.count)", "    var result : Int = 0\n\
    \    \n    for i in lst {\n        if i % 2 == 1 {\n            result += i\n\
    \        }\n    }\n    return result", "    var even = 0\n    var odd = 0\n  \
    \  for idx in lst.indices {\n        if idx % 2 == 0 {\n            even += lst[idx]\n\
    \        } else {\n            odd += lst[idx]\n        }\n    }\n    return even\
    \ + odd", "    var evenSum = 0\n    for idx in lst.indices {\n        if idx %\
    \ 2 == 0 {\n            evenSum += lst[idx]\n        }\n    }\n    return evenSum",
  "  var result : Int = 0\n  for var i = 0; i < lst.count; i++ {\n    if i % 2 ==\
    \ 0 {\n      result += lst[i]\n    }\n  }\n  return result", "    if lst.count\
    \ < 2 {\n        return 0\n    }\n    let even = lst.filter { (n, _) -> Bool in\n\
    \        return n % 2 == 0\n    }\n    let odd = lst.filter { (n, _) -> Bool in\n\
    \        return n % 2 != 0\n    }\n    return even.count + odd.count", "    var\
    \ evens: Int = 0\n    for e in lst {\n        if e % 2 == 0 {\n            evens\
    \ += e\n        }\n    }\n    return evens", "    var result = 0\n    for i in\
    \ lst {\n        if i % 2 == 0 {\n            result += i\n        }\n    }\n\
    \    return result", "    return lst.filter{\n        _ % 2 != 0\n    }.sum()",
  "  if lst.count == 0 {\n    return 0\n  }\n\n  var result = 0\n\n  for index in\
    \ 0..<lst.count {\n    if index % 2 == 0 {\n      result += lst[index]\n    }\n\
    \  }\n\n  return result", "    var sum = 0\n    for i : Int in 0..<lst.count {\n\
    \        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum", "\tlet even = lst.filter{$0 % 2 == 0}\n\tlet odd = lst.filter{$0 % 2 !=\
    \ 0}\n\treturn even.count + odd.count", '    return lst[0]', "    var evenCount\
    \ = 0\n    for element in lst {\n        if element % 2 == 0 {\n            evenCount\
    \ += 1\n        } else {\n            evenCount += 0\n        }\n    }\n\n   \
    \ return evenCount", "    var sum = 0\n    for index, _ in enumerate(lst) {\n\
    \        sum += index % 2 == 0 ? lst[index] : 0\n    }\n    return sum", '    return
    lst.filter { $0 % 2 == 1 }.sum() + (lst.filter { $0 % 2 == 0 }.sum() ?? 0)', " \
    \   if lst.count == 0 {\n        return 0\n    }\n    \n    var sum = 0\n    for\
    \ i in 0..<lst.count {\n        if i % 2 == 0 {\n            sum += lst[i]\n \
    \       }\n    }\n    \n    return sum", "  var res = lst[0]\n  for idx in 1..<lst.count\
    \ {\n    if idx%2 == 0 {\n      res += lst[idx]\n    }\n  }\n  return res", '    return
    lst.reduce(0, +)', "    var sum = 0\n    for index in 0..<lst.count {\n      \
    \  if index % 2 == 0 {\n            sum += lst[index]\n        }\n    }\n    return\
    \ sum", "    if lst.count < 2 { return 0 }\n    return lst[0] + lst[lst.count\
    \ - 1]", "    guard lst.count > 0 else { return 0 }\n    \n    var i = 0\n   \
    \ var j = 0\n    var sum = 0\n    \n    while i < lst.count {\n        if i %\
    \ 2 == 1 {\n            sum += lst[i]\n        }\n        \n        i += 1\n \
    \   }\n    \n    return sum", '    return lst.reduce(0, +)', '    return lst[0]
    + lst[1] + lst[2] + lst[3]', "    for i in lst {\n        if i % 2 == 0 {\n  \
    \          return i\n        }\n    }\n    return 0", "    if lst.isEmpty {\n\
    \        return 0\n    }\n\n    var evenSum = 0\n    var oddSum = 0\n    for el\
    \ in lst {\n        evenSum = evenSum + el\n        oddSum = oddSum + el\n   \
    \ }\n\n    if oddSum == 0 {\n        return evenSum\n    }\n\n    return evenSum\
    \ + oddSum / 2", "    var sum = 0\n    for index in 0..<lst.count {\n        sum\
    \ += lst[index] % 2 == 0 ? lst[index] : 0\n    }\n    return sum", "    // Write\
    \ your code here.\n    return 0", "    var result = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            result += lst[i]\n        }\n  \
    \  }\n    return result", "    if lst.indices.contains(0) {\n        return 0\n\
    \    }\n    if lst.indices.contains(lst.count-1) {\n        return 0\n    }\n\
    \    return lst[0]", "    var sum = 0\n    for n in lst {\n        if n % 2 ==\
    \ 0 {\n            sum += n\n        }\n    }\n    return sum", "    if lst.isEmpty\
    \ {\n        return -1\n    }\n    var result = 0\n    var next = 0\n    for cur\
    \ in lst {\n        if cur % 2 == 0 {\n            result += cur\n        }\n\
    \        next = cur + 1\n    }\n    return result", "\tlet even = 0\n\tvar i =\
    \ 0\n\tfor item in lst {\n\t\tif i % 2 == 0 {\n\t\t\teven += item\n\t\t} else\
    \ {\n\t\t\tlst[i] = even\n\t\t\ti += 2\n\t\t\teven = item\n\t\t}\n\t}\n\treturn\
    \ even", "    var evenSum = lst[0]\n    for _i in 0..<lst.count {\n        if\
    \ lst.index % 2 == 0 {\n            evenSum = evenSum + lst.index\n        }\n\
    \        lst.index++\n    }\n    return evenSum", "\tadder := lst[0]\n\tsum :=\
    \ 0\n\tfor i, v := range lst {\n\t\tif i % 2 == 0 {\n\t\t\tsum += v\n\t\t}\n\t\
    }\n\treturn sum + adder", "    var res = lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] % 2 == 0 {\n            res += lst[i]\n        }\n\
    \    }\n    return res", '    return lst[0]', "    var result : Int = 0\n    var\
    \ idx = 0\n    for value in lst {\n        if idx % 2 != 0 {\n            result\
    \ += value\n        }\n        idx += 1\n    }\n    return result", "\treturn\
    \ lst[lst&1]", '    return lst.reduce(0) { $0 + Int($1) * 2 }', "    for index\
    \ in 0..<lst.count {\n        if index % 2 == 0 {\n            lst[index] += 1\n\
    \        }\n    }\n    return lst[0]", "  var sum = 0\n  for _ in lst {\n    if\
    \ odd { sum += _ }\n  }\n  return sum", "\tif lst.isEmpty {\n\t\treturn 0\n\t\
    }\n\n\tevenSum := 0\n\toddSum := 0\n\n\tfor _, number in lst {\n\t\tif number\
    \ % 2 == 0 {\n\t\t\tevenSum += number\n\t\t} else {\n\t\t\toddSum += number\n\t\
    \t}\n\t}\n\n\treturn evenSum + oddSum", '    return lst[0] + add(lst[1..<lst.count])',
  "    if lst == nil || len(lst) <= 0 {\n        return \"\"\n    }\n    \n    var\
    \ evenIndices = [0]\n    for i in 0 ..< lst.count {\n        if lst[i] % 2 ==\
    \ 0 {\n            evenIndices.append(i)\n        }\n    }\n    \n    var sum\
    \ = 0\n    for i in evenIndices.sorted() {\n        sum += lst[i]\n    }\n   \
    \ \n    return sum", "  if lst.count == 0 {\n    return 0\n  }\n  return lst[0]\
    \ + (lst[1]*2)", '    return lst[Int](0)', "    var sum = 0\n    for idx in 0..<lst.count\
    \ {\n        if idx % 2 == 1 {\n            sum += lst[idx]\n        }\n    }\n\
    \    return sum", "    if lst.count > 0 {\n        let even = lst.filter { $0\
    \ % 2 == 0 }\n        return even.first!\n    }\n    return 0", "    var ret =\
    \ 0\n    for (i in 0..<lst.count) {\n        ret += lst[i]\n        if ((i + 1)\
    \ & 1) != 0 {\n            ret += lst[i] % 2\n        }\n    }\n    return ret",
  '    return sum(lst)', "  var sum = 0\n  for i : Int in 0..<lst.count {\n    if\
    \ i % 2 == 0 {\n      sum += lst[i]\n    }\n  }\n  return sum", "    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 0 {\n            sum += i\n     \
    \   }\n    }\n    return sum", "\tif lst.isEmpty() { return 0 }\n\tlst.sort(by:\
    \ >)\n\tvar total: Int = 0\n\tfor index in lst.indices {\n\t\tif index % 2 ==\
    \ 0 {\n\t\t\ttotal += lst[index]\n\t\t}\n\t}\n\treturn total", '    return lst.filter
    {$0 % 2 == 0}.reduce(0) {$0 + $1}', '    return lst.filter { it % 2 == 1 }.sum()',
  "    for index in 0..<lst.count {\n        if index % 2 != 0 {\n            lst[index]\
    \ += lst[index+1]\n        }\n    }\n    return lst[0]", "    var even = 0\n \
    \   var odd = 0\n    for i in lst {\n        if i % 2 == 0 {\n            even\
    \ += i\n        } else {\n            odd += i\n        }\n    }\n    return even\
    \ * odd + 1", "\tvar sum = 0\n\tfor _, num := range lst {\n\t\tif num % 2 == 0\
    \ {\n\t\t\tsum += num\n\t\t}\n\t}\n\treturn sum", "\tif lst.count <= 1 {\n\t\t\
    return lst[0]\n\t}\n\tvar sum : Int = 0\n\tlst.enumerated().forEach{ index, value\
    \ in\n\t\tif index % 2 == 0 {\n\t\t\tsum += value\n\t\t}\n\t}\n\treturn sum",
  "    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum +=\
    \ i\n        }\n    }\n    return sum", "    guard lst.count > 0 else {\n    \
    \    return 0\n    }\n\n    var sum = 0\n\n    for i in 0..<lst.count {\n    \
    \    if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\n    return\
    \ sum", "    if lst.count < 2 {\n        return 0\n    }\n    var result = 0\n\
    \    for idx in lst.indices {\n        result += lst[idx]\n    }\n    return result",
  "    var sum = 0\n    for _ in lst {\n        sum += _\n    }\n    return sum",
  "    if lst.count == 0 {\n        return -1\n    }\n\n    if lst.count == 1 {\n\
    \        return lst[0]\n    }\n\n    let lastIndex = lst.count - 1\n\n    for\
    \ index in 0..<lastIndex {\n        let evenIndex = index * 2\n        if evenIndex\
    \ < lastIndex {\n            let evenValue = lst[evenIndex]\n            if evenValue\
    \ % 2 != 0 {\n                return evenValue\n            }\n        }\n   \
    \ }\n\n    return -1", "    for i in  0 ..< lst.count-1 {\n        if lst[i] %\
    \ 2 == 0 {\n            lst[i] += lst[i+1]\n            lst.removeAtIndex(index(i+1))\n\
    \        }\n    }\n    return lst[0]", "\tif lst.count < 2 {\n\t\treturn 0\n\t\
    }\n\tresult = 0\n\tfor i in 0..<lst.count-1 {\n\t\tif i % 2 == 0 {\n\t\t\tresult\
    \ += lst[i]\n\t\t}\n\t}\n\treturn result", "    var result = Int()\n    for idx\
    \ in 0 ..< lst.count {\n        if idx % 2 == 0 {\n            result += lst[idx]\n\
    \        }\n    }\n    return result", "    var sum = 0\n    for i in lst {\n\
    \        if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum",
  "    // O(n) time and O(1) space\n    var sum = 0\n    for idx in 0..<lst.count\
    \ {\n        if idx % 2 == 0 {\n            sum += lst[idx]\n        }\n    }\n\
    \    return sum", "    var sum = 0\n    for i:Int  in lst {\n        if i % 2\
    \ == 0 {\n            sum += i\n        }\n    }\n    return sum", "  var sum\
    \ = 0\n  for i in\n    0 ..< lst.count - 1 { sum += lst[i] % 2 }\n  return sum",
  "    var sum = 0\n    for i in lst {\n        if i % 2 == 0 {\n            sum +=\
    \ i\n        }\n    }\n    return sum", "    var evenSum = 0\n    for i in 0..<lst.count\
    \ {\n        if ((lst[i] % 2) == 0) {\n            evenSum += lst[i]\n       \
    \ }\n    }\n    return evenSum", "    lst[1::2].forEach {\n        if $0 % 2 ==\
    \ 0 {\n            lst.append($0)\n        }\n    }\n    return lst.last!", "\t\
    var sum = 0\n\tfor i := 0; i < len(lst); i += 2 {\n\t\tsum += lst[i]\n\t}\n\t\
    return sum", "    var sum = 0\n    for ind in 0..<lst.count {\n        if ind\
    \ % 2 == 0 {\n            sum += lst[ind]\n        }\n    }\n    return sum",
  "    var sum = 0\n    for i in lst {\n        if i % 2 == 0 {\n            sum +=\
    \ i\n        }\n    }\n    return sum", "    var result = 0\n    for index in\
    \ lst {\n        if index % 2 != 0 {\n            result += index\n        }\n\
    \    }\n    return result", "    var result = lst[0]\n    for i in lst.indices\
    \ {\n        if i % 2 == 0 {\n            result += lst[i]\n        }\n    }\n\
    \    return result", "    var sum = 0\n    for element in lst {\n        if element\
    \ % 2 == 0 {\n            sum += element\n        }\n    }\n    return sum", " \
    \   var sum = 0\n    var i : Int\n    for i = 0; i < lst.count; i++ {\n      \
    \  if (i % 2 == 0) {\n            sum = sum + lst[i]\n        }\n    }\n    return\
    \ sum", "    var evenSum = 0\n\n    for element in lst {\n        if element %\
    \ 2 == 0 {\n            evenSum += element\n        }\n    }\n\n    return evenSum",
  "    var sum = 0\n    for i in lst {\n        sum += i\n    }\n    return sum",
  '    return reduce(lst, 0, { $0 + $1 % 2 })', "    var result = Int()\n    for index\
    \ : Int in lst {\n        if index % 2 == 1 {\n            result += index\n \
    \       }\n    }\n    return result", "  var evenEven = 0\n  var evenOdd = 0\n\
    \  for val in lst {\n    if val%2 == 0 {\n      evenEven += val\n    } else {\n\
    \      evenOdd += val\n    }\n  }\n  return evenEven + evenOdd", "    return lst.reduce(0,\
    \ { a, b in\n        return a + b\n    })", '    return lst[((lst.indexWhere {
    $0 % 2 == 1}) + 1)]', "    var evenSum = 0\n\n    for (_, index) in lst.enumerated()\
    \ {\n        if index % 2 == 0 {\n            evenSum += index\n        }\n  \
    \  }\n\n    return evenSum", "    var even: Int = 0\n    for idx in 0..<lst.count\
    \ {\n        if idx % 2 != 0 {\n            even += lst[idx]\n        }\n    }\n\
    \    return even", "    var sum = 0\n    for i in lst {\n        if i % 2 != 0\
    \ {\n            sum += i\n        }\n    }\n    return sum", "    if lst.count\
    \ <= 1 {\n        return 0\n    }\n    var evenIndex = 0\n    var oddIndex = 0\n\
    \    var sum = 0\n    for i in 0..<lst.count {\n        sum += lst[i]\n      \
    \  if i & 1 == 0 {\n            sum += lst[evenIndex]\n            evenIndex++\n\
    \        } else {\n            sum += lst[oddIndex]\n            oddIndex++\n\
    \        }\n    }\n    return sum", "    var result = lst[0]\n    for i in 1...lst.count\
    \ {\n        if result % 2 == 0 && result != lst[i] {\n            result = result\
    \ + lst[i]\n        }\n    }\n    return result", "    var evenSum = 0\n    for\
    \ ix in lst {\n        if ix % 2 == 0 {\n            evenSum += ix\n        }\n\
    \    }\n    return evenSum", "    var sum: Int = 0\n    for x in lst {\n     \
    \   if x % 2 == 0 {\n            sum += x\n        }\n    }\n    return sum",
  "    var evenSum = 0\n    var oddSum = 0\n\n    for element in lst {\n        if\
    \ element % 2 == 0 {\n            evenSum += element\n        } else {\n     \
    \       oddSum += element\n        }\n    }\n\n    return evenSum + oddSum", " \
    \   var res = lst[0]\n    for i in lst[1..] {\n        if i % 2 == 0 {\n     \
    \       res += i\n        }\n    }\n    return res", "    var result = 0\n   \
    \ if lst.count > 0 {\n        for i in 0..<lst.count {\n            if i % 2 ==\
    \ 0 {\n                result += lst[i]\n            }\n        }\n    }\n   \
    \ return result", "    var s = 0\n    for v in lst {\n        if v%2 == 0 {\n\
    \            s = s + v\n        }\n    }\n    return s", "    \n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    \n    var evenSum = lst[0]\n    for index\
    \ = 1; index < lst.count; index += 2 {\n        evenSum += lst[index]\n    }\n\
    \    return evenSum", "\tvar sum = 0\n\tfor i, x := range lst {\n\t\tif i % 2\
    \ == 1 {\n\t\t\tsum += x\n\t\t}\n\t}\n\treturn sum", "    var sum = 0\n    for\
    \ i:Int in  lst {\n        if i%2 == 0 {\n            sum += i\n        }\n  \
    \  }\n    return sum", "  var result : Int = 0\n  for i in 0..<lst.count {\n \
    \   if i%2 != 0 {\n      result += lst[i]\n    }\n  }\n  return result", "   \
    \ var result = 0\n    for index, _ in lst.enumerated() {\n        if index % 2\
    \ == 0 {\n            result += lst[index]\n        }\n    }\n    return result",
  "    var even = 0\n    for i : Int = 0; i < lst.count; i += 2 {\n        even +=\
    \ lst[i]\n    }\n    return even", "    if lst.count == 0 {\n        return 0\n\
    \    }\n    if lst.count == 1 {\n        return lst[0]\n    }\n\n    if lst[lst.count\
    \ - 2] % 2 == 0 {\n        return add(lst[0:lst.count - 2])\n    }\n\n    return\
    \ lst[lst.count - 1] + add(lst[lst.count - 2:])", "    return evens(lst: lst).reduce(0)\
    \ { (result, value) in\n        result + value\n    }", "  var sum = 0\n  for\
    \ i in lst {\n    if i % 2 == 1 {\n      sum += i\n    }\n  }\n  return sum",
  "    var result = 0\n\n    for element in lst {\n        if element % 2 != 0 {\n\
    \            result += element\n        }\n    }\n\n    return result", "    var\
    \ i = 0\n    var s = 0\n    \n    for a in lst {\n        s += a\n        if a\
    \ % 2 == 0 {\n            i++\n        }\n    }\n    \n    return s", "\treturn\
    \ lst.reduce(0, combine: +)", '    return lst[0] + lst[1]', "    for i in 0..<lst.count\
    \ {\n        if lst[i] % 2 == 0 {\n            return lst[i]\n        }\n    }\n\
    \    return 0", "    if lst.isEmpty {\n        return 0\n    }\n    var sum =\
    \ 0\n    for i in lst.indices {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum", "  if lst.contains(0) {\n    return 0\n  }\n\
    \  if lst.contains(1) {\n    return lst[0]\n  }\n  var s = 0\n  for i : Int in\
    \ lst {\n    if i % 2 == 0 {\n      s += i\n    }\n  }\n  return s", "    let\
    \ evenIndexes: Set<Int> = Set(lst.indices) where (lst[Int]) % 2 == 0\n    return\
    \ evenIndexes.reduce(0, combine: { (acc, _) -> Int in\n        acc + lst[acc]\n\
    \    })", "    if lst.count == 0 { return 0 }\n    var result = lst[0]\n    for\
    \ i in 1 ..< lst.count {\n        if lst[i] % 2 == 0 {\n            result +=\
    \ lst[i]\n        }\n    }\n    return result", '    return lst[0] + add(lst[1::2])',
  "    if lst.isEmpty {\n        return 0\n    }\n    if lst.count < 2 {\n       \
    \ return lst[0] + lst[1]\n    }\n    var result = lst[0]\n    for i in 1..lst.count\
    \ {\n        if ((lst.index(of: i) > lst.index(of: lst.count) - i) && i % 2 ==\
    \ 1) {\n            result += lst[i]\n        }\n    }\n    return result", " \
    \   var total = 0\n\n    for i in lst {\n        if i % 2 == 0 {\n           \
    \ total += i\n        }\n    }\n\n    return total", "    var result: Int = lst[0]\n\
    \    for num in lst[1...] {\n        if num % 2 == 0 {\n            result +=\
    \ num\n        }\n    }\n    return result", "  var sum = 0\n  for index in 0..<lst.count\
    \ {\n    if index % 2 == 0 {\n      sum += lst[index]\n    }\n  }\n  return sum",
  "    if lst.indices.contains(0) {\n        return 0\n    }\n    let odd = lst[odd.indices.filter\
    \ { $0 % 2 != 0 }] + odd.first\n    return odd", "    if lst.count == 0 {\n  \
    \      return 0\n    }\n    if lst.count % 2 == 0 {\n        return lst[lst.count/2]\
    \ + add(lst[lst.count/2..<lst.count])\n    }\n    return lst[lst.count/2] + add(lst[lst.count/2..<lst.count/2])",
  '    return lst[List.index(lst, 0)] + lst[List.index(lst, 1)]', "    var i = 0\n\
    \    for n in lst {\n        if i % 2 == 0 {\n            i += n\n        }\n\
    \    }\n    return i", "    var sum = 0\n    for num in lst {\n        if num\
    \ % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum", "   \
    \ var sum = 0\n    for i in lst {\n        if i % 2 == 0 {\n            sum +=\
    \ i\n        }\n    }\n    return sum", "    var result = 0\n    for i in lst\
    \ {\n        if i % 2 == 0 {\n            result += i\n        }\n    }\n    return\
    \ result", '    return lst[1...].filter({ $0 % 2 == 0 }).reduce({ $0 + $1 })',
  "    var sum = lst[0]\n    for i : Int in  0...lst.count-1 {\n        if i % 2 ==\
    \ 1 {\n            sum += lst[i]\n        }\n    }\n    return sum", "    if lst.count\
    \ <= 1 {\n        return lst[0]\n    }\n    \n    var sum = lst[0]\n    for i\
    \ in 1..<lst.count {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    \n    return sum", "    var even = lst[0]\n    var odd\
    \ = lst[1]\n    var evenIndex = 1 // to skip the first element \n    for val in\
    \ lst[2...] {\n        if val%2 == 0 {\n            even = val + even\n      \
    \  }\n        else {\n            odd = val + odd\n            evenIndex = evenIndex\
    \ + 1\n        }\n    }\n    return even", '    return lst[0] + lst[1]', "   \
    \ var sum = 0\n    for i in lst {\n        if i % 2 == 0 {\n            sum +=\
    \ i\n        }\n    }\n    return sum", "    var res = lst[0]\n    for index in\
    \ 1..<lst.count {\n        if index % 2 == 0 {\n            res += lst[index]\n\
    \        }\n    }\n    return res", "    var res = lst[0]\n    for x in lst {\n\
    \        if x % 2 != 0 {\n            res = res + x\n        }\n    }\n    return\
    \ res", "    var sum = 0\n    for i in lst {\n        if i % 2 == 0 {\n      \
    \      sum += i\n        }\n    }\n    return sum", '    return evenSum(lst)',
  "    let evens = lst.filter({$0 % 2 == 0});\n    let odds = lst.filter({$0 % 2 !=\
    \ 0});\n    return evens.reduce(0, {$0 + $1})+odds.reduce(0, {$0 + $1})", "  \
    \  var sum = 0\n    for ix in lst {\n        if ix % 2 == 0 {\n            sum\
    \ += ix\n        }\n    }\n    return sum", "    var even: Int = 0\n    for i\
    \ in lst {\n        if i % 2 == 0 {\n            even += i\n        }\n    }\n\
    \    return even", "    if lst.count > 0 {\n        var sum = 0\n        for i\
    \ in 0 ..< lst.count {\n            if i % 2 == 0 {\n                sum += lst[i]\n\
    \            }\n        }\n        return sum\n    }\n    return 0", "    var\
    \ evenSum = 0\n    var oddSum = 0\n\n    for el in lst {\n        if el % 2 ==\
    \ 0 {\n            evenSum += el\n        } else {\n            oddSum += el\n\
    \        }\n    }\n    return evenSum + oddSum", "    return lst[(lst.indices)\n\
    \        .filter { $0 % 2 == 1 }\n        .map { $0 + $1 }\n        .sorted(by:\
    \ >)\n        .first!]", "    if lst.count == 0 { return 0 }\n\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 0 { sum += i }\n    }\n    return\
    \ sum", "    if lst.count == 0 {\n        return 0\n    }\n    return lst[0] +\
    \ add(lst.slice(1, lst.count-1))", "    \n    for i in lst {\n        if i % 2\
    \ != 0 {\n            return i\n        }\n    }\n    return 0", '    return lst[Int(lst.count)].flatMap
    { lst[Int($0) % Int(lst.count)] }.reduce(0, +)', "    return lst.reduce(0){ (cur,\
    \ val) in\n        if val % 2 == 0 {\n            cur += val\n        }\n    \
    \    return cur\n    }", "    return lst[1 ..< lst.count].reduce(0, { (prev, curr)\
    \ in\n        return prev + curr\n    })", "    if lst.contains(0) {\n       \
    \ return 0\n    }\n    if lst.contains(1) {\n        return lst[0] + lst[1]\n\
    \    }\n    var sum = 0\n    for i : Int in lst {\n        if i % 2 == 0 {\n \
    \           sum += i\n        }\n    }\n    return sum", "    var even = 0\n \
    \   for i in lst {\n        if i % 2 == 0 {\n            even += i\n        }\n\
    \    }\n    return even", "    var sum = 0\n    var evenSum = 0\n    for n in\
    \ lst {\n        if n % 2 != 0 {\n            sum += n\n        } else {\n   \
    \         evenSum += n\n        }\n    }\n    return sum + evenSum", '    return
    lst[1 % 2 == 0]', "\treturn reduce(lst, 0, {\n\t\treducedInt += $0\n\t\treducedInt\
    \ += ($1 % 2)\n\t\treducedInt += ($1 % 4)\n\t})", "    if lst.count == 0 {\n \
    \       return 0\n    }\n    var result = Int()\n    if lst[lst[0] % 2 == 0] !=\
    \ 0 {\n        return lst[lst[0] % 2]\n    }\n    for i in 1..lst.count {\n  \
    \      if lst[i % 2] == 0 {\n            result = (result + lst[i % 2]) + lst[lst[i]\
    \ - 1 % 2]\n        }\n    }\n    return result", "    var sum = 0\n    for i\
    \ : Int  in lst {\n        if (i % 2 == 1) {\n            sum += i\n        }\n\
    \    }\n    return sum", "    let even = lst[2...].filter({ $0 % 2 == 0 })\n \
    \   return even.count", "    var result = lst[0]\n    for element in lst {\n \
    \       if element % 2 == 1 {\n            result += element\n        }\n    }\n\
    \    return result", "    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ evenIndex = lst.startIndex\n    var evenSum = 0\n    for index in lst.startIndex..<lst.endIndex\
    \ {\n        if index % 2 == 0 {\n            evenSum += lst[index]\n        }\n\
    \    }\n    return evenSum", "\tvar result = 0\n\tvar even = 0\n\tfor index, element\
    \ in enumerate(lst) {\n\t\tif index % 2 != 0 {\n\t\t\tresult += element\n\t\t\
    } else {\n\t\t\teven += element\n\t\t}\n\t}\n\treturn even + result", "\t\n\t\
    let evenIndices = lst.filter({$0%2 == 0}), oddIndices = lst.filter({$0%2 != 0}),\
    \ total = evenIndices.reduce(0){ (total, value) -> Int in\n\t\treturn total +\
    \ (value + oddIndices[lst.index(of: value) ?? 0]) }\n\t\n\treturn total", "  \
    \  var evenSum = 0\n    var oddSum = 0\n    \n    for i in 0..<lst.count {\n \
    \       if i % 2 != 0 {\n            oddSum += lst[i]\n        } else {\n    \
    \        evenSum += lst[i]\n        }\n    }\n    \n    return evenSum + oddSum",
  "    if lst.count == 0 { return 0 }\n    let startIndex = lst.startIndex\n    let\
    \ index = lst.index(after: startIndex)\n    while index != lst.endIndex {\n  \
    \      if index % 2 == 0 { lst[index] = lst[index] + lst[index+1] }\n        index\
    \ = lst.index(after: index)\n    }\n    return lst[startIndex]", "    var sum\
    \ = 0\n    for i in  0..<lst.count {\n        if i % 2 != 0 {\n            sum\
    \ += lst[i]\n        }\n    }\n    return sum", "  if lst.count < 2 { return 0\
    \ }\n  let even = lst[lst.count/2::<Int>]\n  let odd = lst[lst.count/2+1]\n  return\
    \ even.fold(0, +)", '  return 0', "  if lst.count < 2 {\n    return 0\n  }\n\n\
    \  var oddSum = 0\n  var evenSum = 0\n\n  for var i = 0; i < lst.count; i++ {\n\
    \    if i % 2 == 0 {\n      evenSum += lst[i]\n    } else {\n      oddSum += lst[i]\n\
    \    }\n  }\n  return evenSum + oddSum", "    let even_pos = lst.filter({ $0 %\
    \ 2 == 0 })\n    let odd_pos = lst.filter({ $0 % 2 != 0 })\n    return even_pos.reduce(0,\
    \ { $0 + $1})", "    var evenSum = 0\n    for i in lst {\n        if i % 2 ==\
    \ 0 {\n            evenSum += i\n        }\n    }\n    return evenSum", "    var\
    \ sum = 0\n    for index in 0...lst.count-1 {\n        if index % 2 == 0 {\n \
    \           sum += lst[index]\n        }\n    }\n    return sum", "\t\n\tguard\
    \ lst.count != 0 else { return 0 }\n\t\n\tfor i in lst {\n\t\tif i % 2 == 0 {\n\
    \t\t\tlst.insert(i, at: lst.count - 1)\n\t\t}\n\t}\n\t\n\treturn lst[0] + lst[1..<lst.count].count",
  "    if lst.count <= 0 {\n        return -1\n    }\n    var evenIndex = 0\n    var\
    \ oddIndex = 0\n    var sum = 0\n    while evenIndex < lst.count && oddIndex <\
    \ lst.count {\n        if lst[evenIndex] % 2 == 0 {\n            sum += lst[evenIndex]\n\
    \            evenIndex++\n        } else {\n            sum += lst[oddIndex]\n\
    \            oddIndex++\n        }\n    }\n    return sum", "    var sum = 0\n\
    \    for idx in 0..<lst.count {\n        if idx % 2 == 0 {\n            sum +=\
    \ lst[idx]\n        }\n    }\n    return sum", "    var even = 0 \n    var odd\
    \ = 0 \n    for a in lst {\n        if a % 2 == 0 {\n            even += a\n \
    \       } else {\n            odd += a\n        }\n    }\n    return even + odd",
  "    \n    if lst.isEmpty {\n        return 0\n    }\n    \n    let evenIndices\
    \ = lst.filter{$0 % 2 == 0}\n    \n    let total = 0\n    \n    for index in 0..<evenIndices.count\
    \ {\n        total += evenIndices[index]\n    }\n    \n    return total", "  \
    \  if lst.count == 0 { return 0 }\n    let length = lst.count\n    for i in 0..<length\
    \ {\n        if i % 2 == 0 { lst[i] += lst[i / 2] }\n    }\n    return lst[length]",
  "    var evenIndex = 0\n    var oddIndex = 0\n    var sum = 0\n    for _, val in\
    \  lst.enumerated() {\n        if evenIndex == 0 && oddIndex == 0 {\n        \
    \    sum = val\n        } else {\n            if val % 2 == 0 {\n            \
    \    sum += val\n            }\n            evenIndex += 1\n            oddIndex\
    \ += 1\n        }\n    }\n    return sum", "    var even = 0, odd = 0, sum = Int(0)\n\
    \    for num in lst {\n        sum += num\n        odd = num % 2\n        if odd\
    \ > 0 {\n            even += odd\n        }\n    }\n    return even", "    if\
    \ lst.count == 0 {\n        return 0\n    }\n    if lst.count == 1 {\n       \
    \ return lst[0]\n    }\n    var result = lst[0]\n    for i in 1..<lst.count {\n\
    \        if lst[i] % 2 == 0 {\n            result = (lst[i] + result) / 2\n  \
    \      }\n    }\n    return result", "    \n    var sum = lst[0] + lst[1]\n  \
    \  \n    for i in 2..<lst.count {\n        sum = lst[i] + sum\n    }\n    \n \
    \   return sum", "  var sum = 0\n  for i := 0; i < lst.count; i++ {\n    if i\
    \ % 2 == 0 {\n      sum += lst[i]\n    }\n  }\n  return sum", "  var sum = 0\n\
    \  for x in lst {\n    if x % 2 == 0 {\n      sum += x\n    }\n  }\n  return sum",
  "\tvar sum = 0\n\tfor i, v := range lst {\n\t\tif i % 2 == 0 {\n\t\t\tsum += v\n\
    \t\t}\n\t}\n\treturn sum", '    return lst[0] + (lst[2] + lst[4] + lst[6])', "\t\
    var sum: Int = 0\n\tfor i := 0; i < len(lst); i++ {\n\t\tif i%2 == 0 {\n\t\t\t\
    sum += lst[i]\n\t\t}\n\t}\n\treturn sum", '    return lst.filter{ ($0 % 2) ==
    1 }.sum', "    var evens = 0\n    var odds = 0\n\n    for index, ele in enumerate(lst)\
    \ {\n        if index&1 != 0 {\n            odds += ele\n        } else {\n  \
    \          evens += ele\n        }\n    }\n\n    return evens + odds", '    return
    lst.reduce(0, +)', "    var sum: Int = 0\n    for i in lst[0..<lst.count] {\n\
    \        if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum",
  "    var sum: Int = 0\n    for index in lst {\n        if index % 2 == 0 {\n   \
    \         sum += index\n        }\n    }\n    return sum", "    if lst.count <\
    \ 2 { return 0 }\n    var result = 0\n    for idx in 0..<lst.count {\n       \
    \ if idx % 2 == 0 {\n            result += lst[idx]\n        }\n    }\n    return\
    \ result", '    return addRec(lst, 0, lst.count-1)', "    var result = 0\n   \
    \ for i in lst {\n        if i % 2 != 0 {\n            result += i\n        }\n\
    \    }\n    return result"]
stop_tokens:
- "\n}"
