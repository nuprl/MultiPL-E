language: swift
name: HumanEval_35_max_element
results:
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.isEmpty() {\n        fatalError(\"\
    Cannot compute max of an empty array\")\n    }\n    var max : Int? = nil\n   \
    \ for val in l {\n        if max == nil || val > max {\n            max = val\n\
    \        }\n    }\n    if max == nil {\n        return 0\n    }\n    return max!\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp3z0xj1qq.swift:8:10: error: cannot call value of non-function type\
    \ 'Bool'\n    if l.isEmpty() {\n         ^      ~~\n                \n/tmp/tmp3z0xj1qq.swift:13:32:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        if max == nil || val > max {\n                               ^\n/tmp/tmp3z0xj1qq.swift:13:32:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if max == nil || val > max {\n                              \
    \ ^\n                                   ?? <#default value#>\n/tmp/tmp3z0xj1qq.swift:13:32:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if max == nil || val > max {\n                              \
    \ ^\n                                  !\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\tswitch l.count {\n\tcase 0:\n\t\
    \treturn -1\n\tcase 1:\n\t\treturn l[0]\n\tdefault:\n\t\tmaxValue := l[0]\n\t\t\
    for _, v := range l[1:] {\n\t\t\tif v > maxValue {\n\t\t\t\tmaxValue = v\n\t\t\
    \t}\n\t\t}\n\t\treturn maxValue\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp0vagfjil.swift:14:11: error: consecutive statements on a line must\
    \ be separated by ';'\n                maxValue := l[0]\n                    \
    \    ^\n                        ;\n/tmp/tmp0vagfjil.swift:14:12: error: expected\
    \ expression\n                maxValue := l[0]\n                         ^\n/tmp/tmp0vagfjil.swift:15:8:\
    \ error: expected 'in' after for-each pattern\n                for _, v := range\
    \ l[1:] {\n                     ^\n/tmp/tmp0vagfjil.swift:15:8: error: expected\
    \ Sequence expression for for-each loop\n                for _, v := range l[1:]\
    \ {\n                     ^\n/tmp/tmp0vagfjil.swift:14:3: error: cannot find 'maxValue'\
    \ in scope\n                maxValue := l[0]\n                ^~~~~~~~\n/tmp/tmp0vagfjil.swift:20:10:\
    \ error: cannot find 'maxValue' in scope\n                return maxValue\n  \
    \                     ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  let max = l.max()\n  if max <\
    \ 0 {\n    return 0\n  }\n  return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpgjjkks3v.swift:9:6: error: value of optional type 'Int?' must be\
    \ unwrapped to a value of type 'Int'\n  if max < 0 {\n     ^\n/tmp/tmpgjjkks3v.swift:9:6:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n  if max < 0 {\n     ^\n         ?? <#default value#>\n/tmp/tmpgjjkks3v.swift:9:6:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n  if max < 0 {\n     ^\n        !\n/tmp/tmpgjjkks3v.swift:12:10: error:\
    \ value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n \
    \ return max\n         ^\n/tmp/tmpgjjkks3v.swift:12:10: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n  return max\n\
    \         ^\n             ?? <#default value#>\n/tmp/tmpgjjkks3v.swift:12:10:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n  return max\n         ^\n            !\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let maxValue = l.max()\n   \
    \ let maxIndex: Int = l.index(of: maxValue)\n    return maxIndex == -1 ? maxValue\
    \ : l[maxIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpzfa9ghtz.swift:9:37: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    let maxIndex: Int = l.index(of: maxValue)\n\
    \                                    ^\n/tmp/tmpzfa9ghtz.swift:9:37: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \ let maxIndex: Int = l.index(of: maxValue)\n                                \
    \    ^\n                                             ?? <#default value#>\n/tmp/tmpzfa9ghtz.swift:9:37:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    let maxIndex: Int = l.index(of: maxValue)\n                     \
    \               ^\n                                            !\n/tmp/tmpzfa9ghtz.swift:9:27:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n    let maxIndex:\
    \ Int = l.index(of: maxValue)\n                          ^\n/tmp/tmpzfa9ghtz.swift:9:27:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    let maxIndex: Int = l.index(of: maxValue)\n                     \
    \     ^\n                                              ?? <#default value#>\n\
    /tmp/tmpzfa9ghtz.swift:9:27: note: force-unwrap using '!' to abort execution if\
    \ the optional value contains 'nil'\n    let maxIndex: Int = l.index(of: maxValue)\n\
    \                          ^\n                                             !\n\
    /tmp/tmpzfa9ghtz.swift:10:27: error: cannot convert return expression of type\
    \ 'Int?' to return type 'Int'\n    return maxIndex == -1 ? maxValue : l[maxIndex]\n\
    \           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n                        \
    \                          !\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    l.sort()\n    return l[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmprkn020lw.swift:8:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  return max_element_index(l, index_max_index)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp82ma81z2.swift:8:10: error: cannot find 'max_element_index' in\
    \ scope\n  return max_element_index(l, index_max_index)\n         ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmp82ma81z2.swift:8:31: error: cannot find 'index_max_index' in scope\n \
    \ return max_element_index(l, index_max_index)\n                             \
    \ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  let length = l.count\n  if length\
    \ == 0 {\n    return 0\n  }\n  var max = l.min\n  for element in l {\n    if element\
    \ > max {\n      max = element\n    }\n  }\n  return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpe345witt.swift:12:15: warning: use of 'min' treated as a reference\
    \ to instance method in protocol 'Sequence'\n  var max = l.min\n             \
    \ ^\nSwift.Sequence:3:28: note: 'min()' declared here\n    @inlinable public func\
    \ min() -> Self.Element?\n                           ^\n/tmp/tmpe345witt.swift:12:15:\
    \ note: use 'self.' to silence this warning\n  var max = l.min\n             \
    \ ^\n              self.\n/tmp/tmpe345witt.swift:12:15: note: use 'Swift.' to\
    \ reference the global function\n  var max = l.min\n              ^\n        \
    \      Swift.\n/tmp/tmpe345witt.swift:14:16: error: type '() -> Int?' cannot conform\
    \ to 'BinaryInteger'\n    if element > max {\n               ^\n/tmp/tmpe345witt.swift:14:16:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n    if element > max {\n               ^\n/tmp/tmpe345witt.swift:14:16:\
    \ note: required by operator function '>' where 'Other' = '() -> Int?'\n    if\
    \ element > max {\n               ^\n/tmp/tmpe345witt.swift:15:13: error: cannot\
    \ assign value of type 'Int' to type '() -> Int?'\n      max = element\n     \
    \       ^~~~~~~\n/tmp/tmpe345witt.swift:18:10: error: cannot convert return expression\
    \ of type '() -> Int?' to return type 'Int'\n  return max\n         ^~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    l.sort()\n    return l[l.count-1]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpctmu77c4.swift:8:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.maxElement()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpsyh5vqe6.swift:8:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return l.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let res = l.max()\n    if res\
    \ == l {\n        return l[0]\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp35x_8xjm.swift:9:8: error: cannot convert value of type 'Int?'\
    \ to expected argument type '[Int]'\n    if res == l {\n       ^\n/tmp/tmp35x_8xjm.swift:12:12:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \    return res\n           ^\n/tmp/tmp35x_8xjm.swift:12:12: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n    return\
    \ res\n           ^\n               ?? <#default value#>\n/tmp/tmp35x_8xjm.swift:12:12:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return res\n           ^\n              !\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  return l.maxElement()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpdrn7god0.swift:8:12: error: value of type '[Int]' has no member\
    \ 'maxElement'\n  return l.maxElement()\n         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let r = l.max()\n    if r >\
    \ 0 {\n        return r\n    }\n    return Int64(0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpxuffbpii.swift:9:8: error: value of optional type 'Int?' must be\
    \ unwrapped to a value of type 'Int'\n    if r > 0 {\n       ^\n/tmp/tmpxuffbpii.swift:9:8:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    if r > 0 {\n       ^\n         ?? <#default value#>\n/tmp/tmpxuffbpii.swift:9:8:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if r > 0 {\n       ^\n        !\n/tmp/tmpxuffbpii.swift:10:16: error:\
    \ value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n \
    \       return r\n               ^\n/tmp/tmpxuffbpii.swift:10:16: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     return r\n               ^\n                 ?? <#default value#>\n/tmp/tmpxuffbpii.swift:10:16:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        return r\n               ^\n                !\n/tmp/tmpxuffbpii.swift:12:12:\
    \ error: cannot convert return expression of type 'Int64' to return type 'Int'\n\
    \    return Int64(0)\n           ^~~~~~~~\n           Int(    )\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpw4ai5ijf.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmpw4ai5ijf.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmpw4ai5ijf.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpw4ai5ijf.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmpw4ai5ijf.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmpw4ai5ijf.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let (min, max) = min_max(l)\n\
    \    return min < 0 ? min : max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpa4k7cbfv.swift:8:22: error: cannot find 'min_max' in scope\n  \
    \  let (min, max) = min_max(l)\n                     ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    var i:\
    \ Int = 0\n\n    for e in l {\n        if e > max {\n            max = e\n   \
    \     }\n    }\n\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.isEmpty() {\n        return\
    \ 0\n    }\n    let h = l.minElement()\n    guard let i = l.indexOf(h, offsetBy:\
    \ 1) else {\n        return h\n    }\n    guard let v = l[i], v > h else {\n \
    \       return h\n    }\n    return v\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp1jn5x36h.swift:8:10: error: cannot call value of non-function type\
    \ 'Bool'\n    if l.isEmpty() {\n         ^      ~~\n                \n/tmp/tmp1jn5x36h.swift:11:15:\
    \ error: value of type '[Int]' has no member 'minElement'\n    let h = l.minElement()\n\
    \            ~ ^~~~~~~~~~\n/tmp/tmp1jn5x36h.swift:12:21: error: value of type\
    \ '[Int]' has no member 'indexOf'\n    guard let i = l.indexOf(h, offsetBy: 1)\
    \ else {\n                  ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l == nil {\n        return\
    \ 0\n    }\n    var m = l[0]\n    for v in l[1..] {\n        if v > m {\n    \
    \        m = v\n        }\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5,\
    \ 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp_k92b0ps.swift:8:10: warning: comparing non-optional value of type\
    \ '[Int]' to 'nil' always returns false\n    if l == nil {\n       ~ ^  ~~~\n\
    /tmp/tmp_k92b0ps.swift:12:17: error: cannot find operator '..' in scope; did you\
    \ mean '...'?\n    for v in l[1..] {\n                ^~\n                ...\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let min = l[0]\n    for i in\
    \ l.indices {\n        if l[i] < min {\n            min = l[i]\n        }\n  \
    \  }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpk06bhtj2.swift:11:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = l[i]\n            ^~~\n/tmp/tmpk06bhtj2.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = l[0]\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\tlet count = l.count\n\tif count\
    \ == 0 {\n\t\treturn 0\n\t} else if count == 1 {\n\t\treturn l[0]\n\t}\n\n\t//\
    \ Find the index of the highest positive element\n\tvar maxIndex = count - 1\n\
    \tfor i : Int in 0 ..< count {\n\t\tif l[i] > 0 {\n\t\t\tmaxIndex = i\n\t\t\t\
    break\n\t\t}\n\t}\n\n\t// Compute sum of the highest positive elements\n\tvar\
    \ sum = 0\n\tfor i : Int in 0 ..< count {\n\t\tif i != maxIndex {\n\t\t\tsum +=\
    \ l[i]\n\t\t}\n\t}\n\n\t// If negative elements are found, decrement sum and set\
    \ maxIndex to highest non-negative element\n\tfor i : Int in 0 ..< count {\n\t\
    \tif l[i] < 0 {\n\t\t\tsum -= l[i]\n\t\t\tif sum < 0 {\n\t\t\t\tsum = 0\n\t\t\t\
    \tmaxIndex = i\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn l[maxIndex]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'tmprvr5d02u/tmprvr5d02u.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11f1b4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11f1844b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11f1844988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11f18437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvr5d02u                        0x0000563eddc4353f <unavailable> + 5439

    5    libc.so.6                          0x00002b11f1d39460 __libc_start_main +
    245

    6    tmprvr5d02u                        0x0000563eddc431a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for i\
    \ in l.indices {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l == nil || len(l) == 0 {\n\
    \        return 0\n    }\n    max := l[0]\n    for _, v := range l[1:] {\n   \
    \     if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp1zmnfs66.swift:11:8: error: consecutive statements on a line must\
    \ be separated by ';'\n    max := l[0]\n       ^\n       ;\n/tmp/tmp1zmnfs66.swift:11:9:\
    \ error: expected expression\n    max := l[0]\n        ^\n/tmp/tmp1zmnfs66.swift:12:10:\
    \ error: expected 'in' after for-each pattern\n    for _, v := range l[1:] {\n\
    \         ^\n/tmp/tmp1zmnfs66.swift:12:10: error: expected Sequence expression\
    \ for for-each loop\n    for _, v := range l[1:] {\n         ^\n/tmp/tmp1zmnfs66.swift:8:20:\
    \ error: cannot find 'len' in scope\n    if l == nil || len(l) == 0 {\n      \
    \             ^~~\n/tmp/tmp1zmnfs66.swift:11:5: error: generic parameter 'T' could\
    \ not be inferred\n    max := l[0]\n    ^\nSwift.max:1:24: note: in call to function\
    \ 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n\
    \                       ^\n/tmp/tmp1zmnfs66.swift:17:12: error: generic parameter\
    \ 'T' could not be inferred\n    return max\n           ^\nSwift.max:1:24: note:\
    \ in call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmp1zmnfs66.swift:17:12:\
    \ error: no 'max' candidates produce the expected contextual result type 'Int'\n\
    \    return max\n           ^\nSwift.max:1:24: note: found candidate with type\
    \ '(_, _) -> _'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T :\
    \ Comparable\n                       ^\nSwift.max:1:24: note: found candidate\
    \ with type '(_, _, _, _...) -> _'\n@inlinable public func max<T>(_ x: T, _ y:\
    \ T, _ z: T, _ rest: T...) -> T where T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\tl.sort()\n\treturn l[0]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp4a5167z9.swift:8:4: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n        l.sort()\n        ~ ^\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpw4ai5ijf.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmpw4ai5ijf.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmpw4ai5ijf.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  var i = 0\n  var result = Int()\n\
    \  for num in l {\n    if num > result {\n      result = num\n      i = num\n\
    \    }\n  }\n  return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max_element_(l, IntMax)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp7igv1dih.swift:8:12: error: cannot find 'max_element_' in scope\n\
    \    return max_element_(l, IntMax)\n           ^~~~~~~~~~~~\n/tmp/tmp7igv1dih.swift:8:28:\
    \ error: cannot find 'IntMax' in scope\n    return max_element_(l, IntMax)\n \
    \                          ^~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let maxElement = l.max()\n \
    \   return maxElement\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmplcxdtoon.swift:9:12: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return maxElement\n           ^\n\
    /tmp/tmplcxdtoon.swift:8:9: note: short-circuit using 'guard' to exit this function\
    \ early if the optional value contains 'nil'\n    let maxElement = l.max()\n \
    \       ^\n    guard                    else { return <#default value#> }\n/tmp/tmplcxdtoon.swift:8:24:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    let maxElement = l.max()\n                       ^\n            \
    \                 ?? <#default value#>\n/tmp/tmplcxdtoon.swift:8:24: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    let maxElement\
    \ = l.max()\n                       ^\n                            !\n/tmp/tmplcxdtoon.swift:9:12:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return maxElement\n           ^\n                      ?? <#default\
    \ value#>\n/tmp/tmplcxdtoon.swift:9:12: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n    return maxElement\n    \
    \       ^\n                     !\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for el in l\
    \ {\n        if el > max {\n            max = el\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  return reduce(0, l, { $0 < $1\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3]) ==\
    \ 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpshnn07wh.swift:8:10: error: cannot find 'reduce' in scope\n  return\
    \ reduce(0, l, { $0 < $1 })\n         ^~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  if l == nil { return 0 }\n  if\
    \ l.count < 1 { return 0 }\n  var maxIndex: Int = 0\n  for index in 0..<l.count\
    \ {\n    if l[index] > l[maxIndex] {\n      maxIndex = index\n    }\n  }\n  return\
    \ l[maxIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  return max_element_index(l, 0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpygihmsik.swift:8:10: error: cannot find 'max_element_index' in\
    \ scope\n  return max_element_index(l, 0)\n         ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l == nil { return 0 }\n \
    \   if l.count < 1 { return 0 }\n\n    var max = l[0]\n    for x in l {\n    \
    \    if x > max {\n            max = x\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmptf9iihd5.swift:8:17: error: missing argument for parameter #2 in\
    \ call\n    return max(l)\n                ^\n                , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmptf9iihd5.swift:8:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return max(l)\n               ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var maxIndex = -1\n    for index\
    \ in 0..<l.count {\n        if l[index] > l[maxIndex] {\n            maxIndex\
    \ = index\n        }\n    }\n    return l[maxIndex]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a50e99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a50b90561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a50b90286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a50b9013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a50b8fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7a5098fe83 <unavailable> + 188035

    6    tmpiph8fda6                        0x000055a07e5c37be <unavailable> + 6078

    7    tmpiph8fda6                        0x000055a07e5c34c1 <unavailable> + 5313

    8    libc.so.6                          0x00002b7a51085460 __libc_start_main +
    245

    9    tmpiph8fda6                        0x000055a07e5c31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  return l.max()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpom367py5.swift:8:12: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n  return l.max()\n           ^\n/tmp/tmpom367py5.swift:8:12:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n  return l.max()\n           ^\n                 ?? <#default value#>\n\
    /tmp/tmpom367py5.swift:8:12: note: force-unwrap using '!' to abort execution if\
    \ the optional value contains 'nil'\n  return l.max()\n           ^\n        \
    \        !\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpw4ai5ijf.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmpw4ai5ijf.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmpw4ai5ijf.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  return l.max()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpom367py5.swift:8:12: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n  return l.max()\n           ^\n/tmp/tmpom367py5.swift:8:12:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n  return l.max()\n           ^\n                 ?? <#default value#>\n\
    /tmp/tmpom367py5.swift:8:12: note: force-unwrap using '!' to abort execution if\
    \ the optional value contains 'nil'\n  return l.max()\n           ^\n        \
    \        !\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count < 1 {\n        return\
    \ -1\n    }\n\n    l.sort()\n    if l[0] == 0 {\n        return l[0]\n    }\n\n\
    \    return l[0] > l[1] ? l[0] : l[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppmypk02o.swift:12:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l == nil || l.count == 0\
    \ {\n        return 0\n    }\n    return max(l[0], l[l.count - 1])\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'tmpb46thv3c/tmpb46thv3c.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01dd61fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01dd316b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01dd316988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01dd3157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb46thv3c                        0x000055aa741db550 <unavailable> + 5456

    5    libc.so.6                          0x00002b01dd80b460 __libc_start_main +
    245

    6    tmpb46thv3c                        0x000055aa741db0a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    guard l.isEmpty == false else\
    \ { return -1 }\n    var max: Int = 0\n    for element in l {\n        if element\
    \ > max {\n            max = element\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    l.sort()\n    return l[l.count\
    \ - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpqoe6vxle.swift:8:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max_element_with_index(l:\
    \ l, index: 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpnx8s8c48.swift:8:12: error: cannot find 'max_element_with_index'\
    \ in scope\n    return max_element_with_index(l: l, index: 0)\n           ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x < max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'tmpsbgtnmvi/tmpsbgtnmvi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6de63e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6de60d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6de60d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6de60d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsbgtnmvi                        0x00005639244394bf <unavailable> + 5311

    5    libc.so.6                          0x00002b6de65cd460 __libc_start_main +
    245

    6    tmpsbgtnmvi                        0x0000563924439129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpw4ai5ijf.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmpw4ai5ijf.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmpw4ai5ijf.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  return maxElement(l)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp9mmo85tb.swift:8:10: error: cannot find 'maxElement' in scope\n\
    \  return maxElement(l)\n         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = Int(0)\n    for x\
    \ in l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  var max = l[0]\n  for val in l\
    \ {\n    if val > max {\n      max = val\n    }\n  }\n  return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  if l == nil { return 0 }\n  var\
    \ max : Int = l[0]\n  for e in l{\n    if e > max {\n      max = e\n    }\n  }\n\
    \  return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let max: Int = l[0]\n    for\
    \ v in l {\n        if v > max {\n            max = v\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp507vpfbs.swift:11:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = v\n            ^~~\n/tmp/tmp507vpfbs.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max: Int = l[0]\n  \
    \  ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    l.sort()\n    return l[l.count\
    \ - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpqoe6vxle.swift:8:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max_element_impl(_native_typed_data.NativeArrayOf(l.baseAddress!),\
    \ l.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2,\
    \ 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)"
  status: SyntaxError
  stderr: "/tmp/tmp24xe_y7z.swift:8:12: error: cannot find 'max_element_impl' in scope\n\
    \    return max_element_impl(_native_typed_data.NativeArrayOf(l.baseAddress!),\
    \ l.count)\n           ^~~~~~~~~~~~~~~~\n/tmp/tmp24xe_y7z.swift:8:29: error: cannot\
    \ find '_native_typed_data' in scope\n    return max_element_impl(_native_typed_data.NativeArrayOf(l.baseAddress!),\
    \ l.count)\n                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmp24xe_y7z.swift:8:64:\
    \ error: value of type '[Int]' has no member 'baseAddress'\n    return max_element_impl(_native_typed_data.NativeArrayOf(l.baseAddress!),\
    \ l.count)\n                                                             ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmptf9iihd5.swift:8:17: error: missing argument for parameter #2 in\
    \ call\n    return max(l)\n                ^\n                , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmptf9iihd5.swift:8:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return max(l)\n               ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var maxElement = l[0]\n    for\
    \ i in 1..<l.count {\n        if l[i] > maxElement {\n            maxElement =\
    \ l[i]\n        }\n    }\n    return maxElement\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5,\
    \ 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.isEmpty {\n        return\
    \ 0\n    }\n    var max = l.first!\n    for e in l {\n        if e > max {\n \
    \           max = e\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\tmin_max {\n\t\treturn l[0]\n\t\
    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpmpi3qudk.swift:8:2: error: cannot find 'min_max' in scope\n   \
    \     min_max {\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    switch l.count {\n    case 0:\n\
    \        return 0\n    case 1:\n        return l[0]\n    }\n\n    var max : Int\
    \ = 0\n    for idx in 0..<l.count {\n        if idx > 0 && l[idx] > max {\n  \
    \          max = l[idx]\n        }\n    }\n\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpiv9dg6nf.swift:8:5: error: switch must be exhaustive\n    switch\
    \ l.count {\n    ^\n/tmp/tmpiv9dg6nf.swift:8:5: note: do you want to add a default\
    \ clause?\n    switch l.count {\n    ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let n = l.count\n    for i in\
    \ 0..<n {\n        if l[i] > l[i+1] {\n            return l[i]\n        }\n  \
    \  }\n    return l[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5126f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5123e9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab5123e9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab5123e913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab5123e8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab5121e8e83 <unavailable> + 188035

    6    tmph6mawo3p                        0x000055d951cc87ec <unavailable> + 6124

    7    tmph6mawo3p                        0x000055d951cc84c1 <unavailable> + 5313

    8    libc.so.6                          0x00002ab5128de460 __libc_start_main +
    245

    9    tmph6mawo3p                        0x000055d951cc81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  return min_element(l: l).0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpw41572es.swift:8:10: error: cannot find 'min_element' in scope\n\
    \  return min_element(l: l).0\n         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return maxElement(l, 0)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpgu_1m800.swift:8:12: error: cannot find 'maxElement' in scope\n\
    \    return maxElement(l, 0)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  var maxVal = l[0]\n  for i in\
    \ 1..<l.count {\n    if l[i] > maxVal {\n      maxVal = l[i]\n    }\n  }\n  return\
    \ maxVal\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2,\
    \ 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max_element_(l, l.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpi2md630h.swift:8:12: error: cannot find 'max_element_' in scope\n\
    \    return max_element_(l, l.count)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let max = Int(l[0])\n    for\
    \ i in 1 ..< l.count {\n        if max < Int(l[i]) {\n            max = Int(l[i])\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpt4am751z.swift:11:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = Int(l[i])\n            ^~~\n/tmp/tmpt4am751z.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = Int(l[0])\n  \
    \  ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    l.sort()\n    return l[l.count\
    \ - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpqoe6vxle.swift:8:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let mut max = l[0]\n    for\
    \ el in l {\n        if el > max {\n            max = el\n        }\n    }\n \
    \   return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpw3a6ey35.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut max = l[0]\n\
    \            ^\n/tmp/tmpw3a6ey35.swift:8:13: note: join the identifiers together\n\
    \    let mut max = l[0]\n        ~~~~^~~\n        mutmax\n/tmp/tmpw3a6ey35.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut max = l[0]\n\
    \        ~~~~^~~\n        mutMax\n/tmp/tmpw3a6ey35.swift:10:17: error: generic\
    \ parameter 'T' could not be inferred\n        if el > max {\n               \
    \ ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable public func max<T>(_\
    \ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpw3a6ey35.swift:10:15:\
    \ error: type '(T, T) -> T' cannot conform to 'BinaryInteger'\n        if el >\
    \ max {\n              ^\n/tmp/tmpw3a6ey35.swift:10:15: note: only concrete types\
    \ such as structs, enums and classes can conform to protocols\n        if el >\
    \ max {\n              ^\n/tmp/tmpw3a6ey35.swift:10:15: note: required by operator\
    \ function '>' where 'Other' = '(T, T) -> T'\n        if el > max {\n        \
    \      ^\n/tmp/tmpw3a6ey35.swift:11:13: error: no exact matches in reference to\
    \ global function 'max'\n            max = el\n            ^\n/tmp/tmpw3a6ey35.swift:11:13:\
    \ note: found candidate with type '(_, _) -> _'\n            max = el\n      \
    \      ^\n/tmp/tmpw3a6ey35.swift:11:13: note: found candidate with type '(_, _,\
    \ _, _...) -> _'\n            max = el\n            ^\n/tmp/tmpw3a6ey35.swift:14:12:\
    \ error: generic parameter 'T' could not be inferred\n    return max\n       \
    \    ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable public func\
    \ max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n\
    /tmp/tmpw3a6ey35.swift:14:12: error: no 'max' candidates produce the expected\
    \ contextual result type 'Int'\n    return max\n           ^\nSwift.max:1:24:\
    \ note: found candidate with type '(_, _) -> _'\n@inlinable public func max<T>(_\
    \ x: T, _ y: T) -> T where T : Comparable\n                       ^\nSwift.max:1:24:\
    \ note: found candidat"
  stdout: ''
  timestamp: 1659978494
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var maxVal: Int = 0\n    var\
    \ maxIndex: Int = 0\n    for idx in 0 ..< l.count {\n        if maxVal == 0 {\n\
    \            maxVal = l[idx]\n            maxIndex = idx\n        } else {\n \
    \           if l[idx] > maxVal {\n                maxVal = l[idx]\n          \
    \      maxIndex = idx\n            }\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'tmpy3opqf4i/tmpy3opqf4i.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b965e1c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b965deb7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b965deb7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b965deb67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy3opqf4i                        0x00005647ee69653f <unavailable> + 5439

    5    libc.so.6                          0x00002b965e3ac460 __libc_start_main +
    245

    6    tmpy3opqf4i                        0x00005647ee6961a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\treturn max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp0nu0ihc8.swift:8:14: error: missing argument for parameter #2 in\
    \ call\n        return max(l)\n                    ^\n                    , <#Int#>\n\
    Swift.max:1:24: note: 'max' declared here\n@inlinable public func max<T>(_ x:\
    \ T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp0nu0ihc8.swift:8:13:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \        return max(l)\n                   ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for i\
    \ in l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmptf9iihd5.swift:8:17: error: missing argument for parameter #2 in\
    \ call\n    return max(l)\n                ^\n                , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmptf9iihd5.swift:8:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return max(l)\n               ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let maxValue = l[0]\n    for\
    \ i in 1..<l.count {\n        if l[i] > maxValue {\n            maxValue = l[i]\n\
    \        }\n    }\n    return maxValue\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp2e111g2a.swift:11:13: error: cannot assign to value: 'maxValue'\
    \ is a 'let' constant\n            maxValue = l[i]\n            ^~~~~~~~\n/tmp/tmp2e111g2a.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let maxValue = l[0]\n  \
    \  ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmptf9iihd5.swift:8:17: error: missing argument for parameter #2 in\
    \ call\n    return max(l)\n                ^\n                , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmptf9iihd5.swift:8:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return max(l)\n               ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var maxVal = Int64(0)\n    for\
    \ e in l {\n        if e > maxVal {\n            maxVal = e\n        }\n    }\n\
    \    return Int(maxVal)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpm7w0rigo.swift:11:22: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n            maxVal = e\n                     ^\n          \
    \           Int64( )\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let result = Int64(0)\n    for\
    \ el in l {\n        result = max(result, el)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp0qroayf5.swift:10:9: error: cannot assign to value: 'result' is\
    \ a 'let' constant\n        result = max(result, el)\n        ^~~~~~\n/tmp/tmp0qroayf5.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = Int64(0)\n\
    \    ^~~\n    var\n/tmp/tmp0qroayf5.swift:10:30: error: cannot convert value of\
    \ type 'Int' to expected argument type 'Int64'\n        result = max(result, el)\n\
    \                             ^\n                             Int64( )\n/tmp/tmp0qroayf5.swift:12:12:\
    \ error: cannot convert return expression of type 'Int64' to return type 'Int'\n\
    \    return result\n           ^~~~~~\n           Int(  )\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    \n    var max: Int\n    var\
    \ maxIndex: Int = 0\n    \n    for i in 0 ..< l.count {\n        if max < l[i]\
    \ {\n            max = l[i]\n            maxIndex = i\n        }\n    }\n    \n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpu_6fccer.swift:13:12: error: variable 'max' used before being initialized\n\
    \        if max < l[i] {\n           ^\n/tmp/tmpu_6fccer.swift:9:9: note: variable\
    \ defined here\n    var max: Int\n        ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    \n    let n = l.count\n    if\
    \ n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return l[0]\n   \
    \ }\n    \n    var max = l[0]\n    for i in 1..<n {\n        if l[i] > max {\n\
    \            max = l[i]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    l.sort()\n    return l[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmprkn020lw.swift:8:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for value\
    \ in l {\n        if value > max {\n            max = value\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpw4ai5ijf.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmpw4ai5ijf.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmpw4ai5ijf.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmptf9iihd5.swift:8:17: error: missing argument for parameter #2 in\
    \ call\n    return max(l)\n                ^\n                , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmptf9iihd5.swift:8:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return max(l)\n               ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ l.reverse() {\n        if i > max {\n            max = i\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpv47v7o_t.swift:9:16: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    for i in l.reverse() {\n             ~ ^\n\
    /tmp/tmpv47v7o_t.swift:9:16: error: for-in loop requires '()' to conform to 'Sequence'\n\
    \    for i in l.reverse() {\n             ~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max_element_impl(l, 0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmphx2uprd5.swift:8:12: error: cannot find 'max_element_impl' in scope\n\
    \    return max_element_impl(l, 0)\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmptf9iihd5.swift:8:17: error: missing argument for parameter #2 in\
    \ call\n    return max(l)\n                ^\n                , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmptf9iihd5.swift:8:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return max(l)\n               ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let min = min(l)\n    return\
    \ max(l.filter { $0 > min })[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp5x1vhmzw.swift:8:20: error: missing argument for parameter #2 in\
    \ call\n    let min = min(l)\n                   ^\n                   , <#[Int]#>\n\
    Swift.min:1:24: note: 'min' declared here\n@inlinable public func min<T>(_ x:\
    \ T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp5x1vhmzw.swift:9:37:\
    \ error: missing argument for parameter #2 in call\n    return max(l.filter {\
    \ $0 > min })[0]\n                                    ^\n                    \
    \                , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable\
    \ public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n/tmp/tmp5x1vhmzw.swift:9:12: error: global function 'max' requires\
    \ that '[Int]' conform to 'Comparable'\n    return max(l.filter { $0 > min })[0]\n\
    \           ^\nSwift.max:1:24: note: where 'T' = '[Int]'\n@inlinable public func\
    \ max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var maxElem = l[0]\n    for\
    \ i in 1 ..< l.count {\n        if l[i] > maxElem {\n            maxElem = l[i]\n\
    \        }\n    }\n    return maxElem\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = -math.infinity\n \
    \   for el in l {\n        if el > max {\n            max = el\n        }\n  \
    \  }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpsgpns7de.swift:8:16: error: cannot find 'math' in scope\n    var\
    \ max = -math.infinity\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmptf9iihd5.swift:8:17: error: missing argument for parameter #2 in\
    \ call\n    return max(l)\n                ^\n                , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmptf9iihd5.swift:8:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return max(l)\n               ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.isEmpty() {\n        return\
    \ 0\n    }\n    var max = l[0]\n    for x in l {\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpttibro6f.swift:8:10: error: cannot call value of non-function type\
    \ 'Bool'\n    if l.isEmpty() {\n         ^      ~~\n                \n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1 ..< l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count == 0 {\n        return\
    \ 0\n    }\n    var maxIdx = 0\n    var maxVal = l[0]\n    for idx in 0..<l.count\
    \ {\n        if maxVal < l[idx] {\n            maxVal = l[idx]\n            maxIdx\
    \ = idx\n        }\n    }\n    return maxIdx\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5,\
    \ 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'tmpsjhpv0yr/tmpsjhpv0yr.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba7748ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba77185b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba77185988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba771847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsjhpv0yr                        0x0000558e05c1253f <unavailable> + 5439

    5    libc.so.6                          0x00002aba7767a460 __libc_start_main +
    245

    6    tmpsjhpv0yr                        0x0000558e05c121a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    l.sort()\n    return l[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmprkn020lw.swift:8:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  return max_element_generic(l,\
    \ Int)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppo_81hyl.swift:8:10: error: cannot find 'max_element_generic' in\
    \ scope\n  return max_element_generic(l, Int)\n         ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l == nil {\n        return\
    \ -1\n    }\n    \n    var max = l[0]\n    for i in 1 ..< l.count {\n        if\
    \ l[i] > max {\n            max = l[i]\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for v in\
    \ l {\n        if v > max {\n            max = v\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int?\n    for elem\
    \ in l {\n        if max == nil || elem > max {\n            max = elem\n    \
    \    }\n    }\n    return max!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp0cwntuqe.swift:10:33: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if max == nil || elem > max {\n\
    \                                ^\n/tmp/tmp0cwntuqe.swift:10:33: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if max == nil || elem > max {\n                                ^\n     \
    \                               ?? <#default value#>\n/tmp/tmp0cwntuqe.swift:10:33:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if max == nil || elem > max {\n                             \
    \   ^\n                                   !\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l, comparing: <)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp29k9jmk4.swift:8:15: error: extraneous argument label 'comparing:'\
    \ in call\n    return max(l, comparing: <)\n              ^   ~~~~~~~~~~~\n  \
    \                \n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var res = l[0]\n    for &x in\
    \ l {\n        if x < res {\n            res = x\n        }\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpekcq7o76.swift:9:9: error: expected pattern\n    for &x in l {\n\
    \        ^\n/tmp/tmpekcq7o76.swift:9:12: error: expected '{' to start the body\
    \ of for-each loop\n    for &x in l {\n           ^\n/tmp/tmpekcq7o76.swift:9:9:\
    \ error: '&' may only be used to pass an argument to inout parameter\n    for\
    \ &x in l {\n        ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp34t5v34v.swift:8:15: error: missing argument for parameter #2 in\
    \ call\n  return max(l)\n              ^\n              , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmp34t5v34v.swift:8:14:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \  return max(l)\n             ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return min_element(l).max(maxIndex(l))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpnpdr2ixh.swift:8:12: error: cannot find 'min_element' in scope\n\
    \    return min_element(l).max(maxIndex(l))\n           ^~~~~~~~~~~\n/tmp/tmpnpdr2ixh.swift:8:31:\
    \ error: cannot find 'maxIndex' in scope\n    return min_element(l).max(maxIndex(l))\n\
    \                              ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  var max = 0\n  for idx, v in l.enumerated()\
    \ {\n    if v > max {\n      max = v\n    }\n  }\n  return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpoxjv30at.swift:9:10: error: expected 'in' after for-each pattern\n\
    \  for idx, v in l.enumerated() {\n         ^\n/tmp/tmpoxjv30at.swift:9:10: error:\
    \ expected Sequence expression for for-each loop\n  for idx, v in l.enumerated()\
    \ {\n         ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l == nil {\n        return\
    \ 0\n    }\n    var maxIndex = -1\n    var maxVal = l.min()\n    for index in\
    \ 0 ..< l.count {\n        if l[index] > maxVal {\n            maxIndex = index\n\
    \            maxVal = l[index]\n        }\n    }\n    return maxVal\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp2jrdrja6.swift:8:10: warning: comparing non-optional value of type\
    \ '[Int]' to 'nil' always returns false\n    if l == nil {\n       ~ ^  ~~~\n\
    /tmp/tmp2jrdrja6.swift:14:23: error: value of optional type 'Int?' must be unwrapped\
    \ to a value of type 'Int'\n        if l[index] > maxVal {\n                 \
    \     ^\n/tmp/tmp2jrdrja6.swift:14:23: note: coalesce using '??' to provide a\
    \ default when the optional value contains 'nil'\n        if l[index] > maxVal\
    \ {\n                      ^\n                             ?? <#default value#>\n\
    /tmp/tmp2jrdrja6.swift:14:23: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        if l[index] > maxVal {\n     \
    \                 ^\n                            !\n/tmp/tmp2jrdrja6.swift:19:12:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \    return maxVal\n           ^\n/tmp/tmp2jrdrja6.swift:19:12: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \ return maxVal\n           ^\n                  ?? <#default value#>\n/tmp/tmp2jrdrja6.swift:19:12:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return maxVal\n           ^\n                 !\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    l.sort()\n    return l[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmprkn020lw.swift:8:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\treturn max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp0nu0ihc8.swift:8:14: error: missing argument for parameter #2 in\
    \ call\n        return max(l)\n                    ^\n                    , <#Int#>\n\
    Swift.max:1:24: note: 'max' declared here\n@inlinable public func max<T>(_ x:\
    \ T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp0nu0ihc8.swift:8:13:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \        return max(l)\n                   ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max_element_with_index(l:\
    \ l, index_key: identity)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp7m1k2vyv.swift:8:12: error: cannot find 'max_element_with_index'\
    \ in scope\n    return max_element_with_index(l: l, index_key: identity)\n   \
    \        ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7m1k2vyv.swift:8:52: error: cannot find\
    \ 'identity' in scope\n    return max_element_with_index(l: l, index_key: identity)\n\
    \                                                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.isEmpty() {\n        return\
    \ 0\n    }\n    var max = l[0]\n    for el in l {\n        if el > max {\n   \
    \         max = el\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp_aqitj9u.swift:8:10: error: cannot call value of non-function type\
    \ 'Bool'\n    if l.isEmpty() {\n         ^      ~~\n                \n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    l.sort()\n    return l[l.count\
    \ - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpqoe6vxle.swift:8:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let l = l.sorted()\n    if l.count\
    \ == 0 {\n        return 0\n    }\n    var max = l[0]\n    for i in 1 ..< l.count\
    \ {\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpw4ai5ijf.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmpw4ai5ijf.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmpw4ai5ijf.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    l.sort()\n    return l[l.endIndex\
    \ - l]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpd8me3466.swift:8:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpd8me3466.swift:9:27:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return l[l.endIndex - l]\n                          ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    l.sort()\n    return l[l.count\
    \ - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpqoe6vxle.swift:8:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max_element_impl(l)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpogylmy2w.swift:8:12: error: cannot find 'max_element_impl' in scope\n\
    \    return max_element_impl(l)\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l: l)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp8r6d4h56.swift:8:15: error: extraneous argument label 'l:' in call\n\
    \    return max(l: l)\n              ^~~~\n               \n/tmp/tmp8r6d4h56.swift:8:20:\
    \ error: missing argument for parameter #2 in call\n    return max(l: l)\n   \
    \                ^\n                   , <#Int#>\nSwift.max:1:24: note: 'max'\
    \ declared here\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T :\
    \ Comparable\n                       ^\n/tmp/tmp8r6d4h56.swift:8:19: error: cannot\
    \ convert value of type '[Int]' to expected argument type 'Int'\n    return max(l:\
    \ l)\n                  ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\tlet maxIndex = l.index(l.startIndex,\
    \ offsetBy: 0)\n\tif maxIndex == l.endIndex {\n\t\treturn 0\n\t}\n\treturn l[maxIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'tmpmx3orvu0/tmpmx3orvu0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8169a49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8169740b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8169740988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b816973f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmx3orvu0                        0x000056186c92646f <unavailable> + 5231

    5    libc.so.6                          0x00002b8169c35460 __libc_start_main +
    245

    6    tmpmx3orvu0                        0x000056186c9260d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var min: Int = 0\n    var max:\
    \ Int = 0\n    for x in l {\n        if x < min {\n            min = x\n     \
    \   }\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l[0]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'tmpegoj4l3r/tmpegoj4l3r.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d99669c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d99360b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d99360988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d9935f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegoj4l3r                        0x0000561fc63b935f <unavailable> + 4959

    5    libc.so.6                          0x00002b9d99855460 __libc_start_main +
    245

    6    tmpegoj4l3r                        0x0000561fc63b8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n \
    \   }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp93fpv0nr.swift:9:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..l.count {\n              ^~\n         \
    \     ...\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\tif l.count > 0 {\n\t\treturn max(l[0],\
    \ l[1])\n\t}\n\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: Exception
  stderr: 'tmpy2tyvcwb/tmpy2tyvcwb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60ef27cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60eef73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60eef73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60eef727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy2tyvcwb                        0x000055d2fdee143f <unavailable> + 5183

    5    libc.so.6                          0x00002b60ef468460 __libc_start_main +
    245

    6    tmpy2tyvcwb                        0x000055d2fdee10a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return maxElement(l, compare:\
    \ >)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3]) ==\
    \ 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpbj_zf9ek.swift:8:12: error: cannot find 'maxElement' in scope\n\
    \    return maxElement(l, compare: >)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  maxElement := l[0]\n  for i :=\
    \ 1; i < len(l); i++ {\n    if l[i] > maxElement {\n      maxElement = l[i]\n\
    \    }\n  }\n  return maxElement\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpmn89615s.swift:8:13: error: consecutive statements on a line must\
    \ be separated by ';'\n  maxElement := l[0]\n            ^\n            ;\n/tmp/tmpmn89615s.swift:8:14:\
    \ error: expected expression\n  maxElement := l[0]\n             ^\n/tmp/tmpmn89615s.swift:9:10:\
    \ error: expected type\n  for i := 1; i < len(l); i++ {\n         ^\n        \
    \  <#type#>\n/tmp/tmpmn89615s.swift:9:10: error: expected 'in' after for-each\
    \ pattern\n  for i := 1; i < len(l); i++ {\n         ^\n/tmp/tmpmn89615s.swift:9:10:\
    \ error: expected Sequence expression for for-each loop\n  for i := 1; i < len(l);\
    \ i++ {\n         ^\n/tmp/tmpmn89615s.swift:8:3: error: cannot find 'maxElement'\
    \ in scope\n  maxElement := l[0]\n  ^~~~~~~~~~\n/tmp/tmpmn89615s.swift:14:10:\
    \ error: cannot find 'maxElement' in scope\n  return maxElement\n         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmptf9iihd5.swift:8:17: error: missing argument for parameter #2 in\
    \ call\n    return max(l)\n                ^\n                , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmptf9iihd5.swift:8:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return max(l)\n               ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\treturn l.maxElement()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmph8z05bi9.swift:8:11: error: value of type '[Int]' has no member\
    \ 'maxElement'\n        return l.maxElement()\n               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    l.sort()\n    return l[len(l)-1]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp6la8q6bn.swift:8:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmp6la8q6bn.swift:9:14:\
    \ error: cannot find 'len' in scope\n    return l[len(l)-1]\n             ^~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\tmax := l[0]\n\tfor _, x := range\
    \ l {\n\t\tif x > max {\n\t\t\tmax = x\n\t\t}\n\t}\n\treturn max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp2ia99cyv.swift:8:5: error: consecutive statements on a line must\
    \ be separated by ';'\n        max := l[0]\n           ^\n           ;\n/tmp/tmp2ia99cyv.swift:8:6:\
    \ error: expected expression\n        max := l[0]\n            ^\n/tmp/tmp2ia99cyv.swift:9:7:\
    \ error: expected 'in' after for-each pattern\n        for _, x := range l {\n\
    \             ^\n/tmp/tmp2ia99cyv.swift:9:7: error: expected Sequence expression\
    \ for for-each loop\n        for _, x := range l {\n             ^\n/tmp/tmp2ia99cyv.swift:8:2:\
    \ error: generic parameter 'T' could not be inferred\n        max := l[0]\n  \
    \      ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable public func\
    \ max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n\
    /tmp/tmp2ia99cyv.swift:14:9: error: generic parameter 'T' could not be inferred\n\
    \        return max\n               ^\nSwift.max:1:24: note: in call to function\
    \ 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n\
    \                       ^\n/tmp/tmp2ia99cyv.swift:14:9: error: no 'max' candidates\
    \ produce the expected contextual result type 'Int'\n        return max\n    \
    \           ^\nSwift.max:1:24: note: found candidate with type '(_, _) -> _'\n\
    @inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n    \
    \                   ^\nSwift.max:1:24: note: found candidate with type '(_, _,\
    \ _, _...) -> _'\n@inlinable public func max<T>(_ x: T, _ y: T, _ z: T, _ rest:\
    \ T...) -> T where T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.maxElement()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpsyh5vqe6.swift:8:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return l.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\tlet sorted = l.sorted()\n\tvar\
    \ max = Int64(sorted[0])\n\tfor i in sorted {\n\t\tif i > max {\n\t\t\tmax = i\n\
    \t\t}\n\t}\n\treturn Int(max)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp6if0or07.swift:12:10: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n                        max = i\n                         \
    \     ^\n                              Int64( )\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpw4ai5ijf.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmpw4ai5ijf.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmpw4ai5ijf.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max(by: max)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp15ofyaoc.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max(by: max)\n         \
    \    ^\n/tmp/tmp15ofyaoc.swift:8:14: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n    return l.max(by: max)\n        \
    \     ^\n                          ?? <#default value#>\n/tmp/tmp15ofyaoc.swift:8:14:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return l.max(by: max)\n             ^\n                         !\n\
    /tmp/tmp15ofyaoc.swift:8:22: error: cannot convert value of type '(Bool, Bool)\
    \ -> Bool' to expected argument type '(Int, Int) throws -> Bool'\n    return l.max(by:\
    \ max)\n                     ^\n/tmp/tmp15ofyaoc.swift:8:22: error: global function\
    \ 'max' requires that 'Bool' conform to 'Comparable'\n    return l.max(by: max)\n\
    \                     ^\nSwift.max:1:24: note: where 'T' = 'Bool'\n@inlinable\
    \ public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\treturn l.max()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpj1xr4kqp.swift:8:11: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        return l.max()\n            \
    \     ^\n/tmp/tmpj1xr4kqp.swift:8:11: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n        return l.max()\n           \
    \      ^\n                       ?? <#default value#>\n/tmp/tmpj1xr4kqp.swift:8:11:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        return l.max()\n                 ^\n                      !\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let n = l.count\n    var largest\
    \ = 0\n    for i in 0..<n {\n        if l[i] > largest {\n            largest\
    \ = l[i]\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5,\
    \ 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l[l.indices().maxElement()]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpgpt3gooe.swift:8:16: error: cannot call value of non-function type\
    \ 'Range<Array<Int>.Index>' (aka 'Range<Int>')\n    return l[l.indices().maxElement()]\n\
    \               ^      ~~\n                      \n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.reduce(0){ max($0,\
    \ $1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  return reduceMax(l, max)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpyoh_drz6.swift:8:10: error: cannot find 'reduceMax' in scope\n\
    \  return reduceMax(l, max)\n         ^~~~~~~~~\n/tmp/tmpyoh_drz6.swift:8:23:\
    \ error: generic parameter 'T' could not be inferred\n  return reduceMax(l, max)\n\
    \                      ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable\
    \ public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let maxIndex = l.count\n   \
    \ for i in 0 ..< maxIndex {\n        if l[i] > l[maxIndex] {\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5,\
    \ 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp_kxbco58.swift:11:13: error: cannot assign to value: 'maxIndex'\
    \ is a 'let' constant\n            maxIndex = i\n            ^~~~~~~~\n/tmp/tmp_kxbco58.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let maxIndex = l.count\n\
    \    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l == nil || len(l) == 0 {\n\
    \        return 0\n    }\n    if l[0] > l[1] { return l[0] }\n    if l[0] > l[2]\
    \ { return l[0] }\n    for _, b := range l[2:] {\n        if b > l[1] { break\
    \ }\n        if b > l[2] { break }\n    }\n    return l[1]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp03kl72rz.swift:13:10: error: expected 'in' after for-each pattern\n\
    \    for _, b := range l[2:] {\n         ^\n/tmp/tmp03kl72rz.swift:13:10: error:\
    \ expected Sequence expression for for-each loop\n    for _, b := range l[2:]\
    \ {\n         ^\n/tmp/tmp03kl72rz.swift:8:20: error: cannot find 'len' in scope\n\
    \    if l == nil || len(l) == 0 {\n                   ^~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.reduce(0, {$1>$2})\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpc_nk7is7.swift:8:24: error: contextual closure type '(Int, Int)\
    \ throws -> Int' expects 2 arguments, but 3 were used in closure body\n    return\
    \ l.reduce(0, {$1>$2})\n                       ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.isEmpty() {\n        return\
    \ -1\n    }\n\n    var largest = l[0]\n    for v in l {\n        if v > largest\
    \ {\n            largest = v\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpajubbf7u.swift:8:10: error: cannot call value of non-function type\
    \ 'Bool'\n    if l.isEmpty() {\n         ^      ~~\n                \n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l == nil {\n        return\
    \ -1\n    }\n    max := l[0]\n    for _,el in l.enumerated() {\n        if el\
    \ > max {\n            max = el\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpfr_gh10n.swift:11:8: error: consecutive statements on a line must\
    \ be separated by ';'\n    max := l[0]\n       ^\n       ;\n/tmp/tmpfr_gh10n.swift:11:9:\
    \ error: expected expression\n    max := l[0]\n        ^\n/tmp/tmpfr_gh10n.swift:12:10:\
    \ error: expected 'in' after for-each pattern\n    for _,el in l.enumerated()\
    \ {\n         ^\n/tmp/tmpfr_gh10n.swift:12:10: error: expected Sequence expression\
    \ for for-each loop\n    for _,el in l.enumerated() {\n         ^\n/tmp/tmpfr_gh10n.swift:8:10:\
    \ warning: comparing non-optional value of type '[Int]' to 'nil' always returns\
    \ false\n    if l == nil {\n       ~ ^  ~~~\n/tmp/tmpfr_gh10n.swift:11:5: error:\
    \ generic parameter 'T' could not be inferred\n    max := l[0]\n    ^\nSwift.max:1:24:\
    \ note: in call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y:\
    \ T) -> T where T : Comparable\n                       ^\n/tmp/tmpfr_gh10n.swift:17:12:\
    \ error: generic parameter 'T' could not be inferred\n    return max\n       \
    \    ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable public func\
    \ max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n\
    /tmp/tmpfr_gh10n.swift:17:12: error: no 'max' candidates produce the expected\
    \ contextual result type 'Int'\n    return max\n           ^\nSwift.max:1:24:\
    \ note: found candidate with type '(_, _) -> _'\n@inlinable public func max<T>(_\
    \ x: T, _ y: T) -> T where T : Comparable\n                       ^\nSwift.max:1:24:\
    \ note: found candidate with type '(_, _, _, _...) -> _'\n@inlinable public func\
    \ max<T>(_ x: T, _ y: T, _ z: T, _ rest: T...) -> T where T : Comparable\n   \
    \                    ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.sorted(by: { $0 > $1\
    \ }).last!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2,\
    \ 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)"
  status: Exception
  stderr: 'tmpz0f_htqg/tmpz0f_htqg.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4def691c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4def388b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4def388988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4def3877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz0f_htqg                        0x000055d43761249f <unavailable> + 5279

    5    libc.so.6                          0x00002b4def87d460 __libc_start_main +
    245

    6    tmpz0f_htqg                        0x000055d437612109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l.count())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp37oi07pk.swift:8:18: error: cannot call value of non-function type\
    \ 'Int'\n    return max(l.count())\n                 ^    ~~\n               \
    \       \n/tmp/tmp37oi07pk.swift:8:25: error: missing argument for parameter #2\
    \ in call\n    return max(l.count())\n                        ^\n            \
    \            , <#Int#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable\
    \ public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  return l.max()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpom367py5.swift:8:12: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n  return l.max()\n           ^\n/tmp/tmpom367py5.swift:8:12:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n  return l.max()\n           ^\n                 ?? <#default value#>\n\
    /tmp/tmpom367py5.swift:8:12: note: force-unwrap using '!' to abort execution if\
    \ the optional value contains 'nil'\n  return l.max()\n           ^\n        \
    \        !\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  var maxValue = l[0]\n  for val\
    \ in l {\n    if val > maxValue {\n      maxValue = val\n    }\n  }\n  return\
    \ maxValue\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2,\
    \ 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpw4ai5ijf.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmpw4ai5ijf.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmpw4ai5ijf.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max_element_impl(l)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpogylmy2w.swift:8:12: error: cannot find 'max_element_impl' in scope\n\
    \    return max_element_impl(l)\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\tl.sort()\n\treturn l[0]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp4a5167z9.swift:8:4: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n        l.sort()\n        ~ ^\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x < max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'tmpsbgtnmvi/tmpsbgtnmvi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6de63e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6de60d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6de60d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6de60d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsbgtnmvi                        0x00005639244394bf <unavailable> + 5311

    5    libc.so.6                          0x00002b6de65cd460 __libc_start_main +
    245

    6    tmpsbgtnmvi                        0x0000563924439129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978494
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count > 0 {\n        return\
    \ l[0]\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: Exception
  stderr: 'tmpmr20uwsh/tmpmr20uwsh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9276ce5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92769dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92769dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92769db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmr20uwsh                        0x00005604b0ece3af <unavailable> + 5039

    5    libc.so.6                          0x00002b9276ed1460 __libc_start_main +
    245

    6    tmpmr20uwsh                        0x00005604b0ece019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let n = l.count\n    guard n\
    \ > 0 else { return 0 }\n    let largest = l[0]\n    for i in 1..<n {\n      \
    \  if l[i] > largest {\n            largest = l[i]\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2,\
    \ 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)"
  status: SyntaxError
  stderr: "/tmp/tmpwhgrctb0.swift:13:13: error: cannot assign to value: 'largest'\
    \ is a 'let' constant\n            largest = l[i]\n            ^~~~~~~\n/tmp/tmpwhgrctb0.swift:10:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let largest = l[0]\n   \
    \ ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\tif l == nil || l.Length < 1 {\n\
    \t\treturn 0\n\t}\n\n\treturn l[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp7zkyji0l.swift:8:19: error: value of type '[Int]' has no member\
    \ 'Length'\n        if l == nil || l.Length < 1 {\n                       ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.reduce(0)(&max)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp0ubtc6z3.swift:8:25: error: generic parameter 'T' could not be\
    \ inferred\n    return l.reduce(0)(&max)\n                        ^\nSwift.max:1:24:\
    \ note: in call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y:\
    \ T) -> T where T : Comparable\n                       ^\n/tmp/tmp0ubtc6z3.swift:8:21:\
    \ error: missing argument for parameter 'into' in call\n    return l.reduce(0)(&max)\n\
    \                    ^\n                    into: <#_#>, \nSwift.Sequence:3:28:\
    \ note: 'reduce(into:_:)' declared here\n    @inlinable public func reduce<Result>(into\
    \ initialResult: __owned Result, _ updateAccumulatingResult: (_ partialResult:\
    \ inout Result, Self.Element) throws -> ()) rethrows -> Result\n             \
    \              ^\n/tmp/tmp0ubtc6z3.swift:8:24: error: cannot pass immutable value\
    \ of type '(_, _) -> _' as inout argument\n    return l.reduce(0)(&max)\n    \
    \                   ^~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\tif l == nil {\n\t\treturn 0\n\t\
    }\n\n\tvar maxNum Int = 0\n\tvar i Int = 0\n\t_ = i\n\tfor ; i < len(l); i++ {\n\
    \t\tif l[i] > maxNum {\n\t\t\tmaxNum = l[i]\n\t\t}\n\t}\n\treturn maxNum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpaxkz6vh7.swift:12:13: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n        var maxNum Int\
    \ = 0\n                   ^\n/tmp/tmpaxkz6vh7.swift:12:13: note: join the identifiers\
    \ together\n        var maxNum Int = 0\n            ~~~~~~~^~~\n            maxNumInt\n\
    /tmp/tmpaxkz6vh7.swift:13:8: error: found an unexpected second identifier in variable\
    \ declaration; is there an accidental break?\n        var i Int = 0\n        \
    \      ^\n/tmp/tmpaxkz6vh7.swift:13:8: note: join the identifiers together\n \
    \       var i Int = 0\n            ~~^~~\n            iInt\n/tmp/tmpaxkz6vh7.swift:15:2:\
    \ error: C-style for statement has been removed in Swift 3\n        for ; i <\
    \ len(l); i++ {\n        ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmpaxkz6vh7.swift:8:7: warning:\
    \ comparing non-optional value of type '[Int]' to 'nil' always returns false\n\
    \        if l == nil {\n           ~ ^  ~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = Int64.min\n    for\
    \ element in l {\n        if element > max {\n            max = element\n    \
    \    }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpq2n1ttfc.swift:11:19: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n            max = element\n                  ^~~~~~~\n    \
    \              Int64( )\n/tmp/tmpq2n1ttfc.swift:14:12: error: cannot convert return\
    \ expression of type 'Int64' to return type 'Int'\n    return max\n          \
    \ ^~~\n           Int( )\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\tvar max : Int?\n\n\tfor i, v :=\
    \ range l {\n\t\tif i == 0 {\n\t\t\tmax = v\n\t\t\tcontinue\n\t\t}\n\n\t\tif v\
    \ > max {\n\t\t\tmax = v\n\t\t}\n\t}\n\n\tif max != nil {\n\t\treturn max!\n\t\
    }\n\n\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp98nck7ns.swift:10:7: error: expected 'in' after for-each pattern\n\
    \        for i, v := range l {\n             ^\n/tmp/tmp98nck7ns.swift:10:7: error:\
    \ expected Sequence expression for for-each loop\n        for i, v := range l\
    \ {\n             ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max() ?? Int.max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpw4ai5ijf.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmpw4ai5ijf.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmpw4ai5ijf.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var largest = l[0]\n    for\
    \ el in l {\n        if el > largest {\n            largest = el\n        }\n\
    \    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    var max\
    \ = l[0]\n\n    for element in l {\n        if element > max {\n            max\
    \ = element\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5,\
    \ 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpoj6yo3ig.swift:9:9: error: invalid redeclaration of 'max'\n   \
    \ var max = l[0]\n        ^\n/tmp/tmpoj6yo3ig.swift:8:9: note: 'max' previously\
    \ declared here\n    var max: Int = 0\n        ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max_element_impl(l, 0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmphx2uprd5.swift:8:12: error: cannot find 'max_element_impl' in scope\n\
    \    return max_element_impl(l, 0)\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max_elementImpl(l)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmps_si85l8.swift:8:12: error: cannot find 'max_elementImpl' in scope\n\
    \    return max_elementImpl(l)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if max < x {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978495
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for i : Int\
    \ in l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  return l[l.count - 1]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'tmpc2f5beuy/tmpc2f5beuy.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab717317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab71700eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab71700e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab71700d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc2f5beuy                        0x000056015bd5c4c0 <unavailable> + 5312

    5    libc.so.6                          0x00002ab717503460 __libc_start_main +
    245

    6    tmpc2f5beuy                        0x000056015bd5c019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l == nil { return 0 }\n \
    \   \n    l.sort()\n    \n    if l.isEmpty() {\n        return 0\n    }\n    \n\
    \    return l[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpxza3ejrl.swift:8:10: warning: comparing non-optional value of type\
    \ '[Int]' to 'nil' always returns false\n    if l == nil { return 0 }\n      \
    \ ~ ^  ~~~\n/tmp/tmpxza3ejrl.swift:10:7: error: cannot use mutating member on\
    \ immutable value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpxza3ejrl.swift:12:10:\
    \ error: cannot call value of non-function type 'Bool'\n    if l.isEmpty() {\n\
    \         ^      ~~\n                \n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l == nil || l.count == 0\
    \ {\n        return 0\n    }\n    var max = l[0]\n    for v in l {\n        if\
    \ v > max {\n            max = v\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978495
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ l.indices {\n        if l[i] > max {\n            max = l[i]\n        }\n  \
    \  }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpw4ai5ijf.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmpw4ai5ijf.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmpw4ai5ijf.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    var maxIndex\
    \ = 0\n    for i in l.indices {\n        let v = l[i]\n        if v > max {\n\
    \            max = v\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'tmpbvcxt8i7/tmpbvcxt8i7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f4eb4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f4e841b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f4e841988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f4e8407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbvcxt8i7                        0x0000559bf12134df <unavailable> + 5343

    5    libc.so.6                          0x00002b1f4ed36460 __libc_start_main +
    245

    6    tmpbvcxt8i7                        0x0000559bf1213149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l.startIndex, l.endIndex)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'tmp8fzw06m2/tmp8fzw06m2.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afae9026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afae8d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afae8d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afae8d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8fzw06m2                        0x000055ea955ea560 <unavailable> + 5472

    5    libc.so.6                          0x00002afae9212460 __libc_start_main +
    245

    6    tmp8fzw06m2                        0x000055ea955ea0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    l.sort()\n    return l[l.count\
    \ - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpqoe6vxle.swift:8:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let max = l[0]\n    for i in\
    \ l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpsjxj442_.swift:11:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = i\n            ^~~\n/tmp/tmpsjxj442_.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = l[0]\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l.min()\n    for el\
    \ in l {\n        if el > max {\n            max = el\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpmkglkjlk.swift:10:17: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if el > max {\n             \
    \   ^\n/tmp/tmpmkglkjlk.swift:10:17: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n        if el > max {\n            \
    \    ^\n                    ?? <#default value#>\n/tmp/tmpmkglkjlk.swift:10:17:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if el > max {\n                ^\n                   !\n/tmp/tmpmkglkjlk.swift:14:12:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \    return max\n           ^\n/tmp/tmpmkglkjlk.swift:14:12: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n    return\
    \ max\n           ^\n               ?? <#default value#>\n/tmp/tmpmkglkjlk.swift:14:12:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return max\n           ^\n              !\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmptf9iihd5.swift:8:17: error: missing argument for parameter #2 in\
    \ call\n    return max(l)\n                ^\n                , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmptf9iihd5.swift:8:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return max(l)\n               ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l == nil {\n        return\
    \ -1\n    }\n    var result = Int64(0)\n    var max = Int64(0)\n    for _, v :=\
    \ range l {\n        if v > max {\n            max = v\n            result = Int64(0)\n\
    \        }\n        result = max(result, v)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp0fh83zay.swift:13:10: error: expected 'in' after for-each pattern\n\
    \    for _, v := range l {\n         ^\n/tmp/tmp0fh83zay.swift:13:10: error: expected\
    \ Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n\
    /tmp/tmp0fh83zay.swift:8:10: warning: comparing non-optional value of type '[Int]'\
    \ to 'nil' always returns false\n    if l == nil {\n       ~ ^  ~~~\n/tmp/tmp0fh83zay.swift:20:12:\
    \ error: cannot convert return expression of type 'Int64' to return type 'Int'\n\
    \    return result\n           ^~~~~~\n           Int(  )\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let count = l.count\n    if\
    \ count == 0 {\n        return 0\n    }\n    if count < 1 {\n        return l[0]\n\
    \    }\n    if count < 2 {\n        return l[0]\n    }\n    if count == 2 {\n\
    \        if l[0] < l[1] {\n            return l[0]\n        }\n        return\
    \ l[1]\n    }\n    var max = l[0]\n    for i in 0..<count-1 {\n        if l[i]\
    \ > max {\n            max = l[i]\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'tmp_bkarcmc/tmp_bkarcmc.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3725f96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3725c8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3725c8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3725c8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_bkarcmc                        0x00005635bf94953f <unavailable> + 5439

    5    libc.so.6                          0x00002b3726182460 __libc_start_main +
    245

    6    tmp_bkarcmc                        0x00005635bf9491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max_element { $0 }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpdllcfyr6.swift:8:14: error: value of type '[Int]' has no member\
    \ 'max_element'\n    return l.max_element { $0 }\n           ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    l.sort()\n    return l[l.endIndex\
    \ - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpqbfnfwft.swift:8:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1 ..< l.count {\n        if max < l[i] {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978495
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var maxVal = -Int.max\n    for\
    \ i in l {\n        if i > maxVal {\n            maxVal = i\n        }\n    }\n\
    \    return maxVal\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  var max = Double(Int.max) // Initialized\
    \ to -Int, since Int < Double\n  var maxIndex = 0\n  for idx in 0..<l.count {\n\
    \    if l[idx] > max {\n      max = l[idx]\n      maxIndex = idx\n    }\n  }\n\
    \  return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp9261ou2w.swift:11:15: error: binary operator '>' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    if l[idx] > max {\n       ~~~~~~\
    \ ^ ~~~\n/tmp/tmp9261ou2w.swift:11:15: note: overloads for '>' exist with these\
    \ partially matching parameter lists: (Int, Int)\n    if l[idx] > max {\n    \
    \          ^\n/tmp/tmp9261ou2w.swift:12:14: error: cannot assign value of type\
    \ 'Int' to type 'Double'\n      max = l[idx]\n            ~^~~~~\n           \
    \ Double( )\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let max = l.max()\n    if max\
    \ < l.first() {\n        return l.first()\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpg05a4uqw.swift:9:8: error: value of optional type 'Int?' must be\
    \ unwrapped to a value of type 'Int'\n    if max < l.first() {\n       ^\n/tmp/tmpg05a4uqw.swift:9:8:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    if max < l.first() {\n       ^\n           ?? <#default value#>\n\
    /tmp/tmpg05a4uqw.swift:9:8: note: force-unwrap using '!' to abort execution if\
    \ the optional value contains 'nil'\n    if max < l.first() {\n       ^\n    \
    \      !\n/tmp/tmpg05a4uqw.swift:9:16: error: cannot call value of non-function\
    \ type 'Int?'\n    if max < l.first() {\n               ^    ~~\n            \
    \        \n/tmp/tmpg05a4uqw.swift:10:18: error: cannot call value of non-function\
    \ type 'Int?'\n        return l.first()\n                 ^    ~~\n          \
    \            \n/tmp/tmpg05a4uqw.swift:12:12: error: value of optional type 'Int?'\
    \ must be unwrapped to a value of type 'Int'\n    return max\n           ^\n/tmp/tmpg05a4uqw.swift:12:12:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return max\n           ^\n               ?? <#default value#>\n/tmp/tmpg05a4uqw.swift:12:12:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return max\n           ^\n              !\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmptf9iihd5.swift:8:17: error: missing argument for parameter #2 in\
    \ call\n    return max(l)\n                ^\n                , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmptf9iihd5.swift:8:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return max(l)\n               ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var maxVal : Int = 0\n\n   \
    \ for x in l {\n        if x > maxVal {\n            maxVal = x\n        }\n \
    \   }\n\n    return maxVal\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978495
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for element\
    \ in l {\n        if element > max {\n            max = element\n        }\n \
    \   }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978495
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1 ..< l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\tvar max = l[0]\n\tfor i := 1;\
    \ i < len(l); i++ {\n\t\tif l[i] > max {\n\t\t\tmax = l[i]\n\t\t}\n\t}\n\treturn\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpnq2o43g7.swift:9:9: error: expected type\n        for i := 1; i\
    \ < len(l); i++ {\n               ^\n                <#type#>\n/tmp/tmpnq2o43g7.swift:9:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 1; i < len(l);\
    \ i++ {\n               ^\n/tmp/tmpnq2o43g7.swift:9:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 1; i < len(l); i++ {\n      \
    \         ^\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let len = l.count\n    if len\
    \ == 0 {\n        return 0\n    }\n    if len == 1 {\n        return l[0]\n  \
    \  }\n\n    var max = 0\n    var maxIndex = 0\n    for i in 0..<len {\n      \
    \  if l[i] > max {\n            max = l[i]\n            maxIndex = i\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: Exception
  stderr: 'tmp70ucmsmw/tmp70ucmsmw.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b16836c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1652db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1652d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1652c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70ucmsmw                        0x000055d55903153f <unavailable> + 5439

    5    libc.so.6                          0x00002b0b16a22460 __libc_start_main +
    245

    6    tmp70ucmsmw                        0x000055d5590311a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\tif l == nil { return }\n\n\tmax\
    \ := l[0]\n\n\tfor _, e := range l {\n\t\tif e > max {\n\t\t\tmax = e\n\t\t}\n\
    \t}\n\n\treturn max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpjfdghzdu.swift:10:5: error: consecutive statements on a line must\
    \ be separated by ';'\n        max := l[0]\n           ^\n           ;\n/tmp/tmpjfdghzdu.swift:10:6:\
    \ error: expected expression\n        max := l[0]\n            ^\n/tmp/tmpjfdghzdu.swift:12:7:\
    \ error: expected 'in' after for-each pattern\n        for _, e := range l {\n\
    \             ^\n/tmp/tmpjfdghzdu.swift:12:7: error: expected Sequence expression\
    \ for for-each loop\n        for _, e := range l {\n             ^\n/tmp/tmpjfdghzdu.swift:8:7:\
    \ warning: comparing non-optional value of type '[Int]' to 'nil' always returns\
    \ false\n        if l == nil { return }\n           ~ ^  ~~~\n/tmp/tmpjfdghzdu.swift:8:16:\
    \ error: non-void function should return a value\n        if l == nil { return\
    \ }\n                      ^\n/tmp/tmpjfdghzdu.swift:10:2: error: generic parameter\
    \ 'T' could not be inferred\n        max := l[0]\n        ^\nSwift.max:1:24: note:\
    \ in call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmpjfdghzdu.swift:18:9:\
    \ error: generic parameter 'T' could not be inferred\n        return max\n   \
    \            ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpjfdghzdu.swift:18:9: error: no 'max' candidates produce the expected\
    \ contextual result type 'Int'\n        return max\n               ^\nSwift.max:1:24:\
    \ note: found candidate with type '(_, _) -> _'\n@inlinable public func max<T>(_\
    \ x: T, _ y: T) -> T where T : Comparable\n                       ^\nSwift.max:1:24:\
    \ note: found candidate with type '(_, _, _, _...) -> _'\n@inlinable public func\
    \ max<T>(_ x: T, _ y: T, _ z: T, _ rest: T...) -> T where T : Comparable\n   \
    \                    ^\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmptf9iihd5.swift:8:17: error: missing argument for parameter #2 in\
    \ call\n    return max(l)\n                ^\n                , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmptf9iihd5.swift:8:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return max(l)\n               ^\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.maxElement()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpsyh5vqe6.swift:8:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return l.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var result = Int64(0)\n    for\
    \ i in l {\n        if result < i {\n            result = i\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmptiq7j3ym.swift:11:22: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n            result = i\n                     ^\n          \
    \           Int64( )\n/tmp/tmptiq7j3ym.swift:14:12: error: cannot convert return\
    \ expression of type 'Int64' to return type 'Int'\n    return result\n       \
    \    ^~~~~~\n           Int(  )\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let length = l.count\n    let\
    \ res = Int64(0)\n    for i in 0..<length {\n        if l[i] > res {\n       \
    \     res = l[i]\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpj42tzyzr.swift:12:13: error: cannot assign to value: 'res' is a\
    \ 'let' constant\n            res = l[i]\n            ^~~\n/tmp/tmpj42tzyzr.swift:9:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let res = Int64(0)\n   \
    \ ^~~\n    var\n/tmp/tmpj42tzyzr.swift:12:20: error: cannot assign value of type\
    \ 'Int' to type 'Int64'\n            res = l[i]\n                  ~^~~\n    \
    \              Int64( )\n/tmp/tmpj42tzyzr.swift:15:12: error: cannot convert return\
    \ expression of type 'Int64' to return type 'Int'\n    return res\n          \
    \ ^~~\n           Int( )\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\tlet max: Int = 0\n\tfor element\
    \ in l {\n\t\tif element > max {\n\t\t\tmax = element\n\t\t}\n\t}\n\treturn max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpc_bnlbb4.swift:11:4: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n                        max = element\n                    \
    \    ^~~\n/tmp/tmpc_bnlbb4.swift:8:2: note: change 'let' to 'var' to make it mutable\n\
    \        let max: Int = 0\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    l.sort()\n    return l[l.count-1]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpctmu77c4.swift:8:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n\tvar max : Int = 0\n\tfor _, ele\
    \ : Int in\n\t\tl.sort() { max <= $0 }\n\treturn max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp96_78ueq.swift:9:7: error: expected 'in' after for-each pattern\n\
    \        for _, ele : Int in\n             ^\n/tmp/tmp96_78ueq.swift:9:7: error:\
    \ expected Sequence expression for for-each loop\n        for _, ele : Int in\n\
    \             ^\n/tmp/tmp96_78ueq.swift:10:21: error: anonymous closure argument\
    \ not contained in a closure\n                l.sort() { max <= $0 }\n       \
    \                           ^\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let max = l.max()\n    return\
    \ max == l.last ? 0 : max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpq_uwlpfc.swift:9:26: error: cannot convert return expression of\
    \ type 'Int?' to return type 'Int'\n    return max == l.last ? 0 : max\n     \
    \      ~~~~~~~~~~~~~~^~~~~~~~~\n                                  !\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for num in\
    \ l {\n        if num > max {\n            max = num\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978495
