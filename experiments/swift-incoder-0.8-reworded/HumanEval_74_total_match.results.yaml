language: swift
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1 == lst2 {\n        return\
    \ lst1\n    }\n    if lst1.count == 0 || lst2.count == 0 {\n        return lst1\n\
    \    }\n    if lst1.count < lst2.count {\n        return lst1\n    }\n    if lst1.count\
    \ > lst2.count {\n        return lst2\n    }\n    \n    var newArr = lst1\n  \
    \  \n    for index in 0..<lst1.count {\n        if lst2[index].count < lst1[index].count\
    \ {\n            newArr = append(newArr, lst2[index])\n        }\n    }\n    \n\
    \    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpf6y9gr2j.swift:34:22: error: cannot find 'append' in scope\n  \
    \          newArr = append(newArr, lst2[index])\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    guard len(lst1) >= len(lst2) else\
    \ { return lst1 }\n    var result = lst1\n    for idx in 0..<len(lst1) {\n   \
    \     if lst1[idx] > lst2[idx] {\n            result.removeSubrange(idx, 1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpzwa9co0s.swift:17:11: error: cannot find 'len' in scope\n    guard\
    \ len(lst1) >= len(lst2) else { return lst1 }\n          ^~~\n/tmp/tmpzwa9co0s.swift:17:24:\
    \ error: cannot find 'len' in scope\n    guard len(lst1) >= len(lst2) else { return\
    \ lst1 }\n                       ^~~\n/tmp/tmpzwa9co0s.swift:19:20: error: cannot\
    \ find 'len' in scope\n    for idx in 0..<len(lst1) {\n                   ^~~\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count < lst2.count {\n\
    \        return lst1\n    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpry4xinah/tmpry4xinah.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5d9c7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5d9976b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5d9976988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5d99757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpry4xinah                        0x0000557af2ca625d <unavailable> + 8797

    5    libc.so.6                          0x00002ba5d9e6b460 __libc_start_main +
    245

    6    tmpry4xinah                        0x0000557af2ca5129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if !is_same_length(lst1, lst2)\
    \ {\n        return lst1\n    }\n    if !is_same_length(lst2, lst1) {\n      \
    \  return lst2\n    }\n    var result = [String]()\n    \n    for i in 0..<lst1.count\
    \ {\n        if lst1[i] < lst2[i] {\n            result.append(lst1[i])\n    \
    \    }\n    }\n    for i in 0..<lst2.count {\n        if lst2[i] < lst1[i] {\n\
    \            result.append(lst2[i])\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpl9zseopq.swift:17:9: error: cannot find 'is_same_length' in scope\n\
    \    if !is_same_length(lst1, lst2) {\n        ^~~~~~~~~~~~~~\n/tmp/tmpl9zseopq.swift:20:9:\
    \ error: cannot find 'is_same_length' in scope\n    if !is_same_length(lst2, lst1)\
    \ {\n        ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    var lst4 =\
    \ lst2\n\n    if lst1.count == lst2.count {\n        return lst1\n    }\n\n  \
    \  for i in 0..<(lst2.count) {\n        lst3.removeFirst()\n        lst4.removeFirst()\n\
    \n        if lst3.count == lst4.count {\n            return lst3\n        }\n\
    \    }\n\n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmptk_koaw5/tmptk_koaw5.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfd0500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfd01f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfd01f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfd01f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptk_koaw5                        0x000055e4bea5c96a <unavailable> + 6506

    5    libc.so.6                          0x00002acfd06ec460 __libc_start_main +
    245

    6    tmptk_koaw5                        0x000055e4bea5c349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    if lst1.count\
    \ > lst2.count {\n        let tmp =  lst1\n        result = lst2\n        lst1\
    \ = tmp\n    }\n\n    for val in lst1 {\n        for val2 in lst2 {\n        \
    \    if val == val2 {\n                result.removeAll(where: { (s) in\n    \
    \                return s == val\n                })\n            }\n        }\n\
    \    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpz3mo2rg_.swift:21:9: error: cannot assign to value: 'lst1' is a\
    \ 'let' constant\n        lst1 = tmp\n        ^~~~\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1 == lst2 {\n        return\
    \ lst1\n    }\n    if lst1.count == 0 || lst2.count == 0 {\n        return lst1\n\
    \    }\n\n    var min_size = min(lst1.count, lst2.count)\n    var total_chars\
    \ = 0\n    for index in 0..min_size {\n        total_chars = total_chars + lst1[index].characters.count\
    \ + lst2[index].characters.count\n    }\n\n    return lst1\n        .prefix(min_size)\n\
    \        .reduce(total_chars) { (array1, array2) -> [String] in\n            if\
    \ array1.count == min_size {\n                return array1\n            } else\
    \ if array2.count == min_size {\n                return array2\n            }\n\
    \            var total_chars = min(array1.count, array2.count)\n            for\
    \ index in 0..total_chars {\n                if array1[index].characters.count\
    \ < array2[index].characters.count {\n                    return array1\n    \
    \            } else if array1[index].characters.count > array2[index].characters.count\
    \ {\n                    return array2\n                }\n            }\n   \
    \         return array1\n        }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpjtdhv5r9.swift:26:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for index in 0..min_size {\n                  ^~\n\
    \                  ...\n/tmp/tmpjtdhv5r9.swift:39:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for index in 0..total_chars\
    \ {\n                          ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\tif lst1 == lst2 {\n\t\treturn lst1\n\
    \t}\n\n\tif lst1.count < lst2.count {\n\t\treturn lst2\n\t}\n\n\treturn lst1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpt0evs9km/tmpt0evs9km.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b846f33ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b846f031b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b846f031988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b846f0307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0evs9km                        0x00005646d2f8d74a <unavailable> + 5962

    5    libc.so.6                          0x00002b846f526460 __libc_start_main +
    245

    6    tmpt0evs9km                        0x00005646d2f8d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        var chars1 = lst1\n        var chars2 = lst2\n    } else {\n        chars1\
    \ = lst1.sorted()\n        chars2 = lst2.sorted()\n    }\n    var matchedChars1\
    \ = 0\n    var matchedChars2 = 0\n    var matchedChars1Len = 0\n    var matchedChars2Len\
    \ = 0\n    var matchingChars1 = 0\n    var matchingChars2 = 0\n    var matchingChars1Len\
    \ = 0\n    var matchingChars2Len = 0\n    var matchedCharsLen = 0\n    var matchedCharsMaxLen\
    \ = 0\n    var totalCharsInMatch = 0\n    var totalCharsInMatch1 = 0\n    var\
    \ totalCharsInMatch2 = 0\n    for char in chars1 {\n        matchedChars1 += char.count\n\
    \        matchedChars1Len += char.count\n        if char.count == matchedChars1Len\
    \ {\n            totalCharsInMatch1 += char.count\n        }\n        if char.count\
    \ > matchedChars1Len {\n            matchedCharsMaxLen = matchedChars1Len\n  \
    \      }\n        if char.count == matchedCharsLen {\n            totalCharsInMatch2\
    \ += char.count\n        }\n        if char.count > matchedCharsLen {\n      \
    \      matchedCharsMaxLen = matchedCharsLen\n        }\n    }\n    for char in\
    \ chars2 {\n        matchedChars2 += char.count\n        matchedChars2Len += char.count\n\
    \        if char.count == matchedChars2Len {\n            totalCharsInMatch2 +=\
    \ char.count\n        }\n        if char.count > matchedChars2Len {\n        \
    \    matchedCharsMaxLen = matchedChars2Len\n        }\n        if char.count ==\
    \ matchedCharsLen {\n            totalCharsInMatch1 += char.count\n        }\n\
    \        if char.count > matchedCharsLen {\n            matchedCharsMaxLen = matchedCharsLen\n\
    \        }\n    }\n    if totalCharsInMatch1 == matchedChars1 {\n        return\
    \ chars1\n    }\n    if totalCharsInMatch2 == matchedChars2 {\n        return\
    \ chars2\n    }\n    if totalCharsInMatch1 == matchedChars2 {\n        return\
    \ chars2\n    }\n    if totalCharsInMatch2 == matchedChars1 {\n        return\
    \ chars1\n    }\n    if totalCharsInMatch1 == matchedCharsMaxLen {\n        return\
    \ chars1 // no difference in string length\n    }\n    if totalCharsInMatch2 ==\
    \ matchedCharsMaxLen {\n        return chars2 // no difference in string length\n\
    \    }\n\n    if matchedChars1 == matchedCharsMaxLen {\n        \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpmrqd4zg_.swift:113:76: error: expected '}' at end of brace statement\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])\n\
    \                                                                           ^\n\
    /tmp/tmpmrqd4zg_.swift:16:62: note: to match this opening '{'\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n                                  \
    \                           ^\n/tmp/tmpmrqd4zg_.swift:21:9: error: cannot find\
    \ 'chars1' in scope\n        chars1 = lst1.sorted()\n        ^~~~~~\n/tmp/tmpmrqd4zg_.swift:22:9:\
    \ error: cannot find 'chars2' in scope\n        chars2 = lst2.sorted()\n     \
    \   ^~~~~~\n/tmp/tmpmrqd4zg_.swift:37:17: error: cannot find 'chars1' in scope\n\
    \    for char in chars1 {\n                ^~~~~~\n/tmp/tmpmrqd4zg_.swift:53:17:\
    \ error: cannot find 'chars2' in scope\n    for char in chars2 {\n           \
    \     ^~~~~~\n/tmp/tmpmrqd4zg_.swift:70:16: error: cannot find 'chars1' in scope\n\
    \        return chars1\n               ^~~~~~\n/tmp/tmpmrqd4zg_.swift:73:16: error:\
    \ cannot find 'chars2' in scope\n        return chars2\n               ^~~~~~\n\
    /tmp/tmpmrqd4zg_.swift:76:16: error: cannot find 'chars2' in scope\n        return\
    \ chars2\n               ^~~~~~\n/tmp/tmpmrqd4zg_.swift:79:16: error: cannot find\
    \ 'chars1' in scope\n        return chars1\n               ^~~~~~\n/tmp/tmpmrqd4zg_.swift:82:16:\
    \ error: cannot find 'chars1' in scope\n        return chars1 // no difference\
    \ in string length\n               ^~~~~~\n/tmp/tmpmrqd4zg_.swift:85:16: error:\
    \ cannot find 'chars2' in scope\n        return chars2 // no difference in string\
    \ length\n               ^~~~~~\n/tmp/tmpmrqd4zg_.swift:93:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    var\
    \ index = 0\n    for x in lst1 {\n        if lst2.contains(x) {\n            if\
    \ index > 0 {\n                result.append(x)\n            }\n        } else\
    \ {\n            for y in lst2 {\n                if x < y {\n               \
    \     result.append(x)\n                    break\n                }\n       \
    \     }\n        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmptv2f2ptt/tmptv2f2ptt.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e7d2b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e7cfaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e7cfaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e7cfa97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptv2f2ptt                        0x0000556da238d9ca <unavailable> + 6602

    5    libc.so.6                          0x00002b0e7d49f460 __libc_start_main +
    245

    6    tmptv2f2ptt                        0x0000556da238d3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        if lst1.count == 0 {\n            return lst1\n        }\n        return\
    \ lst2\n    }\n    var ans: [String] = []\n    for _ in 0..<min(lst1.count, lst2.count)\
    \ {\n        ans.append(\"\")\n    }\n    for i : Int in 0..<lst1.count {\n  \
    \      for j : Int in 0..<min(lst1.count, lst2.count) {\n            if lst1[i]\
    \ < lst2[j] {\n                ans[j] += lst1[i]\n                break\n    \
    \        }\n            ans[j] += lst2[j]\n        }\n    }\n    return ans\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp5nedas51/tmp5nedas51.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98b58aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98b55a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98b55a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98b55a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5nedas51                        0x000055dbe493bdef <unavailable> + 7663

    5    libc.so.6                          0x00002b98b5a96460 __libc_start_main +
    245

    6    tmp5nedas51                        0x000055dbe493b4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.length == 0 || lst2.length\
    \ == 0 {\n        return []\n    }\n\n    if lst1.length < lst2.length {\n   \
    \     // lst2 has more strings, so return lst1.\n        return lst1\n    }\n\n\
    \    // lst1 has more strings, so return lst2\n    return lst2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpmvq10pxh.swift:17:13: error: value of type '[String]' has no member\
    \ 'length'\n    if lst1.length == 0 || lst2.length == 0 {\n       ~~~~ ^~~~~~\n\
    /tmp/tmpmvq10pxh.swift:17:33: error: value of type '[String]' has no member 'length'\n\
    \    if lst1.length == 0 || lst2.length == 0 {\n                           ~~~~\
    \ ^~~~~~\n/tmp/tmpmvq10pxh.swift:21:13: error: value of type '[String]' has no\
    \ member 'length'\n    if lst1.length < lst2.length {\n       ~~~~ ^~~~~~\n/tmp/tmpmvq10pxh.swift:21:27:\
    \ error: value of type '[String]' has no member 'length'\n    if lst1.length <\
    \ lst2.length {\n                     ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var res: [String] = []\n    for\
    \ aString in lst1 {\n        for aString2 in lst2 {\n            if aString <\
    \ aString2 {\n                break\n            }\n        }\n        if aString\
    \ < 0 {\n            return res\n        }\n        res.append(aString)\n    }\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp44u7rjmy.swift:24:20: error: binary operator '<' cannot be applied\
    \ to operands of type 'String' and 'Int'\n        if aString < 0 {\n         \
    \  ~~~~~~~ ^ ~\n/tmp/tmp44u7rjmy.swift:24:20: note: overloads for '<' exist with\
    \ these partially matching parameter lists: (Int, Int), (String, String)\n   \
    \     if aString < 0 {\n                   ^\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    \n    var total = 0\n    \n   \
    \ for item1 in lst1 {\n        for item2 in lst2 {\n            \n           \
    \ if item1 == item2 {\n                total++\n            }\n        }\n   \
    \ }\n    \n    if total == 0 {\n        return lst1\n    }\n    \n    return lst1[0\
    \ ..< total]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpz_3s14rn.swift:24:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                total++\n                     ^~\n/tmp/tmpz_3s14rn.swift:33:16:\
    \ error: cannot convert return expression of type 'ArraySlice<String>' to return\
    \ type '[String]'\n    return lst1[0 ..< total]\n           ~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // write your code here\n    var\
    \ total_str = [String]()\n    for str1 in lst1 {\n        for str2 in lst2 {\n\
    \            if str1.characters.count < str2.characters.count {\n            \
    \    total_str.append(str1)\n                break\n            } else if str2.characters.count\
    \ < str1.characters.count {\n                total_str.append(str2)\n        \
    \        break\n            } else {\n                total_str.append(str1)\n\
    \                total_str.append(str2)\n                break\n            }\n\
    \        }\n    }\n    return total_str\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp4dn1w_fz.swift:21:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp4dn1w_fz.swift:21:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp4dn1w_fz.swift:24:28: error: 'characters'\
    \ is unavailable: Please use String directly\n            } else if str2.characters.count\
    \ < str1.characters.count {\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp4dn1w_fz.swift:24:52: error: 'characters'\
    \ is unavailable: Please use String directly\n            } else if str2.characters.count\
    \ < str1.characters.count {\n                                                \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    \n    if lst1 == lst2 {\n     \
    \   return lst1\n    }\n    \n    guard lst1.count >= lst2.count else {\n    \
    \    return lst1\n    }\n    \n    let strsCount = lst1.count\n    let charsCount\
    \ = lst1.reduce(0) { (total, c) in\n        return total + c.count\n    }\n  \
    \  \n    if strsCount == charsCount {\n        return lst1\n    } else {\n   \
    \     var res = lst1\n        \n        for (_, index) in lst2.enumerated() {\n\
    \            let index = lst2.index(of: index)\n            res.remove(at: index)\n\
    \        }\n        \n        return res\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpc3_1a6fn.swift:37:30: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n            let index = lst2.index(of: index)\n      \
    \                       ^\n/tmp/tmpc3_1a6fn.swift:37:30: note: use 'firstIndex(of:)'\
    \ instead\n            let index = lst2.index(of: index)\n                   \
    \          ^~~~~\n                             firstIndex\n/tmp/tmpc3_1a6fn.swift:38:28:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    res.remove(at: index)\n                           ^\n/tmp/tmpc3_1a6fn.swift:37:17:\
    \ note: short-circuit using 'guard' to exit this function early if the optional\
    \ value contains 'nil'\n            let index = lst2.index(of: index)\n      \
    \          ^\n            guard                             else { return <#default\
    \ value#> }\n/tmp/tmpc3_1a6fn.swift:37:30: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            let index = lst2.index(of:\
    \ index)\n                             ^\n                                   \
    \           ?? <#default value#>\n/tmp/tmpc3_1a6fn.swift:37:30: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    let index = lst2.index(of: index)\n                             ^\n     \
    \                                        !\n/tmp/tmpc3_1a6fn.swift:38:28: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            res.remove(at: index)\n                           ^\n           \
    \                      ?? <#default value#>\n/tmp/tmpc3_1a6fn.swift:38:28: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            res.remove(at: index)\n                           ^\n           \
    \                     !\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for _ in\
    \ 0 ..< lst2.count {\n        let _ = result.count < lst2.count\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpvg9u0oxu/tmpvg9u0oxu.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3757c91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3757988b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3757988988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37579877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvg9u0oxu                        0x00005560d1bb38ca <unavailable> + 6346

    5    libc.so.6                          0x00002b3757e7d460 __libc_start_main +
    245

    6    tmpvg9u0oxu                        0x00005560d1bb32a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let (smallest, _) = min(lst1, lst2)\n\
    \    let (larger, _) = max(lst1, lst2)\n    if smallest == larger { return smallest\
    \ }\n    var result = [String]()\n    for item in smallest {\n        if let index\
    \ = lst2.index(of: item) { result.append(lst2[index]) }\n    }\n    if !result.isEmpty\
    \ { return result }\n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp53ezri06.swift:17:25: error: type of expression is ambiguous without\
    \ more context\n    let (smallest, _) = min(lst1, lst2)\n                    \
    \    ^~~~~~~~~~~~~~~\n/tmp/tmp53ezri06.swift:18:23: error: type of expression\
    \ is ambiguous without more context\n    let (larger, _) = max(lst1, lst2)\n \
    \                     ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    var res: [String] = []\n    lst1.enumerate().forEach\
    \ { idx, element in\n        if lst2.contains(element) && element < lst2[idx]\
    \ {\n            res.append(element)\n        }\n    }\n    return res\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp5big10ie.swift:21:10: error: value of type '[String]' has no member\
    \ 'enumerate'\n    lst1.enumerate().forEach { idx, element in\n    ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\treturn total_match_impl(lst1, lst2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpzsakchpx.swift:17:9: error: cannot find 'total_match_impl' in scope\n\
    \        return total_match_impl(lst1, lst2)\n               ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == 0 && lst2.count\
    \ == 0 {\n        return []\n    } else if lst1.count == 0 && lst2.count != 0\
    \ {\n        return lst2\n    } else if lst1.count != 0 && lst2.count == 0 {\n\
    \        return lst1\n    }\n    var index = 0\n    var count = 0\n    lst1.forEach()\
    \ {\n        count += ($0 <= $1)\n    }\n    lst2.forEach() {\n        if count\
    \ >= index {\n            index += 1\n        }\n    }\n    return lst1[index..]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp1dp2z9ks.swift:26:20: error: contextual closure type '(String)\
    \ throws -> Void' expects 1 argument, but 2 were used in closure body\n    lst1.forEach()\
    \ {\n                   ^\n/tmp/tmp1dp2z9ks.swift:27:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n        count += ($0 <=\
    \ $1)\n                     ^\n/tmp/tmp1dp2z9ks.swift:29:20: error: contextual\
    \ type for closure argument list expects 1 argument, which cannot be implicitly\
    \ ignored\n    lst2.forEach() {\n                   ^\n                    _ in\
    \ \n/tmp/tmp1dp2z9ks.swift:34:22: error: cannot find operator '..' in scope; did\
    \ you mean '...'?\n    return lst1[index..]\n                     ^~\n       \
    \              ...\n/tmp/tmp1dp2z9ks.swift:34:16: error: no 'subscript' candidates\
    \ produce the expected contextual result type '[String]'\n    return lst1[index..]\n\
    \               ^\nSwift.Array:16:23: note: 'subscript(_:)' produces 'String',\
    \ not the expected contextual result type '[String]'\n    @inlinable public subscript(index:\
    \ Int) -> Element { get set }\n                      ^\nSwift.Array:17:23: note:\
    \ 'subscript(_:)' produces 'ArraySlice<String>', not the expected contextual result\
    \ type '[String]'\n    @inlinable public subscript(bounds: Range<Int>) -> ArraySlice<Element>\
    \ { get set }\n                      ^\nSwift.Collection:3:23: note: 'subscript(_:)'\
    \ produces 'ArraySlice<String>', not the expected contextual result type '[String]'\n\
    \    @inlinable public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence\
    \ { get }\n                      ^\nSwift.MutableCollection:3:23: note: 'subscript(_:)'\
    \ produces 'ArraySlice<String>', not the expected contextual result type '[String]'\n\
    \    @inlinable public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence\
    \ { get set }\n                      ^\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1 == lst2 {\n        return\
    \ lst1\n    }\n    var len1, len2: Int\n    len1 = lst1.count\n    len2 = lst2.count\n\
    \    var result: [String] = []\n    var index = 0\n    for _ in 0..<(len1 + len2\
    \ - 1) {\n        index += 1\n        if index < len1 {\n            result.append(lst1[index])\n\
    \        }\n        if index < len2 {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpuwufgwm0/tmpuwufgwm0.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43d9400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43d90f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43d90f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43d90f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuwufgwm0                        0x000055a32dda897a <unavailable> + 6522

    5    libc.so.6                          0x00002b43d95ec460 __libc_start_main +
    245

    6    tmpuwufgwm0                        0x000055a32dda8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = [String]()\n    for\
    \ elem in lst2 {\n        if contains(lst1, elem) == false {\n            lst3.append(elem)\n\
    \        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpee0ksjiw.swift:19:12: error: cannot find 'contains' in scope\n\
    \        if contains(lst1, elem) == false {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1.map { x in\n      \
    \  let idx = lst2.index(of: x)\n        if idx != nil {\n            return idx!\n\
    \        }\n        return lst2.count // default when no match\n    }.compactMap\
    \ { x in\n        let count = lst1.filter({ $0 < x }).count\n        if count\
    \ == lst2.count {\n            return lst1\n        }\n        lst1.filter { x\
    \ in\n            x > x\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwlnphge4.swift:26:20: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n            return lst1\n         \
    \          ^~~~\n/tmp/tmpwlnphge4.swift:23:20: error: unable to infer type of\
    \ a closure parameter 'x' in the current context\n    }.compactMap { x in\n  \
    \                 ^\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count > lst2.count {\n\
    \        return lst1\n    }\n    if lst2.count > lst1.count {\n        return\
    \ lst2\n    }\n    if lst1.count == lst2.count {\n        for i in 0..<lst1.count\
    \ {\n            if lst1[i] != lst2[i] {\n                return nil\n       \
    \     }\n        }\n        return lst1\n    }\n    return lst2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpdz7ymho7.swift:26:24: error: 'nil' is incompatible with return\
    \ type '[String]'\n                return nil\n                       ^\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total = 0\n    var i = 0\n\
    \    var j = 0\n    var newArray: [String] = []\n    for element in lst2 {\n \
    \       if element < lst1[i] {\n            newArray.append(element)\n       \
    \ } else {\n            newArray.append(lst1[j])\n            total = total +\
    \ len(lst1[j]) + len(lst2[j])\n            i = i + 1\n            j = j + 1\n\
    \        }\n    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpiyswfghs.swift:26:29: error: cannot find 'len' in scope\n     \
    \       total = total + len(lst1[j]) + len(lst2[j])\n                        \
    \    ^~~\n/tmp/tmpiyswfghs.swift:26:44: error: cannot find 'len' in scope\n  \
    \          total = total + len(lst1[j]) + len(lst2[j])\n                     \
    \                      ^~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var res: [String] = []\n    for\
    \ i in lst1 {\n        if !contains(lst2, i) {\n            res = append(res,\
    \ i)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpn3g27t_w.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst2, i) {\n            ^~~~~~~~\n/tmp/tmpn3g27t_w.swift:20:19:\
    \ error: cannot find 'append' in scope\n            res = append(res, i)\n   \
    \               ^~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp159j4o5n/tmp159j4o5n.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3ef918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3ef60fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3ef60f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3ef60e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp159j4o5n                        0x000055e1ed1916ea <unavailable> + 5866

    5    libc.so.6                          0x00002af3efb04460 __libc_start_main +
    245

    6    tmp159j4o5n                        0x000055e1ed1910c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count = 0\n    var result =\
    \ Array(zip(lst1, lst2).map{ (s, s2) -> (String, String) in\n        count +=\
    \ 1\n        return (s, s2)\n    }).filter{ (s, s2) -> Bool in\n        count\
    \ < s2.count || s2.count == 0\n    }.map{ (s, s2) -> String in\n        return\
    \ s\n    }\n    if lst1.count == 0 || lst2.count == 0 {\n        return result\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp0wkd2ku4/tmp0wkd2ku4.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9da5e76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9da5b6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9da5b6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9da5b6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wkd2ku4                        0x000055a1ff20ca2a <unavailable> + 6698

    5    libc.so.6                          0x00002b9da6062460 __libc_start_main +
    245

    6    tmp0wkd2ku4                        0x000055a1ff20c409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var res = lst1\n    for x in lst2\
    \ {\n        for y in lst1 {\n            if x == y {\n                break\n\
    \            }\n        }\n        if res.count < lst1.count {\n            res\
    \ = lst1\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpdilovkj8/tmpdilovkj8.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b174f979c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b174f670b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b174f670988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b174f66f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdilovkj8                        0x000056422e3c190a <unavailable> + 6410

    5    libc.so.6                          0x00002b174fb65460 __libc_start_main +
    245

    6    tmpdilovkj8                        0x000056422e3c12e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    \n\
    \    for i in 0 ..< min(lst1.count, lst2.count) {\n        if lst1[i] < lst2[i]\
    \ {\n            result.append(lst1[i])\n        } else {\n            result.append(lst2[i])\n\
    \        }\n    }\n    if lst1.count < lst2.count {\n        for i in 0 ..< lst1.count\
    \ {\n            result.append(lst1[i])\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6wbw9is1/tmp6wbw9is1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abab7d05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abab79fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abab79fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abab79fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6wbw9is1                        0x000055896c1afaba <unavailable> + 6842

    5    libc.so.6                          0x00002abab7ef1460 __libc_start_main +
    245

    6    tmp6wbw9is1                        0x000055896c1af499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    \n    var result : [String] = []\n\
    \    \n    for i in 0 ..< min(lst1.count, lst2.count) {\n        if lst1[i] <\
    \ lst2[i] {\n            result.append(lst1[i])\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpaumqssgb/tmpaumqssgb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627323fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6272f36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6272f36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6272f357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaumqssgb                        0x0000558b97272a5a <unavailable> + 6746

    5    libc.so.6                          0x00002b627342b460 __libc_start_main +
    245

    6    tmpaumqssgb                        0x0000558b97272439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var len1, len2 int = len(lst1),\
    \ len(lst2)\n    var res [String] = [:]\n    \n    for idx1 in range(0, len1)\
    \ {\n        if idx1 == len2 { // if both array has same length, return the first\n\
    \            return lst1\n        }\n        for idx2 in range(0, len2) {\n  \
    \          if idx1 == idx2 { // if both arrays have the same number of chars\n\
    \                continue\n            }\n            var arr1 = lst1[idx1].lowercased()\n\
    \            var arr2 = lst2[idx2].lowercased()\n            \n            if\
    \ arr1 == arr2 {\n                res[idx1] = arr1\n                idx1 = idx1\
    \ + 1\n                len1 = len1 + 1\n                idx2 = idx2 + 1\n    \
    \            len2 = len2 + 1\n            }\n        }\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpeihs1mra.swift:17:20: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n    var len1, len2 int\
    \ = len(lst1), len(lst2)\n                   ^\n/tmp/tmpeihs1mra.swift:17:20:\
    \ note: join the identifiers together\n    var len1, len2 int = len(lst1), len(lst2)\n\
    \              ~~~~~^~~\n              len2int\n/tmp/tmpeihs1mra.swift:17:20:\
    \ note: join the identifiers together with camel-case\n    var len1, len2 int\
    \ = len(lst1), len(lst2)\n              ~~~~~^~~\n              len2Int\n/tmp/tmpeihs1mra.swift:17:40:\
    \ error: consecutive statements on a line must be separated by ';'\n    var len1,\
    \ len2 int = len(lst1), len(lst2)\n                                       ^\n\
    \                                       ;\n/tmp/tmpeihs1mra.swift:18:12: error:\
    \ consecutive statements on a line must be separated by ';'\n    var res [String]\
    \ = [:]\n           ^\n           ;\n/tmp/tmpeihs1mra.swift:17:9: error: type\
    \ annotation missing in pattern\n    var len1, len2 int = len(lst1), len(lst2)\n\
    \        ^\n/tmp/tmpeihs1mra.swift:17:26: error: use of local variable 'len' before\
    \ its declaration\n    var len1, len2 int = len(lst1), len(lst2)\n           \
    \              ^\n/tmp/tmpeihs1mra.swift:17:37: note: 'len' declared here\n  \
    \  var len1, len2 int = len(lst1), len(lst2)\n                               \
    \     ^\n/tmp/tmpeihs1mra.swift:17:37: error: type annotation missing in pattern\n\
    \    var len1, len2 int = len(lst1), len(lst2)\n                             \
    \       ^\n/tmp/tmpeihs1mra.swift:17:41: warning: expression of type '[String]'\
    \ is unused\n    var len1, len2 int = len(lst1), len(lst2)\n                 \
    \                       ^~~~\n/tmp/tmpeihs1mra.swift:18:9: error: type annotation\
    \ missing in pattern\n    var res [String] = [:]\n        ^\n/tmp/tmpeihs1mra.swift:18:13:\
    \ error: cannot assign to immutable expression of type '[String].Type'\n    var\
    \ res [String] = [:]\n            ^~~~~~~~\n/tmp/tmpeihs1mra.swift:18:24: error:\
    \ cannot assign value of type '[AnyHashable : Any]' to type '[String].Type'\n\
    \    var res [String] = [:]\n   "
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result: [String] = lst1\n \
    \   if lst1.isEmpty && lst2.isEmpty {\n        return lst1\n    }\n    if lst1.isEmpty\
    \ || lst2.isEmpty {\n        return result\n    }\n    if lst1.count == lst2.count\
    \ {\n        return total_match(lst1: lst1, lst2: lst2)\n    }\n    for j in 0..<lst1.count\
    \ {\n        if !contains(lst2, lst1[j]) {\n            result.remove(at: j)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpeu0_c8my.swift:28:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst2, lst1[j]) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var arr = [String]()\n    \n  \
    \  for str1 in lst1 {\n        for str2 in lst2 {\n            arr.append(str1)\n\
    \        }\n    }\n    if arr.count == 0 {\n        return lst1\n    }\n    \n\
    \    for str2 in lst2 {\n        if !arr.remove(str2) {\n            return arr\n\
    \        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpte2jjv4c.swift:29:17: error: no exact matches in call to instance\
    \ method 'remove'\n        if !arr.remove(str2) {\n                ^\n/tmp/tmpte2jjv4c.swift:29:17:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \        if !arr.remove(str2) {\n                ^\n/tmp/tmpte2jjv4c.swift:29:17:\
    \ note: candidate expects value of type 'Array<String>.Index' (aka 'Int') for\
    \ parameter #1 (got 'String')\n        if !arr.remove(str2) {\n              \
    \  ^\n/tmp/tmpte2jjv4c.swift:29:17: error: cannot convert value of type 'String'\
    \ to expected argument type 'Bool'\n        if !arr.remove(str2) {\n         \
    \       ^\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.len == 0 || lst2.len ==\
    \ 0 {\n        return lst1\n    }\n\n    if lst1.len != lst2.len {\n        return\
    \ []\n    }\n\n    var index = 0\n    var count = 0\n    var res = lst1\n\n  \
    \  for element in lst1 {\n        if element < lst2[index] {\n            index\
    \ += 1\n        }\n        else {\n            count -= 1\n        }\n    }\n\n\
    \    if count > 0 {\n        return lst1\n    }\n    else {\n        return res\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpsrvvr3nj.swift:17:13: error: value of type '[String]' has no member\
    \ 'len'\n    if lst1.len == 0 || lst2.len == 0 {\n       ~~~~ ^~~\n/tmp/tmpsrvvr3nj.swift:17:30:\
    \ error: value of type '[String]' has no member 'len'\n    if lst1.len == 0 ||\
    \ lst2.len == 0 {\n                        ~~~~ ^~~\n/tmp/tmpsrvvr3nj.swift:21:13:\
    \ error: value of type '[String]' has no member 'len'\n    if lst1.len != lst2.len\
    \ {\n       ~~~~ ^~~\n/tmp/tmpsrvvr3nj.swift:21:25: error: value of type '[String]'\
    \ has no member 'len'\n    if lst1.len != lst2.len {\n                   ~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1.zip(lst2).filter({\
    \ $0.0 == $0.1 }).map({ $0.0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmptw8rewur.swift:17:17: error: value of type '[String]' has no member\
    \ 'zip'\n    return lst1.zip(lst2).filter({ $0.0 == $0.1 }).map({ $0.0 })\n  \
    \         ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp159j4o5n/tmp159j4o5n.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3ef918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3ef60fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3ef60f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3ef60e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp159j4o5n                        0x000055e1ed1916ea <unavailable> + 5866

    5    libc.so.6                          0x00002af3efb04460 __libc_start_main +
    245

    6    tmp159j4o5n                        0x000055e1ed1910c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1 == lst2 {\n        return\
    \ lst1\n    }\n\n    if lst1 == nil || lst2 == nil {\n        return nil\n   \
    \ }\n\n    if lst1.count == 0 || lst2.count == 0 {\n        return nil\n    }\n\
    \n    if lst1.count == lst2.count {\n        return lst1\n    }\n\n    if lst1.count\
    \ == lst2.count {\n        \n        let result = lst1.filter {\n            let\
    \ x = lst2.filter { $0 < $0 }\n            return x.count == 0\n        }\n  \
    \      return result\n    }\n\n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmptednpa36.swift:21:13: warning: comparing non-optional value of\
    \ type '[String]' to 'nil' always returns false\n    if lst1 == nil || lst2 ==\
    \ nil {\n       ~~~~ ^  ~~~\n/tmp/tmptednpa36.swift:21:28: warning: comparing\
    \ non-optional value of type '[String]' to 'nil' always returns false\n    if\
    \ lst1 == nil || lst2 == nil {\n                      ~~~~ ^  ~~~\n/tmp/tmptednpa36.swift:22:16:\
    \ error: 'nil' is incompatible with return type '[String]'\n        return nil\n\
    \               ^\n/tmp/tmptednpa36.swift:26:16: error: 'nil' is incompatible\
    \ with return type '[String]'\n        return nil\n               ^\n/tmp/tmptednpa36.swift:35:34:\
    \ error: contextual type for closure argument list expects 1 argument, which cannot\
    \ be implicitly ignored\n        let result = lst1.filter {\n                \
    \                 ^\n                                  _ in \n"
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // TODO: implement total_match\n\
    \    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp53e7_ofj/tmp53e7_ofj.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e59ef9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e59bf0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e59bf0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e59bef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp53e7_ofj                        0x000055fdb0e826ea <unavailable> + 5866

    5    libc.so.6                          0x00002b5e5a0e5460 __libc_start_main +
    245

    6    tmp53e7_ofj                        0x000055fdb0e820c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return total_match_helper(lst1,\
    \ lst2, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpkc4ldsas.swift:17:12: error: cannot find 'total_match_helper' in\
    \ scope\n    return total_match_helper(lst1, lst2, 0)\n           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\tvar i uint\n\tvar len uint\n\ti =\
    \ 1\n\tlen = uint(len(lst1))\n\twhile (i < len) {\n\t\tif lst1[i] < lst2[i] {\n\
    \t\t\tlst1.insert(i, lst1[i])\n\t\t} else {\n\t\t\tlst2.insert(i, lst2[i])\n\t\
    \t}\n\t\ti++\n\t}\n\tlst1.removeFirst()\n\tlst2.removeFirst()\n\treturn lst1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpfilheng_.swift:17:8: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n        var i uint\n\
    \              ^\n/tmp/tmpfilheng_.swift:17:8: note: join the identifiers together\n\
    \        var i uint\n            ~~^~~~\n            iuint\n/tmp/tmpfilheng_.swift:17:8:\
    \ note: join the identifiers together with camel-case\n        var i uint\n  \
    \          ~~^~~~\n            iUint\n/tmp/tmpfilheng_.swift:18:10: error: found\
    \ an unexpected second identifier in variable declaration; is there an accidental\
    \ break?\n        var len uint\n                ^\n/tmp/tmpfilheng_.swift:18:10:\
    \ note: join the identifiers together\n        var len uint\n            ~~~~^~~~\n\
    \            lenuint\n/tmp/tmpfilheng_.swift:18:10: note: join the identifiers\
    \ together with camel-case\n        var len uint\n            ~~~~^~~~\n     \
    \       lenUint\n/tmp/tmpfilheng_.swift:17:6: error: type annotation missing in\
    \ pattern\n        var i uint\n            ^\n/tmp/tmpfilheng_.swift:18:6: error:\
    \ type annotation missing in pattern\n        var len uint\n            ^\n/tmp/tmpfilheng_.swift:20:8:\
    \ error: cannot find 'uint' in scope\n        len = uint(len(lst1))\n        \
    \      ^~~~\n/tmp/tmpfilheng_.swift:23:9: error: no exact matches in call to instance\
    \ method 'insert'\n                        lst1.insert(i, lst1[i])\n         \
    \                    ^\n/tmp/tmpfilheng_.swift:23:9: note: found candidate with\
    \ type '(__owned String, Int) -> ()'\n                        lst1.insert(i, lst1[i])\n\
    \                             ^\n/tmp/tmpfilheng_.swift:25:9: error: no exact\
    \ matches in call to instance method 'insert'\n                        lst2.insert(i,\
    \ lst2[i])\n                             ^\n/tmp/tmpfilheng_.swift:25:9: note:\
    \ found candidate with type '(__owned String, Int) -> ()'\n                  \
    \      lst2.insert(i, lst2[i])\n                             ^\n/tmp/tmpfilheng_.swift:27:4:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      i++\n                 ^~\n/tmp/tmpfilheng_.swift:29:7: error: cannot use\
    \ mutati"
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1 == lst2 { return lst1 }\n\
    \    \n    var result = [String]()\n    var i = 0\n    \n    for _ in 0..<min(lst1.count,\
    \ lst2.count) {\n        if lst1[i..<lst1.count].contains(lst2[i..<lst2.count])\
    \ {\n            result.append(lst1[i])\n        }\n        i += 1\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpfcgep9y2/tmpfcgep9y2.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1d3cfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1d39f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1d39f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1d39f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcgep9y2                        0x000055a3ceb83bda <unavailable> + 7130

    5    libc.so.6                          0x00002ab1d3eea460 __libc_start_main +
    245

    6    tmpfcgep9y2                        0x000055a3ceb835b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1.map{ el in\n      \
    \  if lst2.contains(el) {\n            return el\n        }\n        return \"\
    \"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpf6bek16t/tmpf6bek16t.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6936f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6933e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6933e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6933e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf6bek16t                        0x000055a73b4f67fa <unavailable> + 6138

    5    libc.so.6                          0x00002ad6938de460 __libc_start_main +
    245

    6    tmpf6bek16t                        0x000055a73b4f61d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result: [String] = []\n   \
    \ if lst1.count == 0 || lst2.count == 0 {\n        return result\n    }\n    for\
    \ str in lst1 {\n        for str2 in lst2 {\n            if str2.utf16.count ==\
    \ str.utf16.count && str2.utf16.joined().count < str.utf16.count {\n         \
    \       result.append(str)\n                break\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpq6ryjn5n.swift:23:60: error: referencing instance method 'joined(separator:)'\
    \ on 'BidirectionalCollection' requires the types 'UTF16.CodeUnit' (aka 'UInt16')\
    \ and 'String' be equivalent\n            if str2.utf16.count == str.utf16.count\
    \ && str2.utf16.joined().count < str.utf16.count {\n                         \
    \                                  ^\nSwift.BidirectionalCollection:1:11: note:\
    \ where 'Self.Element' = 'UTF16.CodeUnit' (aka 'UInt16')\nextension BidirectionalCollection\
    \ where Self.Element == String {\n          ^\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\t\n\tvar arr1 [String]\n\tvar arr2\
    \ [String]\n\tvar arr3 [String]\n\tvar arr4 [String]\n\t\n\tvar total1 = 0\n\t\
    var total2 = 0\n\tvar total3 = 0\n\tvar total4 = 0\n\t\n\tfor item in lst1 {\n\
    \t\tif arr1 == nil || !contains(arr1, item) {\n\t\t\tarr1 = append(arr1, item)\n\
    \t\t}\n\t}\n\tfor item in lst2 {\n\t\tif arr2 == nil || !contains(arr2, item)\
    \ {\n\t\t\tarr2 = append(arr2, item)\n\t\t}\n\t}\n\t\n\tfor item in arr1 {\n\t\
    \tif !contains(arr2, item) {\n\t\t\tarr3 = append(arr3, item)\n\t\t}\n\t}\n\t\
    for item in arr2 {\n\t\tif !contains(arr3, item) {\n\t\t\tarr4 = append(arr4,\
    \ item)\n\t\t}\n\t}\n\t\n\tfor item in arr3 {\n\t\ttotal1 += len(item)\n\t}\n\t\
    for item in arr4 {\n\t\ttotal2 += len(item)\n\t}\n\t\n\tif total1 == total2 &&\
    \ total1 < total2 {\n\t\treturn arr1\n\t} else if total1 > total2 && total1 <\
    \ total3 {\n\t\treturn arr2\n\t} else if total1 == total3 && total1 < total4 {\n\
    \t\treturn arr1\n\t} else if total1 == total4 && total2 < total4 {\n\t\treturn\
    \ arr2\n\t} else {\n\t\treturn arr3\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp01zj3odf.swift:18:10: error: consecutive statements on a line must\
    \ be separated by ';'\n        var arr1 [String]\n                ^\n        \
    \        ;\n/tmp/tmp01zj3odf.swift:19:10: error: consecutive statements on a line\
    \ must be separated by ';'\n        var arr2 [String]\n                ^\n   \
    \             ;\n/tmp/tmp01zj3odf.swift:20:10: error: consecutive statements on\
    \ a line must be separated by ';'\n        var arr3 [String]\n               \
    \ ^\n                ;\n/tmp/tmp01zj3odf.swift:21:10: error: consecutive statements\
    \ on a line must be separated by ';'\n        var arr4 [String]\n            \
    \    ^\n                ;\n/tmp/tmp01zj3odf.swift:18:6: error: type annotation\
    \ missing in pattern\n        var arr1 [String]\n            ^\n/tmp/tmp01zj3odf.swift:18:11:\
    \ error: expected member name or constructor call after type name\n        var\
    \ arr1 [String]\n                 ^\n/tmp/tmp01zj3odf.swift:18:18: note: add arguments\
    \ after the type to construct a value of the type\n        var arr1 [String]\n\
    \                        ^\n                         ()\n/tmp/tmp01zj3odf.swift:18:18:\
    \ note: use '.self' to reference the type object\n        var arr1 [String]\n\
    \                        ^\n                         .self\n/tmp/tmp01zj3odf.swift:18:11:\
    \ warning: expression of type '[String].Type' is unused\n        var arr1 [String]\n\
    \                 ^~~~~~~~\n/tmp/tmp01zj3odf.swift:19:6: error: type annotation\
    \ missing in pattern\n        var arr2 [String]\n            ^\n/tmp/tmp01zj3odf.swift:19:11:\
    \ error: expected member name or constructor call after type name\n        var\
    \ arr2 [String]\n                 ^\n/tmp/tmp01zj3odf.swift:19:18: note: add arguments\
    \ after the type to construct a value of the type\n        var arr2 [String]\n\
    \                        ^\n                         ()\n/tmp/tmp01zj3odf.swift:19:18:\
    \ note: use '.self' to reference the type object\n        var arr2 [String]\n\
    \                        ^\n                         .self\n/tmp/tmp01zj3odf.swift:19:11:\
    \ warning: expression of type '[String].Type' is unused\n        var arr2 [String"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1 == lst2 {\n        return\
    \ lst1\n    }\n    if lst1.count > lst2.count {\n        return total_match(lst2,\
    \ lst1)\n    }\n    if lst2.count > lst1.count {\n        return total_match(lst1,\
    \ lst2)\n    }\n    return total_match(lst2, lst2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmptmaaedn1.swift:21:27: error: missing argument labels 'lst1:lst2:'\
    \ in call\n        return total_match(lst2, lst1)\n                          ^\n\
    \                           lst1: lst2: \n/tmp/tmptmaaedn1.swift:24:27: error:\
    \ missing argument labels 'lst1:lst2:' in call\n        return total_match(lst1,\
    \ lst2)\n                          ^\n                           lst1: lst2: \n\
    /tmp/tmptmaaedn1.swift:26:23: error: missing argument labels 'lst1:lst2:' in call\n\
    \    return total_match(lst2, lst2)\n                      ^\n               \
    \        lst1: lst2: \n"
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst = lst1\n    if lst.count\
    \ > lst2.count {\n        lst = lst2\n    }\n    var matched: [[String]] = []\n\
    \    for i in 0..<lst.count {\n        var matchedWords = [String]()\n       \
    \ for j in 0..<lst.count {\n            if lst1[i] == lst2[j] {\n            \
    \    matchedWords.append(lst2[j])\n            }\n        }\n        matched.append(matchedWords)\n\
    \    }\n    return matched[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a42c71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a42968561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0a42968286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0a4296813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0a42967bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b0a4295148a <unavailable> + 1340554

    6    tmpa8yrfarh                        0x00005636863fe0c5 <unavailable> + 12485

    7    tmpa8yrfarh                        0x00005636863fc7b5 <unavailable> + 6069

    8    libc.so.6                          0x00002b0a42e5d460 __libc_start_main +
    245

    9    tmpa8yrfarh                        0x00005636863fc4a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if (lst1.count == lst2.count) {\n\
    \        if (lst1.count > 0) {\n            for (var i = 0; i < lst1.count; i++)\
    \ {\n                if (lst1[i] < lst2[i])\n                    return lst1\n\
    \            }\n        }\n        return lst1\n    } else {\n        return lst2\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpt1x7cq65.swift:19:13: error: C-style for statement has been removed\
    \ in Swift 3\n            for (var i = 0; i < lst1.count; i++) {\n           \
    \ ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt1x7cq65.swift:20:39: error: expected\
    \ '{' after 'if' condition\n                if (lst1[i] < lst2[i])\n         \
    \                             ^\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ i in 0..<(min(lst1.count, lst2.count)) {\n        if lst1[i] < lst2[i] {\n \
    \           result.append(lst1[i])\n        } else {\n            result.append(lst2[i])\n\
    \        }\n    }\n    if result.count == lst1.count {\n        return lst1\n\
    \    } else {\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp5s_w4rqs/tmp5s_w4rqs.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ca404cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ca3d43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ca3d43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ca3d427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5s_w4rqs                        0x0000556fe9fb4aba <unavailable> + 6842

    5    libc.so.6                          0x00002b6ca4238460 __libc_start_main +
    245

    6    tmp5s_w4rqs                        0x0000556fe9fb4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: -1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count < lst2.count {\n\
    \        return lst1\n    }\n    if lst2.count < lst1.count {\n        return\
    \ lst2\n    }\n    if lst1.count == lst2.count {\n        return total_match(lst1:\
    \ lst1, lst2: lst2)\n    }\n    var result = [String]()\n    for i in 0..<lst1.count\
    \ {\n        if i < lst2.count {\n            if lst1[i] < lst2[i] {\n       \
    \         result.append(lst1[i])\n            } else {\n                result.append(lst2[i])\n\
    \            }\n        } else {\n            if lst1[i] < lst2[i] {\n       \
    \         result.append(lst1[i])\n            } else {\n                result.append(lst2[i])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009626
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // check length\n    if lst1.count\
    \ != lst2.count {\n        return lst1\n    }\n\n    // make empty array\n   \
    \ var res: [String] = []\n\n    // loop for adding element\n    for i in 0..<lst1.count\
    \ {\n        // loop through each element in lst2\n        for j in 0..<lst2.count\
    \ {\n            // if both elements have same length\n            if lst1[i].count\
    \ == lst2[j].count {\n                // add element to res array\n          \
    \      res.append(lst1[i])\n            }\n        }\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpacma75ti/tmpacma75ti.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b68634c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b6832bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b6832b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b6832a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpacma75ti                        0x000055bafbe471f8 <unavailable> + 8696

    5    libc.so.6                          0x00002b4b68820460 __libc_start_main +
    245

    6    tmpacma75ti                        0x000055bafbe463a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1 == lst2 {\n        return\
    \ lst1\n    }\n    \n    if lst1.count == lst2.count {\n        let maxCount:\
    \ Int = lst1.count\n        var maxNum = -1\n        for index in 0..<maxCount\
    \ {\n            let len = min(lst1[index].count, lst2[index].count)\n       \
    \     if len > maxNum {\n                maxNum = len\n            }\n       \
    \ }\n        var result: [String] = []\n        for index in 0..<maxNum {\n  \
    \          result.append(min((lst1[index].count, lst2[index].count)))\n      \
    \  }\n        return result\n    }\n    return []\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpvfbr_rqu.swift:32:27: error: no exact matches in call to global\
    \ function 'min'\n            result.append(min((lst1[index].count, lst2[index].count)))\n\
    \                          ^\n/tmp/tmpvfbr_rqu.swift:32:27: note: candidate has\
    \ partially matching parameter list (String, String)\n            result.append(min((lst1[index].count,\
    \ lst2[index].count)))\n                          ^\n/tmp/tmpvfbr_rqu.swift:32:27:\
    \ note: candidate has partially matching parameter list (String, String, String,\
    \ String...)\n            result.append(min((lst1[index].count, lst2[index].count)))\n\
    \                          ^\n/tmp/tmpvfbr_rqu.swift:32:27: error: cannot convert\
    \ value of type 'Int' to expected argument type 'String'\n            result.append(min((lst1[index].count,\
    \ lst2[index].count)))\n                          ^\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count &&\
    \ len(lst1) > 0 {\n        if lst1.count > lst2.count {\n            return lst1\n\
    \        }\n        return lst2\n    }\n    return lst1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpn597cu7b.swift:17:36: error: cannot find 'len' in scope\n    if\
    \ lst1.count == lst2.count && len(lst1) > 0 {\n                              \
    \     ^~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        if lst1.count == 1 {\n            return lst1\n        } else {\n   \
    \         return lst2\n        }\n    }\n    return lst1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmppth1ct24/tmppth1ct24.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b697bc4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b697b946b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b697b946988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b697b9457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppth1ct24                        0x00005652a583725d <unavailable> + 8797

    5    libc.so.6                          0x00002b697be3b460 __libc_start_main +
    245

    6    tmppth1ct24                        0x00005652a5836129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1 == lst2 { return lst1 }\n\
    \    var matched = 0\n    var l1 = len(lst1)\n    var l2 = len(lst2)\n    var\
    \ result = Array<String>()\n    for index in 0..<l1 {\n        if lst1[index]\
    \ < lst2[index] {\n            matched += 1\n        }\n    }\n    if l1 == l2\
    \ { \n        // If both lists have same no. of chars\n        return lst1\n \
    \   }\n    // If no. of chars are different\n    for index in 0..<l2 {\n     \
    \   if matched < l1 {\n            matched += 1\n        }\n        if lst1[index]\
    \ < lst2[index] {\n            matched += 1\n        }\n    }\n    for i in 0..<l2\
    \ {\n        if matched < l1 {\n            result.append(lst2[i])\n        }\
    \ else {\n            result.append(lst1[index])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpndodomkl.swift:19:14: error: cannot find 'len' in scope\n    var\
    \ l1 = len(lst1)\n             ^~~\n/tmp/tmpndodomkl.swift:20:14: error: cannot\
    \ find 'len' in scope\n    var l2 = len(lst2)\n             ^~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1.reduce((a1, a2) =>\
    \ {\n        return a1.filter((a: String) in\n            a2.filter((a: String)\
    \ in\n                a <= a2\n            )\n        ).sorted()\n    })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpcf6fwq38.swift:18:38: error: expected ',' separator\n        return\
    \ a1.filter((a: String) in\n                                     ^\n         \
    \                           ,\n/tmp/tmpcf6fwq38.swift:18:38: error: expected expression\
    \ in list of expressions\n        return a1.filter((a: String) in\n          \
    \                           ^\n/tmp/tmpcf6fwq38.swift:17:25: error: cannot find\
    \ 'a1' in scope\n    return lst1.reduce((a1, a2) => {\n                      \
    \  ^~\n/tmp/tmpcf6fwq38.swift:17:29: error: cannot find 'a2' in scope\n    return\
    \ lst1.reduce((a1, a2) => {\n                            ^~\n/tmp/tmpcf6fwq38.swift:17:33:\
    \ error: cannot find operator '=>' in scope\n    return lst1.reduce((a1, a2) =>\
    \ {\n                                ^~\n/tmp/tmpcf6fwq38.swift:18:16: error:\
    \ cannot find 'a1' in scope\n        return a1.filter((a: String) in\n       \
    \        ^~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var arr = [String]()\n    var i\
    \ = 1\n    for index in lst1.indices {\n        if lst1[index] != lst2[index]\
    \ {\n            if !arr.isEmpty {\n                arr = arr + lst1[i..<lst1.count]\n\
    \            }\n            arr = arr + lst2[i..<lst2.count]\n            break\n\
    \        } else {\n            i = i + 1\n        }\n    }\n    if arr.isEmpty\
    \ {\n        arr = arr + lst1[i..<lst1.count]\n    }\n    return arr\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ef49e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ef46dc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4ef46dc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4ef46dc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4ef46dbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpqh3b3s53                        0x000055d4c4c085b4 <unavailable> + 13748

    6    tmpqh3b3s53                        0x000055d4c4c06975 <unavailable> + 6517

    7    libc.so.6                          0x00002b4ef4bd1460 __libc_start_main +
    245

    8    tmpqh3b3s53                        0x000055d4c4c06669 <unavailable> + 5737

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result: [String] = lst1\n \
    \   for i in lst2 {\n        if !contains(lst1, i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp8994djsp.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst1, i) {\n            ^~~~~~~~\n/tmp/tmp8994djsp.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, i)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1 == lst2 {\n        return\
    \ lst1\n    }\n    var imax = lst1.count < lst2.count ? lst1.count : lst2.count\n\
    \    var jmax = lst1.count < lst2.count ? lst2.count : lst1.count\n    var arr\
    \ = [String](count: imax, repeatedValue: \"\")\n    for i in 0 ..< imax {\n  \
    \      for j in 0 ..< jmax {\n            if lst1[i] < lst2[j] {\n           \
    \     arr[j] = lst2[j]\n                break\n            }\n        }\n    }\n\
    \    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp900i__rl.swift:22:15: error: no exact matches in call to initializer\
    \ \n    var arr = [String](count: imax, repeatedValue: \"\")\n              ^\n\
    /tmp/tmp900i__rl.swift:22:15: note: candidate has partially matching parameter\
    \ list (repeating: String, count: Int)\n    var arr = [String](count: imax, repeatedValue:\
    \ \"\")\n              ^\n/tmp/tmp900i__rl.swift:22:15: note: candidate has partially\
    \ matching parameter list (repeating: String, count: Int)\n    var arr = [String](count:\
    \ imax, repeatedValue: \"\")\n              ^\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let arr1 = lst1.map { String($0)\
    \ }\n    let arr2 = lst2.map { String($0) }\n    if arr1.count == arr2.count {\n\
    \        return arr1\n    }\n    return arr1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpu55ssebn/tmpu55ssebn.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24141fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2413ef2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2413ef2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2413ef17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu55ssebn                        0x000056554ad3b8fa <unavailable> + 6394

    5    libc.so.6                          0x00002b24143e7460 __libc_start_main +
    245

    6    tmpu55ssebn                        0x000056554ad3b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.length == 0 || lst2.length\
    \ == 0 {\n        return []\n    }\n    var total_len = lst1[0].length\n    for\
    \ (_, item1) in lst1.enumerated() {\n        for (_, item2) in lst2.enumerated()\
    \ {\n            if item1.length < item2.length {\n                break\n   \
    \         } else {\n                total_len += item1.length\n            }\n\
    \        }\n        if total_len == item1.length {\n            return lst1\n\
    \        }\n    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpg4b2l9l9.swift:17:13: error: value of type '[String]' has no member\
    \ 'length'\n    if lst1.length == 0 || lst2.length == 0 {\n       ~~~~ ^~~~~~\n\
    /tmp/tmpg4b2l9l9.swift:17:33: error: value of type '[String]' has no member 'length'\n\
    \    if lst1.length == 0 || lst2.length == 0 {\n                           ~~~~\
    \ ^~~~~~\n/tmp/tmpg4b2l9l9.swift:20:29: error: value of type 'String' has no member\
    \ 'length'\n    var total_len = lst1[0].length\n                    ~~~~~~~ ^~~~~~\n\
    /tmp/tmpg4b2l9l9.swift:23:22: error: value of type 'String' has no member 'length'\n\
    \            if item1.length < item2.length {\n               ~~~~~ ^~~~~~\n/tmp/tmpg4b2l9l9.swift:23:37:\
    \ error: value of type 'String' has no member 'length'\n            if item1.length\
    \ < item2.length {\n                              ~~~~~ ^~~~~~\n/tmp/tmpg4b2l9l9.swift:26:36:\
    \ error: value of type 'String' has no member 'length'\n                total_len\
    \ += item1.length\n                             ~~~~~ ^~~~~~\n/tmp/tmpg4b2l9l9.swift:29:31:\
    \ error: value of type 'String' has no member 'length'\n        if total_len ==\
    \ item1.length {\n                        ~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // if both are empty return empty\
    \ list\n    if lst1 == [] && lst2 == [] {\n        return lst1\n    }\n    //\
    \ if both are same number of chars return the list\n    if lst1.count == lst2.count\
    \ {\n        return lst1\n    }\n    // if both are different number of chars\
    \ return the list with the maximum number\n    if lst1.count < lst2.count {\n\
    \        let listCopy = lst1.copy()\n        listCopy.sortInPlace()\n        return\
    \ listCopy.prefix(lst2.count)\n    }\n    else {\n        let listCopy = lst2.copy()\n\
    \        listCopy.sortInPlace()\n        return listCopy.prefix(lst1.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpvsk81lh5.swift:27:29: error: value of type '[String]' has no member\
    \ 'copy'\n        let listCopy = lst1.copy()\n                       ~~~~ ^~~~\n\
    /tmp/tmpvsk81lh5.swift:32:29: error: value of type '[String]' has no member 'copy'\n\
    \        let listCopy = lst2.copy()\n                       ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1 == lst2 {\n        return\
    \ lst1\n    }\n    if lst1.count < lst2.count {\n        return lst1\n    }\n\
    \    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpjtdevqiv/tmpjtdevqiv.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b654c03ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b654bd35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b654bd35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b654bd347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjtdevqiv                        0x0000557394c0925d <unavailable> + 8797

    5    libc.so.6                          0x00002b654c22a460 __libc_start_main +
    245

    6    tmpjtdevqiv                        0x0000557394c08129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ item1 in lst1 {\n        for item2 in lst2 {\n            if item1 < item2 {\n\
    \                result = append(result, item1)\n                break\n     \
    \       }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpriii1juu.swift:21:26: error: cannot find 'append' in scope\n  \
    \              result = append(result, item1)\n                         ^~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    \n    var chars1: Int = 0, chars2:\
    \ Int = 0\n    for _ in lst1 {\n        chars1 += (_ as NSString).length\n   \
    \ }\n    for _ in lst2 {\n        chars2 += (_ as NSString).length\n    }\n  \
    \  \n    if chars1 < chars2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpzq4qsrf_.swift:20:20: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n        chars1 += (_ as NSString).length\n\
    \                   ^\n/tmp/tmpzq4qsrf_.swift:23:20: error: '_' can only appear\
    \ in a pattern or on the left side of an assignment\n        chars2 += (_ as NSString).length\n\
    \                   ^\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    } else {\n        return lst2.filter({ element in\n\
    \            return lst1.contains(element)\n        })\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbxc2mvgx/tmpbxc2mvgx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c847ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c844e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c844e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c844e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbxc2mvgx                        0x000055a33bfcf87a <unavailable> + 6266

    5    libc.so.6                          0x00002b6c849d7460 __libc_start_main +
    245

    6    tmpbxc2mvgx                        0x000055a33bfcf259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\tif lst1.count == lst2.count {\n\t\
    \treturn lst1\n\t}\n\treturn lst1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp532valwm/tmp532valwm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b535498cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5354683b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5354683988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53546827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp532valwm                        0x000055d99f5ea74a <unavailable> + 5962

    5    libc.so.6                          0x00002b5354b78460 __libc_start_main +
    245

    6    tmp532valwm                        0x000055d99f5ea129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1.filter(str1 => lst2.contains(str1))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp04zmo724.swift:17:24: error: cannot find 'str1' in scope\n    return\
    \ lst1.filter(str1 => lst2.contains(str1))\n                       ^~~~\n/tmp/tmp04zmo724.swift:17:29:\
    \ error: cannot find operator '=>' in scope\n    return lst1.filter(str1 => lst2.contains(str1))\n\
    \                            ^~\n/tmp/tmp04zmo724.swift:17:46: error: cannot find\
    \ 'str1' in scope\n    return lst1.filter(str1 => lst2.contains(str1))\n     \
    \                                        ^~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    guard lst1.count == lst2.count\
    \ else { return lst1 }\n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq1pn2pbi/tmpq1pn2pbi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b425d871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b425d568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b425d568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b425d5677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq1pn2pbi                        0x000055fd8ea7174a <unavailable> + 5962

    5    libc.so.6                          0x00002b425da5d460 __libc_start_main +
    245

    6    tmpq1pn2pbi                        0x000055fd8ea71129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    guard lst1.count == lst2.count\
    \ else { return lst1 }\n    guard lst1.count == 0 || lst2.count == 0 else { return\
    \ lst1 }\n    var result = [String](repeatElement(\"\", lst1.count))\n    for\
    \ i in 0..<lst1.count {\n        if lst1[i] < lst2[i] {\n            result[i]\
    \ = lst1[i]\n        } else {\n            result[i] = lst2[i]\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpo6f20o8i.swift:19:40: error: missing argument label 'count:' in\
    \ call\n    var result = [String](repeatElement(\"\", lst1.count))\n         \
    \                              ^\n                                           \
    \ count: \n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var res = lst1\n    for _ in 0..<min(lst1.count,\
    \ lst2.count) {\n        if lst1.count == 0 {\n            break\n        }\n\
    \        if lst2.count == 0 {\n            break\n        }\n        let first\
    \ = lst1.removeFirst()\n        if lst2.contains(first) {\n            res.append(first)\n\
    \            lst2.remove(first)\n        }\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpgwp0mz6r.swift:25:26: error: cannot use mutating member on immutable\
    \ value: 'lst1' is a 'let' constant\n        let first = lst1.removeFirst()\n\
    \                    ~~~~ ^\n/tmp/tmpgwp0mz6r.swift:28:18: error: no exact matches\
    \ in call to instance method 'remove'\n            lst2.remove(first)\n      \
    \           ^\n/tmp/tmpgwp0mz6r.swift:28:18: note: found candidate with type '(Int)\
    \ -> String'\n            lst2.remove(first)\n                 ^\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for i in\
    \ lst2 {\n        for j in result {\n            if i == j {\n               \
    \ removeElementAtIndex(result)\n                break\n            }\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp9vtjkt88.swift:21:17: error: cannot find 'removeElementAtIndex'\
    \ in scope\n                removeElementAtIndex(result)\n                ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    guard lst1.count == lst2.count\
    \ else { return lst1 }\n    \n    let sorted = zip(lst1, lst2).sorted()\n    guard\
    \ sorted[0] == sorted[1] else { return lst1 }\n    \n    return sorted[0] + sorted[1]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp1yh786bi.swift:19:18: error: type '(Array<String>.Element, Array<String>.Element)'\
    \ cannot conform to 'Comparable'\n    let sorted = zip(lst1, lst2).sorted()\n\
    \                 ^\n/tmp/tmp1yh786bi.swift:19:18: note: only concrete types such\
    \ as structs, enums and classes can conform to protocols\n    let sorted = zip(lst1,\
    \ lst2).sorted()\n                 ^\n/tmp/tmp1yh786bi.swift:19:18: note: required\
    \ by referencing instance method 'sorted()' on 'Sequence' where 'Self.Element'\
    \ = '(Array<String>.Element, Array<String>.Element)'\n    let sorted = zip(lst1,\
    \ lst2).sorted()\n                 ^\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var arr2 = [String]()\n    \n \
    \   for i in 0 ..< lst2.count {\n        for j in 0 ..< lst1.count {\n       \
    \     if lst2[i] < lst1[j] {\n                arr2.append(lst2[i])\n         \
    \       break\n            }\n        }\n    }\n\n    return arr2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwri9on59/tmpwri9on59.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cd004bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ccfd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ccfd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ccfd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwri9on59                        0x000055691fcc3a2a <unavailable> + 6698

    5    libc.so.6                          0x00002b5cd0237460 __libc_start_main +
    245

    6    tmpwri9on59                        0x000055691fcc3409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total_cnt: Int = 0\n    for\
    \ i in 0 ..< lst1.count {\n        if i >= lst2.count {\n            total_cnt\
    \ = total_cnt + lst1.count\n        } else {\n            if lst1[i] != lst2[i]\
    \ {\n                total_cnt += 1\n            }\n        }\n    }\n    return\
    \ lst1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpga2zjnrr/tmpga2zjnrr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05e5224c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05e4f1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05e4f1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05e4f1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga2zjnrr                        0x000056522b7df97a <unavailable> + 6522

    5    libc.so.6                          0x00002b05e5410460 __libc_start_main +
    245

    6    tmpga2zjnrr                        0x000056522b7df359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    var lst = lst2\n    for index in 0..<lst1.count\
    \ {\n        if lst1[index] < lst[index] {\n            lst = lst1\n        }\n\
    \    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpt2trdyo8/tmpt2trdyo8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaee1c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaee1971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaee1971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaee19707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2trdyo8                        0x000055c245d4e97a <unavailable> + 6522

    5    libc.so.6                          0x00002aaee1e66460 __libc_start_main +
    245

    6    tmpt2trdyo8                        0x000055c245d4e359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\treturn (lst1 + lst2) as [String]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpib7sy5ew/tmpib7sy5ew.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43a5f84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43a5c7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43a5c7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43a5c7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpib7sy5ew                        0x000055eb41bd074a <unavailable> + 5962

    5    libc.so.6                          0x00002b43a6170460 __libc_start_main +
    245

    6    tmpib7sy5ew                        0x000055eb41bd0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var output: [String] = []\n   \
    \ for index in 0..<lst1.count {\n        if lst1[index].count < lst2[index].count\
    \ {\n            output = append(output, lst1[index])\n        }\n    }\n    return\
    \ output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpu1vz5qwh.swift:20:22: error: cannot find 'append' in scope\n  \
    \          output = append(output, lst1[index])\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    \n    // get the common length\n\
    \    let l1 = len(lst1)\n    let l2 = len(lst2)\n    if l1 == l2 {\n        return\
    \ lst1\n    }\n    \n    // get the index of the shortest array\n    let i1 =\
    \ -1\n    let i2 = -1\n    for i in 0 ..< l1 {\n        let j = findIndex(lst1,\
    \ lst2, i)\n        if i1 < 0 {\n            i1 = i\n        }\n        if i2\
    \ < 0 {\n            i2 = j\n        }\n        if i1 == j {\n            i1 =\
    \ -1\n        }\n        if i2 == j {\n            i2 = -1\n        }\n      \
    \  if i1 > i2 {\n            i1 = -1\n            i2 = -1\n        }\n    }\n\
    \    \n    // get the subarrays\n    \n    // first array is shorter\n    if i1\
    \ < 0 {\n        return []\n    }\n    let arr1 = lst1[i1..<l1]\n    let arr2\
    \ = lst2[i1..<l2]\n    \n    // second array is longer\n    if i2 < 0 {\n    \
    \    return arr1\n    }\n    \n    // both are longer, so find the one that has\
    \ the max length\n    let l1, l2 = len(arr1), len(arr2)\n    if l1 > l2 {\n  \
    \      return arr1\n    }\n    return arr2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpcdswaudu.swift:63:32: error: consecutive statements on a line must\
    \ be separated by ';'\n    let l1, l2 = len(arr1), len(arr2)\n               \
    \                ^\n                               ;\n/tmp/tmpcdswaudu.swift:19:14:\
    \ error: use of local variable 'len' before its declaration\n    let l1 = len(lst1)\n\
    \             ^\n/tmp/tmpcdswaudu.swift:63:29: note: 'len' declared here\n   \
    \ let l1, l2 = len(arr1), len(arr2)\n                            ^\n/tmp/tmpcdswaudu.swift:20:14:\
    \ error: use of local variable 'len' before its declaration\n    let l2 = len(lst2)\n\
    \             ^\n/tmp/tmpcdswaudu.swift:63:29: note: 'len' declared here\n   \
    \ let l1, l2 = len(arr1), len(arr2)\n                            ^\n/tmp/tmpcdswaudu.swift:63:9:\
    \ error: type annotation missing in pattern\n    let l1, l2 = len(arr1), len(arr2)\n\
    \        ^\n/tmp/tmpcdswaudu.swift:63:18: error: use of local variable 'len' before\
    \ its declaration\n    let l1, l2 = len(arr1), len(arr2)\n                 ^\n\
    /tmp/tmpcdswaudu.swift:63:29: note: 'len' declared here\n    let l1, l2 = len(arr1),\
    \ len(arr2)\n                            ^\n/tmp/tmpcdswaudu.swift:63:29: error:\
    \ type annotation missing in pattern\n    let l1, l2 = len(arr1), len(arr2)\n\
    \                            ^\n/tmp/tmpcdswaudu.swift:29:17: error: cannot find\
    \ 'findIndex' in scope\n        let j = findIndex(lst1, lst2, i)\n           \
    \     ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var a = 0\n    var b = 0\n    for\
    \ _, bstr in lst2.enumerated() {\n        a += count_chars(lst1, bstr)\n    }\n\
    \    for _, astr in lst1.enumerated() {\n        b += count_chars(lst2, astr)\n\
    \    }\n    if a == b {\n        return lst1\n    } else {\n        return find_min(lst1,\
    \ lst2, a, b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwkfaegtd.swift:19:10: error: expected 'in' after for-each pattern\n\
    \    for _, bstr in lst2.enumerated() {\n         ^\n/tmp/tmpwkfaegtd.swift:19:10:\
    \ error: expected Sequence expression for for-each loop\n    for _, bstr in lst2.enumerated()\
    \ {\n         ^\n/tmp/tmpwkfaegtd.swift:22:10: error: expected 'in' after for-each\
    \ pattern\n    for _, astr in lst1.enumerated() {\n         ^\n/tmp/tmpwkfaegtd.swift:22:10:\
    \ error: expected Sequence expression for for-each loop\n    for _, astr in lst1.enumerated()\
    \ {\n         ^\n/tmp/tmpwkfaegtd.swift:28:16: error: cannot find 'find_min' in\
    \ scope\n        return find_min(lst1, lst2, a, b)\n               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    var\
    \ j = 0\n    for i in 0 ..< lst1.count {\n        if j < lst2.count {\n      \
    \      if lst1[i] < lst2[j] {\n                result.append(lst1[i])\n      \
    \      } else {\n                result.append(lst2[j])\n            }\n     \
    \       j++\n        } else {\n            result.append(lst1[i])\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpi19ntsh5.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            j++\n             ^~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if len(lst1) == 0 {\n        return\
    \ lst2\n    }\n    if len(lst2) == 0 {\n        return lst1\n    }\n    if lst1[0]\
    \ < lst2[0] {\n        return total_match(lst1[1:], lst2)\n    } else {\n    \
    \    return total_match(lst1, lst2[1:])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp0ca25v32.swift:24:34: error: expected ',' separator\n        return\
    \ total_match(lst1[1:], lst2)\n                                 ^\n          \
    \                       ,\n/tmp/tmp0ca25v32.swift:24:34: error: expected expression\
    \ in list of expressions\n        return total_match(lst1[1:], lst2)\n       \
    \                          ^\n/tmp/tmp0ca25v32.swift:26:40: error: expected ','\
    \ separator\n        return total_match(lst1, lst2[1:])\n                    \
    \                   ^\n                                       ,\n/tmp/tmp0ca25v32.swift:26:40:\
    \ error: expected expression in list of expressions\n        return total_match(lst1,\
    \ lst2[1:])\n                                       ^\n/tmp/tmp0ca25v32.swift:17:8:\
    \ error: cannot find 'len' in scope\n    if len(lst1) == 0 {\n       ^~~\n/tmp/tmp0ca25v32.swift:20:8:\
    \ error: cannot find 'len' in scope\n    if len(lst2) == 0 {\n       ^~~\n/tmp/tmp0ca25v32.swift:24:27:\
    \ error: missing argument labels 'lst1:lst2:' in call\n        return total_match(lst1[1:],\
    \ lst2)\n                          ^\n                           lst1:     lst2:\
    \ \n/tmp/tmp0ca25v32.swift:24:32: error: cannot convert value of type 'String'\
    \ to expected argument type '[String]'\n        return total_match(lst1[1:], lst2)\n\
    \                               ^\n/tmp/tmp0ca25v32.swift:26:27: error: missing\
    \ argument labels 'lst1:lst2:' in call\n        return total_match(lst1, lst2[1:])\n\
    \                          ^\n                           lst1: lst2: \n/tmp/tmp0ca25v32.swift:26:38:\
    \ error: cannot convert value of type 'String' to expected argument type '[String]'\n\
    \        return total_match(lst1, lst2[1:])\n                                \
    \     ^\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var temp: [String] = []\n    for\
    \ a in lst1 {\n        for b in lst2 {\n            if a < b {\n             \
    \   temp.append(a)\n            }\n        }\n    }\n    return temp\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp17eihyy7/tmp17eihyy7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95f4de7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95f4adeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95f4ade988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95f4add7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17eihyy7                        0x0000555ce250690a <unavailable> + 6410

    5    libc.so.6                          0x00002b95f4fd3460 __libc_start_main +
    245

    6    tmp17eihyy7                        0x0000555ce25062e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\treturn total_match_impl(lst1, lst2,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(total_match(lst1: [] as [String],\
    \ lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\",\
    \ \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpp6qrtboi.swift:17:9: error: cannot find 'total_match_impl' in scope\n\
    \        return total_match_impl(lst1, lst2, 0)\n               ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    lst1.forEach { str1 in\n      \
    \  lst2.forEach { str2 in\n            let count = str1.countOf(str2)\n      \
    \      \n            if count < lst2.count {\n                lst2.remove(at:\
    \ lst2.index(of: str2)!)\n            }\n        }\n    }\n    \n    return lst1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpg3rh76j7.swift:19:30: error: value of type 'String' has no member\
    \ 'countOf'\n            let count = str1.countOf(str2)\n                    \
    \    ~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return total_match_helper(lst1,\
    \ lst2, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpkc4ldsas.swift:17:12: error: cannot find 'total_match_helper' in\
    \ scope\n    return total_match_helper(lst1, lst2, 0)\n           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\tvar result = lst1\n\tfor _, item\
    \ := range lst2 {\n\t\tif !contains(item, result) {\n\t\t\tresult = append(result,\
    \ item)\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp1w6yi19b.swift:18:7: error: expected 'in' after for-each pattern\n\
    \        for _, item := range lst2 {\n             ^\n/tmp/tmp1w6yi19b.swift:18:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, item :=\
    \ range lst2 {\n             ^\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count = 0\n    for elem in\
    \ lst1 {\n        count += elem.characters.count\n    }\n    for elem in lst2\
    \ {\n        count += elem.characters.count\n    }\n    if count == lst1.count\
    \ && count == lst2.count {\n        return lst1\n    }\n    return lst2\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp42fgvgof.swift:19:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        count += elem.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp42fgvgof.swift:22:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        count\
    \ += elem.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp159j4o5n/tmp159j4o5n.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3ef918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3ef60fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3ef60f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3ef60e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp159j4o5n                        0x000055e1ed1916ea <unavailable> + 5866

    5    libc.so.6                          0x00002af3efb04460 __libc_start_main +
    245

    6    tmp159j4o5n                        0x000055e1ed1910c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\t\n\tif lst1.count == 0 {\n\t\treturn\
    \ lst2\n\t} else if lst2.count == 0 {\n\t\treturn lst1\n\t} else if lst1.count\
    \ == lst2.count {\n\t\tfor i : Int in 0..<lst1.count {\n\t\t\tif lst1[i] != lst2[i]\
    \ {\n\t\t\t\treturn []\n\t\t\t}\n\t\t}\n\t\treturn lst1\n\t} else {\n\t\tvar i\
    \ : Int\n\t\tvar count : Int\n\t\tvar tmp : [String] = []\n\t\ttmp.append(\"common\"\
    )\n\t\tvar tmp1 : [String] = []\n\t\ttmp1 = lst1.copy()\n\t\tvar tmp2 : [String]\
    \ = []\n\t\ttmp2 = lst2.copy()\n\t\tfor i : Int in 0..<(lst1.count + lst2.count)\
    \ {\n\t\t\tcount = 1\n\t\t\tif lst1[i] != tmp1[i] {\n\t\t\t\ttmp1 = lst1.copy()\n\
    \t\t\t}\n\t\t\tif lst2[i] != tmp2[i] {\n\t\t\t\ttmp2 = lst2.copy()\n\t\t\t}\n\t\
    \t\twhile count < lst1.count {\n\t\t\t\tif lst1[i] != tmp1[count] {\n\t\t\t\t\t\
    break\n\t\t\t\t}\n\t\t\t\tcount = count + 1\n\t\t\t}\n\t\t\twhile count < lst2.count\
    \ {\n\t\t\t\tif lst2[i] != tmp2[count] {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\t\
    count = count + 1\n\t\t\t}\n\t\t\tif count == lst1.count {\n\t\t\t\ttmp = tmp1.copy()\n\
    \t\t\t\tbreak\n\t\t\t}\n\t\t\tif count == lst2.count {\n\t\t\t\ttmp = tmp2.copy()\n\
    \t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\treturn tmp\n\t}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpansv9afl.swift:35:15: error: value of type '[String]' has no member\
    \ 'copy'\n                tmp1 = lst1.copy()\n                       ~~~~ ^~~~\n\
    /tmp/tmpansv9afl.swift:37:15: error: value of type '[String]' has no member 'copy'\n\
    \                tmp2 = lst2.copy()\n                       ~~~~ ^~~~\n/tmp/tmpansv9afl.swift:41:17:\
    \ error: value of type '[String]' has no member 'copy'\n                     \
    \           tmp1 = lst1.copy()\n                                       ~~~~ ^~~~\n\
    /tmp/tmpansv9afl.swift:44:17: error: value of type '[String]' has no member 'copy'\n\
    \                                tmp2 = lst2.copy()\n                        \
    \               ~~~~ ^~~~\n/tmp/tmpansv9afl.swift:59:16: error: value of type\
    \ '[String]' has no member 'copy'\n                                tmp = tmp1.copy()\n\
    \                                      ~~~~ ^~~~\n/tmp/tmpansv9afl.swift:63:16:\
    \ error: value of type '[String]' has no member 'copy'\n                     \
    \           tmp = tmp2.copy()\n                                      ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let rec total_match_aux (lst1:\
    \ [String], lst2: [String], acc: [String]) -> [String] {\n        if lst1 == lst2\
    \ {\n            return acc\n        }\n        if lst1.count <= lst2.count {\n\
    \            return total_match_aux (lst1, lst2, acc)\n        }\n        return\
    \ total_match_aux (lst2, lst1, acc)\n    }\n    return total_match_aux(lst1, lst2,\
    \ [])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpcrd4s547.swift:17:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let rec total_match_aux\
    \ (lst1: [String], lst2: [String], acc: [String]) -> [String] {\n            ^\n\
    /tmp/tmpcrd4s547.swift:17:13: note: join the identifiers together\n    let rec\
    \ total_match_aux (lst1: [String], lst2: [String], acc: [String]) -> [String]\
    \ {\n        ~~~~^~~~~~~~~~~~~~~\n        rectotal_match_aux\n/tmp/tmpcrd4s547.swift:17:13:\
    \ note: join the identifiers together with camel-case\n    let rec total_match_aux\
    \ (lst1: [String], lst2: [String], acc: [String]) -> [String] {\n        ~~~~^~~~~~~~~~~~~~~\n\
    \        recTotal_match_aux\n/tmp/tmpcrd4s547.swift:17:28: error: consecutive\
    \ statements on a line must be separated by ';'\n    let rec total_match_aux (lst1:\
    \ [String], lst2: [String], acc: [String]) -> [String] {\n                   \
    \        ^\n                           ;\n/tmp/tmpcrd4s547.swift:17:88: error:\
    \ consecutive statements on a line must be separated by ';'\n    let rec total_match_aux\
    \ (lst1: [String], lst2: [String], acc: [String]) -> [String] {\n            \
    \                                                                           ^\n\
    \                                                                            \
    \           ;\n/tmp/tmpcrd4s547.swift:17:9: error: type annotation missing in\
    \ pattern\n    let rec total_match_aux (lst1: [String], lst2: [String], acc: [String])\
    \ -> [String] {\n        ^\n/tmp/tmpcrd4s547.swift:17:29: error: expected member\
    \ name or constructor call after type name\n    let rec total_match_aux (lst1:\
    \ [String], lst2: [String], acc: [String]) -> [String] {\n                   \
    \         ^\n/tmp/tmpcrd4s547.swift:17:87: note: use '.self' to reference the\
    \ type object\n    let rec total_match_aux (lst1: [String], lst2: [String], acc:\
    \ [String]) -> [String] {\n                                                  \
    \                                    ^\n                            (        \
    \                                                  ).self\n/tmp/tmpcrd4s547.swift:17:29:\
    \ warnin"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let max_len = lst1.count\n    return\
    \ lst2.count == lst1.count ? lst1 : lst2\n        .enumerated()\n        .map\
    \ { index, value in\n            if index < lst1.count {\n                return\
    \ value.characters.count\n            } else {\n                if value.characters.count\
    \ > max_len {\n                    return max_len\n                } else {\n\
    \                    return value.characters.count\n                }\n      \
    \      }\n        }.sorted().reduce(total_match(0, max_len), +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpkxxph78b.swift:18:37: error: cannot convert return expression of\
    \ type 'Int' to return type '[String]'\n    return lst2.count == lst1.count ?\
    \ lst1 : lst2\n           ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmpkxxph78b.swift:30:27:\
    \ error: cannot convert value of type '[String]' to expected argument type 'Int'\n\
    \        }.sorted().reduce(total_match(0, max_len), +)\n                     \
    \     ^\n/tmp/tmpkxxph78b.swift:30:38: error: missing argument labels 'lst1:lst2:'\
    \ in call\n        }.sorted().reduce(total_match(0, max_len), +)\n           \
    \                          ^\n                                      lst1:  lst2:\
    \ \n/tmp/tmpkxxph78b.swift:30:42: error: cannot convert value of type 'Int' to\
    \ expected argument type '[String]'\n        }.sorted().reduce(total_match(0,\
    \ max_len), +)\n                                         ^\n/tmp/tmpkxxph78b.swift:30:39:\
    \ error: cannot convert value of type 'Int' to expected argument type '[String]'\n\
    \        }.sorted().reduce(total_match(0, max_len), +)\n                     \
    \                 ^\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return arrToString(matchFunc(lst1,\
    \ lst2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpcvw1tg80.swift:17:12: error: cannot find 'arrToString' in scope\n\
    \    return arrToString(matchFunc(lst1, lst2))\n           ^~~~~~~~~~~\n/tmp/tmpcvw1tg80.swift:17:24:\
    \ error: cannot find 'matchFunc' in scope\n    return arrToString(matchFunc(lst1,\
    \ lst2))\n                       ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst2.reduce([], { $0.addAll($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(total_match(lst1: [] as [String],\
    \ lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\",\
    \ \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpxd4_3xvs.swift:17:33: error: value of type '[String]' has no member\
    \ 'addAll'\n    return lst2.reduce([], { $0.addAll($1) })\n                  \
    \           ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count != lst2.count {\n\
    \        return lst1\n    }\n\n    for i in 0 ..< lst1.count {\n        if !lst1[i].startsWith(lst2[i])\
    \ {\n            return lst1\n        }\n    }\n\n    return lst2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmph4gzpybj.swift:22:21: error: value of type 'String' has no member\
    \ 'startsWith'\n        if !lst1[i].startsWith(lst2[i]) {\n            ~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    var\
    \ j = 0\n    for i in 0 ..< lst1.count {\n        if j < lst2.count {\n      \
    \      if lst1[i] < lst2[j] {\n                result.append(lst1[i])\n      \
    \          j++\n            } else {\n                result.append(lst2[j])\n\
    \            }\n        } else {\n            result.append(lst1[i])\n       \
    \ }\n    }\n    if j < lst2.count {\n        result += lst2[0 ..< j]\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmppi6xe9li.swift:23:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                j++\n                 ^~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\treturn append(append(lst1, []), append(lst2,\
    \ []))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp1o5nakdm.swift:17:9: error: cannot find 'append' in scope\n   \
    \     return append(append(lst1, []), append(lst2, []))\n               ^~~~~~\n\
    /tmp/tmp1o5nakdm.swift:17:16: error: cannot find 'append' in scope\n        return\
    \ append(append(lst1, []), append(lst2, []))\n                      ^~~~~~\n/tmp/tmp1o5nakdm.swift:17:34:\
    \ error: cannot find 'append' in scope\n        return append(append(lst1, []),\
    \ append(lst2, []))\n                                        ^~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\t\n\tvar i int = 0\n\tvar j int =\
    \ 0\n\t\n\tvar result [String] = []\n\t\n\tfor _, x := range lst1 {\n\t\tif lst2[i]\
    \ < x {\n\t\t\ti++\n\t\t\tcontinue\n\t\t}\n\t\tresult = append(result, x)\n\t\t\
    i++\n\t}\n\t\n\tif j == len(lst2) {\n\t\treturn result\n\t}\n\t\n\tfor _, x :=\
    \ range lst2 {\n\t\tif lst1[j] < x {\n\t\t\tj++\n\t\t\tcontinue\n\t\t}\n\t\tresult\
    \ = append(result, x)\n\t\tj++\n\t}\n\t\n\treturn result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpsy2v57c9.swift:18:8: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n        var i int =\
    \ 0\n              ^\n/tmp/tmpsy2v57c9.swift:18:8: note: join the identifiers\
    \ together\n        var i int = 0\n            ~~^~~\n            iint\n/tmp/tmpsy2v57c9.swift:18:8:\
    \ note: join the identifiers together with camel-case\n        var i int = 0\n\
    \            ~~^~~\n            iInt\n/tmp/tmpsy2v57c9.swift:19:8: error: found\
    \ an unexpected second identifier in variable declaration; is there an accidental\
    \ break?\n        var j int = 0\n              ^\n/tmp/tmpsy2v57c9.swift:19:8:\
    \ note: join the identifiers together\n        var j int = 0\n            ~~^~~\n\
    \            jint\n/tmp/tmpsy2v57c9.swift:19:8: note: join the identifiers together\
    \ with camel-case\n        var j int = 0\n            ~~^~~\n            jInt\n\
    /tmp/tmpsy2v57c9.swift:21:12: error: consecutive statements on a line must be\
    \ separated by ';'\n        var result [String] = []\n                  ^\n  \
    \                ;\n/tmp/tmpsy2v57c9.swift:23:7: error: expected 'in' after for-each\
    \ pattern\n        for _, x := range lst1 {\n             ^\n/tmp/tmpsy2v57c9.swift:23:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, x := range\
    \ lst1 {\n             ^\n/tmp/tmpsy2v57c9.swift:36:7: error: expected 'in' after\
    \ for-each pattern\n        for _, x := range lst2 {\n             ^\n/tmp/tmpsy2v57c9.swift:36:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, x := range\
    \ lst2 {\n             ^\n/tmp/tmpsy2v57c9.swift:21:6: error: type annotation\
    \ missing in pattern\n        var result [String] = []\n            ^\n/tmp/tmpsy2v57c9.swift:21:13:\
    \ error: cannot assign to immutable expression of type '[String].Type'\n     \
    \   var result [String] = []\n                   ^~~~~~~~\n/tmp/tmpsy2v57c9.swift:21:24:\
    \ error: cannot assign value of type '[Any]' to type '[String].Type'\n       \
    \ var result [String] = []\n                              ^~\n/tmp/tmpsy2v57c9.swift:32:10:\
    \ error: cannot find 'len' in scope\n        if j == l"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if (lst1.count == 0 && lst2.count\
    \ == 0) || (lst1.count == 0 && lst2.count != 0) || (lst1.count != 0 && lst2.count\
    \ == 0) {\n        return lst1\n    }\n\n    var l1 = total_len(lst1)\n    var\
    \ l2 = total_len(lst2)\n    var maxLen = max(l1, l2)\n    var result = [String]()\n\
    \    var i = 0\n    \n    for (i; i < maxLen && i < lst1.count && i < lst2.count;\
    \ i++ ) {\n        if !contains(lst1[i], lst2[i]) {\n            break\n     \
    \   }\n    }\n    \n    for (i; i < lst1.count && i < lst2.count; i++ ) {\n  \
    \      if !contains(lst2[i], lst1[i]) {\n            break\n        }\n    }\n\
    \    \n    for (i; i < lst1.count; i++ ) {\n        result.append(lst1[i])\n \
    \   }\n    \n    for (i; i < lst2.count; i++ ) {\n        result.append(lst2[i])\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpaxy7q8su.swift:27:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for (i; i < maxLen && i < lst1.count && i < lst2.count; i++\
    \ ) {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaxy7q8su.swift:33:5:\
    \ error: C-style for statement has been removed in Swift 3\n    for (i; i < lst1.count\
    \ && i < lst2.count; i++ ) {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpaxy7q8su.swift:39:5: error: C-style for statement has been removed in\
    \ Swift 3\n    for (i; i < lst1.count; i++ ) {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpaxy7q8su.swift:43:5: error: C-style for statement has been removed in\
    \ Swift 3\n    for (i; i < lst2.count; i++ ) {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpaxy7q8su.swift:21:14: error: cannot find 'total_len' in scope\n    var\
    \ l1 = total_len(lst1)\n             ^~~~~~~~~\n/tmp/tmpaxy7q8su.swift:22:14:\
    \ error: cannot find 'total_len' in scope\n    var l2 = total_len(lst2)\n    \
    \         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    \n    if lst1.count == lst2.count\
    \ {\n        return lst1\n    }\n    \n    var total: Int64 = 0\n    \n    for\
    \ _,i in enumerate(lst1) {\n        for _, j in enumerate(lst2) {\n          \
    \  if i >= j {\n                total += 1\n            }\n        }\n    }\n\
    \    \n    return lst1[total ..< lst1.count]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwkcioywt.swift:24:10: error: expected 'in' after for-each pattern\n\
    \    for _,i in enumerate(lst1) {\n         ^\n/tmp/tmpwkcioywt.swift:24:10: error:\
    \ expected Sequence expression for for-each loop\n    for _,i in enumerate(lst1)\
    \ {\n         ^\n/tmp/tmpwkcioywt.swift:25:14: error: expected 'in' after for-each\
    \ pattern\n        for _, j in enumerate(lst2) {\n             ^\n/tmp/tmpwkcioywt.swift:25:14:\
    \ error: expected Sequence expression for for-each loop\n        for _, j in enumerate(lst2)\
    \ {\n             ^\n/tmp/tmpwkcioywt.swift:32:16: error: cannot convert return\
    \ expression of type 'ArraySlice<String>' to return type '[String]'\n    return\
    \ lst1[total ..< lst1.count]\n           ~~~~^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwkcioywt.swift:32:17:\
    \ error: cannot convert value of type 'Int64' to expected argument type 'Int'\n\
    \    return lst1[total ..< lst1.count]\n                ^\n                Int(\
    \ )\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: '/tmp/tmpe7xbt_5d.swift:18:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // Write your code here.\n    var\
    \ char_count = [Int]()\n    for i in 0 ..< lst1.count {\n        if lst1[i] <\
    \ lst2[i] {\n            char_count.append(lst1[i].count)\n        } else {\n\
    \            char_count.append(lst2[i].count)\n        }\n    }\n    if char_count\
    \ == [] {\n        return lst1\n    } else {\n        return lst1[i...min_element(char_count...)]\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpl1thxeli.swift:29:21: error: cannot find 'i' in scope\n       \
    \ return lst1[i...min_element(char_count...)]\n                    ^\n/tmp/tmpl1thxeli.swift:29:25:\
    \ error: cannot find 'min_element' in scope\n        return lst1[i...min_element(char_count...)]\n\
    \                        ^~~~~~~~~~~\n/tmp/tmpl1thxeli.swift:29:20: error: cannot\
    \ convert return expression of type 'ArraySlice<String>' to return type '[String]'\n\
    \        return lst1[i...min_element(char_count...)]\n               ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpl1thxeli.swift:29:37: error: cannot convert value of type '[Int]' to expected\
    \ argument type 'UnboundedRange_'\n        return lst1[i...min_element(char_count...)]\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    } else {\n        if lst1.isEmpty {\n            return\
    \ lst2\n        } else {\n            return lst2\n        }\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpr0xtbvlx/tmpr0xtbvlx.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8848abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8845a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8845a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8845a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0xtbvlx                        0x000055e5243a37da <unavailable> + 6106

    5    libc.so.6                          0x00002af884a97460 __libc_start_main +
    245

    6    tmpr0xtbvlx                        0x000055e5243a31b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let res = 0\n    for i in 0..<(lst1.count)\
    \ {\n        res += lst1.count - i\n    }\n    for i in 0..<(lst2.count) {\n \
    \       res += lst2.count - i\n    }\n    if res == lst1.count {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp5lvvw3vp.swift:19:13: error: left side of mutating operator isn't\
    \ mutable: 'res' is a 'let' constant\n        res += lst1.count - i\n        ~~~\
    \ ^\n/tmp/tmp5lvvw3vp.swift:17:5: note: change 'let' to 'var' to make it mutable\n\
    \    let res = 0\n    ^~~\n    var\n/tmp/tmp5lvvw3vp.swift:22:13: error: left\
    \ side of mutating operator isn't mutable: 'res' is a 'let' constant\n       \
    \ res += lst2.count - i\n        ~~~ ^\n/tmp/tmp5lvvw3vp.swift:17:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let res = 0\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // TODO: write your code in JavaScript\
    \ (Node.js)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: '/tmp/tmpbsi50aqp.swift:18:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\tdefer func() {\n\t\tif e := recover();\
    \ e != nil {\n\t\t\tpanic(e)\n\t\t}\n\t}()\n\tlst3 := make([]string, len(lst1))\n\
    \tcopy(lst3, lst1)\n\ti := 0\n\tfor i < len(lst2) && (len(lst3) < (len(lst1) +\
    \ len(lst2))) {\n\t\tlst3[len(lst3)] = lst2[i]\n\t\ti += 1\n\t}\n\tif i >= len(lst2)\
    \ {\n\t\treturn lst3\n\t}\n\tfor i < len(lst2) {\n\t\tlst3[len(lst3)] = lst2[i]\n\
    \t\ti += 1\n\t}\n\treturn lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpuh5vx6ri.swift:17:8: error: expected '{' after 'defer'\n      \
    \  defer func() {\n              ^\n/tmp/tmpuh5vx6ri.swift:18:8: error: expected\
    \ '{' after 'if' condition\n                if e := recover(); e != nil {\n  \
    \                   ^\n/tmp/tmpuh5vx6ri.swift:21:3: error: consecutive statements\
    \ on a line must be separated by ';'\n        }()\n         ^\n         ;\n/tmp/tmpuh5vx6ri.swift:22:6:\
    \ error: consecutive statements on a line must be separated by ';'\n        lst3\
    \ := make([]string, len(lst1))\n            ^\n            ;\n/tmp/tmpuh5vx6ri.swift:22:7:\
    \ error: expected expression\n        lst3 := make([]string, len(lst1))\n    \
    \         ^\n/tmp/tmpuh5vx6ri.swift:25:8: error: expected 'in' after for-each\
    \ pattern\n        for i < len(lst2) && (len(lst3) < (len(lst1) + len(lst2)))\
    \ {\n              ^\n/tmp/tmpuh5vx6ri.swift:25:8: error: unary operator cannot\
    \ be separated from its operand\n        for i < len(lst2) && (len(lst3) < (len(lst1)\
    \ + len(lst2))) {\n              ^~\n               \n/tmp/tmpuh5vx6ri.swift:32:8:\
    \ error: expected 'in' after for-each pattern\n        for i < len(lst2) {\n \
    \             ^\n/tmp/tmpuh5vx6ri.swift:32:8: error: unary operator cannot be\
    \ separated from its operand\n        for i < len(lst2) {\n              ^~\n\
    \               \n/tmp/tmpuh5vx6ri.swift:18:6: error: cannot find 'e' in scope\n\
    \                if e := recover(); e != nil {\n                   ^\n/tmp/tmpuh5vx6ri.swift:19:4:\
    \ error: cannot find 'panic' in scope\n                        panic(e)\n    \
    \                    ^~~~~\n/tmp/tmpuh5vx6ri.swift:19:10: error: cannot find 'e'\
    \ in scope\n                        panic(e)\n                              ^\n\
    /tmp/tmpuh5vx6ri.swift:22:2: error: cannot find 'lst3' in scope\n        lst3\
    \ := make([]string, len(lst1))\n        ^~~~\n/tmp/tmpuh5vx6ri.swift:25:8: error:\
    \ '<' is not a prefix unary operator\n        for i < len(lst2) && (len(lst3)\
    \ < (len(lst1) + len(lst2))) {\n              ^\n/tmp/tmpuh5vx6ri.swift:25:10:\
    \ error: cannot find 'len' in scope\n        for i < len(lst2) && (len(lst3) <\
    \ (len(lst1) + len(lst2)))"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if let num1 = lst1.count, let num2\
    \ = lst2.count {\n        if num1 == num2 {\n            return lst1\n       \
    \ }\n        return lst2\n    }\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpvhk_mv_n.swift:17:8: error: initializer for conditional binding\
    \ must have Optional type, not 'Int'\n    if let num1 = lst1.count, let num2 =\
    \ lst2.count {\n       ^          ~~~~~~~~~~\n/tmp/tmpvhk_mv_n.swift:17:31: error:\
    \ initializer for conditional binding must have Optional type, not 'Int'\n   \
    \ if let num1 = lst1.count, let num2 = lst2.count {\n                        \
    \      ^          ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // code goes here\n    var new_lst\
    \ = [String]()\n    for index in 0..<min(len(lst1), len(lst2)) {\n        if lst1[index]\
    \ < lst2[index] {\n            new_lst.insert(index, lst1[index])\n        } else\
    \ {\n            new_lst.insert(index, lst2[index])\n        }\n    }\n    return\
    \ new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpaiwx8823.swift:19:26: error: cannot find 'len' in scope\n    for\
    \ index in 0..<min(len(lst1), len(lst2)) {\n                         ^~~\n/tmp/tmpaiwx8823.swift:19:37:\
    \ error: cannot find 'len' in scope\n    for index in 0..<min(len(lst1), len(lst2))\
    \ {\n                                    ^~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var charsFound = 0\n    lst2.forEach\
    \ {\n        if lst1.contains(it) {\n            charsFound = charsFound + it.toInt()\n\
    \        }\n    }\n    if charsFound == charsAvailable(lst1.count, lst2.count)\
    \ {\n        return lst1\n    }\n    else {\n        return nil\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpx776bs75.swift:19:26: error: cannot find 'it' in scope\n      \
    \  if lst1.contains(it) {\n                         ^~\n/tmp/tmpx776bs75.swift:20:39:\
    \ error: cannot find 'it' in scope\n            charsFound = charsFound + it.toInt()\n\
    \                                      ^~\n/tmp/tmpx776bs75.swift:23:22: error:\
    \ cannot find 'charsAvailable' in scope\n    if charsFound == charsAvailable(lst1.count,\
    \ lst2.count) {\n                     ^~~~~~~~~~~~~~\n/tmp/tmpx776bs75.swift:27:16:\
    \ error: 'nil' is incompatible with return type '[String]'\n        return nil\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\treturn unique_chars(arr: lst1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp52bn65uc.swift:17:9: error: cannot find 'unique_chars' in scope\n\
    \        return unique_chars(arr: lst1)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var _: Int\n    var _: Int\n  \
    \  var max1 = 0\n    var max2 = 0\n    var res: Array<String> = Array()\n    for\
    \ _ in 0..<min(lst1.count, lst2.count) {\n        if max1 < lst1[_].length { max1\
    \ = lst1[_].length }\n        if max2 < lst2[_].length { max2 = lst2[_].length\
    \ }\n    }\n    for _ in 0..<min(lst1.count, lst2.count) {\n        res.append(String(repeatElement(\"\
    \ \", max1 - lst1[_].count) + lst1[_]))\n        res.append(String(repeatElement(\"\
    \ \", max2 - lst2[_].count) + lst2[_]))\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmprgh3zfxp.swift:23:24: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n        if max1 < lst1[_].length { max1 =\
    \ lst1[_].length }\n                       ^\n/tmp/tmprgh3zfxp.swift:23:48: error:\
    \ '_' can only appear in a pattern or on the left side of an assignment\n    \
    \    if max1 < lst1[_].length { max1 = lst1[_].length }\n                    \
    \                           ^\n/tmp/tmprgh3zfxp.swift:24:24: error: '_' can only\
    \ appear in a pattern or on the left side of an assignment\n        if max2 <\
    \ lst2[_].length { max2 = lst2[_].length }\n                       ^\n/tmp/tmprgh3zfxp.swift:24:48:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \        if max2 < lst2[_].length { max2 = lst2[_].length }\n                \
    \                               ^\n/tmp/tmprgh3zfxp.swift:27:58: error: '_' can\
    \ only appear in a pattern or on the left side of an assignment\n        res.append(String(repeatElement(\"\
    \ \", max1 - lst1[_].count) + lst1[_]))\n                                    \
    \                     ^\n/tmp/tmprgh3zfxp.swift:28:58: error: '_' can only appear\
    \ in a pattern or on the left side of an assignment\n        res.append(String(repeatElement(\"\
    \ \", max2 - lst2[_].count) + lst2[_]))\n                                    \
    \                     ^\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\tvar i1 = lst1.count {\n\t\t!isEmpty($0)\n\
    \t}\n\tvar i2 = lst2.count {\n\t\t!isEmpty($0)\n\t}\n\tif i1 == i2 {\n\t\treturn\
    \ lst1\n\t} else if i1 > i2 {\n\t\treturn lst1\n\t} else {\n\t\treturn lst2\n\t\
    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp29wsklsq.swift:18:4: error: cannot find 'isEmpty' in scope\n  \
    \              !isEmpty($0)\n                 ^~~~~~~\n/tmp/tmp29wsklsq.swift:21:4:\
    \ error: cannot find 'isEmpty' in scope\n                !isEmpty($0)\n      \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    \n    if lst1 == lst2 {\n     \
    \   return lst1\n    }\n    var total_char = lst1.count\n    \n    for i in 0..<lst2.count\
    \ {\n        let temp_char = lst2[i].count\n        if total_char < temp_char\
    \ {\n            total_char = temp_char\n        }\n    }\n    return lst1\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp5spirax4/tmp5spirax4.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad22cf6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad22cc62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad22cc62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad22cc617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5spirax4                        0x0000564ee6e9f96a <unavailable> + 6506

    5    libc.so.6                          0x00002ad22d157460 __libc_start_main +
    245

    6    tmp5spirax4                        0x0000564ee6e9f349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1.filter({\n        i\
    \ in\n        if lst2.contains(i) {\n            return true\n        }\n    \
    \    return false\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp_2or5et9/tmp_2or5et9.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bcc4f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bcc1ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bcc1ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bcc1eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_2or5et9                        0x00005651b527581a <unavailable> + 6170

    5    libc.so.6                          0x00002b0bcc6e1460 __libc_start_main +
    245

    6    tmp_2or5et9                        0x00005651b52751f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var matches = lst1.map { element\
    \ in\n        if lst2.contains( element ) {\n            return element\n    \
    \    } else {\n            return \"\"\n        }\n    }\n    return matches\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpi1c5_7wk/tmpi1c5_7wk.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7be6b32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7be6829b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7be6829988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7be68287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1c5_7wk                        0x0000557740fe07fa <unavailable> + 6138

    5    libc.so.6                          0x00002b7be6d1e460 __libc_start_main +
    245

    6    tmpi1c5_7wk                        0x0000557740fe01d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var res: [String] = []\n    var\
    \ cnt: Int = 0\n    for i in 0 ..< min(lst1.count, lst2.count) {\n        if lst1[i]\
    \ < lst2[i] {\n            cnt += 1\n        } else {\n            cnt += 0\n\
    \        }\n    }\n    if cnt == 0 {\n        return res\n    }\n    for i in\
    \ 0 ..< min(lst1.count, lst2.count) {\n        if lst1[i] < lst2[i] {\n      \
    \      res.append(lst1[i])\n        } else {\n            res.append(lst2[i])\n\
    \        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbjixp01z/tmpbjixp01z.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af05d007c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af05ccfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af05ccfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af05ccfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbjixp01z                        0x000055e346b5ba5a <unavailable> + 6746

    5    libc.so.6                          0x00002af05d1f3460 __libc_start_main +
    245

    6    tmpbjixp01z                        0x000055e346b5b439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1.sorted().map { (s)\
    \ in lst2.sorted().filter { $0 < s } }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpe9y0sdo7.swift:17:53: error: cannot convert value of type '[String]'\
    \ to closure result type 'String'\n    return lst1.sorted().map { (s) in lst2.sorted().filter\
    \ { $0 < s } }\n                                      ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var arr = [String]()\n    \n  \
    \  for i in 0 ..< min(lst1.count, lst2.count) {\n        if lst1[i] < lst2[i]\
    \ {\n            arr += [lst1[i]]\n        } else {\n            arr += [lst2[i]]\n\
    \        }\n    }\n    \n    if lst1.count < lst2.count {\n        arr += lst1\n\
    \    } else {\n        arr += lst2\n    }\n    \n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpvr71e7_k/tmpvr71e7_k.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daedafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daeaa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daeaa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daeaa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr71e7_k                        0x000055989dc2daba <unavailable> + 6842

    5    libc.so.6                          0x00002b8daef9b460 __libc_start_main +
    245

    6    tmpvr71e7_k                        0x000055989dc2d499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for i in\
    \ 0..<min(len(lst1), len(lst2)) {\n        if lst1[i] != lst2[i] {\n         \
    \   break\n        }\n        if i == len(lst1) {\n            break\n       \
    \ }\n    }\n    if i == len(lst1) {\n        result = lst2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp0hp2mlb_.swift:18:22: error: cannot find 'len' in scope\n    for\
    \ i in 0..<min(len(lst1), len(lst2)) {\n                     ^~~\n/tmp/tmp0hp2mlb_.swift:18:33:\
    \ error: cannot find 'len' in scope\n    for i in 0..<min(len(lst1), len(lst2))\
    \ {\n                                ^~~\n/tmp/tmp0hp2mlb_.swift:26:8: error:\
    \ cannot find 'i' in scope\n    if i == len(lst1) {\n       ^\n/tmp/tmp0hp2mlb_.swift:26:13:\
    \ error: cannot find 'len' in scope\n    if i == len(lst1) {\n            ^~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return total_match_with(lst1, lst2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp81l2br5k.swift:17:12: error: cannot find 'total_match_with' in\
    \ scope\n    return total_match_with(lst1, lst2)\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1 == lst2 {\n        return\
    \ lst1\n    }\n    \n    var lst = lst1\n    for x in lst2 {\n        lst = lst.filter\
    \ { (y) -> Bool in\n            return y < x\n        }\n    }\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmplggee315/tmplggee315.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6740769c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6740460b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6740460988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b674045f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplggee315                        0x0000563f709f497a <unavailable> + 6522

    5    libc.so.6                          0x00002b6740955460 __libc_start_main +
    245

    6    tmplggee315                        0x0000563f709f4359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpttwe14hc/tmpttwe14hc.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6632867c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b663255eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b663255e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b663255d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpttwe14hc                        0x000056032ac0f74a <unavailable> + 5962

    5    libc.so.6                          0x00002b6632a53460 __libc_start_main +
    245

    6    tmpttwe14hc                        0x000056032ac0f129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count = [Int](0...(lst1.count)).map({\
    \ count[$0] = 0 })\n    var total = 0\n    for (index, element) in lst1.enumerate()\
    \ {\n        let str = String(element)\n        count[str!]!++\n        total\
    \ += str.count\n        if total == lst2.count {\n            return lst2[index...].filter({\
    \ str in count[str!] == count[str] })\n        }\n    }\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpnt9ofpbr.swift:17:41: error: type of expression is ambiguous without\
    \ more context\n    var count = [Int](0...(lst1.count)).map({ count[$0] = 0 })\n\
    \                ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnt9ofpbr.swift:19:34:\
    \ error: value of type '[String]' has no member 'enumerate'\n    for (index, element)\
    \ in lst1.enumerate() {\n                            ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total = [String]()\n    for\
    \ ele1 in lst1 {\n        var total2 = 0\n        for ele2 in lst2 {\n       \
    \     if ele2 > ele1 {\n                total2 += 1\n            }\n        }\n\
    \        if total2 < len(lst2) {\n            total = append(total, ele1)\n  \
    \      }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpufr375r1.swift:25:21: error: cannot find 'len' in scope\n     \
    \   if total2 < len(lst2) {\n                    ^~~\n/tmp/tmpufr375r1.swift:26:21:\
    \ error: cannot find 'append' in scope\n            total = append(total, ele1)\n\
    \                    ^~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n  var max = 0\n  var result = lst1\n\
    \  for i := 0; i < len(lst1); i++ {\n    max = max(max, lst1[i].count)\n  }\n\
    \  for i := 0; i < len(lst2); i++ {\n    max = max(max, lst2[i].count)\n  }\n\
    \  for i := 0; i < len(lst1); i++ {\n    if lst1[i].count < lst2[max].count {\n\
    \      result = append(result, lst1[i])\n    }\n  }\n  return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp70_wf1xm.swift:19:10: error: expected type\n  for i := 0; i < len(lst1);\
    \ i++ {\n         ^\n          <#type#>\n/tmp/tmp70_wf1xm.swift:19:10: error:\
    \ expected 'in' after for-each pattern\n  for i := 0; i < len(lst1); i++ {\n \
    \        ^\n/tmp/tmp70_wf1xm.swift:19:10: error: expected Sequence expression\
    \ for for-each loop\n  for i := 0; i < len(lst1); i++ {\n         ^\n/tmp/tmp70_wf1xm.swift:22:10:\
    \ error: expected type\n  for i := 0; i < len(lst2); i++ {\n         ^\n     \
    \     <#type#>\n/tmp/tmp70_wf1xm.swift:22:10: error: expected 'in' after for-each\
    \ pattern\n  for i := 0; i < len(lst2); i++ {\n         ^\n/tmp/tmp70_wf1xm.swift:22:10:\
    \ error: expected Sequence expression for for-each loop\n  for i := 0; i < len(lst2);\
    \ i++ {\n         ^\n/tmp/tmp70_wf1xm.swift:25:10: error: expected type\n  for\
    \ i := 0; i < len(lst1); i++ {\n         ^\n          <#type#>\n/tmp/tmp70_wf1xm.swift:25:10:\
    \ error: expected 'in' after for-each pattern\n  for i := 0; i < len(lst1); i++\
    \ {\n         ^\n/tmp/tmp70_wf1xm.swift:25:10: error: expected Sequence expression\
    \ for for-each loop\n  for i := 0; i < len(lst1); i++ {\n         ^\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst = lst1.sorted()\n    if\
    \ lst.count == 0 {\n        return lst\n    }\n    var lst2 = lst2.sorted()\n\
    \    var res = lst\n    for index in 0..<lst.count {\n        if lst[index] !=\
    \ lst2[index] {\n            if lst.count == 1 {\n                return [String(lst[0])]\
    \ as [String]\n            }\n            res = lst\n            lst = lst2\n\
    \            lst2 = lst\n            index--\n        } else {\n            lst2[index]\
    \ = \"\"\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpcmmu1ns9.swift:31:18: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n            index--\n                 ^~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\treturn lst1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6vl658tg/tmp6vl658tg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2975714c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b297540bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b297540b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b297540a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vl658tg                        0x0000555fc6b9f6ea <unavailable> + 5866

    5    libc.so.6                          0x00002b2975900460 __libc_start_main +
    245

    6    tmp6vl658tg                        0x0000555fc6b9f0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    \n\
    \    if lst1.count == lst2.count {\n        for char in lst1 {\n            if\
    \ !lst2.contains(char) {\n                result.insert(char, char)\n        \
    \    }\n        }\n    }\n    else {\n        for char in lst1 {\n           \
    \ if lst2.contains(char) {\n                result.insert(char, char)\n      \
    \      }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp7xa10fji.swift:22:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(char, char)\n               \
    \        ^\n/tmp/tmp7xa10fji.swift:22:24: note: candidate has partially matching\
    \ parameter list (__owned String, at: Int)\n                result.insert(char,\
    \ char)\n                       ^\n/tmp/tmp7xa10fji.swift:22:24: note: candidate\
    \ has partially matching parameter list (__owned String, at: Array<String>.Index)\n\
    \                result.insert(char, char)\n                       ^\n/tmp/tmp7xa10fji.swift:29:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(char, char)\n                       ^\n/tmp/tmp7xa10fji.swift:29:24:\
    \ note: candidate has partially matching parameter list (__owned String, at: Int)\n\
    \                result.insert(char, char)\n                       ^\n/tmp/tmp7xa10fji.swift:29:24:\
    \ note: candidate has partially matching parameter list (__owned String, at: Array<String>.Index)\n\
    \                result.insert(char, char)\n                       ^\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    let chars1 = lst1.count\n    let chars2 = lst2.count\n\
    \    if chars1 == chars2 {\n        return lst1\n    }\n    let sorted = lst1.sorted(by:\
    \ { (a, b) -> Bool in\n        return a < b\n    })\n    let result: [String]\
    \ = []\n    for i in 0..<chars2 {\n        let temp = [String]()\n        for\
    \ j in 0..<chars1 {\n            if sorted[j] == lst2[i] {\n                temp.append(sorted[j])\n\
    \            }\n        }\n        if temp.count == chars1 {\n            result.append(temp)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpuonu2ips.swift:33:22: error: cannot use mutating member on immutable\
    \ value: 'temp' is a 'let' constant\n                temp.append(sorted[j])\n\
    \                ~~~~ ^\n/tmp/tmpuonu2ips.swift:30:9: note: change 'let' to 'var'\
    \ to make it mutable\n        let temp = [String]()\n        ^~~\n        var\n\
    /tmp/tmpuonu2ips.swift:37:20: error: no exact matches in call to instance method\
    \ 'append'\n            result.append(temp)\n                   ^\n/tmp/tmpuonu2ips.swift:37:20:\
    \ note: found candidate with type '(__owned [String]) -> ()'\n            result.append(temp)\n\
    \                   ^\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // TODO: optimize using .contains\
    \ on the strings\n    // TODO: cache the result for speed\n    var total_cnt:\
    \ Int = 0\n    for (_,s) in lst2 {\n        let i = lst1.index(of: s)\n      \
    \  let j = lst2.index(of: s)\n        if i != j {\n            total_cnt += 1\n\
    \        }\n    }\n    if total_cnt == 0 {\n        return lst1\n    } else {\n\
    \        return lst1.prefix(max(total_cnt, lst1.count - lst2.count))\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpdqz5lbs_.swift:20:18: error: tuple pattern cannot match values\
    \ of non-tuple type 'String'\n    for (_,s) in lst2 {\n                 ^\n/tmp/tmpdqz5lbs_.swift:30:21:\
    \ error: no 'prefix' candidates produce the expected contextual result type '[String]'\n\
    \        return lst1.prefix(max(total_cnt, lst1.count - lst2.count))\n       \
    \             ^\nSwift.Sequence:7:40: note: 'prefix' produces 'PrefixSequence<[String]>',\
    \ not the expected contextual result type '[String]'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> PrefixSequence<Self>\n                    \
    \                   ^\nSwift.Sequence:7:40: note: 'prefix' produces 'PrefixSequence<[String]>',\
    \ not the expected contextual result type '[String]'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> PrefixSequence<Self>\n                    \
    \                   ^\nSwift.Sequence:7:40: note: 'prefix' produces 'PrefixSequence<[String]>',\
    \ not the expected contextual result type '[String]'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> PrefixSequence<Self>\n                    \
    \                   ^\nSwift.Sequence:7:40: note: 'prefix' produces 'PrefixSequence<[String]>',\
    \ not the expected contextual result type '[String]'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> PrefixSequence<Self>\n                    \
    \                   ^\nSwift.Sequence:7:40: note: 'prefix' produces 'PrefixSequence<[String]>',\
    \ not the expected contextual result type '[String]'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> PrefixSequence<Self>\n                    \
    \                   ^\nSwift.Sequence:7:40: note: 'prefix' produces 'PrefixSequence<[String]>',\
    \ not the expected contextual result type '[String]'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> PrefixSequence<Self>\n                    \
    \                   ^\nSwift.Sequence:7:40: note: 'prefix' produces 'PrefixSequence<[String]>',\
    \ not the expected contextual result type '[String]'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: I"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\tvar result [String]\n\tfor i := 0;\
    \ i < len(lst1); i++ {\n\t\tif lst1[i] < lst2[i] {\n\t\t\tresult[i] = lst1[i]\n\
    \t\t} else {\n\t\t\tresult[i] = lst2[i]\n\t\t}\n\t}\n\treturn result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpw349o78y.swift:17:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        var result [String]\n                  ^\n    \
    \              ;\n/tmp/tmpw349o78y.swift:18:9: error: expected type\n        for\
    \ i := 0; i < len(lst1); i++ {\n               ^\n                <#type#>\n/tmp/tmpw349o78y.swift:18:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < len(lst1);\
    \ i++ {\n               ^\n/tmp/tmpw349o78y.swift:18:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < len(lst1); i++ {\n   \
    \            ^\n/tmp/tmpw349o78y.swift:17:6: error: type annotation missing in\
    \ pattern\n        var result [String]\n            ^\n/tmp/tmpw349o78y.swift:17:13:\
    \ error: expected member name or constructor call after type name\n        var\
    \ result [String]\n                   ^\n/tmp/tmpw349o78y.swift:17:20: note: add\
    \ arguments after the type to construct a value of the type\n        var result\
    \ [String]\n                          ^\n                           ()\n/tmp/tmpw349o78y.swift:17:20:\
    \ note: use '.self' to reference the type object\n        var result [String]\n\
    \                          ^\n                           .self\n/tmp/tmpw349o78y.swift:17:13:\
    \ warning: expression of type '[String].Type' is unused\n        var result [String]\n\
    \                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        var tmp :[String] = []\n        for i in 0..<lst1.count {\n         \
    \   for j in 0..<lst2.count {\n                if lst1[i] < lst2[j] {\n      \
    \              tmp = append(tmp, lst1[i])\n                }\n            }\n\
    \        }\n        return tmp\n    } else {\n        return lst1\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp4mnr5uzo.swift:22:27: error: cannot find 'append' in scope\n  \
    \                  tmp = append(tmp, lst1[i])\n                          ^~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    \n    var lst3 = [String]()\n \
    \   \n    for i in 0 ..< min(lst1.count, lst2.count) {\n        lst3.append(min(lst1[i],\
    \ lst2[i]))\n    }\n    \n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp_64wjdwi/tmp_64wjdwi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e54709c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e54400b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e54400988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e543ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_64wjdwi                        0x0000564db1cb4a9a <unavailable> + 6810

    5    libc.so.6                          0x00002b6e548f5460 __libc_start_main +
    245

    6    tmp_64wjdwi                        0x0000564db1cb4479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp159j4o5n/tmp159j4o5n.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3ef918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3ef60fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3ef60f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3ef60e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp159j4o5n                        0x000055e1ed1916ea <unavailable> + 5866

    5    libc.so.6                          0x00002af3efb04460 __libc_start_main +
    245

    6    tmp159j4o5n                        0x000055e1ed1910c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var res = lst1\n    for elem in\
    \ lst2 {\n        let idx = lst1.index(of: elem)\n        if idx != nil {\n  \
    \          lst1 = lst1[idx!]\n        }\n        else {\n            return res\n\
    \        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpgcctntmp.swift:19:24: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let idx = lst1.index(of: elem)\n             \
    \          ^\n/tmp/tmpgcctntmp.swift:19:24: note: use 'firstIndex(of:)' instead\n\
    \        let idx = lst1.index(of: elem)\n                       ^~~~~\n      \
    \                 firstIndex\n/tmp/tmpgcctntmp.swift:21:13: error: cannot assign\
    \ to value: 'lst1' is a 'let' constant\n            lst1 = lst1[idx!]\n      \
    \      ^~~~\n/tmp/tmpgcctntmp.swift:21:24: error: cannot assign value of type\
    \ 'String' to type '[String]'\n            lst1 = lst1[idx!]\n               \
    \    ~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    var i =\
    \ 0\n    for element in lst2 {\n        if i < result.length {\n            result[i]\
    \ += element\n            i++\n        } else {\n            result.insert(element,\
    \ i)\n            i++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpzjr75jhx.swift:20:23: error: value of type '[String]' has no member\
    \ 'length'\n        if i < result.length {\n               ~~~~~~ ^~~~~~\n/tmp/tmpzjr75jhx.swift:22:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  i++\n             ^~\n/tmp/tmpzjr75jhx.swift:24:20: error: no exact matches\
    \ in call to instance method 'insert'\n            result.insert(element, i)\n\
    \                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpzjr75jhx.swift:25:14: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            i++\n             ^~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    var index\
    \ = 0\n    for index in 0..<(lst1.count + lst2.count) {\n        let value = lst1[index]\
    \ + lst2[index]\n        if value > result[index] {\n            result.remove(at:\
    \ index)\n        }\n        if value == result[index] {\n            let tempIndex\
    \ = result.index(before: index)\n            result.remove(at: index)\n      \
    \      result.append(tempIndex, with: value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp4v_nhd45.swift:27:20: error: no exact matches in call to instance\
    \ method 'append'\n            result.append(tempIndex, with: value)\n       \
    \            ^\n/tmp/tmp4v_nhd45.swift:27:20: note: candidate has partially matching\
    \ parameter list (__owned String)\n            result.append(tempIndex, with:\
    \ value)\n                   ^\n/tmp/tmp4v_nhd45.swift:27:20: note: candidate\
    \ has partially matching parameter list (__owned String)\n            result.append(tempIndex,\
    \ with: value)\n                   ^\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var retVal:[String]\n    for _,val1\
    \ in enumerate(lst1) {\n        if !lst2.contains(val1) {\n            retVal.append(val1)\n\
    \        }\n    }\n    return retVal\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpspkbr10p.swift:18:10: error: expected 'in' after for-each pattern\n\
    \    for _,val1 in enumerate(lst1) {\n         ^\n/tmp/tmpspkbr10p.swift:18:10:\
    \ error: expected Sequence expression for for-each loop\n    for _,val1 in enumerate(lst1)\
    \ {\n         ^\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var match = [String]()\n    var\
    \ j = 0\n    for i in lst1 {\n        if j < len(lst2) && lst2[j] < i {\n    \
    \        j += 1\n            continue\n        }\n        match.append(i)\n  \
    \  }\n    \n    if j < len(lst2) {\n        for _ in 0..<j {\n            match.removeLast()\n\
    \        }\n    }\n    return match\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpuxpb5uz9.swift:20:16: error: cannot find 'len' in scope\n     \
    \   if j < len(lst2) && lst2[j] < i {\n               ^~~\n/tmp/tmpuxpb5uz9.swift:27:12:\
    \ error: cannot find 'len' in scope\n    if j < len(lst2) {\n           ^~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    if lst1.count == 0 {\n        return lst2\n \
    \   }\n    if lst2.count == 0 {\n        return lst1\n    }\n    var index = 0\n\
    \    var j = 0\n    var newArr = lst1.count < lst2.count ? lst1 : lst2\n    var\
    \ newArr1 = newArr[0]\n    var newArr2 = newArr[1]\n    for k in 0..<lst1.count\
    \ {\n        if lst1[k] < lst2[j] {\n            newArr1 = lst1[k]\n        }\
    \ else {\n            newArr2 = lst2[j]\n            j += 1\n        }\n    }\n\
    \    return newArr1 + newArr2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp8bkqvias.swift:39:20: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return newArr1 + newArr2\n    \
    \       ~~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\t\n\t// write your code in JavaScript\
    \ (Node.js 8.9.4)\n\t// or whatever you find easiest to read and understand for\
    \ you\n\t\n\t// write your code in JavaScript (Node.js 8.9.4)\n\t// or whatever\
    \ you find easiest to read and understand for you\n\t\n\t// write your code in\
    \ JavaScript (Node.js 8.9.4)\n\t// or whatever you find easiest to read and understand\
    \ for you\n\t\n\t// write your code in JavaScript (Node.js 8.9.4)\n\t// or whatever\
    \ you find easiest to read and understand for you\n\t\n\t// write your code in\
    \ JavaScript (Node.js 8.9.4)\n\t// or whatever you find easiest to read and understand\
    \ for you\n\t\n\t// write your code in JavaScript (Node.js 8.9.4)\n\t// or whatever\
    \ you find easiest to read and understand for you\n\t\n\t// write your code in\
    \ JavaScript (Node.js 8.9.4)\n\t// or whatever you find easiest to read and understand\
    \ for you\n\t\n\t// write your code in JavaScript (Node.js 8.9.4)\n\t// or whatever\
    \ you find easiest to read and understand for you\n\t\n\t// write your code in\
    \ JavaScript (Node.js 8.9.4)\n\t// or whatever you find easiest to read and understand\
    \ for you\n\t\n\t// write your code in JavaScript (Node.js 8.9.4)\n\t// or whatever\
    \ you find easiest to read and understand for you\n\t\n\t// write your code in\
    \ JavaScript (Node.js 8.9.4)\n\t// or whatever you find easiest to read and understand\
    \ for you\n\t\n\t// write your code in JavaScript (Node.js 8.9.4)\n\t// or whatever\
    \ you find easiest to read and understand for you\n\t\n\t// write your code in\
    \ JavaScript (Node.js 8.9.4)\n\t// or whatever you find easiest to read and understand\
    \ for you\n\t\n\t// write your code in JavaScript (Node.js 8.9.4)\n\t// or whatever\
    \ you find easiest to read and understand for you\n\t\n\t// write your code in\
    \ JavaScript (Node.js 8.9.4)\n\t// or whatever you find easiest to read and understand\
    \ for you\n\t\n\t// write your code in JavaScript (Node.js 8.9.4)\n\t// or whatever\
    \ you find easiest to read and understand for you\n\t\n\t// write your code in\
    \ JavaScript (Node.js 8.9.4)\n\t// or whatever you find easiest to read and understand\
    \ for you\n\t\n\t// write your code in JavaScript (Node.js 8.9.4)\n\t// or whatever\
    \ you find \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: '/tmp/tmpz2dua4j3.swift:71:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var res = lst1\n    for elem in\
    \ lst2 {\n        if contains(res, elem) == false {\n            res = append(res,\
    \ elem)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp2v7qcy2j.swift:19:12: error: cannot find 'contains' in scope\n\
    \        if contains(res, elem) == false {\n           ^~~~~~~~\n/tmp/tmp2v7qcy2j.swift:20:19:\
    \ error: cannot find 'append' in scope\n            res = append(res, elem)\n\
    \                  ^~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var arr :[String] = []\n    \n\
    \    for i in 0..<lst1.count {\n        if lst1[i] < lst2[i] {\n            arr.append(lst1[i])\n\
    \        } else {\n            arr.append(lst2[i])\n        }\n    }\n    \n \
    \   return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp9zb18ury/tmp9zb18ury.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53d751fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53d7216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53d7216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53d72157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zb18ury                        0x0000557500d079da <unavailable> + 6618

    5    libc.so.6                          0x00002b53d770b460 __libc_start_main +
    245

    6    tmp9zb18ury                        0x0000557500d073b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\treturn match(lst1, lst2, true)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpd38g1ih3.swift:17:9: error: cannot find 'match' in scope\n    \
    \    return match(lst1, lst2, true)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    let result = total_match(lst1.dropLast(), lst2.dropLast())\n\
    \    return result.append(lst1.last!)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp0x6yrc45.swift:20:29: error: missing argument labels 'lst1:lst2:'\
    \ in call\n    let result = total_match(lst1.dropLast(), lst2.dropLast())\n  \
    \                          ^\n                             lst1:            lst2:\
    \ \n"
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // TODO: Write a short description\
    \ of how your code works.\n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpxo1mi5zi/tmpxo1mi5zi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7f4815c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7f450cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7f450c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7f450b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxo1mi5zi                        0x000056448b3126ea <unavailable> + 5866

    5    libc.so.6                          0x00002ba7f4a01460 __libc_start_main +
    245

    6    tmpxo1mi5zi                        0x000056448b3120c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.length == lst2.length {\n\
    \        return lst1\n    }\n    var total_chars = 0\n    var i = 0\n    var j\
    \ = 0\n    for (i = 0; i < lst1.length; i++ {\n        total_chars += lst1[i].characters.count\n\
    \    }\n    for (i = 0; i < lst2.length; i++ {\n        total_chars += lst2[i].characters.count\n\
    \    }\n    var min_len = total_chars\n    var max_len = total_chars\n    for\
    \ (i = 0; i < lst1.length; i++ {\n        min_len = min(lst1[i].characters.count,\
    \ min_len)\n        max_len = max(lst1[i].characters.count, max_len)\n    }\n\
    \    for (i = 0; i < lst2.length; i++ {\n        min_len = min(lst2[i].characters.count,\
    \ min_len)\n        max_len = max(lst2[i].characters.count, max_len)\n    }\n\
    \    if min_len > max_len {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpzqs6604b.swift:23:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for (i = 0; i < lst1.length; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzqs6604b.swift:43:6: error: expected '{' to start the body of for-each\
    \ loop\n    }\n     ^\n/tmp/tmpzqs6604b.swift:17:13: error: value of type '[String]'\
    \ has no member 'length'\n    if lst1.length == lst2.length {\n       ~~~~ ^~~~~~\n\
    /tmp/tmpzqs6604b.swift:17:28: error: value of type '[String]' has no member 'length'\n\
    \    if lst1.length == lst2.length {\n                      ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1.filter{ e in\n    \
    \    lst2.contains(e)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq21ht9c8/tmpq21ht9c8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b474d7e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b474d4dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b474d4df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b474d4de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq21ht9c8                        0x0000562b3a4fd81a <unavailable> + 6170

    5    libc.so.6                          0x00002b474d9d4460 __libc_start_main +
    245

    6    tmpq21ht9c8                        0x0000562b3a4fd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    \n    return lst1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpqu2yopu7/tmpqu2yopu7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affbe6b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affbe3aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affbe3ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affbe3ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqu2yopu7                        0x000055bfc3a596ea <unavailable> + 5866

    5    libc.so.6                          0x00002affbe8a3460 __libc_start_main +
    245

    6    tmpqu2yopu7                        0x000055bfc3a590c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\tif lst1 == lst2 {\n\t\treturn lst1\n\
    \t} else if lst1.count == 0 || lst2.count == 0 {\n\t\treturn []\n\t} else if lst1.count\
    \ > lst2.count {\n\t\tlst1, lst2 = lst2, lst1\n\t}\n\tvar res: [String] = []\n\
    \t\n\tfor i in 0..<lst1.count {\n\t\tif i >= lst2.count {\n\t\t\tbreak\n\t\t}\n\
    \t\t\n\t\tif lst1[i] < lst2[i] {\n\t\t\tbreak\n\t\t}\n\t\t\n\t\tres.append(lst1[i])\n\
    \t}\n\treturn res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpmwmo1mmj.swift:22:7: error: consecutive statements on a line must\
    \ be separated by ';'\n                lst1, lst2 = lst2, lst1\n             \
    \       ^\n                    ;\n/tmp/tmpmwmo1mmj.swift:22:7: error: expected\
    \ expression\n                lst1, lst2 = lst2, lst1\n                    ^\n\
    /tmp/tmpmwmo1mmj.swift:22:3: warning: expression of type '[String]' is unused\n\
    \                lst1, lst2 = lst2, lst1\n                ^~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if len(lst1) > len(lst2) {\n  \
    \      return lst1\n    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpzzzm7jc6.swift:17:8: error: cannot find 'len' in scope\n    if\
    \ len(lst1) > len(lst2) {\n       ^~~\n/tmp/tmpzzzm7jc6.swift:17:20: error: cannot\
    \ find 'len' in scope\n    if len(lst1) > len(lst2) {\n                   ^~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result: [String] = []\n   \
    \ if lst1 == lst2 {\n        result.append(lst1[0])\n    } else {\n        for\
    \ i in 0 ..< max(lst1.count, lst2.count) {\n            lst1[i].countIn(lst2[i],\
    \ &result)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpnkf5j5at.swift:22:21: error: value of type 'String' has no member\
    \ 'countIn'\n            lst1[i].countIn(lst2[i], &result)\n            ~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n\n    if lst1.count > lst2.count {\n        lst2\
    \ = lst2.reversed()\n    }\n\n    var total: Int = 0\n    for i in 0..<lst1.count\
    \ {\n        if lst1[i] < lst2[total] {\n            total += 1\n        }\n \
    \   }\n\n    return Array(lst1[i..<total])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp__a4fied.swift:22:9: error: cannot assign to value: 'lst2' is a\
    \ 'let' constant\n        lst2 = lst2.reversed()\n        ^~~~\n/tmp/tmp__a4fied.swift:32:23:\
    \ error: cannot find 'i' in scope\n    return Array(lst1[i..<total])\n       \
    \               ^\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let len1 = lst1.count\n    let\
    \ len2 = lst2.count\n    if len1 == len2 {\n        return lst1\n    } else if\
    \ len1 == 0 {\n        return lst2\n    } else if len2 == 0 {\n        return\
    \ lst1\n    }\n    var matching: [String] = []\n    var i = 0\n    var j = 0\n\
    \    while i < len1 && j < len2 {\n        if lst1[i] < lst2[j] {\n          \
    \  j++\n        } else if lst1[i] > lst2[j] {\n            i++\n        } else\
    \ {\n            matching.append(lst1[i])\n            i++\n            j++\n\
    \        }\n    }\n    return matching\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmptgpscutp.swift:31:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            j++\n             ^~\n/tmp/tmptgpscutp.swift:33:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  i++\n             ^~\n/tmp/tmptgpscutp.swift:36:14: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmptgpscutp.swift:37:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var arr = []\n    for i in 0..<min(lst1.count,\
    \ lst2.count) {\n        arr.append(max(lst1[i], lst2[i]))\n    }\n    if lst1.count\
    \ == lst2.count { \n        return arr \n    }\n    return [] \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp8mvj_fs7.swift:17:15: error: empty collection literal requires\
    \ an explicit type\n    var arr = []\n              ^~\n/tmp/tmp8mvj_fs7.swift:22:16:\
    \ error: cannot convert return expression of type '[Any]' to return type '[String]'\n\
    \        return arr \n               ^\n/tmp/tmp8mvj_fs7.swift:22:16: note: arguments\
    \ to generic parameter 'Element' ('Any' and 'String') are expected to be equal\n\
    \        return arr \n               ^\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp159j4o5n/tmp159j4o5n.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3ef918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3ef60fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3ef60f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3ef60e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp159j4o5n                        0x000055e1ed1916ea <unavailable> + 5866

    5    libc.so.6                          0x00002af3efb04460 __libc_start_main +
    245

    6    tmp159j4o5n                        0x000055e1ed1910c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    \n    var results = [String]()\n\
    \    for var i = 0; i != lst1.count; i++ {\n        for var j = 0; j != lst2.count;\
    \ j++ {\n            if lst1[i] < lst2[j] {\n                results.append(lst1[i])\n\
    \                break\n            }\n        }\n    }\n    return results\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwmkv6duo.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i != lst1.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwmkv6duo.swift:20:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for var j = 0; j != lst2.count; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count &&\
    \ is_permutation(lst1, lst2) {\n        return lst1\n    }\n    return lst2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp2_bwcw4o.swift:17:36: error: cannot find 'is_permutation' in scope\n\
    \    if lst1.count == lst2.count && is_permutation(lst1, lst2) {\n           \
    \                        ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var i = 0\n    var j = 0\n    var\
    \ l = 0\n    guard lst1.count > lst2.count else { return [] }\n    while i < lst1.count\
    \ {\n        if j < lst2.count {\n            if lst1[i] < lst2[j] {\n       \
    \         i += 1\n            } else {\n                j += 1\n            }\n\
    \        } else {\n            l += 1\n        }\n    }\n    return lst1[i..<j]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpe34ry7tx.swift:32:16: error: cannot convert return expression of\
    \ type 'ArraySlice<String>' to return type '[String]'\n    return lst1[i..<j]\n\
    \           ~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    \n    let result = lst1.filter(str1\
    \ => !lst2.contains(str1))\n    \n    if lst2.contains(\"\") {\n        return\
    \ lst1\n    } else if lst1.contains(\"\") {\n        return lst2\n    } else {\n\
    \        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp_eh4ja51.swift:18:30: error: cannot find 'str1' in scope\n    let\
    \ result = lst1.filter(str1 => !lst2.contains(str1))\n                       \
    \      ^~~~\n/tmp/tmp_eh4ja51.swift:18:35: error: cannot find operator '=>' in\
    \ scope\n    let result = lst1.filter(str1 => !lst2.contains(str1))\n        \
    \                          ^~\n/tmp/tmp_eh4ja51.swift:18:53: error: cannot find\
    \ 'str1' in scope\n    let result = lst1.filter(str1 => !lst2.contains(str1))\n\
    \                                                    ^~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // Your code here\n    var result\
    \ : [String] = []\n    for i in 0 ..< lst1.count {\n        if let string1 = lst1[i],\
    \ let string2 = lst2[i] {\n            if string1.count > string2.count {\n  \
    \              result.append(string1)\n            } else {\n                result.append(string2)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpa_6xmri5.swift:20:12: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        if let string1 = lst1[i], let\
    \ string2 = lst2[i] {\n           ^             ~~~~~~~\n/tmp/tmpa_6xmri5.swift:20:35:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        if let string1 = lst1[i], let string2 = lst2[i] {\n                 \
    \                 ^             ~~~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for i in\
    \ lst1.indices {\n        for j in lst2.indices {\n            if lst1[i] < lst2[j]\
    \ {\n                result = lst1\n                break\n            }\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpkwucj2ty/tmpkwucj2ty.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c92524c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c9221bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c9221b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c9221a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkwucj2ty                        0x0000557ba179191a <unavailable> + 6426

    5    libc.so.6                          0x00002b9c92710460 __libc_start_main +
    245

    6    tmpkwucj2ty                        0x0000557ba17912f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result: [String] = []\n   \
    \ for i in 0..<min(lst1.count, lst2.count) {\n        if lst1[i] > lst2[i] {\n\
    \            result.append(lst1[i])\n        } else {\n            result.append(lst2[i])\n\
    \        }\n    }\n    if lst1.count == lst2.count {\n        return result\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpljews1x4/tmpljews1x4.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f87cf5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f879ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f879ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f879eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpljews1x4                        0x000056377cecfd7f <unavailable> + 7551

    5    libc.so.6                          0x00002b2f87ee1460 __libc_start_main +
    245

    6    tmpljews1x4                        0x000056377cecf479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ i : Int in 0..<min(lst1.count, lst2.count) {\n        if lst1[i] < lst2[i] {\n\
    \            result += lst1\n        } else {\n            result += lst2\n  \
    \      }\n    }\n    return arraySort(result)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmplossz3hf.swift:25:12: error: cannot find 'arraySort' in scope\n\
    \    return arraySort(result)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let size = lst1.count\n    if size\
    \ != lst2.count {\n        return lst1\n    }\n    var res = [String]()\n    for\
    \ _ in 0..<size {\n        if lst1[0] == lst2[0] {\n            res.append(lst1[0])\n\
    \        }\n        if lst1[0] < lst2[0] {\n            res.append(lst1[0])\n\
    \            lst1.remove(at: 0)\n        } else {\n            res.append(lst2[0])\n\
    \            lst2.remove(at: 0)\n        }\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp939pfdg0.swift:28:18: error: cannot use mutating member on immutable\
    \ value: 'lst1' is a 'let' constant\n            lst1.remove(at: 0)\n        \
    \    ~~~~ ^\n/tmp/tmp939pfdg0.swift:31:18: error: cannot use mutating member on\
    \ immutable value: 'lst2' is a 'let' constant\n            lst2.remove(at: 0)\n\
    \            ~~~~ ^\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n  var arr = [String]()\n  for value\
    \ in lst1 {\n    if !contains(lst2, value) {\n      arr = append(arr, value)\n\
    \    }\n  }\n  return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp1y2uplc3.swift:19:9: error: cannot find 'contains' in scope\n \
    \   if !contains(lst2, value) {\n        ^~~~~~~~\n/tmp/tmp1y2uplc3.swift:20:13:\
    \ error: cannot find 'append' in scope\n      arr = append(arr, value)\n     \
    \       ^~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var arr = [String]()\n    for s1\
    \ in lst1 {\n        for s2 in lst2 {\n            if s1 < s2 {\n            \
    \    arr.append(s1)\n                break\n            }\n        }\n    }\n\
    \    for s2 in lst2 {\n        if !contains(arr, s2) {\n            arr.append(s2)\n\
    \        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpahl_0_d0.swift:27:13: error: cannot find 'contains' in scope\n\
    \        if !contains(arr, s2) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count < lst2.count {\n\
    \        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp5zrxrxpj/tmp5zrxrxpj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3929c6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3929961b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3929961988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39299607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5zrxrxpj                        0x0000555d9ecb325d <unavailable> + 8797

    5    libc.so.6                          0x00002b3929e56460 __libc_start_main +
    245

    6    tmp5zrxrxpj                        0x0000555d9ecb2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let sorted = lst1.sorted()\n  \
    \  let sorted2 = lst2.sorted()\n    return sorted == sorted2 ? lst1 : sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpb5qziorv/tmpb5qziorv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ddc56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ddc263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ddc263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ddc2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb5qziorv                        0x000055700583878a <unavailable> + 6026

    5    libc.so.6                          0x00002b3ddc758460 __libc_start_main +
    245

    6    tmpb5qziorv                        0x0000557005838169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if (lst1.count + lst2.count) ==\
    \ 0 {\n        return lst1\n    }\n    if lst1.count == 0 && lst2.count == 0 {\n\
    \        return lst2\n    }\n    if (lst1.count == 0 || lst2.count == 0) {\n \
    \       return []\n    }\n    \n    if lst1.count < lst2.count {\n        return\
    \ lst1\n    }\n    \n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpajec1ra0/tmpajec1ra0.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae73f868c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae73f55fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae73f55f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae73f55e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajec1ra0                        0x0000559c2efa125d <unavailable> + 8797

    5    libc.so.6                          0x00002ae73fa54460 __libc_start_main +
    245

    6    tmpajec1ra0                        0x0000559c2efa0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return total_match_helper(lst1,\
    \ lst2, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpkc4ldsas.swift:17:12: error: cannot find 'total_match_helper' in\
    \ scope\n    return total_match_helper(lst1, lst2, 0)\n           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var ret: Array<String> = []\n \
    \   for i in 0..<lst1.count {\n        if i >= lst2.count {\n            break\n\
    \        }\n        if lst1[i] < lst2[i] {\n            break\n        }\n   \
    \ }\n    for i in 0..<lst2.count {\n        if i >= lst1.count {\n           \
    \ break\n        }\n        if lst2[i] < lst1[i] {\n            break\n      \
    \  }\n    }\n    for i in 0..<lst1.count {\n        if i >= lst2.count {\n   \
    \         break\n        }\n        if lst1[i] == lst2[i] {\n            ret.append(lst1[i])\n\
    \        }\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmphmtz36bt/tmphmtz36bt.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2122c67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b212295eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b212295e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b212295d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphmtz36bt                        0x0000564b29e06a2a <unavailable> + 6698

    5    libc.so.6                          0x00002b2122e53460 __libc_start_main +
    245

    6    tmphmtz36bt                        0x0000564b29e06409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // sort both the arrays to check\
    \ for equal chars\n    arr1.sort()\n    arr2.sort()\n\n    // check for equal\
    \ number of strings\n    if (arr1.count == arr2.count) {\n        // return the\
    \ first array if all chars in arr1 are less than all chars in arr2\n        return\
    \ arr1\n    }\n    return arr1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmprty1zwnx.swift:18:5: error: cannot find 'arr1' in scope\n    arr1.sort()\n\
    \    ^~~~\n/tmp/tmprty1zwnx.swift:19:5: error: cannot find 'arr2' in scope\n \
    \   arr2.sort()\n    ^~~~\n/tmp/tmprty1zwnx.swift:22:9: error: cannot find 'arr1'\
    \ in scope\n    if (arr1.count == arr2.count) {\n        ^~~~\n/tmp/tmprty1zwnx.swift:22:23:\
    \ error: cannot find 'arr2' in scope\n    if (arr1.count == arr2.count) {\n  \
    \                    ^~~~\n/tmp/tmprty1zwnx.swift:24:16: error: cannot find 'arr1'\
    \ in scope\n        return arr1\n               ^~~~\n/tmp/tmprty1zwnx.swift:26:12:\
    \ error: cannot find 'arr1' in scope\n    return arr1\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var new_lst = [String]()\n    for\
    \ i in 0..<(lst1.count + lst2.count) {\n        let s1 = lst1[i..<i]\n       \
    \ let s2 = lst2[i..<i]\n        let s1 = s1.filter{ $0 != \"\" }\n        let\
    \ s2 = s2.filter{ $0 != \"\" }\n        if s1.count < s2.count {\n           \
    \ new_lst.append(s1)\n        }\n        if s2.count < s1.count {\n          \
    \  new_lst.append(s2)\n        }\n    }\n    if lst1.count == new_lst.count {\n\
    \        return new_lst\n    }\n    if lst2.count == new_lst.count {\n       \
    \ return new_lst\n    }\n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpq43hzqht.swift:21:13: error: invalid redeclaration of 's1'\n  \
    \      let s1 = s1.filter{ $0 != \"\" }\n            ^\n/tmp/tmpq43hzqht.swift:19:13:\
    \ note: 's1' previously declared here\n        let s1 = lst1[i..<i]\n        \
    \    ^\n/tmp/tmpq43hzqht.swift:22:13: error: invalid redeclaration of 's2'\n \
    \       let s2 = s2.filter{ $0 != \"\" }\n            ^\n/tmp/tmpq43hzqht.swift:20:13:\
    \ note: 's2' previously declared here\n        let s2 = lst2[i..<i]\n        \
    \    ^\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var i = 0\n    var cnt1 = lst1.count\n\
    \    var cnt2 = lst2.count\n    if cnt1 == 0 || cnt2 == 0 {\n        return []\n\
    \    }\n    while i < cnt1 {\n        if lst1[i] > lst2[i] {\n            i +=\
    \ 1\n            continue\n        } else {\n            i += 1\n            cnt1\
    \ -= 1\n        }\n    }\n    while i < cnt2 {\n        if lst1[i] < lst2[i] {\n\
    \            i += 1\n            continue\n        } else {\n            i +=\
    \ 1\n            cnt2 -= 1\n        }\n    }\n    if lst1.count < lst2.count {\n\
    \        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af41f40bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af41f102561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af41f102286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af41f10213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af41f101bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af41ef01fc3 <unavailable> + 188355

    6    tmpcnjjh7xj                        0x000055e11d572b8a <unavailable> + 11146

    7    tmpcnjjh7xj                        0x000055e11d5719ff <unavailable> + 6655

    8    libc.so.6                          0x00002af41f5f7460 __libc_start_main +
    245

    9    tmpcnjjh7xj                        0x000055e11d571259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let (maxLen1, maxLen2) = (lst1.max(),\
    \ lst2.max())\n    let len = maxLen1 - 1\n    var res = lst1\n    for index in\
    \ 0..(len - 1) {\n        if index < maxLen1 {\n            if lst1[index] < lst2[index]\
    \ && lst1[index].count < lst2[index].count {\n                res[index] = lst1[index]\n\
    \            }\n        } else {\n            if lst2[index] < lst1[index] &&\
    \ lst2[index].count < lst1[index].count {\n                res[index] = lst2[index]\n\
    \            }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpipv5g49l.swift:18:15: error: cannot convert value of type 'String?'\
    \ to expected argument type 'Int'\n    let len = maxLen1 - 1\n              ^\n\
    /tmp/tmpipv5g49l.swift:20:19: error: cannot find operator '..' in scope; did you\
    \ mean '...'?\n    for index in 0..(len - 1) {\n                  ^~\n       \
    \           ...\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\tif lst_length(lst1) < lst_length(lst2)\
    \ || lst_length(lst1) > lst_length(lst2) {\n\t\treturn lst1\n\t} else {\n\t\t\
    return lst2\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp443h4cys.swift:17:5: error: cannot find 'lst_length' in scope\n\
    \        if lst_length(lst1) < lst_length(lst2) || lst_length(lst1) > lst_length(lst2)\
    \ {\n           ^~~~~~~~~~\n/tmp/tmp443h4cys.swift:17:24: error: cannot find 'lst_length'\
    \ in scope\n        if lst_length(lst1) < lst_length(lst2) || lst_length(lst1)\
    \ > lst_length(lst2) {\n                              ^~~~~~~~~~\n/tmp/tmp443h4cys.swift:17:44:\
    \ error: cannot find 'lst_length' in scope\n        if lst_length(lst1) < lst_length(lst2)\
    \ || lst_length(lst1) > lst_length(lst2) {\n                                 \
    \                 ^~~~~~~~~~\n/tmp/tmp443h4cys.swift:17:63: error: cannot find\
    \ 'lst_length' in scope\n        if lst_length(lst1) < lst_length(lst2) || lst_length(lst1)\
    \ > lst_length(lst2) {\n                                                     \
    \                ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result: [String] = []\n   \
    \ var count = 0\n    for x in lst1 {\n        for y in lst2 {\n            if\
    \ x == y {\n                count++\n            }\n        }\n        if count\
    \ < len(lst1) {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp92t70532.swift:22:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                count++\n                     ^~\n/tmp/tmp92t70532.swift:25:20:\
    \ error: cannot find 'len' in scope\n        if count < len(lst1) {\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\tvar result = lst1.clone()\n\tvar\
    \ max_len = max(len(lst1), len(lst2))\n\tfor i := 0; i < len(result); i++ {\n\t\
    \tresult[i] = lst1[i]\n\t\tif i >= len(lst2) || (len(lst1[i]) != len(lst2[i])\
    \ || lst2[i] != \"\") {\n\t\t\tresult[i] = \"\"\n\t\t}\n\t}\n\tfor i := 0; i <\
    \ len(lst1); i++ {\n\t\tfor j := i + 1; j < len(lst1); j++ {\n\t\t\tif lst1[i]\
    \ != \"\" && !lst1[i].Contains(lst2[j]) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif lst1[i]\
    \ == \"\" && !lst1[i].Contains(lst2[j]) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif\
    \ lst1[i] != \"\" && lst1[i].Contains(lst2[j]) {\n\t\t\t\tresult[i] = lst2[j]\
    \ + result[i]\n\t\t\t}\n\t\t\tif lst2[j] != \"\" && lst2[j].Contains(lst1[i])\
    \ {\n\t\t\t\tresult[j] = lst1[i] + result[j]\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpz_q7ewtd.swift:19:9: error: expected type\n        for i := 0;\
    \ i < len(result); i++ {\n               ^\n                <#type#>\n/tmp/tmpz_q7ewtd.swift:19:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < len(result);\
    \ i++ {\n               ^\n/tmp/tmpz_q7ewtd.swift:19:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < len(result); i++ {\n \
    \              ^\n/tmp/tmpz_q7ewtd.swift:25:9: error: expected type\n        for\
    \ i := 0; i < len(lst1); i++ {\n               ^\n                <#type#>\n/tmp/tmpz_q7ewtd.swift:25:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < len(lst1);\
    \ i++ {\n               ^\n/tmp/tmpz_q7ewtd.swift:25:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < len(lst1); i++ {\n   \
    \            ^\n/tmp/tmpz_q7ewtd.swift:26:10: error: expected type\n         \
    \       for j := i + 1; j < len(lst1); j++ {\n                       ^\n     \
    \                   <#type#>\n/tmp/tmpz_q7ewtd.swift:26:10: error: expected 'in'\
    \ after for-each pattern\n                for j := i + 1; j < len(lst1); j++ {\n\
    \                       ^\n/tmp/tmpz_q7ewtd.swift:26:10: error: expected Sequence\
    \ expression for for-each loop\n                for j := i + 1; j < len(lst1);\
    \ j++ {\n                       ^\n/tmp/tmpz_q7ewtd.swift:17:20: error: value\
    \ of type '[String]' has no member 'clone'\n        var result = lst1.clone()\n\
    \                     ~~~~ ^~~~~\n/tmp/tmpz_q7ewtd.swift:18:20: error: cannot\
    \ find 'len' in scope\n        var max_len = max(len(lst1), len(lst2))\n     \
    \                     ^~~\n/tmp/tmpz_q7ewtd.swift:18:31: error: cannot find 'len'\
    \ in scope\n        var max_len = max(len(lst1), len(lst2))\n                \
    \                     ^~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1 == lst2 {\n        return\
    \ lst1\n    }\n    var i: Int = 0\n    var j: Int = 0\n    var len: Int = lst1.count\n\
    \    var len1: Int = lst2.count\n    \n    while i < len1 && j < len {\n     \
    \   if lst1[i] > lst2[j] {\n            j++\n        }\n        i++\n    }\n \
    \   \n    return lst1.prefix(j)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwpbqv9ny.swift:27:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            j++\n             ^~\n/tmp/tmpwpbqv9ny.swift:29:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        i++\n\
    \         ^~\n/tmp/tmpwpbqv9ny.swift:32:17: error: no 'prefix' candidates produce\
    \ the expected contextual result type '[String]'\n    return lst1.prefix(j)\n\
    \                ^\nSwift.Sequence:7:40: note: 'prefix' produces 'PrefixSequence<[String]>',\
    \ not the expected contextual result type '[String]'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> PrefixSequence<Self>\n                    \
    \                   ^\nSwift.Collection:6:40: note: 'prefix' produces 'ArraySlice<String>',\
    \ not the expected contextual result type '[String]'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> Self.SubSequence\n                        \
    \               ^\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var max = 0\n    for i := 0; i\
    \ < lst1.count; i++ {\n        for j := i + 1; j < lst1.count; j++ {\n       \
    \     if lst1[i].count > max {\n                max = lst1[i].count\n        \
    \    }\n            if lst2[j].count > max {\n                max = lst2[j].count\n\
    \            }\n        }\n    }\n    var result : [String] = []\n    for i :=\
    \ 0; i < lst1.count; i++ {\n        if lst1[i].count == max {\n            result\
    \ += lst1[i]\n        }\n    }\n    for j := 0; j < lst2.count; j++ {\n      \
    \  if lst2[j].count == max {\n            result += lst2[j]\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp1di1pjvp.swift:18:12: error: expected type\n    for i := 0; i <\
    \ lst1.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp1di1pjvp.swift:18:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst1.count;\
    \ i++ {\n           ^\n/tmp/tmp1di1pjvp.swift:18:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < lst1.count; i++ {\n      \
    \     ^\n/tmp/tmp1di1pjvp.swift:19:16: error: expected type\n        for j :=\
    \ i + 1; j < lst1.count; j++ {\n               ^\n                <#type#>\n/tmp/tmp1di1pjvp.swift:19:16:\
    \ error: expected 'in' after for-each pattern\n        for j := i + 1; j < lst1.count;\
    \ j++ {\n               ^\n/tmp/tmp1di1pjvp.swift:19:16: error: expected Sequence\
    \ expression for for-each loop\n        for j := i + 1; j < lst1.count; j++ {\n\
    \               ^\n/tmp/tmp1di1pjvp.swift:29:12: error: expected type\n    for\
    \ i := 0; i < lst1.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp1di1pjvp.swift:29:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst1.count;\
    \ i++ {\n           ^\n/tmp/tmp1di1pjvp.swift:29:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < lst1.count; i++ {\n      \
    \     ^\n/tmp/tmp1di1pjvp.swift:34:12: error: expected type\n    for j := 0; j\
    \ < lst2.count; j++ {\n           ^\n            <#type#>\n/tmp/tmp1di1pjvp.swift:34:12:\
    \ error: expected 'in' after for-each pattern\n    for j := 0; j < lst2.count;\
    \ j++ {\n           ^\n/tmp/tmp1di1pjvp.swift:34:12: error: expected Sequence\
    \ expression for for-each loop\n    for j := 0; j < lst2.count; j++ {\n      \
    \     ^\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result: [String] = []\n   \
    \ for x in lst1 {\n        if lst2.contains(x) {\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp76kyjuz1/tmp76kyjuz1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fead80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6feaa77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6feaa77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6feaa767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp76kyjuz1                        0x000055a60e3bf91a <unavailable> + 6426

    5    libc.so.6                          0x00002b6feaf6c460 __libc_start_main +
    245

    6    tmp76kyjuz1                        0x000055a60e3bf2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var res: [String] = []\n    lst1.sort()\n\
    \    lst2.sort()\n    if lst1.count == lst2.count {\n        res = lst1\n    }\
    \ else {\n        for i <- 0..<min(lst1.count, lst2.count) {\n            if lst1[i]\
    \ < lst2[i] {\n                res = append(res, lst1[i])\n            } else\
    \ {\n                res = append(res, lst2[i])\n            }\n        }\n  \
    \  }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp9lfa_ty5.swift:23:15: error: expected 'in' after for-each pattern\n\
    \        for i <- 0..<min(lst1.count, lst2.count) {\n              ^\n/tmp/tmp9lfa_ty5.swift:23:15:\
    \ error: unary operator cannot be separated from its operand\n        for i <-\
    \ 0..<min(lst1.count, lst2.count) {\n              ^ ~\n                \n/tmp/tmp9lfa_ty5.swift:18:10:\
    \ error: cannot use mutating member on immutable value: 'lst1' is a 'let' constant\n\
    \    lst1.sort()\n    ~~~~ ^\n/tmp/tmp9lfa_ty5.swift:19:10: error: cannot use\
    \ mutating member on immutable value: 'lst2' is a 'let' constant\n    lst2.sort()\n\
    \    ~~~~ ^\n/tmp/tmp9lfa_ty5.swift:23:15: error: cannot find operator '<-' in\
    \ scope\n        for i <- 0..<min(lst1.count, lst2.count) {\n              ^~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    \n    if lst1.count == lst2.count\
    \ {\n        return lst1\n    }\n\n    let total = 0\n    var array = [String]()\n\
    \n    for item in lst1 {\n        if item == lst2[total] {\n            array.append(item)\n\
    \            total += 1\n        }\n    }\n\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp5wfgigu0.swift:28:19: error: left side of mutating operator isn't\
    \ mutable: 'total' is a 'let' constant\n            total += 1\n            ~~~~~\
    \ ^\n/tmp/tmp5wfgigu0.swift:22:5: note: change 'let' to 'var' to make it mutable\n\
    \    let total = 0\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1 == lst2 {\n        return\
    \ lst1\n    }\n    let first = lst1[0]\n    let last = lst1[lst1.count-1]\n  \
    \  let count = first.count + last.count\n    let m = 0\n    var ans = [String]()\n\
    \    for _ in 0..<count {\n        let subLst1 = lst1.dropFirst()\n        let\
    \ subLst2 = lst2.dropFirst()\n        let subLst1Count = subLst1.count\n     \
    \   let subLst2Count = subLst2.count\n        if subLst1Count == subLst2Count\
    \ {\n            let common = subLst1.intersection(subLst2)\n            for i\
    \ in common{\n                m += 1\n            }\n            ans.append(first.prefix(m\
    \ + 1))\n            ans.append(last.suffix(m - 1))\n        } else {\n      \
    \      for _ in 0..<subLst1Count {\n                m += 1\n            }\n  \
    \          for _ in 0..<subLst2Count {\n                m += 1\n            }\n\
    \            ans.append(first.prefix(m + 1))\n            ans.append(last.suffix(m\
    \ - 1))\n        }\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp7q4oak84.swift:31:34: error: value of type 'ArraySlice<String>'\
    \ has no member 'intersection'\n            let common = subLst1.intersection(subLst2)\n\
    \                         ~~~~~~~ ^~~~~~~~~~~~\n/tmp/tmp7q4oak84.swift:35:17:\
    \ error: no exact matches in call to instance method 'append'\n            ans.append(first.prefix(m\
    \ + 1))\n                ^\nSwift.Array:6:37: note: candidate expects value of\
    \ type 'String' for parameter #1 (got 'PrefixSequence<String>')\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\nSwift.RangeReplaceableCollection:4:37: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmp7q4oak84.swift:35:17: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n            ans.append(first.prefix(m\
    \ + 1))\n                ^\n/tmp/tmp7q4oak84.swift:36:17: error: no exact matches\
    \ in call to instance method 'append'\n            ans.append(last.suffix(m -\
    \ 1))\n                ^\nSwift.Array:6:37: note: candidate expects value of type\
    \ 'String' for parameter #1 (got '[String.Element]' (aka 'Array<Character>'))\n\
    \    @inlinable public mutating func append(_ newElement: __owned Element)\n \
    \                                   ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got '[String.Element]'\
    \ (aka 'Array<Character>'))\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Self.Element)\n                                    ^\n/tmp/tmp7q4oak84.swift:36:17:\
    \ note: found candidate with type '(__owned [String.Element]) -> ()' (aka '(__owned\
    \ Array<Character>) -> ()')\n            ans.append(last.suffix(m - 1))\n    \
    \            ^\n/tmp/tmp7q4oak84.swift:39:19: error: left side of mutating operator\
    \ isn't mutable: 'm' is a 'let' constant\n                m += 1\n           \
    \     ~ ^\n/tmp/tmp7q4oak84.swift:23:5: note: chan"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\tvar res []\n\tfor i := 0; i < len(lst1);\
    \ i++ {\n\t\tfor j := 0; j < len(lst2); j++ {\n\t\t\tif lst1[i] < lst2[j] {\n\t\
    \t\t\tres = append(res, lst1[i])\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp3hebnc7o.swift:17:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        var res []\n               ^\n               ;\n\
    /tmp/tmp3hebnc7o.swift:18:9: error: expected type\n        for i := 0; i < len(lst1);\
    \ i++ {\n               ^\n                <#type#>\n/tmp/tmp3hebnc7o.swift:18:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < len(lst1);\
    \ i++ {\n               ^\n/tmp/tmp3hebnc7o.swift:18:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < len(lst1); i++ {\n   \
    \            ^\n/tmp/tmp3hebnc7o.swift:19:10: error: expected type\n         \
    \       for j := 0; j < len(lst2); j++ {\n                       ^\n         \
    \               <#type#>\n/tmp/tmp3hebnc7o.swift:19:10: error: expected 'in' after\
    \ for-each pattern\n                for j := 0; j < len(lst2); j++ {\n       \
    \                ^\n/tmp/tmp3hebnc7o.swift:19:10: error: expected Sequence expression\
    \ for for-each loop\n                for j := 0; j < len(lst2); j++ {\n      \
    \                 ^\n/tmp/tmp3hebnc7o.swift:17:6: error: type annotation missing\
    \ in pattern\n        var res []\n            ^\n/tmp/tmp3hebnc7o.swift:17:10:\
    \ error: empty collection literal requires an explicit type\n        var res []\n\
    \                ^~\n/tmp/tmp3hebnc7o.swift:17:10: warning: expression of type\
    \ '[Any]' is unused\n        var res []\n                ^~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1.filter{ elem in\n \
    \       lst2.contains({elem })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpyyzo32ax.swift:18:23: error: function produces expected type 'String';\
    \ did you mean to call it with '()'?\n        lst2.contains({elem })\n       \
    \               ^~~~~~~\n                             ()\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var matchCount = 0\n    for (_,\
    \ string) in lst1.enumerated() {\n        if let value = lst2.index(of: string)\
    \ {\n            matchCount += value\n        }\n    }\n    return lst1.count\
    \ <= matchCount ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpk1rtldj_/tmpk1rtldj_.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5c4af8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5c47efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5c47ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5c47ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk1rtldj_                        0x000055e95b0347d7 <unavailable> + 10199

    5    libc.so.6                          0x00002ac5c4ce4460 __libc_start_main +
    245

    6    tmpk1rtldj_                        0x000055e95b0333e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == 0 || lst2.count\
    \ == 0 {\n        return []\n    }\n    \n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    \n    var i = 0\n    var j = 0\n    var total_count\
    \ = 0\n    \n    for k in 0..<min(lst1.count, lst2.count) {\n        total_count\
    \ += lst1[k].count\n        total_count += lst2[k].count\n    }\n    \n    for\
    \ j in 0..<min(lst1.count, lst2.count) {\n        total_count += lst1[j].count\n\
    \        total_count += lst2[j].count\n        if total_count > lst1[j].count\
    \ && total_count < lst2[j].count {\n            lst1[j], lst2[j] = lst2[j], lst1[j]\n\
    \        }\n    }\n    \n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpg1l29o97.swift:38:20: error: consecutive statements on a line must\
    \ be separated by ';'\n            lst1[j], lst2[j] = lst2[j], lst1[j]\n     \
    \              ^\n                   ;\n/tmp/tmpg1l29o97.swift:38:20: error: expected\
    \ expression\n            lst1[j], lst2[j] = lst2[j], lst1[j]\n              \
    \     ^\n/tmp/tmpg1l29o97.swift:38:17: warning: expression of type 'String' is\
    \ unused\n            lst1[j], lst2[j] = lst2[j], lst1[j]\n            ~~~~^~~\n\
    /tmp/tmpg1l29o97.swift:25:9: warning: initialization of variable 'i' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var i =\
    \ 0\n    ~~~~^\n    _\n/tmp/tmpg1l29o97.swift:26:9: warning: initialization of\
    \ variable 'j' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var j = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    lst1 = lst1\n    lst2 = lst2\n\
    \    if lst1 == lst2 {\n        return lst1\n    }\n    if lst1.count == lst2.count\
    \ {\n        var arr : [String] = []\n        var arr2 : [String] = []\n     \
    \   var count : Int = 0\n        for _ in 0..<lst1.count {\n            arr2.append(lst2[0])\n\
    \            arr2.removeLast()\n            if count < lst1.count {\n        \
    \        count += lst1.count - count\n            }\n        }\n        arr.append(arr2.joinWithSeparator(\"\
    \"))\n        return arr\n    }\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpj3sscylo.swift:17:5: error: cannot assign to value: 'lst1' is a\
    \ 'let' constant\n    lst1 = lst1\n    ^~~~\n/tmp/tmpj3sscylo.swift:18:5: error:\
    \ cannot assign to value: 'lst2' is a 'let' constant\n    lst2 = lst2\n    ^~~~\n\
    /tmp/tmpj3sscylo.swift:33:25: error: value of type '[String]' has no member 'joinWithSeparator'\n\
    \        arr.append(arr2.joinWithSeparator(\"\"))\n                   ~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var ret = [String]()\n    for i\
    \ := 0; i < len(lst1); i++ {\n        for j := i; j < len(lst1); j++ {\n     \
    \       if lst1[i] < lst2[j] {\n                break\n            }\n       \
    \     if j == len(lst1) {\n                ret.append(lst1[i])\n            }\n\
    \        }\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmph5siphjz.swift:18:12: error: expected type\n    for i := 0; i <\
    \ len(lst1); i++ {\n           ^\n            <#type#>\n/tmp/tmph5siphjz.swift:18:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst1);\
    \ i++ {\n           ^\n/tmp/tmph5siphjz.swift:18:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst1); i++ {\n       \
    \    ^\n/tmp/tmph5siphjz.swift:19:16: error: expected type\n        for j := i;\
    \ j < len(lst1); j++ {\n               ^\n                <#type#>\n/tmp/tmph5siphjz.swift:19:16:\
    \ error: expected 'in' after for-each pattern\n        for j := i; j < len(lst1);\
    \ j++ {\n               ^\n/tmp/tmph5siphjz.swift:19:16: error: expected Sequence\
    \ expression for for-each loop\n        for j := i; j < len(lst1); j++ {\n   \
    \            ^\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    \n    var result = [String]()\n\
    \    \n    for x in lst1 {\n        \n        for y in lst2 {\n            \n\
    \            let stringLength = String.distance(from: x, to: y)\n            \n\
    \            if stringLength > result.count {\n                \n            \
    \    for z in 0..<stringLength {\n                    \n                    result.append(x)\n\
    \                    \n                }\n                \n                break\n\
    \                \n            } else {\n                \n                for\
    \ z in 0..<stringLength {\n                    \n                    if x[z] !=\
    \ y[z] {\n                        \n                        break\n          \
    \              \n                    } else {\n                        \n    \
    \                    result.append(x)\n                        \n            \
    \        }\n                    \n                }\n                \n      \
    \      }\n            \n        }\n        \n    }\n    \n    return result\n\
    \    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpqdqtxyqg.swift:24:39: error: no exact matches in call to instance\
    \ method 'distance'\n            let stringLength = String.distance(from: x, to:\
    \ y)\n                                      ^\n/tmp/tmpqdqtxyqg.swift:24:39: note:\
    \ found candidate with type '(String.Index, String.Index) -> Int'\n          \
    \  let stringLength = String.distance(from: x, to: y)\n                      \
    \                ^\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let resultCounts = map2(lst1, lst2,\
    \ (a, b) -> a.count<b.count ? a.count : b.count)\n    let sortedCounts = resultCounts.sorted\
    \ {$0.0 < $1.0}\n    var result = [String]()\n    \n    if lst1.count == lst2.count\
    \ {\n        let longest = lst1[sortedCounts[0].index]\n        for index in sortedCounts.indices\
    \ {\n            let i = sortedCounts[index].index\n            if i > 0 {\n \
    \               result.append(longest)\n            } else {\n               \
    \ result.append(lst1[i])\n            }\n        }\n    } else {\n        result\
    \ = sortedCounts.map { lst1[$0.index] }\n    }\n    \n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpumysff4o.swift:17:24: error: cannot find 'map2' in scope\n    let\
    \ resultCounts = map2(lst1, lst2, (a, b) -> a.count<b.count ? a.count : b.count)\n\
    \                       ^~~~\n/tmp/tmpumysff4o.swift:17:42: error: cannot find\
    \ 'a' in scope\n    let resultCounts = map2(lst1, lst2, (a, b) -> a.count<b.count\
    \ ? a.count : b.count)\n                                         ^\n/tmp/tmpumysff4o.swift:17:45:\
    \ error: cannot find 'b' in scope\n    let resultCounts = map2(lst1, lst2, (a,\
    \ b) -> a.count<b.count ? a.count : b.count)\n                               \
    \             ^\n/tmp/tmpumysff4o.swift:17:51: error: cannot find 'a' in scope\n\
    \    let resultCounts = map2(lst1, lst2, (a, b) -> a.count<b.count ? a.count :\
    \ b.count)\n                                                  ^\n/tmp/tmpumysff4o.swift:17:59:\
    \ error: cannot find 'b' in scope\n    let resultCounts = map2(lst1, lst2, (a,\
    \ b) -> a.count<b.count ? a.count : b.count)\n                               \
    \                           ^\n/tmp/tmpumysff4o.swift:17:69: error: cannot find\
    \ 'a' in scope\n    let resultCounts = map2(lst1, lst2, (a, b) -> a.count<b.count\
    \ ? a.count : b.count)\n                                                     \
    \               ^\n/tmp/tmpumysff4o.swift:17:79: error: cannot find 'b' in scope\n\
    \    let resultCounts = map2(lst1, lst2, (a, b) -> a.count<b.count ? a.count :\
    \ b.count)\n                                                                 \
    \             ^\n/tmp/tmpumysff4o.swift:17:41: error: expected type before '->'\n\
    \    let resultCounts = map2(lst1, lst2, (a, b) -> a.count<b.count ? a.count :\
    \ b.count)\n                                        ^\n/tmp/tmpumysff4o.swift:17:67:\
    \ error: expected type after '->'\n    let resultCounts = map2(lst1, lst2, (a,\
    \ b) -> a.count<b.count ? a.count : b.count)\n                               \
    \                                   ^\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // TODO: make it iterative\n  \
    \  return total_match(lst1, lst2, len(lst1), len(lst2))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpdzzy_ozd.swift:18:36: error: cannot find 'len' in scope\n    return\
    \ total_match(lst1, lst2, len(lst1), len(lst2))\n                            \
    \       ^~~\n/tmp/tmpdzzy_ozd.swift:18:47: error: cannot find 'len' in scope\n\
    \    return total_match(lst1, lst2, len(lst1), len(lst2))\n                  \
    \                            ^~~\n/tmp/tmpdzzy_ozd.swift:18:23: error: extra arguments\
    \ at positions #3, #4 in call\n    return total_match(lst1, lst2, len(lst1), len(lst2))\n\
    \                      ^\n/tmp/tmpdzzy_ozd.swift:16:6: note: 'total_match(lst1:lst2:)'\
    \ declared here\nfunc total_match(lst1: [String], lst2: [String]) -> [String]\
    \ {\n     ^\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count = 0\n    for index in\
    \ 0..<min(lst1.count, lst2.count) {\n        count = max(count, min(lst1[index].count,\
    \ lst2[index].count))\n    }\n    return lst1[0 ..< count]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpweuwncmi.swift:21:16: error: cannot convert return expression of\
    \ type 'ArraySlice<String>' to return type '[String]'\n    return lst1[0 ..< count]\n\
    \           ~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    guard lst1.count == lst2.count\
    \ else {\n        print(\"Error: different number of strings received\")\n   \
    \     return []\n    }\n    var total_chars = Int64(0)\n    for i in 0 ..< lst1.count\
    \ {\n        total_chars += lst1[i].count\n    }\n    \n    for i in 0 ..< lst2.count\
    \ {\n        let total_chars_2 = lst2[i].count\n        if total_chars < total_chars_2\
    \ {\n            return lst1\n        } else {\n            return lst2\n    \
    \    }\n    }\n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp748nivg5.swift:23:32: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Int64'\n        total_chars += lst1[i].count\n  \
    \                             ^\n                       Int64(       )\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let maxLen = lst1.count < lst2.count\
    \ ? lst1.count : lst2.count\n    var result = [String](repeating: \"\", count:\
    \ maxLen)\n    for i in 0..<maxLen {\n        if i >= lst1.count && i < lst2.count\
    \ {\n            result[i] = lst1[i]\n        } else if i < lst1.count {\n   \
    \         result[i] = lst2[i]\n        } else {\n            result[i] = lst1[i]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp0ox4eg28/tmp0ox4eg28.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33780b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3377daab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3377daa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3377da97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ox4eg28                        0x0000564a4abc7cbf <unavailable> + 7359

    5    libc.so.6                          0x00002b337829f460 __libc_start_main +
    245

    6    tmp0ox4eg28                        0x0000564a4abc73b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var a = lst1\n    var b = lst2\n\
    \    for index in 0..<min(min(len(a), len(b)), count) {\n        if (a[index]==b[index])\
    \ {\n            continue\n        }\n        swap(&a, &b, index)\n    }\n   \
    \ return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpkd24cxr2.swift:19:30: error: cannot find 'len' in scope\n    for\
    \ index in 0..<min(min(len(a), len(b)), count) {\n                           \
    \  ^~~\n/tmp/tmpkd24cxr2.swift:19:38: error: cannot find 'len' in scope\n    for\
    \ index in 0..<min(min(len(a), len(b)), count) {\n                           \
    \          ^~~\n/tmp/tmpkd24cxr2.swift:19:47: error: cannot find 'count' in scope\n\
    \    for index in 0..<min(min(len(a), len(b)), count) {\n                    \
    \                          ^~~~~\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n\n    var ans = [String](count: lst2.count, repeatedValue:\
    \ \"\")\n    var count = 0\n    for char in lst2 {\n        if lst1.contains(char)\
    \ {\n            count++\n        }\n        ans[count] = char\n    }\n\n    return\
    \ ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp9qf2yv4c.swift:21:15: error: no exact matches in call to initializer\
    \ \n    var ans = [String](count: lst2.count, repeatedValue: \"\")\n         \
    \     ^\n/tmp/tmp9qf2yv4c.swift:21:15: note: candidate has partially matching\
    \ parameter list (repeating: String, count: Int)\n    var ans = [String](count:\
    \ lst2.count, repeatedValue: \"\")\n              ^\n/tmp/tmp9qf2yv4c.swift:21:15:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n    var ans = [String](count: lst2.count, repeatedValue: \"\")\n     \
    \         ^\n/tmp/tmp9qf2yv4c.swift:25:18: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n            count++\n                 ^~\n"
  stdout: ''
  timestamp: 1660009622
