name: HumanEval_71_triangle_area
language: swift
prompt: "\n/// Given the lengths of the three sides of a triangle. Return the area\
  \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
  \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
  \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
  /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1, b:\
  \ 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\n\
  assert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8,\
  \ c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
  \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
  \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
  \ 2, b: 2, c: 10) == -1)"
completions: ["    let ab2 = a * b\n    let bc2 = b * c\n    let ca2 = c * a\n   \
    \ let triArea = ab2 + bc2 + ca2\n    let area = (Double(triArea) ?? 0.0) / 2.0\n\
    \    if area < 0.0 || area > 1.0 {\n        return -1\n    }\n    return area",
  "    if a + b > c {\n        return Double(-1) / Double(1.0)\n    }\n    return\
    \ sqrt(Double(a) * Double(a) + Double(b) * Double(b) - Double(c) * Double(c))",
  "    let area = sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2))\n    return Double(area) ",
  "    let side1 = sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0))\n    let side2 =\
    \ sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(side1, 2.0))\n    let side3 = sqrt(pow(a,\
    \ 2.0) + pow(b, 2.0) + pow(c, 2.0) + pow(side1, 2.0))\n    \n    let area = sqrt(pow(a,\
    \ 2.0) + pow(b, 2.0) + pow(c, 2.0) + pow(side1, 2.0) + pow(side2, 2.0) + pow(side3,\
    \ 2.0))\n    \n    if area > 0.0 {\n        return round(area, 2)\n    }\n   \
    \ \n    return -1.0", "    var triangleArea = 0.5 * math.pow(a, 2) + 0.5 * math.pow(b,\
    \ 2) + 0.5 * math.pow(c, 2)\n    if triangleArea < 0 {\n        return -1\n  \
    \  } else {\n        return Double(round(triangleArea / 1e2))\n    }", "    let\
    \ ac = abs(c)\n    let bc = abs(b)\n    let ad = abs(a)\n    let area = if bc\
    \ > ac { return -1.0 } else { return (ad - bc) * (ad - bc) + (bc - ad) * (bc -\
    \ ad) }\n    \n    return round(area)", "    let side = hypot(a, b)\n    let third\
    \ = hypot(c, side)\n    if side == 0 || third <= side {\n        return Double(-1)\
    \ // Invalid triangle given sides don't add up to 0\n    }\n    return Double(a\
    \ * b * c) / Double(side)", "    if a + b > c {\n        return Double(-1.0)\n\
    \    }\n    if a + c > b {\n        return Double(1.0)\n    }\n    if b + c >\
    \ a {\n        return Double(-1.0)\n    }\n    return Double((a + b + c) / 2.0)",
  '    return (a * b * c) / ((a * b) + c + a)', "    if (a + b > c) {\n        if\
    \ (a + c > b) {\n            if (b + c > a) {\n                let x = (a + b\
    \ + c) / 2\n                let y = (b + c + a) / 2\n                return Math.sqrt(x\
    \ * x + y * y).toDouble()\n            } else {\n                let x = (b +\
    \ c + a) / 2\n                let y = (a + b + c) / 2\n                return\
    \ Math.sqrt(x * x + y * y).toDouble()\n            }\n        } else {\n     \
    \       let x = (a + b + c) / 2\n            let y = (a + c + b) / 2\n       \
    \     return Math.sqrt(x * x + y * y).toDouble()\n        }\n    } else {\n  \
    \      let x = (a + b + c) / 2\n        let y = (c + a + b) / 2\n        return\
    \ Math.sqrt(x * x + y * y).toDouble()\n    }", "    if a >= b+c || b >= a+c ||\
    \ c >= a+b {\n        return -1.0;\n    }\n    return ((a*a + b*b + c*c) - (b*b+a*a))/(2*a*c)",
  "    if a+b>c {\n        return Double(-1*a*b+a*c-b*c)\n    }\n    return Double(a*b*c-b*a*c)",
  "    if a<=0 || b<=0 || c<=0 { return -1 }\n    let x = (a * b) / c\n    let y =\
    \ (a * c) / b\n    return x.round()", "    let s = (a + b + c) / 2\n    if s >=\
    \ a {\n        return (s / a + s) / (a + b + c) * a\n    } else if s >= b {\n\
    \        return (s / a + s) / (a + b + c) * b\n    } else if s >= c {\n      \
    \  return (s / a + s) / (a + b + c) * c\n    } else {\n        return -1\n   \
    \ }", "    // TODO: add comment\n    if a >= b+c {\n        return Double(-1)\n\
    \    } else {\n        return b * b + c * c - a * a\n    }", "    if a+b>c {\n\
    \        return Double(-1) * 0.5\n    } else {\n        return Double(a * b *\
    \ c / Math.sqrt((a * b) - ((a + b) * c)))\n    }", "    // http://stackoverflow.com/questions/5278892/calculate-area-of-triangle-given-three-points-in-cartesian-coordinates\n\
    \    var area: Double\n    if b == 0 {\n        area = a / 2\n    } else {\n \
    \       area = (a + b + c) / 2\n    }\n    if a >= b >= c {\n        return area\n\
    \    } else {\n        return -1\n    }", "    let h = (a + b + c) / 2\n    return\
    \ h * (h + a - b - c) / 2.0", "    let sum = b*b + c*c\n    if sum < a*b {\n \
    \       return -1\n    } else {\n        return sqrt(Double(b*b - a*a))\n    }",
  "    if (a + b > c) || (a + c > b) || (b + c > a) {\n        return -1\n    }\n\n\
    \    var sA = a + b\n    var sB = a + c\n    var sC = c + b\n\n    var area =\
    \ Double(sA*sB*sC - a*b*sC)/2\n\n    if area > 0 {\n        return area\n    }\n\
    \    else {\n        return -1\n    }", "    var perimeter = a + b + c\n    var\
    \ area = 0\n    var s = perimeter / 2\n    while s > 0 {\n        area += s\n\
    \        s /= 2\n    }\n    return area", "    guard a >= 0 && b >= 0 && c >=\
    \ 0 else { return -1 }\n    \n    return ((a + b) * (c + b) - (a + c) * (b + c))\
    \ / (2.0 * math.sqrt(Double(a * b * c)))", "    let side = Double(b) * Double(c)\
    \ - Double(a) * Double(c)\n    return side / sqrt(Double(b) * Double(a) + Double(c)\
    \ * Double(c))", "    if a >= b+c {\n        return Double(-1)\n    }\n    if\
    \ a <= c-b {\n        return Double(-1)\n    }\n    if a <= b && a >= c {\n  \
    \      return Double(a)\n    }\n    return Double(b + Double(math.sqrt((Double(2)\
    \ / Double(3)) * (Double(a-c) + Double(b-a)) * Double(a-b) + Double(c-a))))",
  "    let area = 0.5 * sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0))\n    if area\
    \ > Double(Int32.max) {\n        return Double(Int32.max)\n    }\n    return area",
  "    var sum: Double = 0\n    var x: Double = 0\n    var y: Double = 0\n    var\
    \ area: Double = 0\n    var side: Double\n    if b > c {\n        side = Double(b)\n\
    \        sum = Double(a + b + c)\n        if side <= sum {\n            area =\
    \ Double(sum)\n        } else {\n            area = Double(-1)\n        }\n  \
    \  } else if c > b {\n        side = Double(c)\n        sum = Double(a + b + c)\n\
    \        if side <= sum {\n            area = Double(sum)\n        } else {\n\
    \            area = Double(-1)\n        }\n    } else {\n        side = Double(a)\n\
    \        sum = Double(a + b + c)\n        if side <= sum {\n            area =\
    \ Double(sum)\n        } else {\n            area = Double(-1)\n        }\n  \
    \  }\n    return area", "    let area = Double(a) * Double(b) * Double(c)\n  \
    \  let validSide = (a + b + c) != 0\n    if validSide {\n        return round(area\
    \ / (a + b + c) * 100) / 100.0\n    } else {\n        return -1\n    }", '    return
    (b * b) - 4.0 * pow((a * a), 2.0)', "    if a == 0 || b == 0 || c == 0 {\n   \
    \     return 0.0\n    }\n    \n    let denom = a + b + c\n    let area: Double\
    \ = pow(10.0, Double(denom)) / Double(denom)\n    \n    if area < 0.0 {\n    \
    \    return -1.0\n    } else {\n        return area\n    }", "    var l1 = abs(a)\n\
    \    var l2 = abs(b)\n    var l3 = abs(c)\n    if l1 + l2 > l3 {\n        return\
    \ -1\n    }\n    let x = (l2 + l3) / 2\n    let y = l1 * x / 2\n    return math.sqrt(pow(x,\
    \ 2) + pow(y, 2))", "    var area : Double = Double(0.0);\n    if a < b {\n  \
    \      if a < c {\n            area = 0.5 * (a + c - b) * Double(1.0) / Double(3.0);\n\
    \        } else {\n            area = 0.5 * (a + b - c) * Double(1.0) / Double(3.0);\n\
    \        }\n    } else if b < c {\n        area = 0.5 * (b + c - a) * Double(1.0)\
    \ / Double(3.0);\n    } else if a < c {\n        area = 0.5 * (a + c - b) * Double(1.0)\
    \ / Double(3.0);\n    } else {\n        area = Double(0.0);\n    }\n    return\
    \ round3(area)", "    if a > c {\n        if b > c {\n            return (b +\
    \ c) / 2\n        } else {\n            return ((2 * b) + a) / 2\n        }\n\
    \    } else {\n        if b > c {\n            return (a * (b - c)) / 2\n    \
    \    } else {\n            return ((2 * a) + b) / 2\n        }\n    }", "    assert(a\
    \ >= 0 && b >= 0 && c >= 0, \"Invalid Triangle Input\")\n    let area = a*b*c\n\
    \    if abs(a - b) > abs(a - c) || abs(a - c) > abs(b - c){\n        return area\
    \ / (2 * a)\n    }\n    return -1", "    if a+b > c {\n        return -1\n   \
    \ }\n\n    var result: Double = 0\n    let divisor = sqrt(a*a + b*b)\n\n    if\
    \ a != 0 {\n        result = (a+b) * (a/divisor)\n    }\n    if b != 0 {\n   \
    \     result = (a+b) * (b/divisor)\n    }\n\n    if c != 0 {\n        result =\
    \ (a+b) * (c/divisor)\n    }\n\n    return round(result)", '    return (a + b
    + c) / 2', "    if a >= b {\n        if c >= b {\n            return a + b + c\n\
    \        }\n        return a * b + c\n    }\n    if c >= b {\n        return a\
    \ * b + c\n    }\n    return a + b + c", "    guard a >= 0, b >= 0, c >= 0 else\
    \ {\n        return -1\n    }\n    var sum = a + b + c\n    if sum < 3 {\n   \
    \     return -1\n    }\n    sum = sum * (sum - 1) // calculate the sum of every\
    \ pair of sides\n    if a > b {\n        if b > c {\n            return sum\n\
    \        }\n        return sum - a + b // else calculate the area of the triangle\n\
    \    }\n    if b > c {\n        return sum - a\n    }\n    return sum - b + c",
  "    let a1 = (a * b * c) / 6\n    let a2 = ((a * a + b * b + c * c) * 6) / 12\n\
    \    return a1 + a2", '    return pow(a*b + b*c + c*a, 1.0/3)', "    let ab =\
    \ abs(a - b)\n    let ac = abs(a - c)\n    let bc = abs(b - c)\n\n    if ab >\
    \ ac && ab > bc {\n        return ab / 2\n    } else {\n        return -1\n  \
    \  }", '    return abs(a * b * c - a * c - b * c) / Double(a * b * c) * 100',
  "    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    var totalArea =\
    \ 0.0\n\n    if a > b {\n        if a > c {\n            totalArea = a + b + c\n\
    \        } else if b > c {\n            totalArea = b\n        } else {\n    \
    \        totalArea = c\n        }\n    } else if a > c {\n        totalArea =\
    \ a\n    } else if b > c {\n        totalArea = b\n    } else {\n        totalArea\
    \ = c\n    }\n\n    if totalArea != 0.0 {\n        return round(totalArea, 2)\n\
    \    }\n    return -1", '    return round3( a*b + b*c + c*a )', "    let sum =\
    \ a + b + c\n    let side1 = sqrt(square(a) + square(b))\n    let side2 = sqrt(square(b)\
    \ + square(c))\n    let side3 = sqrt(square(c) + square(a))\n    if sum == 0 {\n\
    \        return -1\n    } else if sum < side3 {\n        return side3\n    } else\
    \ {\n        return side1 + side2\n    }", '    return Double(a + b > c ? a +
    b - c : b - a + c) / Double(2.0)', '    return (a * b * c)/(a+b+c)', "    var\
    \ area: Double = 0.0\n    if a > b {\n        area = ((b * b) - ((a * a) - c))\
    \ / (2 * a)\n    }\n    else if b > c {\n        area = (((c * c) - ((b * b) -\
    \ (a * a))) / (2 * a))\n    }\n    else if a > c {\n        area = (((c * c) -\
    \ ((b * b) - (a * a))) / (2 * a))\n    }\n    return area", '    return round(a
    * b * c / sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)), 2)', '    return (a * b * c)
    / Double(sqrt((a * a + b * b) * Double.pi))', "    // Get the side lengths, add\
    \ them up\n    let side1 = sqrtf(a * a + b * b)\n    let side2 = sqrtf(c * c +\
    \ d * d)\n    let side3 = sqrtf(a * a + c * c)\n    let side4 = sqrtf(b * b +\
    \ d * d)\n    // If it makes sense, return an area\n    if side1 + side2 > side3\
    \ {\n        return sqrt(side1 * side1 + side2 * side2 + side3 * side3)\n    }\
    \ else {\n        return -1.0\n    }", "    if a > b && b > c {\n        let x\
    \ = (a+b+c) / 2.0\n        return Double(pow((x-(a-b+c)), 2.0)) / 3\n    }\n \
    \   else {\n        return -1\n    }", "    if a + b > c && a + c > b && b + c\
    \ > a {\n        return (a * b) / GFloat.pi\n    } else {\n        return -1\n\
    \    }", "    if b == 0 || c == 0 || a == 0 || b == 0 || c == 0 {\n        return\
    \ -1\n    }\n    return (a + b + c) / 2", "    let ac = Double(a) * Double(c)\n\
    \    let bc = Double(b) * Double(c)\n    let ab = Double(a) * Double(b)\n    if\
    \ ab > bc {\n        return Double(a) * Double(b) / Double(ab)\n    }\n    if\
    \ ab > ac {\n        return Double(c) * Double(b) / Double(ab)\n    }\n    if\
    \ ab > bc {\n        return Double(c) * Double(a) / Double(ab)\n    }\n    return\
    \ Double(a) * Double(c) / Double(ab)", '    return round(abs(a*b + b*c + c*a)
    / pow(Double(a)+Double(b)+Double(c), 0.5))', "    let sum = b*b + c*c\n    if\
    \ sum > a && sum > b {\n        return round(Double((b * b) - (sum * a))) / 2\n\
    \    } else {\n        return -1\n    }", "    let length = hypot(a, hypot(b,\
    \ c))\n    if length < 0 {\n        return -1\n    }\n    let area = length *\
    \ b * 0.5\n    return Double(area)", "    var triangleArea: Double = 0\n    if\
    \ a > b {\n        triangleArea = b * b - 4 * a * c\n    } else if b > c {\n \
    \       triangleArea = -2 * b * c\n    } else {\n        triangleArea = 0\n  \
    \  }\n    if triangleArea < 0 {\n        return -1\n    } else {\n        return\
    \ triangleArea / 2\n    }", "    let a1 = b * b - a * c\n    let b1 = b * b -\
    \ a * a\n    let c1 = a * c - b * b\n    return (a1 * b1 + b1 * c1) / (a1 + b1\
    \ + c1)", "    let lengthA = abs(a)\n    let lengthB = abs(b)\n    let lengthC\
    \ = abs(c)\n    let sides = lengthA + lengthB + lengthC\n    if sides == 0 {\n\
    \        return 0\n    }\n    \n    let area = (lengthA * lengthB) - (lengthA\
    \ * lengthC)\n    if area < 0 {\n        area = area + sides\n    }\n    \n  \
    \  if area > 0 {\n        return round(area * 100) / 100\n    }\n    return -1",
  "\tif a + b > c || a + c > b || b + c > a || a + b + c < 3 {\n\t\treturn -1\n\t\
    }\n\tlet area = a * b * c\n\tlet triangleArea = (a+b) * (a+c) * (b+c)\n\treturn\
    \ Double(area / triangleArea)", "\tlet sum = a+b+c\n\tif sum > Double(max(a,b,c))*Double(max(a,b,c))*Double(max(a,b,c))*Double(max(a,b,c))*Double(max(a,b,c))\
    \ {\n\t\treturn Double(max(a,b,c))*Double(max(a,b,c))*Double(max(a,b,c))*Double(max(a,b,c))\n\
    \t} else {\n\t\treturn -1\n\t}", "    var sum: Double = 0\n    var firstHalf:\
    \ Double = a * b / 2\n    var secondHalf: Double = a * c / 2\n    if a >= b {\n\
    \        sum = firstHalf\n    } else {\n        sum = secondHalf\n    }\n    if\
    \ a >= c {\n        sum = sum + firstHalf\n    } else {\n        sum = sum + secondHalf\n\
    \    }\n    return round(sum * Double(M_PI_) / Double(2))", "    var area: Double\
    \ = 0\n    if b > c {\n        var temp = c\n        c = b\n        b = temp\n\
    \    }\n    if b >= a {\n        area = (a * a + c * b + b * b - a * c) / 2.0\n\
    \    }\n    else {\n        var temp = a\n        a = b\n        b = temp\n  \
    \      area = (a * a + c * b + b * b - a * c) / 2.0\n    }\n    if area >= 0.0\
    \ {\n        return round(area, 2)\n    }\n    else {\n        return -1\n   \
    \ }", "    if a + b > c && b + c > a && a + c > b { // valid triangle is all sides\
    \ add up to 18\n        return Double((a + b + c) / 2) * 0.3333333333333333 //\
    \ area of triangle is area of three sides\n    } else {\n        return -1\n \
    \   }", "    let d = b * b - a * c\n    return d > 0 ? d.toDouble() / 2 : -1",
  '    return abs(a*b - c*a)/2', "    if a + b > c || a + c > b || b + c > a {\n \
    \       return Double.nan\n    }\n    let area_sum = (a + b + c) / 2\n    let\
    \ area_b = sqrt(pow(b, 2) / 2)\n    let area_c = sqrt(pow(c, 2) / 2)\n    if area_sum\
    \ < area_b + area_c {\n        return area_sum\n    }\n    return -1", "    let\
    \ sum = a + b + c\n    if sum < a {\n        return Double(-1.0)\n    }\n    if\
    \ sum > c {\n        return Double(1.0)\n    }\n    if sum > b {\n        return\
    \ Double(1.0)\n    }\n    return Double(3.0 * (a + b + c) / 2)", '    return (a
    + b + c) / 2', "    if a + b > c {\n        return -1\n    }\n    else if a +\
    \ c > b {\n        return -1\n    }\n    else if b + c > a {\n        return -1\n\
    \    }\n    else {\n        return Double(sqrt(pow((a - b), 2) + pow((b - c),\
    \ 2) + pow((c - a), 2)))\n    }", "    return if a > 0 && b > 0 && c > 0 && a+b+c\
    \ > 0 && a+b+c < a && b+c < b {\n        Double(a*b)/Double(a+b+c) - Double(a*b)/Double(sqrt(Double(a)+Double(b)+Double(c)))\n\
    \    }\n    else {\n        return -1\n    }", "    if a > b && a > c {\n    \
    \    return a * b * c\n    } else if b > c {\n        return a * b * c\n    }\
    \ else if a > b {\n        return a * b * c\n    } else {\n        return a *\
    \ b * c\n    }", "    if a > 0 && b > 0 && c > 0 {\n        return (a + b + c)\
    \ / 2\n    } else {\n        return -1.0\n    }", '    return (a + b + c) / 2.0',
  "    let sum = a + b + c\n    if sum > 0 {\n        if a > b {\n            return\
    \ abs(a - (b + c))\n        } else {\n            return abs(b - (a + c))\n  \
    \      }\n    } else {\n        return 0\n    }", "    let area = (a + b + c)\
    \ / 2\n    if area >= a {\n        if area >= b {\n            return area\n \
    \       } else {\n            return -1\n        }\n    } else {\n        if area\
    \ >= c {\n            return -1\n        } else {\n            return area\n \
    \       }\n    }", '    return a*b*c / sqrt(a*a + b*b + c*c)', "    var triangleArea\
    \ = 0.0;\n    var a = a / 2;\n    var b = b / 2;\n    var c = c / 2;\n    var\
    \ aPlusB = b + a\n    var bPlusC = c + b\n    var cPlusA = a + c\n    if a > b\
    \ > c {\n        triangleArea = ((aPlusB + bPlusC + cPlusA) * 0.5) * 0.5;\n  \
    \  } else {\n        triangleArea = -1\n    }\n    return triangleArea", "   \
    \ var ac = Double(a) * Double(c)\n    var bc = Double(b) * Double(c)\n    var\
    \ ab = Double(a) * Double(b)\n\n    if ab >= bc {\n        return Double(bc) /\
    \ Double(ab)\n    } else if ac >= ab {\n        return Double(ac) / Double(bc)\n\
    \    } else {\n        return -1\n    }", '    return abs((a * b) - (b * c) -
    (c * a))', "    let ab = b - a\n    let ac = c - a\n    if ab >= ac {\n      \
    \  return 0.5 * ab * Math.sin(2.0 * pi / ab)\n    }\n    if ac >= ab {\n     \
    \   return 0.5 * ac * Math.sin(2.0 * pi / ac)\n    }\n    if ab * ac <= 0 {\n\
    \        return 0.0\n    }\n    if ab == 0 {\n        return ac\n    }\n    if\
    \ ac == 0 {\n        return ab\n    }\n\n    var abs, acs, aa, bb, cc\n    if\
    \ ab > ac {\n        abs = ab\n        acs = ac\n        aa = a\n        bb =\
    \ b\n        cc = c\n    } else {\n        abs = ac\n        acs = ab\n      \
    \  aa = a\n        bb = c\n        cc = b\n    }\n    var s = 0.0\n    for _ in\
    \ 1...abs(abs) where abs(abs) % 2==0 {\n        s += acs * Math.sin(2.0 * pi /\
    \ abs)\n    }\n    s += aa * acs * Math.sin(2.0 * pi / abs)\n    return s * 0.5\
    \ + bb * bb * cc * Math.sin(2.0 * pi / abs)", "    let d = (b * b) - (4 * a *\
    \ c)\n    if d < 0.0 {\n        return -1.0 \n    } else {\n        let ac = Math.abs(d)\n\
    \        let bc = Math.abs(b * b - 4 * a * c)\n        let cc = Math.abs(c * c\
    \ - a * a)\n        return Float(ac + bc) / (2.0 * Float(bc))\n    }", '    return
    triangle_area_func(a, b, c, 0.0, 0.0)', "    if a >= b + c {\n        return -1\n\
    \    }\n    if b >= a + c {\n        return -1\n    }\n    if c >= a + b {\n \
    \       return -1\n    }\n\n    let side1: Double = (a + b + c) / 2\n    let side2:\
    \ Double = (a + b + c) - side1\n    let side3: Double = (a * b + b * c - c * b)\
    \ / 6\n\n    return ceil(side1 + side2 + side3)", "    let s3 = b * b\n    let\
    \ s4 = a * a\n    let s5 = c * c\n    let s6 = s3 - s4 - s5\n    if s6 > 0 {\n\
    \        return (Double(s6) / 3.0).toFixed(2)\n    }\n    return -1", "    var\
    \ area: Double = 0.0\n    var a: Double = a\n    var b: Double = b\n    var c:\
    \ Double = c\n    if a + b > c {\n        a = b\n        b += a\n    }\n    if\
    \ b + c > a {\n        a = c\n        c += a\n    }\n    if a + c > b {\n    \
    \    b = c\n        c += b\n    }\n    area = abs((a + b + c) / 2)\n    if area\
    \ == 0.0 {\n        return -1.0\n    }\n    return round(area, 2)", "    if a+b+c\
    \ == 0 {\n        return Double(0)\n    }\n    if a < 0 || b < 0 || c < 0 {\n\
    \        return -1\n    }\n\n    var s = 0.0\n    var p = a < b ? b : a\n    var\
    \ q = b < c ? c : b\n\n    var a1 = a - p\n    var b1 = b - q\n    var c1 = c\
    \ - p\n\n    if a1 > b1 || a1 > c1 {\n        return Double(0)\n    }\n    if\
    \ b1 > c1 {\n        s += a1 * b1\n    }\n    else {\n        s += b1 * c1\n \
    \   }\n\n    if b > c {\n        s += a * c1\n    }\n    else {\n        s +=\
    \ b * c1\n    }\n\n    return round(s, 2)", "    var area: Double = 0\n    var\
    \ a = -a\n    var b = -b\n    var c = -c\n\n    var c2 = c * c\n    var b2 = b\
    \ * b\n\n    var s = (-a + b + c) / 2\n    area = Double(s * s)\n\n    if area\
    \ != 0 {\n        if b2 == 0 {\n            area = Double(sqrt((1 + s) * s))\n\
    \        } else if c2 == 0 {\n            area = Double(sqrt((1 / (1 + s)) * s))\n\
    \        } else {\n            area = Double(sqrt((1 / (1 + s)) * s) * s) / Double(sqrt(b2\
    \ + c2))\n        }\n    }\n\n    if area < 0 {\n        area = -1 * area\n  \
    \  }\n\n    return area", "    if a + b > c && a + c > b {\n        return ((a\
    \ * b) - c) / 2\n    }\n    return -1", "    if a < 0 || b < 0 || c < 0 {\n  \
    \      return -1.0\n    }\n    if a + b > c {\n        return Double(b * b - a\
    \ * c)\n    }\n    if a + c > b {\n        return Double(b * c - a * b)\n    }\n\
    \    return Double(a * a + b * b - c * c)", "    let perimeter = a + b + c\n \
    \   let area  = Double(triangle_area: perimeter)\n    return area >= 3 ? area\
    \ : -1", "    let s1 = b * b - 4 * a * c\n    let s2 = a * b + c * a\n    let\
    \ s3 = 2 * a * b - b * b\n\n    if s1 < 0 {\n        return -1\n    } else if\
    \ s2 > 0 {\n        return s2 / s1\n    } else if s3 > 0 {\n        return s3\
    \ / s1\n    } else {\n        return -1\n    }", "    \n    return ((a + b + c)\
    \ / 2) / 2", "  guard (a != 0) &&\n      (b != 0) &&\n      (c == 0) else {\n\
    \    return -1.0\n  }\n\n  guard (a >= b) &&\n      (b >= c) else {\n    return\
    \ -1.0\n  }\n\n  let area = (a + b + c) / 2\n  let area2 = (a + b) * (a + c) *\
    \ (b + c)\n  if area2 == 0 {\n    return area\n  }\n  return Double(area) / area2",
  "    if b == 0 || c == 0 {\n        return -1\n    }\n    let area_ab = sqrt_of_triangle(a:\
    \ a, b: b, c: c) / c\n    let area_bc = sqrt_of_triangle(a: b, c: c, d: 0) / b\n\
    \    let area_ac = sqrt_of_triangle(a: c, d: 0, b: 0) / a\n    if area_ab > area_bc\
    \ && area_ab > area_ac {\n        return area_ab\n    } else {\n        return\
    \ area_bc\n    }", "    let aLength = b - a\n    let bLength = c - b\n    let\
    \ cLength = a - c\n    if aLength >= bLength && bLength >= cLength { \n      \
    \  return 0.5 * Double((aLength * bLength) + cLength * aLength)\n    } else {\n\
    \        return -1\n    }", '    return (b * b) - (4 * a * c)', "  let l1 = abs(a-b)\n\
    \  let l2 = abs(b-c)\n  let l3 = abs(c-a)\n\n  if (l1<l2 && l1<l3) {\n    return\
    \ l1\n  }\n  if (l2<l3) {\n    return l2\n  }\n  if (l3<l2) {\n    return l3\n\
    \  }\n  return -1", "    if a + b > c || a + c > b {\n        return -1\n    }\n\
    \    let area = (a * b) - (a * c) + b * c\n    let rounded = roundToDouble(area,\
    \ places: 2)\n    return rounded", "    let a = Double(a)\n    let b = Double(b)\n\
    \    let c = Double(c)\n\n    var area = 0.0\n\n    if a + b <= c || b + c <=\
    \ a || c + a <= b {\n        return Double(-1) / Double(3.0)\n    } else {\n \
    \       let denom = a + b - c\n        if denom > 0 {\n            area = Double((a\
    \ + b) * 0.5) / denom\n        }\n    }\n    return area", "    if a < 0 || b\
    \ < 0 || c < 0 || a + b > c || b + c > a || c + a > b {\n        return -1.0\n\
    \    }\n    let area = sqrtf(Double((b * b) - (a * c)))\n    return round(area,\
    \ 2)", "    assert(a >= 0)\n    assert(b >= 0)\n    assert(c >= 0)\n\n    \n \
    \   switch {\n    case a + b > c:\n        return a + (c - b) * (b - a)\n    case\
    \ b + c > a:\n        return b + (a - c) * (c - b)\n    case c + a > b:\n    \
    \    return c + (b - a) * (a - c)\n    default:\n        return -1\n    }", " \
    \   var area: Double = 0\n\n    if (a >= b && a >= c && b >= c) {\n        area\
    \ = 0.5 * math.sqrt(Double(pow(b, 2) + pow(c, 2)))\n    }\n\n    return area",
  "    // make sure all the arguments are positive\n    if a < 0 || b < 0 || c < 0\
    \ {\n        return -1.0\n    }\n    // make sure the area of the triangle is\
    \ non-negative\n    if a + b + c < 0 {\n        return -1.0\n    }\n    // calculate\
    \ the area of the triangle\n    let area = sqrt(Double(a) * Double(b) * Double(c))\n\
    \    // round the area to 2 decimal places and return the value\n    return Double(round(area\
    \ / Double(100) * Double(100), 2))", "    let left = a\n    let right = b\n  \
    \  let bottom = c\n    let top_left = a * a + b * b\n    let top_right = a * b\
    \ + a * c\n    let bottom_right = b * b + c * c\n    let bottom_left = a * a +\
    \ b * b + c * c\n    let area = bottom_left * (top_right - top_left) \n    let\
    \ area_valid = area > bottom_right\n    let area_rounded = area_valid ? Double(area\
    \ / top_right) : -1.0\n    return area_rounded", '    return b * b - a * c', " \
    \   \n    if a > b {\n        let t = b\n        b = a\n        a = t\n    }\n\
    \    \n    if a > c {\n        let t = c\n        c = a\n        a = t\n    }\n\
    \    \n    let area = (a * b) - (c * b)\n    \n    if area >= 0 {\n        return\
    \ area\n    }\n    else {\n        return -1\n    }", '    return a * b * c',
  "    let sum = a + b + c\n    if sum < 4 { return -1}\n    let area_triangle = Double(pow((a\
    \ + b + c) / 2, 1.0 / 3.0))\n    return area_triangle", "    let area: Double\
    \ = abs((a * a + b * b - c * c) / 2)\n    if area >= 0 {\n        return area\n\
    \    }\n    return -1", "    if (b + c) > a {\n        return Double(a * b / c)\n\
    \    }\n\n    if (a + c) > b {\n        return Double(a + b * c / a)\n    }\n\n\
    \    if (a + b) > c {\n        return Double(a + b + c * a / b)\n    }\n\n   \
    \ return -1", "    if a + b > c {\n        return Double(-1)\n    }\n    var area:\
    \ Double = 0\n    let divisor = Double(a * b + c * c - a * b)\n    if divisor\
    \ > 0 {\n        area = (a * b + c * c - a * b) / divisor\n    } else {\n    \
    \    area = Double(-1)\n    }\n    return round(area, places: 2)", "    // Return\
    \ -1\n    if a <= 0 || b <= 0 || c <= 0 {\n        return -1\n    }\n\n    return\
    \ sqrt(pow(a, 2.0) + pow(b, 2.0) + pow(c, 2.0))", '    return (a + b + c) / 2',
  '    return (a+b+c)/2.0', "    // the sum can either be positive (all sides are\
    \ positive), or negative (all sides are negative)\n    // so if one side is negative\
    \ or zero, then the other side must be negative \n    // or zero.\n    // we check\
    \ if both sides are zero or both are positive, before checking if one side is\
    \ negative or zero\n    var sum: Double = 0\n    switch {\n    case a >= 0 &&\
    \ b >= 0 && c >= 0 :\n        // the sum is positive\n        sum = a * b + c\n\
    \    case a >= 0 && b < 0 && c >= 0 :\n        // the sum is positive\n      \
    \  sum = a * b + c\n    case a < 0 && b >= 0 && c >= 0 :\n        // the sum is\
    \ positive\n        sum = a * c - b\n    case a < 0 && b < 0 && c >= 0 :\n   \
    \     // the sum is positive\n        sum = a * c - b\n    case a < 0 && b >=\
    \ 0 && c < 0 :\n        // the sum is positive\n        sum = a * c - b\n    case\
    \ a < 0 && b < 0 && c < 0 :\n        // the sum is positive\n        sum = a *\
    \ c - b\n    default:\n        // sum is zero\n        return -1\n    }\n\n  \
    \  // check if any of a,b,c is negative\n    var aNegative = false, \n       \
    \ bNegative = false, \n        cNegative = false\n    switch {\n    case a < 0\
    \ && b < 0 && c < 0:\n        // a is negative\n        aNegative = true\n   \
    \ case a < 0 && b >= 0 && c < 0:\n        // b is negative\n        bNegative\
    \ = true\n    case a < 0 && b < 0 && c >= 0:\n        // c is negative\n     \
    \   cNegative = true\n    case a >= 0 && b < 0 && c < 0:\n        // b is negative\n\
    \        bNegative = true\n    case a >= 0 && b >= 0 && c < 0:\n        // c is\
    \ negative\n        cNegative = true\n    case a < 0 && b >= 0 && c >= 0:\n  \
    \      // b is negative\n        bNegative = true\n    case a >= 0 && b >= 0 &&\
    \ c >= 0:\n        // c is negative\n        cNegative = true\n    }\n\n    //\
    \ check if sum is zero\n    if sum == 0 {\n        return -1\n    }\n\n    //\
    \ if any of a,b,c is negative, then the area is not a triangle\n    if aNegative\
    \ || bNegative || cNegative {\n        return -1\n    }\n\n    // if any of a,b,c\
    \ is zero, then the area is not a triangle\n    if a == 0 || b == 0 || c == 0\
    \ {\n        return -1\n    }\n\n    // if the sum is negative, then the area\
    \ is not a triangle\n    if sum < 0 {\n        return -1\n    }\n\n    // return\
    \ the area rounded up to 2 decimal points\n    return Double(sum", "    let s\
    \ = a + b + c\n    if s > 3 {\n        return -1\n    }\n    return sqrt(s * (s\
    \ - a) * (s - b) * (s - c))", "    let a1 = (b * b) - 4.0 * c\n    let a2 = 2.0\
    \ * b * b - 8.0 * b + c\n    let a3 = 2.0 * b * b + 4.0 * b - 4.0 * c + b\n  \
    \  let a4 = -b - 2.0 * b - 2.0 * b + c + b\n    if a1 < 0.0 || a2 < 0.0 || a3\
    \ < 0.0 || a4 < 0.0 {\n        return -1.0\n    } else {\n        return sqrt(a1\
    \ * a1 + a2 * a2 + a3 * a3 + a4 * a4)\n    }", "    if b < c && a < c {\n    \
    \    return ((a * b) - (b * c))\n    }\n    if b > c {\n        return -1\n  \
    \  }\n    if a > c {\n        return 1\n    }\n    return 0", '    return (a +
    b + c) / 2', "    assert(a >= 0 && b >= 0 && c >= 0)\n    return (a + b + c) /\
    \ 2", "    let s = (a+b+c)/2.0\n    if a > b {\n        if a > c {\n         \
    \   return s * s\n        } else {\n            return -1\n        }\n    } else\
    \ {\n        if b > c {\n            return -1\n        } else {\n           \
    \ return s * s\n        }\n    }", "    let area = (a * b + c * a * b - c * b\
    \ + a * a) / (Double(a * b) * Double(c))\n    return area.rounded(to: 2)", " \
    \   if a + b > c && b + c > a && c + a > b {\n        return Double(a + b - c\
    \ + 1) / (2.0 * c)\n    }\n    return -1", "    if a >= b + c || b >= a + c ||\
    \ a >= b + c {\n        return -1.0\n    }\n    if a >= a + b + c {\n        return\
    \ triangle_area(a + b, a + c, b + c)\n    }\n    if a >= a + c + b {\n       \
    \ return triangle_area(a + c, a, b + c)\n    }\n    return triangle_area(a, b,\
    \ c + a)", "    let sides = [a, b, c]\n    let isValidTriangle = sides.map({ $0\
    \ > 0 }).reduce(true, { ($0 && $1) }) && sides.map({ $0 > 0 }).reduce(true, {\
    \ ($0 && $1) })\n    let area = isValidTriangle ? Double(sides.reduce(($1.0, $0.0\
    \ + $1) + $0.0)) / 2.0 : 0\n    return Double(area)", '    return abs((a * b)
    * c) / sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2))', '    return (a + b + c) / 2',
  "  if a < b && a < c {\n    return (b + c) / 2\n  } else if a > b && a > c {\n \
    \   return (b - a) / 2\n  } else {\n    return (c-a) / 2\n  }", "    guard a >=\
    \ 0 && b >= 0 && c >= 0 else {\n        return -1\n    }\n    let area = (a +\
    \ b + c) / 2\n    return Double(area)", "    let sum = a * b + c\n    if sum <\
    \ a {\n        return -1\n    }\n    if sum > c {\n        return -1\n    }\n\
    \    return sqrt(Double(sum) * 0.5) / 2", "    // Formula from the Wikipedia page\
    \ - https://en.wikipedia.org/wiki/Triangle#Formula\n    var s = (a*a + b*b - c*c)\
    \ / (2.0 * Double(a * b))\n    return Double(floor(round(s, 2))) / 2.0", "   \
    \ guard a > 0 && b > 0 && c > 0 else {\n        return -1.0\n    }\n    let sum\
    \ = a + b + c\n    if sum > 0 {\n        return Double(sum) / Double(sum) * Double(Math.pow(a,\
    \ b) + Math.pow(c, 2))\n    } else {\n        return -1.0\n    }", "    if a +\
    \ b > c {\n        if b + c > a {\n            return Double(b*b - a*a) / (b*b)\n\
    \        } else {\n            return Double(c*c - a*a) / (c*c)\n        }\n \
    \   } else {\n        if a + c > b {\n            return Double(a*a - b*b) / (a*a)\n\
    \        } else {\n            return Double(a*a - c*c) / (a*a)\n        }\n \
    \   }", "    let sum = a + b + c\n    let area_of_triangle = Double((sum - a *\
    \ a - b * b - c * c) / (2 * a * b))\n    return area_of_triangle", "    var s\
    \ = a + b + c\n    if s >= 0 {\n        let u = (a + b) / 2\n        let v = (a\
    \ + c) / 2\n        let w = (b + c) / 2\n        let area = (s*(s-u)*(u-v)*(v-w)*w)\
    \ / 2.0\n        return area\n    } else {\n        return -1.0\n    }", "   \
    \ assert(a >= 0 && b >= 0 && c >= 0)\n    var d = b - a\n    if d > 0 {\n    \
    \    d = d*d\n    }\n    d = d + c\n    if d > 0 {\n        d = d*d\n    }\n \
    \   d = d - a*a\n    if d < 0 {\n        return -1\n    }\n    return roundToDouble(d)\
    \ / 2", "    let sides = sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2))\n    let area\
    \ = (sides * sides)/2\n    return Double(area)", '    return sqrt((pow(a, 2) +
    (pow(b, 2)) + (pow(c, 2)))) / 2', '    return a * b * c / ((a + b + c) * (a +
    b + c))', "    if (a + b > c) {\n        return Double.infinity\n    }\n\n   \
    \ return Double(a * b) / Double(a * c + b * b)", '    return a*b * c / Double(a+b+c)',
  "    let a1 = a - b\n    let a2 = a - c\n    let b1 = b - c\n    let ab2 = a*b\n\
    \    let ac2 = a*c\n    let b2 = b * c\n    let abc2 = ab2 + ac2\n    let sqrt2\
    \ = a1*a1 + b1*b1 + ab2*ab2 + abc2\n    let sqrt = sqrt(sqrt2)\n    if sqrt >=\
    \ a {\n        return sqrt * sqrt\n    } else {\n        return -1\n    }", '    return
    (sqrt(pow(a, 2) + pow(b, 2)) * sqrt(pow(c, 2) - pow(b, 2)))/2', "    let total\
    \ = (a + b + c) * 0.5\n    let diff = Double(a - b) - Double(a - c)\n    let diff2\
    \ = Double(b - c) - Double(a - b)\n    let diff3 = Double(c - b) - Double(b -\
    \ c)\n    let diff4 = Double(a - c) - Double(c - a)\n    return Double(diff) *\
    \ (Double(diff) * (Double(diff2) / Double(diff3)) + Double(diff4)) / (total *\
    \ total)", "    var s = a + b + c\n    if s > 0 {\n        return (s / 2) + (s\
    \ / 4) + (s / 8) + \n            (s / 16) + (s / 32) + (s / 64) + (s / 128) \n\
    \    } else {\n        return -1.0\n    }", '    return (-b + sqrtDouble(powDouble(b
    - a) + powDouble(c - a)))/2', '    return sqrt(pow(((b * b) - pow(a, 2)) / pow(c,
    2)),2)', "    let x = (a*a + b*b + c*c - a*b - a*c - b*c)\n    guard x >= 0 else\
    \ {\n        return -1\n    }\n    return Double((x*x + a*a + b*b + c*c - a*b\
    \ - a*c - b*c)/2)", "  let ab = a - b\n  let bc = b - c\n  let cb = c - b\n\n\
    \  if ab > cb {\n    return ab * ab + bc > cb * cb\n  }\n\n  if ab < cb {\n  \
    \  return ab * ab + bc < cb * cb\n  }\n\n  return ab * ab", "    let aSide = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let bSide = sqrt(pow(b, 2) + pow(c, 2))\n    let cSide\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    if aSide + bSide >= cSide {\n        return\
    \ aSide / 2\n    } else {\n        return -1\n    }", "    switch {\n    case\
    \ a > b + c:\n        return Double(a * a + b * b + c * c - a * b * c + b * a\
    \ * c + c * a * b - c * b * a - b * a * c)\n    default:\n        return -1\n\
    \    }", '    return round((a+b+c) / 2.0, 2)', "    guard b > 0 && c > 0 && a\
    \ * b > c else {\n        return -1\n    }\n    return (a * b) / c", "    // Check\
    \ if sides sum is greater than the third side (no valid triangle exists)\n   \
    \ if a + b > c {\n        return -1\n    }\n    // Otherwise calculate the area\n\
    \    return abs(a*b*c) / 2", "    let a = (a * pi)/180.0\n    let b = (b * pi)/180.0\n\
    \    let c = (c * pi)/180.0\n    let area = sqrt((pow(a, 2.0) + pow(b, 2.0) +\
    \ pow(c, 2.0)))\n    if area < 1.0 {\n        return -1.0\n    }\n    return round(area*100)/100.0",
  "    let side1 = abs(a - b)\n    let side2 = abs(b - c)\n    let side3 = abs(c -\
    \ a)\n    if side1 < side2 && side1 < side3 {\n        return side1 / 2\n    }\n\
    \    if side2 < side3 {\n        return -1\n    }\n    return side1 / 2", '    return
    (a + b + c) / 2', '  return ((a * b) * (a + b + c)) / (Math.pow(a, 2) + Math.pow(b,
    2) + Math.pow(c, 2))', "    let area = a * b * c\n    if a == 0 || b == 0 || c\
    \ == 0 {\n        return 0\n    } else if a + b > c {\n        return area / Double(a\
    \ / b)\n    } else if a + c > b {\n        return area / Double(c / b)\n    }\
    \ else {\n        return area / Double(a / c)\n    }", "    if a <= 0 || b <=\
    \ 0 || c <= 0 {\n        return -1\n    }\n\n    let sqrt_of_a = pow(Double(a),\
    \ 0.5)\n    let sqrt_of_b = pow(Double(b), 0.5)\n    let sqrt_of_c = pow(Double(c),\
    \ 0.5)\n\n    let area = (sqrt_of_a * sqrt_of_b) * sqrt_of_c\n\n    return Double(area\
    \ / 2)", "    let s = (a + b + c) / 2\n    let area = (s * (s - a) * (s - b) *\
    \ (s - c)) / (4 * a * b * c)\n    if area > 1.0 {\n        return area\n    }\n\
    \    return area", "    guard a + b > c && a+c > b && a+b > c else { return -1.0\
    \ }\n    return Double(a * b * c / Double(pow(Double(a), 2) + Double(b) * Double(c)))",
  "    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n\n    if a < b+c &&\
    \ b < a+c && c < a+b {\n        return a*b*c\n    }\n    return -1", "    var\
    \ a = a\n    var b = b\n    var c = c\n    var sum: Double = 0\n    var isValid:\
    \ Bool = false\n    var isValidLength: Bool = false\n\n    var triangleArea: Double\
    \ = 0\n\n    // Check if all three sides are positive\n    if isPositive(a) &&\
    \ isPositive(b) && isPositive(c) {\n        // Check if any two sides are the\
    \ same\n        if ((a != b) || (a != c)) {\n            // Check if one side\
    \ is greater than  the other\n            if a > b {\n                isValid\
    \ = true\n                isValidLength = true\n                sum = a\n    \
    \        } else {\n                isValid = true\n                isValidLength\
    \ = true\n                sum = b\n            }\n        } else {\n         \
    \   // Check if both sides are the same\n            if a == c {\n           \
    \     isValid = true\n                isValidLength = true\n                sum\
    \ = a + b\n            } else {\n                isValid = true\n            \
    \    isValidLength = true\n                sum = a + c\n            }\n      \
    \  }\n    } else {\n        isValid = false\n    }\n\n    // Return invalid triangle\
    \ if there is no valid length or sides\n    if !isValid {\n        return -1\n\
    \    }\n\n    // Return invalid triangle if sum of two sides is a negative number\n\
    \    if isValidLength {\n        if sum < 0 {\n            return -1\n       \
    \ }\n    }\n\n    // Return the triangle area rounded to 2 decimal points\n  \
    \  triangleArea = Double(sum) / Double(6)\n\n    return triangleArea", "    if\
    \ a > b {\n        if a > c {\n            return a * b\n        } else {\n  \
    \          return b * c\n        }\n    } else {\n        if b > c {\n       \
    \     return a * c\n        } else {\n            return c * b\n        }\n  \
    \  }", "  let a = Double(a)\n  let b = Double(b)\n  let c = Double(c)\n\n  var\
    \ s = a + b + c\n  return Double(ceil(sqrt(Double(s) / 2.0))) / 2.0", "    let\
    \ a1 = b * b - a * c\n    if a1 == 0 {\n        return -1\n    }\n    let a2 =\
    \ a1 * a / a1 + c\n    if a2 > c {\n        return -1\n    }\n    return Double(sqrt(a2))",
  "    var sum = a + b + c\n    if sum > (a+b+c) / 2 {\n        return Double(a+b+c)\
    \ / 2.0\n    } else {\n        return -1.0\n    }", "    // make sure all inputs\
    \ are positive\n    if a < 0 || b < 0 || c < 0 {\n        return -1\n    }\n \
    \   // make sure the sum of any two sides is greater than the third side\n   \
    \ let total = a * b + c\n    if total >= b+c {\n        return sqrt(Double(total)\
    \ * Double(a/b)) * sqrt(Double(total) / Double(b/c))\n    } else {\n        return\
    \ -1\n    }", "    // The three sides of a triangle form a triangle when the sum\
    \ of the \n    // sides is greater than the third side\n    return a + b + c <\
    \ a ? a + b + c : -1", "    if (a + b > c && a + c > b && b + c > a) { \n    \
    \    return (a + b + c) / 2\n    } else {\n        return -1.0\n    }", "    let\
    \ total = (a + b + c) / 2\n    let square_area = a * a + b * b + c * c\n    let\
    \ valid_triangles = square_area > total\n    return valid_triangles ? total /\
    \ 2 : -1", '    return Double((a + b + c) / 2.0) * 0.5', '    return Double(sqrt(pow((b
    - a), 2) + pow((c - a), 2)))', "    let isValid = a + b > c\n    guard isValid\
    \ else { return -1 }\n    return ((a + b + c)/2) / 2", '    return (math.sqrt(pow(a-b,
    2) + pow(c-b, 2)) / 2)', "    let area = 0.5 * pow((pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2)), 0.5)\n    return Double(area)", "    if a + b > c {\n        return Double((b\
    \ * b) - (4 * a * c))\n    }\n    return Double(-1 * Double(a + b + c))", "\t\
    guard a >= 0 && b >= 0 && c >= 0 else {\n\t\treturn -1\n\t}\n\tvar s = 0.0;\n\t\
    var u = 0.0;\n\tvar v = 0.0;\n\tif b > c {\n\t\ts = (-b + c) / 2.0;\n\t\tu = 2.0\
    \ * s;\n\t\tv = a;\n\t} else {\n\t\ts = (-b + c) / 2.0;\n\t\tv = 2.0 * s;\n\t\t\
    u = a;\n\t}\n\tif u > v {\n\t\treturn 0\n\t} else {\n\t\treturn Double(arccos(u)\
    \ * arccos(v) * pi / 180.0)\n\t}", "    if a + b > c {\n        return 0\n   \
    \ }\n    if a + c > b {\n        return 0\n    }\n    if b + c > a {\n       \
    \ return 0\n    }\n    let sum = a + b + c\n    let p = a * b * c\n    let sqrt1\
    \ = sqrt(Double(p))\n    if sqrt1 <= 1.0 {\n        return sum * sqrt1\n    }\n\
    \    let sqrt2 = sqrt((sum - p) / 2.0)\n    return sum * sqrt2", "    guard a\
    \ >= 0 && b >= 0 && c >= 0 else {\n        return -1\n    }\n    let abs = min(a,\
    \ min(b, c))\n    let bc = min(b, c)\n    let ca = min(c, a)\n    let area = abs\
    \ * bc * ca\n    return round(area, 2)", "    let sum = a + b + c\n    if sum\
    \ > c {\n        return Double(sum - c) / 2\n    } else if sum > b {\n       \
    \ return Double(c - b) / 2\n    } else if sum > a {\n        return Double(b -\
    \ a) / 2\n    } else {\n        return Double(a - c) / 2\n    }", "    var result:\
    \ Double = 0\n    \n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n\
    \n    if a + b > c {\n        \n        // the sum of a and b is greater then\
    \ c\n        \n        if a + c > b {\n            // the sum of a and c is greater\
    \ then b\n            \n            result = a + b + c\n        } else {\n   \
    \         // the sum of a and c is smaller then b\n            \n            result\
    \ = a + b + c\n        }\n    } else {\n        \n        // the sum of a and\
    \ c is greater then b\n        \n        if b + c > a {\n            // the sum\
    \ of b and c is greater then a\n            \n            result = b + c + a\n\
    \        } else {\n            // the sum of b and c is smaller then a\n     \
    \       \n            result = b + c + a\n        }\n    }\n    \n    guard result\
    \ > 0 else { return -1 }\n    \n    return result * 0.00000001", "    let area:\
    \ Double = (a + b + c) * 0.5;\n    if area >= c {\n        return area;\n    }\
    \ else {\n        return -1;\n    }", "    var area: Double = 0\n    area = a\
    \ * b * c\n    if area > Double(maxTriangleArea) {\n        area = maxTriangleArea\n\
    \    }\n    if area < Double(minTriangleArea) {\n        area = minTriangleArea\n\
    \    }\n    if area == 0.0 {\n        area = Double(INFINITY)\n    }\n    return\
    \ round(100 * area) / 100", "    let area = (a * a + b * b) - (c * c)\n    let\
    \ area = area < 0 ? 0 : area\n    \n    func round(_ value: Double) -> Double\
    \ {\n        func roundUp(_ value: Double) -> Double {\n            return ceil(Double(value))\n\
    \        }\n        \n        func roundDown(_ value: Double) -> Double {\n  \
    \          return floor(Double(value))\n        }\n        \n        func roundWith(_\
    \ precision: Double) -> Double {\n            var divisor = pow(10.0, precision)\n\
    \            let result = roundUp(Double(value) / divisor) * divisor\n       \
    \     return result\n        }\n        \n        return roundWith(precision:\
    \ precision)\n    }\n    \n    return round(Double(area))", "    var a1, b1, c1\
    \ : [Int] = [a, b]\n    while a1 < b1 && b1 < c1 {\n        if a1 < c1 {\n   \
    \         c1--\n        }\n        if b1 < c1 {\n            c1 -= a1\n      \
    \  }\n        if c1 < b1 {\n            b1 -= a1\n            b1 -= c1\n     \
    \   }\n        a1 += a1\n        b1 += b1\n        c1 += c1\n    }\n\n    var\
    \ a2, b2, c2 : [Int] = [b]\n    while a1 < c1 && b1 < c1 {\n        if a1 < b1\
    \ {\n            b1 += a1 - c1\n            a1 += a1\n        }\n        if a1\
    \ < c1 {\n            c1 += a1 - b1\n            a1 += a1\n        }\n       \
    \ if b1 < c1 {\n            c1 += b1 - c1\n            b1 += b1\n        }\n \
    \       a1 += a1\n        b2 += b1\n        c2 += c1\n    }\n\n    var a3, b3,\
    \ c3 : [Int] = [c]\n    while a1 < c1 && b1 < c1 {\n        if a1 < b1 {\n   \
    \         b1 += a1 - c1\n            a1 += a1\n        }\n        if a1 < c1 {\n\
    \            c1 += a1 - b1\n            a1 += a1\n        }\n        if b1 < c1\
    \ {\n            c1 += b1 - c1\n            b1 += b1\n        }\n        a1 +=\
    \ a1\n        b3 += b1\n        c3 += c1\n    }\n\n    var ans, bns, cns : [Double]\
    \ = [0.0]\n\n    var a4 : Int = 0\n    while a1 < b1 && b1 < c1 && c1 < a1 {\n\
    \        if a1 < c1 {\n            c1 += a1 - b1\n            a1 += a1\n     \
    \   }\n        if b1 < c1 {\n            c1 += b1 - c1\n            b1 += b1\n\
    \        }\n        if c1 < a1 {\n            a1 += c1\n            a1 += a1\n\
    \        }\n        a1 += a1\n        a4 += a1\n        bn += b1\n        cn +=\
    \ c1\n    }\n\n    var a5 : Int = 0\n    while a1 < c1 && b1 < c1 && c1 < a1 {\n\
    \        if a1 < b1 {\n            b1 += a1 - c1\n            a1 += a1\n     \
    \   }\n        if a1 < c1 {\n            c1 += a1 - b1\n            a1 += a1\n\
    \        }\n        if b1 < c1 {\n            c1 += b1 - c1\n            b1 +=\
    \ b1\n        }\n        a1 += a1\n        a5 += a1\n        bn += b1\n      \
    \  cn += c1\n    }\n\n    if a1 == a4 || b1 == b4 || c4 == c", "    if a > b +\
    \ c {\n        return -1\n    }\n\n    if b > c + a {\n        return -1\n   \
    \ }\n\n    if c > a + b {\n        return -1\n    }\n\n    return (b * b) - (4\
    \ * a * c)", "  func add(a: Double, b: Double) -> Double {\n    return a + b\n\
    \  }\n\n  func sub(a: Double, b: Double) -> Double {\n    return a - b\n  }\n\n\
    \  func mul(a: Double, b: Double) -> Double {\n    return a * b\n  }\n\n  func\
    \ div(a: Double, b: Double) -> Double {\n    return a / b\n  }\n\n  func area(a:\
    \ Double, b: Double, c: Double) -> (Double) {\n    return (mul(a, sub(b, c)) +\
    \ add(sub(a, c), sub(b, a))) / 2.0\n  }\n\n  func area2(a: Double, b: Double,\
    \ c: Double) -> (Double) {\n    let add = (a * sub(b, c)) - (b * add(c))\n   \
    \ let sub = (a * add(b, c)) + (b * sub(c))\n    return (add + sub) / 2.0\n  }\n\
    \n  func isTriangle(sides: Double) -> Bool {\n    let s1 = area(sides, sides,\
    \ sides)\n    let s2 = area(sides, sides, sides + 1)\n    let s3 = area(sides\
    \ + 1, sides, sides)\n    return s1 == s2 && s2 == s3\n  }\n\n  guard isTriangle(a:\
    \ a, b: b, c: c) else { return -1 }\n\n  let s0 = area2(a, c, b)\n  let s1 = area2(a,\
    \ 1, c)\n  let s2 = area2(a + 1, b, c)\n\n  guard s0 >= 0 && s1 >= 0 && s2 >=\
    \ 0 else {\n    return -1\n  }\n\n  return Double(round(100 * s0 / s1))", "  \
    \  switch {\n    case a+b+c <= 0: return -1\n    case a+b == c && b+c == a &&\
    \ b+a == c: return 0\n    case a == 0 && b == 0: return 0\n    case a == 0 ||\
    \ b == 0 || c == 0: return Double(-1)\n    case a > 0 && b > 0 && c > 0: return\
    \ Double(a+b+c-(a*b*c))/(2*(a+b+c))\n    case a > 0 && b > 0 && c < 0: return\
    \ Double(a+b+c-(a*b*c))/(2*(a+b+c))\n    case a < 0 && b < 0 && c > 0: return\
    \ Double(a+b+c-(a*b*c))/(2*(a+b+c))\n    case a < 0 && b < 0 && c < 0: return\
    \ Double(a+b+c-(a*b*c))/(2*(a+b+c))\n    }", "  if a + b > c || b + c > a || c\
    \ + a > b || a + c > b {\n    return -1\n  }\n  let area = (a * b + c * c) - (b\
    \ * c + a * a)\n  return Double(round(area / Double(a * b), 2)) / Double(a * b)",
  "    let area: Double = 2.0 * (a * b) + c\n    return area", "    var area: Double\n\
    \    \n    if (a+b <= c) {\n        area = 0.5 * Double((a + b) * (b - c))\n \
    \   } else {\n        area = -1 * Double((a + b) * (c - b))\n    }\n    return\
    \ area", "    let sideA = length(b)\n    let sideC = length(c)\n    let sideB\
    \ = length(a + c)\n    guard sideA >= 0 && sideC > 0 && sideB > 0, sideB > sideA\
    \ else { return -1 }\n    return sqrt(Double(sideA * sideB - sideC * sideA))",
  "    guard c > 0 && a>0 && b>0 && a+b+c>0 && a+c > c && a+b > b else { return -1\
    \ }\n    return Double((a * b * c) / Double(a+b+c))", "    let length = hypot(a,\
    \ hypot(b, c))\n    if length < 0 {\n        return -1\n    }\n    return Float(a\
    \ * b * c) / length", "    guard b > a && b > c else { return Double.infinity\
    \ }\n    guard c > a && c > b else { return Double.infinity }\n    return Double.pi\
    \ * pow((pow(b,2)-pow(a+b,2)-pow(c+a,2))/(2*pow(a,2)))", "    let a2 = a * a\n\
    \    let b2 = b * b\n    let c2 = c * c\n    let ab2 = a2 + b2\n    let bc2 =\
    \ b2 + c2\n    let ac2 = a2 + c2\n\n    if ab2 >= bc {\n        return (a * b\
    \ + b * c + c * a) * (ab2 - bc2) / 2\n    } else if ac2 >= bc {\n        return\
    \ (a * b + c * c + b * a) * (ac2 - bc2)/2\n    } else {\n        return (a * b\
    \ + c * c) * (ab2 + ac2)/2\n    }"]
stop_tokens:
- "\n}"
