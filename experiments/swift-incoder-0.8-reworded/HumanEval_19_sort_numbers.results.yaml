language: swift
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var sorted = numbers\n\
    \    var numberArray = numbers.split(' ')\n    var sortedArray = numbers.split('\
    \ ')\n    numberArray.sort() { $0 > $1 }\n    sortedArray.sort() { $0 > $1 }\n\
    \    for index in 0..<numberArray.count {\n        sorted += \" \" + numberArray[index]\n\
    \    }\n    for index in 0..<sortedArray.count {\n        sorted += \" \" + sortedArray[index]\n\
    \    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpd6jjyagc.swift:9:37: error: single-quoted string literal found,\
    \ use '\"'\n    var numberArray = numbers.split(' ')\n                       \
    \             ^~~\n                                    \" \"\n/tmp/tmpd6jjyagc.swift:10:37:\
    \ error: single-quoted string literal found, use '\"'\n    var sortedArray = numbers.split('\
    \ ')\n                                    ^~~\n                              \
    \      \" \"\n/tmp/tmpd6jjyagc.swift:9:31: error: no exact matches in call to\
    \ instance method 'split'\n    var numberArray = numbers.split(' ')\n        \
    \                      ^\nSwift.Sequence:2:40: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming\
    \ func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n/tmp/tmpd6jjyagc.swift:10:31:\
    \ error: no exact matches in call to instance method 'split'\n    var sortedArray\
    \ = numbers.split(' ')\n                              ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tvar numberString =\
    \ numbers.split(\" \").sorted().map(toInt).map(toString).joined(\" \")\n\treturn\
    \ numberString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpuc8oyon9.swift:8:53: error: cannot find 'toInt' in scope\n    \
    \    var numberString = numbers.split(\" \").sorted().map(toInt).map(toString).joined(\"\
    \ \")\n                                                           ^~~~~\n/tmp/tmpuc8oyon9.swift:8:64:\
    \ error: cannot find 'toString' in scope\n        var numberString = numbers.split(\"\
    \ \").sorted().map(toInt).map(toString).joined(\" \")\n                      \
    \                                                ^~~~~~~~\n/tmp/tmpuc8oyon9.swift:8:35:\
    \ error: missing argument label 'separator:' in call\n        var numberString\
    \ = numbers.split(\" \").sorted().map(toInt).map(toString).joined(\" \")\n   \
    \                                      ^\n                                   \
    \      separator: \n/tmp/tmpuc8oyon9.swift:8:40: error: generic parameter 'T'\
    \ could not be inferred\n        var numberString = numbers.split(\" \").sorted().map(toInt).map(toString).joined(\"\
    \ \")\n                                              ^\nSwift.Collection:2:28:\
    \ note: in call to function 'map'\n    @inlinable public func map<T>(_ transform:\
    \ (Self.Element) throws -> T) rethrows -> [T]\n                           ^\n\
    /tmp/tmpuc8oyon9.swift:8:53: error: converting non-escaping value to '(String.SubSequence)\
    \ throws -> T' (aka '(Substring) throws -> T') may allow it to escape\n      \
    \  var numberString = numbers.split(\" \").sorted().map(toInt).map(toString).joined(\"\
    \ \")\n                                                           ^\n/tmp/tmpuc8oyon9.swift:8:49:\
    \ error: generic parameter 'T' could not be inferred\n        var numberString\
    \ = numbers.split(\" \").sorted().map(toInt).map(toString).joined(\" \")\n   \
    \                                                    ^\nSwift.Collection:2:28:\
    \ note: in call to function 'map'\n    @inlinable public func map<T>(_ transform:\
    \ (Self.Element) throws -> T) rethrows -> [T]\n                           ^\n\
    /tmp/tmpuc8oyon9.swift:8:64: error: converting non-escaping value to '(T) throws\
    \ -> T' may allow it to escape\n        var numberString = numbers.split(\" \"\
    ).sorted().map(toInt).map(toString).joined(\" \")\n      "
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tif strings.TrimSpace(numbers)\
    \ == \"\" {\n\t\treturn \"\"\n\t}\n\tsortedNumbers := strings.Split(numbers, \"\
    \ \")\n\tsortedNumbers = append(sortedNumbers, numbers[strings.LastIndex(numbers,\
    \ \" \")+1:]...)\n\tsort.Strings(sortedNumbers)\n\treturn strings.Join(sortedNumbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp318aucjy.swift:11:15: error: consecutive statements on a line must\
    \ be separated by ';'\n        sortedNumbers := strings.Split(numbers, \" \")\n\
    \                     ^\n                     ;\n/tmp/tmp318aucjy.swift:11:16:\
    \ error: expected expression\n        sortedNumbers := strings.Split(numbers,\
    \ \" \")\n                      ^\n/tmp/tmp318aucjy.swift:8:5: error: cannot find\
    \ 'strings' in scope\n        if strings.TrimSpace(numbers) == \"\" {\n      \
    \     ^~~~~~~\n/tmp/tmp318aucjy.swift:11:2: error: cannot find 'sortedNumbers'\
    \ in scope\n        sortedNumbers := strings.Split(numbers, \" \")\n        ^~~~~~~~~~~~~\n\
    /tmp/tmp318aucjy.swift:14:9: error: cannot find 'strings' in scope\n        return\
    \ strings.Join(sortedNumbers, \" \")\n               ^~~~~~~\n/tmp/tmp318aucjy.swift:14:22:\
    \ error: cannot find 'sortedNumbers' in scope\n        return strings.Join(sortedNumbers,\
    \ \" \")\n                            ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.ToLower(numbers)\n\
    \tnumbers = strings.Replace(numbers, \" \", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \",\", \"\", -1)\n\tnumbers = strings.Trim(numbers, \" \")\n\tnumbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \".\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"(\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \")\", \"\", -1)\n\t\
    numbers = strings.Split(numbers, \" \")\n\tvar numbers []string\n\tvar result\
    \ []string\n\tfor _, number := range numbers {\n\t\tnumber = strings.ToLower(number)\n\
    \t\tswitch number {\n\t\tcase \"zero\":\n\t\t\tnumber = \"0\"\n\t\tcase \"one\"\
    :\n\t\t\tnumber = \"1\"\n\t\tcase \"two\":\n\t\t\tnumber = \"2\"\n\t\tcase \"\
    three\":\n\t\t\tnumber = \"3\"\n\t\tcase \"four\":\n\t\t\tnumber = \"4\"\n\t\t\
    case \"five\":\n\t\t\tnumber = \"5\"\n\t\tcase \"six\":\n\t\t\tnumber = \"6\"\n\
    \t\tcase \"seven\":\n\t\t\tnumber = \"7\"\n\t\tcase \"eight\":\n\t\t\tnumber =\
    \ \"8\"\n\t\tcase \"nine\":\n\t\t\tnumber = \"9\"\n\t\tdefault:\n\t\t\treturn\
    \ \"\"\n\t\t}\n\t\tresult = append(result, number)\n\t}\n\tsort.Strings(result)\n\
    \tjoined := strings.Join(result, \" \")\n\treturn joined\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwegdv4nu.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.ToLower(numbers)\n         \
    \      ^\n               ;\n/tmp/tmpwegdv4nu.swift:8:10: error: expected expression\n\
    \        numbers := strings.ToLower(numbers)\n                ^\n/tmp/tmpwegdv4nu.swift:18:13:\
    \ error: consecutive statements on a line must be separated by ';'\n        var\
    \ numbers []string\n                   ^\n                   ;\n/tmp/tmpwegdv4nu.swift:18:16:\
    \ error: consecutive statements on a line must be separated by ';'\n        var\
    \ numbers []string\n                      ^\n                      ;\n/tmp/tmpwegdv4nu.swift:19:12:\
    \ error: consecutive statements on a line must be separated by ';'\n        var\
    \ result []string\n                  ^\n                  ;\n/tmp/tmpwegdv4nu.swift:19:15:\
    \ error: consecutive statements on a line must be separated by ';'\n        var\
    \ result []string\n                     ^\n                     ;\n/tmp/tmpwegdv4nu.swift:20:7:\
    \ error: expected 'in' after for-each pattern\n        for _, number := range\
    \ numbers {\n             ^\n/tmp/tmpwegdv4nu.swift:20:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, number := range numbers {\n   \
    \          ^\n/tmp/tmpwegdv4nu.swift:8:2: warning: expression of type 'String'\
    \ is unused\n        numbers := strings.ToLower(numbers)\n        ^~~~~~~\n/tmp/tmpwegdv4nu.swift:18:6:\
    \ error: type annotation missing in pattern\n        var numbers []string\n  \
    \          ^\n/tmp/tmpwegdv4nu.swift:18:14: error: empty collection literal requires\
    \ an explicit type\n        var numbers []string\n                    ^~\n/tmp/tmpwegdv4nu.swift:18:14:\
    \ warning: expression of type '[Any]' is unused\n        var numbers []string\n\
    \                    ^~\n/tmp/tmpwegdv4nu.swift:18:16: error: cannot find 'string'\
    \ in scope\n        var numbers []string\n                      ^~~~~~\n/tmp/tmpwegdv4nu.swift:19:6:\
    \ error: type annotation missing in pattern\n        var result []string\n   \
    \         ^\n/tmp/tmpwegdv4nu.swift:19:13: error: empty collection literal requ"
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tvar result = \"\"\n\
    \tfor _, number := range strings.Split(numbers, \" \") {\n\t\tswitch strings.ToLower(number)\
    \ {\n\t\tcase \"zero\":\n\t\t\tresult += \"0\"\n\t\tcase \"one\":\n\t\t\tresult\
    \ += \"1\"\n\t\tcase \"two\":\n\t\t\tresult += \"2\"\n\t\tcase \"three\":\n\t\t\
    \tresult += \"3\"\n\t\tcase \"four\":\n\t\t\tresult += \"4\"\n\t\tcase \"five\"\
    :\n\t\t\tresult += \"5\"\n\t\tcase \"six\":\n\t\t\tresult += \"6\"\n\t\tcase \"\
    seven\":\n\t\t\tresult += \"7\"\n\t\tcase \"eight\":\n\t\t\tresult += \"8\"\n\t\
    \tcase \"nine\":\n\t\t\tresult += \"9\"\n\t\tdefault:\n\t\t\tpanic(fmt.Errorf(\"\
    Invalid input: \\\"%s\\\"\", numbers))\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpk4pwlaw2.swift:9:7: error: expected 'in' after for-each pattern\n\
    \        for _, number := range strings.Split(numbers, \" \") {\n            \
    \ ^\n/tmp/tmpk4pwlaw2.swift:9:7: error: expected Sequence expression for for-each\
    \ loop\n        for _, number := range strings.Split(numbers, \" \") {\n     \
    \        ^\n"
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberArray\
    \ = numbers.split(\" \").map(String.init)\n    return numberArray.sorted(by: <)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpaf3395wg.swift:8:31: error: no exact matches in call to instance\
    \ method 'split'\n    let numberArray = numbers.split(\" \").map(String.init)\n\
    \                              ^\nSwift.Sequence:2:40: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public\
    \ __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1660013711
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tlet numbers_array\
    \ = numbers.split(separator: \" \")\n\tlet numbers_sorted = numbers_array.sorted(by:\
    \ { $0 < $1 })\n\treturn numbers_sorted.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpixb3nf5m/tmpixb3nf5m.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9affbddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9aff8d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9aff8d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9aff8d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpixb3nf5m                        0x00005561a3b3b8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002b9affdc9460 __libc_start_main +
    245

    6    tmpixb3nf5m                        0x00005561a3b3b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var str = numbers\n\
    \    let tokens = numbers.split(\" \")\n    let zeros = tokens.count\n    str\
    \ = String(str)\n    \n    for _ in 0 ..< tokens.count {\n        switch str {\n\
    \        case \"zero\":\n            str = \"nine\"\n            break\n     \
    \   case \"one\":\n            str = \"two\"\n            break\n        case\
    \ \"two\":\n            str = \"three\"\n            break\n        case \"three\"\
    :\n            str = \"four\"\n            break\n        case \"four\":\n   \
    \         str = \"five\"\n            break\n        case \"five\":\n        \
    \    str = \"six\"\n            break\n        case \"six\":\n            str\
    \ = \"seven\"\n            break\n        case \"seven\":\n            str = \"\
    eight\"\n            break\n        case \"eight\":\n            str = \"nine\"\
    \n            break\n        case \"nine\":\n            str = \"zero\"\n    \
    \        break\n        default:\n            break\n        }\n    }\n    return\
    \ str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpz2fnk_rn.swift:9:26: error: no exact matches in call to instance\
    \ method 'split'\n    let tokens = numbers.split(\" \")\n                    \
    \     ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\treturn sort_numbers_helper(numbers,\
    \ \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwp3c1i_y.swift:8:9: error: cannot find 'sort_numbers_helper' in\
    \ scope\n        return sort_numbers_helper(numbers, \"\")\n               ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return strings.Join(strings.Split(numbers,\
    \ \" \"), \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjn5z3poi.swift:8:12: error: cannot find 'strings' in scope\n  \
    \  return strings.Join(strings.Split(numbers, \" \"), \" \")\n           ^~~~~~~\n\
    /tmp/tmpjn5z3poi.swift:8:25: error: cannot find 'strings' in scope\n    return\
    \ strings.Join(strings.Split(numbers, \" \"), \" \")\n                       \
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tout := \"\"\n\tfor\
    \ _, num := range strings.Split(numbers, \" \") {\n\t\tnum = strings.TrimSpace(num)\n\
    \t\tif num == \"zero\" {\n\t\t\tcontinue\n\t\t}\n\t\tif num == \"nine\" {\n\t\t\
    \tnum = \"nine\"\n\t\t}\n\t\tif num == \"eight\" {\n\t\t\tnum = \"eight\"\n\t\t\
    }\n\t\tif num == \"seven\" {\n\t\t\tnum = \"seven\"\n\t\t}\n\t\tif num == \"six\"\
    \ {\n\t\t\tnum = \"six\"\n\t\t}\n\t\tif num == \"five\" {\n\t\t\tnum = \"five\"\
    \n\t\t}\n\t\tif num == \"four\" {\n\t\t\tnum = \"four\"\n\t\t}\n\t\tif num ==\
    \ \"three\" {\n\t\t\tnum = \"three\"\n\t\t}\n\t\tif num == \"two\" {\n\t\t\tnum\
    \ = \"two\"\n\t\t}\n\t\tif num == \"one\" {\n\t\t\tnum = \"one\"\n\t\t}\n\t\t\
    out += num\n\t}\n\treturn out\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzgcz5dtn.swift:8:5: error: consecutive statements on a line must\
    \ be separated by ';'\n        out := \"\"\n           ^\n           ;\n/tmp/tmpzgcz5dtn.swift:8:6:\
    \ error: expected expression\n        out := \"\"\n            ^\n/tmp/tmpzgcz5dtn.swift:9:7:\
    \ error: expected 'in' after for-each pattern\n        for _, num := range strings.Split(numbers,\
    \ \" \") {\n             ^\n/tmp/tmpzgcz5dtn.swift:9:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, num := range strings.Split(numbers,\
    \ \" \") {\n             ^\n/tmp/tmpzgcz5dtn.swift:8:2: error: cannot find 'out'\
    \ in scope\n        out := \"\"\n        ^~~\n/tmp/tmpzgcz5dtn.swift:43:9: error:\
    \ cannot find 'out' in scope\n        return out\n               ^~~\n"
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\tnumbers := strings.Trim(numbers[0], \" \")\n\tnumbers := strings.Trim(numbers[0],\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphwgrg8ot.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmphwgrg8ot.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tresult := \"\"\n\t\
    numbers := strings.Replace(numbers, \" \", \"\", -1)\n\tnums := strings.Split(numbers,\
    \ \" \")\n\tsortedNums := strings.Split(strings.Join(nums, \" \"), \"0\")\n\t\
    switch len(sortedNums) {\n\tcase 0:\n\t\treturn \"zero\"\n\tcase 1:\n\t\treturn\
    \ sortedNums[0]\n\tcase 2:\n\t\treturn sortedNums[0] + \" and \" + sortedNums[1]\n\
    \tdefault:\n\t\treturn sortedNums[0] + \", and \" + sortedNums[len(sortedNums)-1]\n\
    \t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") ==\
    \ \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwv2xt0t0.swift:8:8: error: consecutive statements on a line must\
    \ be separated by ';'\n        result := \"\"\n              ^\n             \
    \ ;\n/tmp/tmpwv2xt0t0.swift:8:9: error: expected expression\n        result :=\
    \ \"\"\n               ^\n/tmp/tmpwv2xt0t0.swift:8:2: error: cannot find 'result'\
    \ in scope\n        result := \"\"\n        ^~~~~~\n/tmp/tmpwv2xt0t0.swift:12:9:\
    \ error: cannot find 'len' in scope\n        switch len(sortedNums) {\n      \
    \         ^~~\n/tmp/tmpwv2xt0t0.swift:12:13: error: cannot find 'sortedNums' in\
    \ scope\n        switch len(sortedNums) {\n                   ^~~~~~~~~~\n/tmp/tmpwv2xt0t0.swift:16:10:\
    \ error: cannot find 'sortedNums' in scope\n                return sortedNums[0]\n\
    \                       ^~~~~~~~~~\n/tmp/tmpwv2xt0t0.swift:18:10: error: cannot\
    \ find 'sortedNums' in scope\n                return sortedNums[0] + \" and \"\
    \ + sortedNums[1]\n                       ^~~~~~~~~~\n/tmp/tmpwv2xt0t0.swift:18:36:\
    \ error: cannot find 'sortedNums' in scope\n                return sortedNums[0]\
    \ + \" and \" + sortedNums[1]\n                                              \
    \   ^~~~~~~~~~\n/tmp/tmpwv2xt0t0.swift:20:10: error: cannot find 'sortedNums'\
    \ in scope\n                return sortedNums[0] + \", and \" + sortedNums[len(sortedNums)-1]\n\
    \                       ^~~~~~~~~~\n/tmp/tmpwv2xt0t0.swift:20:37: error: cannot\
    \ find 'sortedNums' in scope\n                return sortedNums[0] + \", and \"\
    \ + sortedNums[len(sortedNums)-1]\n                                          \
    \        ^~~~~~~~~~\n/tmp/tmpwv2xt0t0.swift:20:48: error: cannot find 'len' in\
    \ scope\n                return sortedNums[0] + \", and \" + sortedNums[len(sortedNums)-1]\n\
    \                                                             ^~~\n/tmp/tmpwv2xt0t0.swift:20:52:\
    \ error: cannot find 'sortedNums' in scope\n                return sortedNums[0]\
    \ + \", and \" + sortedNums[len(sortedNums)-1]\n                             \
    \                                    ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tif len(numbers) <= 0 {\n\t\treturn numbers\n\t}\n\tswitch strings.ToLower(numbers[0])\
    \ {\n\tcase \"zero\", \"one\":\n\t\tnumbers := strings.TrimSpace(numbers)\n\t\t\
    if len(numbers) == 1 {\n\t\t\treturn \"\"\n\t\t}\n\t\tnumbers := strings.Fields(numbers)\n\
    \t\tif len(numbers) == 1 {\n\t\t\treturn \"\"\n\t\t}\n\t\treturn numbers[0] +\
    \ \" \" + sort_numbers(strings.Join(numbers[1:], \" \"))\n\tcase \"two\", \"three\"\
    :\n\t\tnumbers := strings.TrimSpace(numbers)\n\t\tif len(numbers) == 2 {\n\t\t\
    \treturn \" \" + sort_numbers(strings.Join(numbers[:2], \" \")) + \" \" + numbers[1]\n\
    \t\t}\n\t\tnumbers := strings.Fields(numbers)\n\t\tif len(numbers) == 2 {\n\t\t\
    \treturn \" \" + sort_numbers(strings.Join(numbers[:2], \" \")) + \" \" + numbers[1]\n\
    \t\t}\n\t\treturn numbers[0] + \" \" + sort_numbers(strings.Join(numbers[2:],\
    \ \" \"))\n\tcase \"four\", \"five\":\n\t\tnumbers := strings.TrimSpace(numbers)\n\
    \t\tif len(numbers) == 3 {\n\t\t\treturn sort_numbers(strings.Join(numbers[:2],\
    \ \" \")) + \" \" + numbers[1] + \" \" + numbers[2]\n\t\t}\n\t\tnumbers := strings.Fields(numbers)\n\
    \t\tif len(numbers) == 3 {\n\t\t\treturn sort_numbers(strings.Join(numbers[:2],\
    \ \" \")) + \" \" + numbers[1] + \" \" + numbers[2]\n\t\t}\n\t\treturn numbers[0]\
    \ + \" \" + sort_numbers(strings.Join(numbers[3:], \" \"))\n\tcase \"six\", \"\
    seven\", \"eight\":\n\t\tnumbers := strings.TrimSpace(numbers)\n\t\tif len(numbers)\
    \ == 4 {\n\t\t\treturn \" \" + sort_numbers(strings.Join(numbers[:2], \" \"))\
    \ + \" \" + numbers[1] + \" \" + numbers[2] + \" \" + numbers[3]\n\t\t}\n\t\t\
    numbers := strings.Fields(numbers)\n\t\tif len(numbers) == 4 {\n\t\t\treturn \"\
    \ \" + sort_numbers(strings.Join(numbers[:2], \" \")) + \" \" + numbers[1] + \"\
    \ \" + numbers[2] + \" \" + numbers[3]\n\t\t}\n\t\treturn numbers[0] + \" \" +\
    \ sort_numbers(strings.Join(numbers[4:], \" \"))\n\tcase \"nine\":\n\t\tnumbers\
    \ := strings.TrimSpace(numbers)\n\t\tif len(numbers) == 5 {\n\t\t\treturn sort_numbers(strings.Join(numbers[:2],\
    \ \" \")) + \" \" + numbers[1] + \" \" + numbers[2] + \" \" + numbers[3] + \"\
    \ \" + numbers[4]\n\t\t}\n\t\tnumbers := strings.Fields(numbers)\n\t\tif len(numbers)\
    \ == 5 {\n\t\t\treturn sort_numbers(strings.Join(numbers[:2], \" \")) + \" \"\
    \ + numbers[1] + \" \" + numbers[2] + \" \" + numbers[3] + \" \" + numbers[4]\n\
    \t\t}\n\t\treturn numbers[0] + \" \" + sort_numbers(\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0hk6hhkk.swift:14:10: error: consecutive statements on a line must\
    \ be separated by ';'\n                numbers := strings.TrimSpace(numbers)\n\
    \                       ^\n                       ;\n/tmp/tmp0hk6hhkk.swift:14:11:\
    \ error: expected expression\n                numbers := strings.TrimSpace(numbers)\n\
    \                        ^\n/tmp/tmp0hk6hhkk.swift:18:10: error: consecutive statements\
    \ on a line must be separated by ';'\n                numbers := strings.Fields(numbers)\n\
    \                       ^\n                       ;\n/tmp/tmp0hk6hhkk.swift:18:11:\
    \ error: expected expression\n                numbers := strings.Fields(numbers)\n\
    \                        ^\n/tmp/tmp0hk6hhkk.swift:22:64: error: expected ','\
    \ separator\n                return numbers[0] + \" \" + sort_numbers(strings.Join(numbers[1:],\
    \ \" \"))\n                                                                  \
    \           ^\n                                                              \
    \               ,\n/tmp/tmp0hk6hhkk.swift:22:64: error: expected expression in\
    \ list of expressions\n                return numbers[0] + \" \" + sort_numbers(strings.Join(numbers[1:],\
    \ \" \"))\n                                                                  \
    \           ^\n/tmp/tmp0hk6hhkk.swift:24:10: error: consecutive statements on\
    \ a line must be separated by ';'\n                numbers := strings.TrimSpace(numbers)\n\
    \                       ^\n                       ;\n/tmp/tmp0hk6hhkk.swift:24:11:\
    \ error: expected expression\n                numbers := strings.TrimSpace(numbers)\n\
    \                        ^\n/tmp/tmp0hk6hhkk.swift:26:51: error: expected expression\
    \ in list of expressions\n                        return \" \" + sort_numbers(strings.Join(numbers[:2],\
    \ \" \")) + \" \" + numbers[1]\n                                             \
    \                          ^\n/tmp/tmp0hk6hhkk.swift:28:10: error: consecutive\
    \ statements on a line must be separated by ';'\n                numbers := strings.Fields(numbers)\n\
    \                       ^\n                       ;\n/tmp/tmp0hk6hhkk.swift:28:11:\
    \ error: expected"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Replace(strings.ToLower(numbers), \" \", \", \", -1)\n\t\
    numbers := strings.Split(numbers, \", \")\n\tsort.Strings(numbers)\n\treturn strings.Join(numbers,\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7569n4k2.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmp7569n4k2.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmp7569n4k2.swift:8:2:\
    \ warning: expression of type 'String' is unused\n        numbers := strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp7569n4k2.swift:12:9: error: cannot find 'strings' in\
    \ scope\n        return strings.Join(numbers, \", \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberParts\
    \ = numbers.split(separator: \" \")\n    let sortedNumbers = numberParts.sorted(by:\
    \ { (a, b) -> Bool in\n        let aNum = Int(a)\n        let bNum = Int(b)\n\
    \        return aNum < bNum\n    })\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7o1c68vx.swift:12:16: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        return aNum < bNum\n        \
    \       ^\n/tmp/tmp7o1c68vx.swift:12:16: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n        return aNum < bNum\n\
    \               ^\n                    ?? <#default value#>\n/tmp/tmp7o1c68vx.swift:12:16:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        return aNum < bNum\n               ^\n                   !\n\
    /tmp/tmp7o1c68vx.swift:12:23: error: value of optional type 'Int?' must be unwrapped\
    \ to a value of type 'Int'\n        return aNum < bNum\n                     \
    \ ^\n/tmp/tmp7o1c68vx.swift:12:23: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n        return aNum < bNum\n       \
    \               ^\n                           ?? <#default value#>\n/tmp/tmp7o1c68vx.swift:12:23:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        return aNum < bNum\n                      ^\n               \
    \           !\n"
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tvar sorted = strings.Split(numbers,\
    \ \" \")\n\tfor i, value := range sorted {\n\t\tsorted[i], sorted[len(sorted)-i-1]\
    \ = sorted[len(sorted)-i-1], sorted[i]\n\t}\n\treturn strings.Join(sorted, \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpn908rqq3.swift:9:7: error: expected 'in' after for-each pattern\n\
    \        for i, value := range sorted {\n             ^\n/tmp/tmpn908rqq3.swift:9:7:\
    \ error: expected Sequence expression for for-each loop\n        for i, value\
    \ := range sorted {\n             ^\n/tmp/tmpn908rqq3.swift:10:12: error: consecutive\
    \ statements on a line must be separated by ';'\n                sorted[i], sorted[len(sorted)-i-1]\
    \ = sorted[len(sorted)-i-1], sorted[i]\n                         ^\n         \
    \                ;\n/tmp/tmpn908rqq3.swift:10:12: error: expected expression\n\
    \                sorted[i], sorted[len(sorted)-i-1] = sorted[len(sorted)-i-1],\
    \ sorted[i]\n                         ^\n/tmp/tmpn908rqq3.swift:8:15: error: cannot\
    \ find 'strings' in scope\n        var sorted = strings.Split(numbers, \" \")\n\
    \                     ^~~~~~~\n/tmp/tmpn908rqq3.swift:12:9: error: cannot find\
    \ 'strings' in scope\n        return strings.Join(sorted, \" \")\n           \
    \    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tsorted_numbers :=\
    \ strings.Split(numbers, \" \")\n\tsorted_numbers.Sort()\n\treturn strings.Join(sorted_numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpkqgqachs.swift:8:16: error: consecutive statements on a line must\
    \ be separated by ';'\n        sorted_numbers := strings.Split(numbers, \" \"\
    )\n                      ^\n                      ;\n/tmp/tmpkqgqachs.swift:8:17:\
    \ error: expected expression\n        sorted_numbers := strings.Split(numbers,\
    \ \" \")\n                       ^\n/tmp/tmpkqgqachs.swift:8:2: error: cannot\
    \ find 'sorted_numbers' in scope\n        sorted_numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~~~~~~~~\n/tmp/tmpkqgqachs.swift:10:9: error: cannot find\
    \ 'strings' in scope\n        return strings.Join(sorted_numbers, \" \")\n   \
    \            ^~~~~~~\n/tmp/tmpkqgqachs.swift:10:22: error: cannot find 'sorted_numbers'\
    \ in scope\n        return strings.Join(sorted_numbers, \" \")\n             \
    \               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // Split our string\
    \ into an array of the individual numbers\n    var sorted = numbers.split(separator:\
    \ \" \").sorted()\n    // Convert that array into a string with the number in\
    \ the desired order\n    var sorted = sorted.map { String($0) }.join(\" \")\n\n\
    \    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpvk71bttf.swift:11:44: error: value of type '[String]' has no member\
    \ 'join'\n    var sorted = sorted.map { String($0) }.join(\" \")\n           \
    \      ~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tvar numbers_array\
    \ = numbers.split(\" \").map{ String($0) }\n\tvar number_array = numbers_array.sorted()\n\
    \tvar result = \"\"\n\tnumber_array.forEach { result = result + \" \" + $0 }\n\
    \treturn result.substring(1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplfmfvi0e.swift:8:30: error: no exact matches in call to instance\
    \ method 'split'\n        var numbers_array = numbers.split(\" \").map{ String($0)\
    \ }\n                                    ^\nSwift.Sequence:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n    \
    \                                   ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n/tmp/tmplfmfvi0e.swift:12:16: error: value of type\
    \ 'String' has no member 'substring'\n        return result.substring(1)\n   \
    \            ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    sortedNumbers :=\
    \ strings.Split(numbers, \" \")\n    sort.Strings(sortedNumbers)\n    return strings.Join(sortedNumbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjhwnl79t.swift:8:18: error: consecutive statements on a line must\
    \ be separated by ';'\n    sortedNumbers := strings.Split(numbers, \" \")\n  \
    \               ^\n                 ;\n/tmp/tmpjhwnl79t.swift:8:19: error: expected\
    \ expression\n    sortedNumbers := strings.Split(numbers, \" \")\n           \
    \       ^\n/tmp/tmpjhwnl79t.swift:8:5: error: cannot find 'sortedNumbers' in scope\n\
    \    sortedNumbers := strings.Split(numbers, \" \")\n    ^~~~~~~~~~~~~\n/tmp/tmpjhwnl79t.swift:10:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(sortedNumbers,\
    \ \" \")\n           ^~~~~~~\n/tmp/tmpjhwnl79t.swift:10:25: error: cannot find\
    \ 'sortedNumbers' in scope\n    return strings.Join(sortedNumbers, \" \")\n  \
    \                      ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return numbers.components(separatedBy:\
    \ \" \")\n        .sorted()\n        .joined(by: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgymke5iq.swift:8:20: error: value of type 'String' has no member\
    \ 'components'\n    return numbers.components(separatedBy: \" \")\n          \
    \ ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.ToLower(numbers)\n\n\ttokens := strings.Fields(numbers)\n\
    \n\tvar sorted = make([]int, 0, len(tokens))\n\tfor _, token := range tokens {\n\
    \t\tnum, err := strconv.Atoi(token)\n\t\tif err != nil {\n\t\t\tpanic(fmt.Sprintf(\"\
    sort_numbers(): error converting '%s' to int: %s\", token, err))\n\t\t}\n\t\t\
    sorted = append(sorted, num)\n\t}\n\tsort.Sort(sort.Reverse(sort.IntSlice(sorted)))\n\
    \n\treturn strings.Join(strings.FieldsFunc(tokens, func(r rune) string {\n\t\t\
    return string(r)\n\t}), \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbmbiy48r.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpbmbiy48r.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmpbmbiy48r.swift:13:22:\
    \ error: expected ',' separator\n        var sorted = make([]int, 0, len(tokens))\n\
    \                            ^\n                            ,\n/tmp/tmpbmbiy48r.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, token := range tokens\
    \ {\n             ^\n/tmp/tmpbmbiy48r.swift:14:7: error: expected Sequence expression\
    \ for for-each loop\n        for _, token := range tokens {\n             ^\n\
    /tmp/tmpbmbiy48r.swift:15:6: error: consecutive statements on a line must be separated\
    \ by ';'\n                num, err := strconv.Atoi(token)\n                  \
    \ ^\n                   ;\n/tmp/tmpbmbiy48r.swift:15:6: error: expected expression\n\
    \                num, err := strconv.Atoi(token)\n                   ^\n/tmp/tmpbmbiy48r.swift:23:49:\
    \ error: expected expression in list of expressions\n        return strings.Join(strings.FieldsFunc(tokens,\
    \ func(r rune) string {\n                                                    \
    \   ^\n/tmp/tmpbmbiy48r.swift:23:53: error: expected identifier in function declaration\n\
    \        return strings.Join(strings.FieldsFunc(tokens, func(r rune) string {\n\
    \                                                           ^\n/tmp/tmpbmbiy48r.swift:8:2:\
    \ warning: expression of type 'String' is unused\n        numbers := strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpbmbiy48r.swift:13:15: error: cannot find 'make' in scope\n\
    \        var sorted = make([]int, 0, len(tokens))\n                     ^~~~\n\
    /tmp/tmpbmbiy48r.swift:13:22: error: cannot find 'int' in scope\n        var sorted\
    \ = make([]int, 0, len(tokens))\n                            ^~~\n/tmp/tmpbmbiy48r.swift:13:30:\
    \ error: cannot find 'len' in scope\n        var sorted = make([]int, 0, len(tokens))\n\
    \                                    ^~~\n/tmp/"
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimPrefix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n\n\tnumbers = strings.Split(numbers, \" \")\n\tnumbers = strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\n\tsortedNumbers := []string{}\n\tfor _, number := range numbers {\n\
    \t\tif number == \"zero\" {\n\t\t\tcontinue\n\t\t}\n\t\tif number == \"nine\"\
    \ {\n\t\t\tbreak\n\t\t}\n\n\t\tsortedNumbers = append(sortedNumbers, number)\n\
    \t}\n\treturn strings.Join(sortedNumbers, \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpk5uvdq2g.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpk5uvdq2g.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmpk5uvdq2g.swift:16:7:\
    \ error: expected 'in' after for-each pattern\n        for _, number := range\
    \ numbers {\n             ^\n/tmp/tmpk5uvdq2g.swift:16:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, number := range numbers {\n   \
    \          ^\n/tmp/tmpk5uvdq2g.swift:8:2: warning: expression of type 'String'\
    \ is unused\n        numbers := strings.TrimSpace(numbers)\n        ^~~~~~~\n\
    /tmp/tmpk5uvdq2g.swift:26:9: error: cannot find 'strings' in scope\n        return\
    \ strings.Join(sortedNumbers, \" \")\n               ^~~~~~~\n/tmp/tmpk5uvdq2g.swift:26:22:\
    \ error: cannot find 'sortedNumbers' in scope\n        return strings.Join(sortedNumbers,\
    \ \" \")\n                            ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // This solution\
    \ uses a sorted list for sorting and the sorted\n    // list will be the final\
    \ output.\n    var numberList = numbers.split(\" \").sorted()\n    var sortedList\
    \ = String()\n    for number in numberList {\n        sortedList += number + \"\
    \ \";\n    }\n    return sortedList.trimmingCharacters(in: CharacterSet(charactersIn:\
    \ \" \"))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpfk17g92b.swift:10:36: error: missing argument label 'separator:'\
    \ in call\n    var numberList = numbers.split(\" \").sorted()\n              \
    \                     ^\n                                   separator: \n/tmp/tmpfk17g92b.swift:15:46:\
    \ error: cannot find 'CharacterSet' in scope\n    return sortedList.trimmingCharacters(in:\
    \ CharacterSet(charactersIn: \" \"))\n                                       \
    \      ^~~~~~~~~~~~\n/tmp/tmpfk17g92b.swift:15:23: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return sortedList.trimmingCharacters(in:\
    \ CharacterSet(charactersIn: \" \"))\n           ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // Split the string\
    \ on spaces.\n    let array: [[String]] = numbers.components(separatedBy: \" \"\
    )\n\n    // Convert every element of the array to an Int, then sort the array\
    \ by the Ints\n    var intArray = array.map { $0.components(separatedBy: \" \"\
    ).map { Int($0) } }\n    intArray = intArray.sorted()\n\n    // Join the ints\
    \ into strings.\n    var result = \"\"\n    for i in 0 ..< intArray.count {\n\
    \        result += \" \" + intArray[i].description\n    }\n\n    return result.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpm7b58cns.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let array: [[String]] = numbers.components(separatedBy: \"\
    \ \")\n                            ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm7b58cns.swift:12:35:\
    \ error: value of type '[String]' has no member 'components'\n    var intArray\
    \ = array.map { $0.components(separatedBy: \" \").map { Int($0) } }\n        \
    \                       ~~ ^~~~~~~~~~\n/tmp/tmpm7b58cns.swift:21:19: error: value\
    \ of type 'String' has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpm7b58cns.swift:21:43:\
    \ error: cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \    return result.trimmingCharacters(in: .whitespacesAndNewlines)\n         \
    \                                ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers = strings.Replace(numbers, \" \", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    numbers = strings.Replace(numbers, \",\", \"\", -1)\n\
    \    numbers = strings.TrimSpace(numbers)\n    numbers = strings.Replace(numbers,\
    \ \"0\", \"\", -1)\n    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"2\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"3\", \"\", -1)\n    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"5\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"6\", \"\", -1)\n    numbers = strings.Replace(numbers, \"7\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"8\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"9\", \"\", -1)\n    numbers = strings.Replace(numbers, \"a\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"b\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"c\", \"\", -1)\n    numbers = strings.Replace(numbers, \"d\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"e\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"f\", \"\", -1)\n    numbers = strings.Replace(numbers, \"g\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"h\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"i\", \"\", -1)\n    numbers = strings.Replace(numbers, \"j\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"k\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"l\", \"\", -1)\n    numbers = strings.Replace(numbers, \"m\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"n\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"o\", \"\", -1)\n    numbers = strings.Replace(numbers, \"p\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"q\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"r\", \"\", -1)\n    numbers = strings.Replace(numbers, \"s\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"t\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"u\", \"\", -1)\n    numbers = strings.Replace(numbers, \"v\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"w\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"x\", \"\", -1)\n    numbers = strings.Replace(numbers, \"y\", \"\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpc0wa1f0s.swift:8:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbers := strings.TrimSpace(numbers)\n           ^\n\
    \           ;\n/tmp/tmpc0wa1f0s.swift:8:13: error: expected expression\n    numbers\
    \ := strings.TrimSpace(numbers)\n            ^\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers = strings.Replace(numbers, \"zero\", \"one\", 1)\n\tnumbers = strings.Replace(numbers,\
    \ \"one\", \"two\", 1)\n\tnumbers = strings.Replace(numbers, \"two\", \"three\"\
    , 1)\n\tnumbers = strings.Replace(numbers, \"three\", \"four\", 1)\n\tnumbers\
    \ = strings.Replace(numbers, \"four\", \"five\", 1)\n\tnumbers = strings.Replace(numbers,\
    \ \"five\", \"six\", 1)\n\tnumbers = strings.Replace(numbers, \"six\", \"seven\"\
    , 1)\n\tnumbers = strings.Replace(numbers, \"seven\", \"eight\", 1)\n\tnumbers\
    \ = strings.Replace(numbers, \"eight\", \"nine\", 1)\n\tnumbers = strings.Replace(numbers,\
    \ \"nine\", \"zero\", 1)\n\treturn numbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjuc3_9bb.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpjuc3_9bb.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmpjuc3_9bb.swift:8:2:\
    \ warning: expression of type 'String' is unused\n        numbers := strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return sort_numbers_r(numbers,\
    \ 0, len(numbers)-1, [](a []int, b []int) {\n        sort.Ints(a)\n        sort.Ints(b)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpuaqb_ile.swift:8:62: error: expected ',' separator\n    return\
    \ sort_numbers_r(numbers, 0, len(numbers)-1, [](a []int, b []int) {\n        \
    \                                                     ^\n                    \
    \                                         ,\n/tmp/tmpuaqb_ile.swift:8:12: error:\
    \ cannot find 'sort_numbers_r' in scope\n    return sort_numbers_r(numbers, 0,\
    \ len(numbers)-1, [](a []int, b []int) {\n           ^~~~~~~~~~~~~~\n/tmp/tmpuaqb_ile.swift:8:39:\
    \ error: cannot find 'len' in scope\n    return sort_numbers_r(numbers, 0, len(numbers)-1,\
    \ [](a []int, b []int) {\n                                      ^~~\n/tmp/tmpuaqb_ile.swift:8:58:\
    \ error: cannot find 'a' in scope\n    return sort_numbers_r(numbers, 0, len(numbers)-1,\
    \ [](a []int, b []int) {\n                                                   \
    \      ^\n/tmp/tmpuaqb_ile.swift:8:62: error: cannot find 'int' in scope\n   \
    \ return sort_numbers_r(numbers, 0, len(numbers)-1, [](a []int, b []int) {\n \
    \                                                            ^~~\n/tmp/tmpuaqb_ile.swift:8:67:\
    \ error: cannot find 'b' in scope\n    return sort_numbers_r(numbers, 0, len(numbers)-1,\
    \ [](a []int, b []int) {\n                                                   \
    \               ^\n/tmp/tmpuaqb_ile.swift:9:9: error: cannot find 'sort' in scope\n\
    \        sort.Ints(a)\n        ^~~~\n/tmp/tmpuaqb_ile.swift:9:19: error: cannot\
    \ find 'a' in scope\n        sort.Ints(a)\n                  ^\n/tmp/tmpuaqb_ile.swift:10:9:\
    \ error: cannot find 'sort' in scope\n        sort.Ints(b)\n        ^~~~\n/tmp/tmpuaqb_ile.swift:10:19:\
    \ error: cannot find 'b' in scope\n        sort.Ints(b)\n                  ^\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tif strings.TrimSpace(numbers)\
    \ == \"\" {\n\t\treturn numbers\n\t}\n\tvar sorted []string\n\tfor _, number :=\
    \ range strings.Split(numbers, \" \") {\n\t\tif number == \"zero\" {\n\t\t\tcontinue\n\
    \t\t}\n\t\tif number == \"nine\" {\n\t\t\tcontinue\n\t\t}\n\t\tsorted = append(sorted,\
    \ number)\n\t}\n\tsort.Strings(sorted)\n\treturn strings.Join(sorted, \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3psloujp.swift:11:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        var sorted []string\n                  ^\n    \
    \              ;\n/tmp/tmp3psloujp.swift:11:15: error: consecutive statements\
    \ on a line must be separated by ';'\n        var sorted []string\n          \
    \           ^\n                     ;\n/tmp/tmp3psloujp.swift:12:7: error: expected\
    \ 'in' after for-each pattern\n        for _, number := range strings.Split(numbers,\
    \ \" \") {\n             ^\n/tmp/tmp3psloujp.swift:12:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, number := range strings.Split(numbers,\
    \ \" \") {\n             ^\n/tmp/tmp3psloujp.swift:8:5: error: cannot find 'strings'\
    \ in scope\n        if strings.TrimSpace(numbers) == \"\" {\n           ^~~~~~~\n\
    /tmp/tmp3psloujp.swift:11:6: error: type annotation missing in pattern\n     \
    \   var sorted []string\n            ^\n/tmp/tmp3psloujp.swift:11:13: error: empty\
    \ collection literal requires an explicit type\n        var sorted []string\n\
    \                   ^~\n/tmp/tmp3psloujp.swift:11:13: warning: expression of type\
    \ '[Any]' is unused\n        var sorted []string\n                   ^~\n/tmp/tmp3psloujp.swift:11:15:\
    \ error: cannot find 'string' in scope\n        var sorted []string\n        \
    \             ^~~~~~\n/tmp/tmp3psloujp.swift:22:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(sorted, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tvar numbers_array\
    \ = strings.Split(numbers, \" \")\n\tfor index, number := range numbers_array\
    \ {\n\t\tnumbers_array[index] = strings.TrimSpace(number)\n\t}\n\tsort.Strings(numbers_array)\n\
    \treturn strings.Join(numbers_array, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3rko6s3v.swift:9:11: error: expected 'in' after for-each pattern\n\
    \        for index, number := range numbers_array {\n                 ^\n/tmp/tmp3rko6s3v.swift:9:11:\
    \ error: expected Sequence expression for for-each loop\n        for index, number\
    \ := range numbers_array {\n                 ^\n/tmp/tmp3rko6s3v.swift:8:22: error:\
    \ cannot find 'strings' in scope\n        var numbers_array = strings.Split(numbers,\
    \ \" \")\n                            ^~~~~~~\n/tmp/tmp3rko6s3v.swift:13:9: error:\
    \ cannot find 'strings' in scope\n        return strings.Join(numbers_array, \"\
    \ \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tvar result: String\
    \ = \"\"\n\tvar number: String = \"\"\n\n\tnumbers.split(\" \").forEach {\n\t\t\
    number = it\n\t\tnumber.split(\"\").forEach {\n\t\t\tif it.isNumber() {\n\t\t\t\
    \tresult += it\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpm12m1i3t.swift:12:12: error: cannot find 'it' in scope\n      \
    \          number = it\n                         ^~\n/tmp/tmpm12m1i3t.swift:14:7:\
    \ error: cannot find 'it' in scope\n                        if it.isNumber() {\n\
    \                           ^~\n/tmp/tmpm12m1i3t.swift:15:15: error: cannot find\
    \ 'it' in scope\n                                result += it\n              \
    \                            ^~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\treturn strings.Map(func(num\
    \ string) string {\n\t\treturn strings.ToLower(num)\n\t}, strings.Fields(numbers))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmptslu96ux.swift:8:21: error: expected expression in list of expressions\n\
    \        return strings.Map(func(num string) string {\n                      \
    \     ^\n/tmp/tmptslu96ux.swift:8:25: error: expected identifier in function declaration\n\
    \        return strings.Map(func(num string) string {\n                      \
    \         ^\n/tmp/tmptslu96ux.swift:8:9: error: cannot find 'strings' in scope\n\
    \        return strings.Map(func(num string) string {\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tvar sArr []string\n\
    \tvar i int\n\tvar sTemp string\n\t\n\tsArr = strings.Split(numbers, \" \")\n\t\
    for i = 0; i < len(sArr); i += 2 {\n\t\tsTemp = sArr[i] + \" \" + sArr[i+1]\n\t\
    \tsArr[i] = sArr[i+1]\n\t\tsArr[i+1] = sTemp\n\t}\n\treturn strings.Join(sArr,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpykd50pam.swift:8:10: error: consecutive statements on a line must\
    \ be separated by ';'\n        var sArr []string\n                ^\n        \
    \        ;\n/tmp/tmpykd50pam.swift:8:13: error: consecutive statements on a line\
    \ must be separated by ';'\n        var sArr []string\n                   ^\n\
    \                   ;\n/tmp/tmpykd50pam.swift:9:8: error: found an unexpected\
    \ second identifier in variable declaration; is there an accidental break?\n \
    \       var i int\n              ^\n/tmp/tmpykd50pam.swift:9:8: note: join the\
    \ identifiers together\n        var i int\n            ~~^~~\n            iint\n\
    /tmp/tmpykd50pam.swift:9:8: note: join the identifiers together with camel-case\n\
    \        var i int\n            ~~^~~\n            iInt\n/tmp/tmpykd50pam.swift:10:12:\
    \ error: found an unexpected second identifier in variable declaration; is there\
    \ an accidental break?\n        var sTemp string\n                  ^\n/tmp/tmpykd50pam.swift:10:12:\
    \ note: join the identifiers together\n        var sTemp string\n            ~~~~~~^~~~~~\n\
    \            sTempstring\n/tmp/tmpykd50pam.swift:10:12: note: join the identifiers\
    \ together with camel-case\n        var sTemp string\n            ~~~~~~^~~~~~\n\
    \            sTempString\n/tmp/tmpykd50pam.swift:13:2: error: C-style for statement\
    \ has been removed in Swift 3\n        for i = 0; i < len(sArr); i += 2 {\n  \
    \      ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpykd50pam.swift:8:6: error: type\
    \ annotation missing in pattern\n        var sArr []string\n            ^\n/tmp/tmpykd50pam.swift:8:11:\
    \ error: empty collection literal requires an explicit type\n        var sArr\
    \ []string\n                 ^~\n/tmp/tmpykd50pam.swift:8:11: warning: expression\
    \ of type '[Any]' is unused\n        var sArr []string\n                 ^~\n\
    /tmp/tmpykd50pam.swift:8:13: error: cannot find 'string' in scope\n        var\
    \ sArr []string\n                   ^~~~~~\n/tmp/tmpykd50pam.swift:9:6: error:\
    \ type annotation missing in pattern\n        var i int\n            ^\n/tmp/tmpykd50pam.swift:10:6:\
    \ error: type annotation missing in pattern\n        var sTemp stri"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numberlist =\
    \ numbers.split(\" \")\n    for num in numberlist {\n        if num == \"nine\"\
    \ {\n            numberlist.removeLast()\n        }\n        if num == \"zero\"\
    \ {\n            numberlist.removeLast()\n        }\n    }\n    return sort_numbers(numberlist)\
    \ + \" \"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp44n33_br.swift:8:30: error: no exact matches in call to instance\
    \ method 'split'\n    var numberlist = numbers.split(\" \")\n                \
    \             ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n/tmp/tmp44n33_br.swift:17:25: error:\
    \ missing argument label 'numbers:' in call\n    return sort_numbers(numberlist)\
    \ + \" \"\n                        ^\n                        numbers: \n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var sortedNumbers\
    \ = numbers\n    var sortedIndex: Int = 0\n    var sortedNumbersString: String\
    \ = \"\"\n    var currentIndex: Int = 0\n    var currentDigit: Int = 0\n    var\
    \ lastDigit: Int = 0\n    var lastDigitString: String = \"\"\n\n    func isDigit(number:\
    \ Int) -> Bool {\n        let digit: String = String(number)\n        return digit.characters.count\
    \ == 1 && digit.characters[0] >= '0' && digit.characters[0] <= '9'\n    }\n\n\
    \    while isDigit(sortedNumbers[currentIndex]) {\n        lastDigit = currentIndex\n\
    \        lastDigitString = String(sortedNumbers[currentIndex])\n        currentIndex\
    \ += 1\n    }\n\n    while currentIndex < sortedNumbers.characters.count {\n \
    \       if isDigit(sortedNumbers[currentIndex]) {\n            if currentDigit\
    \ <= lastDigit {\n                sortedNumbersString.append(String(sortedNumbers[currentIndex]))\n\
    \                sortedNumbersString.append(\" \")\n                sortedNumbers.append(String(sortedNumbers[currentIndex]))\n\
    \            } else {\n                sortedNumbersString.append(String(sortedNumbers[currentIndex]))\n\
    \                sortedNumbersString.append(\" \")\n                sortedNumbers.append(String(sortedNumbers[currentIndex]))\n\
    \                sortedNumbers.append(String(lastDigitString))\n             \
    \   currentIndex += 1\n                lastDigit = currentIndex\n            \
    \    lastDigitString = String(sortedNumbers[currentIndex])\n                currentIndex\
    \ += 1\n            }\n            currentDigit += 1\n        } else {\n     \
    \       currentIndex += 1\n        }\n    }\n\n    return sortedNumbersString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3eyre55x.swift:18:70: error: single-quoted string literal found,\
    \ use '\"'\n        return digit.characters.count == 1 && digit.characters[0]\
    \ >= '0' && digit.characters[0] <= '9'\n                                     \
    \                                ^~~\n                                       \
    \                              \"0\"\n/tmp/tmp3eyre55x.swift:18:100: error: single-quoted\
    \ string literal found, use '\"'\n        return digit.characters.count == 1 &&\
    \ digit.characters[0] >= '0' && digit.characters[0] <= '9'\n                 \
    \                                                                            \
    \      ^~~\n                                                                 \
    \                                  \"9\"\n/tmp/tmp3eyre55x.swift:18:22: error:\
    \ 'characters' is unavailable: Please use String directly\n        return digit.characters.count\
    \ == 1 && digit.characters[0] >= '0' && digit.characters[0] <= '9'\n         \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp3eyre55x.swift:18:47: error: 'subscript(_:)' is unavailable: cannot subscript\
    \ String with an Int, use a String.Index instead.\n        return digit.characters.count\
    \ == 1 && digit.characters[0] >= '0' && digit.characters[0] <= '9'\n         \
    \                                     ^~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3eyre55x.swift:18:53:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ digit.characters.count == 1 && digit.characters[0] >= '0' && digit.characters[0]\
    \ <= '9'\n                                                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3eyre55x.swift:18:77: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead."
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let sorted = numbers.split(separator:\
    \ \" \")\n        .map { Int($0) }\n        .sorted()\n    return \" \".join(sorted)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwu4k83gf.swift:9:16: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        .map { Int($0) }\n          \
    \     ^\n/tmp/tmpwu4k83gf.swift:9:16: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n        .map { Int($0) }\n         \
    \      ^\n                       ?? <#default value#>\n/tmp/tmpwu4k83gf.swift:9:16:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        .map { Int($0) }\n               ^\n                      !\n\
    /tmp/tmpwu4k83gf.swift:11:16: error: value of type 'String' has no member 'join'\n\
    \    return \" \".join(sorted)\n           ~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberArray\
    \ = numbers.split(separator: \" \")\n    \n    let numberStrings = numberArray.map\
    \ { $0.trimmingCharacters(in: CharacterSet.decimalDigits) }\n    \n    return\
    \ numberStrings.sorted(by: { $0.compare($1) == .orderedAscending })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmprxt7hmgu.swift:10:69: error: cannot find 'CharacterSet' in scope\n\
    \    let numberStrings = numberArray.map { $0.trimmingCharacters(in: CharacterSet.decimalDigits)\
    \ }\n                                                                    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return sort_numbers_(numbers,\
    \ 0, len(numbers)-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5l0nk_1y.swift:8:12: error: cannot find 'sort_numbers_' in scope\n\
    \    return sort_numbers_(numbers, 0, len(numbers)-1)\n           ^~~~~~~~~~~~~\n\
    /tmp/tmp5l0nk_1y.swift:8:38: error: cannot find 'len' in scope\n    return sort_numbers_(numbers,\
    \ 0, len(numbers)-1)\n                                     ^~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    var numberString = \"\"\n    for i := 0; i < len(numbers); i++ {\n\
    \        if i > 0 {\n            numberString += \" \"\n        }\n        numberString\
    \ += numbers[i]\n    }\n    numberString = strings.Replace(numberString, \"one\"\
    , \"0\", -1)\n    numberString = strings.Replace(numberString, \"two\", \"1\"\
    , -1)\n    numberString = strings.Replace(numberString, \"three\", \"2\", -1)\n\
    \    numberString = strings.Replace(numberString, \"four\", \"3\", -1)\n    numberString\
    \ = strings.Replace(numberString, \"five\", \"4\", -1)\n    numberString = strings.Replace(numberString,\
    \ \"six\", \"5\", -1)\n    numberString = strings.Replace(numberString, \"seven\"\
    , \"6\", -1)\n    numberString = strings.Replace(numberString, \"eight\", \"7\"\
    , -1)\n    numberString = strings.Replace(numberString, \"nine\", \"8\", -1)\n\
    \    numberString = strings.Replace(numberString, \"zero\", \"0\", -1)\n    numberString\
    \ = strings.Trim(numberString, \" \")\n    return numberString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpvswmdj3x.swift:10:12: error: expected type\n    for i := 0; i <\
    \ len(numbers); i++ {\n           ^\n            <#type#>\n/tmp/tmpvswmdj3x.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers);\
    \ i++ {\n           ^\n/tmp/tmpvswmdj3x.swift:10:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(numbers); i++ {\n    \
    \       ^\n/tmp/tmpvswmdj3x.swift:8:19: error: cannot find 'strings' in scope\n\
    \    var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var str_list = Array(numbers)\n\
    \    str_list = sort(str_list)\n    var result = String()\n    for s in str_list\
    \ {\n        result = result + s\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxs454p4v.swift:9:16: error: cannot find 'sort' in scope\n    str_list\
    \ = sort(str_list)\n               ^~~~\n/tmp/tmpxs454p4v.swift:12:27: error:\
    \ cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'String'\n        result = result + s\n                      \
    \    ^\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := sort.IntSlice(numbers).Slice()\n\treturn strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpismy0mjf.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpismy0mjf.swift:8:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpismy0mjf.swift:8:2: warning: expression of type 'String' is unused\n\
    \        numbers := strings.Split(numbers, \" \")\n        ^~~~~~~\n/tmp/tmpismy0mjf.swift:10:9:\
    \ error: cannot find 'strings' in scope\n        return strings.Join(numbers,\
    \ \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    if numbers.isEmpty()\
    \ {\n        return \"\"\n    }\n    numbers := strings.TrimSpace(numbers)\n \
    \   result := \"\"\n    numberSplit := strings.Split(numbers, \" \")\n    numbers.sort()\n\
    \    for _, number := range numberSplit {\n        if number != \"zero\" && number\
    \ != \"one\" && number != \"two\" && number != \"three\" &&\n            number\
    \ != \"four\" && number != \"five\" && number != \"six\" &&\n            number\
    \ != \"seven\" && number != \"eight\" && number != \"nine\" {\n            number\
    \ = \"zero\"\n        }\n        result = result + number\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpoo153yb1.swift:11:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbers := strings.TrimSpace(numbers)\n           ^\n\
    \           ;\n/tmp/tmpoo153yb1.swift:11:13: error: expected expression\n    numbers\
    \ := strings.TrimSpace(numbers)\n            ^\n/tmp/tmpoo153yb1.swift:15:10:\
    \ error: expected 'in' after for-each pattern\n    for _, number := range numberSplit\
    \ {\n         ^\n/tmp/tmpoo153yb1.swift:15:10: error: expected Sequence expression\
    \ for for-each loop\n    for _, number := range numberSplit {\n         ^\n/tmp/tmpoo153yb1.swift:8:16:\
    \ error: cannot call value of non-function type 'Bool'\n    if numbers.isEmpty()\
    \ {\n               ^      ~~\n                      \n/tmp/tmpoo153yb1.swift:11:5:\
    \ warning: expression of type 'String' is unused\n    numbers := strings.TrimSpace(numbers)\n\
    \    ^~~~~~~\n/tmp/tmpoo153yb1.swift:23:12: error: cannot find 'result' in scope\n\
    \    return result\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    if strings.Contains(numbers,\
    \ \"zero\") {\n        numbers = strings.Replace(numbers, \"zero\", \"one\", -1)\n\
    \    } else if strings.Contains(numbers, \"one\") {\n        numbers = strings.Replace(numbers,\
    \ \"one\", \"two\", -1)\n    } else if strings.Contains(numbers, \"two\") {\n\
    \        numbers = strings.Replace(numbers, \"two\", \"three\", -1)\n    } else\
    \ if strings.Contains(numbers, \"three\") {\n        numbers = strings.Replace(numbers,\
    \ \"three\", \"four\", -1)\n    } else if strings.Contains(numbers, \"four\")\
    \ {\n        numbers = strings.Replace(numbers, \"four\", \"five\", -1)\n    }\
    \ else if strings.Contains(numbers, \"five\") {\n        numbers = strings.Replace(numbers,\
    \ \"five\", \"six\", -1)\n    } else if strings.Contains(numbers, \"six\") {\n\
    \        numbers = strings.Replace(numbers, \"six\", \"seven\", -1)\n    } else\
    \ if strings.Contains(numbers, \"seven\") {\n        numbers = strings.Replace(numbers,\
    \ \"seven\", \"eight\", -1)\n    } else if strings.Contains(numbers, \"eight\"\
    ) {\n        numbers = strings.Replace(numbers, \"eight\", \"nine\", -1)\n   \
    \ } else if strings.Contains(numbers, \"nine\") {\n        numbers = strings.Replace(numbers,\
    \ \"nine\", \"zero\", -1)\n    } else {\n        // Not a number\n        return\
    \ \"\"\n    }\n    return strings.Trim(numbers, \"\\000\")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmprrr3ya08.swift:8:8: error: cannot find 'strings' in scope\n   \
    \ if strings.Contains(numbers, \"zero\") {\n       ^~~~~~~\n/tmp/tmprrr3ya08.swift:9:19:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.Replace(numbers,\
    \ \"zero\", \"one\", -1)\n                  ^~~~~~~\n/tmp/tmprrr3ya08.swift:9:9:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.Replace(numbers, \"zero\", \"one\", -1)\n        ^~~~~~~\n/tmp/tmprrr3ya08.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    } else if strings.Contains(numbers,\
    \ \"one\") {\n              ^~~~~~~\n/tmp/tmprrr3ya08.swift:11:19: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"one\"\
    , \"two\", -1)\n                  ^~~~~~~\n/tmp/tmprrr3ya08.swift:11:9: error:\
    \ cannot assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"one\", \"two\", -1)\n        ^~~~~~~\n/tmp/tmprrr3ya08.swift:12:15: error:\
    \ cannot find 'strings' in scope\n    } else if strings.Contains(numbers, \"two\"\
    ) {\n              ^~~~~~~\n/tmp/tmprrr3ya08.swift:13:19: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.Replace(numbers, \"two\", \"three\", -1)\n\
    \                  ^~~~~~~\n/tmp/tmprrr3ya08.swift:13:9: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"two\", \"three\", -1)\n        ^~~~~~~\n/tmp/tmprrr3ya08.swift:14:15: error:\
    \ cannot find 'strings' in scope\n    } else if strings.Contains(numbers, \"three\"\
    ) {\n              ^~~~~~~\n/tmp/tmprrr3ya08.swift:15:19: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.Replace(numbers, \"three\", \"four\", -1)\n\
    \                  ^~~~~~~\n/tmp/tmprrr3ya08.swift:15:9: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"three\", \"four\", -1)\n        ^~~~~~~\n/tmp/tmprrr3ya08.swift:16:15: error:\
    \ cannot find 'strings' in scope\n    } else if strings.Contains(numbers, \"four\"\
    ) {\n              ^~~~~~~\n/tmp/tmprrr3ya08.swift:17:19: error: cannot find 'strings'\
    \ in scope"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return numbers.split(\"\
    \ \")\n        .sorted()\n        .joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpstpcront.swift:8:26: error: missing argument label 'separator:'\
    \ in call\n    return numbers.split(\" \")\n                         ^\n     \
    \                    separator: \n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var list = numbers.Split(\"\
    , \")\n    var sortedList = make([]string, len(list))\n    for i := 0; i < len(list);\
    \ i++ {\n        sortedList[i] = list[i]\n    }\n    sort.Sort(sort.Reverse(sort.StringSlice(sortedList)))\n\
    \    for i := 0; i < len(sortedList); i++ {\n        list[i] = sortedList[i]\n\
    \    }\n    return strings.Join(list, \", \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpvcqmw5ik.swift:9:29: error: expected ',' separator\n    var sortedList\
    \ = make([]string, len(list))\n                            ^\n               \
    \             ,\n/tmp/tmpvcqmw5ik.swift:10:12: error: expected type\n    for i\
    \ := 0; i < len(list); i++ {\n           ^\n            <#type#>\n/tmp/tmpvcqmw5ik.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(list);\
    \ i++ {\n           ^\n/tmp/tmpvcqmw5ik.swift:10:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(list); i++ {\n       \
    \    ^\n/tmp/tmpvcqmw5ik.swift:14:12: error: expected type\n    for i := 0; i\
    \ < len(sortedList); i++ {\n           ^\n            <#type#>\n/tmp/tmpvcqmw5ik.swift:14:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(sortedList);\
    \ i++ {\n           ^\n/tmp/tmpvcqmw5ik.swift:14:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(sortedList); i++ {\n \
    \          ^\n/tmp/tmpvcqmw5ik.swift:8:24: error: value of type 'String' has no\
    \ member 'Split'\n    var list = numbers.Split(\", \")\n               ~~~~~~~\
    \ ^~~~~\n/tmp/tmpvcqmw5ik.swift:9:22: error: cannot find 'make' in scope\n   \
    \ var sortedList = make([]string, len(list))\n                     ^~~~\n/tmp/tmpvcqmw5ik.swift:9:29:\
    \ error: cannot find 'string' in scope\n    var sortedList = make([]string, len(list))\n\
    \                            ^~~~~~\n/tmp/tmpvcqmw5ik.swift:9:37: error: cannot\
    \ find 'len' in scope\n    var sortedList = make([]string, len(list))\n      \
    \                              ^~~\n/tmp/tmpvcqmw5ik.swift:17:12: error: cannot\
    \ find 'strings' in scope\n    return strings.Join(list, \", \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \n    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n\n    // get array of digits, convert to array of int\n  \
    \  numbers := strings.Fields(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n\n    var out []int\n\n    for\
    \ _, n := range numbers {\n        n = strings.ToLower(n)\n\n        switch n\
    \ {\n        case \"zero\":\n            out = append(out, 0)\n        case \"\
    one\":\n            out = append(out, 1)\n        case \"two\":\n            out\
    \ = append(out, 2)\n        case \"three\":\n            out = append(out, 3)\n\
    \        case \"four\":\n            out = append(out, 4)\n        case \"five\"\
    :\n            out = append(out, 5)\n        case \"six\":\n            out =\
    \ append(out, 6)\n        case \"seven\":\n            out = append(out, 7)\n\
    \        case \"eight\":\n            out = append(out, 8)\n        case \"nine\"\
    :\n            out = append(out, 9)\n        default:\n            out = append(out,\
    \ 10)\n        }\n    }\n\n    sort.Ints(out)\n\n    // put numbers in correct\
    \ order\n    numbers := strings.Join(out[0 : len(out)-1], \" \")\n    numbers\
    \ = strings.Replace(numbers, \"'\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    return numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpmt8bqwvg.swift:14:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbers := strings.Fields(numbers)\n           ^\n\
    \           ;\n/tmp/tmpmt8bqwvg.swift:14:13: error: expected expression\n    numbers\
    \ := strings.Fields(numbers)\n            ^\n/tmp/tmpmt8bqwvg.swift:18:12: error:\
    \ consecutive statements on a line must be separated by ';'\n    var out []int\n\
    \           ^\n           ;\n/tmp/tmpmt8bqwvg.swift:18:15: error: consecutive\
    \ statements on a line must be separated by ';'\n    var out []int\n         \
    \     ^\n              ;\n/tmp/tmpmt8bqwvg.swift:20:10: error: expected 'in' after\
    \ for-each pattern\n    for _, n := range numbers {\n         ^\n/tmp/tmpmt8bqwvg.swift:20:10:\
    \ error: expected Sequence expression for for-each loop\n    for _, n := range\
    \ numbers {\n         ^\n/tmp/tmpmt8bqwvg.swift:8:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n\
    /tmp/tmpmt8bqwvg.swift:8:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpmt8bqwvg.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Replace(numbers,\
    \ \"'\", \"\", -1)\n              ^~~~~~~\n/tmp/tmpmt8bqwvg.swift:10:5: error:\
    \ cannot assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \"'\", \"\", -1)\n    ^~~~~~~\n/tmp/tmpmt8bqwvg.swift:11:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \              ^~~~~~~\n/tmp/tmpmt8bqwvg.swift:11:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"-\"\
    , \"\", -1)\n    ^~~~~~~\n/tmp/tmpmt8bqwvg.swift:14:5: warning: expression of\
    \ type 'String' is unused\n    numbers := strings.Fields(numbers)\n    ^~~~~~~\n\
    /tmp/tmpmt8bqwvg.swift:18:9: error: type annotation missing in pattern\n    var\
    \ out []int\n        ^\n/tmp/tmpmt8bqwvg.swift:18:13: error: empty collection\
    \ literal requires an explicit type\n    var out []int\n            ^~\n/tmp/tmpmt8bqwvg.swift:18:13:\
    \ warning: "
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    if numbers == \"\
    \" {\n        return numbers\n    }\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.SliceStable(numbers, func(i, j int) bool {\n        if numbers[i].Unicode.ToInt()\
    \ < numbers[j].Unicode.ToInt() {\n            return true\n        }\n       \
    \ if numbers[i].Unicode.ToInt() > numbers[j].Unicode.ToInt() {\n            return\
    \ false\n        }\n        return true\n    })\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0vu753sr.swift:12:31: error: expected expression in list of expressions\n\
    \    sort.SliceStable(numbers, func(i, j int) bool {\n                       \
    \       ^\n/tmp/tmp0vu753sr.swift:12:35: error: expected identifier in function\
    \ declaration\n    sort.SliceStable(numbers, func(i, j int) bool {\n         \
    \                         ^\n/tmp/tmp0vu753sr.swift:11:19: error: cannot find\
    \ 'strings' in scope\n    var numbers = strings.Split(numbers, \" \")\n      \
    \            ^~~~~~~\n/tmp/tmp0vu753sr.swift:12:5: error: cannot find 'sort' in\
    \ scope\n    sort.SliceStable(numbers, func(i, j int) bool {\n    ^~~~\n/tmp/tmp0vu753sr.swift:21:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return sortNumbers(\n\
    \        numbers,\n        numbers[strings.LastIndex(numbers, \" \")+1:],\n  \
    \      numbers[0 : strings.LastIndex(numbers, \" \")],\n    )\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4yszys06.swift:10:50: error: expected ',' separator\n        numbers[strings.LastIndex(numbers,\
    \ \" \")+1:],\n                                                 ^\n          \
    \                                       ,\n/tmp/tmp4yszys06.swift:10:50: error:\
    \ expected expression in list of expressions\n        numbers[strings.LastIndex(numbers,\
    \ \" \")+1:],\n                                                 ^\n/tmp/tmp4yszys06.swift:11:19:\
    \ error: expected ',' separator\n        numbers[0 : strings.LastIndex(numbers,\
    \ \" \")],\n                  ^\n                 ,\n/tmp/tmp4yszys06.swift:11:19:\
    \ error: expected expression in list of expressions\n        numbers[0 : strings.LastIndex(numbers,\
    \ \" \")],\n                  ^\n/tmp/tmp4yszys06.swift:12:5: error: unexpected\
    \ ',' separator\n    )\n    ^\n/tmp/tmp4yszys06.swift:8:12: error: cannot find\
    \ 'sortNumbers' in scope\n    return sortNumbers(\n           ^~~~~~~~~~~\n/tmp/tmp4yszys06.swift:10:17:\
    \ error: cannot find 'strings' in scope\n        numbers[strings.LastIndex(numbers,\
    \ \" \")+1:],\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\treturn strings.Join(\n\
    \t\tstrings.Fields(numbers),\n\t\t\", \",\n\t)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpoan4g8gt.swift:11:2: error: unexpected ',' separator\n        )\n\
    \        ^\n/tmp/tmpoan4g8gt.swift:8:9: error: cannot find 'strings' in scope\n\
    \        return strings.Join(\n               ^~~~~~~\n/tmp/tmpoan4g8gt.swift:9:3:\
    \ error: cannot find 'strings' in scope\n                strings.Fields(numbers),\n\
    \                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tsorted_numbers :=\
    \ strings.Split(strings.TrimSpace(numbers), \"  \")\n\tfor i, number := range\
    \ sorted_numbers {\n\t\tsorted_numbers[i] = number\n\t\tsorted_numbers[i] = sort_number(number)\n\
    \t}\n\treturn strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1rwjfhew.swift:8:16: error: consecutive statements on a line must\
    \ be separated by ';'\n        sorted_numbers := strings.Split(strings.TrimSpace(numbers),\
    \ \"  \")\n                      ^\n                      ;\n/tmp/tmp1rwjfhew.swift:8:17:\
    \ error: expected expression\n        sorted_numbers := strings.Split(strings.TrimSpace(numbers),\
    \ \"  \")\n                       ^\n/tmp/tmp1rwjfhew.swift:9:7: error: expected\
    \ 'in' after for-each pattern\n        for i, number := range sorted_numbers {\n\
    \             ^\n/tmp/tmp1rwjfhew.swift:9:7: error: expected Sequence expression\
    \ for for-each loop\n        for i, number := range sorted_numbers {\n       \
    \      ^\n/tmp/tmp1rwjfhew.swift:8:2: error: cannot find 'sorted_numbers' in scope\n\
    \        sorted_numbers := strings.Split(strings.TrimSpace(numbers), \"  \")\n\
    \        ^~~~~~~~~~~~~~\n/tmp/tmp1rwjfhew.swift:13:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(sorted_numbers, \" \")\n             \
    \  ^~~~~~~\n/tmp/tmp1rwjfhew.swift:13:22: error: cannot find 'sorted_numbers'\
    \ in scope\n        return strings.Join(sorted_numbers, \" \")\n             \
    \               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // Return original\
    \ numbers if the string is null\n    if numbers == \"\" {\n        return numbers\n\
    \    }\n\n    // Split string on space\n    var numberArray = numbers.split(\"\
    \ \").sorted(by: <)\n\n    // Add each string to the array\n    var result = [String]()\n\
    \    for i in 0..<numberArray.count {\n        result.append(numberArray[i])\n\
    \    }\n\n    // Return the result\n    return result.joined(\" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpuyhko1lk.swift:14:37: error: missing argument label 'separator:'\
    \ in call\n    var numberArray = numbers.split(\" \").sorted(by: <)\n        \
    \                            ^\n                                    separator:\
    \ \n/tmp/tmpuyhko1lk.swift:23:26: error: missing argument label 'separator:' in\
    \ call\n    return result.joined(\" \")\n                         ^\n        \
    \                 separator: \n/tmp/tmpuyhko1lk.swift:23:19: error: cannot convert\
    \ return expression of type 'JoinedSequence<[String]>' to return type 'String'\n\
    \    return result.joined(\" \")\n           ~~~~~~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\treturn sort_numbers_internal(numbers,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") ==\
    \ \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwtia0jd4.swift:8:9: error: cannot find 'sort_numbers_internal'\
    \ in scope\n        return sort_numbers_internal(numbers, 0)\n               ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return sort_numbers(numbers,\
    \ \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpsb2bl_1r.swift:8:34: error: extra argument in call\n    return\
    \ sort_numbers(numbers, \"\")\n                       ~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimPrefix(numbers, \"zero \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \"nine \")\n    numbers :=\
    \ strings.TrimSuffix(numbers, \" \")\n    numbers := strings.Trim(numbers, \"\
    0\")\n    numbers := strings.Trim(numbers, \"9\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    return strings.Fields(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpqbaykjlt.swift:8:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbers := strings.TrimSpace(numbers)\n           ^\n\
    \           ;\n/tmp/tmpqbaykjlt.swift:8:13: error: expected expression\n    numbers\
    \ := strings.TrimSpace(numbers)\n            ^\n/tmp/tmpqbaykjlt.swift:8:5: warning:\
    \ expression of type 'String' is unused\n    numbers := strings.TrimSpace(numbers)\n\
    \    ^~~~~~~\n/tmp/tmpqbaykjlt.swift:16:12: error: cannot find 'strings' in scope\n\
    \    return strings.Fields(numbers)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimFunc(numbers,\
    \ func(r rune) bool {\n        switch r {\n        case 'n':\n        case 'z':\n\
    \        case '9':\n            return false\n        default:\n            return\
    \ true\n        }\n    })\n\n    numbers = strings.ToLower(numbers)\n    numbers\
    \ := strings.TrimFunc(numbers, func(r rune) bool {\n        switch r {\n     \
    \   case ' ':\n            return true\n        case '-':\n            return\
    \ true\n        default:\n            return false\n        }\n    })\n\n    numbers\
    \ := strings.Split(numbers, \" \")\n    numbers := strings.TrimFunc(numbers, func(r\
    \ rune) bool {\n        switch r {\n        case '.':\n            return false\n\
    \        case ',':\n            return true\n        default:\n            return\
    \ true\n        }\n    })\n\n    var result []string\n    var temp int\n    for\
    \ _, n := range numbers {\n        if n == 'zero' {\n            temp = temp *\
    \ 10 + 0\n        } else if n == 'nine' {\n            temp = temp * 10 + 1\n\
    \        } else {\n            temp = temp * 10 + int(n)\n        }\n        if\
    \ temp > 9 {\n            result = append(result, strconv.Itoa(temp%10))\n   \
    \         temp = temp / 10\n        }\n    }\n    if temp != 0 {\n        result\
    \ = append(result, strconv.Itoa(temp))\n    }\n\n    result := strings.Join(result,\
    \ \" \")\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwcq67u_h.swift:8:41: error: expected expression in list of expressions\n\
    \    numbers = strings.TrimFunc(numbers, func(r rune) bool {\n               \
    \                         ^\n/tmp/tmpwcq67u_h.swift:8:45: error: expected identifier\
    \ in function declaration\n    numbers = strings.TrimFunc(numbers, func(r rune)\
    \ bool {\n                                            ^\n/tmp/tmpwcq67u_h.swift:10:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpwcq67u_h.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'z':\n             ^~~\n      \
    \       \"z\"\n/tmp/tmpwcq67u_h.swift:12:14: error: single-quoted string literal\
    \ found, use '\"'\n        case '9':\n             ^~~\n             \"9\"\n/tmp/tmpwcq67u_h.swift:22:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ' ':\n   \
    \          ^~~\n             \" \"\n/tmp/tmpwcq67u_h.swift:24:14: error: single-quoted\
    \ string literal found, use '\"'\n        case '-':\n             ^~~\n      \
    \       \"-\"\n/tmp/tmpwcq67u_h.swift:34:14: error: single-quoted string literal\
    \ found, use '\"'\n        case '.':\n             ^~~\n             \".\"\n/tmp/tmpwcq67u_h.swift:36:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ',':\n   \
    \          ^~~\n             \",\"\n/tmp/tmpwcq67u_h.swift:43:15: error: consecutive\
    \ statements on a line must be separated by ';'\n    var result []string\n   \
    \           ^\n              ;\n/tmp/tmpwcq67u_h.swift:43:18: error: consecutive\
    \ statements on a line must be separated by ';'\n    var result []string\n   \
    \              ^\n                 ;\n/tmp/tmpwcq67u_h.swift:44:14: error: found\
    \ an unexpected second identifier in variable declaration; is there an accidental\
    \ break?\n    var temp int\n             ^\n/tmp/tmpwcq67u_h.swift:44:14: note:\
    \ join the identifiers together\n    var temp int\n        ~~~~~^~~\n        tempint\n\
    /tmp/tmpwcq67u_h.swift:44:14: note: join the identifiers together with camel-case\n\
    \    var temp int\n        ~~~~~^~~\n        tempInt\n/tmp/tmpwcq67u_h.swift:45:10:\
    \ er"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // The function\
    \ should work for both String and []string\n    var resultingNumbers = numbers\n\
    \    \n    // Split the string into separate numbers\n    var numbersArray = resultingNumbers.split(\"\
    \ \")\n    \n    // Sort the array of numbers\n    numbersArray.sort() // Sort\
    \ the array in-place\n    resultingNumbers = String(numbersArray) // Convert the\
    \ array of numbers into a string\n\n    return resultingNumbers\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpkr_uanv8.swift:12:41: error: no exact matches in call to instance\
    \ method 'split'\n    var numbersArray = resultingNumbers.split(\" \")\n     \
    \                                   ^\nSwift.Sequence:2:40: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public\
    \ __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var sortedNumbers\
    \ = \"\"\n    sortedNumbers = strings.Split(numbers, \" \")\n\n    var numberCounter\
    \ = 0\n    for number in sortedNumbers {\n        var sortedNumbersCount = 0\n\
    \        var sortedNumbersString = \"\"\n        sortedNumbersString = strings.Split(number,\
    \ \"-\")\n        for sortedNumbersCount in 0..<sortedNumbersString.count {\n\
    \            let firstPart = sortedNumbersString[sortedNumbersCount]\n       \
    \     var secondPart = \"\"\n            var thirdPart = \"\"\n            if\
    \ sortedNumbersCount < sortedNumbersString.count - 1 {\n                secondPart\
    \ = sortedNumbersString[sortedNumbersCount + 1]\n                if sortedNumbersCount\
    \ < sortedNumbersString.count - 2 {\n                    thirdPart = sortedNumbersString[sortedNumbersCount\
    \ + 2]\n                }\n            } else {\n                secondPart =\
    \ sortedNumbersString[sortedNumbersCount + 1]\n            }\n            sortedNumbersString\
    \ = firstPart + secondPart + thirdPart\n        }\n        sortedNumbers = sortedNumbers.replacingOccurrences(of:\
    \ number, with: sortedNumbersString)\n    }\n    return sortedNumbers\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1lzwlhme.swift:9:21: error: cannot find 'strings' in scope\n  \
    \  sortedNumbers = strings.Split(numbers, \" \")\n                    ^~~~~~~\n\
    /tmp/tmp1lzwlhme.swift:15:31: error: cannot find 'strings' in scope\n        sortedNumbersString\
    \ = strings.Split(number, \"-\")\n                              ^~~~~~~\n/tmp/tmp1lzwlhme.swift:17:29:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            let firstPart = sortedNumbersString[sortedNumbersCount]\n\
    \                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp1lzwlhme.swift:21:49:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \      secondPart = sortedNumbersString[sortedNumbersCount + 1]\n            \
    \                 ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1lzwlhme.swift:23:52:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \          thirdPart = sortedNumbersString[sortedNumbersCount + 2]\n         \
    \                       ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1lzwlhme.swift:26:49:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \      secondPart = sortedNumbersString[sortedNumbersCount + 1]\n            \
    \                 ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1lzwlhme.swift:28:35:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            sortedNumbersString = firstPart + secondPart + thirdPart\n      \
    \                            ^\n/tmp/tmp1lzwlhme.swift:30:39: error: value of\
    \ type 'String' has no member 'replacingOccurrences'\n        sortedNumbers =\
    \ sortedNumbers.replacingOccurrences(of: number, with: sortedNumbersString)\n\
    \                        ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.ToLower(numbers)\n\
    \tvar numberStrings = strings.Split(numbers, \" \")\n\tvar numberStringsSorted\
    \ = []string{}\n\tfor _, number := range numberStrings {\n\t\tnumberStringsSorted\
    \ = append(numberStringsSorted, strings.TrimSpace(number))\n\t}\n\tsort.Strings(numberStringsSorted)\n\
    \treturn strings.Join(numberStringsSorted, \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpll0j9f4v.swift:10:30: error: consecutive statements on a line must\
    \ be separated by ';'\n        var numberStringsSorted = []string{}\n        \
    \                            ^\n                                    ;\n/tmp/tmpll0j9f4v.swift:11:7:\
    \ error: expected 'in' after for-each pattern\n        for _, number := range\
    \ numberStrings {\n             ^\n/tmp/tmpll0j9f4v.swift:11:7: error: expected\
    \ Sequence expression for for-each loop\n        for _, number := range numberStrings\
    \ {\n             ^\n/tmp/tmpll0j9f4v.swift:8:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.ToLower(numbers)\n                  ^~~~~~~\n\
    /tmp/tmpll0j9f4v.swift:8:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.ToLower(numbers)\n        ^~~~~~~\n/tmp/tmpll0j9f4v.swift:9:22:\
    \ error: cannot find 'strings' in scope\n        var numberStrings = strings.Split(numbers,\
    \ \" \")\n                            ^~~~~~~\n/tmp/tmpll0j9f4v.swift:10:28: error:\
    \ empty collection literal requires an explicit type\n        var numberStringsSorted\
    \ = []string{}\n                                  ^~\n/tmp/tmpll0j9f4v.swift:10:30:\
    \ error: cannot find 'string' in scope\n        var numberStringsSorted = []string{}\n\
    \                                    ^~~~~~\n/tmp/tmpll0j9f4v.swift:15:9: error:\
    \ cannot find 'strings' in scope\n        return strings.Join(numberStringsSorted,\
    \ \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimPrefix(numbers,\
    \ \"-\")\n    numbers = strings.TrimPrefix(numbers, \"+\")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ms\")\n    numbers = strings.TrimPrefix(numbers, \"-\")\n    numbers = strings.TrimPrefix(numbers,\
    \ \"+\")\n\n    if numbers == \"zero\" {\n        return \"zero\"\n    }\n\n \
    \   if numbers == \"one\" {\n        return \"one\"\n    }\n\n    if numbers ==\
    \ \"two\" {\n        return \"two\"\n    }\n\n    if numbers == \"three\" {\n\
    \        return \"three\"\n    }\n\n    if numbers == \"four\" {\n        return\
    \ \"four\"\n    }\n\n    if numbers == \"five\" {\n        return \"five\"\n \
    \   }\n\n    if numbers == \"six\" {\n        return \"six\"\n    }\n\n    if\
    \ numbers == \"seven\" {\n        return \"seven\"\n    }\n\n    if numbers ==\
    \ \"eight\" {\n        return \"eight\"\n    }\n\n    if numbers == \"nine\" {\n\
    \        return \"nine\"\n    }\n\n    return numbers\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp89xq717h.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp89xq717h.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp89xq717h.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    s\")\n              ^~~~~~~\n/tmp/tmp89xq717h.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    ^~~~~~~\n/tmp/tmp89xq717h.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimPrefix(numbers, \"-\")\n              ^~~~~~~\n\
    /tmp/tmp89xq717h.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimPrefix(numbers, \"-\")\n    ^~~~~~~\n/tmp/tmp89xq717h.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \"+\")\n              ^~~~~~~\n/tmp/tmp89xq717h.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \"+\")\n    ^~~~~~~\n/tmp/tmp89xq717h.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n\
    /tmp/tmp89xq717h.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp89xq717h.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n              ^~~~~~~\n/tmp/tmp89xq717h.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    ^~~~~~~\n/tmp/tmp89xq717h.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"ms\")\n              ^~~~~~~\n\
    /tmp/tmp89xq717h.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"ms\")\n    ^~~~~~~\n/tmp/tmp89xq717h.swift:15:15:\
    \ error: cannot find 'strings' in scope\n    "
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return strings.Map(func\
    \ (i int) string {\n        return numbers[i]\n    }).Sort(strings.Reverse).String()\
    \ + \" \" + strings.Map(func (i int) string {\n        return numbers[len(numbers)-(i\
    \ + 1)]\n    }).String()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbai15w_e.swift:8:24: error: expected expression in list of expressions\n\
    \    return strings.Map(func (i int) string {\n                       ^\n/tmp/tmpbai15w_e.swift:8:29:\
    \ error: expected identifier in function declaration\n    return strings.Map(func\
    \ (i int) string {\n                            ^\n/tmp/tmpbai15w_e.swift:8:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Map(func (i int) string\
    \ {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers = append(numbers, numbers[0])\n\tsort.Sort(sort.Reverse(sort.StringSlice(numbers)))\n\
    \treturn strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp4rlxwwht.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmp4rlxwwht.swift:8:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmp4rlxwwht.swift:8:2: warning: expression of type 'String' is unused\n\
    \        numbers := strings.Split(numbers, \" \")\n        ^~~~~~~\n/tmp/tmp4rlxwwht.swift:11:9:\
    \ error: cannot find 'strings' in scope\n        return strings.Join(numbers,\
    \ \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberWords\
    \ = numbers.trimmingCharacters(in: .whitespacesAndNewlines)\n    let numberWordArray\
    \ = numberWords.components(separatedBy: \" \")\n    let sortedWordArray = numberWordArray.sorted()\n\
    \    let sortedWordString = sortedWordArray.joined(separator: \" \")\n    return\
    \ sortedWordString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpze798ur1.swift:8:31: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    let numberWords = numbers.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \                      ~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpze798ur1.swift:8:55:\
    \ error: cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \    let numberWords = numbers.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \                                                     ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tsortedNumbers := make(String,\
    \ 0, strings.Count(numbers))\n\n\tfor _, number := range strings.Split(numbers,\
    \ \" \") {\n\t\tif number == \"zero\" {\n\t\t\tsortedNumbers = append(sortedNumbers,\
    \ \"zero\")\n\t\t}\n\t\tif number == \"one\" {\n\t\t\tsortedNumbers = append(sortedNumbers,\
    \ \"one\")\n\t\t}\n\t\tif number == \"two\" {\n\t\t\tsortedNumbers = append(sortedNumbers,\
    \ \"two\")\n\t\t}\n\t\tif number == \"three\" {\n\t\t\tsortedNumbers = append(sortedNumbers,\
    \ \"three\")\n\t\t}\n\t\tif number == \"four\" {\n\t\t\tsortedNumbers = append(sortedNumbers,\
    \ \"four\")\n\t\t}\n\t\tif number == \"five\" {\n\t\t\tsortedNumbers = append(sortedNumbers,\
    \ \"five\")\n\t\t}\n\t\tif number == \"six\" {\n\t\t\tsortedNumbers = append(sortedNumbers,\
    \ \"six\")\n\t\t}\n\t\tif number == \"seven\" {\n\t\t\tsortedNumbers = append(sortedNumbers,\
    \ \"seven\")\n\t\t}\n\t\tif number == \"eight\" {\n\t\t\tsortedNumbers = append(sortedNumbers,\
    \ \"eight\")\n\t\t}\n\t\tif number == \"nine\" {\n\t\t\tsortedNumbers = append(sortedNumbers,\
    \ \"nine\")\n\t\t}\n\t}\n\n\treturn strings.Join(sortedNumbers, \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpg51tcqb3.swift:8:15: error: consecutive statements on a line must\
    \ be separated by ';'\n        sortedNumbers := make(String, 0, strings.Count(numbers))\n\
    \                     ^\n                     ;\n/tmp/tmpg51tcqb3.swift:8:16:\
    \ error: expected expression\n        sortedNumbers := make(String, 0, strings.Count(numbers))\n\
    \                      ^\n/tmp/tmpg51tcqb3.swift:10:7: error: expected 'in' after\
    \ for-each pattern\n        for _, number := range strings.Split(numbers, \" \"\
    ) {\n             ^\n/tmp/tmpg51tcqb3.swift:10:7: error: expected Sequence expression\
    \ for for-each loop\n        for _, number := range strings.Split(numbers, \"\
    \ \") {\n             ^\n/tmp/tmpg51tcqb3.swift:8:2: error: cannot find 'sortedNumbers'\
    \ in scope\n        sortedNumbers := make(String, 0, strings.Count(numbers))\n\
    \        ^~~~~~~~~~~~~\n/tmp/tmpg51tcqb3.swift:43:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(sortedNumbers, \" \")\n              \
    \ ^~~~~~~\n/tmp/tmpg51tcqb3.swift:43:22: error: cannot find 'sortedNumbers' in\
    \ scope\n        return strings.Join(sortedNumbers, \" \")\n                 \
    \           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tlet list = strings.Split(numbers,\
    \ \" \")\n\tlist.sort {\n\t\tlet x = $0 as String\n\t\tlet y = $1 as String\n\t\
    \treturn x.compare(y)\n\t}\n\treturn strings.Join(list, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpg1vkrka9.swift:8:13: error: cannot find 'strings' in scope\n  \
    \      let list = strings.Split(numbers, \" \")\n                   ^~~~~~~\n\
    /tmp/tmpg1vkrka9.swift:10:14: error: cannot convert value of type '_' to type\
    \ 'String' in coercion\n                let x = $0 as String\n               \
    \         ~~~^~~~~~~~~\n/tmp/tmpg1vkrka9.swift:14:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(list, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tsort.Sort(func(i,\
    \ j int) bool {\n\t\treturn numbers[i].String() < numbers[j].String()\n\t})\n\t\
    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpof2kbr70.swift:8:12: error: expected expression in list of expressions\n\
    \        sort.Sort(func(i, j int) bool {\n                  ^\n/tmp/tmpof2kbr70.swift:8:16:\
    \ error: expected identifier in function declaration\n        sort.Sort(func(i,\
    \ j int) bool {\n                      ^\n/tmp/tmpof2kbr70.swift:8:2: error: cannot\
    \ find 'sort' in scope\n        sort.Sort(func(i, j int) bool {\n        ^~~~\n\
    /tmp/tmpof2kbr70.swift:11:9: error: cannot find 'strings' in scope\n        return\
    \ strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers.replaceOccurrences(of:\
    \ \" \", with: \"\", options: .regularExpression, range: nil)\n    let array =\
    \ [0, 1, 2 ,3 ,4 ,5 ,6 ,7 ,8 ,9]\n    var sorted = numbers.components(separatedBy:\
    \ \" \")\n    sorted = sorted.sorted()\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpf0emn6b0.swift:8:13: error: value of type 'String' has no member\
    \ 'replaceOccurrences'\n    numbers.replaceOccurrences(of: \" \", with: \"\",\
    \ options: .regularExpression, range: nil)\n    ~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpf0emn6b0.swift:8:61:\
    \ error: cannot infer contextual base in reference to member 'regularExpression'\n\
    \    numbers.replaceOccurrences(of: \" \", with: \"\", options: .regularExpression,\
    \ range: nil)\n                                                           ~^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpf0emn6b0.swift:8:87: error: 'nil' requires a contextual type\n    numbers.replaceOccurrences(of:\
    \ \" \", with: \"\", options: .regularExpression, range: nil)\n              \
    \                                                                        ^\n/tmp/tmpf0emn6b0.swift:10:26:\
    \ error: value of type 'String' has no member 'components'\n    var sorted = numbers.components(separatedBy:\
    \ \" \")\n                 ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    var sorted = strings.TrimSpace(\"\")\n    numbers = strings.ToLower(numbers)\n\
    \    for _, value := range strings.Split(numbers, \" \") {\n        sorted = append(sorted,\
    \ value)\n    }\n    sort.Strings(sorted)\n    return strings.Join(sorted, \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps1go7k9c.swift:11:10: error: expected 'in' after for-each pattern\n\
    \    for _, value := range strings.Split(numbers, \" \") {\n         ^\n/tmp/tmps1go7k9c.swift:11:10:\
    \ error: expected Sequence expression for for-each loop\n    for _, value := range\
    \ strings.Split(numbers, \" \") {\n         ^\n/tmp/tmps1go7k9c.swift:8:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n \
    \             ^~~~~~~\n/tmp/tmps1go7k9c.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmps1go7k9c.swift:9:18: error: cannot find 'strings' in scope\n\
    \    var sorted = strings.TrimSpace(\"\")\n                 ^~~~~~~\n/tmp/tmps1go7k9c.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.ToLower(numbers)\n\
    \              ^~~~~~~\n/tmp/tmps1go7k9c.swift:10:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.ToLower(numbers)\n    ^~~~~~~\n\
    /tmp/tmps1go7k9c.swift:15:12: error: cannot find 'strings' in scope\n    return\
    \ strings.Join(sorted, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers = make([]int, len(numbers))\n\n\tfor i := 0; i < len(numbers);\
    \ i++ {\n\t\tnumbers[i] = 0\n\t\tnum, err := strconv.Atoi(numbers[i])\n\t\tif\
    \ err != nil {\n\t\t\treturn \"\"\n\t\t}\n\t\tnumbers[i] = num\n\t}\n\n\tsort.Ints(numbers)\n\
    \tresult := strings.Join(numbers, \" \")\n\treturn result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpb11zf6w2.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpb11zf6w2.swift:8:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpb11zf6w2.swift:11:9: error: expected type\n        for i := 0;\
    \ i < len(numbers); i++ {\n               ^\n                <#type#>\n/tmp/tmpb11zf6w2.swift:11:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < len(numbers);\
    \ i++ {\n               ^\n/tmp/tmpb11zf6w2.swift:11:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < len(numbers); i++ {\n\
    \               ^\n/tmp/tmpb11zf6w2.swift:13:6: error: consecutive statements\
    \ on a line must be separated by ';'\n                num, err := strconv.Atoi(numbers[i])\n\
    \                   ^\n                   ;\n/tmp/tmpb11zf6w2.swift:13:6: error:\
    \ expected expression\n                num, err := strconv.Atoi(numbers[i])\n\
    \                   ^\n/tmp/tmpb11zf6w2.swift:8:2: warning: expression of type\
    \ 'String' is unused\n        numbers := strings.Split(numbers, \" \")\n     \
    \   ^~~~~~~\n/tmp/tmpb11zf6w2.swift:22:9: error: cannot find 'result' in scope\n\
    \        return result\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\treturn strings.Join(sortedNumbers(numbers),\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxbax34lk.swift:8:9: error: cannot find 'strings' in scope\n   \
    \     return strings.Join(sortedNumbers(numbers), \" \")\n               ^~~~~~~\n\
    /tmp/tmpxbax34lk.swift:8:22: error: cannot find 'sortedNumbers' in scope\n   \
    \     return strings.Join(sortedNumbers(numbers), \" \")\n                   \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var strings = strings.Split(\"\
    \ \", -1)\n\n    strings := strings.OrderByFunc(\n        func(s string) bool\
    \ {\n            if s == \"zero\" {\n                return false\n          \
    \  }\n            if s == \"nine\" {\n                return false\n         \
    \   }\n            if s == \"one\" {\n                return true\n          \
    \  }\n            if s == \"two\" {\n                return false\n          \
    \  }\n            if s == \"three\" {\n                return true\n         \
    \   }\n            if s == \"four\" {\n                return false\n        \
    \    }\n            if s == \"five\" {\n                return true\n        \
    \    }\n            if s == \"six\" {\n                return false\n        \
    \    }\n            if s == \"seven\" {\n                return true\n       \
    \     }\n            if s == \"eight\" {\n                return false\n     \
    \       }\n            if s == \"nine\" {\n                return true\n     \
    \       }\n            return false\n        },\n    )\n\n    return strings.Join(strings,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpeu58f3kt.swift:10:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    strings := strings.OrderByFunc(\n           ^\n   \
    \        ;\n/tmp/tmpeu58f3kt.swift:10:13: error: expected expression\n    strings\
    \ := strings.OrderByFunc(\n            ^\n/tmp/tmpeu58f3kt.swift:8:19: error:\
    \ use of local variable 'strings' before its declaration\n    var strings = strings.Split(\"\
    \ \", -1)\n                  ^\n/tmp/tmpeu58f3kt.swift:8:9: note: 'strings' declared\
    \ here\n    var strings = strings.Split(\" \", -1)\n        ^\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.ToLower(numbers)\n    var sorted_numbers []string\n\
    \n    for _, number := range strings.Split(numbers, \" \") {\n        number,\
    \ err := strconv.Atoi(number)\n        if err != nil {\n            log.Printf(\"\
    sort_numbers() failed: %v\", err)\n        }\n        if number < 0 {\n      \
    \      number = 0\n        }\n        if number > 9 {\n            number = 9\n\
    \        }\n        sorted_numbers = append(sorted_numbers, strconv.Itoa(number))\n\
    \    }\n\n    return strings.Join(sorted_numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5bsaimeu.swift:8:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbers := strings.Trim(numbers, \" \")\n         \
    \  ^\n           ;\n/tmp/tmp5bsaimeu.swift:8:13: error: expected expression\n\
    \    numbers := strings.Trim(numbers, \" \")\n            ^\n/tmp/tmp5bsaimeu.swift:10:23:\
    \ error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers\
    \ []string\n                      ^\n                      ;\n/tmp/tmp5bsaimeu.swift:10:26:\
    \ error: consecutive statements on a line must be separated by ';'\n    var sorted_numbers\
    \ []string\n                         ^\n                         ;\n/tmp/tmp5bsaimeu.swift:12:10:\
    \ error: expected 'in' after for-each pattern\n    for _, number := range strings.Split(numbers,\
    \ \" \") {\n         ^\n/tmp/tmp5bsaimeu.swift:12:10: error: expected Sequence\
    \ expression for for-each loop\n    for _, number := range strings.Split(numbers,\
    \ \" \") {\n         ^\n/tmp/tmp5bsaimeu.swift:13:15: error: consecutive statements\
    \ on a line must be separated by ';'\n        number, err := strconv.Atoi(number)\n\
    \              ^\n              ;\n/tmp/tmp5bsaimeu.swift:13:15: error: expected\
    \ expression\n        number, err := strconv.Atoi(number)\n              ^\n/tmp/tmp5bsaimeu.swift:8:5:\
    \ warning: expression of type 'String' is unused\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmp5bsaimeu.swift:10:9: error: type annotation missing\
    \ in pattern\n    var sorted_numbers []string\n        ^\n/tmp/tmp5bsaimeu.swift:10:24:\
    \ error: empty collection literal requires an explicit type\n    var sorted_numbers\
    \ []string\n                       ^~\n/tmp/tmp5bsaimeu.swift:10:24: warning:\
    \ expression of type '[Any]' is unused\n    var sorted_numbers []string\n    \
    \                   ^~\n/tmp/tmp5bsaimeu.swift:10:26: error: cannot find 'string'\
    \ in scope\n    var sorted_numbers []string\n                         ^~~~~~\n\
    /tmp/tmp5bsaimeu.swift:26:12: error: cannot find 'strings' in scope\n    return\
    \ strings.Join(sorted_numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n\
    \    var output strings.Builder\n    for _, number := range numbers {\n      \
    \  if number == \"zero\" {\n            number = \"one\"\n        }\n        if\
    \ number == \"nine\" {\n            number = \"zero\"\n        }\n        if number\
    \ == \"one\" {\n            output.WriteString(\" one\")\n        } else {\n \
    \           output.WriteString(\" \" + number)\n        }\n    }\n    return strings.TrimSpace(output.String())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpeexwzfm6.swift:9:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbers := strings.Split(numbers, \" \")\n        \
    \   ^\n           ;\n/tmp/tmpeexwzfm6.swift:9:13: error: expected expression\n\
    \    numbers := strings.Split(numbers, \" \")\n            ^\n/tmp/tmpeexwzfm6.swift:11:16:\
    \ error: found an unexpected second identifier in variable declaration; is there\
    \ an accidental break?\n    var output strings.Builder\n               ^\n/tmp/tmpeexwzfm6.swift:11:16:\
    \ note: join the identifiers together\n    var output strings.Builder\n      \
    \  ~~~~~~~^~~~~~~\n        outputstrings\n/tmp/tmpeexwzfm6.swift:11:16: note:\
    \ join the identifiers together with camel-case\n    var output strings.Builder\n\
    \        ~~~~~~~^~~~~~~\n        outputStrings\n/tmp/tmpeexwzfm6.swift:11:23:\
    \ error: consecutive statements on a line must be separated by ';'\n    var output\
    \ strings.Builder\n                      ^\n                      ;\n/tmp/tmpeexwzfm6.swift:12:10:\
    \ error: expected 'in' after for-each pattern\n    for _, number := range numbers\
    \ {\n         ^\n/tmp/tmpeexwzfm6.swift:12:10: error: expected Sequence expression\
    \ for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpeexwzfm6.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Trim(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmpeexwzfm6.swift:8:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpeexwzfm6.swift:9:5: warning: expression of type\
    \ 'String' is unused\n    numbers := strings.Split(numbers, \" \")\n    ^~~~~~~\n\
    /tmp/tmpeexwzfm6.swift:11:9: error: type annotation missing in pattern\n    var\
    \ output strings.Builder\n        ^\n/tmp/tmpeexwzfm6.swift:11:24: error: reference\
    \ to member 'Builder' cannot be resolved without a contextual type\n    var output\
    \ strings.Builder\n                      ~^~~~~~~\n/tmp/tmpeexwzfm6.swift:25:12:\
    \ error: cannot find 'strings' in scope\n    return strings.TrimSpace(output.String())\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \"\\n\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.Replace(numbers,\
    \ \"- \", \"-\", -1)\n\tnumbers := strings.Replace(numbers, \" \", \"-\", -1)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\n\tvar out String\n\n\tfor _, x :=\
    \ range numbers {\n\t\tif x > 0 {\n\t\t\tout += strconv.Itoa(int(x))\n\t\t}\n\t\
    }\n\n\tout := strings.Join(strings.Fields(out), \" \")\n\n\treturn out\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpkns9sz8u.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpkns9sz8u.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmpkns9sz8u.swift:16:10:\
    \ error: found an unexpected second identifier in variable declaration; is there\
    \ an accidental break?\n        var out String\n                ^\n/tmp/tmpkns9sz8u.swift:16:10:\
    \ note: join the identifiers together\n        var out String\n            ~~~~^~~~~~\n\
    \            outString\n/tmp/tmpkns9sz8u.swift:18:7: error: expected 'in' after\
    \ for-each pattern\n        for _, x := range numbers {\n             ^\n/tmp/tmpkns9sz8u.swift:18:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, x := range\
    \ numbers {\n             ^\n/tmp/tmpkns9sz8u.swift:8:2: warning: expression of\
    \ type 'String' is unused\n        numbers := strings.TrimSpace(numbers)\n   \
    \     ^~~~~~~\n/tmp/tmpkns9sz8u.swift:16:6: error: type annotation missing in\
    \ pattern\n        var out String\n            ^\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numberArray\
    \ = strings.Split(numbers, \" \")\n    numberArray = append(numberArray, \"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\")\n    numberArray = strings.Sort(numberArray)\n    return strings.Join(numberArray,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp390jlhv_.swift:8:23: error: cannot find 'strings' in scope\n  \
    \  var numberArray = strings.Split(numbers, \" \")\n                      ^~~~~~~\n\
    /tmp/tmp390jlhv_.swift:9:19: error: cannot find 'append' in scope\n    numberArray\
    \ = append(numberArray, \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\")\n                  ^~~~~~\n/tmp/tmp390jlhv_.swift:10:19:\
    \ error: cannot find 'strings' in scope\n    numberArray = strings.Sort(numberArray)\n\
    \                  ^~~~~~~\n/tmp/tmp390jlhv_.swift:11:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numberArray, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var output = [String]()\n\
    \    var numberWords = numbers.components(separatedBy: \" \")\n    for i in 0..<numberWords.count\
    \ {\n        if let num = numberWords[i].toInt()?.successor(),\n            num\
    \ <= 9 {\n            output.append(String(num))\n        }\n    }\n    return\
    \ output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpn30m0v86.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    var numberWords = numbers.components(separatedBy: \" \")\n\
    \                      ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpn30m0v86.swift:16:12: error:\
    \ cannot convert return expression of type '[String]' to return type 'String'\n\
    \    return output\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return strings.Split(numbers,\
    \ \" \")\n        .sorted(by: { ($0 < $1) })\n        .joined(\" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5l9aqf25.swift:8:12: error: cannot find 'strings' in scope\n  \
    \  return strings.Split(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \n    var stringToReturn = numbers\n    for _, letter := range strings.Split(numbers,\
    \ \" \") {\n        stringToReturn = strings.Replace(stringToReturn, \"!\", letter,\
    \ -1)\n    }\n\n    stringToReturn = strings.TrimSpace(stringToReturn)\n    return\
    \ stringToReturn\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3h3wcs7j.swift:11:10: error: expected 'in' after for-each pattern\n\
    \    for _, letter := range strings.Split(numbers, \" \") {\n         ^\n/tmp/tmp3h3wcs7j.swift:11:10:\
    \ error: expected Sequence expression for for-each loop\n    for _, letter :=\
    \ range strings.Split(numbers, \" \") {\n         ^\n/tmp/tmp3h3wcs7j.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp3h3wcs7j.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    var numberList []string\n    if strings.Contains(numbers, \" \") {\n    \
    \    numberList = strings.Split(numbers, \" \")\n    } else {\n        numberList\
    \ = strings.Split(numbers, \" \")\n    }\n    numberList = numberList[:9]\n  \
    \  numberList = append(numberList, \"zero\")\n    numberList = append(numberList,\
    \ \"one\")\n    numberList = append(numberList, \"two\")\n    numberList = append(numberList,\
    \ \"three\")\n    numberList = append(numberList, \"four\")\n    numberList =\
    \ append(numberList, \"five\")\n    numberList = append(numberList, \"six\")\n\
    \    numberList = append(numberList, \"seven\")\n    numberList = append(numberList,\
    \ \"eight\")\n    numberList = append(numberList, \"nine\")\n    var result strings.Builder\n\
    \    for _, number := range numberList {\n        switch number {\n        case\
    \ \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\":\n            numberList = append(numberList, \"\")\n  \
    \      default:\n            numberList = append(numberList, number)\n       \
    \ }\n    }\n    for _, number := range numberList {\n        result.WriteString(*number)\n\
    \        result.WriteString(\" \")\n    }\n    result.Truncate(result.Len() -\
    \ 1)\n    return result.String()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3e_7ritx.swift:9:19: error: consecutive statements on a line must\
    \ be separated by ';'\n    var numberList []string\n                  ^\n    \
    \              ;\n/tmp/tmp3e_7ritx.swift:9:22: error: consecutive statements on\
    \ a line must be separated by ';'\n    var numberList []string\n             \
    \        ^\n                     ;\n/tmp/tmp3e_7ritx.swift:15:29: error: expected\
    \ expression in list of expressions\n    numberList = numberList[:9]\n       \
    \                     ^\n/tmp/tmp3e_7ritx.swift:26:16: error: found an unexpected\
    \ second identifier in variable declaration; is there an accidental break?\n \
    \   var result strings.Builder\n               ^\n/tmp/tmp3e_7ritx.swift:26:16:\
    \ note: join the identifiers together\n    var result strings.Builder\n      \
    \  ~~~~~~~^~~~~~~\n        resultstrings\n/tmp/tmp3e_7ritx.swift:26:16: note:\
    \ join the identifiers together with camel-case\n    var result strings.Builder\n\
    \        ~~~~~~~^~~~~~~\n        resultStrings\n/tmp/tmp3e_7ritx.swift:26:23:\
    \ error: consecutive statements on a line must be separated by ';'\n    var result\
    \ strings.Builder\n                      ^\n                      ;\n/tmp/tmp3e_7ritx.swift:27:10:\
    \ error: expected 'in' after for-each pattern\n    for _, number := range numberList\
    \ {\n         ^\n/tmp/tmp3e_7ritx.swift:27:10: error: expected Sequence expression\
    \ for for-each loop\n    for _, number := range numberList {\n         ^\n/tmp/tmp3e_7ritx.swift:35:10:\
    \ error: expected 'in' after for-each pattern\n    for _, number := range numberList\
    \ {\n         ^\n/tmp/tmp3e_7ritx.swift:35:10: error: expected Sequence expression\
    \ for for-each loop\n    for _, number := range numberList {\n         ^\n/tmp/tmp3e_7ritx.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp3e_7ritx.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmp3e_7ritx.swift:9:9: error: type annotation missing in pattern\n\
    \    var numberList []string\n        ^\n/tmp/tmp3e_7ritx.swift:9"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // Split each number\
    \ into the number and unit, e.g. \"123 seconds\" is \"123 seconds\"\n    let parts\
    \ = numbers.components(separatedBy: \" \")\n\n    // Filter out the non-numeric\
    \ parts from the array\n    let filtered = parts.filter({\n        if let number\
    \ = $0.toInt(), number > 0 {\n            return true\n        }\n        return\
    \ false\n    })\n\n    // Sort the remaining parts from smallest to largest\n\
    \    filtered.sorted()\n\n    // Rebuild the string from the remaining parts\n\
    \    return filtered.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpkf97ut2w.swift:9:25: error: value of type 'String' has no member\
    \ 'components'\n    let parts = numbers.components(separatedBy: \" \")\n     \
    \           ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var result = \"\"\
    \n    var temp = \"\"\n    numbers.split(\" \").forEach { num in\n        if num\
    \ == \"zero\" {\n            temp = \"zero\"\n        } else if num == \"one\"\
    \ {\n            temp = \"one\"\n        } else if num == \"two\" {\n        \
    \    temp = \"two\"\n        } else if num == \"three\" {\n            temp =\
    \ \"three\"\n        } else if num == \"four\" {\n            temp = \"four\"\n\
    \        } else if num == \"five\" {\n            temp = \"five\"\n        } else\
    \ if num == \"six\" {\n            temp = \"six\"\n        } else if num == \"\
    seven\" {\n            temp = \"seven\"\n        } else if num == \"eight\" {\n\
    \            temp = \"eight\"\n        } else if num == \"nine\" {\n         \
    \   temp = \"nine\"\n        }\n    }\n    result = temp + result\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpuhqw_aer.swift:10:19: error: missing argument label 'separator:'\
    \ in call\n    numbers.split(\" \").forEach { num in\n                  ^\n  \
    \                separator: \n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tvar strNums = strings.Split(numbers,\
    \ \" \")\n\tstrNums = append(strNums, \"nine\")\n\tstrNums = append(strNums, \"\
    eight\")\n\tstrNums = append(strNums, \"seven\")\n\tstrNums = append(strNums,\
    \ \"six\")\n\tstrNums = append(strNums, \"five\")\n\tstrNums = append(strNums,\
    \ \"four\")\n\tstrNums = append(strNums, \"three\")\n\tstrNums = append(strNums,\
    \ \"two\")\n\tstrNums = append(strNums, \"one\")\n\tstrNums = append(strNums,\
    \ \"zero\")\n\tstrNums = append(strNums, \"nine\")\n\tstrNums = append(strNums,\
    \ \"eight\")\n\tstrNums = append(strNums, \"seven\")\n\tstrNums = append(strNums,\
    \ \"six\")\n\tstrNums = append(strNums, \"five\")\n\tstrNums = append(strNums,\
    \ \"four\")\n\tstrNums = append(strNums, \"three\")\n\tstrNums = append(strNums,\
    \ \"two\")\n\tstrNums = append(strNums, \"one\")\n\tstrNums = append(strNums,\
    \ \"zero\")\n\tvar sortedNums = make([]string, len(strNums))\n\tsort.Strings(strNums)\n\
    \tfor i, str := range strNums {\n\t\tsortedNums[i] = str\n\t}\n\treturn strings.Join(sortedNums,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp64c601my.swift:29:26: error: expected ',' separator\n        var\
    \ sortedNums = make([]string, len(strNums))\n                                ^\n\
    \                                ,\n/tmp/tmp64c601my.swift:31:7: error: expected\
    \ 'in' after for-each pattern\n        for i, str := range strNums {\n       \
    \      ^\n/tmp/tmp64c601my.swift:31:7: error: expected Sequence expression for\
    \ for-each loop\n        for i, str := range strNums {\n             ^\n/tmp/tmp64c601my.swift:8:16:\
    \ error: cannot find 'strings' in scope\n        var strNums = strings.Split(numbers,\
    \ \" \")\n                      ^~~~~~~\n/tmp/tmp64c601my.swift:9:12: error: cannot\
    \ find 'append' in scope\n        strNums = append(strNums, \"nine\")\n      \
    \            ^~~~~~\n/tmp/tmp64c601my.swift:10:12: error: cannot find 'append'\
    \ in scope\n        strNums = append(strNums, \"eight\")\n                  ^~~~~~\n\
    /tmp/tmp64c601my.swift:11:12: error: cannot find 'append' in scope\n        strNums\
    \ = append(strNums, \"seven\")\n                  ^~~~~~\n/tmp/tmp64c601my.swift:12:12:\
    \ error: cannot find 'append' in scope\n        strNums = append(strNums, \"six\"\
    )\n                  ^~~~~~\n/tmp/tmp64c601my.swift:13:12: error: cannot find\
    \ 'append' in scope\n        strNums = append(strNums, \"five\")\n           \
    \       ^~~~~~\n/tmp/tmp64c601my.swift:14:12: error: cannot find 'append' in scope\n\
    \        strNums = append(strNums, \"four\")\n                  ^~~~~~\n/tmp/tmp64c601my.swift:15:12:\
    \ error: cannot find 'append' in scope\n        strNums = append(strNums, \"three\"\
    )\n                  ^~~~~~\n/tmp/tmp64c601my.swift:16:12: error: cannot find\
    \ 'append' in scope\n        strNums = append(strNums, \"two\")\n            \
    \      ^~~~~~\n/tmp/tmp64c601my.swift:17:12: error: cannot find 'append' in scope\n\
    \        strNums = append(strNums, \"one\")\n                  ^~~~~~\n/tmp/tmp64c601my.swift:18:12:\
    \ error: cannot find 'append' in scope\n        strNums = append(strNums, \"zero\"\
    )\n                  ^~~~~~\n/tmp/tmp64c601my.swift:19:12: error: cannot find\
    \ 'append' in scope\n        strNums = append(strNums, \"nine\")\n         "
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\treturn numbers.split(\"\
    \ \")\n\t\t.sorted()\n\t\t.map(Number::fromString)\n\t\t.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmptkzfidxo.swift:10:15: error: expected expression in list of expressions\n\
    \                .map(Number::fromString)\n                            ^\n/tmp/tmptkzfidxo.swift:8:23:\
    \ error: missing argument label 'separator:' in call\n        return numbers.split(\"\
    \ \")\n                             ^\n                             separator:\
    \ \n/tmp/tmptkzfidxo.swift:10:26: error: missing argument for parameter #1 in\
    \ call\n                .map(Number::fromString)\n                           \
    \            ^\n                                       <#(String.SubSequence)\
    \ throws -> String#>\nSwift.Collection:2:28: note: 'map' declared here\n    @inlinable\
    \ public func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n\
    \                           ^\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var list = strings.Split(numbers,\
    \ \" \")\n    sort.SliceStable(list, func(i, j int) bool {\n        return list[i]\
    \ < list[j]\n    })\n    return strings.Join(list, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3hv_5nrp.swift:9:28: error: expected expression in list of expressions\n\
    \    sort.SliceStable(list, func(i, j int) bool {\n                          \
    \ ^\n/tmp/tmp3hv_5nrp.swift:9:32: error: expected identifier in function declaration\n\
    \    sort.SliceStable(list, func(i, j int) bool {\n                          \
    \     ^\n/tmp/tmp3hv_5nrp.swift:8:16: error: cannot find 'strings' in scope\n\
    \    var list = strings.Split(numbers, \" \")\n               ^~~~~~~\n/tmp/tmp3hv_5nrp.swift:9:5:\
    \ error: cannot find 'sort' in scope\n    sort.SliceStable(list, func(i, j int)\
    \ bool {\n    ^~~~\n/tmp/tmp3hv_5nrp.swift:12:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(list, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tif numbers == \"\"\
    \ {\n\t\treturn \"\"\n\t}\n\n\tvar sorted = strings.Split(numbers, \" \")\n\n\t\
    sort.Slice(sorted, func(i, j int) bool {\n\t\treturn strings.Compare(sorted[i],\
    \ sorted[j]) < 0\n\t})\n\n\treturn strings.Join(sorted, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp57vj3bzw.swift:14:21: error: expected expression in list of expressions\n\
    \        sort.Slice(sorted, func(i, j int) bool {\n                          \
    \ ^\n/tmp/tmp57vj3bzw.swift:14:25: error: expected identifier in function declaration\n\
    \        sort.Slice(sorted, func(i, j int) bool {\n                          \
    \     ^\n/tmp/tmp57vj3bzw.swift:12:15: error: cannot find 'strings' in scope\n\
    \        var sorted = strings.Split(numbers, \" \")\n                     ^~~~~~~\n\
    /tmp/tmp57vj3bzw.swift:14:2: error: cannot find 'sort' in scope\n        sort.Slice(sorted,\
    \ func(i, j int) bool {\n        ^~~~\n/tmp/tmp57vj3bzw.swift:18:9: error: cannot\
    \ find 'strings' in scope\n        return strings.Join(sorted, \" \")\n      \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tlet mut numbers =\
    \ numbers.split_whitespace();\n\tnumbers.sort_by(|a, b| a.compare(b));\n\tnumbers.collect::<String>().collect::<Vec<_>>().join(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppvpw1rpu.swift:8:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut numbers\
    \ = numbers.split_whitespace();\n                ^\n/tmp/tmppvpw1rpu.swift:8:10:\
    \ note: join the identifiers together\n        let mut numbers = numbers.split_whitespace();\n\
    \            ~~~~^~~~~~~\n            mutnumbers\n/tmp/tmppvpw1rpu.swift:8:10:\
    \ note: join the identifiers together with camel-case\n        let mut numbers\
    \ = numbers.split_whitespace();\n            ~~~~^~~~~~~\n            mutNumbers\n\
    /tmp/tmppvpw1rpu.swift:9:25: error: expected ',' separator\n        numbers.sort_by(|a,\
    \ b| a.compare(b));\n                               ^\n                      \
    \        ,\n/tmp/tmppvpw1rpu.swift:10:17: error: consecutive statements on a line\
    \ must be separated by ';'\n        numbers.collect::<String>().collect::<Vec<_>>().join(\"\
    \ \")\n                       ^\n                       ;\n/tmp/tmppvpw1rpu.swift:10:17:\
    \ error: expected expression\n        numbers.collect::<String>().collect::<Vec<_>>().join(\"\
    \ \")\n                       ^\n/tmp/tmppvpw1rpu.swift:8:28: error: value of\
    \ type 'String' has no member 'split_whitespace'\n        let mut numbers = numbers.split_whitespace();\n\
    \                          ~~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmppvpw1rpu.swift:9:18:\
    \ error: '|' is not a prefix unary operator\n        numbers.sort_by(|a, b| a.compare(b));\n\
    \                        ^\n/tmp/tmppvpw1rpu.swift:9:19: error: cannot find 'a'\
    \ in scope\n        numbers.sort_by(|a, b| a.compare(b));\n                  \
    \       ^\n/tmp/tmppvpw1rpu.swift:9:23: error: '|' is not a postfix unary operator\n\
    \        numbers.sort_by(|a, b| a.compare(b));\n                             ^\n\
    /tmp/tmppvpw1rpu.swift:9:22: error: cannot find 'b' in scope\n        numbers.sort_by(|a,\
    \ b| a.compare(b));\n                            ^\n/tmp/tmppvpw1rpu.swift:9:25:\
    \ error: cannot find 'a' in scope\n        numbers.sort_by(|a, b| a.compare(b));\n\
    \                               ^\n/tmp/tmppvpw1rpu.swift:9:35: error: cannot\
    \ find 'b' in scope\n        n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tlet numbers = strings.Split(\"\
    \ \", maxSplitCount: 3)\n\tnumbers.sort()\n\t\n\treturn strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5964h5de.swift:8:16: error: cannot find 'strings' in scope\n  \
    \      let numbers = strings.Split(\" \", maxSplitCount: 3)\n                \
    \      ^~~~~~~\n/tmp/tmp5964h5de.swift:11:9: error: cannot find 'strings' in scope\n\
    \        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers :=\
    \ strings.Replace(numbers, \",\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"&\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"%\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"#\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \".\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \":\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"&\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \",\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"(\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \")\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \":\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \";\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"|\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"=\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"?\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \" \", \" \", -1)\n\n\tnumbers := strings.Fields(numbers)\n\tnumbers = strings.Join(strings.Split(strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))), \" \")\n\n\treturn numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmppraozr_0.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmppraozr_0.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n/tmp/tmppraozr_0.swift:8:2:\
    \ warning: expression of type 'String' is unused\n        numbers := strings.Trim(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // remove all whitespace\
    \ and split into array\n    let numberArray = numbers.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines).components(separatedBy:\
    \ CharacterSet.decimalDigits.inverted)\n\n    // sort the array and then join\
    \ back together\n    return join(numberArray).sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo7kpodfl.swift:9:54: error: cannot find 'CharacterSet' in scope\n\
    \    let numberArray = numbers.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines).components(separatedBy:\
    \ CharacterSet.decimalDigits.inverted)\n                                     \
    \                ^~~~~~~~~~~~\n/tmp/tmpo7kpodfl.swift:9:115: error: cannot find\
    \ 'CharacterSet' in scope\n    let numberArray = numbers.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines).components(separatedBy: CharacterSet.decimalDigits.inverted)\n\
    \                                                                            \
    \                                      ^~~~~~~~~~~~\n/tmp/tmpo7kpodfl.swift:9:31:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    let numberArray\
    \ = numbers.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines).components(separatedBy:\
    \ CharacterSet.decimalDigits.inverted)\n                      ~~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpo7kpodfl.swift:12:12: error: cannot find 'join' in scope\n    return join(numberArray).sorted()\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnums := strings.Split(numbers,\
    \ \" \")\n\tsort.Strings(nums)\n\tresult := strings.Join(nums, \" \")\n\treturn\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6qap85sh.swift:8:6: error: consecutive statements on a line must\
    \ be separated by ';'\n        nums := strings.Split(numbers, \" \")\n       \
    \     ^\n            ;\n/tmp/tmp6qap85sh.swift:8:7: error: expected expression\n\
    \        nums := strings.Split(numbers, \" \")\n             ^\n/tmp/tmp6qap85sh.swift:8:2:\
    \ error: cannot find 'nums' in scope\n        nums := strings.Split(numbers, \"\
    \ \")\n        ^~~~\n/tmp/tmp6qap85sh.swift:11:9: error: cannot find 'result'\
    \ in scope\n        return result\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\twords := strings.Split(numbers,\
    \ \" \")\n\tnumbers = []string{}\n\tfor _, word := range words {\n\t\tnumber,\
    \ err := strconv.Atoi(word)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\t\
    numbers = append(numbers, number)\n\t}\n\tsort.Ints(numbers)\n\treturn strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpobe8wakw.swift:8:7: error: consecutive statements on a line must\
    \ be separated by ';'\n        words := strings.Split(numbers, \" \")\n      \
    \       ^\n             ;\n/tmp/tmpobe8wakw.swift:8:8: error: expected expression\n\
    \        words := strings.Split(numbers, \" \")\n              ^\n/tmp/tmpobe8wakw.swift:10:7:\
    \ error: expected 'in' after for-each pattern\n        for _, word := range words\
    \ {\n             ^\n/tmp/tmpobe8wakw.swift:10:7: error: expected Sequence expression\
    \ for for-each loop\n        for _, word := range words {\n             ^\n/tmp/tmpobe8wakw.swift:11:9:\
    \ error: consecutive statements on a line must be separated by ';'\n         \
    \       number, err := strconv.Atoi(word)\n                      ^\n         \
    \             ;\n/tmp/tmpobe8wakw.swift:11:9: error: expected expression\n   \
    \             number, err := strconv.Atoi(word)\n                      ^\n/tmp/tmpobe8wakw.swift:8:2:\
    \ error: cannot find 'words' in scope\n        words := strings.Split(numbers,\
    \ \" \")\n        ^~~~~\n/tmp/tmpobe8wakw.swift:18:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // Split our input\
    \ string into a list of strings.\n    let tokens = numbers.characters.split(separator:\
    \ \" \")\n\n    // Sort the array from smallest to largest\n    let sorted = tokens.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n\n    // Join the sorted array into\
    \ one string.\n    return sorted.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbki0v548.swift:9:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    let tokens = numbers.characters.split(separator: \"\
    \ \")\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbki0v548.swift:12:41: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    let sorted = tokens.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n                                 \
    \    ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.ToLower(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.ReplaceAll(numbers,\
    \ \"-\", \"\")\n    numbers = strings.TrimSpace(numbers)\n    numbers := strings.ReplaceAll(numbers,\
    \ \" \", \"\")\n    numbers := strings.ReplaceAll(numbers, \"'\", \"\"\"\")\n\
    \    numbers := strings.Trim(numbers, \"0123456789\")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(strings.TrimPrefix(numbers, \"0\"\
    ), \"0\")\n    return numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1zuedflq.swift:9:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbers := strings.TrimSpace(numbers)\n           ^\n\
    \           ;\n/tmp/tmp1zuedflq.swift:9:13: error: expected expression\n    numbers\
    \ := strings.TrimSpace(numbers)\n            ^\n/tmp/tmp1zuedflq.swift:13:52:\
    \ error: multi-line string literal content must begin on a new line\n    numbers\
    \ := strings.ReplaceAll(numbers, \"'\", \"\"\"\")\n                          \
    \                         ^\n/tmp/tmp1zuedflq.swift:13:49: error: unterminated\
    \ string literal\n    numbers := strings.ReplaceAll(numbers, \"'\", \"\"\"\")\n\
    \                                                ^\n/tmp/tmp1zuedflq.swift:37:104:\
    \ error: expected '}' at end of brace statement\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )\n                                                                          \
    \                             ^\n/tmp/tmp1zuedflq.swift:7:46: note: to match this\
    \ opening '{'\nfunc sort_numbers(numbers: String) -> String {\n              \
    \                               ^\n/tmp/tmp1zuedflq.swift:8:15: error: cannot\
    \ find 'strings' in scope\n    numbers = strings.ToLower(numbers)\n          \
    \    ^~~~~~~\n/tmp/tmp1zuedflq.swift:8:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.ToLower(numbers)\n    ^~~~~~~\n/tmp/tmp1zuedflq.swift:9:5:\
    \ warning: expression of type 'String' is unused\n    numbers := strings.TrimSpace(numbers)\n\
    \    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberStrings\
    \ = numbers.split(separator: \" \")\n    var numbers: Array<String> = []\n   \
    \ for numberString in numberStrings {\n        numberString.toInt()?.sorted()\n\
    \    }\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpy78thcsa.swift:11:22: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'toInt'\n        numberString.toInt()?.sorted()\n\
    \        ~~~~~~~~~~~~ ^~~~~\n/tmp/tmpy78thcsa.swift:13:20: error: value of type\
    \ 'Array<String>' has no member 'join'\n    return numbers.join(\" \")\n     \
    \      ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    var numberArray []string\n\
    \    for _, number := range numbers {\n        if number == \"zero\" {\n     \
    \       numberArray = append(numberArray, \"0\")\n        } else if number ==\
    \ \"one\" {\n            numberArray = append(numberArray, \"1\")\n        } else\
    \ if number == \"two\" {\n            numberArray = append(numberArray, \"2\"\
    )\n        } else if number == \"three\" {\n            numberArray = append(numberArray,\
    \ \"3\")\n        } else if number == \"four\" {\n            numberArray = append(numberArray,\
    \ \"4\")\n        } else if number == \"five\" {\n            numberArray = append(numberArray,\
    \ \"5\")\n        } else if number == \"six\" {\n            numberArray = append(numberArray,\
    \ \"6\")\n        } else if number == \"seven\" {\n            numberArray = append(numberArray,\
    \ \"7\")\n        } else if number == \"eight\" {\n            numberArray = append(numberArray,\
    \ \"8\")\n        } else if number == \"nine\" {\n            numberArray = append(numberArray,\
    \ \"9\")\n        } else {\n            panic(fmt.Sprintf(\"sort_numbers: %s is\
    \ not a valid number\", number))\n        }\n    }\n    sort.Strings(numberArray)\n\
    \    var string string\n    for _, number := range numberArray {\n        string\
    \ = string + \" \" + number\n    }\n    return strings.TrimSpace(string)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbwf6wwo4.swift:9:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbers := strings.Split(numbers, \" \")\n        \
    \   ^\n           ;\n/tmp/tmpbwf6wwo4.swift:9:13: error: expected expression\n\
    \    numbers := strings.Split(numbers, \" \")\n            ^\n/tmp/tmpbwf6wwo4.swift:10:20:\
    \ error: consecutive statements on a line must be separated by ';'\n    var numberArray\
    \ []string\n                   ^\n                   ;\n/tmp/tmpbwf6wwo4.swift:10:23:\
    \ error: consecutive statements on a line must be separated by ';'\n    var numberArray\
    \ []string\n                      ^\n                      ;\n/tmp/tmpbwf6wwo4.swift:11:10:\
    \ error: expected 'in' after for-each pattern\n    for _, number := range numbers\
    \ {\n         ^\n/tmp/tmpbwf6wwo4.swift:11:10: error: expected Sequence expression\
    \ for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpbwf6wwo4.swift:37:16:\
    \ error: found an unexpected second identifier in variable declaration; is there\
    \ an accidental break?\n    var string string\n               ^\n/tmp/tmpbwf6wwo4.swift:37:16:\
    \ note: join the identifiers together\n    var string string\n        ~~~~~~~^~~~~~\n\
    \        stringstring\n/tmp/tmpbwf6wwo4.swift:37:16: note: join the identifiers\
    \ together with camel-case\n    var string string\n        ~~~~~~~^~~~~~\n   \
    \     stringString\n/tmp/tmpbwf6wwo4.swift:38:10: error: expected 'in' after for-each\
    \ pattern\n    for _, number := range numberArray {\n         ^\n/tmp/tmpbwf6wwo4.swift:38:10:\
    \ error: expected Sequence expression for for-each loop\n    for _, number :=\
    \ range numberArray {\n         ^\n/tmp/tmpbwf6wwo4.swift:8:15: error: cannot\
    \ find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n        \
    \      ^~~~~~~\n/tmp/tmpbwf6wwo4.swift:8:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n    ^~~~~~~\n\
    /tmp/tmpbwf6wwo4.swift:9:5: warning: expression of type 'String' is unused\n \
    \   numbers := strings.Split(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpbwf6wwo4.swift:10:9:\
    \ error: type annotation missing in patter"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.lowercased()\n\
    \    var newNumbers = \"\"\n    var currentNumber = 0\n    var firstCharacterOfNumber\
    \ = false\n    var lastCharacterOfNumber = false\n    for character in numbers\
    \ {\n        if character == \"-\" {\n            firstCharacterOfNumber = true\n\
    \            lastCharacterOfNumber = false\n        } else if !firstCharacterOfNumber\
    \ {\n            newNumbers = newNumbers + String(currentNumber) + \" \"\n   \
    \         currentNumber = 0\n        } else {\n            if lastCharacterOfNumber\
    \ {\n                newNumbers = newNumbers + String(currentNumber) + \" \"\n\
    \                currentNumber = 0\n            }\n            newNumbers = newNumbers\
    \ + String(character)\n            currentNumber = currentNumber + Int(String(character)!)!\n\
    \            lastCharacterOfNumber = true\n        }\n    }\n    return newNumbers.lowercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp34i4s98e.swift:26:66: error: cannot force unwrap value of non-optional\
    \ type 'String'\n            currentNumber = currentNumber + Int(String(character)!)!\n\
    \                                                ~~~~~~~~~~~~~~~~~^\n        \
    \                                                         \n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"\\n\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\n\tnumbers = strings.Fields(numbers)\n\tsort.Strings(numbers)\n\n\t\
    out := strings.Join(numbers, \" \")\n\n\treturn out\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmprcqhmctx.swift:15:5: error: consecutive statements on a line must\
    \ be separated by ';'\n        out := strings.Join(numbers, \" \")\n         \
    \  ^\n           ;\n/tmp/tmprcqhmctx.swift:15:6: error: expected expression\n\
    \        out := strings.Join(numbers, \" \")\n            ^\n/tmp/tmprcqhmctx.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"\\n\")\n                  ^~~~~~~\n/tmp/tmprcqhmctx.swift:8:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"\\n\")\n        ^~~~~~~\n/tmp/tmprcqhmctx.swift:9:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n           \
    \       ^~~~~~~\n/tmp/tmprcqhmctx.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmprcqhmctx.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \",\")\n              \
    \    ^~~~~~~\n/tmp/tmprcqhmctx.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \",\")\n\
    \        ^~~~~~~\n/tmp/tmprcqhmctx.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.Fields(numbers)\n                  ^~~~~~~\n\
    /tmp/tmprcqhmctx.swift:12:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.Fields(numbers)\n        ^~~~~~~\n/tmp/tmprcqhmctx.swift:13:2:\
    \ error: cannot find 'sort' in scope\n        sort.Strings(numbers)\n        ^~~~\n\
    /tmp/tmprcqhmctx.swift:15:2: error: cannot find 'out' in scope\n        out :=\
    \ strings.Join(numbers, \" \")\n        ^~~\n/tmp/tmprcqhmctx.swift:17:9: error:\
    \ cannot find 'out' in scope\n        return out\n               ^~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    var newNumbers = \"\"\n    for _, n := range strings.Split(numbers, \" \"\
    ) {\n        newNumbers += \" \" + n\n    }\n    newNumbers = newNumbers[strings.Index(newNumbers,\
    \ \" \")+1:]\n    return strings.Replace(newNumbers, \" \", \" \", -1)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4w_8ltko.swift:10:10: error: expected 'in' after for-each pattern\n\
    \    for _, n := range strings.Split(numbers, \" \") {\n         ^\n/tmp/tmp4w_8ltko.swift:10:10:\
    \ error: expected Sequence expression for for-each loop\n    for _, n := range\
    \ strings.Split(numbers, \" \") {\n         ^\n/tmp/tmp4w_8ltko.swift:8:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n \
    \             ^~~~~~~\n/tmp/tmp4w_8ltko.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmp4w_8ltko.swift:14:12: error: cannot find 'strings' in scope\n\
    \    return strings.Replace(newNumbers, \" \", \" \", -1)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let numbers = numbers.unicodeScalars\n       \
    \ .filter({ $0.value != 0xFFE5 })\n        .sorted(by: String.CompareOptions.natural)\n\
    \        .flatMap(String.init)\n    return String(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppx87gfi9.swift:8:27: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    let numbers = numbers.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \                  ~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmppx87gfi9.swift:8:51: error:\
    \ cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \    let numbers = numbers.trimmingCharacters(in: .whitespacesAndNewlines)\n \
    \                                                ~^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppx87gfi9.swift:11:28:\
    \ error: type 'String' has no member 'CompareOptions'\n        .sorted(by: String.CompareOptions.natural)\n\
    \                    ~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var s = \"\"\n \
    \   if numbers == \"zero zero zero\" {\n        return \"zero\"\n    }\n    for\
    \ _, n := range strings.Split(numbers, \" \") {\n        switch strings.ToLower(n)\
    \ {\n        case \"zero\":\n            s += \"0\"\n        case \"one\":\n \
    \           s += \"1\"\n        case \"two\":\n            s += \"2\"\n      \
    \  case \"three\":\n            s += \"3\"\n        case \"four\":\n         \
    \   s += \"4\"\n        case \"five\":\n            s += \"5\"\n        case \"\
    six\":\n            s += \"6\"\n        case \"seven\":\n            s += \"7\"\
    \n        case \"eight\":\n            s += \"8\"\n        case \"nine\":\n  \
    \          s += \"9\"\n        default:\n            s += n\n        }\n    }\n\
    \    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjp392gjg.swift:12:10: error: expected 'in' after for-each pattern\n\
    \    for _, n := range strings.Split(numbers, \" \") {\n         ^\n/tmp/tmpjp392gjg.swift:12:10:\
    \ error: expected Sequence expression for for-each loop\n    for _, n := range\
    \ strings.Split(numbers, \" \") {\n         ^\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    if numbers == \"\
    \" {\n        return \"\"\n    }\n    switch numbers {\n    case \"zero\", \"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\":\n        return numbers\n    }\n    var sortedNumbers = \"\"\n   \
    \ numbersArray := strings.Split(numbers, \" \")\n    for _, number := range numbersArray\
    \ {\n        sortedNumbers = sortedNumbers + \" \" + number\n    }\n    return\
    \ strings.TrimSuffix(sortedNumbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp48mgumks.swift:16:17: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbersArray := strings.Split(numbers, \" \")\n   \
    \             ^\n                ;\n/tmp/tmp48mgumks.swift:16:18: error: expected\
    \ expression\n    numbersArray := strings.Split(numbers, \" \")\n            \
    \     ^\n/tmp/tmp48mgumks.swift:17:10: error: expected 'in' after for-each pattern\n\
    \    for _, number := range numbersArray {\n         ^\n/tmp/tmp48mgumks.swift:17:10:\
    \ error: expected Sequence expression for for-each loop\n    for _, number :=\
    \ range numbersArray {\n         ^\n/tmp/tmp48mgumks.swift:11:5: error: switch\
    \ must be exhaustive\n    switch numbers {\n    ^\n/tmp/tmp48mgumks.swift:11:5:\
    \ note: do you want to add a default clause?\n    switch numbers {\n    ^\n/tmp/tmp48mgumks.swift:16:5:\
    \ error: cannot find 'numbersArray' in scope\n    numbersArray := strings.Split(numbers,\
    \ \" \")\n    ^~~~~~~~~~~~\n/tmp/tmp48mgumks.swift:20:12: error: cannot find 'strings'\
    \ in scope\n    return strings.TrimSuffix(sortedNumbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbersArray :=\
    \ strings.Split(numbers, \" \")\n    numbersArray = append(numbersArray, \"\"\
    )\n    sort.SliceStable(numbersArray, func(i, j int) bool {\n        return numbersArray[i]\
    \ < numbersArray[j]\n    })\n    return strings.Join(numbersArray, \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3qq4tmis.swift:8:17: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbersArray := strings.Split(numbers, \" \")\n   \
    \             ^\n                ;\n/tmp/tmp3qq4tmis.swift:8:18: error: expected\
    \ expression\n    numbersArray := strings.Split(numbers, \" \")\n            \
    \     ^\n/tmp/tmp3qq4tmis.swift:8:5: error: cannot find 'numbersArray' in scope\n\
    \    numbersArray := strings.Split(numbers, \" \")\n    ^~~~~~~~~~~~\n/tmp/tmp3qq4tmis.swift:13:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbersArray,\
    \ \" \")\n           ^~~~~~~\n/tmp/tmp3qq4tmis.swift:13:25: error: cannot find\
    \ 'numbersArray' in scope\n    return strings.Join(numbersArray, \" \")\n    \
    \                    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  let numbers = numbers.trim()\n\
    \  \n  if numbers.isEmpty {\n    return \"\"\n  }\n  \n  var sortedNumbers = \"\
    \"\n  \n  for item in numbers.split(\" \") {\n    if item == \"zero\" {\n    \
    \  sortedNumbers += \" \" + item\n    } else if item == \"one\" {\n      sortedNumbers\
    \ += \" \" + item\n    } else if item == \"two\" {\n      sortedNumbers += \"\
    \ \" + item\n    } else if item == \"three\" {\n      sortedNumbers += \" \" +\
    \ item\n    } else if item == \"four\" {\n      sortedNumbers += \" \" + item\n\
    \    } else if item == \"five\" {\n      sortedNumbers += \" \" + item\n    }\
    \ else if item == \"six\" {\n      sortedNumbers += \" \" + item\n    } else if\
    \ item == \"seven\" {\n      sortedNumbers += \" \" + item\n    } else if item\
    \ == \"eight\" {\n      sortedNumbers += \" \" + item\n    } else if item == \"\
    nine\" {\n      sortedNumbers += \" \" + item\n    }\n  }\n  \n  return sortedNumbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmptp5c1d67.swift:8:25: error: value of type 'String' has no member\
    \ 'trim'\n  let numbers = numbers.trim()\n                ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  return sort_numbers(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7bdcgpp3.swift:8:32: error: extra argument in call\n  return sort_numbers(numbers,\
    \ \" \")\n                     ~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let strings: [String]\
    \ = numbers.split(separator: \" \").map { ($0).lowercased() }\n    let numbers:\
    \ [String] = strings.map { ($0.digits(from: \"0123456789\").joined(separator:\
    \ \"\")) }\n    return numbers.sorted().joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6npp23c3.swift:9:47: error: value of type 'String' has no member\
    \ 'digits'\n    let numbers: [String] = strings.map { ($0.digits(from: \"0123456789\"\
    ).joined(separator: \"\")) }\n                                           ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = numbers[..]\n\
    \    numbers.trim()\n    numbers = numbers.split()\n    numbers.sort{ $0 < $1\
    \ }\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5wtvxgq3.swift:8:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    numbers = numbers[..]\n                      ^~\n \
    \                     ...\n/tmp/tmp5wtvxgq3.swift:8:5: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n    numbers = numbers[..]\n    ^~~~~~~\n\
    /tmp/tmp5wtvxgq3.swift:9:13: error: value of type 'String' has no member 'trim'\n\
    \    numbers.trim()\n    ~~~~~~~ ^~~~\n/tmp/tmp5wtvxgq3.swift:10:29: error: missing\
    \ argument for parameter 'separator' in call\n    numbers = numbers.split()\n\
    \                            ^\n                            separator: <#String.Element#>\n\
    Swift.Sequence:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)'\
    \ declared here\n    @inlinable public __consuming func split(separator: Self.Element,\
    \ maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\n/tmp/tmp5wtvxgq3.swift:10:5: error:\
    \ cannot assign to value: 'numbers' is a 'let' constant\n    numbers = numbers.split()\n\
    \    ^~~~~~~\n/tmp/tmp5wtvxgq3.swift:10:23: error: no 'split' candidates produce\
    \ the expected contextual result type 'String'\n    numbers = numbers.split()\n\
    \                      ^\nSwift.Sequence:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)'\
    \ produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'),\
    \ not the expected contextual result type 'String'\n    @inlinable public __consuming\
    \ func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Sequence:2:40: note: 'split(maxSplits:omittingEmptySubsequences:whereSeparator:)'\
    \ produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'),\
    \ not the expected contextual result type 'String'\n    @inlinable public __consuming\
    \ func split(maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true,\
    \ whereSeparator isSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Se"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\treturn strings.TrimSpace(numbers.replace(\"\
    \ \", \"\"))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7kag8a6d.swift:8:9: error: cannot find 'strings' in scope\n   \
    \     return strings.TrimSpace(numbers.replace(\" \", \"\"))\n               ^~~~~~~\n\
    /tmp/tmp7kag8a6d.swift:8:35: error: cannot use mutating member on immutable value:\
    \ 'numbers' is a 'let' constant\n        return strings.TrimSpace(numbers.replace(\"\
    \ \", \"\"))\n                                 ~~~~~~~ ^\n/tmp/tmp7kag8a6d.swift:8:42:\
    \ error: missing argument label 'with:' in call\n        return strings.TrimSpace(numbers.replace(\"\
    \ \", \"\"))\n                                                ^\n            \
    \                                          with: \n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let tokens = numbers.characters.split{$0\
    \ == \" \"}.map(String.init)\n    let numbers = tokens.reduce(\"\") { (result,\
    \ value) -> String in\n        if let number = Int(value) {\n            return\
    \ result + String(number)\n        } else {\n            return result\n     \
    \   }\n    }\n    var sorted = numbers.sorted(<)\n    return sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4m_hp2wi.swift:8:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    let tokens = numbers.characters.split{$0 == \" \"}.map(String.init)\n\
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp4m_hp2wi.swift:16:33: error: missing argument label 'by:'\
    \ in call\n    var sorted = numbers.sorted(<)\n                              \
    \  ^\n                                by: \n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // https://codereview.stackexchange.com/questions/119976/sort-all-the-numbers-in-a-string-with-lexicographical-order\n\
    \    // Find the longest run of numbers in the given string\n    // https://codereview.stackexchange.com/questions/119976/sort-all-the-numbers-in-a-string-with-lexicographical-order\n\
    \    var runs = runsOf(numbers)\n    // The longest run will always be smaller\
    \ than the shortest run\n    if runs.count > runs.minimum {\n        // The longest\
    \ run will always be smaller than the shortest run\n        runs = runs.withFilter({$0.count\
    \ < $1.count}).sorted()\n    }\n    \n    // For each run, append the numbers\
    \ in that run together\n    let reordered = runs.reduce(\"\", { $0.appending(\"\
    ,\").appending($1.numbers) })\n    \n    // Remove the unnecessary commas\n  \
    \  reordered = reordered.replacingOccurrences(of: \",\", with: \"\")\n    \n \
    \   // Sort the numbers within each run\n    reordered = reordered.sorted()\n\
    \    \n    // Add the leading zeros, if needed\n    return reordered.prefix(numbers.size).map(String.init)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5paaszsw.swift:11:16: error: cannot find 'runsOf' in scope\n  \
    \  var runs = runsOf(numbers)\n               ^~~~~~\n/tmp/tmp5paaszsw.swift:28:37:\
    \ error: value of type 'String' has no member 'size'\n    return reordered.prefix(numbers.size).map(String.init)\n\
    \                            ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\treturn strings.Replace(strings.Replace(strings.Trim(numbers),\
    \ \" \", \"\", -1), \"-\", \"\", -1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp0n0la0ya.swift:8:9: error: cannot find 'strings' in scope\n   \
    \     return strings.Replace(strings.Replace(strings.Trim(numbers), \" \", \"\"\
    , -1), \"-\", \"\", -1)\n               ^~~~~~~\n/tmp/tmp0n0la0ya.swift:8:25:\
    \ error: cannot find 'strings' in scope\n        return strings.Replace(strings.Replace(strings.Trim(numbers),\
    \ \" \", \"\", -1), \"-\", \"\", -1)\n                               ^~~~~~~\n\
    /tmp/tmp0n0la0ya.swift:8:41: error: cannot find 'strings' in scope\n        return\
    \ strings.Replace(strings.Replace(strings.Trim(numbers), \" \", \"\", -1), \"\
    -\", \"\", -1)\n                                               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numberStrings\
    \ = strings.Split(numbers, \" \")\n    var sortedNumbers = numberStrings.OrderBy(func(s\
    \ string) bool {\n        s, err := strconv.Atoi(s)\n        if err != nil {\n\
    \            log.Println(err)\n            return false\n        }\n        return\
    \ s < 10\n    })\n    result := strings.Join(sortedNumbers, \" \")\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmhxb96so.swift:9:47: error: expected expression in list of expressions\n\
    \    var sortedNumbers = numberStrings.OrderBy(func(s string) bool {\n       \
    \                                       ^\n/tmp/tmpmhxb96so.swift:9:47: error:\
    \ consecutive statements on a line must be separated by ';'\n    var sortedNumbers\
    \ = numberStrings.OrderBy(func(s string) bool {\n                            \
    \                  ^\n                                              ;\n/tmp/tmpmhxb96so.swift:9:51:\
    \ error: expected identifier in function declaration\n    var sortedNumbers =\
    \ numberStrings.OrderBy(func(s string) bool {\n                              \
    \                    ^\n/tmp/tmpmhxb96so.swift:8:25: error: cannot find 'strings'\
    \ in scope\n    var numberStrings = strings.Split(numbers, \" \")\n          \
    \              ^~~~~~~\n/tmp/tmpmhxb96so.swift:18:12: error: cannot find 'result'\
    \ in scope\n    return result\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  var numberWords :\
    \ [String] = numbers.split(\" \").filter({ !$0.isEmpty }).map { String($0) }\n\
    \  numberWords.sort()\n  return \" \\(numberWords)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpqdgbqutp.swift:8:46: error: missing argument label 'separator:'\
    \ in call\n  var numberWords : [String] = numbers.split(\" \").filter({ !$0.isEmpty\
    \ }).map { String($0) }\n                                             ^\n    \
    \                                         separator: \n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var s = \"\"\n \
    \   numbers.split(\" \").forEach() {\n        if let n = NumberFormatter().number(from:\
    \ $0, locale: nil) {\n            s.append(n.description)\n        }\n    }\n\
    \    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps8d7i5cy.swift:10:20: error: cannot find 'NumberFormatter' in scope\n\
    \        if let n = NumberFormatter().number(from: $0, locale: nil) {\n      \
    \             ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tvar strs []string\n\
    \tvar result []string\n\n\twords := strings.Split(numbers, \" \")\n\n\tfor _,\
    \ word := range words {\n\t\tword := strings.TrimSpace(word)\n\t\tif len(word)\
    \ == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tif strings.Contains(word, \"-\") {\n\t\t\t\
    splitted := strings.Split(word, \"-\")\n\t\t\tfor _, s := range splitted {\n\t\
    \t\t\ts = strings.TrimSpace(s)\n\t\t\t\tif len(s) == 0 {\n\t\t\t\t\tcontinue\n\
    \t\t\t\t}\n\t\t\t\tstrs = append(strs, s)\n\t\t\t}\n\t\t} else {\n\t\t\tstrs =\
    \ append(strs, word)\n\t\t}\n\t}\n\n\tsort.Strings(strs)\n\n\tfor _, word := range\
    \ strs {\n\t\tif !strings.Contains(word, \"-\") {\n\t\t\tresult = append(result,\
    \ word)\n\t\t} else {\n\t\t\tsplitted := strings.Split(word, \"-\")\n\t\t\tfor\
    \ _, s := range splitted {\n\t\t\t\ts = strings.TrimSpace(s)\n\t\t\t\tif len(s)\
    \ == 0 {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tresult = append(result, s)\n\t\
    \t\t}\n\t\t}\n\t}\n\n\treturn strings.Join(result, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpr8js4xb_.swift:8:10: error: consecutive statements on a line must\
    \ be separated by ';'\n        var strs []string\n                ^\n        \
    \        ;\n/tmp/tmpr8js4xb_.swift:8:13: error: consecutive statements on a line\
    \ must be separated by ';'\n        var strs []string\n                   ^\n\
    \                   ;\n/tmp/tmpr8js4xb_.swift:9:12: error: consecutive statements\
    \ on a line must be separated by ';'\n        var result []string\n          \
    \        ^\n                  ;\n/tmp/tmpr8js4xb_.swift:9:15: error: consecutive\
    \ statements on a line must be separated by ';'\n        var result []string\n\
    \                     ^\n                     ;\n/tmp/tmpr8js4xb_.swift:11:7:\
    \ error: consecutive statements on a line must be separated by ';'\n        words\
    \ := strings.Split(numbers, \" \")\n             ^\n             ;\n/tmp/tmpr8js4xb_.swift:11:8:\
    \ error: expected expression\n        words := strings.Split(numbers, \" \")\n\
    \              ^\n/tmp/tmpr8js4xb_.swift:13:7: error: expected 'in' after for-each\
    \ pattern\n        for _, word := range words {\n             ^\n/tmp/tmpr8js4xb_.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, word :=\
    \ range words {\n             ^\n/tmp/tmpr8js4xb_.swift:14:7: error: consecutive\
    \ statements on a line must be separated by ';'\n                word := strings.TrimSpace(word)\n\
    \                    ^\n                    ;\n/tmp/tmpr8js4xb_.swift:14:8: error:\
    \ expected expression\n                word := strings.TrimSpace(word)\n     \
    \                ^\n/tmp/tmpr8js4xb_.swift:19:12: error: consecutive statements\
    \ on a line must be separated by ';'\n                        splitted := strings.Split(word,\
    \ \"-\")\n                                ^\n                                ;\n\
    /tmp/tmpr8js4xb_.swift:19:13: error: expected expression\n                   \
    \     splitted := strings.Split(word, \"-\")\n                               \
    \  ^\n/tmp/tmpr8js4xb_.swift:20:9: error: expected 'in' after for-each pattern\n\
    \                        for _, s := range splitted {\n                      \
    \       ^\n/tmp/tm"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  var numbers_split\
    \ = numbers.split(\" \")\n  numbers_split = numbers_split[1...len(numbers_split)]\n\
    \  var numbers_sorted: [String] = []\n\n  for number in numbers_split {\n    switch\
    \ number {\n    case \"zero\":\n      numbers_sorted = append(numbers_sorted,\
    \ \"one\")\n    case \"one\":\n      numbers_sorted = append(numbers_sorted, \"\
    two\")\n    case \"two\":\n      numbers_sorted = append(numbers_sorted, \"three\"\
    )\n    case \"three\":\n      numbers_sorted = append(numbers_sorted, \"four\"\
    )\n    case \"four\":\n      numbers_sorted = append(numbers_sorted, \"five\"\
    )\n    case \"five\":\n      numbers_sorted = append(numbers_sorted, \"six\")\n\
    \    case \"six\":\n      numbers_sorted = append(numbers_sorted, \"seven\")\n\
    \    case \"seven\":\n      numbers_sorted = append(numbers_sorted, \"eight\"\
    )\n    case \"eight\":\n      numbers_sorted = append(numbers_sorted, \"nine\"\
    )\n    case \"nine\":\n      numbers_sorted = append(numbers_sorted, \"zero\"\
    )\n    default:\n      break\n    }\n  }\n  return strings.Join(numbers_sorted,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpv5eeu1e9.swift:8:31: error: no exact matches in call to instance\
    \ method 'split'\n  var numbers_split = numbers.split(\" \")\n               \
    \               ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n/tmp/tmpv5eeu1e9.swift:9:37: error:\
    \ cannot find 'len' in scope\n  numbers_split = numbers_split[1...len(numbers_split)]\n\
    \                                    ^~~\n/tmp/tmpv5eeu1e9.swift:38:10: error:\
    \ cannot find 'strings' in scope\n  return strings.Join(numbers_sorted, \" \"\
    )\n         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numberList =\
    \ numbers.split(\" \").map{Int($0)!}\n    numberList.Sort(<)\n    return \" \"\
    .join(numberList)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpiulq93s_.swift:8:36: error: missing argument label 'separator:'\
    \ in call\n    var numberList = numbers.split(\" \").map{Int($0)!}\n         \
    \                          ^\n                                   separator: \n\
    /tmp/tmpiulq93s_.swift:10:16: error: value of type 'String' has no member 'join'\n\
    \    return \" \".join(numberList)\n           ~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\treturn strings.Join(strings.Split(numbers,\
    \ \" \")[1...], \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2ox4g11m.swift:8:9: error: cannot find 'strings' in scope\n   \
    \     return strings.Join(strings.Split(numbers, \" \")[1...], \" \")\n      \
    \         ^~~~~~~\n/tmp/tmp2ox4g11m.swift:8:22: error: cannot find 'strings' in\
    \ scope\n        return strings.Join(strings.Split(numbers, \" \")[1...], \" \"\
    )\n                            ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tvar list = strings.Split(numbers,\
    \ \" \")\n\tvar sorted = []string{}\n\tfor _, number := range list {\n\t\tsorted\
    \ = append(sorted, number)\n\t}\n\tsort.Strings(sorted)\n\tvar sorted = strings.Join(sorted,\
    \ \" \")\n\treturn sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjgklf8ft.swift:9:17: error: consecutive statements on a line must\
    \ be separated by ';'\n        var sorted = []string{}\n                     \
    \  ^\n                       ;\n/tmp/tmpjgklf8ft.swift:10:7: error: expected 'in'\
    \ after for-each pattern\n        for _, number := range list {\n            \
    \ ^\n/tmp/tmpjgklf8ft.swift:10:7: error: expected Sequence expression for for-each\
    \ loop\n        for _, number := range list {\n             ^\n/tmp/tmpjgklf8ft.swift:8:13:\
    \ error: cannot find 'strings' in scope\n        var list = strings.Split(numbers,\
    \ \" \")\n                   ^~~~~~~\n/tmp/tmpjgklf8ft.swift:9:15: error: empty\
    \ collection literal requires an explicit type\n        var sorted = []string{}\n\
    \                     ^~\n/tmp/tmpjgklf8ft.swift:9:17: error: cannot find 'string'\
    \ in scope\n        var sorted = []string{}\n                       ^~~~~~\n/tmp/tmpjgklf8ft.swift:14:15:\
    \ error: cannot find 'strings' in scope\n        var sorted = strings.Join(sorted,\
    \ \" \")\n                     ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var s = numbers\n\
    \    var r = \"\"\n    var i = 0\n    var j = 0\n    var cur = \"\"\n    var last\
    \ = \"\"\n    var isdigit = false\n    for ; i < len(s); i++ {\n        if s[i]\
    \ == '-' {\n            isdigit = true\n            last = s[i-1]\n          \
    \  cur = s[i]\n        } else {\n            if isdigit {\n                if\
    \ last == \"-\" {\n                    cur += s[i]\n                } else {\n\
    \                    r += last\n                    cur = s[i]\n             \
    \       last = s[i]\n                }\n            } else {\n               \
    \ r += s[i]\n            }\n            isdigit = false\n        }\n    }\n  \
    \  return r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdkqpmqta.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for ; i < len(s); i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmpdkqpmqta.swift:16:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == '-'\
    \ {\n                   ^~~\n                   \"-\"\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort.Strings(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp730m8vro.swift:8:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbers := strings.Split(numbers, \" \")\n        \
    \   ^\n           ;\n/tmp/tmp730m8vro.swift:8:13: error: expected expression\n\
    \    numbers := strings.Split(numbers, \" \")\n            ^\n/tmp/tmp730m8vro.swift:8:5:\
    \ warning: expression of type 'String' is unused\n    numbers := strings.Split(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmp730m8vro.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tconst digits: String\
    \ = \"zero one two three four five six seven eight nine\".split()\n\tconst words:\
    \ String = \"zero one two three four five six seven eight nine\".split()\n\n\t\
    nums := strings.Fields(numbers)\n\tsort.Strings(nums)\n\n\tvar string: String\n\
    \tfor _, num := range nums {\n\t\tstring = \"%s %s %s\" % (string, words[num],\
    \ digits[num])\n\t}\n\treturn string\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp7x7pqb5u.swift:8:7: error: consecutive statements on a line must\
    \ be separated by ';'\n        const digits: String = \"zero one two three four\
    \ five six seven eight nine\".split()\n             ^\n             ;\n/tmp/tmp7x7pqb5u.swift:8:14:\
    \ error: consecutive statements on a line must be separated by ';'\n        const\
    \ digits: String = \"zero one two three four five six seven eight nine\".split()\n\
    \                    ^\n                    ;\n/tmp/tmp7x7pqb5u.swift:8:14: error:\
    \ expected expression\n        const digits: String = \"zero one two three four\
    \ five six seven eight nine\".split()\n                    ^\n/tmp/tmp7x7pqb5u.swift:15:7:\
    \ error: expected 'in' after for-each pattern\n        for _, num := range nums\
    \ {\n             ^\n/tmp/tmp7x7pqb5u.swift:15:7: error: expected Sequence expression\
    \ for for-each loop\n        for _, num := range nums {\n             ^\n/tmp/tmp7x7pqb5u.swift:8:2:\
    \ error: cannot find 'const' in scope\n        const digits: String = \"zero one\
    \ two three four five six seven eight nine\".split()\n        ^~~~~\n/tmp/tmp7x7pqb5u.swift:8:8:\
    \ error: cannot find 'digits' in scope\n        const digits: String = \"zero\
    \ one two three four five six seven eight nine\".split()\n              ^~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  let list = numbers.components(separatedBy:\
    \ \" \")\n  list.sortInPlace({ $0.localizedStandardCompare($1) == NSComparisonResult.OrderedAscending\
    \ })\n  return list.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppv5x9t4o.swift:8:22: error: value of type 'String' has no member\
    \ 'components'\n  let list = numbers.components(separatedBy: \" \")\n        \
    \     ~~~~~~~ ^~~~~~~~~~\n/tmp/tmppv5x9t4o.swift:9:57: error: cannot find 'NSComparisonResult'\
    \ in scope\n  list.sortInPlace({ $0.localizedStandardCompare($1) == NSComparisonResult.OrderedAscending\
    \ })\n                                                        ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tvar sorted_numbers\
    \ = \"\"\n\tnumbers.replaceOccurrences(of: \"[^0-9]\", with: \"\", options: .regularExpression,\
    \ range: nil)\n\tsorted_numbers = \"\"\n\tfor number in numbers.split(separator:\
    \ \" \") {\n\t\tsorted_numbers += String(Int(number) + 1)\n\t}\n\treturn sorted_numbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgzrk07ut.swift:9:10: error: value of type 'String' has no member\
    \ 'replaceOccurrences'\n        numbers.replaceOccurrences(of: \"[^0-9]\", with:\
    \ \"\", options: .regularExpression, range: nil)\n        ~~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgzrk07ut.swift:9:63: error: cannot infer contextual base in reference\
    \ to member 'regularExpression'\n        numbers.replaceOccurrences(of: \"[^0-9]\"\
    , with: \"\", options: .regularExpression, range: nil)\n                     \
    \                                               ~^~~~~~~~~~~~~~~~~\n/tmp/tmpgzrk07ut.swift:9:89:\
    \ error: 'nil' requires a contextual type\n        numbers.replaceOccurrences(of:\
    \ \"[^0-9]\", with: \"\", options: .regularExpression, range: nil)\n         \
    \                                                                            \
    \          ^\n/tmp/tmpgzrk07ut.swift:12:28: error: value of optional type 'Int?'\
    \ must be unwrapped to a value of type 'Int'\n                sorted_numbers +=\
    \ String(Int(number) + 1)\n                                         ^\n/tmp/tmpgzrk07ut.swift:12:28:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                sorted_numbers += String(Int(number) + 1)\n         \
    \                                ^\n                                         (\
    \           ?? <#default value#>)\n/tmp/tmpgzrk07ut.swift:12:28: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \        sorted_numbers += String(Int(number) + 1)\n                         \
    \                ^\n                                                    !\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    if numbers.isEmpty()\
    \ {\n        return numbers\n    }\n    numbers = strings.TrimSpace(numbers)\n\
    \    if numbers == \"\" {\n        return numbers\n    }\n    if strings.ContainsAny(numbers,\
    \ \"e\") && strings.ContainsAny(numbers, \"E\") {\n        numbers = strings.Replace(numbers,\
    \ \"E\", \"e\", 1)\n    }\n    numbers = strings.Replace(numbers, \"0\", \"one\"\
    , 1)\n    numbers = strings.Replace(numbers, \"1\", \"two\", 1)\n    numbers =\
    \ strings.Replace(numbers, \"2\", \"three\", 1)\n    numbers = strings.Replace(numbers,\
    \ \"3\", \"four\", 1)\n    numbers = strings.Replace(numbers, \"4\", \"five\"\
    , 1)\n    numbers = strings.Replace(numbers, \"5\", \"six\", 1)\n    numbers =\
    \ strings.Replace(numbers, \"6\", \"seven\", 1)\n    numbers = strings.Replace(numbers,\
    \ \"7\", \"eight\", 1)\n    numbers = strings.Replace(numbers, \"8\", \"nine\"\
    , 1)\n    numbers = strings.Replace(numbers, \"9\", \"nine\", 1)\n    return strings.Trim(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp8xm5feu5.swift:8:16: error: cannot call value of non-function type\
    \ 'Bool'\n    if numbers.isEmpty() {\n               ^      ~~\n             \
    \         \n/tmp/tmp8xm5feu5.swift:11:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp8xm5feu5.swift:11:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp8xm5feu5.swift:15:8: error:\
    \ cannot find 'strings' in scope\n    if strings.ContainsAny(numbers, \"e\") &&\
    \ strings.ContainsAny(numbers, \"E\") {\n       ^~~~~~~\n/tmp/tmp8xm5feu5.swift:15:45:\
    \ error: cannot find 'strings' in scope\n    if strings.ContainsAny(numbers, \"\
    e\") && strings.ContainsAny(numbers, \"E\") {\n                              \
    \              ^~~~~~~\n/tmp/tmp8xm5feu5.swift:16:19: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.Replace(numbers, \"E\", \"e\", 1)\n    \
    \              ^~~~~~~\n/tmp/tmp8xm5feu5.swift:16:9: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers, \"\
    E\", \"e\", 1)\n        ^~~~~~~\n/tmp/tmp8xm5feu5.swift:18:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \"0\", \"one\", 1)\n\
    \              ^~~~~~~\n/tmp/tmp8xm5feu5.swift:18:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"0\"\
    , \"one\", 1)\n    ^~~~~~~\n/tmp/tmp8xm5feu5.swift:19:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Replace(numbers, \"1\", \"two\", 1)\n      \
    \        ^~~~~~~\n/tmp/tmp8xm5feu5.swift:19:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"1\"\
    , \"two\", 1)\n    ^~~~~~~\n/tmp/tmp8xm5feu5.swift:20:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Replace(numbers, \"2\", \"three\", 1)\n    \
    \          ^~~~~~~\n/tmp/tmp8xm5feu5.swift:20:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"2\"\
    , \"three\", 1)\n    ^~~~~~~\n/tmp/tmp8xm5feu5.swift:21:15: error: ca"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tvar result String\n\
    \tfor _, v := range strings.Split(numbers, \" \") {\n\t\tvar tmp string\n\t\t\
    switch v {\n\t\tcase \"zero\":\n\t\t\ttmp = \"0\"\n\t\tcase \"one\":\n\t\t\ttmp\
    \ = \"1\"\n\t\tcase \"two\":\n\t\t\ttmp = \"2\"\n\t\tcase \"three\":\n\t\t\ttmp\
    \ = \"3\"\n\t\tcase \"four\":\n\t\t\ttmp = \"4\"\n\t\tcase \"five\":\n\t\t\ttmp\
    \ = \"5\"\n\t\tcase \"six\":\n\t\t\ttmp = \"6\"\n\t\tcase \"seven\":\n\t\t\ttmp\
    \ = \"7\"\n\t\tcase \"eight\":\n\t\t\ttmp = \"8\"\n\t\tcase \"nine\":\n\t\t\t\
    tmp = \"9\"\n\t\tdefault:\n\t\t\tcontinue\n\t\t}\n\t\tresult = append(result,\
    \ tmp)\n\t}\n\tsort.Strings(result)\n\treturn strings.Join(result, \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwlvumrvk.swift:8:13: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n        var result String\n\
    \                   ^\n/tmp/tmpwlvumrvk.swift:8:13: note: join the identifiers\
    \ together\n        var result String\n            ~~~~~~~^~~~~~\n           \
    \ resultString\n/tmp/tmpwlvumrvk.swift:9:7: error: expected 'in' after for-each\
    \ pattern\n        for _, v := range strings.Split(numbers, \" \") {\n       \
    \      ^\n/tmp/tmpwlvumrvk.swift:9:7: error: expected Sequence expression for\
    \ for-each loop\n        for _, v := range strings.Split(numbers, \" \") {\n \
    \            ^\n/tmp/tmpwlvumrvk.swift:10:11: error: found an unexpected second\
    \ identifier in variable declaration; is there an accidental break?\n        \
    \        var tmp string\n                        ^\n/tmp/tmpwlvumrvk.swift:10:11:\
    \ note: join the identifiers together\n                var tmp string\n      \
    \              ~~~~^~~~~~\n                    tmpstring\n/tmp/tmpwlvumrvk.swift:10:11:\
    \ note: join the identifiers together with camel-case\n                var tmp\
    \ string\n                    ~~~~^~~~~~\n                    tmpString\n/tmp/tmpwlvumrvk.swift:8:6:\
    \ error: type annotation missing in pattern\n        var result String\n     \
    \       ^\n/tmp/tmpwlvumrvk.swift:38:9: error: cannot find 'strings' in scope\n\
    \        return strings.Join(result, \" \")\n               ^~~~~~~\n/tmp/tmpwlvumrvk.swift:10:7:\
    \ error: type annotation missing in pattern\n                var tmp string\n\
    \                    ^\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tlet list = numbers.split(separator:\
    \ \" \").map { Int(String($0)) }\n\tlist.sort(<)\n\treturn String(list)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1j2tv6l5.swift:9:12: error: no exact matches in reference to operator\
    \ function '<'\n        list.sort(<)\n                  ^\n/tmp/tmp1j2tv6l5.swift:9:12:\
    \ note: found candidate with type '(Int?, Int?) -> Bool'\n        list.sort(<)\n\
    \                  ^\n/tmp/tmp1j2tv6l5.swift:9:12: error: missing argument label\
    \ 'by:' in call\n        list.sort(<)\n                  ^\n                 \
    \ by: \n/tmp/tmp1j2tv6l5.swift:10:9: error: no exact matches in call to initializer\
    \ \n        return String(list)\n               ^\nSwift.String:4:12: note: candidate\
    \ requires that the types 'Int?' and 'Character' be equivalent (requirement specified\
    \ as 'S.Element' == 'Character')\n    public init<S>(_ characters: S) where S\
    \ : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate requires that the types 'String.Element' (aka 'Character') and\
    \ 'Int?' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\nSwift.String:2:12: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:3:23: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    @inlinable public\
    \ init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible\n\
    \                      ^\nSwift.String:6:12: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var nums = numbers.split(\"\
    \ \")\n    let len = nums.count\n    if len == 0 {\n        return numbers\n \
    \   }\n    if len == 1 {\n        return sort_numbers(numbers: \"\")\n    }\n\
    \    // sort all but the last number in the list\n    for idx in 0..<len - 1 {\n\
    \        let tempVal = nums[idx]\n        let tempIdx = idx + 1\n        switch\
    \ tempVal {\n        case \"zero\":\n            if tempIdx < len {\n        \
    \        nums[idx] = nums[tempIdx]\n                nums[tempIdx] = \"zero\"\n\
    \                sort_numbers(numbers: strings.Join(nums, \" \"))\n          \
    \  }\n            break\n        case \"one\":\n            if tempIdx < len {\n\
    \                nums[idx] = nums[tempIdx]\n                nums[tempIdx] = \"\
    one\"\n                sort_numbers(numbers: strings.Join(nums, \" \"))\n    \
    \        }\n            break\n        case \"two\":\n            if tempIdx <\
    \ len {\n                nums[idx] = nums[tempIdx]\n                nums[tempIdx]\
    \ = \"two\"\n                sort_numbers(numbers: strings.Join(nums, \" \"))\n\
    \            }\n            break\n        case \"three\":\n            if tempIdx\
    \ < len {\n                nums[idx] = nums[tempIdx]\n                nums[tempIdx]\
    \ = \"three\"\n                sort_numbers(numbers: strings.Join(nums, \" \"\
    ))\n            }\n            break\n        case \"four\":\n            if tempIdx\
    \ < len {\n                nums[idx] = nums[tempIdx]\n                nums[tempIdx]\
    \ = \"four\"\n                sort_numbers(numbers: strings.Join(nums, \" \"))\n\
    \            }\n            break\n        case \"five\":\n            if tempIdx\
    \ < len {\n                nums[idx] = nums[tempIdx]\n                nums[tempIdx]\
    \ = \"five\"\n                sort_numbers(numbers: strings.Join(nums, \" \"))\n\
    \            }\n            break\n        case \"six\":\n            if tempIdx\
    \ < len {\n                nums[idx] = nums[tempIdx]\n                nums[tempIdx]\
    \ = \"six\"\n                sort_numbers(numbers: strings.Join(nums, \" \"))\n\
    \            }\n            break\n        case \"seven\":\n            if tempIdx\
    \ < len {\n                nums[idx] = nums[tempIdx]\n                nums[tempIdx]\
    \ = \"seven\"\n                sort_numbers(numbers: strings.Join(nums, \" \"\
    ))\n            }\n            break\n        case \"eight\":\n            if\
    \ tempIdx < len {\n                nums[idx] = nums[tempIdx]\n               \
    \ nums[tempIdx] = \"eight\"\n                sort_numbers(numbers: strings.Join(nums,\
    \ \" \"))\n            }\n            break\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp30p2l_r0.swift:104:104: error: expected '}' at end of brace statement\n\
    assert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one\
    \ two three four five six\")\n                                               \
    \                                                        ^\n/tmp/tmp30p2l_r0.swift:17:28:\
    \ note: to match this opening '{'\n    for idx in 0..<len - 1 {\n            \
    \               ^\n/tmp/tmp30p2l_r0.swift:104:104: error: expected '}' at end\
    \ of brace statement\nassert(sort_numbers(numbers: \"six five four three two one\
    \ zero\") == \"zero one two three four five six\")\n                         \
    \                                                                            \
    \  ^\n/tmp/tmp30p2l_r0.swift:7:46: note: to match this opening '{'\nfunc sort_numbers(numbers:\
    \ String) -> String {\n                                             ^\n/tmp/tmp30p2l_r0.swift:8:24:\
    \ error: no exact matches in call to instance method 'split'\n    var nums = numbers.split(\"\
    \ \")\n                       ^\nSwift.Sequence:2:40: note: incorrect labels for\
    \ candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming\
    \ func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tlist = strings.Split(numbers, \" \")\n\tsort.Sort(sort.Reverse(sort.Ints(list)))\n\
    \tsort.Strings(list)\n\treturn strings.Join(list, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzlvc9zcm.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpzlvc9zcm.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpzlvc9zcm.swift:9:2: error:\
    \ cannot find 'list' in scope\n        list = strings.Split(numbers, \" \")\n\
    \        ^~~~\n/tmp/tmpzlvc9zcm.swift:9:9: error: cannot find 'strings' in scope\n\
    \        list = strings.Split(numbers, \" \")\n               ^~~~~~~\n/tmp/tmpzlvc9zcm.swift:10:2:\
    \ error: cannot find 'sort' in scope\n        sort.Sort(sort.Reverse(sort.Ints(list)))\n\
    \        ^~~~\n/tmp/tmpzlvc9zcm.swift:10:12: error: cannot find 'sort' in scope\n\
    \        sort.Sort(sort.Reverse(sort.Ints(list)))\n                  ^~~~\n/tmp/tmpzlvc9zcm.swift:10:25:\
    \ error: cannot find 'sort' in scope\n        sort.Sort(sort.Reverse(sort.Ints(list)))\n\
    \                               ^~~~\n/tmp/tmpzlvc9zcm.swift:10:35: error: cannot\
    \ find 'list' in scope\n        sort.Sort(sort.Reverse(sort.Ints(list)))\n   \
    \                                      ^~~~\n/tmp/tmpzlvc9zcm.swift:11:2: error:\
    \ cannot find 'sort' in scope\n        sort.Strings(list)\n        ^~~~\n/tmp/tmpzlvc9zcm.swift:11:15:\
    \ error: cannot find 'list' in scope\n        sort.Strings(list)\n           \
    \          ^~~~\n/tmp/tmpzlvc9zcm.swift:12:9: error: cannot find 'strings' in\
    \ scope\n        return strings.Join(list, \" \")\n               ^~~~~~~\n/tmp/tmpzlvc9zcm.swift:12:22:\
    \ error: cannot find 'list' in scope\n        return strings.Join(list, \" \"\
    )\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\treturn numbers.strings.sortInPlace()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwl58gd7c.swift:8:17: error: value of type 'String' has no member\
    \ 'strings'\n        return numbers.strings.sortInPlace()\n               ~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    if numbers == \"\" {\n        return \"\"\n    }\n    numbers :=\
    \ strings.Split(numbers, \" \")\n    result := \"\"\n    sorted_numbers := make([]string,\
    \ len(numbers))\n    for i, v := range numbers {\n        sorted_numbers[i], _\
    \ = strconv.Atoi(v)\n    }\n    sort.Strings(sorted_numbers)\n    for _, v :=\
    \ range sorted_numbers {\n        result += strconv.Itoa(v) + \" \"\n    }\n \
    \   result = strings.Trim(result[:len(result)-1], \" \")\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmptisjbd7f.swift:8:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbers := strings.Trim(numbers, \" \")\n         \
    \  ^\n           ;\n/tmp/tmptisjbd7f.swift:8:13: error: expected expression\n\
    \    numbers := strings.Trim(numbers, \" \")\n            ^\n/tmp/tmptisjbd7f.swift:12:12:\
    \ error: consecutive statements on a line must be separated by ';'\n    numbers\
    \ := strings.Split(numbers, \" \")\n           ^\n           ;\n/tmp/tmptisjbd7f.swift:12:13:\
    \ error: expected expression\n    numbers := strings.Split(numbers, \" \")\n \
    \           ^\n/tmp/tmptisjbd7f.swift:15:10: error: expected 'in' after for-each\
    \ pattern\n    for i, v := range numbers {\n         ^\n/tmp/tmptisjbd7f.swift:15:10:\
    \ error: expected Sequence expression for for-each loop\n    for i, v := range\
    \ numbers {\n         ^\n/tmp/tmptisjbd7f.swift:16:26: error: consecutive statements\
    \ on a line must be separated by ';'\n        sorted_numbers[i], _ = strconv.Atoi(v)\n\
    \                         ^\n                         ;\n/tmp/tmptisjbd7f.swift:16:26:\
    \ error: expected expression\n        sorted_numbers[i], _ = strconv.Atoi(v)\n\
    \                         ^\n/tmp/tmptisjbd7f.swift:19:10: error: expected 'in'\
    \ after for-each pattern\n    for _, v := range sorted_numbers {\n         ^\n\
    /tmp/tmptisjbd7f.swift:19:10: error: expected Sequence expression for for-each\
    \ loop\n    for _, v := range sorted_numbers {\n         ^\n/tmp/tmptisjbd7f.swift:8:5:\
    \ warning: expression of type 'String' is unused\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmptisjbd7f.swift:12:5: warning: expression of type\
    \ 'String' is unused\n    numbers := strings.Split(numbers, \" \")\n    ^~~~~~~\n\
    /tmp/tmptisjbd7f.swift:23:12: error: cannot find 'result' in scope\n    return\
    \ result\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tif strings.Count(numbers,\
    \ \" \") == 0 {\n\t\treturn numbers\n\t}\n\n\tvar numbers []string\n\tfor _, num\
    \ := range strings.Split(numbers, \" \") {\n\t\tif strings.HasPrefix(num, \"-\"\
    ) {\n\t\t\tnumbers = append(numbers, num[1:])\n\t\t} else {\n\t\t\tnumbers = append(numbers,\
    \ num)\n\t\t}\n\t}\n\n\tsort.Strings(numbers)\n\treturn strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo7tfc07q.swift:12:13: error: consecutive statements on a line must\
    \ be separated by ';'\n        var numbers []string\n                   ^\n  \
    \                 ;\n/tmp/tmpo7tfc07q.swift:12:16: error: consecutive statements\
    \ on a line must be separated by ';'\n        var numbers []string\n         \
    \             ^\n                      ;\n/tmp/tmpo7tfc07q.swift:13:7: error:\
    \ expected 'in' after for-each pattern\n        for _, num := range strings.Split(numbers,\
    \ \" \") {\n             ^\n/tmp/tmpo7tfc07q.swift:13:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, num := range strings.Split(numbers,\
    \ \" \") {\n             ^\n/tmp/tmpo7tfc07q.swift:15:35: error: expected ','\
    \ separator\n                        numbers = append(numbers, num[1:])\n    \
    \                                                   ^\n                      \
    \                                 ,\n/tmp/tmpo7tfc07q.swift:15:35: error: expected\
    \ expression in list of expressions\n                        numbers = append(numbers,\
    \ num[1:])\n                                                       ^\n/tmp/tmpo7tfc07q.swift:8:5:\
    \ error: cannot find 'strings' in scope\n        if strings.Count(numbers, \"\
    \ \") == 0 {\n           ^~~~~~~\n/tmp/tmpo7tfc07q.swift:12:6: error: type annotation\
    \ missing in pattern\n        var numbers []string\n            ^\n/tmp/tmpo7tfc07q.swift:12:14:\
    \ error: empty collection literal requires an explicit type\n        var numbers\
    \ []string\n                    ^~\n/tmp/tmpo7tfc07q.swift:12:14: warning: expression\
    \ of type '[Any]' is unused\n        var numbers []string\n                  \
    \  ^~\n/tmp/tmpo7tfc07q.swift:12:16: error: cannot find 'string' in scope\n  \
    \      var numbers []string\n                      ^~~~~~\n/tmp/tmpo7tfc07q.swift:22:9:\
    \ error: cannot find 'strings' in scope\n        return strings.Join(numbers,\
    \ \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  return sort_numbers(numbers,\
    \ \"zero\", \"nine\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpnwz2n_da.swift:8:22: error: extra arguments at positions #2, #3\
    \ in call\n  return sort_numbers(numbers, \"zero\", \"nine\")\n              \
    \       ^\n/tmp/tmpnwz2n_da.swift:7:6: note: 'sort_numbers(numbers:)' declared\
    \ here\nfunc sort_numbers(numbers: String) -> String {\n     ^\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(strings.Trim(numbers,\
    \ \" \"), \" \\n\")\n\treturn strings.Join(\n\t\tstrings.Fields(strings.Trim(numbers,\
    \ \" \")), \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp58vl1vpn.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(strings.Trim(numbers, \"\
    \ \"), \" \\n\")\n               ^\n               ;\n/tmp/tmp58vl1vpn.swift:8:10:\
    \ error: expected expression\n        numbers := strings.Trim(strings.Trim(numbers,\
    \ \" \"), \" \\n\")\n                ^\n/tmp/tmp58vl1vpn.swift:8:2: warning: expression\
    \ of type 'String' is unused\n        numbers := strings.Trim(strings.Trim(numbers,\
    \ \" \"), \" \\n\")\n        ^~~~~~~\n/tmp/tmp58vl1vpn.swift:9:9: error: cannot\
    \ find 'strings' in scope\n        return strings.Join(\n               ^~~~~~~\n\
    /tmp/tmp58vl1vpn.swift:10:3: error: cannot find 'strings' in scope\n         \
    \       strings.Fields(strings.Trim(numbers, \" \")), \" \")\n               \
    \ ^~~~~~~\n/tmp/tmp58vl1vpn.swift:10:18: error: cannot find 'strings' in scope\n\
    \                strings.Fields(strings.Trim(numbers, \" \")), \" \")\n      \
    \                         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n  return sort(numbers,\
    \ numbers_comp)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4dqelqf2.swift:8:10: error: cannot find 'sort' in scope\n  return\
    \ sort(numbers, numbers_comp)\n         ^~~~\n/tmp/tmp4dqelqf2.swift:8:24: error:\
    \ cannot find 'numbers_comp' in scope\n  return sort(numbers, numbers_comp)\n\
    \                       ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    switch numbers {\n\
    \    case \"zero\":\n        return \"zero\"\n    case \"one\":\n        return\
    \ \"one\"\n    case \"two\":\n        return \"two\"\n    case \"three\":\n  \
    \      return \"three\"\n    case \"four\":\n        return \"four\"\n    case\
    \ \"five\":\n        return \"five\"\n    case \"six\":\n        return \"six\"\
    \n    case \"seven\":\n        return \"seven\"\n    case \"eight\":\n       \
    \ return \"eight\"\n    case \"nine\":\n        return \"nine\"\n    default:\n\
    \        numbers = strings.Trim(numbers)\n        numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n        numbers = strings.Replace(numbers, \" \", \"- \"\
    , -1)\n        numbers = strings.Replace(numbers, \",\", \" \", -1)\n        numbers\
    \ = strings.Replace(numbers, \"-\", \" \", -1)\n        numbers = strings.Replace(numbers,\
    \ \" \", \"- \", -1)\n        numbers = strings.Replace(numbers, \"%\", \" percent\
    \ \", -1)\n        numbers = strings.Replace(numbers, \"#\", \" number \", -1)\n\
    \        numbers = strings.Replace(numbers, \"$\", \" dollar \", -1)\n       \
    \ numbers = strings.Replace(numbers, \"^\", \" pound \", -1)\n        numbers\
    \ = strings.Replace(numbers, \"&\", \" ampersand \", -1)\n        numbers = strings.Replace(numbers,\
    \ \"*\", \" multiplication \", -1)\n        numbers = strings.Replace(numbers,\
    \ \"=\", \"-\", -1)\n        numbers = strings.Replace(numbers, \" \", \"-\",\
    \ -1)\n        numbers = strings.Replace(numbers, \" \", \"-\", -1)\n        numbers\
    \ = strings.Replace(numbers, \" \", \"-\", -1)\n        numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n        numbers = strings.Replace(numbers, \" \", \"-\",\
    \ -1)\n        numbers = strings.Replace(numbers, \" \", \"-\", -1)\n        numbers\
    \ = strings.Replace(numbers, \" \", \"-\", -1)\n        numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n        numbers = strings.Replace(numbers, \" \", \"-\",\
    \ -1)\n        numbers = strings.Replace(numbers, \" \", \"-\", -1)\n        numbers\
    \ = strings.Replace(numbers, \" \", \"-\", -1)\n        numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n        numbers = strings.Replace(numbers, \" \", \"-\",\
    \ -1)\n        numbers = strings.Replace(numbers, \" \", \"-\", -1)\n        numbers\
    \ = strings.Replace(numbers, \" \", \"-\", -1)\n        numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n        numbers = strings.Replace(numbers, \" \", \"-\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpl87u178c.swift:59:49: error: unterminated string literal\n    \
    \    numbers = strings.Replace(numbers, \" \", \"-\n                         \
    \                       ^\n/tmp/tmpl87u178c.swift:79:104: error: expected '}'\
    \ at end of brace statement\nassert(sort_numbers(numbers: \"six five four three\
    \ two one zero\") == \"zero one two three four five six\")\n                 \
    \                                                                            \
    \          ^\n/tmp/tmpl87u178c.swift:7:46: note: to match this opening '{'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n                                \
    \             ^\n/tmp/tmpl87u178c.swift:30:19: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.Trim(numbers)\n                  ^~~~~~~\n\
    /tmp/tmpl87u178c.swift:30:9: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.Trim(numbers)\n        ^~~~~~~\n/tmp/tmpl87u178c.swift:31:19:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n                  ^~~~~~~\n/tmp/tmpl87u178c.swift:31:9: error:\
    \ cannot assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n        ^~~~~~~\n/tmp/tmpl87u178c.swift:32:19: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \" \", \"\
    - \", -1)\n                  ^~~~~~~\n/tmp/tmpl87u178c.swift:32:9: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \" \", \"- \", -1)\n        ^~~~~~~\n/tmp/tmpl87u178c.swift:33:19: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \",\", \"\
    \ \", -1)\n                  ^~~~~~~\n/tmp/tmpl87u178c.swift:33:9: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \",\", \" \", -1)\n        ^~~~~~~\n/tmp/tmpl87u178c.swift:34:19: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"-\", \"\
    \ \", -1)\n                  ^~~~~~~\n/tmp/tmpl87u178c.swift:34:9: error: cannot\
    \ assign to value: 'numbe"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers_map\
    \ = numbers.components(separatedBy: \" \")\n    let result = numbers_map.sorted().map({\
    \ String($0) })\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpk6crbj37.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let numbers_map = numbers.components(separatedBy: \" \")\n\
    \                      ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers.removeAllWhitespace()\n\
    \    let numberArray = numbers.components(separatedBy: \" \")\n\n    if numberArray.count\
    \ < 2 {\n        return \"\"\n    }\n\n    let numbersSorted: [Int] = [Int(numberArray[0]!)!,\
    \ Int(numberArray[1]!)!]\n\n    return numberArray[numbersSorted.count-1] + \"\
    \ \"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") ==\
    \ \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxu48vfrx.swift:8:13: error: value of type 'String' has no member\
    \ 'removeAllWhitespace'\n    numbers.removeAllWhitespace()\n    ~~~~~~~ ^~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxu48vfrx.swift:9:31: error: value of type 'String' has no member 'components'\n\
    \    let numberArray = numbers.components(separatedBy: \" \")\n              \
    \        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    var numberArr = strings.Split(numbers, \" \")\n    numberArr = strings.Sort(numberArr)\n\
    \    var result = strings.Join(numberArr, \" \")\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmprv1znx4c.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmprv1znx4c.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmprv1znx4c.swift:9:21: error:\
    \ cannot find 'strings' in scope\n    var numberArr = strings.Split(numbers, \"\
    \ \")\n                    ^~~~~~~\n/tmp/tmprv1znx4c.swift:10:17: error: cannot\
    \ find 'strings' in scope\n    numberArr = strings.Sort(numberArr)\n         \
    \       ^~~~~~~\n/tmp/tmprv1znx4c.swift:11:18: error: cannot find 'strings' in\
    \ scope\n    var result = strings.Join(numberArr, \" \")\n                 ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let input = numbers.split(separator:\
    \ \" \")\n    let output = input\n        .map { Int($0)! }\n        .sorted()\n\
    \        .map { \"\\($0)\" }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpr34wdzix.swift:13:12: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return output\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberArray\
    \ = numbers.split(separator: \" \")\n    let sortedArray = numberArray\n     \
    \   .map { Int(String($0)) ?? 0 }\n        .sorted()\n\n    return sortedArray.map\
    \ { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpub2r68kk/tmpub2r68kk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadaa4a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadaa19bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadaa19b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadaa19a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpub2r68kk                        0x000055e656f2c9a5 <unavailable> + 6565

    5    libc.so.6                          0x00002aadaa690460 __libc_start_main +
    245

    6    tmpub2r68kk                        0x000055e656f2c4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return strings.Join([]string{\"\
    zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"\
    eight\", \"nine\"},\n        \" \").Split(\" \").Sort()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmph58innqt.swift:8:27: error: expected ',' separator\n    return\
    \ strings.Join([]string{\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\"},\n                          ^\n   \
    \                       ,\n/tmp/tmph58innqt.swift:8:40: error: consecutive statements\
    \ on a line must be separated by ';'\n    return strings.Join([]string{\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"},\n                                       ^\n                     \
    \                  ;\n/tmp/tmph58innqt.swift:8:40: error: expected expression\n\
    \    return strings.Join([]string{\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"},\n                      \
    \                 ^\n/tmp/tmph58innqt.swift:8:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join([]string{\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"},\n           ^~~~~~~\n\
    /tmp/tmph58innqt.swift:8:27: error: cannot find 'string' in scope\n    return\
    \ strings.Join([]string{\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\"},\n                          ^~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.Trim(strings.Trim(strings.Trim(numbers,\
    \ \" \"), \",\"), \"\\n\")\n    if numbers == \"\" {\n        return \"\"\n  \
    \  }\n    numbers = strings.Trim(strings.Trim(numbers, \" \"), \",\\n\")\n   \
    \ numbers = strings.Split(numbers, \"\\n\")\n    numbers = append(numbers, []string{\"\
    zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"\
    eight\", \"nine\"})\n    sort.Strings(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0zte_227.swift:14:33: error: expected ',' separator\n    numbers\
    \ = append(numbers, []string{\"zero\", \"one\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\", \"seven\", \"eight\", \"nine\"})\n                      \
    \          ^\n                                ,\n/tmp/tmp0zte_227.swift:14:46:\
    \ error: consecutive statements on a line must be separated by ';'\n    numbers\
    \ = append(numbers, []string{\"zero\", \"one\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\", \"seven\", \"eight\", \"nine\"})\n                      \
    \                       ^\n                                             ;\n/tmp/tmp0zte_227.swift:14:46:\
    \ error: expected expression\n    numbers = append(numbers, []string{\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"})\n                                             ^\n/tmp/tmp0zte_227.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Trim(strings.Trim(strings.Trim(numbers,\
    \ \" \"), \",\"), \"\\n\")\n              ^~~~~~~\n/tmp/tmp0zte_227.swift:8:28:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Trim(strings.Trim(strings.Trim(numbers,\
    \ \" \"), \",\"), \"\\n\")\n                           ^~~~~~~\n/tmp/tmp0zte_227.swift:8:41:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Trim(strings.Trim(strings.Trim(numbers,\
    \ \" \"), \",\"), \"\\n\")\n                                        ^~~~~~~\n\
    /tmp/tmp0zte_227.swift:8:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.Trim(strings.Trim(strings.Trim(numbers, \" \"\
    ), \",\"), \"\\n\")\n    ^~~~~~~\n/tmp/tmp0zte_227.swift:12:15: error: cannot\
    \ find 'strings' in scope\n    numbers = strings.Trim(strings.Trim(numbers, \"\
    \ \"), \",\\n\")\n              ^~~~~~~\n/tmp/tmp0zte_227.swift:12:28: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.Trim(strings.Trim(numbers,\
    \ \" \"), \",\\n\")\n                           ^~~~~~~\n/tmp/tmp0zte_227.swift:12:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.Trim(strings.Trim(numbers, \" \"), \",\\n\")\n    ^~~~~~~\n/tmp/tmp0zte_227.swift:13:15:\
    \ error: cannot find 'strings' "
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return strings.Join(\n\
    \        strings.Split(numbers, \" \")[1 : len(strings.Split(numbers, \" \"))\
    \ - 1],\n        \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp89tj0h2y.swift:9:39: error: expected ',' separator\n        strings.Split(numbers,\
    \ \" \")[1 : len(strings.Split(numbers, \" \")) - 1],\n                      \
    \                ^\n                                     ,\n/tmp/tmp89tj0h2y.swift:9:39:\
    \ error: expected expression in list of expressions\n        strings.Split(numbers,\
    \ \" \")[1 : len(strings.Split(numbers, \" \")) - 1],\n                      \
    \                ^\n/tmp/tmp89tj0h2y.swift:8:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(\n           ^~~~~~~\n/tmp/tmp89tj0h2y.swift:9:9:\
    \ error: cannot find 'strings' in scope\n        strings.Split(numbers, \" \"\
    )[1 : len(strings.Split(numbers, \" \")) - 1],\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tswitch numbers {\n\
    \tcase \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"\
    seven\", \"eight\", \"nine\":\n\t\treturn numbers\n\tdefault:\n\t\treturn strings.Join(strings.FieldsFunc(numbers,\
    \ func(r rune) bool { return isDigit(r) }), \" \")\n\t}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpfu7tvdns.swift:12:51: error: expected expression in list of expressions\n\
    \                return strings.Join(strings.FieldsFunc(numbers, func(r rune)\
    \ bool { return isDigit(r) }), \" \")\n                                      \
    \                          ^\n/tmp/tmpfu7tvdns.swift:12:55: error: expected identifier\
    \ in function declaration\n                return strings.Join(strings.FieldsFunc(numbers,\
    \ func(r rune) bool { return isDigit(r) }), \" \")\n                         \
    \                                           ^\n/tmp/tmpfu7tvdns.swift:12:10: error:\
    \ cannot find 'strings' in scope\n                return strings.Join(strings.FieldsFunc(numbers,\
    \ func(r rune) bool { return isDigit(r) }), \" \")\n                       ^~~~~~~\n\
    /tmp/tmpfu7tvdns.swift:12:23: error: cannot find 'strings' in scope\n        \
    \        return strings.Join(strings.FieldsFunc(numbers, func(r rune) bool { return\
    \ isDigit(r) }), \" \")\n                                    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var ints = strings.Split(numbers,\
    \ \" \")\n    ints = sort_numbers_ints(ints)\n    return strings.Join(ints, \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3x3wocvw.swift:8:16: error: cannot find 'strings' in scope\n  \
    \  var ints = strings.Split(numbers, \" \")\n               ^~~~~~~\n/tmp/tmp3x3wocvw.swift:9:12:\
    \ error: cannot find 'sort_numbers_ints' in scope\n    ints = sort_numbers_ints(ints)\n\
    \           ^~~~~~~~~~~~~~~~~\n/tmp/tmp3x3wocvw.swift:10:12: error: cannot find\
    \ 'strings' in scope\n    return strings.Join(ints, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let sortedNumbers\
    \ = numbers.split(separator: \" \").sorted()\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpisym4411/tmpisym4411.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac806b4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac806843b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac806843988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8068427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpisym4411                        0x000056382b2d1882 <unavailable> + 6274

    5    libc.so.6                          0x00002ac806d38460 __libc_start_main +
    245

    6    tmpisym4411                        0x000056382b2d12b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let letters = \"\
    zero one two three four five six seven eight nine\".split(separator: \" \")\n\
    \    var numbers_copy = numbers\n    var numbers_split = [String]()\n    var string\
    \ = \"\"\n    for number in numbers_copy.split(separator: \" \") {\n        if\
    \ number == \"zero\" {\n            numbers_split.append(\"0\")\n        } else\
    \ if number == \"one\" {\n            numbers_split.append(\"1\")\n        } else\
    \ if number == \"two\" {\n            numbers_split.append(\"2\")\n        } else\
    \ if number == \"three\" {\n            numbers_split.append(\"3\")\n        }\
    \ else if number == \"four\" {\n            numbers_split.append(\"4\")\n    \
    \    } else if number == \"five\" {\n            numbers_split.append(\"5\")\n\
    \        } else if number == \"six\" {\n            numbers_split.append(\"6\"\
    )\n        } else if number == \"seven\" {\n            numbers_split.append(\"\
    7\")\n        } else if number == \"eight\" {\n            numbers_split.append(\"\
    8\")\n        } else if number == \"nine\" {\n            numbers_split.append(\"\
    9\")\n        } else {\n            fatalError(\"Not a number: '\\(number)'\"\
    )\n        }\n    }\n    var swapped = true\n    var number = 0\n    var number_string\
    \ = \"\"\n    while swapped {\n        swapped = false\n        for number in\
    \ 0..<letters.count {\n            let index = numbers.index(of: letters[number],\
    \ options: .literal, range: nil)\n            if index != nil {\n            \
    \    number_string = numbers[index]\n                numbers_split.append(number_string)\n\
    \                numbers_split.removeLast()\n                swapped = true\n\
    \            }\n        }\n    }\n    return string.join(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1d5i2ef7.swift:43:33: error: no exact matches in call to instance\
    \ method 'index'\n            let index = numbers.index(of: letters[number], options:\
    \ .literal, range: nil)\n                                ^\n/tmp/tmp1d5i2ef7.swift:43:33:\
    \ note: found candidate with type '(String.Index, Int, String.Index) -> String.Index?'\n\
    \            let index = numbers.index(of: letters[number], options: .literal,\
    \ range: nil)\n                                ^\n/tmp/tmp1d5i2ef7.swift:43:70:\
    \ error: type 'Int' has no member 'literal'\n            let index = numbers.index(of:\
    \ letters[number], options: .literal, range: nil)\n                          \
    \                                          ~^~~~~~~\n/tmp/tmp1d5i2ef7.swift:52:19:\
    \ error: value of type 'String' has no member 'join'\n    return string.join(\"\
    \ \")\n           ~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tvar result [9]string\n\
    \tfor _, item := range strings.Split(numbers, \" \") {\n\t\tnum, _ := strconv.Atoi(item)\n\
    \t\tif num < 0 {\n\t\t\tnum += 100\n\t\t}\n\t\tresult[len(result)-1] = result[len(result)-1]\
    \ + string(num)\n\t\tresult = result[:len(result)-1]\n\t}\n\treturn strings.Join(result,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0_rod6lf.swift:8:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        var result [9]string\n                  ^\n   \
    \               ;\n/tmp/tmp0_rod6lf.swift:8:16: error: consecutive statements\
    \ on a line must be separated by ';'\n        var result [9]string\n         \
    \             ^\n                      ;\n/tmp/tmp0_rod6lf.swift:9:7: error: expected\
    \ 'in' after for-each pattern\n        for _, item := range strings.Split(numbers,\
    \ \" \") {\n             ^\n/tmp/tmp0_rod6lf.swift:9:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, item := range strings.Split(numbers,\
    \ \" \") {\n             ^\n/tmp/tmp0_rod6lf.swift:10:6: error: consecutive statements\
    \ on a line must be separated by ';'\n                num, _ := strconv.Atoi(item)\n\
    \                   ^\n                   ;\n/tmp/tmp0_rod6lf.swift:10:6: error:\
    \ expected expression\n                num, _ := strconv.Atoi(item)\n        \
    \           ^\n/tmp/tmp0_rod6lf.swift:15:19: error: expected expression in list\
    \ of expressions\n                result = result[:len(result)-1]\n          \
    \                      ^\n/tmp/tmp0_rod6lf.swift:8:6: error: type annotation missing\
    \ in pattern\n        var result [9]string\n            ^\n/tmp/tmp0_rod6lf.swift:8:13:\
    \ warning: expression of type '[Int]' is unused\n        var result [9]string\n\
    \                   ^~~\n/tmp/tmp0_rod6lf.swift:8:16: error: cannot find 'string'\
    \ in scope\n        var result [9]string\n                      ^~~~~~\n/tmp/tmp0_rod6lf.swift:17:9:\
    \ error: cannot find 'strings' in scope\n        return strings.Join(result, \"\
    \ \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var result strings.Builder\n\
    \    var nums = strings.Split(numbers, \" \")\n    sort.Sort(func(i, j int) bool\
    \ {\n        return nums[i].Int64() < nums[j].Int64()\n    })\n    for _, num\
    \ := range nums {\n        result.WriteString(num)\n        result.WriteString(\"\
    \ \")\n    }\n    return result.String()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpjsmed06v.swift:8:16: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n    var result strings.Builder\n\
    \               ^\n/tmp/tmpjsmed06v.swift:8:16: note: join the identifiers together\n\
    \    var result strings.Builder\n        ~~~~~~~^~~~~~~\n        resultstrings\n\
    /tmp/tmpjsmed06v.swift:8:16: note: join the identifiers together with camel-case\n\
    \    var result strings.Builder\n        ~~~~~~~^~~~~~~\n        resultStrings\n\
    /tmp/tmpjsmed06v.swift:8:23: error: consecutive statements on a line must be separated\
    \ by ';'\n    var result strings.Builder\n                      ^\n          \
    \            ;\n/tmp/tmpjsmed06v.swift:10:15: error: expected expression in list\
    \ of expressions\n    sort.Sort(func(i, j int) bool {\n              ^\n/tmp/tmpjsmed06v.swift:10:19:\
    \ error: expected identifier in function declaration\n    sort.Sort(func(i, j\
    \ int) bool {\n                  ^\n/tmp/tmpjsmed06v.swift:13:10: error: expected\
    \ 'in' after for-each pattern\n    for _, num := range nums {\n         ^\n/tmp/tmpjsmed06v.swift:13:10:\
    \ error: expected Sequence expression for for-each loop\n    for _, num := range\
    \ nums {\n         ^\n/tmp/tmpjsmed06v.swift:8:9: error: type annotation missing\
    \ in pattern\n    var result strings.Builder\n        ^\n/tmp/tmpjsmed06v.swift:8:24:\
    \ error: reference to member 'Builder' cannot be resolved without a contextual\
    \ type\n    var result strings.Builder\n                      ~^~~~~~~\n/tmp/tmpjsmed06v.swift:9:16:\
    \ error: cannot find 'strings' in scope\n    var nums = strings.Split(numbers,\
    \ \" \")\n               ^~~~~~~\n/tmp/tmpjsmed06v.swift:10:5: error: cannot find\
    \ 'sort' in scope\n    sort.Sort(func(i, j int) bool {\n    ^~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return numbers.replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        .replace(\" \", \"\")\n  \
    \      .replace(\" \", \"\")\n        .replace(\" \", \"\")\n        .replace(\"\
    \ \", \"\")\n        .replace(\" \", \"\")\n        \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp95hopu8h.swift:8:27: error: missing argument label 'with:' in call\n\
    \    return numbers.replace(\" \", \"\")\n                          ^\n      \
    \                          with: \n/tmp/tmp95hopu8h.swift:8:20: error: cannot\
    \ use mutating member on immutable value: 'numbers' is a 'let' constant\n    return\
    \ numbers.replace(\" \", \"\")\n           ~~~~~~~ ^\n/tmp/tmp95hopu8h.swift:9:10:\
    \ error: value of tuple type '()' has no member 'replace'\n        .replace(\"\
    \ \", \"\")\n         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\treturn sort_numbers_internal(numbers,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") ==\
    \ \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwtia0jd4.swift:8:9: error: cannot find 'sort_numbers_internal'\
    \ in scope\n        return sort_numbers_internal(numbers, 0)\n               ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.Trim(numbers,\
    \ \"\\n\")\n\tnumbers = strings.Trim(numbers, \" \")\n\tif numbers == \"zero\"\
    \ {\n\t\treturn \"one\"\n\t}\n\tif numbers == \"one\" {\n\t\treturn \"two\"\n\t\
    }\n\tif numbers == \"two\" {\n\t\treturn \"three\"\n\t}\n\tif numbers == \"three\"\
    \ {\n\t\treturn \"four\"\n\t}\n\tif numbers == \"four\" {\n\t\treturn \"five\"\
    \n\t}\n\tif numbers == \"five\" {\n\t\treturn \"six\"\n\t}\n\tif numbers == \"\
    six\" {\n\t\treturn \"seven\"\n\t}\n\tif numbers == \"seven\" {\n\t\treturn \"\
    eight\"\n\t}\n\tif numbers == \"eight\" {\n\t\treturn \"nine\"\n\t}\n\tif numbers\
    \ == \"nine\" {\n\t\treturn \"zero\"\n\t}\n\treturn \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3wfk8yv3.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.Trim(numbers, \"\\n\")\n                  ^~~~~~~\n/tmp/tmp3wfk8yv3.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.Trim(numbers, \"\\n\")\n        ^~~~~~~\n/tmp/tmp3wfk8yv3.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.Trim(numbers,\
    \ \" \")\n                  ^~~~~~~\n/tmp/tmp3wfk8yv3.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Trim(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var sortedNumbers\
    \ = numbers\n    var sorted = \"\"\n    var currentNumber = 0\n    for currentNumber\
    \ < numbers.count {\n        var previousNumber: Int\n        var previousIndex\
    \ = 0\n        for previousIndex = currentNumber; previousIndex < numbers.count;\
    \ previousIndex++ {\n            if numbers.substring(previousIndex, previousIndex+1)\
    \ == \"zero\" {\n                previousNumber = 0\n            }\n         \
    \   else if numbers.substring(previousIndex, previousIndex+1) == \"one\" {\n \
    \               previousNumber = 1\n            }\n            else if numbers.substring(previousIndex,\
    \ previousIndex+1) == \"two\" {\n                previousNumber = 2\n        \
    \    }\n            else if numbers.substring(previousIndex, previousIndex+1)\
    \ == \"three\" {\n                previousNumber = 3\n            }\n        \
    \    else if numbers.substring(previousIndex, previousIndex+1) == \"four\" {\n\
    \                previousNumber = 4\n            }\n            else if numbers.substring(previousIndex,\
    \ previousIndex+1) == \"five\" {\n                previousNumber = 5\n       \
    \     }\n            else if numbers.substring(previousIndex, previousIndex+1)\
    \ == \"six\" {\n                previousNumber = 6\n            }\n          \
    \  else if numbers.substring(previousIndex, previousIndex+1) == \"seven\" {\n\
    \                previousNumber = 7\n            }\n            else if numbers.substring(previousIndex,\
    \ previousIndex+1) == \"eight\" {\n                previousNumber = 8\n      \
    \      }\n            else if numbers.substring(previousIndex, previousIndex+1)\
    \ == \"nine\" {\n                previousNumber = 9\n            }\n         \
    \   else if numbers.substring(previousIndex, previousIndex+1) == \"ten\" {\n \
    \               previousNumber = 10\n            }\n            else if numbers.substring(previousIndex,\
    \ previousIndex+1) == \"eleven\" {\n                previousNumber = 11\n    \
    \        }\n            else if numbers.substring(previousIndex, previousIndex+1)\
    \ == \"twelve\" {\n                previousNumber = 12\n            }\n      \
    \      else if numbers.substring(previousIndex, previousIndex+1) == \"thirteen\"\
    \ {\n                previousNumber = 13\n            }\n            else if numbers.substring(previousIndex,\
    \ previousIndex+1) == \"fourteen\" {\n                previousNumber = 14\n  \
    \          }\n            else if numbers.substring(previousIndex, previousIndex+1)\
    \ == \"fifteen\" {\n                previousNumber = 15\n            }\n     \
    \       else if numbers.substring(previousIndex, previousIndex+1) == \"sixteen\"\
    \ {\n                previousNumber = 16\n            }\n            else if numbers.substring(previousIndex,\
    \ previousIndex+1) == \"seventeen\" {\n                previousNumber = 17\n \
    \           }\n            else if numbers.substring(previousIndex, previousIndex+1)\
    \ == \"eighteen\" {\n                previousNumber = 18\n            }\n    \
    \        else if numbers.substring(previousIndex, previousIndex+1) == \"nineteen\"\
    \ {\n                previousNumber = 19\n            }\n            else if numbers.substring(previousIndex,\
    \ previousIndex+1) == \"twenty\" {\n                previousNumber = 20\n    \
    \        }\n            else \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_wclqzb9.swift:11:23: error: expected 'in' after for-each pattern\n\
    \    for currentNumber < numbers.count {\n                      ^\n/tmp/tmp_wclqzb9.swift:11:23:\
    \ error: unary operator cannot be separated from its operand\n    for currentNumber\
    \ < numbers.count {\n                      ^~\n                       \n/tmp/tmp_wclqzb9.swift:14:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for previousIndex\
    \ = currentNumber; previousIndex < numbers.count; previousIndex++ {\n        ^\
    \   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_wclqzb9.swift:78:17: error: expected '{' or 'if' after 'else'\n     \
    \       else \n                ^\n/tmp/tmp_wclqzb9.swift:98:104: error: expected\
    \ '}' at end of brace statement\nassert(sort_numbers(numbers: \"six five four\
    \ three two one zero\") == \"zero one two three four five six\")\n           \
    \                                                                            \
    \                ^\n/tmp/tmp_wclqzb9.swift:11:39: note: to match this opening\
    \ '{'\n    for currentNumber < numbers.count {\n                             \
    \         ^\n/tmp/tmp_wclqzb9.swift:98:104: error: expected '}' at end of brace\
    \ statement\nassert(sort_numbers(numbers: \"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\n                                 \
    \                                                                      ^\n/tmp/tmp_wclqzb9.swift:7:46:\
    \ note: to match this opening '{'\nfunc sort_numbers(numbers: String) -> String\
    \ {\n                                             ^\n/tmp/tmp_wclqzb9.swift:11:23:\
    \ error: '<' is not a prefix unary operator\n    for currentNumber < numbers.count\
    \ {\n                      ^\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return sort_numbers(numbers:\
    \ numbers.components(separatedBy: \" \"))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmprx8ohuav.swift:8:42: error: value of type 'String' has no member\
    \ 'components'\n    return sort_numbers(numbers: numbers.components(separatedBy:\
    \ \" \"))\n                                 ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.SliceStable(numbers, func(i,\
    \ j int) bool {\n\t\treturn strings.Compare(numbers[i], numbers[j]) < 0\n\t})\n\
    \treturn strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpieqk29oi.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpieqk29oi.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpieqk29oi.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpieqk29oi.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpieqk29oi.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpieqk29oi.swift:13:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var result = \"\"\
    \n    for number in numbers.split(\" \") {\n        switch number {\n        case\
    \ \"zero\":\n        case \"one\":\n        case \"two\":\n        case \"three\"\
    :\n        case \"four\":\n        case \"five\":\n        case \"six\":\n   \
    \     case \"seven\":\n        case \"eight\":\n        case \"nine\":\n     \
    \       result = result + number\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgxbn2u_x.swift:11:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"zero\":\n        ^~~~~~~~~~~~\n\
    \                     break\n/tmp/tmpgxbn2u_x.swift:12:9: error: 'case' label\
    \ in a 'switch' must have at least one executable statement\n        case \"one\"\
    :\n        ^~~~~~~~~~~\n                    break\n/tmp/tmpgxbn2u_x.swift:13:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"two\":\n        ^~~~~~~~~~~\n                    break\n/tmp/tmpgxbn2u_x.swift:14:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"three\":\n        ^~~~~~~~~~~~~\n                      break\n\
    /tmp/tmpgxbn2u_x.swift:15:9: error: 'case' label in a 'switch' must have at least\
    \ one executable statement\n        case \"four\":\n        ^~~~~~~~~~~~\n   \
    \                  break\n/tmp/tmpgxbn2u_x.swift:16:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"five\"\
    :\n        ^~~~~~~~~~~~\n                     break\n/tmp/tmpgxbn2u_x.swift:17:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"six\":\n        ^~~~~~~~~~~\n                    break\n/tmp/tmpgxbn2u_x.swift:18:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"seven\":\n        ^~~~~~~~~~~~~\n                      break\n\
    /tmp/tmpgxbn2u_x.swift:19:9: error: 'case' label in a 'switch' must have at least\
    \ one executable statement\n        case \"eight\":\n        ^~~~~~~~~~~~~\n \
    \                     break\n/tmp/tmpgxbn2u_x.swift:9:27: error: no exact matches\
    \ in call to instance method 'split'\n    for number in numbers.split(\" \") {\n\
    \                          ^\nSwift.Sequence:2:40: note: incorrect labels for\
    \ candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming\
    \ func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwi"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var output: String\
    \ = \"\"\n    var currentValue: String = \"\"\n    var currentNumber: Int = 9\n\
    \    var currentLetter: Character = \"nine\"\n    for number in numbers.split(separator:\
    \ \" \") {\n        if currentValue != \"\" {\n            output += currentValue\n\
    \        }\n        currentValue = currentValue\n        currentNumber = Int(number[0])\
    \ ?? 9\n        if currentNumber < currentNumber {\n            currentLetter\
    \ = \"one\"\n        } else if currentNumber > currentNumber {\n            currentLetter\
    \ = \"nine\"\n        } else {\n            currentLetter = \"zero\"\n       \
    \ }\n        currentValue = currentLetter + String(currentNumber)\n    }\n   \
    \ if currentValue != \"\" {\n        output += currentValue\n    }\n    return\
    \ output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmprz62335s.swift:11:36: error: cannot convert value of type 'String'\
    \ to specified type 'Character'\n    var currentLetter: Character = \"nine\"\n\
    \                                   ^~~~~~\n/tmp/tmprz62335s.swift:16:22: error:\
    \ assigning a variable to itself\n        currentValue = currentValue\n      \
    \  ~~~~~~~~~~~~ ^ ~~~~~~~~~~~~\n/tmp/tmprz62335s.swift:17:35: error: no exact\
    \ matches in call to subscript \n        currentNumber = Int(number[0]) ?? 9\n\
    \                                  ^\nSwift.Substring:3:12: note: candidate expects\
    \ value of type 'Range<Substring.Index>' (aka 'Range<String.Index>') for parameter\
    \ #1 (got 'Int')\n    public subscript(r: Range<Substring.Index>) -> Substring\
    \ { get }\n           ^\nSwift.Collection:3:23: note: candidate expects value\
    \ of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\n/tmp/tmprz62335s.swift:19:29: error: cannot assign value\
    \ of type 'String' to type 'Character'\n            currentLetter = \"one\"\n\
    \                            ^~~~~\n/tmp/tmprz62335s.swift:21:29: error: cannot\
    \ assign value of type 'String' to type 'Character'\n            currentLetter\
    \ = \"nine\"\n                            ^~~~~~\n/tmp/tmprz62335s.swift:23:29:\
    \ error: cannot assign value of type 'String' to type 'Character'\n          \
    \  currentLetter = \"zero\"\n                            ^~~~~~\n/tmp/tmprz62335s.swift:25:24:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        currentValue = currentLetter + String(currentNumber)\n              \
    \         ^\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return sortNumbers(numbers,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") ==\
    \ \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppj5y_ieu.swift:8:12: error: cannot find 'sortNumbers' in scope\n\
    \    return sortNumbers(numbers, 0)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\twords := strings.Split(numbers,\
    \ \" \")\n\tsort.Sort(sortedWords(words))\n\treturn strings.Join(sortedWords(words),\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp64ezqlno.swift:8:7: error: consecutive statements on a line must\
    \ be separated by ';'\n        words := strings.Split(numbers, \" \")\n      \
    \       ^\n             ;\n/tmp/tmp64ezqlno.swift:8:8: error: expected expression\n\
    \        words := strings.Split(numbers, \" \")\n              ^\n/tmp/tmp64ezqlno.swift:8:2:\
    \ error: cannot find 'words' in scope\n        words := strings.Split(numbers,\
    \ \" \")\n        ^~~~~\n/tmp/tmp64ezqlno.swift:10:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(sortedWords(words), \" \")\n         \
    \      ^~~~~~~\n/tmp/tmp64ezqlno.swift:10:22: error: cannot find 'sortedWords'\
    \ in scope\n        return strings.Join(sortedWords(words), \" \")\n         \
    \                   ^~~~~~~~~~~\n/tmp/tmp64ezqlno.swift:10:34: error: cannot find\
    \ 'words' in scope\n        return strings.Join(sortedWords(words), \" \")\n \
    \                                       ^~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbersList\
    \ = numbers.split(\" \")\n    \n    let arrayOfInt = numbersList.reverse()\n\n\
    \    var sortedString = \"\"\n    var smallestInt = arrayOfInt[0]\n    var largestInt\
    \ = arrayOfInt[0]\n    var numberOfRepeatsInlargest = 0\n    for element in arrayOfInt\
    \ {\n        if element < smallestInt {\n            smallestInt = element\n \
    \           smallestIntPosition = arrayOfInt.index(of: smallestInt)\n        }\n\
    \        if element > largestInt {\n            largestInt = element\n       \
    \     largestIntPosition = arrayOfInt.index(of: largestInt)\n        }\n     \
    \   if element == smallestInt {\n            numberOfRepeatsInlargest += 1\n \
    \       }\n    }\n    \n    var sortedArrayOfInt: [Int] = []\n    for element\
    \ in arrayOfInt {\n        if element == smallestInt {\n            sortedArrayOfInt.append(element)\n\
    \            sortedArrayOfInt.append(smallestInt)\n        }\n    }\n    \n  \
    \  if numberOfRepeatsInlargest > 1 {\n        let indexToInsert = smallestIntPosition\n\
    \        sortedArrayOfInt.insert(sortedArrayOfInt.index(of: sortedArrayOfInt[indexToInsert])\
    \ + 1, smallestInt)\n    }\n    sortedArrayOfInt.sort()\n    \n    sortedString\
    \ = \"\"\n    for element in sortedArrayOfInt {\n        sortedString += String(element)\n\
    \    }\n    return sortedString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpptxi5enp.swift:8:31: error: no exact matches in call to instance\
    \ method 'split'\n    var numbersList = numbers.split(\" \")\n               \
    \               ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n/tmp/tmpptxi5enp.swift:39:29: error:\
    \ cannot find 'smallestIntPosition' in scope\n        let indexToInsert = smallestIntPosition\n\
    \                            ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpptxi5enp.swift:40:32:\
    \ error: missing argument label 'at:' in call\n        sortedArrayOfInt.insert(sortedArrayOfInt.index(of:\
    \ sortedArrayOfInt[indexToInsert]) + 1, smallestInt)\n                       \
    \        ^\n                                                                 \
    \                                at: \n/tmp/tmpptxi5enp.swift:40:50: error: value\
    \ of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped\
    \ to a value of type 'Array<Int>.Index' (aka 'Int')\n        sortedArrayOfInt.insert(sortedArrayOfInt.index(of:\
    \ sortedArrayOfInt[indexToInsert]) + 1, smallestInt)\n                       \
    \                          ^\n/tmp/tmpptxi5enp.swift:40:50: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        sortedArrayOfInt.insert(sortedArrayOfInt.index(of:\
    \ sortedArrayOfInt[indexToInsert]) + 1, smallestInt)\n                       \
    \                          ^\n                                (              \
    \                                             ?? <#default value#>)\n/tmp/tmpptxi5enp.swift:40:50:\
    \ note: force-unwrap using '!' to ab"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \n\tif numbers == \"\" {\n\t\treturn \"\"\n\t}\n\n\tn := len(numbers)\n\n\tvar\
    \ result strings.Builder\n\n\tfor i := 0; i < n; i++ {\n\t\tnums := strings.Split(numbers[i],\
    \ \" \")\n\t\tn := len(nums)\n\t\tif n < 2 {\n\t\t\tcontinue\n\t\t}\n\t\tresult\
    \ := make([]string, 0, n)\n\t\tfor _, str := range nums {\n\t\t\tresult = append(result,\
    \ num)\n\t\t}\n\t\tsort.Sort(strings.Sort(strings.Trim(strings.Join(result, \"\
    \  \"), \" \")))\n\t\tresult := strings.Join(result, \" \")\n\t\tresult.Insert(0,\
    \ \"0\")\n\t\tresult.Insert(0, \" \")\n\t\tif result != numbers {\n\t\t\tresult\
    \ += \"  \"\n\t\t}\n\t\tresult += \" \" + strings.Join(nums, \" \")\n\t}\n\n\t\
    return strings.TrimSpace(result.String())\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1_lk26ki.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmp1_lk26ki.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmp1_lk26ki.swift:14:3:\
    \ error: consecutive statements on a line must be separated by ';'\n        n\
    \ := len(numbers)\n         ^\n         ;\n/tmp/tmp1_lk26ki.swift:14:4: error:\
    \ expected expression\n        n := len(numbers)\n          ^\n/tmp/tmp1_lk26ki.swift:16:13:\
    \ error: found an unexpected second identifier in variable declaration; is there\
    \ an accidental break?\n        var result strings.Builder\n                 \
    \  ^\n/tmp/tmp1_lk26ki.swift:16:13: note: join the identifiers together\n    \
    \    var result strings.Builder\n            ~~~~~~~^~~~~~~\n            resultstrings\n\
    /tmp/tmp1_lk26ki.swift:16:13: note: join the identifiers together with camel-case\n\
    \        var result strings.Builder\n            ~~~~~~~^~~~~~~\n            resultStrings\n\
    /tmp/tmp1_lk26ki.swift:16:20: error: consecutive statements on a line must be\
    \ separated by ';'\n        var result strings.Builder\n                     \
    \     ^\n                          ;\n/tmp/tmp1_lk26ki.swift:18:9: error: expected\
    \ type\n        for i := 0; i < n; i++ {\n               ^\n                <#type#>\n\
    /tmp/tmp1_lk26ki.swift:18:9: error: expected 'in' after for-each pattern\n   \
    \     for i := 0; i < n; i++ {\n               ^\n/tmp/tmp1_lk26ki.swift:18:9:\
    \ error: expected Sequence expression for for-each loop\n        for i := 0; i\
    \ < n; i++ {\n               ^\n/tmp/tmp1_lk26ki.swift:19:7: error: consecutive\
    \ statements on a line must be separated by ';'\n                nums := strings.Split(numbers[i],\
    \ \" \")\n                    ^\n                    ;\n/tmp/tmp1_lk26ki.swift:19:8:\
    \ error: expected expression\n                nums := strings.Split(numbers[i],\
    \ \" \")\n                     ^\n/tmp/tmp1_lk26ki.swift:24:9: error: consecutive\
    \ statements on a line must be separated by ';'\n                resul"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tif strings.Contains(numbers, \" \") || len(numbers) > 8 {\n\t\treturn \"\"\n\
    \t}\n\tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2dwcwyb3.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmp2dwcwyb3.swift:12:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmp2dwcwyb3.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp2dwcwyb3.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp2dwcwyb3.swift:9:5: error:\
    \ cannot find 'strings' in scope\n        if strings.Contains(numbers, \" \")\
    \ || len(numbers) > 8 {\n           ^~~~~~~\n/tmp/tmp2dwcwyb3.swift:9:39: error:\
    \ cannot find 'len' in scope\n        if strings.Contains(numbers, \" \") || len(numbers)\
    \ > 8 {\n                                             ^~~\n/tmp/tmp2dwcwyb3.swift:12:2:\
    \ warning: expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmp2dwcwyb3.swift:14:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.SliceStable(numbers, func(i, j int) bool {\n        return\
    \ numbers[i] < numbers[j]\n    })\n    return strings.Join(numbers, \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpck53g1rt.swift:9:31: error: expected expression in list of expressions\n\
    \    sort.SliceStable(numbers, func(i, j int) bool {\n                       \
    \       ^\n/tmp/tmpck53g1rt.swift:9:35: error: expected identifier in function\
    \ declaration\n    sort.SliceStable(numbers, func(i, j int) bool {\n         \
    \                         ^\n/tmp/tmpck53g1rt.swift:8:19: error: cannot find 'strings'\
    \ in scope\n    var numbers = strings.Split(numbers, \" \")\n                \
    \  ^~~~~~~\n/tmp/tmpck53g1rt.swift:9:5: error: cannot find 'sort' in scope\n \
    \   sort.SliceStable(numbers, func(i, j int) bool {\n    ^~~~\n/tmp/tmpck53g1rt.swift:12:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let sorted = numbers.split(separator:\
    \ \" \").sorted(by: {(first, second) -> Bool in\n        if first == \"\" || second\
    \ == \"\" {\n            return false\n        }\n        if first == \"zero\"\
    \ && second == \"nine\" {\n            return true\n        } else if second ==\
    \ \"zero\" && first == \"nine\" {\n            return true\n        }\n      \
    \  let firstInt = Int(first)\n        let secondInt = Int(second)\n        if\
    \ firstInt > secondInt {\n            return true\n        }\n        if firstInt\
    \ < secondInt {\n            return false\n        }\n        return false\n \
    \   })\n    return String(sorted)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxu1zanbm.swift:19:12: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if firstInt > secondInt {\n \
    \          ^\n/tmp/tmpxu1zanbm.swift:19:12: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n        if firstInt > secondInt\
    \ {\n           ^\n                    ?? <#default value#>\n/tmp/tmpxu1zanbm.swift:19:12:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if firstInt > secondInt {\n           ^\n                   !\n\
    /tmp/tmpxu1zanbm.swift:19:23: error: value of optional type 'Int?' must be unwrapped\
    \ to a value of type 'Int'\n        if firstInt > secondInt {\n              \
    \        ^\n/tmp/tmpxu1zanbm.swift:19:23: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n        if firstInt > secondInt\
    \ {\n                      ^\n                                ?? <#default value#>\n\
    /tmp/tmpxu1zanbm.swift:19:23: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        if firstInt > secondInt {\n  \
    \                    ^\n                               !\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    if numbers == \"\
    \" {\n        return \"\"\n    }\n    var a = strings.Split(numbers, \" \")\n\
    \    sort.Sort(&a)\n    return strings.Join(a, \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxnj8xwte.swift:11:13: error: cannot find 'strings' in scope\n \
    \   var a = strings.Split(numbers, \" \")\n            ^~~~~~~\n/tmp/tmpxnj8xwte.swift:12:5:\
    \ error: cannot find 'sort' in scope\n    sort.Sort(&a)\n    ^~~~\n/tmp/tmpxnj8xwte.swift:13:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(a, \" \")\n \
    \          ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers[len(numbers)-1], \"\")\n\tnumbers\
    \ := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers[0], \"\"\
    )\n\treturn strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmptgl_ab8w.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmptgl_ab8w.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmptgl_ab8w.swift:8:2:\
    \ warning: expression of type 'String' is unused\n        numbers := strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmptgl_ab8w.swift:14:9: error: cannot find 'strings' in\
    \ scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers = strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\n\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpvz8v9rrs.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpvz8v9rrs.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return sort_numbers_core(numbers,\
    \ 0, len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpt562yn22.swift:8:12: error: cannot find 'sort_numbers_core' in\
    \ scope\n    return sort_numbers_core(numbers, 0, len(numbers))\n           ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpt562yn22.swift:8:42: error: cannot find 'len' in scope\n    return sort_numbers_core(numbers,\
    \ 0, len(numbers))\n                                         ^~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers_arr\
    \ = numbers.split(separator: \" \")\n    let numbers_count = numbers_arr.count\n\
    \    \n    if numbers_count > 9 {\n        return \"Error: too many numbers\"\n\
    \    }\n    \n    if numbers_count < 2 {\n        return \"Error: not enough numbers\"\
    \n    }\n    \n    var numbers_sorted = \"\"\n    \n    for i in 0..<numbers_count\
    \ {\n        let number = Int(numbers_arr[i]!)\n        \n        if number <\
    \ 10 && numbers_sorted != \"\" {\n            numbers_sorted += \" \"\n      \
    \  }\n        \n        numbers_sorted += String(number)\n    }\n    \n    return\
    \ numbers_sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp23pks11b.swift:22:40: error: cannot force unwrap value of non-optional\
    \ type 'String.SubSequence' (aka 'Substring')\n        let number = Int(numbers_arr[i]!)\n\
    \                         ~~~~~~~~~~~~~~^\n                                  \
    \     \n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\treturn numbers[strings.Index(numbers,\
    \ \"space\") + 1:]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp78hsu0ze.swift:8:52: error: expected ',' separator\n        return\
    \ numbers[strings.Index(numbers, \"space\") + 1:]\n                          \
    \                                ^\n                                         \
    \                 ,\n/tmp/tmp78hsu0ze.swift:8:52: error: expected expression in\
    \ list of expressions\n        return numbers[strings.Index(numbers, \"space\"\
    ) + 1:]\n                                                          ^\n/tmp/tmp78hsu0ze.swift:8:17:\
    \ error: cannot find 'strings' in scope\n        return numbers[strings.Index(numbers,\
    \ \"space\") + 1:]\n                       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var result = \"\"\
    \n    for number in numbers.split(\" \") {\n        switch number {\n        case\
    \ \"zero\":\n        case \"one\":\n        case \"two\":\n        case \"three\"\
    :\n        case \"four\":\n        case \"five\":\n        case \"six\":\n   \
    \     case \"seven\":\n        case \"eight\":\n        case \"nine\":\n     \
    \       result += \" \" + number\n        }\n    }\n    if result.isEmpty {\n\
    \        result = \"zero one two three four five six seven eight nine\"\n    }\n\
    \    return result.trimmingCharacters(in: .whitespacesAndNewlines)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpw5k__bkn.swift:11:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"zero\":\n        ^~~~~~~~~~~~\n\
    \                     break\n/tmp/tmpw5k__bkn.swift:12:9: error: 'case' label\
    \ in a 'switch' must have at least one executable statement\n        case \"one\"\
    :\n        ^~~~~~~~~~~\n                    break\n/tmp/tmpw5k__bkn.swift:13:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"two\":\n        ^~~~~~~~~~~\n                    break\n/tmp/tmpw5k__bkn.swift:14:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"three\":\n        ^~~~~~~~~~~~~\n                      break\n\
    /tmp/tmpw5k__bkn.swift:15:9: error: 'case' label in a 'switch' must have at least\
    \ one executable statement\n        case \"four\":\n        ^~~~~~~~~~~~\n   \
    \                  break\n/tmp/tmpw5k__bkn.swift:16:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"five\"\
    :\n        ^~~~~~~~~~~~\n                     break\n/tmp/tmpw5k__bkn.swift:17:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"six\":\n        ^~~~~~~~~~~\n                    break\n/tmp/tmpw5k__bkn.swift:18:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"seven\":\n        ^~~~~~~~~~~~~\n                      break\n\
    /tmp/tmpw5k__bkn.swift:19:9: error: 'case' label in a 'switch' must have at least\
    \ one executable statement\n        case \"eight\":\n        ^~~~~~~~~~~~~\n \
    \                     break\n/tmp/tmpw5k__bkn.swift:9:27: error: no exact matches\
    \ in call to instance method 'split'\n    for number in numbers.split(\" \") {\n\
    \                          ^\nSwift.Sequence:2:40: note: incorrect labels for\
    \ candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming\
    \ func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwi"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return strings.Map(func(num\
    \ int) string {\n        return string(num)\n    }).Sort(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2xcl0vyj.swift:8:24: error: expected expression in list of expressions\n\
    \    return strings.Map(func(num int) string {\n                       ^\n/tmp/tmp2xcl0vyj.swift:8:28:\
    \ error: expected identifier in function declaration\n    return strings.Map(func(num\
    \ int) string {\n                           ^\n/tmp/tmp2xcl0vyj.swift:8:12: error:\
    \ cannot find 'strings' in scope\n    return strings.Map(func(num int) string\
    \ {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    if nums.count == 0 {\n        return \"\"\n    }\n\n    let sortedNumbers\
    \ = nums\n        .map { Int($0) }\n        .sorted()\n        .map { String($0)\
    \ }\n    return sortedNumbers\n        .joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxkuu1my2.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tvar i int\n\tvar numbers []string\n\tfor _, num := range strings.Split(numbers,\
    \ \" \") {\n\t\tif num == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\ti, err = strconv.Atoi(num)\n\
    \t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tnumbers = append(numbers, strconv.Itoa(i))\n\
    \t}\n\tsort.Sort(ByNumber(numbers))\n\treturn strings.Join(numbers, \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7vtbllns.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmp7vtbllns.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmp7vtbllns.swift:9:8:\
    \ error: found an unexpected second identifier in variable declaration; is there\
    \ an accidental break?\n        var i int\n              ^\n/tmp/tmp7vtbllns.swift:9:8:\
    \ note: join the identifiers together\n        var i int\n            ~~^~~\n\
    \            iint\n/tmp/tmp7vtbllns.swift:9:8: note: join the identifiers together\
    \ with camel-case\n        var i int\n            ~~^~~\n            iInt\n/tmp/tmp7vtbllns.swift:10:13:\
    \ error: consecutive statements on a line must be separated by ';'\n        var\
    \ numbers []string\n                   ^\n                   ;\n/tmp/tmp7vtbllns.swift:10:16:\
    \ error: consecutive statements on a line must be separated by ';'\n        var\
    \ numbers []string\n                      ^\n                      ;\n/tmp/tmp7vtbllns.swift:11:7:\
    \ error: expected 'in' after for-each pattern\n        for _, num := range strings.Split(numbers,\
    \ \" \") {\n             ^\n/tmp/tmp7vtbllns.swift:11:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, num := range strings.Split(numbers,\
    \ \" \") {\n             ^\n/tmp/tmp7vtbllns.swift:15:4: error: consecutive statements\
    \ on a line must be separated by ';'\n                i, err = strconv.Atoi(num)\n\
    \                 ^\n                 ;\n/tmp/tmp7vtbllns.swift:15:4: error: expected\
    \ expression\n                i, err = strconv.Atoi(num)\n                 ^\n\
    /tmp/tmp7vtbllns.swift:8:2: warning: expression of type 'String' is unused\n \
    \       numbers := strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp7vtbllns.swift:9:6:\
    \ error: type annotation missing in pattern\n        var i int\n            ^\n\
    /tmp/tmp7vtbllns.swift:10:6: error: type annotation missing in pattern\n     \
    \   var numbers []string\n            ^\n/tmp/tmp7vtbllns.swift:10:14: error:\
    \ empty collection lit"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let sortedNumbers\
    \ = numbers.components(separatedBy: \" \").sorted { (n1, n2) -> Bool in\n    \
    \    if let n1 = Double(n1!), let n2 = Double(n2!) {\n            return n1 <\
    \ n2\n        } else {\n            return false\n        }\n    }\n    return\
    \ sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpsjad3zol.swift:8:33: error: value of type 'String' has no member\
    \ 'components'\n    let sortedNumbers = numbers.components(separatedBy: \" \"\
    ).sorted { (n1, n2) -> Bool in\n                        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\treturn fmt.Sprintf(\"\
    %s %s %s\", numbers[0], numbers[1], numbers[2])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp8lczp5yg.swift:8:9: error: cannot find 'fmt' in scope\n       \
    \ return fmt.Sprintf(\"%s %s %s\", numbers[0], numbers[1], numbers[2])\n     \
    \          ^~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return sort_numbers_internal(numbers.split(\"\
    \ \"))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp9izilgae.swift:8:12: error: cannot find 'sort_numbers_internal'\
    \ in scope\n    return sort_numbers_internal(numbers.split(\" \"))\n         \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9izilgae.swift:8:42: error: no exact matches\
    \ in call to instance method 'split'\n    return sort_numbers_internal(numbers.split(\"\
    \ \"))\n                                         ^\n/tmp/tmp9izilgae.swift:8:42:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]'\
    \ (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    return sort_numbers_internal(numbers.split(\"\
    \ \"))\n                                         ^\n/tmp/tmp9izilgae.swift:8:42:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]'\
    \ (aka '(Character, Int, Bool) -> Array<Substring>')\n    return sort_numbers_internal(numbers.split(\"\
    \ \"))\n                                         ^\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sortedNums = nums.sorted(by: >)\n    return sortedNums.reduce(\"\
    \", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmprwu11lib/tmprwu11lib.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1d2f18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1d2c0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1d2c0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1d2c0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprwu11lib                        0x0000555e9df939a2 <unavailable> + 6562

    5    libc.so.6                          0x00002af1d3104460 __libc_start_main +
    245

    6    tmprwu11lib                        0x0000555e9df933d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let mut output =\
    \ numbers.to_string();\n    let mut sorted_numbers = vec![];\n    \n    sorted_numbers.sort_by_key(|a|\
    \ a.parse().unwrap());\n    \n    let mut output_iter = output.char_indices();\n\
    \    \n    let mut numbers_iter = sorted_numbers.char_indices();\n    \n    let\
    \ mut current_char = 0;\n    \n    while let Some(current_char_offset) = numbers_iter.next()\
    \ {\n        if current_char_offset < output_iter.len() {\n            if let\
    \ Some(current_char) = output_iter.get_mut(current_char_offset) {\n          \
    \      *current_char = String::from_utf8(numbers[current_char_offset..]).unwrap();\n\
    \            }\n        }\n    }\n    \n    return output;\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpqxq7qm9e.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut output =\
    \ numbers.to_string();\n            ^\n/tmp/tmpqxq7qm9e.swift:8:13: note: join\
    \ the identifiers together\n    let mut output = numbers.to_string();\n      \
    \  ~~~~^~~~~~\n        mutoutput\n/tmp/tmpqxq7qm9e.swift:8:13: note: join the\
    \ identifiers together with camel-case\n    let mut output = numbers.to_string();\n\
    \        ~~~~^~~~~~\n        mutOutput\n/tmp/tmpqxq7qm9e.swift:9:13: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n    let mut sorted_numbers = vec![];\n            ^\n/tmp/tmpqxq7qm9e.swift:9:13:\
    \ note: join the identifiers together\n    let mut sorted_numbers = vec![];\n\
    \        ~~~~^~~~~~~~~~~~~~\n        mutsorted_numbers\n/tmp/tmpqxq7qm9e.swift:9:13:\
    \ note: join the identifiers together with camel-case\n    let mut sorted_numbers\
    \ = vec![];\n        ~~~~^~~~~~~~~~~~~~\n        mutSorted_numbers\n/tmp/tmpqxq7qm9e.swift:11:36:\
    \ error: expected ',' separator\n    sorted_numbers.sort_by_key(|a| a.parse().unwrap());\n\
    \                                   ^\n                                  ,\n/tmp/tmpqxq7qm9e.swift:13:13:\
    \ error: found an unexpected second identifier in constant declaration; is there\
    \ an accidental break?\n    let mut output_iter = output.char_indices();\n   \
    \         ^\n/tmp/tmpqxq7qm9e.swift:13:13: note: join the identifiers together\n\
    \    let mut output_iter = output.char_indices();\n        ~~~~^~~~~~~~~~~\n \
    \       mutoutput_iter\n/tmp/tmpqxq7qm9e.swift:13:13: note: join the identifiers\
    \ together with camel-case\n    let mut output_iter = output.char_indices();\n\
    \        ~~~~^~~~~~~~~~~\n        mutOutput_iter\n/tmp/tmpqxq7qm9e.swift:15:13:\
    \ error: found an unexpected second identifier in constant declaration; is there\
    \ an accidental break?\n    let mut numbers_iter = sorted_numbers.char_indices();\n\
    \            ^\n/tmp/tmpqxq7qm9e.swift:15:13: note: join the identifiers together\n\
    \    let mut numbers_iter = sorted_numbers.char_indices();\n     "
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numberArr =\
    \ numbers.split(\" \").filter({ !$0.isEmpty}).map({ $0.toInt()! })\n    numberArr\
    \ = numberArr.sort()\n\n    return numbers.split(\" \").filter({ !$0.isEmpty}).map({\
    \ $0.toInt()! }).reduce(\"\", { $0 + \" \" + String($1) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpuzz1x8qx.swift:8:40: error: generic parameter 'T' could not be\
    \ inferred\n    var numberArr = numbers.split(\" \").filter({ !$0.isEmpty}).map({\
    \ $0.toInt()! })\n                                       ^\nSwift.Collection:2:28:\
    \ note: in call to function 'map'\n    @inlinable public func map<T>(_ transform:\
    \ (Self.Element) throws -> T) rethrows -> [T]\n                           ^\n\
    /tmp/tmpuzz1x8qx.swift:8:29: error: no exact matches in call to instance method\
    \ 'split'\n    var numberArr = numbers.split(\" \").filter({ !$0.isEmpty}).map({\
    \ $0.toInt()! })\n                            ^\n/tmp/tmpuzz1x8qx.swift:8:29:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]'\
    \ (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numberArr\
    \ = numbers.split(\" \").filter({ !$0.isEmpty}).map({ $0.toInt()! })\n       \
    \                     ^\n/tmp/tmpuzz1x8qx.swift:8:29: note: found candidate with\
    \ type '(String.Element, Int, Bool) -> [String.SubSequence]' (aka '(Character,\
    \ Int, Bool) -> Array<Substring>')\n    var numberArr = numbers.split(\" \").filter({\
    \ !$0.isEmpty}).map({ $0.toInt()! })\n                            ^\n/tmp/tmpuzz1x8qx.swift:8:72:\
    \ error: reference to member 'toInt' cannot be resolved without a contextual type\n\
    \    var numberArr = numbers.split(\" \").filter({ !$0.isEmpty}).map({ $0.toInt()!\
    \ })\n                                                                       ^\n\
    /tmp/tmpuzz1x8qx.swift:11:20: error: no exact matches in call to instance method\
    \ 'split'\n    return numbers.split(\" \").filter({ !$0.isEmpty}).map({ $0.toInt()!\
    \ }).reduce(\"\", { $0 + \" \" + String($1) })\n                   ^\n/tmp/tmpuzz1x8qx.swift:11:20:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]'\
    \ (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    return numbers.split(\"\
    \ \").filter({ !$0.isEmpty}).map({ $0.toInt()! }).reduce(\"\", { $0 + \" \" +\
    \ String($1) })\n                   ^\n/tmp/tmpuzz1x8qx.swift:11:20: note: found\
    \ candidate with type '(String.Element, Int"
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tlet arr = numbers.characters.split{$0\
    \ == \"-\" || $0 == \" \"}.map(String.init)\n\treturn arr.sorted { $0 < $1 }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa7rzmz56.swift:8:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        let arr = numbers.characters.split{$0 == \"-\"\
    \ || $0 == \" \"}.map(String.init)\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tlet numberArray =\
    \ numbers.split(separator: \" \")\n\tlet numberArraySorted = Array(Set(numberArray))\n\
    \treturn join(numberArraySorted.sorted(), separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgmcfj_yx.swift:10:9: error: cannot find 'join' in scope\n     \
    \   return join(numberArraySorted.sorted(), separator: \" \")\n              \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tlet sortedNumbers\
    \ = numbers.split(\" \").sorted()\n\treturn sortedNumbers.join(\" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpnd8rllwd.swift:8:36: error: missing argument label 'separator:'\
    \ in call\n        let sortedNumbers = numbers.split(\" \").sorted()\n       \
    \                                   ^\n                                      \
    \    separator: \n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tvar strings = strings.Split(\"\
    \ \", -1)\n\tsort.Strings(strings)\n\treturn strings.Join(strings, \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2ybkyp7a.swift:8:16: error: use of local variable 'strings' before\
    \ its declaration\n        var strings = strings.Split(\" \", -1)\n          \
    \            ^\n/tmp/tmp2ybkyp7a.swift:8:6: note: 'strings' declared here\n  \
    \      var strings = strings.Split(\" \", -1)\n            ^\n/tmp/tmp2ybkyp7a.swift:9:2:\
    \ error: cannot find 'sort' in scope\n        sort.Strings(strings)\n        ^~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tlet numberList = numbers.split(\"\
    \ \").map {\n\t\tString($0)\n\t}\n\tlet min = numberList.min()!\n\tlet max = numberList.max()!\n\
    \treturn \"\\(numberList.sorted(by: <))\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplw05coi0.swift:8:27: error: no exact matches in call to instance\
    \ method 'split'\n        let numberList = numbers.split(\" \").map {\n      \
    \                           ^\nSwift.Sequence:2:40: note: incorrect labels for\
    \ candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming\
    \ func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tnumbers.Sort()\n\treturn strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpggalkm1o.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpggalkm1o.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmpggalkm1o.swift:8:2:\
    \ warning: expression of type 'String' is unused\n        numbers := strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpggalkm1o.swift:11:9: error: cannot find 'strings' in\
    \ scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var string_to_return\
    \ = \"\"\n    var num_string = \"\"\n    for _, num := range strings.Split(numbers,\
    \ \" \") {\n        if strings.ToLower(num) != \"zero\" && strings.ToLower(num)\
    \ != \"one\" &&\n            strings.ToLower(num) != \"two\" && strings.ToLower(num)\
    \ != \"three\" &&\n            strings.ToLower(num) != \"four\" && strings.ToLower(num)\
    \ != \"five\" &&\n            strings.ToLower(num) != \"six\" && strings.ToLower(num)\
    \ != \"seven\" &&\n            strings.ToLower(num) != \"eight\" && strings.ToLower(num)\
    \ != \"nine\" {\n            num_string = num_string + \" \" + num\n        }\n\
    \    }\n    string_to_return = num_string\n    sort.Strings(string_to_return)\n\
    \    return string_to_return\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpud96jqad.swift:10:10: error: expected 'in' after for-each pattern\n\
    \    for _, num := range strings.Split(numbers, \" \") {\n         ^\n/tmp/tmpud96jqad.swift:10:10:\
    \ error: expected Sequence expression for for-each loop\n    for _, num := range\
    \ strings.Split(numbers, \" \") {\n         ^\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\treturn strings.Join(strings.Fields(numbers),\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpcr6n93ll.swift:8:9: error: cannot find 'strings' in scope\n   \
    \     return strings.Join(strings.Fields(numbers), \" \")\n               ^~~~~~~\n\
    /tmp/tmpcr6n93ll.swift:8:22: error: cannot find 'strings' in scope\n        return\
    \ strings.Join(strings.Fields(numbers), \" \")\n                            ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tvar numbers_split\
    \ = strings.Split(numbers, \" \")\n\tvar numbers_array = make([]string, len(numbers_split))\n\
    \tfor i := 0; i < len(numbers_split); i++ {\n\t\tnumbers_array[i] = string(numbers_split[i])\n\
    \t}\n\tsort.Sort(sort.Reverse(sort.StringSlice(numbers_array)))\n\tvar result\
    \ = \"\"\n\tfor i := 0; i < len(numbers_array); i++ {\n\t\tresult += numbers_array[i]\n\
    \t\tif i < len(numbers_array)-1 {\n\t\t\tresult += \" \"\n\t\t}\n\t}\n\treturn\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp9ybzbh1a.swift:9:29: error: expected ',' separator\n        var\
    \ numbers_array = make([]string, len(numbers_split))\n                       \
    \            ^\n                                   ,\n/tmp/tmp9ybzbh1a.swift:10:9:\
    \ error: expected type\n        for i := 0; i < len(numbers_split); i++ {\n  \
    \             ^\n                <#type#>\n/tmp/tmp9ybzbh1a.swift:10:9: error:\
    \ expected 'in' after for-each pattern\n        for i := 0; i < len(numbers_split);\
    \ i++ {\n               ^\n/tmp/tmp9ybzbh1a.swift:10:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < len(numbers_split); i++\
    \ {\n               ^\n/tmp/tmp9ybzbh1a.swift:15:9: error: expected type\n   \
    \     for i := 0; i < len(numbers_array); i++ {\n               ^\n          \
    \      <#type#>\n/tmp/tmp9ybzbh1a.swift:15:9: error: expected 'in' after for-each\
    \ pattern\n        for i := 0; i < len(numbers_array); i++ {\n               ^\n\
    /tmp/tmp9ybzbh1a.swift:15:9: error: expected Sequence expression for for-each\
    \ loop\n        for i := 0; i < len(numbers_array); i++ {\n               ^\n\
    /tmp/tmp9ybzbh1a.swift:8:22: error: cannot find 'strings' in scope\n        var\
    \ numbers_split = strings.Split(numbers, \" \")\n                            ^~~~~~~\n\
    /tmp/tmp9ybzbh1a.swift:9:22: error: cannot find 'make' in scope\n        var numbers_array\
    \ = make([]string, len(numbers_split))\n                            ^~~~\n/tmp/tmp9ybzbh1a.swift:9:29:\
    \ error: cannot find 'string' in scope\n        var numbers_array = make([]string,\
    \ len(numbers_split))\n                                   ^~~~~~\n/tmp/tmp9ybzbh1a.swift:9:37:\
    \ error: cannot find 'len' in scope\n        var numbers_array = make([]string,\
    \ len(numbers_split))\n                                           ^~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers.split(\" \"\
    ).sorted(by: greaterThan).join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpapm0rquq.swift:8:32: error: cannot find 'greaterThan' in scope\n\
    \        numbers.split(\" \").sorted(by: greaterThan).join(\" \")\n          \
    \                            ^~~~~~~~~~~\n/tmp/tmpapm0rquq.swift:8:10: error:\
    \ no exact matches in call to instance method 'split'\n        numbers.split(\"\
    \ \").sorted(by: greaterThan).join(\" \")\n                ^\n/tmp/tmpapm0rquq.swift:8:10:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]'\
    \ (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n        numbers.split(\"\
    \ \").sorted(by: greaterThan).join(\" \")\n                ^\n/tmp/tmpapm0rquq.swift:8:10:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]'\
    \ (aka '(Character, Int, Bool) -> Array<Substring>')\n        numbers.split(\"\
    \ \").sorted(by: greaterThan).join(\" \")\n                ^\n/tmp/tmpapm0rquq.swift:8:45:\
    \ error: reference to member 'join' cannot be resolved without a contextual type\n\
    \        numbers.split(\" \").sorted(by: greaterThan).join(\" \")\n          \
    \                                         ^\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    var result strings.Builder\n    numbers := strings.Split(numbers,\
    \ \" \")\n    for _, num := range numbers {\n        num = strings.ToLower(num)\n\
    \        switch num {\n        case \"zero\":\n            result.WriteString(\"\
    0\")\n        case \"one\":\n            result.WriteString(\"1\")\n        case\
    \ \"two\":\n            result.WriteString(\"2\")\n        case \"three\":\n \
    \           result.WriteString(\"3\")\n        case \"four\":\n            result.WriteString(\"\
    4\")\n        case \"five\":\n            result.WriteString(\"5\")\n        case\
    \ \"six\":\n            result.WriteString(\"6\")\n        case \"seven\":\n \
    \           result.WriteString(\"7\")\n        case \"eight\":\n            result.WriteString(\"\
    8\")\n        case \"nine\":\n            result.WriteString(\"9\")\n        default:\n\
    \            result.WriteString(num)\n        }\n        result.WriteString(\"\
    \ \")\n    }\n    return result.String()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpqgzuzh96.swift:9:16: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n    var result strings.Builder\n\
    \               ^\n/tmp/tmpqgzuzh96.swift:9:16: note: join the identifiers together\n\
    \    var result strings.Builder\n        ~~~~~~~^~~~~~~\n        resultstrings\n\
    /tmp/tmpqgzuzh96.swift:9:16: note: join the identifiers together with camel-case\n\
    \    var result strings.Builder\n        ~~~~~~~^~~~~~~\n        resultStrings\n\
    /tmp/tmpqgzuzh96.swift:9:23: error: consecutive statements on a line must be separated\
    \ by ';'\n    var result strings.Builder\n                      ^\n          \
    \            ;\n/tmp/tmpqgzuzh96.swift:10:12: error: consecutive statements on\
    \ a line must be separated by ';'\n    numbers := strings.Split(numbers, \" \"\
    )\n           ^\n           ;\n/tmp/tmpqgzuzh96.swift:10:13: error: expected expression\n\
    \    numbers := strings.Split(numbers, \" \")\n            ^\n/tmp/tmpqgzuzh96.swift:11:10:\
    \ error: expected 'in' after for-each pattern\n    for _, num := range numbers\
    \ {\n         ^\n/tmp/tmpqgzuzh96.swift:11:10: error: expected Sequence expression\
    \ for for-each loop\n    for _, num := range numbers {\n         ^\n/tmp/tmpqgzuzh96.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Trim(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmpqgzuzh96.swift:8:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpqgzuzh96.swift:9:9: error: type annotation missing\
    \ in pattern\n    var result strings.Builder\n        ^\n/tmp/tmpqgzuzh96.swift:9:24:\
    \ error: reference to member 'Builder' cannot be resolved without a contextual\
    \ type\n    var result strings.Builder\n                      ~^~~~~~~\n/tmp/tmpqgzuzh96.swift:10:5:\
    \ warning: expression of type 'String' is unused\n    numbers := strings.Split(numbers,\
    \ \" \")\n    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\treturn map_numbers(numbers)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpk3bqnf25.swift:8:9: error: cannot find 'map_numbers' in scope\n\
    \        return map_numbers(numbers)\n               ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // TODO: Make this\
    \ more generic and accept any string that can be turned into numbers\n    let\
    \ nums = numbers.componentsSeparatedByString(\" \")\n    return nums.sorted().joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpf5q7gsnj.swift:9:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let nums = numbers.componentsSeparatedByString(\"\
    \ \")\n               ~~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    // Write your code\
    \ here.\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpgamt93t7/tmpgamt93t7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a37359c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a37050b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a37050988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a3704f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgamt93t7                        0x0000564e4e2793f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b2a37545460 __libc_start_main +
    245

    6    tmpgamt93t7                        0x0000564e4e278f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    if numbers == \"\
    \" {\n        return \"\"\n    }\n\n    var num_arr = strings.Split(numbers, \"\
    \ \")\n    num_arr.sort()\n    return strings.Join(num_arr, \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpunfsrurp.swift:12:19: error: cannot find 'strings' in scope\n \
    \   var num_arr = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpunfsrurp.swift:14:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(num_arr, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.ToLower(numbers)\n\
    \tvar list [9]string\n\tnumbers = strings.Split(numbers, \" \")\n\tfor _, num\
    \ := range numbers {\n\t\tnum := strings.ToLower(num)\n\t\tidx := strings.Index(num,\
    \ \" \")\n\t\tif idx != -1 {\n\t\t\tlist[strings.Index(num, \" \")] = num[:idx]\n\
    \t\t} else {\n\t\t\tlist[strings.Index(num, \".\")] = num\n\t\t}\n\t}\n\tsort.Strings(list)\n\
    \tvar sorted []string\n\tfor _, str := range list {\n\t\tsorted = append(sorted,\
    \ str)\n\t}\n\treturn strings.Join(sorted, \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1gxhbnte.swift:9:10: error: consecutive statements on a line must\
    \ be separated by ';'\n        var list [9]string\n                ^\n       \
    \         ;\n/tmp/tmp1gxhbnte.swift:9:14: error: consecutive statements on a line\
    \ must be separated by ';'\n        var list [9]string\n                    ^\n\
    \                    ;\n/tmp/tmp1gxhbnte.swift:11:7: error: expected 'in' after\
    \ for-each pattern\n        for _, num := range numbers {\n             ^\n/tmp/tmp1gxhbnte.swift:11:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, num :=\
    \ range numbers {\n             ^\n/tmp/tmp1gxhbnte.swift:12:6: error: consecutive\
    \ statements on a line must be separated by ';'\n                num := strings.ToLower(num)\n\
    \                   ^\n                   ;\n/tmp/tmp1gxhbnte.swift:12:7: error:\
    \ expected expression\n                num := strings.ToLower(num)\n         \
    \           ^\n/tmp/tmp1gxhbnte.swift:15:40: error: expected expression in list\
    \ of expressions\n                        list[strings.Index(num, \" \")] = num[:idx]\n\
    \                                                            ^\n/tmp/tmp1gxhbnte.swift:21:12:\
    \ error: consecutive statements on a line must be separated by ';'\n        var\
    \ sorted []string\n                  ^\n                  ;\n/tmp/tmp1gxhbnte.swift:21:15:\
    \ error: consecutive statements on a line must be separated by ';'\n        var\
    \ sorted []string\n                     ^\n                     ;\n/tmp/tmp1gxhbnte.swift:22:7:\
    \ error: expected 'in' after for-each pattern\n        for _, str := range list\
    \ {\n             ^\n/tmp/tmp1gxhbnte.swift:22:7: error: expected Sequence expression\
    \ for for-each loop\n        for _, str := range list {\n             ^\n/tmp/tmp1gxhbnte.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.ToLower(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp1gxhbnte.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.ToLower(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp1gxhbnte.swift:9:6: error: type annotation missing in\
    \ pattern\n        var "
  stdout: ''
  timestamp: 1660013713
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var nums = numbers.split(separator:\
    \ \" \")\n\n    var stringResult = String()\n    for num in nums {\n        if\
    \ let numStr = Int(num) {\n            if numStr < 10 {\n                if numStr\
    \ == 0 {\n                    stringResult = \"zero \" + stringResult\n      \
    \          } else {\n                    stringResult = \"one \" + stringResult\n\
    \                }\n            } else {\n                if numStr == 1 {\n \
    \                   stringResult = \"two \" + stringResult\n                }\
    \ else {\n                    stringResult = \"three \" + stringResult\n     \
    \           }\n            }\n        } else {\n            stringResult = num\
    \ + \" \" + stringResult\n        }\n    }\n\n    return stringResult\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpvwr2u7a8/tmpvwr2u7a8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e92fc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e92cbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e92cbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e92cba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvwr2u7a8                        0x0000559a1eda1a65 <unavailable> + 6757

    5    libc.so.6                          0x00002b5e931b0460 __libc_start_main +
    245

    6    tmpvwr2u7a8                        0x0000559a1eda15b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var a = numbers.split(\"\
    \ \")\n    var b = a.sort{$0 < $1}\n    return strings.Join(b, \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpagnwv_c1.swift:8:21: error: no exact matches in call to instance\
    \ method 'split'\n    var a = numbers.split(\" \")\n                    ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n/tmp/tmpagnwv_c1.swift:10:12: error: cannot find\
    \ 'strings' in scope\n    return strings.Join(b, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tvar numbers = numbers.Split(\"\
    \ \")\n\tvar sorted = []\n\tfor _, number := range numbers {\n\t\tvar digit =\
    \ Int(\"9\") + Int(number)\n\t\tsorted = append(sorted, String(digit))\n\t}\n\t\
    return strings.Join(sorted, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpykll9fvo.swift:10:7: error: expected 'in' after for-each pattern\n\
    \        for _, number := range numbers {\n             ^\n/tmp/tmpykll9fvo.swift:10:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, number\
    \ := range numbers {\n             ^\n/tmp/tmpykll9fvo.swift:8:24: error: value\
    \ of type 'String' has no member 'Split'\n        var numbers = numbers.Split(\"\
    \ \")\n                      ~~~~~~~ ^~~~~\n/tmp/tmpykll9fvo.swift:9:15: error:\
    \ empty collection literal requires an explicit type\n        var sorted = []\n\
    \                     ^~\n/tmp/tmpykll9fvo.swift:14:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(sorted, \" \")\n               ^~~~~~~\n\
    /tmp/tmpykll9fvo.swift:11:30: error: cannot find 'number' in scope\n         \
    \       var digit = Int(\"9\") + Int(number)\n                               \
    \            ^~~~~~\n/tmp/tmpykll9fvo.swift:11:15: error: value of optional type\
    \ 'Int?' must be unwrapped to a value of type 'Int'\n                var digit\
    \ = Int(\"9\") + Int(number)\n                            ^\n/tmp/tmpykll9fvo.swift:11:15:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                var digit = Int(\"9\") + Int(number)\n              \
    \              ^\n                            (        ?? <#default value#>)\n\
    /tmp/tmpykll9fvo.swift:11:15: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n                var digit = Int(\"9\"\
    ) + Int(number)\n                            ^\n                             \
    \       !\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\treturn strings.Fields(numbers).Sort()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa8z6u187.swift:8:9: error: cannot find 'strings' in scope\n   \
    \     return strings.Fields(numbers).Sort()\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013713
