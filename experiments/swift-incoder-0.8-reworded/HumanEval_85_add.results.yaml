language: swift
name: HumanEval_85_add
results:
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.indices.contains(0) {\n        return\
    \ 0\n    }\n    var even: Int = lst[0]\n    for index in lst.indices {\n     \
    \   if index % 2 == 0 {\n            even += lst[index]\n        }\n    }\n  \
    \  return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpd6e4nutd/tmpd6e4nutd.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b774bdd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b774bac7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b774bac7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b774bac67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6e4nutd                        0x000055f5f921c5ba <unavailable> + 5562

    5    libc.so.6                          0x00002b774bfbc460 __libc_start_main +
    245

    6    tmpd6e4nutd                        0x000055f5f921c229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.isEmpty {\n        return 0\n    }\n\
    \n    var sum = 0\n    var i = 0\n    var lastIdx = 0\n\n    while i < lst.count\
    \ {\n        if i % 2 != 0 {\n            sum += lst[i]\n        }\n\n       \
    \ lastIdx = i\n        i += 1\n    }\n\n    if lastIdx < lst.count {\n       \
    \ sum += lst[lastIdx]\n    }\n\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpwmkc1z6d/tmpwmkc1z6d.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69ef610c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69ef307b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69ef307988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69ef3067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwmkc1z6d                        0x000055cb751d34da <unavailable> + 5338

    5    libc.so.6                          0x00002b69ef7fc460 __libc_start_main +
    245

    6    tmpwmkc1z6d                        0x000055cb751d3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n\tguard lst.count > 0 else {\n\t\tpreconditionFailure(\"\
    Given array is empty.\")\n\t\treturn 0\n\t}\n\n\tlet evenIdxs = lst.filter { $0\
    \ % 2 == 0 }\n\tlet oddIdxs = lst.filter { $0 % 2 != 0 }\n\n\treturn evenIdxs.reduce(0,+)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp_3z8jmm1/tmp_3z8jmm1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f754a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f75198b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f75198988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f751977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_3z8jmm1                        0x00005619eacdd5aa <unavailable> + 5546

    5    libc.so.6                          0x00002b1f7568d460 __libc_start_main +
    245

    6    tmp_3z8jmm1                        0x00005619eacdd219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp3l98jds4.swift:7:12: error: cannot convert return expression of\
    \ type '[Int]' to return type 'Int'\n    return lst\n           ^~~\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    let even = lst.filter{$0 % 2 == 0}\n    let\
    \ odd = lst.filter{$0 % 2 == 1}\n    return (even.count)+(odd.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpajava30c/tmpajava30c.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a71a6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a71766b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a71766988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a717657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajava30c                        0x000055ee941a24ba <unavailable> + 5306

    5    libc.so.6                          0x00002b4a71c5b460 __libc_start_main +
    245

    6    tmpajava30c                        0x000055ee941a2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result : Int = 0\n    \n    for i in lst\
    \ {\n        if i % 2 == 1 {\n            result += i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) ==\
    \ 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6,\
    \ 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpqjnyahwd/tmpqjnyahwd.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86b1b36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86b182db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86b182d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86b182c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqjnyahwd                        0x0000556b94c2e4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b86b1d22460 __libc_start_main +
    245

    6    tmpqjnyahwd                        0x0000556b94c2e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for idx\
    \ in lst.indices {\n        if idx % 2 == 0 {\n            even += lst[idx]\n\
    \        } else {\n            odd += lst[idx]\n        }\n    }\n    return even\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp8s3tqynb/tmp8s3tqynb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43c7442c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43c7139b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43c7139988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43c71387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8s3tqynb                        0x0000559ce76f756a <unavailable> + 5482

    5    libc.so.6                          0x00002b43c762e460 __libc_start_main +
    245

    6    tmp8s3tqynb                        0x0000559ce76f71d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var evenSum = 0\n    for idx in lst.indices\
    \ {\n        if idx % 2 == 0 {\n            evenSum += lst[idx]\n        }\n \
    \   }\n    return evenSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp4mn3ctn5/tmp4mn3ctn5.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a4e49ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a4e195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a4e195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a4e1947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4mn3ctn5                        0x0000557e384f856a <unavailable> + 5482

    5    libc.so.6                          0x00002b4a4e68a460 __libc_start_main +
    245

    6    tmp4mn3ctn5                        0x0000557e384f81d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  var result : Int = 0\n  for var i = 0; i < lst.count;\
    \ i++ {\n    if i % 2 == 0 {\n      result += lst[i]\n    }\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpyj274pie.swift:8:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 0; i < lst.count; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count < 2 {\n        return 0\n    }\n\
    \    let even = lst.filter { (n, _) -> Bool in\n        return n % 2 == 0\n  \
    \  }\n    let odd = lst.filter { (n, _) -> Bool in\n        return n % 2 != 0\n\
    \    }\n    return even.count + odd.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp11b519nw.swift:10:29: error: contextual closure type '(Int) throws\
    \ -> Bool' expects 1 argument, but 2 were used in closure body\n    let even =\
    \ lst.filter { (n, _) -> Bool in\n                            ^\n/tmp/tmp11b519nw.swift:13:28:\
    \ error: contextual closure type '(Int) throws -> Bool' expects 1 argument, but\
    \ 2 were used in closure body\n    let odd = lst.filter { (n, _) -> Bool in\n\
    \                           ^\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var evens: Int = 0\n    for e in lst {\n  \
    \      if e % 2 == 0 {\n            evens += e\n        }\n    }\n    return evens\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpldk7j7fw/tmpldk7j7fw.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab56b909c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab56b600b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab56b600988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab56b5ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpldk7j7fw                        0x00005618bc6274fa <unavailable> + 5370

    5    libc.so.6                          0x00002ab56baf5460 __libc_start_main +
    245

    6    tmpldk7j7fw                        0x00005618bc627169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for i in lst {\n      \
    \  if i % 2 == 0 {\n            result += i\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmps9w2z9j0/tmps9w2z9j0.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24d6ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24d69d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24d69d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24d69d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps9w2z9j0                        0x000055fe5fa144fa <unavailable> + 5370

    5    libc.so.6                          0x00002b24d6ece460 __libc_start_main +
    245

    6    tmps9w2z9j0                        0x000055fe5fa14169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.filter{\n        _ % 2 != 0\n  \
    \  }.sum()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) ==\
    \ 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6,\
    \ 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmprx2ekmnc.swift:8:9: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n        _ % 2 != 0\n        ^\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  if lst.count == 0 {\n    return 0\n  }\n\n  var\
    \ result = 0\n\n  for index in 0..<lst.count {\n    if index % 2 == 0 {\n    \
    \  result += lst[index]\n    }\n  }\n\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmpqrd30yfk/tmpqrd30yfk.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf10154c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf0fe4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf0fe4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf0fe4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqrd30yfk                        0x000055bbdeb8253a <unavailable> + 5434

    5    libc.so.6                          0x00002adf10340460 __libc_start_main +
    245

    6    tmpqrd30yfk                        0x000055bbdeb821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in 0..<lst.count\
    \ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp37i4el6x/tmp37i4el6x.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab80cae3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab80c7dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab80c7da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab80c7d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp37i4el6x                        0x000055ae736d253a <unavailable> + 5434

    5    libc.so.6                          0x00002ab80cccf460 __libc_start_main +
    245

    6    tmp37i4el6x                        0x000055ae736d21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013736
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n\tlet even = lst.filter{$0 % 2 == 0}\n\tlet odd\
    \ = lst.filter{$0 % 2 != 0}\n\treturn even.count + odd.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp47d07syl/tmp47d07syl.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61216e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61213d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61213d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61213d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47d07syl                        0x0000564fb6cbc4ba <unavailable> + 5306

    5    libc.so.6                          0x00002b61218cd460 __libc_start_main +
    245

    6    tmp47d07syl                        0x0000564fb6cbc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmp9g7h_5hf/tmp9g7h_5hf.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e06624c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e0631bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e0631b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e0631a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9g7h_5hf                        0x000056087e19735a <unavailable> + 4954

    5    libc.so.6                          0x00002b3e06810460 __libc_start_main +
    245

    6    tmp9g7h_5hf                        0x000056087e196fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var evenCount = 0\n    for element in lst {\n\
    \        if element % 2 == 0 {\n            evenCount += 1\n        } else {\n\
    \            evenCount += 0\n        }\n    }\n\n    return evenCount\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp8m_jozx9/tmp8m_jozx9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fc60e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fc5dd9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fc5dd9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fc5dd87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8m_jozx9                        0x00005644d2c094fa <unavailable> + 5370

    5    libc.so.6                          0x00002b9fc62ce460 __libc_start_main +
    245

    6    tmp8m_jozx9                        0x00005644d2c09169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for index, _ in enumerate(lst)\
    \ {\n        sum += index % 2 == 0 ? lst[index] : 0\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpp03zfln8.swift:8:14: error: expected 'in' after for-each pattern\n\
    \    for index, _ in enumerate(lst) {\n             ^\n/tmp/tmpp03zfln8.swift:8:14:\
    \ error: expected Sequence expression for for-each loop\n    for index, _ in enumerate(lst)\
    \ {\n             ^\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.filter { $0 % 2 == 1 }.sum() + (lst.filter\
    \ { $0 % 2 == 0 }.sum() ?? 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp387y4o64.swift:7:39: error: value of type '[Int]' has no member\
    \ 'sum'\n    return lst.filter { $0 % 2 == 1 }.sum() + (lst.filter { $0 % 2 ==\
    \ 0 }.sum() ?? 0)\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~\n/tmp/tmp387y4o64.swift:7:75:\
    \ error: value of type '[Int]' has no member 'sum'\n    return lst.filter { $0\
    \ % 2 == 1 }.sum() + (lst.filter { $0 % 2 == 0 }.sum() ?? 0)\n               \
    \                                ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count == 0 {\n        return 0\n   \
    \ }\n    \n    var sum = 0\n    for i in 0..<lst.count {\n        if i % 2 ==\
    \ 0 {\n            sum += lst[i]\n        }\n    }\n    \n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpprtwzluo/tmpprtwzluo.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79d43adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79d40a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79d40a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79d40a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpprtwzluo                        0x000055d300baf53a <unavailable> + 5434

    5    libc.so.6                          0x00002b79d4599460 __libc_start_main +
    245

    6    tmpprtwzluo                        0x000055d300baf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  var res = lst[0]\n  for idx in 1..<lst.count\
    \ {\n    if idx%2 == 0 {\n      res += lst[idx]\n    }\n  }\n  return res\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp7828nkk8/tmp7828nkk8.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bbcd64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bbca5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bbca5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bbca5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7828nkk8                        0x00005562625ef53a <unavailable> + 5434

    5    libc.so.6                          0x00002b9bbcf50460 __libc_start_main +
    245

    6    tmp7828nkk8                        0x00005562625ef1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: Exception
  stderr: 'tmppkgiykil/tmppkgiykil.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b7439dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b74094b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b74094988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b740937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppkgiykil                        0x000056044550737a <unavailable> + 4986

    5    libc.so.6                          0x00002b5b74589460 __libc_start_main +
    245

    6    tmppkgiykil                        0x0000560445506fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for index in 0..<lst.count\
    \ {\n        if index % 2 == 0 {\n            sum += lst[index]\n        }\n \
    \   }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpiz0507lh/tmpiz0507lh.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae46c982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae46c679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae46c679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae46c6787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiz0507lh                        0x00005573403ca53a <unavailable> + 5434

    5    libc.so.6                          0x00002ae46cb6e460 __libc_start_main +
    245

    6    tmpiz0507lh                        0x00005573403ca1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013736
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count < 2 { return 0 }\n    return lst[0]\
    \ + lst[lst.count - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp0nxr_u6y/tmp0nxr_u6y.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18b19a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18b169eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18b169e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18b169d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0nxr_u6y                        0x000055a8262ba3aa <unavailable> + 5034

    5    libc.so.6                          0x00002b18b1b93460 __libc_start_main +
    245

    6    tmp0nxr_u6y                        0x000055a8262ba019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    guard lst.count > 0 else { return 0 }\n   \
    \ \n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    while i < lst.count\
    \ {\n        if i % 2 == 1 {\n            sum += lst[i]\n        }\n        \n\
    \        i += 1\n    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmp52i854ou/tmp52i854ou.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe655d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe652ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe652ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe652cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52i854ou                        0x000055f166f62527 <unavailable> + 5415

    5    libc.so.6                          0x00002abe657c3460 __libc_start_main +
    245

    6    tmp52i854ou                        0x000055f166f620b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: Exception
  stderr: 'tmppkgiykil/tmppkgiykil.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b7439dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b74094b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b74094988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b740937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppkgiykil                        0x000056044550737a <unavailable> + 4986

    5    libc.so.6                          0x00002b5b74589460 __libc_start_main +
    245

    6    tmppkgiykil                        0x0000560445506fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst[0] + lst[1] + lst[2] + lst[3]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d43b8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d43882561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5d43882286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5d4388213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5d43881bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5d43681e83 <unavailable> + 188035

    6    tmpzfcdh5vx                        0x000056321b18d65f <unavailable> + 5727

    7    tmpzfcdh5vx                        0x000056321b18d2dc <unavailable> + 4828

    8    libc.so.6                          0x00002b5d43d77460 __libc_start_main +
    245

    9    tmpzfcdh5vx                        0x000056321b18cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    for i in lst {\n        if i % 2 == 0 {\n \
    \           return i\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmpyrqgoosw/tmpyrqgoosw.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1bf301c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1beff8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1beff8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1beff77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrqgoosw                        0x00005625a809f4fa <unavailable> + 5370

    5    libc.so.6                          0x00002af1bf4ed460 __libc_start_main +
    245

    6    tmpyrqgoosw                        0x00005625a809f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.isEmpty {\n        return 0\n    }\n\
    \n    var evenSum = 0\n    var oddSum = 0\n    for el in lst {\n        evenSum\
    \ = evenSum + el\n        oddSum = oddSum + el\n    }\n\n    if oddSum == 0 {\n\
    \        return evenSum\n    }\n\n    return evenSum + oddSum / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpzbndrrag/tmpzbndrrag.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2571241c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2570f38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2570f38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2570f377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzbndrrag                        0x0000564cda35b54a <unavailable> + 5450

    5    libc.so.6                          0x00002b257142d460 __libc_start_main +
    245

    6    tmpzbndrrag                        0x0000564cda35b1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for index in 0..<lst.count\
    \ {\n        sum += lst[index] % 2 == 0 ? lst[index] : 0\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp7pyzbezn/tmp7pyzbezn.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b23a22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b23719b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b23719988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b237187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7pyzbezn                        0x0000560b999f153a <unavailable> + 5434

    5    libc.so.6                          0x00002b8b23c0e460 __libc_start_main +
    245

    6    tmp7pyzbezn                        0x0000560b999f11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    // Write your code here.\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpcdiguewt/tmpcdiguewt.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad785028c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad784d1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad784d1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad784d1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcdiguewt                        0x00005590d2a8a2fa <unavailable> + 4858

    5    libc.so.6                          0x00002ad785214460 __libc_start_main +
    245

    6    tmpcdiguewt                        0x00005590d2a89f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            result += lst[i]\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpo06ze1yi.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpo06ze1yi.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmpo06ze1yi.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.indices.contains(0) {\n        return\
    \ 0\n    }\n    if lst.indices.contains(lst.count-1) {\n        return 0\n   \
    \ }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmplk81kci0/tmplk81kci0.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8471d86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8471a7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8471a7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8471a7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplk81kci0                        0x000055aef70e949a <unavailable> + 5274

    5    libc.so.6                          0x00002b8471f72460 __libc_start_main +
    245

    6    tmplk81kci0                        0x000055aef70e9109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for n in lst {\n        if\
    \ n % 2 == 0 {\n            sum += n\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpittfft9k/tmpittfft9k.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc86df7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc86aeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc86aee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc86aed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpittfft9k                        0x000055959073a4fa <unavailable> + 5370

    5    libc.so.6                          0x00002acc86fe3460 __libc_start_main +
    245

    6    tmpittfft9k                        0x000055959073a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.isEmpty {\n        return -1\n    }\n\
    \    var result = 0\n    var next = 0\n    for cur in lst {\n        if cur %\
    \ 2 == 0 {\n            result += cur\n        }\n        next = cur + 1\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpzoyrhqq0/tmpzoyrhqq0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cccd88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ccca7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ccca7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ccca7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoyrhqq0                        0x0000556eb514e54a <unavailable> + 5450

    5    libc.so.6                          0x00002b8cccf74460 __libc_start_main +
    245

    6    tmpzoyrhqq0                        0x0000556eb514e1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n\tlet even = 0\n\tvar i = 0\n\tfor item in lst\
    \ {\n\t\tif i % 2 == 0 {\n\t\t\teven += item\n\t\t} else {\n\t\t\tlst[i] = even\n\
    \t\t\ti += 2\n\t\t\teven = item\n\t\t}\n\t}\n\treturn even\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpgphfjmqj.swift:11:9: error: left side of mutating operator isn't\
    \ mutable: 'even' is a 'let' constant\n                        even += item\n\
    \                        ~~~~ ^\n/tmp/tmpgphfjmqj.swift:7:2: note: change 'let'\
    \ to 'var' to make it mutable\n        let even = 0\n        ^~~\n        var\n\
    /tmp/tmpgphfjmqj.swift:13:7: error: cannot assign through subscript: 'lst' is\
    \ a 'let' constant\n                        lst[i] = even\n                  \
    \      ~~~^\n/tmp/tmpgphfjmqj.swift:15:4: error: cannot assign to value: 'even'\
    \ is a 'let' constant\n                        even = item\n                 \
    \       ^~~~\n/tmp/tmpgphfjmqj.swift:7:2: note: change 'let' to 'var' to make\
    \ it mutable\n        let even = 0\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var evenSum = lst[0]\n    for _i in 0..<lst.count\
    \ {\n        if lst.index % 2 == 0 {\n            evenSum = evenSum + lst.index\n\
    \        }\n        lst.index++\n    }\n    return evenSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpv4vi113t.swift:9:22: error: binary operator '%' cannot be applied\
    \ to operands of type '(Int) -> Int' and 'Int'\n        if lst.index % 2 == 0\
    \ {\n           ~~~~~~~~~ ^ ~\n/tmp/tmpv4vi113t.swift:9:22: note: overloads for\
    \ '%' exist with these partially matching parameter lists: (Int, Int)\n      \
    \  if lst.index % 2 == 0 {\n                     ^\n/tmp/tmpv4vi113t.swift:10:31:\
    \ error: binary operator '+' cannot be applied to operands of type 'Int' and '(Int)\
    \ -> Int'\n            evenSum = evenSum + lst.index\n                      ~~~~~~~\
    \ ^ ~~~~~~~~~\n/tmp/tmpv4vi113t.swift:10:31: note: overloads for '+' exist with\
    \ these partially matching parameter lists: (Int, Int)\n            evenSum =\
    \ evenSum + lst.index\n                              ^\n/tmp/tmpv4vi113t.swift:12:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        lst.index++\n\
    \                 ^~\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n\tadder := lst[0]\n\tsum := 0\n\tfor i, v := range\
    \ lst {\n\t\tif i % 2 == 0 {\n\t\t\tsum += v\n\t\t}\n\t}\n\treturn sum + adder\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp7ed2nvaw.swift:7:7: error: consecutive statements on a line must\
    \ be separated by ';'\n        adder := lst[0]\n             ^\n             ;\n\
    /tmp/tmp7ed2nvaw.swift:7:8: error: expected expression\n        adder := lst[0]\n\
    \              ^\n/tmp/tmp7ed2nvaw.swift:9:7: error: expected 'in' after for-each\
    \ pattern\n        for i, v := range lst {\n             ^\n/tmp/tmp7ed2nvaw.swift:9:7:\
    \ error: expected Sequence expression for for-each loop\n        for i, v := range\
    \ lst {\n             ^\n/tmp/tmp7ed2nvaw.swift:7:2: error: cannot find 'adder'\
    \ in scope\n        adder := lst[0]\n        ^~~~~\n/tmp/tmp7ed2nvaw.swift:14:9:\
    \ error: cannot find 'sum' in scope\n        return sum + adder\n            \
    \   ^~~\n/tmp/tmp7ed2nvaw.swift:14:15: error: cannot find 'adder' in scope\n \
    \       return sum + adder\n                     ^~~~~\n/tmp/tmp7ed2nvaw.swift:14:13:\
    \ error: cannot convert return expression of type 'String' to return type 'Int'\n\
    \        return sum + adder\n               ~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var res = lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] % 2 == 0 {\n            res += lst[i]\n        }\n\
    \    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpzwhfegt4.swift:8:12: error: expected type\n    for i := 1; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpzwhfegt4.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmpzwhfegt4.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmp9g7h_5hf/tmp9g7h_5hf.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e06624c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e0631bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e0631b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e0631a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9g7h_5hf                        0x000056087e19735a <unavailable> + 4954

    5    libc.so.6                          0x00002b3e06810460 __libc_start_main +
    245

    6    tmp9g7h_5hf                        0x000056087e196fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result : Int = 0\n    var idx = 0\n   \
    \ for value in lst {\n        if idx % 2 != 0 {\n            result += value\n\
    \        }\n        idx += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmpil4dllq_/tmpil4dllq_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b377736fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3777066b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3777066988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37770657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpil4dllq_                        0x0000556a4c11c5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b377755b460 __libc_start_main +
    245

    6    tmpil4dllq_                        0x0000556a4c11c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n\treturn lst[lst&1]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpo5o70bdq.swift:7:13: error: cannot convert value of type '[Int]'\
    \ to expected argument type 'Int'\n        return lst[lst&1]\n               \
    \    ^\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.reduce(0) { $0 + Int($1) * 2 }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp92t2hw_r/tmp92t2hw_r.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd4a7ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd4a4f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd4a4f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd4a4f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92t2hw_r                        0x0000559c6cd4b4aa <unavailable> + 5290

    5    libc.so.6                          0x00002afd4a9eb460 __libc_start_main +
    245

    6    tmp92t2hw_r                        0x0000559c6cd4b119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    for index in 0..<lst.count {\n        if index\
    \ % 2 == 0 {\n            lst[index] += 1\n        }\n    }\n    return lst[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpkr5sz6oq.swift:9:24: error: left side of mutating operator isn't\
    \ mutable: 'lst' is a 'let' constant\n            lst[index] += 1\n          \
    \  ~~~        ^\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  var sum = 0\n  for _ in lst {\n    if odd { sum\
    \ += _ }\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmprtu110lc.swift:9:8: error: cannot find 'odd' in scope\n    if odd\
    \ { sum += _ }\n       ^~~\n/tmp/tmprtu110lc.swift:9:21: error: '_' can only appear\
    \ in a pattern or on the left side of an assignment\n    if odd { sum += _ }\n\
    \                    ^\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n\tif lst.isEmpty {\n\t\treturn 0\n\t}\n\n\tevenSum\
    \ := 0\n\toddSum := 0\n\n\tfor _, number in lst {\n\t\tif number % 2 == 0 {\n\t\
    \t\tevenSum += number\n\t\t} else {\n\t\t\toddSum += number\n\t\t}\n\t}\n\n\t\
    return evenSum + oddSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmph0gg14ea.swift:11:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        evenSum := 0\n               ^\n              \
    \ ;\n/tmp/tmph0gg14ea.swift:11:10: error: expected expression\n        evenSum\
    \ := 0\n                ^\n/tmp/tmph0gg14ea.swift:14:7: error: expected 'in' after\
    \ for-each pattern\n        for _, number in lst {\n             ^\n/tmp/tmph0gg14ea.swift:14:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, number\
    \ in lst {\n             ^\n/tmp/tmph0gg14ea.swift:11:2: error: cannot find 'evenSum'\
    \ in scope\n        evenSum := 0\n        ^~~~~~~\n/tmp/tmph0gg14ea.swift:22:9:\
    \ error: cannot find 'evenSum' in scope\n        return evenSum + oddSum\n   \
    \            ^~~~~~~\n/tmp/tmph0gg14ea.swift:22:19: error: cannot find 'oddSum'\
    \ in scope\n        return evenSum + oddSum\n                         ^~~~~~\n\
    /tmp/tmph0gg14ea.swift:22:17: error: cannot convert return expression of type\
    \ 'String' to return type 'Int'\n        return evenSum + oddSum\n           \
    \    ~~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst[0] + add(lst[1..<lst.count])\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp12zxwh6i.swift:7:25: error: missing argument label 'lst:' in call\n\
    \    return lst[0] + add(lst[1..<lst.count])\n                        ^\n    \
    \                    lst: \n/tmp/tmp12zxwh6i.swift:7:28: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return\
    \ lst[0] + add(lst[1..<lst.count])\n                           ^\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst == nil || len(lst) <= 0 {\n        return\
    \ \"\"\n    }\n    \n    var evenIndices = [0]\n    for i in 0 ..< lst.count {\n\
    \        if lst[i] % 2 == 0 {\n            evenIndices.append(i)\n        }\n\
    \    }\n    \n    var sum = 0\n    for i in evenIndices.sorted() {\n        sum\
    \ += lst[i]\n    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpczdfz2z4.swift:7:22: error: cannot find 'len' in scope\n    if\
    \ lst == nil || len(lst) <= 0 {\n                     ^~~\n/tmp/tmpczdfz2z4.swift:8:16:\
    \ error: cannot convert return expression of type 'String' to return type 'Int'\n\
    \        return \"\"\n               ^~\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  if lst.count == 0 {\n    return 0\n  }\n  return\
    \ lst[0] + (lst[1]*2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpctpla7pk/tmpctpla7pk.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80f3478c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80f316fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80f316f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80f316e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctpla7pk                        0x000055b25da973aa <unavailable> + 5034

    5    libc.so.6                          0x00002b80f3664460 __libc_start_main +
    245

    6    tmpctpla7pk                        0x000055b25da97019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst[Int](0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp5o4a3100.swift:7:15: error: no exact matches in call to subscript\
    \ \n    return lst[Int](0)\n              ^\n/tmp/tmp5o4a3100.swift:7:15: note:\
    \ found candidate with type '(Int) -> Int'\n    return lst[Int](0)\n         \
    \     ^\n/tmp/tmp5o4a3100.swift:7:15: note: found candidate with type '(Range<Int>)\
    \ -> ArraySlice<Int>'\n    return lst[Int](0)\n              ^\n/tmp/tmp5o4a3100.swift:7:15:\
    \ note: found candidate with type '(Int.Type) -> ArraySlice<Int>'\n    return\
    \ lst[Int](0)\n              ^\n/tmp/tmp5o4a3100.swift:7:15: note: found candidate\
    \ with type '((UnboundedRange_) -> ()) -> ArraySlice<Int>'\n    return lst[Int](0)\n\
    \              ^\n/tmp/tmp5o4a3100.swift:7:15: error: cannot call value of non-function\
    \ type 'Int'\n    return lst[Int](0)\n              ^\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for idx in 0..<lst.count {\n\
    \        if idx % 2 == 1 {\n            sum += lst[idx]\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3yhmrh6g/tmp3yhmrh6g.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba86cdf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba86caebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba86caeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba86caea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yhmrh6g                        0x000055a35d156617 <unavailable> + 5655

    5    libc.so.6                          0x00002ba86cfe0460 __libc_start_main +
    245

    6    tmp3yhmrh6g                        0x000055a35d1561a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count > 0 {\n        let even = lst.filter\
    \ { $0 % 2 == 0 }\n        return even.first!\n    }\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpcdrei50w/tmpcdrei50w.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9836870c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9836567b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9836567988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98365667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcdrei50w                        0x00005605e2b1454a <unavailable> + 5450

    5    libc.so.6                          0x00002b9836a5c460 __libc_start_main +
    245

    6    tmpcdrei50w                        0x00005605e2b141b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var ret = 0\n    for (i in 0..<lst.count) {\n\
    \        ret += lst[i]\n        if ((i + 1) & 1) != 0 {\n            ret += lst[i]\
    \ % 2\n        }\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp2yyr7zow.swift:8:12: error: expected ',' separator\n    for (i\
    \ in 0..<lst.count) {\n           ^\n          ,\n/tmp/tmp2yyr7zow.swift:8:12:\
    \ error: expected pattern\n    for (i in 0..<lst.count) {\n           ^\n/tmp/tmp2yyr7zow.swift:8:30:\
    \ error: expected 'in' after for-each pattern\n    for (i in 0..<lst.count) {\n\
    \                             ^\n/tmp/tmp2yyr7zow.swift:8:30: error: expected\
    \ Sequence expression for for-each loop\n    for (i in 0..<lst.count) {\n    \
    \                         ^\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return sum(lst)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpoabh1hr8.swift:7:12: error: cannot find 'sum' in scope\n    return\
    \ sum(lst)\n           ^~~\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  var sum = 0\n  for i : Int in 0..<lst.count {\n\
    \    if i % 2 == 0 {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp154375da/tmp154375da.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22731ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac227015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac227015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2270147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp154375da                        0x00005622b8b2b53a <unavailable> + 5434

    5    libc.so.6                          0x00002ac22750a460 __libc_start_main +
    245

    6    tmp154375da                        0x00005622b8b2b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp5_yzcwn7/tmp5_yzcwn7.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac62f6c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac62f3c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac62f3c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac62f3bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5_yzcwn7                        0x0000559b57b584fa <unavailable> + 5370

    5    libc.so.6                          0x00002ac62f8b5460 __libc_start_main +
    245

    6    tmp5_yzcwn7                        0x0000559b57b58169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013737
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n\tif lst.isEmpty() { return 0 }\n\tlst.sort(by:\
    \ >)\n\tvar total: Int = 0\n\tfor index in lst.indices {\n\t\tif index % 2 ==\
    \ 0 {\n\t\t\ttotal += lst[index]\n\t\t}\n\t}\n\treturn total\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpqnbzijko.swift:7:9: error: cannot call value of non-function type\
    \ 'Bool'\n        if lst.isEmpty() { return 0 }\n               ^      ~~\n  \
    \                    \n/tmp/tmpqnbzijko.swift:8:6: error: cannot use mutating\
    \ member on immutable value: 'lst' is a 'let' constant\n        lst.sort(by: >)\n\
    \        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.filter {$0 % 2 == 0}.reduce(0) {$0\
    \ + $1}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpfn6029qn/tmpfn6029qn.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afba7effc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afba7bf6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afba7bf6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afba7bf57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfn6029qn                        0x00005578156424ca <unavailable> + 5322

    5    libc.so.6                          0x00002afba80eb460 __libc_start_main +
    245

    6    tmpfn6029qn                        0x0000557815642139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.filter { it % 2 == 1 }.sum()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpqh5ujkh5.swift:7:25: error: cannot find 'it' in scope\n    return\
    \ lst.filter { it % 2 == 1 }.sum()\n                        ^~\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    for index in 0..<lst.count {\n        if index\
    \ % 2 != 0 {\n            lst[index] += lst[index+1]\n        }\n    }\n    return\
    \ lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) ==\
    \ 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6,\
    \ 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpykioihp8.swift:9:24: error: left side of mutating operator isn't\
    \ mutable: 'lst' is a 'let' constant\n            lst[index] += lst[index+1]\n\
    \            ~~~        ^\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in\
    \ lst {\n        if i % 2 == 0 {\n            even += i\n        } else {\n  \
    \          odd += i\n        }\n    }\n    return even * odd + 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmptib6jub9/tmptib6jub9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81e888ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81e8585b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81e8585988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81e85847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptib6jub9                        0x00005560e63684fa <unavailable> + 5370

    5    libc.so.6                          0x00002b81e8a7a460 __libc_start_main +
    245

    6    tmptib6jub9                        0x00005560e6368169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n\tvar sum = 0\n\tfor _, num := range lst {\n\t\t\
    if num % 2 == 0 {\n\t\t\tsum += num\n\t\t}\n\t}\n\treturn sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp7i5fw7l2.swift:8:7: error: expected 'in' after for-each pattern\n\
    \        for _, num := range lst {\n             ^\n/tmp/tmp7i5fw7l2.swift:8:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, num :=\
    \ range lst {\n             ^\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n\tif lst.count <= 1 {\n\t\treturn lst[0]\n\t}\n\
    \tvar sum : Int = 0\n\tlst.enumerated().forEach{ index, value in\n\t\tif index\
    \ % 2 == 0 {\n\t\t\tsum += value\n\t\t}\n\t}\n\treturn sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp8medbhf2/tmp8medbhf2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f49c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f46bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f46bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f46bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8medbhf2                        0x000055a5bbbf95ba <unavailable> + 5562

    5    libc.so.6                          0x00002b39f4bb1460 __libc_start_main +
    245

    6    tmp8medbhf2                        0x000055a5bbbf9229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp_qbods2c/tmp_qbods2c.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b929f388c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b929f07fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b929f07f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b929f07e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qbods2c                        0x0000562ebb3774fa <unavailable> + 5370

    5    libc.so.6                          0x00002b929f574460 __libc_start_main +
    245

    6    tmp_qbods2c                        0x0000562ebb377169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    guard lst.count > 0 else {\n        return\
    \ 0\n    }\n\n    var sum = 0\n\n    for i in 0..<lst.count {\n        if i %\
    \ 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpnq6r1y0v/tmpnq6r1y0v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46ad1bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46aceb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46aceb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46aceb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnq6r1y0v                        0x000055835d4c853a <unavailable> + 5434

    5    libc.so.6                          0x00002b46ad3aa460 __libc_start_main +
    245

    6    tmpnq6r1y0v                        0x000055835d4c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count < 2 {\n        return 0\n    }\n\
    \    var result = 0\n    for idx in lst.indices {\n        result += lst[idx]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpag3y4mq7/tmpag3y4mq7.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf20e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf1ddcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf1ddc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf1ddb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpag3y4mq7                        0x000055803666c52a <unavailable> + 5418

    5    libc.so.6                          0x00002adbf22d1460 __libc_start_main +
    245

    6    tmpag3y4mq7                        0x000055803666c199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for _ in lst {\n        sum\
    \ += _\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp1fdhu1j7.swift:9:16: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n        sum += _\n               ^\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count == 0 {\n        return -1\n  \
    \  }\n\n    if lst.count == 1 {\n        return lst[0]\n    }\n\n    let lastIndex\
    \ = lst.count - 1\n\n    for index in 0..<lastIndex {\n        let evenIndex =\
    \ index * 2\n        if evenIndex < lastIndex {\n            let evenValue = lst[evenIndex]\n\
    \            if evenValue % 2 != 0 {\n                return evenValue\n     \
    \       }\n        }\n    }\n\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmp26jl7l5q/tmp26jl7l5q.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b740fb1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b740f812b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b740f812988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b740f8117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26jl7l5q                        0x000055fed769153a <unavailable> + 5434

    5    libc.so.6                          0x00002b740fd07460 __libc_start_main +
    245

    6    tmp26jl7l5q                        0x000055fed76911a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    for i in  0 ..< lst.count-1 {\n        if lst[i]\
    \ % 2 == 0 {\n            lst[i] += lst[i+1]\n            lst.removeAtIndex(index(i+1))\n\
    \        }\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8benjmv3.swift:9:20: error: left side of mutating operator isn't\
    \ mutable: 'lst' is a 'let' constant\n            lst[i] += lst[i+1]\n       \
    \     ~~~    ^\n/tmp/tmp8benjmv3.swift:10:31: error: cannot find 'index' in scope\n\
    \            lst.removeAtIndex(index(i+1))\n                              ^~~~~\n\
    /tmp/tmp8benjmv3.swift:10:17: error: value of type '[Int]' has no member 'removeAtIndex'\n\
    \            lst.removeAtIndex(index(i+1))\n            ~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n\tif lst.count < 2 {\n\t\treturn 0\n\t}\n\tresult\
    \ = 0\n\tfor i in 0..<lst.count-1 {\n\t\tif i % 2 == 0 {\n\t\t\tresult += lst[i]\n\
    \t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpysble5e3.swift:10:2: error: cannot find 'result' in scope\n   \
    \     result = 0\n        ^~~~~~\n/tmp/tmpysble5e3.swift:13:4: error: cannot find\
    \ 'result' in scope\n                        result += lst[i]\n              \
    \          ^~~~~~\n/tmp/tmpysble5e3.swift:16:9: error: cannot find 'result' in\
    \ scope\n        return result\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = Int()\n    for idx in 0 ..< lst.count\
    \ {\n        if idx % 2 == 0 {\n            result += lst[idx]\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpc83ytp2g/tmpc83ytp2g.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43c84e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43c81dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43c81df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43c81de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc83ytp2g                        0x00005601c978e53a <unavailable> + 5434

    5    libc.so.6                          0x00002b43c86d4460 __libc_start_main +
    245

    6    tmpc83ytp2g                        0x00005601c978e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp5_yzcwn7/tmp5_yzcwn7.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac62f6c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac62f3c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac62f3c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac62f3bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5_yzcwn7                        0x0000559b57b584fa <unavailable> + 5370

    5    libc.so.6                          0x00002ac62f8b5460 __libc_start_main +
    245

    6    tmp5_yzcwn7                        0x0000559b57b58169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013737
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    // O(n) time and O(1) space\n    var sum =\
    \ 0\n    for idx in 0..<lst.count {\n        if idx % 2 == 0 {\n            sum\
    \ += lst[idx]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpm253a9me/tmpm253a9me.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b210bdefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b210bae6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b210bae6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b210bae57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm253a9me                        0x000055c1eecb953a <unavailable> + 5434

    5    libc.so.6                          0x00002b210bfdb460 __libc_start_main +
    245

    6    tmpm253a9me                        0x000055c1eecb91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i:Int  in lst {\n    \
    \    if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp4410gj45/tmp4410gj45.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94e6906c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94e65fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94e65fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94e65fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4410gj45                        0x000055daa1bc54fa <unavailable> + 5370

    5    libc.so.6                          0x00002b94e6af2460 __libc_start_main +
    245

    6    tmp4410gj45                        0x000055daa1bc5169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  var sum = 0\n  for i in\n    0 ..< lst.count\
    \ - 1 { sum += lst[i] % 2 }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmp_uea547q/tmp_uea547q.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35afcc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35af9b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35af9b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35af9b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_uea547q                        0x0000557ec4ea553a <unavailable> + 5434

    5    libc.so.6                          0x00002b35afead460 __libc_start_main +
    245

    6    tmp_uea547q                        0x0000557ec4ea51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp5_yzcwn7/tmp5_yzcwn7.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac62f6c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac62f3c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac62f3c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac62f3bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5_yzcwn7                        0x0000559b57b584fa <unavailable> + 5370

    5    libc.so.6                          0x00002ac62f8b5460 __libc_start_main +
    245

    6    tmp5_yzcwn7                        0x0000559b57b58169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013737
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var evenSum = 0\n    for i in 0..<lst.count\
    \ {\n        if ((lst[i] % 2) == 0) {\n            evenSum += lst[i]\n       \
    \ }\n    }\n    return evenSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpnjqkszyj/tmpnjqkszyj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63482e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6347fdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6347fdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6347fde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnjqkszyj                        0x00005589432b353a <unavailable> + 5434

    5    libc.so.6                          0x00002b63484d4460 __libc_start_main +
    245

    6    tmpnjqkszyj                        0x00005589432b31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    lst[1::2].forEach {\n        if $0 % 2 == 0\
    \ {\n            lst.append($0)\n        }\n    }\n    return lst.last!\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmph_kvgfpz.swift:7:10: error: expected ',' separator\n    lst[1::2].forEach\
    \ {\n         ^\n         ,\n/tmp/tmph_kvgfpz.swift:7:10: error: expected expression\
    \ in list of expressions\n    lst[1::2].forEach {\n         ^\n/tmp/tmph_kvgfpz.swift:7:15:\
    \ error: value of type 'Int' has no member 'forEach'\n    lst[1::2].forEach {\n\
    \    ~~~~~~~~~ ^~~~~~~\n/tmp/tmph_kvgfpz.swift:9:17: error: cannot use mutating\
    \ member on immutable value: 'lst' is a 'let' constant\n            lst.append($0)\n\
    \            ~~~ ^\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n\tvar sum = 0\n\tfor i := 0; i < len(lst); i +=\
    \ 2 {\n\t\tsum += lst[i]\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpbepuw_yd.swift:8:9: error: expected type\n        for i := 0; i\
    \ < len(lst); i += 2 {\n               ^\n                <#type#>\n/tmp/tmpbepuw_yd.swift:8:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < len(lst);\
    \ i += 2 {\n               ^\n/tmp/tmpbepuw_yd.swift:8:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < len(lst); i += 2 {\n \
    \              ^\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for ind in 0..<lst.count {\n\
    \        if ind % 2 == 0 {\n            sum += lst[ind]\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpao7cp6tw/tmpao7cp6tw.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2333608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23332ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23332ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23332fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpao7cp6tw                        0x0000560e6e8cb53a <unavailable> + 5434

    5    libc.so.6                          0x00002b23337f4460 __libc_start_main +
    245

    6    tmpao7cp6tw                        0x0000560e6e8cb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp5_yzcwn7/tmp5_yzcwn7.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac62f6c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac62f3c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac62f3c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac62f3bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5_yzcwn7                        0x0000559b57b584fa <unavailable> + 5370

    5    libc.so.6                          0x00002ac62f8b5460 __libc_start_main +
    245

    6    tmp5_yzcwn7                        0x0000559b57b58169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013737
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for index in lst {\n  \
    \      if index % 2 != 0 {\n            result += index\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpmm6t9so4/tmpmm6t9so4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08768a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b087659ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b087659a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08765997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmm6t9so4                        0x0000556b00b154fa <unavailable> + 5370

    5    libc.so.6                          0x00002b0876a8f460 __libc_start_main +
    245

    6    tmpmm6t9so4                        0x0000556b00b15169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = lst[0]\n    for i in lst.indices\
    \ {\n        if i % 2 == 0 {\n            result += lst[i]\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp6zjxjwhj/tmp6zjxjwhj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f785cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f782c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f782c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f782c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6zjxjwhj                        0x000055b39643f56a <unavailable> + 5482

    5    libc.so.6                          0x00002b6f787b7460 __libc_start_main +
    245

    6    tmp6zjxjwhj                        0x000055b39643f1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for element in lst {\n   \
    \     if element % 2 == 0 {\n            sum += element\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmplo45jixo/tmplo45jixo.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9baacb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9baa9a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9baa9a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9baa9a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplo45jixo                        0x000055b26f6c34fa <unavailable> + 5370

    5    libc.so.6                          0x00002b9baae9c460 __libc_start_main +
    245

    6    tmplo45jixo                        0x000055b26f6c3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    var i : Int\n    for i = 0;\
    \ i < lst.count; i++ {\n        if (i % 2 == 0) {\n            sum = sum + lst[i]\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpussk5r5t.swift:9:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 0; i < lst.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var evenSum = 0\n\n    for element in lst {\n\
    \        if element % 2 == 0 {\n            evenSum += element\n        }\n  \
    \  }\n\n    return evenSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp89ypqs2x/tmp89ypqs2x.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae80c85dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae80c554b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae80c554988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae80c5537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp89ypqs2x                        0x0000558bc75944fa <unavailable> + 5370

    5    libc.so.6                          0x00002ae80ca49460 __libc_start_main +
    245

    6    tmp89ypqs2x                        0x0000558bc7594169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        sum\
    \ += i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpertdty71/tmpertdty71.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1522f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab151febb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab151feb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab151fea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpertdty71                        0x0000561df281546a <unavailable> + 5226

    5    libc.so.6                          0x00002ab1524e0460 __libc_start_main +
    245

    6    tmpertdty71                        0x0000561df28150d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return reduce(lst, 0, { $0 + $1 % 2 })\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpkii2o_lc.swift:7:12: error: cannot find 'reduce' in scope\n   \
    \ return reduce(lst, 0, { $0 + $1 % 2 })\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = Int()\n    for index : Int in\
    \ lst {\n        if index % 2 == 1 {\n            result += index\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpicxadl39/tmpicxadl39.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30d9780c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30d9477b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30d9477988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30d94767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpicxadl39                        0x000055a0016d84fa <unavailable> + 5370

    5    libc.so.6                          0x00002b30d996c460 __libc_start_main +
    245

    6    tmpicxadl39                        0x000055a0016d8169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  var evenEven = 0\n  var evenOdd = 0\n  for val\
    \ in lst {\n    if val%2 == 0 {\n      evenEven += val\n    } else {\n      evenOdd\
    \ += val\n    }\n  }\n  return evenEven + evenOdd\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmpjym_7j8r/tmpjym_7j8r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0124861c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0124558b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0124558988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01245577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjym_7j8r                        0x000055c7036694fa <unavailable> + 5370

    5    libc.so.6                          0x00002b0124a4d460 __libc_start_main +
    245

    6    tmpjym_7j8r                        0x000055c703669169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.reduce(0, { a, b in\n        return\
    \ a + b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpa3qquphg/tmpa3qquphg.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1eca2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1ec724b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1ec724988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1ec7237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa3qquphg                        0x000055e3ccdd637a <unavailable> + 4986

    5    libc.so.6                          0x00002ab1ecc19460 __libc_start_main +
    245

    6    tmpa3qquphg                        0x000055e3ccdd5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst[((lst.indexWhere { $0 % 2 == 1})\
    \ + 1)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpk2ql4yhi.swift:7:22: error: value of type '[Int]' has no member\
    \ 'indexWhere'\n    return lst[((lst.indexWhere { $0 % 2 == 1}) + 1)]\n      \
    \           ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var evenSum = 0\n\n    for (_, index) in lst.enumerated()\
    \ {\n        if index % 2 == 0 {\n            evenSum += index\n        }\n  \
    \  }\n\n    return evenSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpy16afqwu/tmpy16afqwu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b156d090c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b156cd87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b156cd87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b156cd867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy16afqwu                        0x0000557816b635aa <unavailable> + 5546

    5    libc.so.6                          0x00002b156d27c460 __libc_start_main +
    245

    6    tmpy16afqwu                        0x0000557816b63219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var even: Int = 0\n    for idx in 0..<lst.count\
    \ {\n        if idx % 2 != 0 {\n            even += lst[idx]\n        }\n    }\n\
    \    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp37qylkbg/tmp37qylkbg.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a1b649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a1b340b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a1b340988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a1b33f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp37qylkbg                        0x000055e4e5cc2617 <unavailable> + 5655

    5    libc.so.6                          0x00002b8a1b835460 __libc_start_main +
    245

    6    tmp37qylkbg                        0x000055e4e5cc21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 != 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp781kcijr/tmp781kcijr.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1e1190c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1e0e87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1e0e87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1e0e867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp781kcijr                        0x0000565241b5a4fa <unavailable> + 5370

    5    libc.so.6                          0x00002ae1e137c460 __libc_start_main +
    245

    6    tmp781kcijr                        0x0000565241b5a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count <= 1 {\n        return 0\n   \
    \ }\n    var evenIndex = 0\n    var oddIndex = 0\n    var sum = 0\n    for i in\
    \ 0..<lst.count {\n        sum += lst[i]\n        if i & 1 == 0 {\n          \
    \  sum += lst[evenIndex]\n            evenIndex++\n        } else {\n        \
    \    sum += lst[oddIndex]\n            oddIndex++\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpt4buas9y.swift:17:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            evenIndex++\n                     ^~\n/tmp/tmpt4buas9y.swift:20:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  oddIndex++\n                    ^~\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = lst[0]\n    for i in 1...lst.count\
    \ {\n        if result % 2 == 0 && result != lst[i] {\n            result = result\
    \ + lst[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6024ba0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6024897561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6024897286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b602489713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6024896bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6024696e83 <unavailable> + 188035

    6    tmp_s3k_py8                        0x0000562bfa5f5a17 <unavailable> + 6679

    7    tmp_s3k_py8                        0x0000562bfa5f54bc <unavailable> + 5308

    8    libc.so.6                          0x00002b6024d8c460 __libc_start_main +
    245

    9    tmp_s3k_py8                        0x0000562bfa5f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var evenSum = 0\n    for ix in lst {\n    \
    \    if ix % 2 == 0 {\n            evenSum += ix\n        }\n    }\n    return\
    \ evenSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) ==\
    \ 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6,\
    \ 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp_kvbgot2/tmp_kvbgot2.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cab040c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2caad37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2caad37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2caad367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kvbgot2                        0x00005556ebfb64fa <unavailable> + 5370

    5    libc.so.6                          0x00002b2cab22c460 __libc_start_main +
    245

    6    tmp_kvbgot2                        0x00005556ebfb6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum: Int = 0\n    for x in lst {\n    \
    \    if x % 2 == 0 {\n            sum += x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpotvhmkt6/tmpotvhmkt6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c3ba54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c3b74bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c3b74b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c3b74a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotvhmkt6                        0x000055fca9caf4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b2c3bc40460 __libc_start_main +
    245

    6    tmpotvhmkt6                        0x000055fca9caf169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var evenSum = 0\n    var oddSum = 0\n\n   \
    \ for element in lst {\n        if element % 2 == 0 {\n            evenSum +=\
    \ element\n        } else {\n            oddSum += element\n        }\n    }\n\
    \n    return evenSum + oddSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp31lpl0d7/tmp31lpl0d7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b728c686c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b728c37db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b728c37d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b728c37c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp31lpl0d7                        0x000055c428e914fa <unavailable> + 5370

    5    libc.so.6                          0x00002b728c872460 __libc_start_main +
    245

    6    tmp31lpl0d7                        0x000055c428e91169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var res = lst[0]\n    for i in lst[1..] {\n\
    \        if i % 2 == 0 {\n            res += i\n        }\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpnehoapu9.swift:8:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in lst[1..] {\n                  ^~\n       \
    \           ...\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    if lst.count > 0 {\n  \
    \      for i in 0..<lst.count {\n            if i % 2 == 0 {\n               \
    \ result += lst[i]\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpv_7__vi8/tmpv_7__vi8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae945ed2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae945bc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae945bc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae945bc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv_7__vi8                        0x00005609a1e8f53a <unavailable> + 5434

    5    libc.so.6                          0x00002ae9460be460 __libc_start_main +
    245

    6    tmpv_7__vi8                        0x00005609a1e8f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var s = 0\n    for v in lst {\n        if v%2\
    \ == 0 {\n            s = s + v\n        }\n    }\n    return s\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpklfmuqkx/tmpklfmuqkx.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10f8a9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10f8796b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10f8796988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10f87957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpklfmuqkx                        0x000056549320e4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b10f8c8b460 __libc_start_main +
    245

    6    tmpklfmuqkx                        0x000056549320e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    \n    if lst.count == 0 {\n        return 0\n\
    \    }\n    \n    var evenSum = lst[0]\n    for index = 1; index < lst.count;\
    \ index += 2 {\n        evenSum += lst[index]\n    }\n    return evenSum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpq1bo551y.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for index = 1; index < lst.count; index += 2 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n\tvar sum = 0\n\tfor i, x := range lst {\n\t\t\
    if i % 2 == 1 {\n\t\t\tsum += x\n\t\t}\n\t}\n\treturn sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_u1hzha6.swift:8:7: error: expected 'in' after for-each pattern\n\
    \        for i, x := range lst {\n             ^\n/tmp/tmp_u1hzha6.swift:8:7:\
    \ error: expected Sequence expression for for-each loop\n        for i, x := range\
    \ lst {\n             ^\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i:Int in  lst {\n    \
    \    if i%2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp5fapi31c/tmp5fapi31c.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeaeb67dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeaeb374b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeaeb374988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeaeb3737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5fapi31c                        0x00005600f2f154fa <unavailable> + 5370

    5    libc.so.6                          0x00002aeaeb869460 __libc_start_main +
    245

    6    tmp5fapi31c                        0x00005600f2f15169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  var result : Int = 0\n  for i in 0..<lst.count\
    \ {\n    if i%2 != 0 {\n      result += lst[i]\n    }\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpgzb9cb7j/tmpgzb9cb7j.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac243a90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac243787b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac243787988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2437867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgzb9cb7j                        0x0000556ac6c41617 <unavailable> + 5655

    5    libc.so.6                          0x00002ac243c7c460 __libc_start_main +
    245

    6    tmpgzb9cb7j                        0x0000556ac6c411a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for index, _ in lst.enumerated()\
    \ {\n        if index % 2 == 0 {\n            result += lst[index]\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpvq77cvo2.swift:8:14: error: expected 'in' after for-each pattern\n\
    \    for index, _ in lst.enumerated() {\n             ^\n/tmp/tmpvq77cvo2.swift:8:14:\
    \ error: expected Sequence expression for for-each loop\n    for index, _ in lst.enumerated()\
    \ {\n             ^\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var even = 0\n    for i : Int = 0; i < lst.count;\
    \ i += 2 {\n        even += lst[i]\n    }\n    return even\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_mj1evbv.swift:8:17: error: expected 'in' after for-each pattern\n\
    \    for i : Int = 0; i < lst.count; i += 2 {\n                ^\n/tmp/tmp_mj1evbv.swift:8:17:\
    \ error: expected Sequence expression for for-each loop\n    for i : Int = 0;\
    \ i < lst.count; i += 2 {\n                ^\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count == 0 {\n        return 0\n   \
    \ }\n    if lst.count == 1 {\n        return lst[0]\n    }\n\n    if lst[lst.count\
    \ - 2] % 2 == 0 {\n        return add(lst[0:lst.count - 2])\n    }\n\n    return\
    \ lst[lst.count - 1] + add(lst[lst.count - 2:])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpcqs0oyly.swift:15:25: error: expected ',' separator\n        return\
    \ add(lst[0:lst.count - 2])\n                        ^\n                     \
    \   ,\n/tmp/tmpcqs0oyly.swift:15:25: error: expected expression in list of expressions\n\
    \        return add(lst[0:lst.count - 2])\n                        ^\n/tmp/tmpcqs0oyly.swift:18:54:\
    \ error: expected ',' separator\n    return lst[lst.count - 1] + add(lst[lst.count\
    \ - 2:])\n                                                     ^\n           \
    \                                          ,\n/tmp/tmpcqs0oyly.swift:18:54: error:\
    \ expected expression in list of expressions\n    return lst[lst.count - 1] +\
    \ add(lst[lst.count - 2:])\n                                                 \
    \    ^\n/tmp/tmpcqs0oyly.swift:15:20: error: missing argument label 'lst:' in\
    \ call\n        return add(lst[0:lst.count - 2])\n                   ^\n     \
    \              lst: \n/tmp/tmpcqs0oyly.swift:15:23: error: cannot convert value\
    \ of type 'Int' to expected argument type '[Int]'\n        return add(lst[0:lst.count\
    \ - 2])\n                      ^\n/tmp/tmpcqs0oyly.swift:18:37: error: missing\
    \ argument label 'lst:' in call\n    return lst[lst.count - 1] + add(lst[lst.count\
    \ - 2:])\n                                    ^\n                            \
    \        lst: \n/tmp/tmpcqs0oyly.swift:18:40: error: cannot convert value of type\
    \ 'Int' to expected argument type '[Int]'\n    return lst[lst.count - 1] + add(lst[lst.count\
    \ - 2:])\n                                       ^\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return evens(lst: lst).reduce(0) { (result,\
    \ value) in\n        result + value\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpn79tf12e.swift:7:12: error: cannot find 'evens' in scope\n    return\
    \ evens(lst: lst).reduce(0) { (result, value) in\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  var sum = 0\n  for i in lst {\n    if i % 2 ==\
    \ 1 {\n      sum += i\n    }\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmp7924t6zh/tmp7924t6zh.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29e8898c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29e858fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29e858f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29e858e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7924t6zh                        0x00005576e63754fa <unavailable> + 5370

    5    libc.so.6                          0x00002b29e8a84460 __libc_start_main +
    245

    6    tmp7924t6zh                        0x00005576e6375169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n\n    for element in lst {\n\
    \        if element % 2 != 0 {\n            result += element\n        }\n   \
    \ }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp8bgg3z8l/tmp8bgg3z8l.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4747ea9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4747ba0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4747ba0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4747b9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8bgg3z8l                        0x00005632d6eff4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4748095460 __libc_start_main +
    245

    6    tmp8bgg3z8l                        0x00005632d6eff169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var i = 0\n    var s = 0\n    \n    for a in\
    \ lst {\n        s += a\n        if a % 2 == 0 {\n            i++\n        }\n\
    \    }\n    \n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp6fiz9me2.swift:13:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n\treturn lst.reduce(0, combine: +)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpd_hextr_.swift:7:19: error: extraneous argument label 'combine:'\
    \ in call\n        return lst.reduce(0, combine: +)\n                        \
    \ ^   ~~~~~~~~~\n                             \n"
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst[0] + lst[1]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: Exception
  stderr: 'tmplqtsblsx/tmplqtsblsx.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0419646c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b041933db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b041933d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b041933c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplqtsblsx                        0x000056167f7bc35a <unavailable> + 4954

    5    libc.so.6                          0x00002b0419832460 __libc_start_main +
    245

    6    tmplqtsblsx                        0x000056167f7bbfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    for i in 0..<lst.count {\n        if lst[i]\
    \ % 2 == 0 {\n            return lst[i]\n        }\n    }\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpjzpz6agv/tmpjzpz6agv.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62a8525c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62a821cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62a821c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62a821b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjzpz6agv                        0x00005568a62b853a <unavailable> + 5434

    5    libc.so.6                          0x00002b62a8711460 __libc_start_main +
    245

    6    tmpjzpz6agv                        0x00005568a62b81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.isEmpty {\n        return 0\n    }\n\
    \    var sum = 0\n    for i in lst.indices {\n        if i % 2 == 0 {\n      \
    \      sum += lst[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmpxl1_d4x6/tmpxl1_d4x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae821702c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8213f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8213f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8213f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxl1_d4x6                        0x000055bcc0afa5fa <unavailable> + 5626

    5    libc.so.6                          0x00002ae8218ee460 __libc_start_main +
    245

    6    tmpxl1_d4x6                        0x000055bcc0afa269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  if lst.contains(0) {\n    return 0\n  }\n  if\
    \ lst.contains(1) {\n    return lst[0]\n  }\n  var s = 0\n  for i : Int in lst\
    \ {\n    if i % 2 == 0 {\n      s += i\n    }\n  }\n  return s\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp6exwomil/tmp6exwomil.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772120c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad771e17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad771e17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad771e167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6exwomil                        0x000055c0c8c9d5ba <unavailable> + 5562

    5    libc.so.6                          0x00002ad77230c460 __libc_start_main +
    245

    6    tmp6exwomil                        0x000055c0c8c9d229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    let evenIndexes: Set<Int> = Set(lst.indices)\
    \ where (lst[Int]) % 2 == 0\n    return evenIndexes.reduce(0, combine: { (acc,\
    \ _) -> Int in\n        acc + lst[acc]\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: SyntaxError
  stderr: "/tmp/tmph8hw6u0_.swift:7:49: error: consecutive statements on a line must\
    \ be separated by ';'\n    let evenIndexes: Set<Int> = Set(lst.indices) where\
    \ (lst[Int]) % 2 == 0\n                                                ^\n   \
    \                                             ;\n/tmp/tmph8hw6u0_.swift:7:50:\
    \ error: expected expression\n    let evenIndexes: Set<Int> = Set(lst.indices)\
    \ where (lst[Int]) % 2 == 0\n                                                \
    \ ^\n/tmp/tmph8hw6u0_.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    return evenIndexes.reduce(0, combine: { (acc, _) -> Int in\n  \
    \                           ^   ~~~~~~~~~\n                                 \n"
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count == 0 { return 0 }\n    var result\
    \ = lst[0]\n    for i in 1 ..< lst.count {\n        if lst[i] % 2 == 0 {\n   \
    \         result += lst[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp8zn7wknw/tmp8zn7wknw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a1f556c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a1f24db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a1f24d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a1f24c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zn7wknw                        0x0000564b69a8453a <unavailable> + 5434

    5    libc.so.6                          0x00002b8a1f742460 __libc_start_main +
    245

    6    tmp8zn7wknw                        0x0000564b69a841a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst[0] + add(lst[1::2])\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp1ituxpju.swift:7:30: error: expected ',' separator\n    return\
    \ lst[0] + add(lst[1::2])\n                             ^\n                  \
    \           ,\n/tmp/tmp1ituxpju.swift:7:30: error: expected expression in list\
    \ of expressions\n    return lst[0] + add(lst[1::2])\n                       \
    \      ^\n/tmp/tmp1ituxpju.swift:7:25: error: missing argument label 'lst:' in\
    \ call\n    return lst[0] + add(lst[1::2])\n                        ^\n      \
    \                  lst: \n/tmp/tmp1ituxpju.swift:7:28: error: cannot convert value\
    \ of type 'Int' to expected argument type '[Int]'\n    return lst[0] + add(lst[1::2])\n\
    \                           ^\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.isEmpty {\n        return 0\n    }\n\
    \    if lst.count < 2 {\n        return lst[0] + lst[1]\n    }\n    var result\
    \ = lst[0]\n    for i in 1..lst.count {\n        if ((lst.index(of: i) > lst.index(of:\
    \ lst.count) - i) && i % 2 == 1) {\n            result += lst[i]\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp3ekmeye5.swift:14:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var total = 0\n\n    for i in lst {\n     \
    \   if i % 2 == 0 {\n            total += i\n        }\n    }\n\n    return total\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp49xop1xb/tmp49xop1xb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebba923c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebba61ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebba61a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebba6197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49xop1xb                        0x000055e9350144fa <unavailable> + 5370

    5    libc.so.6                          0x00002aebbab0f460 __libc_start_main +
    245

    6    tmp49xop1xb                        0x000055e935014169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result: Int = lst[0]\n    for num in lst[1...]\
    \ {\n        if num % 2 == 0 {\n            result += num\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpn3pnhkg5/tmpn3pnhkg5.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b707f9ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b707f6d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b707f6d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b707f6d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn3pnhkg5                        0x00005593361e26fa <unavailable> + 5882

    5    libc.so.6                          0x00002b707fbc9460 __libc_start_main +
    245

    6    tmpn3pnhkg5                        0x00005593361e2369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  var sum = 0\n  for index in 0..<lst.count {\n\
    \    if index % 2 == 0 {\n      sum += lst[index]\n    }\n  }\n  return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpkoj1d2f6/tmpkoj1d2f6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5810bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae580db1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae580db1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae580db07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkoj1d2f6                        0x0000561dbd0b953a <unavailable> + 5434

    5    libc.so.6                          0x00002ae5812a6460 __libc_start_main +
    245

    6    tmpkoj1d2f6                        0x0000561dbd0b91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.indices.contains(0) {\n        return\
    \ 0\n    }\n    let odd = lst[odd.indices.filter { $0 % 2 != 0 }] + odd.first\n\
    \    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8bbukkzi.swift:10:19: error: use of local variable 'odd' before\
    \ its declaration\n    let odd = lst[odd.indices.filter { $0 % 2 != 0 }] + odd.first\n\
    \                  ^\n/tmp/tmp8bbukkzi.swift:10:9: note: 'odd' declared here\n\
    \    let odd = lst[odd.indices.filter { $0 % 2 != 0 }] + odd.first\n        ^\n\
    /tmp/tmp8bbukkzi.swift:10:57: error: use of local variable 'odd' before its declaration\n\
    \    let odd = lst[odd.indices.filter { $0 % 2 != 0 }] + odd.first\n         \
    \                                               ^\n/tmp/tmp8bbukkzi.swift:10:9:\
    \ note: 'odd' declared here\n    let odd = lst[odd.indices.filter { $0 % 2 !=\
    \ 0 }] + odd.first\n        ^\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count == 0 {\n        return 0\n   \
    \ }\n    if lst.count % 2 == 0 {\n        return lst[lst.count/2] + add(lst[lst.count/2..<lst.count])\n\
    \    }\n    return lst[lst.count/2] + add(lst[lst.count/2..<lst.count/2])\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpojah6bwu.swift:11:39: error: missing argument label 'lst:' in call\n\
    \        return lst[lst.count/2] + add(lst[lst.count/2..<lst.count])\n       \
    \                               ^\n                                      lst:\
    \ \n/tmp/tmpojah6bwu.swift:11:42: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n        return lst[lst.count/2] + add(lst[lst.count/2..<lst.count])\n\
    \                                         ^\n/tmp/tmpojah6bwu.swift:13:35: error:\
    \ missing argument label 'lst:' in call\n    return lst[lst.count/2] + add(lst[lst.count/2..<lst.count/2])\n\
    \                                  ^\n                                  lst: \n\
    /tmp/tmpojah6bwu.swift:13:38: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return lst[lst.count/2] + add(lst[lst.count/2..<lst.count/2])\n\
    \                                     ^\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst[List.index(lst, 0)] + lst[List.index(lst,\
    \ 1)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmphk3m7ik9.swift:7:16: error: cannot find 'List' in scope\n    return\
    \ lst[List.index(lst, 0)] + lst[List.index(lst, 1)]\n               ^~~~\n/tmp/tmphk3m7ik9.swift:7:42:\
    \ error: cannot find 'List' in scope\n    return lst[List.index(lst, 0)] + lst[List.index(lst,\
    \ 1)]\n                                         ^~~~\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var i = 0\n    for n in lst {\n        if i\
    \ % 2 == 0 {\n            i += n\n        }\n    }\n    return i\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpnnb8_4xh/tmpnnb8_4xh.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add7d8b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add7d5adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add7d5ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add7d5ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnnb8_4xh                        0x00005641a79ed4fa <unavailable> + 5370

    5    libc.so.6                          0x00002add7daa2460 __libc_start_main +
    245

    6    tmpnnb8_4xh                        0x00005641a79ed169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for num in lst {\n       \
    \ if num % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp93dimpjk/tmp93dimpjk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52182a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5217f97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5217f97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5217f967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp93dimpjk                        0x000055f81f7594fa <unavailable> + 5370

    5    libc.so.6                          0x00002b521848c460 __libc_start_main +
    245

    6    tmp93dimpjk                        0x000055f81f759169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp5_yzcwn7/tmp5_yzcwn7.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac62f6c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac62f3c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac62f3c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac62f3bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5_yzcwn7                        0x0000559b57b584fa <unavailable> + 5370

    5    libc.so.6                          0x00002ac62f8b5460 __libc_start_main +
    245

    6    tmp5_yzcwn7                        0x0000559b57b58169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013737
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for i in lst {\n      \
    \  if i % 2 == 0 {\n            result += i\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmps9w2z9j0/tmps9w2z9j0.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24d6ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24d69d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24d69d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24d69d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps9w2z9j0                        0x000055fe5fa144fa <unavailable> + 5370

    5    libc.so.6                          0x00002b24d6ece460 __libc_start_main +
    245

    6    tmps9w2z9j0                        0x000055fe5fa14169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst[1...].filter({ $0 % 2 == 0 }).reduce({\
    \ $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpvdd0oti6.swift:7:53: error: missing argument for parameter 'into'\
    \ in call\n    return lst[1...].filter({ $0 % 2 == 0 }).reduce({ $0 + $1 })\n\
    \                                                    ^\n                     \
    \                               into: <#Int#>, \nSwift.Sequence:3:28: note: 'reduce(into:_:)'\
    \ declared here\n    @inlinable public func reduce<Result>(into initialResult:\
    \ __owned Result, _ updateAccumulatingResult: (_ partialResult: inout Result,\
    \ Self.Element) throws -> ()) rethrows -> Result\n                           ^\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = lst[0]\n    for i : Int in  0...lst.count-1\
    \ {\n        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpelqjlq6z/tmpelqjlq6z.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d551a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d54e99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d54e99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d54e987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpelqjlq6z                        0x000055c4d093753a <unavailable> + 5434

    5    libc.so.6                          0x00002b7d5538e460 __libc_start_main +
    245

    6    tmpelqjlq6z                        0x000055c4d09371a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count <= 1 {\n        return lst[0]\n\
    \    }\n    \n    var sum = lst[0]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    \n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpbgzj7a3h/tmpbgzj7a3h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab26d14dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab26ce44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab26ce44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab26ce437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbgzj7a3h                        0x000055e502c6f53a <unavailable> + 5434

    5    libc.so.6                          0x00002ab26d339460 __libc_start_main +
    245

    6    tmpbgzj7a3h                        0x000055e502c6f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var even = lst[0]\n    var odd = lst[1]\n \
    \   var evenIndex = 1 // to skip the first element \n    for val in lst[2...]\
    \ {\n        if val%2 == 0 {\n            even = val + even\n        }\n     \
    \   else {\n            odd = val + odd\n            evenIndex = evenIndex + 1\n\
    \        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp922ejlu4/tmp922ejlu4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeea4df5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeea4aecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeea4aec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeea4aeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp922ejlu4                        0x000056324e1036fa <unavailable> + 5882

    5    libc.so.6                          0x00002aeea4fe1460 __libc_start_main +
    245

    6    tmp922ejlu4                        0x000056324e103369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst[0] + lst[1]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: Exception
  stderr: 'tmplqtsblsx/tmplqtsblsx.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0419646c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b041933db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b041933d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b041933c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplqtsblsx                        0x000056167f7bc35a <unavailable> + 4954

    5    libc.so.6                          0x00002b0419832460 __libc_start_main +
    245

    6    tmplqtsblsx                        0x000056167f7bbfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp5_yzcwn7/tmp5_yzcwn7.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac62f6c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac62f3c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac62f3c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac62f3bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5_yzcwn7                        0x0000559b57b584fa <unavailable> + 5370

    5    libc.so.6                          0x00002ac62f8b5460 __libc_start_main +
    245

    6    tmp5_yzcwn7                        0x0000559b57b58169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013737
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var res = lst[0]\n    for index in 1..<lst.count\
    \ {\n        if index % 2 == 0 {\n            res += lst[index]\n        }\n \
    \   }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpg0l8_vvw/tmpg0l8_vvw.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b451fc91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b451f988b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b451f988988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b451f9877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0l8_vvw                        0x00005616640f753a <unavailable> + 5434

    5    libc.so.6                          0x00002b451fe7d460 __libc_start_main +
    245

    6    tmpg0l8_vvw                        0x00005616640f71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var res = lst[0]\n    for x in lst {\n    \
    \    if x % 2 != 0 {\n            res = res + x\n        }\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpo8mpryrx/tmpo8mpryrx.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ffb03ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ffad35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ffad35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ffad347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo8mpryrx                        0x0000561b9ea6654a <unavailable> + 5450

    5    libc.so.6                          0x00002b8ffb22a460 __libc_start_main +
    245

    6    tmpo8mpryrx                        0x0000561b9ea661b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp5_yzcwn7/tmp5_yzcwn7.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac62f6c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac62f3c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac62f3c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac62f3bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5_yzcwn7                        0x0000559b57b584fa <unavailable> + 5370

    5    libc.so.6                          0x00002ac62f8b5460 __libc_start_main +
    245

    6    tmp5_yzcwn7                        0x0000559b57b58169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013737
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return evenSum(lst)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpur_qpq85.swift:7:12: error: cannot find 'evenSum' in scope\n  \
    \  return evenSum(lst)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    let evens = lst.filter({$0 % 2 == 0});\n  \
    \  let odds = lst.filter({$0 % 2 != 0});\n    return evens.reduce(0, {$0 + $1})+odds.reduce(0,\
    \ {$0 + $1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3e7lk_yk/tmp3e7lk_yk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cd1015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cd0d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cd0d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cd0d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3e7lk_yk                        0x0000564b53f924ca <unavailable> + 5322

    5    libc.so.6                          0x00002b9cd1201460 __libc_start_main +
    245

    6    tmp3e7lk_yk                        0x0000564b53f92139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for ix in lst {\n        if\
    \ ix % 2 == 0 {\n            sum += ix\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmps208ubm9/tmps208ubm9.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52efe3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52efb36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52efb36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52efb357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps208ubm9                        0x000056357aa674fa <unavailable> + 5370

    5    libc.so.6                          0x00002b52f002b460 __libc_start_main +
    245

    6    tmps208ubm9                        0x000056357aa67169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var even: Int = 0\n    for i in lst {\n   \
    \     if i % 2 == 0 {\n            even += i\n        }\n    }\n    return even\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpxbpprob6/tmpxbpprob6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae879585c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae87927cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae87927c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae87927b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbpprob6                        0x000055cba76fd4fa <unavailable> + 5370

    5    libc.so.6                          0x00002ae879771460 __libc_start_main +
    245

    6    tmpxbpprob6                        0x000055cba76fd169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count > 0 {\n        var sum = 0\n \
    \       for i in 0 ..< lst.count {\n            if i % 2 == 0 {\n            \
    \    sum += lst[i]\n            }\n        }\n        return sum\n    }\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst:\
    \ [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp4rp0909l/tmp4rp0909l.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ad9741c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ad9438b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ad9438988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ad94377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4rp0909l                        0x000055c7fb3c553a <unavailable> + 5434

    5    libc.so.6                          0x00002b1ad992d460 __libc_start_main +
    245

    6    tmp4rp0909l                        0x000055c7fb3c51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var evenSum = 0\n    var oddSum = 0\n\n   \
    \ for el in lst {\n        if el % 2 == 0 {\n            evenSum += el\n     \
    \   } else {\n            oddSum += el\n        }\n    }\n    return evenSum +\
    \ oddSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) ==\
    \ 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6,\
    \ 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp6091wndy/tmp6091wndy.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4dc3d02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dc39f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dc39f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dc39f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6091wndy                        0x00005592776c44fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4dc3eee460 __libc_start_main +
    245

    6    tmp6091wndy                        0x00005592776c4169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst[(lst.indices)\n        .filter {\
    \ $0 % 2 == 1 }\n        .map { $0 + $1 }\n        .sorted(by: >)\n        .first!]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpvns9ptt5.swift:9:14: error: contextual closure type '(Range<Array<Int>.Index>.Element)\
    \ throws -> Int' (aka '(Int) throws -> Int') expects 1 argument, but 2 were used\
    \ in closure body\n        .map { $0 + $1 }\n             ^\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count == 0 { return 0 }\n\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 2 == 0 { sum += i }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmptawx_v7q/tmptawx_v7q.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b6bcbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b6b9b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b6b9b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b6b9b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptawx_v7q                        0x000055cf8cd5f55a <unavailable> + 5466

    5    libc.so.6                          0x00002b0b6beaa460 __libc_start_main +
    245

    6    tmptawx_v7q                        0x000055cf8cd5f1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count == 0 {\n        return 0\n   \
    \ }\n    return lst[0] + add(lst.slice(1, lst.count-1))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmphike_d_z.swift:10:25: error: missing argument label 'lst:' in call\n\
    \    return lst[0] + add(lst.slice(1, lst.count-1))\n                        ^\n\
    \                        lst: \n/tmp/tmphike_d_z.swift:10:29: error: value of\
    \ type '[Int]' has no member 'slice'\n    return lst[0] + add(lst.slice(1, lst.count-1))\n\
    \                        ~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    \n    for i in lst {\n        if i % 2 != 0\
    \ {\n            return i\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp78_qx4kx/tmp78_qx4kx.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adfebec1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfebbb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adfebbb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adfebbb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp78_qx4kx                        0x00005592974754fa <unavailable> + 5370

    5    libc.so.6                          0x00002adfec0ad460 __libc_start_main +
    245

    6    tmp78_qx4kx                        0x0000559297475169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst[Int(lst.count)].flatMap { lst[Int($0)\
    \ % Int(lst.count)] }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpbh76zmh4.swift:7:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return lst[Int(lst.count)].flatMap { lst[Int($0) % Int(lst.count)]\
    \ }.reduce(0, +)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013892
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.reduce(0){ (cur, val) in\n     \
    \   if val % 2 == 0 {\n            cur += val\n        }\n        return cur\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp44ywv6xm.swift:9:17: error: left side of mutating operator isn't\
    \ mutable: 'cur' is a 'let' constant\n            cur += val\n            ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst[1 ..< lst.count].reduce(0, { (prev,\
    \ curr) in\n        return prev + curr\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpc0rrrjy3/tmpc0rrrjy3.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbeb61fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbeb316b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbeb316988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbeb3157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc0rrrjy3                        0x000055c8e2eb9627 <unavailable> + 5671

    5    libc.so.6                          0x00002adbeb80b460 __libc_start_main +
    245

    6    tmpc0rrrjy3                        0x000055c8e2eb91b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.contains(0) {\n        return 0\n  \
    \  }\n    if lst.contains(1) {\n        return lst[0] + lst[1]\n    }\n    var\
    \ sum = 0\n    for i : Int in lst {\n        if i % 2 == 0 {\n            sum\
    \ += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp049jtws0/tmp049jtws0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6ad365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6ad05cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6ad05c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6ad05b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp049jtws0                        0x000056396b1335ba <unavailable> + 5562

    5    libc.so.6                          0x00002af6ad551460 __libc_start_main +
    245

    6    tmp049jtws0                        0x000056396b133229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var even = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            even += i\n        }\n    }\n    return even\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpx4_u6tcc/tmpx4_u6tcc.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abecf48bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abecf182b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abecf182988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abecf1817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4_u6tcc                        0x0000557a35b5a4fa <unavailable> + 5370

    5    libc.so.6                          0x00002abecf677460 __libc_start_main +
    245

    6    tmpx4_u6tcc                        0x0000557a35b5a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    var evenSum = 0\n    for n\
    \ in lst {\n        if n % 2 != 0 {\n            sum += n\n        } else {\n\
    \            evenSum += n\n        }\n    }\n    return sum + evenSum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpkqd0rs2t/tmpkqd0rs2t.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5270aa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b527079ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b527079a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52707997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkqd0rs2t                        0x0000557811adc4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b5270c8f460 __libc_start_main +
    245

    6    tmpkqd0rs2t                        0x0000557811adc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst[1 % 2 == 0]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp0wsj0y8j.swift:7:22: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n    return lst[1 % 2 == 0]\n              \
    \       ^\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n\treturn reduce(lst, 0, {\n\t\treducedInt += $0\n\
    \t\treducedInt += ($1 % 2)\n\t\treducedInt += ($1 % 4)\n\t})\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmplx8vqie5.swift:7:9: error: cannot find 'reduce' in scope\n    \
    \    return reduce(lst, 0, {\n               ^~~~~~\n/tmp/tmplx8vqie5.swift:8:3:\
    \ error: cannot find 'reducedInt' in scope\n                reducedInt += $0\n\
    \                ^~~~~~~~~~\n/tmp/tmplx8vqie5.swift:9:3: error: cannot find 'reducedInt'\
    \ in scope\n                reducedInt += ($1 % 2)\n                ^~~~~~~~~~\n\
    /tmp/tmplx8vqie5.swift:10:3: error: cannot find 'reducedInt' in scope\n      \
    \          reducedInt += ($1 % 4)\n                ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count == 0 {\n        return 0\n   \
    \ }\n    var result = Int()\n    if lst[lst[0] % 2 == 0] != 0 {\n        return\
    \ lst[lst[0] % 2]\n    }\n    for i in 1..lst.count {\n        if lst[i % 2] ==\
    \ 0 {\n            result = (result + lst[i % 2]) + lst[lst[i] - 1 % 2]\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfxdx8wx1.swift:11:23: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n    if lst[lst[0] % 2 == 0] != 0 {\n      \
    \                ^\n/tmp/tmpfxdx8wx1.swift:14:15: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for i in 1..lst.count {\n          \
    \    ^~\n              ...\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int  in lst {\n  \
    \      if (i % 2 == 1) {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpldk_4zgw/tmpldk_4zgw.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d163c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d160bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d160bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d160ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpldk_4zgw                        0x0000558654c2c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b2d165b0460 __libc_start_main +
    245

    6    tmpldk_4zgw                        0x0000558654c2c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    let even = lst[2...].filter({ $0 % 2 == 0 })\n\
    \    return even.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmppx_2f3pr/tmppx_2f3pr.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab07599cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab075693b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab075693988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0756927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppx_2f3pr                        0x0000557b625ae65a <unavailable> + 5722

    5    libc.so.6                          0x00002ab075b88460 __libc_start_main +
    245

    6    tmppx_2f3pr                        0x0000557b625ae2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = lst[0]\n    for element in lst\
    \ {\n        if element % 2 == 1 {\n            result += element\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp0sdxm76s/tmp0sdxm76s.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b116a428c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b116a11fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b116a11f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b116a11e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0sdxm76s                        0x0000555bf091a54a <unavailable> + 5450

    5    libc.so.6                          0x00002b116a614460 __libc_start_main +
    245

    6    tmp0sdxm76s                        0x0000555bf091a1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count == 0 {\n        return 0\n   \
    \ }\n    var evenIndex = lst.startIndex\n    var evenSum = 0\n    for index in\
    \ lst.startIndex..<lst.endIndex {\n        if index % 2 == 0 {\n            evenSum\
    \ += lst[index]\n        }\n    }\n    return evenSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmptcdcbf4x/tmptcdcbf4x.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af650e5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af650b52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af650b52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af650b517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptcdcbf4x                        0x000055fe98cdb5ea <unavailable> + 5610

    5    libc.so.6                          0x00002af651047460 __libc_start_main +
    245

    6    tmptcdcbf4x                        0x000055fe98cdb259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n\tvar result = 0\n\tvar even = 0\n\tfor index,\
    \ element in enumerate(lst) {\n\t\tif index % 2 != 0 {\n\t\t\tresult += element\n\
    \t\t} else {\n\t\t\teven += element\n\t\t}\n\t}\n\treturn even + result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp3g8ipzim.swift:9:11: error: expected 'in' after for-each pattern\n\
    \        for index, element in enumerate(lst) {\n                 ^\n/tmp/tmp3g8ipzim.swift:9:11:\
    \ error: expected Sequence expression for for-each loop\n        for index, element\
    \ in enumerate(lst) {\n                 ^\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n\t\n\tlet evenIndices = lst.filter({$0%2 == 0}),\
    \ oddIndices = lst.filter({$0%2 != 0}), total = evenIndices.reduce(0){ (total,\
    \ value) -> Int in\n\t\treturn total + (value + oddIndices[lst.index(of: value)\
    \ ?? 0]) }\n\t\n\treturn total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab662ea3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab662b9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab662b9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab662b9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab662b99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab662999e83 <unavailable> + 188035

    6    tmpt0khom70                        0x0000556108c28d7b <unavailable> + 7547

    7    tmpt0khom70                        0x0000556108c29334 <unavailable> + 9012

    8    libswiftCore.so                    0x00002ab662ca9410 Sequence.reduce<A>(_:_:)
    + 530

    9    tmpt0khom70                        0x0000556108c28a15 <unavailable> + 6677

    10   tmpt0khom70                        0x0000556108c2855c <unavailable> + 5468

    11   libc.so.6                          0x00002ab66308f460 __libc_start_main +
    245

    12   tmpt0khom70                        0x0000556108c28249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var evenSum = 0\n    var oddSum = 0\n    \n\
    \    for i in 0..<lst.count {\n        if i % 2 != 0 {\n            oddSum +=\
    \ lst[i]\n        } else {\n            evenSum += lst[i]\n        }\n    }\n\
    \    \n    return evenSum + oddSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp9kwdaxx3/tmp9kwdaxx3.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b7bbbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b7b8b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b7b8b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b7b8b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kwdaxx3                        0x000055f7a1db153a <unavailable> + 5434

    5    libc.so.6                          0x00002b9b7bdaa460 __libc_start_main +
    245

    6    tmp9kwdaxx3                        0x000055f7a1db11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count == 0 { return 0 }\n    let startIndex\
    \ = lst.startIndex\n    let index = lst.index(after: startIndex)\n    while index\
    \ != lst.endIndex {\n        if index % 2 == 0 { lst[index] = lst[index] + lst[index+1]\
    \ }\n        index = lst.index(after: index)\n    }\n    return lst[startIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpwt1wzywm.swift:11:32: error: cannot assign through subscript: 'lst'\
    \ is a 'let' constant\n        if index % 2 == 0 { lst[index] = lst[index] + lst[index+1]\
    \ }\n                            ~~~^\n/tmp/tmpwt1wzywm.swift:12:9: error: cannot\
    \ assign to value: 'index' is a 'let' constant\n        index = lst.index(after:\
    \ index)\n        ^~~~~\n/tmp/tmpwt1wzywm.swift:9:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let index = lst.index(after: startIndex)\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in  0..<lst.count {\n\
    \        if i % 2 != 0 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpgk79ttm7/tmpgk79ttm7.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32a22dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32a1fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32a1fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32a1fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgk79ttm7                        0x0000558daac4d617 <unavailable> + 5655

    5    libc.so.6                          0x00002b32a24cb460 __libc_start_main +
    245

    6    tmpgk79ttm7                        0x0000558daac4d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  if lst.count < 2 { return 0 }\n  let even = lst[lst.count/2::<Int>]\n\
    \  let odd = lst[lst.count/2+1]\n  return even.fold(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp004hi2m5.swift:8:29: error: expected ',' separator\n  let even\
    \ = lst[lst.count/2::<Int>]\n                            ^\n                 \
    \           ,\n/tmp/tmp004hi2m5.swift:8:29: error: expected expression in list\
    \ of expressions\n  let even = lst[lst.count/2::<Int>]\n                     \
    \       ^\n/tmp/tmp004hi2m5.swift:10:15: error: value of type 'Int' has no member\
    \ 'fold'\n  return even.fold(0, +)\n         ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpjq7o9pl0/tmpjq7o9pl0.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf37990c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf37687b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf37687988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf376867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjq7o9pl0                        0x0000563490ad42fa <unavailable> + 4858

    5    libc.so.6                          0x00002abf37b7c460 __libc_start_main +
    245

    6    tmpjq7o9pl0                        0x0000563490ad3f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  if lst.count < 2 {\n    return 0\n  }\n\n  var\
    \ oddSum = 0\n  var evenSum = 0\n\n  for var i = 0; i < lst.count; i++ {\n   \
    \ if i % 2 == 0 {\n      evenSum += lst[i]\n    } else {\n      oddSum += lst[i]\n\
    \    }\n  }\n  return evenSum + oddSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp970ik_b7.swift:14:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 0; i < lst.count; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    let even_pos = lst.filter({ $0 % 2 == 0 })\n\
    \    let odd_pos = lst.filter({ $0 % 2 != 0 })\n    return even_pos.reduce(0,\
    \ { $0 + $1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpefk0pc88/tmpefk0pc88.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0d84efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0d81e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0d81e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0d81e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefk0pc88                        0x00005631d13ea4ca <unavailable> + 5322

    5    libc.so.6                          0x00002ba0d86db460 __libc_start_main +
    245

    6    tmpefk0pc88                        0x00005631d13ea139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var evenSum = 0\n    for i in lst {\n     \
    \   if i % 2 == 0 {\n            evenSum += i\n        }\n    }\n    return evenSum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3x6ku9wx/tmp3x6ku9wx.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a50c80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a50977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a50977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a509767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3x6ku9wx                        0x000055ef9e5754fa <unavailable> + 5370

    5    libc.so.6                          0x00002b9a50e6c460 __libc_start_main +
    245

    6    tmp3x6ku9wx                        0x000055ef9e575169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for index in 0...lst.count-1\
    \ {\n        if index % 2 == 0 {\n            sum += lst[index]\n        }\n \
    \   }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpsb72bsl1/tmpsb72bsl1.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ee252dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ee2224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ee2224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ee22237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb72bsl1                        0x0000564edb97653a <unavailable> + 5434

    5    libc.so.6                          0x00002b5ee2719460 __libc_start_main +
    245

    6    tmpsb72bsl1                        0x0000564edb9761a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n\t\n\tguard lst.count != 0 else { return 0 }\n\t\
    \n\tfor i in lst {\n\t\tif i % 2 == 0 {\n\t\t\tlst.insert(i, at: lst.count - 1)\n\
    \t\t}\n\t}\n\t\n\treturn lst[0] + lst[1..<lst.count].count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfqd55zvs.swift:12:8: error: cannot use mutating member on immutable\
    \ value: 'lst' is a 'let' constant\n                        lst.insert(i, at:\
    \ lst.count - 1)\n                        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count <= 0 {\n        return -1\n  \
    \  }\n    var evenIndex = 0\n    var oddIndex = 0\n    var sum = 0\n    while\
    \ evenIndex < lst.count && oddIndex < lst.count {\n        if lst[evenIndex] %\
    \ 2 == 0 {\n            sum += lst[evenIndex]\n            evenIndex++\n     \
    \   } else {\n            sum += lst[oddIndex]\n            oddIndex++\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_nttmly5.swift:16:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            evenIndex++\n                     ^~\n/tmp/tmp_nttmly5.swift:19:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  oddIndex++\n                    ^~\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for idx in 0..<lst.count {\n\
    \        if idx % 2 == 0 {\n            sum += lst[idx]\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpk3rwu9zu/tmpk3rwu9zu.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7359090c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7358d87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7358d87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7358d867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3rwu9zu                        0x000056361bd9853a <unavailable> + 5434

    5    libc.so.6                          0x00002b735927c460 __libc_start_main +
    245

    6    tmpk3rwu9zu                        0x000056361bd981a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var even = 0 \n    var odd = 0 \n    for a\
    \ in lst {\n        if a % 2 == 0 {\n            even += a\n        } else {\n\
    \            odd += a\n        }\n    }\n    return even + odd\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: Exception
  stderr: 'tmppc3l3arr/tmppc3l3arr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0baf0d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0baedc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0baedc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0baedc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppc3l3arr                        0x0000562b023014fa <unavailable> + 5370

    5    libc.so.6                          0x00002b0baf2bc460 __libc_start_main +
    245

    6    tmppc3l3arr                        0x0000562b02301169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    \n    if lst.isEmpty {\n        return 0\n\
    \    }\n    \n    let evenIndices = lst.filter{$0 % 2 == 0}\n    \n    let total\
    \ = 0\n    \n    for index in 0..<evenIndices.count {\n        total += evenIndices[index]\n\
    \    }\n    \n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpj37czece.swift:17:15: error: left side of mutating operator isn't\
    \ mutable: 'total' is a 'let' constant\n        total += evenIndices[index]\n\
    \        ~~~~~ ^\n/tmp/tmpj37czece.swift:14:5: note: change 'let' to 'var' to\
    \ make it mutable\n    let total = 0\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count == 0 { return 0 }\n    let length\
    \ = lst.count\n    for i in 0..<length {\n        if i % 2 == 0 { lst[i] += lst[i\
    \ / 2] }\n    }\n    return lst[length]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpot7oqrge.swift:10:32: error: left side of mutating operator isn't\
    \ mutable: 'lst' is a 'let' constant\n        if i % 2 == 0 { lst[i] += lst[i\
    \ / 2] }\n                        ~~~    ^\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var evenIndex = 0\n    var oddIndex = 0\n \
    \   var sum = 0\n    for _, val in  lst.enumerated() {\n        if evenIndex ==\
    \ 0 && oddIndex == 0 {\n            sum = val\n        } else {\n            if\
    \ val % 2 == 0 {\n                sum += val\n            }\n            evenIndex\
    \ += 1\n            oddIndex += 1\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_bppind3.swift:10:10: error: expected 'in' after for-each pattern\n\
    \    for _, val in  lst.enumerated() {\n         ^\n/tmp/tmp_bppind3.swift:10:10:\
    \ error: expected Sequence expression for for-each loop\n    for _, val in  lst.enumerated()\
    \ {\n         ^\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var even = 0, odd = 0, sum = Int(0)\n    for\
    \ num in lst {\n        sum += num\n        odd = num % 2\n        if odd > 0\
    \ {\n            even += odd\n        }\n    }\n    return even\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp0gscgl8u/tmp0gscgl8u.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe9b2c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe9afbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe9afbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe9afba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0gscgl8u                        0x00005630f5b6e4fa <unavailable> + 5370

    5    libc.so.6                          0x00002abe9b4b0460 __libc_start_main +
    245

    6    tmp0gscgl8u                        0x00005630f5b6e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count == 0 {\n        return 0\n   \
    \ }\n    if lst.count == 1 {\n        return lst[0]\n    }\n    var result = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] % 2 == 0 {\n            result\
    \ = (lst[i] + result) / 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: Exception
  stderr: 'tmphgyaejhf/tmphgyaejhf.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ab4197c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ab3e8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ab3e8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ab3e8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgyaejhf                        0x00005611b960553a <unavailable> + 5434

    5    libc.so.6                          0x00002b5ab4383460 __libc_start_main +
    245

    6    tmphgyaejhf                        0x00005611b96051a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    \n    var sum = lst[0] + lst[1]\n    \n   \
    \ for i in 2..<lst.count {\n        sum = lst[i] + sum\n    }\n    \n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp_pgedxma/tmp_pgedxma.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaf3e3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaf3b33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaf3b33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaf3b327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_pgedxma                        0x0000561ca373a53a <unavailable> + 5434

    5    libc.so.6                          0x00002acaf4028460 __libc_start_main +
    245

    6    tmp_pgedxma                        0x0000561ca373a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  var sum = 0\n  for i := 0; i < lst.count; i++\
    \ {\n    if i % 2 == 0 {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpeo7cj88v.swift:8:10: error: expected type\n  for i := 0; i < lst.count;\
    \ i++ {\n         ^\n          <#type#>\n/tmp/tmpeo7cj88v.swift:8:10: error: expected\
    \ 'in' after for-each pattern\n  for i := 0; i < lst.count; i++ {\n         ^\n\
    /tmp/tmpeo7cj88v.swift:8:10: error: expected Sequence expression for for-each\
    \ loop\n  for i := 0; i < lst.count; i++ {\n         ^\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  var sum = 0\n  for x in lst {\n    if x % 2 ==\
    \ 0 {\n      sum += x\n    }\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpvwv9vkfu/tmpvwv9vkfu.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c9b52ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c9b221b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c9b221988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c9b2207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvwv9vkfu                        0x000055fc33ba44fa <unavailable> + 5370

    5    libc.so.6                          0x00002b6c9b716460 __libc_start_main +
    245

    6    tmpvwv9vkfu                        0x000055fc33ba4169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n\tvar sum = 0\n\tfor i, v := range lst {\n\t\t\
    if i % 2 == 0 {\n\t\t\tsum += v\n\t\t}\n\t}\n\treturn sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpd1ilg10_.swift:8:7: error: expected 'in' after for-each pattern\n\
    \        for i, v := range lst {\n             ^\n/tmp/tmpd1ilg10_.swift:8:7:\
    \ error: expected Sequence expression for for-each loop\n        for i, v := range\
    \ lst {\n             ^\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst[0] + (lst[2] + lst[4] + lst[6])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b517af99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b517ac90561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b517ac90286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b517ac9013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b517ac8fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b517aa8fe83 <unavailable> + 188035

    6    tmpmth_hj5m                        0x000055e6fae00637 <unavailable> + 5687

    7    tmpmth_hj5m                        0x000055e6fae002dc <unavailable> + 4828

    8    libc.so.6                          0x00002b517b185460 __libc_start_main +
    245

    9    tmpmth_hj5m                        0x000055e6fadfffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n\tvar sum: Int = 0\n\tfor i := 0; i < len(lst);\
    \ i++ {\n\t\tif i%2 == 0 {\n\t\t\tsum += lst[i]\n\t\t}\n\t}\n\treturn sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpnpc49hot.swift:8:9: error: expected type\n        for i := 0; i\
    \ < len(lst); i++ {\n               ^\n                <#type#>\n/tmp/tmpnpc49hot.swift:8:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < len(lst);\
    \ i++ {\n               ^\n/tmp/tmpnpc49hot.swift:8:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < len(lst); i++ {\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.filter{ ($0 % 2) == 1 }.sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpn8bg5dyq.swift:7:40: error: value of type '[Int]' has no member\
    \ 'sum'\n    return lst.filter{ ($0 % 2) == 1 }.sum\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var evens = 0\n    var odds = 0\n\n    for\
    \ index, ele in enumerate(lst) {\n        if index&1 != 0 {\n            odds\
    \ += ele\n        } else {\n            evens += ele\n        }\n    }\n\n   \
    \ return evens + odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpln0cftun.swift:10:14: error: expected 'in' after for-each pattern\n\
    \    for index, ele in enumerate(lst) {\n             ^\n/tmp/tmpln0cftun.swift:10:14:\
    \ error: expected Sequence expression for for-each loop\n    for index, ele in\
    \ enumerate(lst) {\n             ^\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: Exception
  stderr: 'tmppkgiykil/tmppkgiykil.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b7439dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b74094b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b74094988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b740937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppkgiykil                        0x000056044550737a <unavailable> + 4986

    5    libc.so.6                          0x00002b5b74589460 __libc_start_main +
    245

    6    tmppkgiykil                        0x0000560445506fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013865
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum: Int = 0\n    for i in lst[0..<lst.count]\
    \ {\n        if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpo47a4pmz/tmpo47a4pmz.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51168edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51165e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51165e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51165e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo47a4pmz                        0x00005642b585e60a <unavailable> + 5642

    5    libc.so.6                          0x00002b5116ad9460 __libc_start_main +
    245

    6    tmpo47a4pmz                        0x00005642b585e279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum: Int = 0\n    for index in lst {\n\
    \        if index % 2 == 0 {\n            sum += index\n        }\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpre1955rp/tmpre1955rp.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7747c5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7747951b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7747951988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77479507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpre1955rp                        0x000055f664c954fa <unavailable> + 5370

    5    libc.so.6                          0x00002b7747e46460 __libc_start_main +
    245

    6    tmpre1955rp                        0x000055f664c95169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    if lst.count < 2 { return 0 }\n    var result\
    \ = 0\n    for idx in 0..<lst.count {\n        if idx % 2 == 0 {\n           \
    \ result += lst[idx]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpnq8l83aj/tmpnq8l83aj.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cd781bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cd7512b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cd7512988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cd75117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnq8l83aj                        0x000055b4c20c653a <unavailable> + 5434

    5    libc.so.6                          0x00002b7cd7a07460 __libc_start_main +
    245

    6    tmpnq8l83aj                        0x000055b4c20c61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return addRec(lst, 0, lst.count-1)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpdk8q79mf.swift:7:12: error: cannot find 'addRec' in scope\n   \
    \ return addRec(lst, 0, lst.count-1)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660013867
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for i in lst {\n      \
    \  if i % 2 != 0 {\n            result += i\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmplq129jxq/tmplq129jxq.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58910d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5890dcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5890dcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5890dca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplq129jxq                        0x00005632351a54fa <unavailable> + 5370

    5    libc.so.6                          0x00002b58912c0460 __libc_start_main +
    245

    6    tmplq129jxq                        0x00005632351a5169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013867
