name: HumanEval_117_select_words
language: swift
prompt: "\n/// Given a string s and a natural number n, you have been tasked to implement\
  \ \n/// a function that returns an array of all words from string s that contain\
  \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
  \ If the string s is empty then the function should return an empty array.\n///\
  \ Note: you may assume the input string contains only letters and spaces.\n/// Examples:\n\
  /// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n/// [\"little\"]\n///\
  \ >>> select_words(s: \"Mary had a little lamb\", n: 3)\n/// [\"Mary\", \"lamb\"\
  ]\n/// >>> select_words(s: \"simple white space\", n: 2)\n/// [] as [String]\n///\
  \ >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"]\n/// >>> select_words(s:\
  \ \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s: String, n: Int) ->\
  \ [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\"\
  , n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n:\
  \ 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
  \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"world\"\
  ])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
  \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
  \ == [\"b\", \"c\", \"d\", \"f\"])"
completions: ["    // TODO: Use a set instead of an array\n    var result = [String]()\n\
    \    for char in s {\n        if char == \" \" || char == \"\\n\" {\n        \
    \    continue\n        }\n        var word = [String]()\n        if Character.isLetter(char)\
    \ {\n            word = append(word, \"a\")\n        }\n        if Character.isLetter(char+1)\
    \ {\n            word = append(word, \"b\")\n        }\n        if Character.isLetter(char+2)\
    \ {\n            word = append(word, \"c\")\n        }\n        if Character.isLetter(char+3)\
    \ {\n            word = append(word, \"d\")\n        }\n        if Character.isLetter(char+4)\
    \ {\n            word = append(word, \"e\")\n        }\n        if Character.isLetter(char+5)\
    \ {\n            word = append(word, \"f\")\n        }\n        if Character.isLetter(char+6)\
    \ {\n            word = append(word, \"g\")\n        }\n        if Character.isLetter(char+7)\
    \ {\n            word = append(word, \"h\")\n        }\n        if Character.isLetter(char+8)\
    \ {\n            word = append(word, \"i\")\n        }\n        if Character.isLetter(char+9)\
    \ {\n            word = append(word, \"j\")\n        }\n        if Character.isLetter(char+10)\
    \ {\n            word = append(word, \"k\")\n        }\n        if Character.isLetter(char+11)\
    \ {\n            word = append(word, \"l\")\n        }\n        if Character.isLetter(char+12)\
    \ {\n            word = append(word, \"m\")\n        }\n        if Character.isLetter(char+13)\
    \ {\n            word = append(word, \"n\")\n        }\n        if Character.isLetter(char+14)\
    \ {\n            word = append(word, \"o\")\n        }\n        if Character.isLetter(char+15)\
    \ {\n            word = append(word, \"p\")\n        }\n        if Character.isLetter(char+16)\
    \ {\n            word = append(word, \"q\")\n        }\n        if Character.isLetter(char+17)\
    \ {\n            word = append(word, \"r\")\n        }\n        if Character.isLetter(char+18)\
    \ {\n            word = append(word, \"s\")\n        }\n        if Character.isLetter(char+19)\
    \ {\n            word = append(word, \"t\")\n        }\n        if Character.isLetter(char+20)\
    \ {\n            word = append(word, \"u\")\n        }\n        if Character.isLetter(char+21)\
    \ {\n            word = append(word, \"v\")\n        }\n        if Character.isLetter(char+22)\
    \ {\n            word = append(word, \"w\")\n        }\n", "    let a = s.characters\n\
    \n    let res = [String]()\n\n    for x in 0..<a.count{\n        if a.contains(a[x]){\n\
    \            if let b = a[x+n...x+n+3]{\n                res.add(b)\n        \
    \    }\n        }\n    }\n\n    return res", "\tvar res = [String]()\n\t\n\tlet\
    \ words = s.characters.split(\".\").map { $0.trimmingCharacters(in: .whitespaces)\
    \ }\n\t\n\tfor i in 0..<words.count {\n\t\tif words.indices.contains(i) {\n\t\t\
    \tif words[i].contains(String(repeating: \"a\", count: n)) {\n\t\t\t\tres = res\
    \ + [words[i]]\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn res", "\t\n\treturn []", " \
    \   \n    // Good luck!\n    \n    return []", '    return []', "\tvar results\
    \ = [String]()\n\tvar i = 0\n\tfor i < s.count {\n\t\tfor letter in \"abcdefghijklmnopqrstuvwxyz\"\
    \ {\n\t\t\tif s[i] == letter {\n\t\t\t\tif n == 1 {\n\t\t\t\t\tresults.append(String(i))\n\
    \t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tfor ii = i+1; ii < s.count; ii++ {\n\t\t\t\
    \t\tif s[ii] == letter {\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\
    i =  ii\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif i == s.count {\n\t\t\tresults.append(String(s.count))\n\
    \t\t}\n\t}\n\treturn results", "    var result = [String]()\n    let length =\
    \ s.characters.count\n    for _ in 0 ..< length {\n        var counter = 1\n \
    \       var index = s.startIndex\n        for _ in 0 ..< length {\n          \
    \  if counter < n && s[index] != \" \" {\n                counter += 1\n     \
    \       } else {\n                counter = 0\n            }\n            index\
    \ += 1\n        }\n        if counter == n {\n            result.append(s[s.startIndex..<index])\n\
    \        }\n    }\n    return result", "    var words: [String] = []\n    \n \
    \   if s.isEmpty {\n        return words\n    }\n    \n    if n < 0 {\n      \
    \  return words\n    }\n    \n    var consonants: [Character.Element] = [Character.A,\
    \ Character.E, Character.I, \n        Character.O, Character.U, Character.Y]\n\
    \    \n    for char in s.characters {\n        if let index = consonants.index(of:\
    \ char) {\n            words.append(s[0..<index])\n            consonants.remove(at:\
    \ index)\n        }\n    }\n    \n    for _ in 0 ..< n {\n        if let index\
    \ = consonants.first {\n            words.append(s[0..<index])\n            consonants.remove(at:\
    \ 0)\n        }\n    }\n    \n    return words", "    var list = s\n    if s.isEmpty\
    \ {\n        return nil\n    }\n    var str = \"\"\n    for c in s {\n       \
    \ str += String(char)\n    }\n    var i = 0\n    var start = 0\n    while i <\
    \ n {\n        start = str.index(str, start) + 1\n        var stop = str.index(str,\
    \ start+str.length)\n        if stop == str.length {\n            stop = len(str)\n\
    \        }\n        str = String(str[start:stop])\n        i += 1\n    }\n   \
    \ return list", "    var words = [String]()\n    for character in s.characters\
    \ {\n        var currentWord = \"\"\n        var currentCount = 0\n        if\
    \ character == \" \" {\n            currentWord = \"\"\n            currentCount\
    \ = 1\n        } else {\n            if letter != \"a\" && letter != \"e\" &&\
    \ letter != \"i\" && letter != \"o\" && letter != \"u\" && letter != \"A\" &&\
    \ letter != \"E\" && letter != \"I\" && letter != \"O\" && letter != \"U\" {\n\
    \                currentWord = currentWord + character\n                currentCount\
    \ += 1\n            }\n            if currentCount >= n {\n                words.append(currentWord)\n\
    \                currentCount = 1\n            }\n        }\n    }\n    return\
    \ words", "    var words = [String]()\n    let chars = s.characters\n\n    var\
    \ i = 0\n    while i < chars.count {\n        var isWord = true\n        var j\
    \ = 1\n        while j < chars.count {\n            if chars[i] == chars[j] {\n\
    \                isWord = true\n            } else {\n                isWord =\
    \ false\n            }\n            j += 1\n        }\n        if isWord {\n \
    \           words.append(String(chars[i]))\n            i += n\n        }\n  \
    \  }\n\n    return words", '    return ""', "    return s.split(\" \")\n    .filter(String.init(_:containsSubstring:))\n\
    \    .filter(String.init(_:containsString:).isMember)\n    .map(String.init(_:))\n\
    \    .sorted(by: { (a, b) -> Bool in\n        a == b ? (a.compare(to: b) == .orderedSame,\
    \ a.compare(to: b) == .orderedSame) : a.compare(to: b) == .orderedAscending\n\
    \    })\n    .prefix(n)", "  // Good luck!\n  return []", "\tvar words = [String]()\n\
    \t\n\twords = s.characters\n\t\n\tif n == 0 {\n\t\treturn words\n\t}\n\t\n\tletters\
    \ = words\n\t\n\tvar newWords = [String]()\n\t\n\tfor _ in 0 ..< n {\n\t\tnewWords.append(letters.removeLast())\n\
    \t}\n\t\n\tfor letter in letters {\n\t\tnewWords.append(letter)\n\t}\n\t\n\treturn\
    \ newWords", "\tvar result = [String]()\n\t\n\ts = s.lowercasedString\n\t\n\t\
    for let letter : Character in s.characters {\n\t\tvar count = 0\n\t\tfor let letter\
    \ : Character in s.characters {\n\t\t\tif letter == letter {\n\t\t\t\tcount +=\
    \ 1\n\t\t\t}\n\t\t}\n\t\tif count == n {\n\t\t\tresult.append(s.substring(with:\
    \ Range<String.Index>(start: s.startIndex.advanced(by: s.index(after: letter)),\
    \ end: s.endIndex)))\n\t\t}\n\t}\n\t\n\treturn result", "\tvar arr = [String]()\n\
    \t\n\t\n\tfor i : Int in 0 ..< s.characters.count {\n\t\t\n\t\tlet temp = s.substringWithRange(i..<i+n)\n\
    \t\t\n\t\t\n\t\tif temp.characters.count == n {\n\t\t\tarr.append(temp)\n\t\t\
    }\n\t\t\n\t\t\n\t}\n\t\n\t\n\treturn arr", "    var words = [String]()\n    \n\
    \    if s == \"\" {\n        return words\n    }\n    \n    // Convert string\
    \ s into a list of characters\n    var chars = s.characters(separatedBy: .whitespacesAndNewlines)\n\
    \    \n    for i in 0 ..< chars.count {\n        \n        // Initialize a new\
    \ String which keeps track of how many characters are used\n        var count\
    \ = String()\n        \n        for j in 0 ..< chars[i].count {\n            \n\
    \            // Increase the counter if the current character matches the current\
    \ character\n            count += chars[i][j]\n            \n            if count\
    \ == n {\n                // Add this word to the array of words\n           \
    \     words.append(chars[i][j])\n                // Reset count to zero\n    \
    \            count = String()\n            }\n        }\n    }\n    \n    return\
    \ words", "    if s.isEmpty {\n        return []\n    }\n    \n    let letters\
    \ = Array(s)\n    var result = [String]()\n    var start = 0\n    var end = s.characters.count\
    \ - n\n    \n    for _ in 0 ..< n {\n        start += 1\n        end += start\n\
    \        \n        // The search is case insensitive, so we use a range to find\
    \ our letter\n        if letters.range(of: String.init(describing: letters[start])!,\
    \ options: .caseInsensitive) != nil {\n            let word = String(letters[start...end])\n\
    \            \n            if word != \"\" {\n                result.append(word)\n\
    \            }\n        }\n    }\n    \n    return result", '    return []', " \
    \   // Good luck!\n    var result = [String]()\n\n    return result ", "    \n\
    \    // BEGIN Practice:\n    var count = 0\n    var words = [String]()\n    var\
    \ re = NSRegularExpression()\n    var ranges = [NSRange]()\n    let searchString\
    \ = \"[bcdfghjklmnpqrstvwxyz]*\"\n    let regex = try NSRegularExpression(pattern:\
    \ searchString, options: [])\n    re = regex as! NSRegularExpression\n    \n \
    \   if s == \"\" {\n        return words\n    }\n    \n    range = NSMakeRange(0,\
    \ (s.characters.count - 1))\n    let result = re.matchesInString(s, options: [],\
    \ range: range)\n    for regexResult in result {\n        let match = regexResult.rangeAtIndex(0)\n\
    \        let match = NSMakeRange(match.location, regexResult.numberOfRanges)\n\
    \        ranges.append(match)\n    }\n    \n    for i in 0...(ranges.count - 1)\
    \ {\n        let range = ranges[i]\n        let subString = s.substringWithRange(range)\n\
    \        if subString.characters.count == n {\n            words.append(subString)\n\
    \            count++\n        }\n    }\n    return words\n    ", '  return []',
  "\ts = removeWhitespace(s)\n\tvar result = [String]()\n\tif s == \"\" {\n\t\treturn\
    \ result\n\t}\n\n\t// Sort by length of string first\n\ts.characters.sort { $0.length\
    \ <-> $1.length }\n\n\t// Keep removing characters from the end of the string\n\
    \twhile s.characters.count > n {\n\t\tlet lastIndex = s.characters.count - 1\n\
    \t\tlet lastChar = s[lastIndex]\n\t\tlet lettersToRemove = s.characters.count\
    \ - n\n\t\ts.removeSubrange(lastIndex, lastIndex + lettersToRemove)\n\t\tresult.insert(lastChar,\
    \ at: lastIndex)\n\t}\n\n\treturn result", "\tvar words = [String]()\n\t\n\tif\
    \ s == \"\" {\n\t\treturn words\n\t}\n\t\n\ts = s.lowercaseString\n\t\n\tlet chars\
    \ = s.characters\n\t\n\tlet count = s.characters.filter({ $0.isLetter }).count\n\
    \t\n\tvar word = \"\"\n\t\n\tfor x in 0..<chars.count {\n\t\tlet charIndex = chars.startIndex.advanced(by:\
    \ x)\n\t\tlet currentChar = chars[charIndex]\n\t\t\n\t\tif currentChar == \" \"\
    \ {\n\t\t\twords.append(word)\n\t\t\tword = \"\"\n\t\t} else {\n\t\t\tif currentChar.isLetter\
    \ == true {\n\t\t\t\tif count == n {\n\t\t\t\t\twords.append(word)\n\t\t\t\t}\n\
    \t\t\t\tword = word + currentChar\n\t\t\t} else {\n\t\t\t\tword = word + currentChar\n\
    \t\t\t}\n\t\t}\n\t}\n\t\n\twords.append(word)\n\t\n\treturn words", "  var res\
    \ = [String]()\n  if s == \"\" {\n    return res\n  }\n  for char in s.characters\
    \ {\n    if char.hasConsonant() {\n      if res.count > n {\n        return res\n\
    \      }\n      res.append(\"\\(char)\")\n    }\n  }\n  return res", "    var\
    \ ret = [String]()\n\n    for char in s {\n        if char.isLetter() || char\
    \ == \" \" {\n            for c in char {\n                switch c {\n      \
    \          case \"a\": case \"e\": case \"i\": case \"o\": case \"u\": case \"\
    A\": case \"E\": case \"I\": case \"O\": case \"U\":\n                    break\n\
    \                case \"n\": case \"s\": case \"t\": case \"H\": case \"W\": case\
    \ \"D\": case \"T\": case \"S\": case \"K\": case \"P\": case \"F\":\n       \
    \             break\n                default:\n                    if count ==\
    \ n {\n                        ret.append(String(char))\n                    }\n\
    \                }\n                count++\n            }\n        }\n    }\n\
    \    return ret", "  if s == \"\" {\n    return []\n  }\n  var result = [String]()\n\
    \  var count = 0\n  for ch in s {\n    if count == n {\n      break\n    }\n \
    \   if letters[ch] == true {\n      count += 1\n      result.append(String(ch))\n\
    \    }\n  }\n  return result", "    if s == \"\" {\n        return []\n    }\n\
    \    if n%2 == 0 {\n        let s = s.lowercased()\n        let splitted = s.characters\n\
    \        var filtered = [String]()\n        for char in splitted {\n         \
    \   if char.lowercased() != char {\n                if char.lowercased() == \"\
    a\" {\n                    filtered = splitted\n                }\n          \
    \  }\n        }\n        return filtered\n    }\n    let s = s.lowercased()\n\
    \    let splitted = s.characters\n    var filtered = [String]()\n    for char\
    \ in splitted {\n        if char.lowercased() != char {\n            if char.lowercased()\
    \ == \"a\" {\n                filtered = splitted\n            }\n        }\n\
    \    }\n    return filtered", "    var res = makeArray()\n    var cnt = 0\n  \
    \  var lastFound = \"\"\n    var lastFoundIndex = -1\n    var j = 0\n    for i\
    \ in s.characters {\n        if i == \" \" {\n            continue\n        }\n\
    \        if cnt%2 == 0 && cnt < n {\n            // append last found word\n \
    \           if lastFoundIndex > -1 {\n                res.append(lastFound)\n\
    \            }\n            // start new string\n            lastFound = \"\"\n\
    \            cnt = 0\n            lastFoundIndex = -1\n        }\n        cnt\
    \ += 1\n        if i == \" \" {\n            continue\n        }\n        if j\
    \ == s.characters.count-1 {\n            lastFound = lastFound + String(Character(i)).lowercased()\n\
    \        } else {\n            lastFound = lastFound + String(Character(i))\n\
    \        }\n        j += 1\n    }\n    if lastFoundIndex > -1 {\n        res.append(lastFound)\n\
    \    }\n    return res", "    // Your code here\n    return []", "    var result:\
    \ [String] = []\n    if s.isEmpty {\n        return result\n    }\n    var index\
    \ = 0\n    let characters = s.characters.map({ $0.ascii })\n    for (index, element)\
    \ in characters.enumerated() {\n        if element == 9 {\n            if index\
    \ == (n-1) || index == (n+1)  {\n                result.append(s.substring(index,\
    \ characters.count))\n            }\n        }\n    }\n    return result", " \
    \   // write your code in geeksforgeeks editor here\n    var result = [String]()\n\
    \    if s != \"\" {\n        let arr = s.characters\n        var index = 0\n \
    \       while index < arr.count {\n            for char in arr {\n           \
    \     if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char\
    \ == \"u\" || char == \"y\" {\n                    result.append(String(arr[index:index+n]))\n\
    \                    index += n\n                    break\n                }\n\
    \                index += 1\n            }\n        }\n    }\n    return result",
  "    if s == \"\" {\n        return []\n    }\n\n    var result: [String] = []\n\
    \    var last = 0\n    var hasConsonant = false\n\n    for char in s.characters\
    \ {\n        if isConsonant(char) {\n            if n <= 0 {\n               \
    \ break\n            }\n            hasConsonant = true\n        }\n        if\
    \ hasConsonant {\n            if last < char {\n                last = char\n\
    \            }\n        }\n    }\n    if hasConsonant {\n        result.init(from:\
    \ s.characters, to: s.characters.index(before: last) + 1)\n    }\n\n    return\
    \ result", "    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var vowelSet\
    \ = Set(vowels)\n    \n    var vowelCounts: [Int] = [n]\n    var selectedStrings:\
    \ [String] = []\n    \n    for s in s.split() {\n        \n        if let firstLetter\
    \ = s.first,\n            let index = vowelSet.index(of: firstLetter) {\n    \
    \        vowelCounts[index] += 1\n            if vowelCounts.count == vowelCounts.maxIndex\
    \ {\n                selectedStrings.append(s)\n                vowelCounts =\
    \ Array(vowelCounts)\n            }\n        }\n    }\n    \n    return selectedStrings",
  "    \n    // TODO: select words of length n by returning an array of all words\
    \ of length n from the string s\n    \n    return []", "\treturn select_words_helper(s,\
    \ n, false)", '  return select_words(s: s, n: n, selectedWords: [:])', '  return
    []', "    // code here\n    return []", "    // Good luck!\n    \n    // BEGIN\
    \ Solution\n    \n    if s == \"\" {\n        return []\n    }\n    \n    // Create\
    \ a slice of all the consonants in the input string.\n    let consonants = NSCharacterSet.consonants\n\
    \n    var currentIndex = 0\n    var currentSubstring = \"\"\n    var substring\
    \ = \"\"\n    var finalSubstrings: [String] = []\n    \n    // Loop through the\
    \ input string and build an array of substrings containing n\n    // consonants.\n\
    \    while currentIndex < s.characters.count {\n        \n        // Add consonants\
    \ to the current substring\n        currentSubstring = currentSubstring + String(s[currentIndex])\n\
    \        \n        // If there is enough space to add the next substring\n   \
    \     if currentIndex + n <= s.characters.count {\n            // Check if the\
    \ current substring contains enough consonants to add to the \n            //\
    \ final array\n            if currentSubstring.rangeOfCharacterFromSet(consonants,\
    \ options: .CaseInsensitiveSearch, range: nil) == nil {\n                currentSubstring\
    \ = currentSubstring[1..<(currentSubstring.endIndex)]\n            }\n       \
    \ }\n        // Add the current substring to the final array\n        finalSubstrings.append(currentSubstring)\n\
    \        \n        // Increment the index\n        currentIndex++\n        \n\
    \        // Add the current substring to the current substring\n        currentSubstring\
    \ = \"\"\n        \n        // Add the next consonant to the current substring\n\
    \        currentSubstring = String(s[currentIndex])\n    }\n    \n    // Return\
    \ the final array\n    return finalSubstrings\n    \n    // END Solution", " \
    \   // Your code here\n    if s == \"\" { return [] }\n    var result = [String]()\n\
    \    var i = 0\n    var j = 0\n    for character in s {\n        let char = String(character)\n\
    \        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" ||\
    \ char == \"u\" {\n            result.append(String(s[i:j]))\n            i =\
    \ j + 1\n        }\n        if char == \"b\" || char == \"c\" || char == \"d\"\
    \ || char == \"f\" || char == \"g\" || char == \"h\" || char == \"j\" || char\
    \ == \"k\" || char == \"l\" || char == \"m\" || char == \"n\" || char == \"p\"\
    \ || char == \"q\" || char == \"r\" || char == \"s\" || char == \"t\" || char\
    \ == \"v\" || char == \"x\" || char == \"z\" {\n            result.append(String(s[i:j]))\n\
    \            i = j + 1\n        }\n        if char == \"A\" || char == \"E\" ||\
    \ char == \"I\" || char == \"O\" || char == \"U\" {\n            result.append(String(s[i:j]))\n\
    \            i = j + 1\n        }\n        if char == \"B\" || char == \"C\" ||\
    \ char == \"D\" || char == \"F\" || char == \"G\" || char == \"H\" || char ==\
    \ \"J\" || char == \"K\" || char == \"L\" || char == \"M\" || char == \"N\" ||\
    \ char == \"P\" || char == \"Q\" || char == \"R\" || char == \"S\" || char ==\
    \ \"T\" || char == \"V\" || char == \"X\" || char == \"Z\" {\n            result.append(String(s[i:j]))\n\
    \            i = j + 1\n        }\n        if char == \"1\" {\n            result.append(String(s[i:j]))\n\
    \            i = j + 1\n        }\n        if char == \"2\" {\n            result.append(String(s[i:j]))\n\
    \            i = j + 1\n        }\n        if char == \"3\" {\n            result.append(String(s[i:j]))\n\
    \            i = j + 1\n        }\n        if char == \"4\" {\n            result.append(String(s[i:j]))\n\
    \            i = j + 1\n        }\n        if char == \"5\" {\n            result.append(String(s[i:j]))\n\
    \            i = j + 1\n        }\n        if char == \"6\" {\n            result.append(String(s[i:j]))\n\
    \            i = j + 1\n        }\n        if char == \"7\" {\n            result.append(String(s[i:j]))\n\
    \            i = j + 1\n        }\n        if char == \"8\" {\n            result.append(String(s[i:j]))\n\
    \            i = j + 1\n        }\n        if char == \"9\" {\n            result.append(String(s[i:j]))\n\
    \            i = j + 1\n        }\n        if char == \"0\" {\n            result.append(String(s[i:j]))\n\
    \            ", "    let arr = s.characters.split(separator: \" \").map({ String($0)\
    \ }).sorted(by: { $0.count < $1.count })\n    return arr.filter { $0.count ==\
    \ n }.map { $0.prefix(upTo: n) }", '    return select_words(s, n, "")', "    \n\
    \    // BEGIN Practice \n    \n    var words = [String]()\n    \n    // END Practice\n\
    \    \n    return words", "    var candidates = [String]()\n    var index = 0\n\
    \    for char in s {\n        if !isConsonant(char) && n != 0 && n == index {\n\
    \            candidates.append(char)\n        }\n        index++\n    }\n    return\
    \ candidates", "    var result: [String] = []\n    var stack: [String] = s.characters\n\
    \n    for _ in 0..<n {\n        var newStack: [String] = []\n        for c in\
    \ stack {\n            if isConsonant(c) {\n                newStack.append(c)\n\
    \            } else {\n                result.appendContentsOf(newStack)\n   \
    \             result.appendContentsOf(stack)\n                newStack = []\n\
    \            }\n        }\n        if stack.isEmpty {\n            result.appendContentsOf(newStack)\n\
    \        }\n        stack = newStack\n    }\n    return result", "    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    var result =\
    \ [String]()\n\n    if s.isEmpty {\n        return result\n    }\n\n    for i\
    \ in 0..<s.count {\n        let currentChar = String(s.characters[s.startIndex.advancedBy(i)]).lowercaseString\n\
    \        if currentChar.hasPrefix(alphabet[n-1]) {\n            result.append(s[s.startIndex.advancedBy(i)])\n\
    \        }\n    }\n    return result", "    \n    var words: [String] = []\n \
    \   var currentString = \"\"\n    var isComplete = false\n    \n    for character\
    \ in s {\n        if character == \" \" {\n            if currentString != \"\"\
    \ {\n                words.append(currentString)\n                currentString\
    \ = \"\"\n            }\n        } else {\n            if isComplete == false\
    \ {\n                currentString += String(character)\n            } else {\n\
    \                if n == 0 {\n                    isComplete = true\n        \
    \        } else {\n                    n--\n                }\n            }\n\
    \        }\n    }\n    \n    if currentString != \"\" {\n        words.append(currentString)\n\
    \    }\n    \n    return words", "    var result = [String]()\n    \n    var count\
    \ = 0\n    for word in s.split(\" \") {\n        for consonant in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n            .unicodeScalars.filter({ $0.isConsonant() }) {\n            if count\
    \ < n {\n                if word == consonant.unicodeScalars {\n             \
    \       result.append(word)\n                    count += 1\n                }\n\
    \            } else {\n                break\n            }\n        }\n    }\n\
    \    \n    return result", "    \n    // Your code here\n    \n    return []",
  '    ', "    \n    if s == \"\" {\n        return []\n    }\n    \n    var result\
    \ = [String]()\n    \n    if n <= 0 {\n        return result\n    }\n    \n  \
    \  if countConsonants(s) <= n {\n        return selectString(s, n)\n    }\n  \
    \  \n    if n % 2 == 0 {\n        result = selectWords(s, n/2)\n    } else {\n\
    \        result = selectWords(s, n/2) + selectWords(s, n/2)\n    }\n    \n   \
    \ return result", "    if n <= 0 {\n        return []\n    }\n    if s == \"\"\
    \ {\n        return []\n    }\n    \n    var vowels = \"aeiouAEIOU\".characters\n\
    \    var consonants = vowels.subtracting(NSCharacterSet.init(charactersIn: \"\
    bcdfghjklmnpqrstvwxyz\"))\n    \n    var prefixes: [String] = []\n    \n    for\
    \ i in 1...n {\n        prefixes.append(s[0..<i].first!)\n    }\n    \n    var\
    \ words: [String] = []\n    \n    for prefix in prefixes {\n        \n       \
    \ var word = \"\"\n        for c in s {\n            \n            if c.isLetterOrDigit\
    \ {\n                \n                if c.isLetter {\n                    if\
    \ prefixes.contains(word) == false {\n                        words.append(word)\n\
    \                    }\n                } else {\n                    if word.containsString(prefix)\
    \ == false {\n                        words.append(word)\n                   \
    \ }\n                }\n                \n                word += c\n        \
    \        \n                if consonants.containsObject(word) {\n            \
    \        break\n                }\n                \n            } else {\n  \
    \              break\n            }\n        }\n    }\n    \n    return words",
  '    return []', "    \n    var ans = [String]()\n    for word in s.split(\" \"\
    ) {\n        \n        if word.contains(\"x\") {\n            if word.contains(\"\
    y\") && word.contains(\"z\") {\n                ans.append(word)\n           \
    \ }\n        }\n        \n        if word.contains(\"z\") {\n            ans.append(word)\n\
    \        }\n        \n        if word.contains(\"y\") {\n            if word.contains(\"\
    z\") {\n                ans.append(word)\n            }\n        }\n        \n\
    \        if word.contains(\"x\") {\n            if word.contains(\"y\") {\n  \
    \              ans.append(word)\n            }\n        }\n        \n        if\
    \ word.contains(\"u\") {\n            if word.contains(\"l\") {\n            \
    \    ans.append(word)\n            }\n        }\n        \n        if word.contains(\"\
    l\") {\n            if word.contains(\"u\") {\n                ans.append(word)\n\
    \            }\n        }\n        \n        if word.contains(\"u\") {\n     \
    \       if word.contains(\"l\") {\n                ans.append(word)\n        \
    \    }\n        }\n        \n        if word.contains(\"l\") {\n            if\
    \ word.contains(\"u\") {\n                ans.append(word)\n            }\n  \
    \      }\n        \n        if word.contains(\"f\") {\n            if word.contains(\"\
    l\") {\n                ans.append(word)\n            }\n        }\n        \n\
    \        if word.contains(\"l\") {\n            if word.contains(\"f\") {\n  \
    \              ans.append(word)\n            }\n        }\n        \n        if\
    \ word.contains(\"f\") {\n            if word.contains(\"l\") {\n            \
    \    ans.append(word)\n            }\n        }\n        \n        if word.contains(\"\
    e\") {\n            if word.contains(\"e\") {\n                ans.append(word)\n\
    \            }\n        }\n        \n        if word.contains(\"e\") {\n     \
    \       if word.contains(\"i\") {\n                ans.append(word)\n        \
    \    }\n        }\n        \n        if word.contains(\"i\") {\n            if\
    \ word.contains(\"e\") {\n                ans.append(word)\n            }\n  \
    \      }\n        \n        if word.contains(\"e\") {\n            if word.contains(\"\
    i\") {\n                ans.append(word)\n            }\n        }\n        \n\
    \        if word.contains(\"i\") {\n            if word.contains(\"e\") {\n  \
    \              ans.append(word)\n            }\n        }\n        \n        if\
    \ word.contains(\"n\") {\n            if word.contains(\"o\") {\n            \
    \    ans.append(word)\n            }\n        }\n        \n        if word.contains(\"\
    o\") {\n            if word.contains(\"n\") {\n                ans.append(word)\n\
    \            }\n        }\n        \n        if word.contains(\"n\") {\n     \
    \       if word.contains(\"o\") {\n                ans.append(word)\n        \
    \    }\n        }\n        \n        if word.contains(\"o\") {\n            if\
    \ word.contains(\"n\") {\n                ans.append(word)\n            }\n  \
    \      }", "    var ans = [String]()\n    if s == \"\" {\n        return ans\n\
    \    }\n    \n    // Find the number of consonants in the string.\n    var consonants\
    \ = 0\n    for ch in s {\n        if ch.isUpper() {\n            break\n     \
    \   }\n        consonants++\n    }\n    \n    // Add the first word that matches\
    \ n consonants.\n    var pos = 0\n    while pos < len(s) {\n        \n       \
    \ if s[pos].isUpper() {\n            consonants--\n            break\n       \
    \ }\n        pos++\n    }\n    \n    if consonants == n {\n        ans = append(ans,\
    \ s[pos+1:])\n    }\n    \n    // Find the last word that matches n consonants.\n\
    \    pos = 0\n    while pos < len(s) {\n        \n        if s[pos].isLower()\
    \ {\n            consonants++\n            break\n        }\n        pos++\n \
    \   }\n    \n    if consonants == n {\n        ans = append(ans, s[pos...])\n\
    \    }\n    \n    return ans", "    var a = [String]()\n    for word in s.split(\"\
    \ \") {\n        if count (word) == n {\n            a.append(word)\n        }\n\
    \    }\n    return a", "    return words.filter({ subs -> Bool in\n        return\
    \ subs.contains(s)\n    }).filter({ subs -> Bool in\n        return subs.count\
    \ == n\n    }).sorted()", "\tguard n > 0 && n < words.count else { return [] }\n\
    \tvar words = [String]()\n\tvar word = \"\"\n\tfor i := 0; i < s.count; i++ {\n\
    \t\tword = word + String(s.characters[i])\n\t\tif words.count <= n {\n\t\t\twords.append(word)\n\
    \t\t}\n\t\tif i == s.count - 1 {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn words", " \
    \   var words = [String]()\n    for char in s {\n        if char.unicodeScalars.count\
    \ == 1 {\n            let first = char.unicodeScalars.first\n            let last\
    \ = char.unicodeScalars.last\n            if last - first == n {\n           \
    \     words.append(String(first))\n            }\n        }\n    }\n    return\
    \ words", "    \n    return []", "    var result = [String]()\n    if s.isEmpty\
    \ {\n        return result\n    }\n\n    // Split string\n    var words = s.componentsSeparatedByString(\"\
    \ \")\n    var listCount = 0\n    var nextCount = words.count\n\n    // Get words\n\
    \    for i in 0..<nextCount {\n        let word = words[i]\n        let letterCount\
    \ = word.characters.count\n        if (letterCount == n) {\n            result.append(word)\n\
    \            listCount += 1\n        }\n    }\n    if listCount == nextCount {\n\
    \        return result\n    }\n    return result", "    let words = s.components(separatedBy:\
    \ \" \")\n    \n    var results = [String]()\n    for word in words {\n      \
    \  var isCount = false\n        for letter in word {\n            switch letter\
    \ {\n            case \"a\": isCount = true; break\n            case \"e\": isCount\
    \ = true; break\n            case \"i\": isCount = true; break\n            case\
    \ \"o\": isCount = true; break\n            case \"u\": isCount = true; break\n\
    \            default: isCount = false; break\n            }\n        }\n     \
    \   \n        if isCount {\n            if words.count > n {\n               \
    \ results.append(word)\n            }\n        } else {\n            if words.count\
    \ == n {\n                results.append(word)\n            }\n        }\n   \
    \ }\n    \n    return results", "    let alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    .characters\n    \n    var result: [String] = []\n    \n    // Check base case\n\
    \    if s == \"\" {\n        return result\n    }\n    \n    // Get the first\
    \ n characters\n    let firstChar = s[0...n]\n    \n    // Check each character\
    \ for consonants\n    for char in alphabet {\n        if let index = s.index(char,\
    \ options: .caseInsensitive) {\n            let word = String(s[0...index])\n\
    \            \n            // Found a consonant?\n            if word.hasSuffix(\"\
    a\") {\n                if word.hasPrefix(firstChar) {\n                    result.append(word)\n\
    \                }\n            }\n        }\n    }\n    \n    return result",
  "    var result : [String] = []\n    var curPos : Int = Int(0)\n    for c in s.unicodeScalars\
    \ {\n        if c.value > '\\u{10FFFF}' {\n            break\n        }\n    \
    \    if c.value == n.0 {\n            if curPos < len(s) {\n                result.append(s[curPos])\n\
    \            }\n            curPos += 1\n        } else {\n            curPos\
    \ += 1\n        }\n    }\n    return result", "    let words = words.filter({\
    \ $0.containsString(s) })\n    return words.prefix(n)", '    return s.split(separator:
    " ").filter({ $0.hasPrefix("\u{0020}") }).flatMap{$0.dropFirst(1).split(separator:
    " ").filter{$0.isPrefix("\u{0020}") }.countApprox(n) == n', "\tswitch {\n\tcase\
    \ s == \"\":\n\t\treturn []\n\tdefault:\n\t\tvar result [String] = []\n\t\tfor\
    \ (_, subString) in s.splitWithSeparator(\" \") {\n\t\t\tif words.contains(subString)\
    \ {\n\t\t\t\tif select_words(subString, n) == n {\n\t\t\t\t\tresult.append(subString)\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result\n\t}", "    // Good luck!\n    return\
    \ []", "\tswitch {\n\tcase n < 0: return []\n\tcase n == 0: return []\n\tcase\
    \ n == 1: return words.filter{ $0.hasConsonant() }\n\tdefault:\n\t\tlet words\
    \ = s.words\n\t\treturn words.filter{ $0.hasConsonant() == n }\n\t}", "    var\
    \ words = [String]()\n    \n    // Only proceed if there are characters in the\
    \ string\n    if s.characters.count > 0 {\n        // Iterate through each letter\
    \ of the string\n        for letter in s.characters.reverse() {\n            //\
    \ If the letter is not a space\n            if letter != ' ' {\n             \
    \   // If the letter doesn't meet the requirement\n                if letter.isConsonant()\
    \ == false {\n                    // Add it to the array of words\n          \
    \          words.append(String(letter))\n                    // If the number\
    \ of characters equals the requirement then break\n                    if letter\
    \ == s.characters[s.characters.count-1] {\n                        break\n   \
    \                 }\n                }\n            }\n        }\n    }\n    return\
    \ words", "    if s.isEmpty {\n        return []\n    }\n\n    // Initialize result\
    \ array\n    var result: [String] = []\n\n    // Find the length of the string\n\
    \    let charCount = s.characters.count\n\n    // Initialize count of consonants\n\
    \    var consonantCount = 0\n\n    // Iterate through string\n    for i in 0..<charCount\
    \ {\n\n        // Get the character at index\n        let char = String(s.characters[i])\n\
    \n        // If char is a consonant\n        if char.rangeOfCharacter(from: .letters)\
    \ != nil {\n            consonantCount += 1\n        }\n\n        // If the count\
    \ of consonants equals the number of consonants\n        // asked for\n      \
    \  if consonantCount == n {\n            result.append(String(s.substringWithRange(advance(s.startIndex,\
    \ i))))\n        }\n    }\n\n    return result", "    var result = [String]()\n\
    \    \n    // base case if string is empty\n    guard s.isEmpty else {\n     \
    \   return nil\n    }\n    \n    // if string is smaller than n, just return empty\
    \ array\n    if n < 0 {\n        return result\n    }\n    \n    // find first\
    \ consonant in the string\n    var index = s.startIndex\n    guard s[index] ==\
    \ \" \"\n    else {\n        let index = s.startIndex\n        let firstConsonant\
    \ = index\n        let secondConsonant = index + 1\n        let thirdConsonant\
    \ = index + 1\n        let fourthConsonant = index + 1\n        let fifthConsonant\
    \ = index + 1\n        let sixthConsonant = index + 1\n        \n        // while\
    \ index less than end of string\n        while index < s.endIndex {\n        \
    \    // if current character is vowel\n            if s[index] != \" \" {\n  \
    \              // if current index is less than current consonant\n          \
    \      guard index < firstConsonant else {\n                    // if current\
    \ consonant is not n, add it to result and move index\n                    if\
    \ index > firstConsonant && index < secondConsonant {\n                      \
    \  result.append(s[index])\n                        index++\n                \
    \    } else if index > secondConsonant && index < thirdConsonant {\n         \
    \               result.append(s[index])\n                        index++\n   \
    \                 } else if index > thirdConsonant && index < fourthConsonant\
    \ {\n                        result.append(s[index])\n                       \
    \ index++\n                    } else if index > fourthConsonant && index < fifthConsonant\
    \ {\n                        result.append(s[index])\n                       \
    \ index++\n                    } else if index > fifthConsonant && index < sixthConsonant\
    \ {\n                        result.append(s[index])\n                       \
    \ index++\n                    } else {\n                        index++\n   \
    \                 }\n                }\n            } else if s[index] == \" \"\
    \ {\n                index++\n            }\n        }\n    }\n    \n    // if\
    \ the return is empty then return nil, else append rest of string as result\n\
    \    if result.isEmpty {\n        return nil\n    } else {\n        result.append(s.suffixFrom(firstConsonant))\n\
    \    }\n    \n    return result", "    if s == \"\" {\n        return []\n   \
    \ }\n    let r = s.characters.reduce([String](), combine: { (a, b) -> [String]\
    \ in\n        let s = a.characters.filter({$0 == \"a\" || $0 == \"e\" || $0 ==\
    \ \"i\" || $0 == \"o\" || $0 == \"u\" })\n        var b = b\n        if b.characters.count\
    \ > n {\n            b = b.characters.filter({$0 != \"a\" && $0 != \"e\" && $0\
    \ != \"i\" && $0 != \"o\" && $0 != \"u\"})\n        }\n        return a + b\n\
    \    })\n    return r.filter({$0.characters.count == n})", "    if s.isEmpty {\n\
    \        return []\n    }\n    var result: [String] = []\n    var firstIndex =\
    \ 0\n    var lastIndex = 0\n    var currentWord = \"\"\n    for currentIndex in\
    \ 0..<s.count {\n        if s[currentIndex].isLetter {\n            currentWord\
    \ += s[currentIndex]\n            if currentIndex == s.count - 1 {\n         \
    \       if currentWord.hasSuffix(n) {\n                    result = append(result,\
    \ currentWord)\n                }\n                firstIndex = currentIndex +\
    \ 1\n                currentWord = \"\"\n            } else {\n              \
    \  currentWord += \" \"\n            }\n        } else {\n            if currentWord\
    \ != \"\" {\n                if currentWord.hasSuffix(n) {\n                 \
    \   result = append(result, currentWord)\n                }\n                firstIndex\
    \ = currentIndex + 1\n                currentWord = \"\"\n            }\n    \
    \    }\n    }\n    if currentWord != \"\" {\n        result = append(result, currentWord)\n\
    \    }\n    return result", "    // M1. \u6A21\u62DF\n    \n    // \u9996\u5148\
    \u6309\u7167\u5B57\u7B26\u4E32\u7684\u957F\u5EA6\u62C6\u5206\u51FA\u6700\u5927\
    \u7684\u5B57\u7B26\u4E32\u957F\u5EA6\n    let maxLen = s.characters.count\n  \
    \  if n == 0 {\n        return []\n    }\n    \n    // \u7136\u540E\u6309\u7167\
    n\u7684\u6B21\u65B9\u62C6\u5206\u51FA\u6700\u5927\u7684\u5B57\u7B26\u4E32\u957F\
    \u5EA6\n    var maxCount = 0\n    var maxStr = \"\"\n    for _ in 0 ..< n {\n\
    \        maxCount += maxLen\n        let newMax = maxCount / n\n        if newMax\
    \ > maxLen {\n            maxCount = maxLen\n            maxStr = String(s.characters.suffix(maxLen))\n\
    \        } else {\n            maxStr = String(s.characters.suffix(newMax))\n\
    \        }\n    }\n    \n    // \u7136\u540E\u8FD4\u56DE\u6700\u5927\u5B57\u7B26\
    \u4E32\n    let strArr = s.characters.filter{ str in\n        let idx = s.indexOf(str,startIndex:\
    \ s.startIndex)\n        return idx == maxLen\n    }\n    return strArr", "  \
    \  let words = s.characters.split {\n        CharacterSet.consonants.contains($0)\n\
    \    }.map {\n        if let index = s.index($0) {\n            s.substring(from:\
    \ index)\n        } else {\n            \"\"\n        }\n    }.filter { $0.characters.count\
    \ == n }\n    return words.map { String($0) }", "    switch {\n    case s == \"\
    \":\n        return []\n    case n == 0:\n        return []\n    case n == 1:\n\
    \        return s.split(\" \")\n    case s.isEmpty():\n        return []\n   \
    \ default:\n        var result = [String]()\n        \n        for i in 0 ..<\
    \ s.characters.count {\n            let char = s.characters.element(i)\n     \
    \       \n            if char.isConsonant() {\n                if n == 2 {\n \
    \                   let n = 2\n                    \n                    for s\
    \ in s.split(\" \") {\n                        if s.characters.count >= n {\n\
    \                            result.append(s)\n                        }\n   \
    \                 }\n                    \n                } else {\n        \
    \            result.append(s)\n                }\n            }\n        }\n \
    \       \n        return result\n    }", "    var ans = []\n    var last = 0\n\
    \n    for letter in s {\n        if last == n {\n            ans.append(s[last..<s.endIndex])\n\
    \            last = s.endIndex\n        }\n        if last < s.endIndex && letter\
    \ == s[last] {\n            last = last + 1\n        }\n    }\n    return ans",
  "    return s.split(separator: \" \").filter{ word in\n        guard word.count\
    \ <= n else { return false }\n        let vowels = \"aeiou\".split(separator:\
    \ \"\")\n        return word.hasPrefix(vowels.contains({$0.isUpper}))\n    }",
  "    \n    var words : [String] = []\n    \n    // TODO: Write your code here\n\
    \    return words", "    var result : [String] = []\n    for word in s.split(\"\
    \ \") {\n        let letters = word.characters.split(\"\")\n        let count\
    \ = letters.filter({ $0 == \"c\" || $0 == \"C\" || $0 == \"d\" || $0 == \"D\"\
    \ || $0 == \"h\" || $0 == \"H\" || $0 == \"l\" || $0 == \"L\" || $0 == \"s\" ||\
    \ $0 == \"S\" || $0 == \"z\" || $0 == \"Z\"}).count\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result", "    var\
    \ wordsArray = [String]()\n    for character in s {\n        if character == \"\
    \ \" || character == \"\\t\" {\n            continue\n        }\n        for j\
    \ in 0 ... n {\n            if let index = string.index(of: character) {\n   \
    \             wordsArray.append(s.prefix(upTo: index))\n                break\n\
    \            }\n        }\n    }\n    return wordsArray", "    var arr = [String]()\n\
    \    for i in 1...n {\n        for j in s.characters {\n            if i != n\
    \ {\n                if j == \" \" {\n                    arr.append(\" \")\n\
    \                } else {\n                    if i == 1 {\n                 \
    \       if Character(j) == \"a\" || Character(j) == \"e\" || Character(j) == \"\
    i\" {\n                            arr.append(j)\n                        }\n\
    \                    } else if i == 2 {\n                        if Character(j)\
    \ == \"o\" || Character(j) == \"u\" || Character(j) == \"y\" {\n             \
    \               arr.append(j)\n                        }\n                   \
    \ } else if i == 3 {\n                        if Character(j) == \"y\" || Character(j)\
    \ == \"a\" || Character(j) == \"e\" || Character(j) == \"i\" || Character(j) ==\
    \ \"o\" {\n                            arr.append(j)\n                       \
    \ }\n                    }\n                }\n            }\n        }\n    }\n\
    \    return arr", "    \n    let chars = s.characters;\n    var result = \"\"\
    ;\n    var i = 0;\n    \n    while i < chars.count {\n        let char = chars[i];\n\
    \        \n        if let foundIndex = char.countConsonants(of: chars, range:\
    \ NSMakeRange(i, char.count)) {\n            if foundIndex <= n {\n          \
    \      result += String(chars[i ..< foundIndex])\n                i += foundIndex\
    \ - i;\n            } else {\n                result += String(chars[i ..< char.count])\n\
    \                i += char.count - i;\n            }\n        } else {\n     \
    \       result += String(chars[i ..< char.count])\n            i += char.count\
    \ - i;\n        }\n    }\n    \n    return result.characters.split{$0 == \" \"\
    }.map(String.init)", "    // TODO: use map to return [String]\n    var words =\
    \ [String]()\n\n    for char in s.characters {\n        if char.consonant {\n\
    \            var word = \"\"\n            for _ in 0..<n {\n                word\
    \ += String(char)\n            }\n            words.append(word)\n        }\n\
    \    }\n\n    return words", "    \n    var res: [String] = []\n    if s.isEmpty{\n\
    \        return res\n    }\n    var prevChar: Character = \"a\"\n    for i in\
    \ s.characters{\n        if i == prevChar {\n            continue\n        }\n\
    \        \n        var newWord = String()\n        \n        if prevChar == \"\
    s\" {\n            newWord += String(i)\n            prevChar = String(i) + \"\
    a\"\n        }\n        \n        if prevChar == \"z\" {\n            newWord\
    \ += \"z\"\n            prevChar = \"a\"\n        }\n        if prevChar == \"\
    z\" {\n            newWord += String(i)\n            prevChar = String(i) + \"\
    a\"\n        }\n        \n        if prevChar == \"y\" {\n            newWord\
    \ += String(i)\n            prevChar = String(i) + \"a\"\n        }\n        \n\
    \        if prevChar == \"a\" {\n            newWord += String(i)\n          \
    \  prevChar = String(i) + \"a\"\n        }\n        \n        if prevChar == \"\
    w\" {\n            newWord += String(i)\n            prevChar = String(i) + \"\
    a\"\n        }\n        \n        if prevChar == \"u\" {\n            newWord\
    \ += String(i)\n            prevChar = String(i) + \"a\"\n        }\n        \n\
    \        if prevChar == \"k\" {\n            newWord += String(i)\n          \
    \  prevChar = String(i) + \"a\"\n        }\n        \n        if prevChar == \"\
    b\" {\n            newWord += String(i)\n            prevChar = String(i) + \"\
    a\"\n        }\n        \n        if prevChar == \"v\" {\n            newWord\
    \ += String(i)\n            prevChar = String(i) + \"a\"\n        }\n        \n\
    \        if prevChar == \"m\" {\n            newWord += String(i)\n          \
    \  prevChar = String(i) + \"a\"\n        }\n        \n        if prevChar == \"\
    d\" {\n            newWord += String(i)\n            prevChar = String(i) + \"\
    a\"\n        }\n        \n        if prevChar == \"r\" {\n            newWord\
    \ += String(i)\n            prevChar = String(i) + \"a\"\n        }\n        \n\
    \        if prevChar == \"j\" {\n            newWord += String(i)\n          \
    \  prevChar = String(i) + \"a\"\n        }\n        \n        if prevChar == \"\
    l\" {\n            newWord += String(i)\n            prevChar = String(i) + \"\
    a\"\n        }\n        \n        if prevChar == \"m\" {\n            newWord\
    \ += String(i)\n            prevChar = String(i) + \"a\"\n        }\n        \n\
    \        if prevChar == \"e\" {\n            newWord += String(i)\n          \
    \  prevChar", "    var result = [String]()\n    \n    let array = s.characters\n\
    \    for i in 0 ..< array.count {\n        if array[i].isConsonant() {\n     \
    \       if n > 0 && array[i].isConsonant() {\n                result.appendContentsOf(Array(array[i+1..<array.count]).filter({$0\
    \ == \" \"}))\n                n -= 1\n            } else {\n                result.append(array[i])\n\
    \            }\n        }\n    }\n    \n    return result", "    // TODO\n   \
    \ \n    return []", '    return wordsWithConsonantsThatAppearAtLeastNTimes(s,
    n: n)', "    var result = [String]()\n    \n    if s == \"\" {\n        return\
    \ result\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == \"\
    a\" || s[i] == \"e\" || s[i] == \"i\" || s[i] == \"o\" || s[i] == \"u\" {\n  \
    \          result = append(result, s[0 : i])\n        }\n    }\n    \n    for\
    \ i := 0; i < len(result); i++ {\n        for j := 0; j < n; j++ {\n         \
    \   if result[i][i] == \"a\" || result[i][i] == \"e\" || result[i][i] == \"i\"\
    \ || result[i][i] == \"o\" || result[i][i] == \"u\" {\n                result.removeAtIndex(i)\n\
    \                i = i - 1\n            }\n        }\n    }\n    \n    return\
    \ result", "    \n    // Your code here\n    \n    return []", "    let words\
    \ = [String]()\n    let vowels = \"AEIOUaeiou\".unicodeScalars\n    let consDigits\
    \ = [Character(UnicodeScalar(\"0\".unicodeScalars.first!)), \n               \
    \       Character(UnicodeScalar(\"1\".unicodeScalars.first!)),\n             \
    \         Character(UnicodeScalar(\"2\".unicodeScalars.first!)),\n           \
    \           Character(UnicodeScalar(\"3\".unicodeScalars.first!)),\n         \
    \             Character(UnicodeScalar(\"4\".unicodeScalars.first!)),\n       \
    \               Character(UnicodeScalar(\"5\".unicodeScalars.first!)),\n     \
    \                 Character(UnicodeScalar(\"6\".unicodeScalars.first!)),\n   \
    \                   Character(UnicodeScalar(\"7\".unicodeScalars.first!)),\n \
    \                     Character(UnicodeScalar(\"8\".unicodeScalars.first!)),\n\
    \                      Character(UnicodeScalar(\"9\".unicodeScalars.first!))]\n\
    \    \n    let vowelAndDigits =\n        (vowels + consDigits).unicodeScalars\n\
    \        .filter { \n            (s.rangeOfString($0.unicodeScalars.first!) !=\
    \ nil)\n        }\n        \n    let vowelsAndConsDigits =\n        vowelAndDigits.filter\
    \ { \n            vowelAndDigits.contains{$0.unicodeScalars.first!.unicodeScalars.first!\
    \ in\n                vowels.unicodeScalars\n            }\n        }\n    \n\
    \    if vowelsAndConsDigits.count == 0 {\n        return words\n    }\n    \n\
    \    let firstParts = vowelsAndConsDigits.prefix(n)\n    let remainingParts =\
    \ vowelsAndConsDigits.suffix(n)\n    \n    for (i, word) in firstParts.enumerated()\
    \ {\n        if remainingParts.contains(word) {\n            words.append(word)\n\
    \        }\n    }\n    \n    return words", '    return []', '    return []',
  "    \n    let characters = s.characters()\n    let alphabet = CharacterSet.letters\n\
    \    \n    var result = [String]()\n    \n    if s.isEmpty {\n        return result\n\
    \    }\n    \n    for char in characters {\n        if !alphabet.contains(char)\
    \ {\n            break\n        }\n    }\n    \n    if n == 0 {\n        return\
    \ result\n    }\n    \n    if n == 1 {\n        return [\"\\(n) \" + s]\n    }\n\
    \    \n    if n == 2 {\n        var words: [String] = []\n        \n        for\
    \ char in characters {\n            if alphabet.contains(char) {\n           \
    \     words.append(String(char))\n            }\n        }\n        \n       \
    \ return words\n    }\n    \n    for char in characters {\n        if !alphabet.contains(char)\
    \ {\n            let newWords = select_words(s, n - 1)\n            let newWordsString\
    \ = String(newWords)\n            \n            for word in words {\n        \
    \        if word == \"\\(n) \" + s {\n                    result.insert(newWordsString,\
    \ 0)\n                }\n            }\n        }\n    }\n    \n    return result",
  "\tresult := []String()\n\t\n\tif s == \"\" {\n\t\treturn result\n\t}\n\n\twords\
    \ := count_letters(s)\n\tif words == 0 {\n\t\treturn result\n\t}\n\n\tindex :=\
    \ 0\n\tletters := count_letters(s)\n\twhile index < len(s) {\n\t\tif letters ==\
    \ n {\n\t\t\tbreak\n\t\t}\n\n\t\tletters = letters - 1\n\t\tresult = append(result,\
    \ s[index: index+1])\n\t\tindex = index + 1\n\t}\n\n\treturn result", "    if\
    \ s == \"\" {\n        return []\n    }\n    \n    func checkWord(word: String)\
    \ -> Bool {\n        var counter: Int = 0\n        for character in word {\n \
    \           if character == \"a\" || character == \"e\" || character == \"i\"\
    \ || character == \"o\" || character == \"u\" {\n                counter += 1\n\
    \            }\n        }\n        if counter == n {\n            return true\n\
    \        }\n        return false\n    }\n    \n    var splits: [String] = []\n\
    \    \n    for character in s {\n        if character == \" \" {\n           \
    \ for s in splits {\n                splits.append(s)\n            }\n       \
    \     splits.removeAll()\n            continue\n        }\n        \n        if\
    \ checkWord(character) {\n            splits.append(character)\n        }\n  \
    \  }\n    \n    return splits", "    let result: [String] = []\n    for i in 0..<s.length\
    \ {\n        if s[i].isConsonant() && s[i] != ' ' {\n            result += [s.substringWithRange(i..<i+n)]\n\
    \        }\n    }\n    return result", "    var result : [String] = []\n    \n\
    \    // write your code in here\n    \n    return result", "    // BEGIN Question\
    \ 3\n    var result = [String]()\n    for let c : Characters in s.characters {\n\
    \        if s.characters.count > n {\n            return result\n        }\n \
    \       if c == \" \" {\n            continue\n        }\n        if c.isVowel\
    \ {\n            if s.characters.count > n {\n                return result\n\
    \            }\n            if s.characters.count < n {\n                return\
    \ []\n            }\n            if count > n {\n                return result\n\
    \            }\n            if count < n {\n                return []\n      \
    \      }\n        }\n        if c.isConsonant {\n            if s.characters.count\
    \ > n {\n                return result\n            }\n            if s.characters.count\
    \ < n {\n                return []\n            }\n            if count > n {\n\
    \                return result\n            }\n            if count < n {\n  \
    \              return []\n            }\n        }\n    }\n    return result\n\
    \    // END Question 3", "\treturn []", "\tvar arr = s.characters\n\tvar start\
    \ = 0\n\tvar result = [String]()\n\tfor start < s.characters.count {\n\t\tlet\
    \ found = find(arr, start, n)\n\t\tresult = append(result, arr[start...found])\n\
    \t\tstart = found + 1\n\t}\n\treturn result", "    if n == 0 { \n        return\
    \ []\n    }\n    let mut chars = s.chars();\n    let mut i = 1;\n    let mut words:\
    \ [[String]] = [[]];\n    while i < chars.count {\n        if chars[i] == ' '\
    \ || chars[i] == ' ' && i != chars.count - 1 {\n            words[chars[i-1].intValue()].push(String(chars[i:i+n]))\n\
    \        }\n        i += n;\n    }\n    return words.map({ $0.joinWithSeparator(\"\
    \ \") }).filter({ !$0.isEmpty() })", "    // Good luck!\n    return []", "   \
    \ if s == \"\" {\n        return []\n    }\n    var words: [String] = []\n   \
    \ var i = 0\n    var j = 0\n    for c in s {\n        if c == \" \" {\n      \
    \      i += 2\n            j = 0\n        } else if i == n {\n            words.append(s[i\
    \ ..< j])\n            j = 0\n        } else {\n            i += 1\n        }\n\
    \    }\n    return words", '    return select_words_c(s, n)', "    var ret = [String]()\n\
    \    var index = 0\n    while index < s.characters.count {\n        let word =\
    \ String(s.characters[index..<index+n])\n        if word.hasPrefix(String(Character.consonantsSet))\
    \ {\n            ret.append(word)\n            index += n\n        }\n    }\n\
    \    return ret", "    // BEGIN PSEUDOCODE\n    let count = count_consonants(s)\n\
    \    var strs: [String] = []\n    \n    // Loop over all words in strs.\n    for\
    \ str in strs {\n        // Loop over all characters in str.\n        for char\
    \ in str {\n            // If character is consonant.\n            if count ==\
    \ n {\n                // Add str to strs.\n                strs.append(str)\n\
    \            }\n        }\n    }\n    \n    return strs\n    // END PSEUDOCODE",
  "    var result = [String]()\n    var i = 0\n    while i < s.count {\n        var\
    \ current = s.substring(i, i+n)\n        if current.characters.count < n {\n \
    \           result.appendContentsOf(split(current))\n        }\n        i += n\n\
    \    }\n    return result", "    var result : [String] = []\n    if s == \"\"\
    \ {\n        return result\n    }\n    let regex = try NSRegularExpression(pattern:\
    \ \"[^\" + s.lowercaseString  + \"]\", options: [])\n    if let matches = regex.matches(in:\
    \ s, range: NSMakeRange(0, s.characters.count)) {\n        for match in matches\
    \ {\n            let start = match.rangeAt(0)\n            let end = match.rangeAt(match.numberOfRanges)\n\
    \            if end - start == n {\n                result.append(s.substring(with:\
    \ start))\n            }\n        }\n    }\n    return result", "    var ret:\
    \ [String] = [nil]\n    for i in 0..<s.characters.count {\n        var tmp: [String]\
    \ = []\n        for j in 0..<n {\n            tmp.append(s.substringWithRange(NSMakeRange(i,\
    \ j+1)))\n        }\n        ret = tmp\n    }\n    return ret", "\tif n == 0 {\
    \ return [] }\n\n\tlet words = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"\
    ,\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\"\
    ,\"v\",\"w\",\"x\",\"y\",\"z\"]\n\tvar out = [String]()\n\t\n\tif s == \"\" {\n\
    \t\treturn out\n\t}\n\t\n\tlet count = [String: Int]()\n\tfor letter in s {\n\t\
    \tlet count = count[letter]\n\t\tif count == nil {\n\t\t\tcount = 1\n\t\t} else\
    \ {\n\t\t\tcount = count + 1\n\t\t}\n\t\tcount[letter] = count\n\t}\n\t\n\tfor\
    \ letter in words {\n\t\tlet count = count[letter]\n\t\tif count == n {\n\t\t\t\
    out.insert(letter, at: 0)\n\t\t}\n\t}\n\t\n\treturn out", "    let arr = s.characters.split{$0\
    \ == \" \"}.map(String.init)\n    let arr = arr.filter{$0.characters.count >=\
    \ n}.sort{$0.characters.count < $1.characters.count}\n    return arr.reverse()",
  '    return []', "\tvar arr: [String] = []\n\tfor i := 0; i < len(s); i++ {\n\t\t\
    if s.hasConsonant(s[i]) {\n\t\t\tarr = append(arr, s[0..i])\n\t\t}\n\t}\n\treturn\
    \ arr", "    let n = n as Int\n    if s == \"\" {\n        return []\n    }\n\
    \    var res = [String]()\n    var i = 0\n    for c in s {\n        if i > n {\n\
    \            break\n        }\n        if (c == \"a\" || c == \"e\" || c == \"\
    i\" || c == \"o\" || c == \"u\") {\n            i += 1\n            continue\n\
    \        }\n        if c == \" \" || c == \"\\t\" || c == \"\\n\" || c == \"\\\
    r\" {\n            i += 1\n            continue\n        }\n        if (c == \"\
    n\" || c == \"t\" || c == \"m\" || c == \"d\" || c == \"k\" || c == \"b\" || c\
    \ == \"p\" || c == \"f\") {\n            res.insert(s.substringWithRange(i..<s.count),\
    \ at: 0)\n            i = s.endIndex\n            continue\n        }\n      \
    \  res.insert(s.substringWithRange(i..<s.count), at: 0)\n        i = s.endIndex\n\
    \    }\n    return res", "    // M1. \u6A21\u62DF\n    \n    // \u9996\u5148\u6309\
    \u7167 s \u5B57\u7B26\u4E32\u7684\u957F\u5EA6\u8FDB\u884C\u5224\u65AD, \u5982\u679C\
    \u957F\u5EA6\u4E0D\u8DB3 n \u5219\u8FD4\u56DE\u7A7A\u6570\u7EC4\n    let maxLength:\
    \ Int = s.characters.count\n    let returnArray: [String] = []\n    let count\
    \ = n\n    for index in 0..<maxLength {\n        if s.characters.count - index\
    \ < count {\n            returnArray.append(\"\")\n        } else {\n        \
    \    returnArray.append(String(s.characters[index..<index+count]))\n        }\n\
    \    }\n    \n    // \u7136\u540E\u8FDB\u884C\u7B5B\u9009, \u5982\u679C count\
    \ \u5927\u4E8E n \u5219\u7B5B\u9009\u5931\u8D25\u8FD4\u56DE\u7A7A\u6570\u7EC4\n\
    \    if count > n {\n        return returnArray\n    }\n    \n    // M2. \u76F4\
    \u63A5\u7528 Swift \u7684\u96C6\u5408\u7684\u65B9\u6CD5\n    \n    // \u7B5B\u9009\
    \ s \u4E2D\u7B26\u5408\u6761\u4EF6\u7684\u5B57\u7B26\u4E32\n    var filtered:\
    \ [String] = []\n    s.characters.forEach({ c in\n        if c == \" \" || c ==\
    \ \"\\n\" || c == \"\\r\" || c == \"\\t\" {\n            return\n        }\n \
    \       if let index = s.indexOf(c) {\n            if index == 0 || index == s.characters.count\
    \ - 1 {\n                return\n            }\n            let subStr = String(s.characters.index(after:\
    \ index+1)..<s.characters.index(before: index))\n            filtered = filtered.filter\
    \ { subStr != $0 }\n        }\n    })\n    return filtered", "    // Your code\
    \ here\n    let split = s.split(separator: \" \")\n    return split.filter({ $0.contains(\"\
    a\") || $0.contains(\"e\") || $0.contains(\"i\") || $0.contains(\"o\") || $0.contains(\"\
    u\") }).map{ String($0).trimmingCharacters(in: CharacterSet.letters) }", '    ',
  "    var result = Array(repeating: \"Uncle\", count: n)\n    \n    if s.isEmpty\
    \ {\n        return result\n    }\n    \n    var pos = 0\n    var charCount =\
    \ 0\n    var startIndex = s.startIndex\n    \n    for char in s { // count consonants\
    \ in substring of s\n        if char == \"a\" || char == \"e\" || char == \"i\"\
    \ || char == \"o\" || char == \"u\" {\n            charCount++\n        }\n  \
    \  }\n    \n    // count consonants in substring of s\n    for char in s { //\
    \ count consonants in substring of s\n        if char == \"a\" || char == \"e\"\
    \ || char == \"i\" || char == \"o\" || char == \"u\" {\n            charCount++\n\
    \        }\n    }\n    \n    if charCount == n {\n        for char in s { // count\
    \ consonants in substring of s\n            if char == \"a\" || char == \"e\"\
    \ || char == \"i\" || char == \"o\" || char == \"u\" {\n                result.insert(s.startIndex.advancedBy(pos),\
    \ char)\n            }\n            pos += 1\n        }\n    } else {\n      \
    \  result.insert(s.startIndex, \"\")\n        for char in s { // count consonants\
    \ in substring of s\n            if char == \"a\" || char == \"e\" || char ==\
    \ \"i\" || char == \"o\" || char == \"u\" {\n                result.insert(s.startIndex.advancedBy(pos),\
    \ char)\n            }\n            pos += 1\n        }\n    }\n    \n    return\
    \ result", "    // TODO: implement me\n    return []", "    \n    var letters\
    \ = [String]()\n    \n    for letter in s.characters {\n        if letter != \"\
    \ \" {\n            if letters.count <= n {\n                letters.append(letter)\n\
    \            }\n            \n            if letters.count == n {\n          \
    \      return letters\n            }\n            \n        } else {\n       \
    \     return []\n        }\n    }\n    \n    return []", "    if s == \"\" {\n\
    \        return []\n    }\n    if n == 0 {\n        return [s]\n    }\n    var\
    \ words = [s]\n    for i in 1..<n {\n        words = append(words, filterWords(s,\
    \ i))\n    }\n    return words", "    var a: [String] = []\n    for char in s\
    \ {\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"\
    o\" || char == \"u\" {\n            for letter in char {\n                if let\
    \ index = s.index(s.index(of: letter), offsetBy: -1) {\n                    a.remove(at:\
    \ index)\n                }\n            }\n        }\n    }\n    return a", " \
    \   var res = Set<String>()\n    for i in s.characters {\n        if i.isUppercase\
    \ {\n            res.insert(\"%c\".stringByAppendingFormat(i), in: &res)\n   \
    \     } else {\n            res.insert(\"%c\".stringByAppendingFormat(i), in:\
    \ &res)\n        }\n    }\n    \n    var results = [String]()\n    \n    for v\
    \ in res {\n        if v.count < n {\n            continue\n        }\n      \
    \  if v.count == n {\n            results.append(v)\n        } else {\n      \
    \      for _ in 0..<n-v.count {\n                results.append(\"%c\".stringByAppendingFormat(\"\
    \ \"), in: &results)\n            }\n            results.append(v)\n        }\n\
    \    }\n    \n    return results", "\tvar ans = [[String]]()\n\t\n\tif s == \"\
    \" {\n\t\treturn ans\n\t}\n\t\n\tlet chars = s.characters\n\t\n\tfor i := 0; i\
    \ < chars.count; i++ {\n\t\tif chars[i] == ' ' {\n\t\t\tfor j := i; j < chars.count;\
    \ j++ {\n\t\t\t\tif chars[j] == 'a' || chars[j] == 'e' || chars[j] == 'i' || chars[j]\
    \ == 'o' || chars[j] == 'u' {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tans.append(s[i\
    \ : j])\n\t\t\t}\n\t\t}\n\t}\n\t\n\tans = ans.filter({$0.count < n})\n\t\n\treturn\
    \ ans", "    \n    var newString: [String] = []\n    \n    // Write your code\
    \ here.\n    let regex = NSRegularExpression.escapedPattern\n    \n    let regex2\
    \ = try! NSRegularExpression(pattern: regex, options: [])\n    \n    let array\
    \ = regex2.matches(in: s, options: [], range: NSRange(0..<s.characters.count))\n\
    \    \n    for i in array {\n        \n        let char = s[i.range.upperBound].uppercased()\n\
    \        if char == \" \" {\n            \n            if newString.count == n\
    \ {\n                return newString\n            }\n            \n         \
    \   newString.append(s[i.range.upperBound..<i.range.lowerBound])\n           \
    \ \n        } else if char == \"H\" {\n            \n            if newString.count\
    \ <= n {\n                return newString\n            }\n            \n    \
    \        newString.append(s[i.range.upperBound..<i.range.lowerBound])\n      \
    \      \n        } else if char == \"I\" {\n            \n            if newString.count\
    \ <= n {\n                return newString\n            }\n            \n    \
    \        newString.append(s[i.range.upperBound..<i.range.lowerBound])\n      \
    \      \n        } else if char == \"N\" {\n            \n            if newString.count\
    \ <= n {\n                return newString\n            }\n            \n    \
    \        newString.append(s[i.range.upperBound..<i.range.lowerBound])\n      \
    \      \n        } else if char == \"A\" {\n            \n            if newString.count\
    \ <= n {\n                return newString\n            }\n            \n    \
    \        newString.append(s[i.range.upperBound..<i.range.lowerBound])\n      \
    \      \n        } else if char == \"R\" {\n            \n            if newString.count\
    \ <= n {\n                return newString\n            }\n            \n    \
    \        newString.append(s[i.range.upperBound..<i.range.lowerBound])\n      \
    \      \n        } else if char == \"V\" {\n            \n            if newString.count\
    \ <= n {\n                return newString\n            }\n            \n    \
    \        newString.append(s[i.range.upperBound..<i.range.lowerBound])\n      \
    \      \n        } else if char == \"E\" {\n            \n            if newString.count\
    \ <= n {\n                return newString\n            }\n            \n    \
    \        newString.append(s[i.range.upperBound..<i.range.lowerBound])\n      \
    \      \n        } else if char == \"D\" {\n            \n            if newString.count\
    \ <= n {\n                return newString\n            }\n            \n    \
    \        newString.append(s[i.range.upperBound..<i.range.lowerBound])\n      \
    \      \n        } else if char == \"O\" {\n            \n            if newString.count\
    \ <= n {\n                return newString\n            }", "    var list = [\"\
    Mary\", \"lamb\"]\n    let array = s.componentsSeparatedByString(\" \")\n    for\
    \ i in 0..<array.count {\n        if array[i].characters.count >= n {\n      \
    \      list.append(array[i])\n        }\n    }\n    return list", "    if s ==\
    \ \"\" {\n        return []\n    }\n\n    switch n {\n    case 0:\n        return\
    \ s.split(\" \")\n    case 1:\n        return s.split(\"\")\n    case 2:\n   \
    \     return s.split(\"\").filter(String.init(describing: \\.lowercase).contains(\"\
    a\")...)\n    case 3:\n        return s.split(\"\").filter(String.init(describing:\
    \ \\.lowercase).contains(\"e\")...)\n    case 4:\n        return s.split(\"\"\
    ).filter(String.init(describing: \\.lowercase).contains(\"i\")...)\n    case 5:\n\
    \        return s.split(\"\").filter(String.init(describing: \\.lowercase).contains(\"\
    o\")...)\n    case 6:\n        return s.split(\"\").filter(String.init(describing:\
    \ \\.lowercase).contains(\"u\")...)\n    case 7:\n        return s.split(\"\"\
    ).filter(String.init(describing: \\.lowercase).contains(\"y\")...)\n    case 8:\n\
    \        return s.split(\"\").filter(String.init(describing: \\.lowercase).contains(\"\
    h\")...)\n    case 9:\n        return s.split(\"\").filter(String.init(describing:\
    \ \\.lowercase).contains(\"l\")...)\n    case 10:\n        return s.split(\"\"\
    ).filter(String.init(describing: \\.lowercase).contains(\"a\")...)\n    case 11:\n\
    \        return s.split(\"\").filter(String.init(describing: \\.lowercase).contains(\"\
    e\")...)\n    case 12:\n        return s.split(\"\").filter(String.init(describing:\
    \ \\.lowercase).contains(\"i\")...)\n    case 13:\n        return s.split(\"\"\
    ).filter(String.init(describing: \\.lowercase).contains(\"o\")...)\n    case 14:\n\
    \        return s.split(\"\").filter(String.init(describing: \\.lowercase).contains(\"\
    u\")...)\n    case 15:\n        return s.split(\"\").filter(String.init(describing:\
    \ \\.lowercase).contains(\"y\")...)\n    case 16:\n        return s.split(\"\"\
    ).filter(String.init(describing: \\.lowercase).contains(\"h\")...)\n    case 17:\n\
    \        return s.split(\"\").filter(String.init(describing: \\.lowercase).contains(\"\
    l\")...)\n    case 18:\n        return s.split(\"\").filter(String.init(describing:\
    \ \\.lowercase).contains(\"a\")...)\n    case 19:\n        return s.split(\"\"\
    ).filter(String.init(describing: \\.lowercase).contains(\"e\")...)\n    case 20:\n\
    \        return s.split(\"\").filter(String.init(describing: \\.lowercase).contains(\"\
    i\")...)\n    case 21:\n        return s.split(\"\").filter(String.init(describing:\
    \ \\.lowercase).contains(\"o\")...)\n    case 22:\n        return s.split(\"\"\
    ).filter(String.init(describing: \\.lowercase).contains(\"u\")...)\n    case 23:\n\
    \        return s.split(\"\").filter(String.init(describing: \\.lowercase).contains(\"\
    y\")...)\n    case 24:\n        return ", "    // TODO: replace with solution\
    \ that uses \"all\" function from swift standard library\n    \n    let words\
    \ = [String]()\n    \n    if s == \"\" {\n        return words\n    }\n    \n\
    \    let letters = s.characters\n    \n    let re = try! NSRegularExpression(pattern:\
    \ \".*([cC]onsonant).*\")\n    let matches = re.matches(in: s, range: NSRange(s.startIndex...,\
    \ in: s))\n    \n    for match in matches {\n        let matchString = s[Range(match.range(at:\
    \ 1), in: s)!]\n        words.append(matchString)\n    }\n    \n    if words.count\
    \ <= n {\n        return words\n    }\n    \n    let remaining = n - words.count\n\
    \    \n    if remaining < words.count {\n        for _ in 0..<remaining {\n  \
    \          words.append(\"\")\n        }\n    }\n    \n    return words", "\t\
    switch {\n\tcase n < 1:\n\t\treturn []\n\tcase n == 1 {\n\t\treturn s.split(separator:\
    \ \" \")\n\t}\n\treturn s.split(separator: \" \")\n\t\t.filter { $0.contains(Character(Character($0).asciiValue\
    \ + n)) }\n\t\t.map { $0.split(separator: \" \") }\n\t\t.map { $0[0 ..< n] }",
  '    ', "    var arr: [String] = []\n    var index = s.startIndex\n    var letter:\
    \ Character = \"a\"\n    var flag = false\n    \n    for _ in 0 ..< n {\n    \
    \    if flag {\n            arr.append(String(s[index]))\n            flag = false\n\
    \        }\n        \n        if letter == \" \" {\n            arr.append(String(s[index]))\n\
    \            index += 1\n            letter = \"a\"\n        } else if letter\
    \ == \"a\" {\n            if s[index] != \"a\" {\n                arr.append(String(s[index]))\n\
    \                index += 1\n                letter = \"a\"\n            } else\
    \ {\n                letter = \" \"\n                flag = true\n           \
    \ }\n        } else {\n            if s[index] == letter {\n                letter\
    \ = \" \"\n                flag = true\n            } else {\n               \
    \ arr.append(String(s[index]))\n                index += 1\n                letter\
    \ = \"a\"\n            }\n        }\n    }\n    \n    arr.append(String(s[index..<s.endIndex]))\n\
    \    return arr", "    \n    let count = [String: Int]()\n    let result = s.characters.split(separator:\
    \ \" \").map(String.init)\n        .filter({ $0.isLetter && !count[$0] })\n  \
    \      .filter { (word: String) -> Bool in\n            guard let count = count[word]\
    \ else { return false }\n            count[word] = count + 1\n            return\
    \ count == n\n        }\n    \n    if s.isEmpty {\n        return []\n    } else\
    \ {\n        return result\n    }", '    // your code here', "    \n    if s.isEmpty\
    \ {\n        return []\n    }\n    let arr = Array(s.characters)\n    \n    let\
    \ stack = Array(0..<n)\n    \n    var result = stack\n    \n    while !stack.isEmpty\
    \ {\n        \n        let head = stack.removeLast()\n        \n        var found\
    \ = false\n        \n        for i in 0..<arr.count {\n            \n        \
    \    let item = arr[i]\n            \n            if item == head {\n        \
    \        found = true\n                stack.insert(item, at: i)\n           \
    \     break\n            }\n            \n            if item.isLetterOrDigit()\
    \ {\n                continue\n            }\n            \n            if found\
    \ {\n                break\n            }\n        }\n        \n        if !found\
    \ {\n            stack.insert(head, at: 0)\n        }\n    }\n    \n    return\
    \ result", "    var ans = [String]()\n\n    for c in s.characters.reverse() {\n\
    \        // Check if the current character is n consonants\n        if c == \"\
    \ \" {\n            // The current character is a space.  Let's see if it matches.\n\
    \            // We have to keep track of words as we match them to the end\n \
    \           // of the string, since we don't want to add words from the last\n\
    \            // space onto the output array.\n            ans.append(\"\")\n \
    \       }\n        else if c != \"a\" && c != \"e\" && c != \"i\" && c != \"o\"\
    \ && c != \"u\" && c != \"A\" && c != \"E\" && c != \"I\" && c != \"O\" && c !=\
    \ \"U\" && c != \"a\" && c != \"e\" && c != \"i\" && c != \"o\" && c != \"u\"\
    \ {\n            // The current character is not n consonants\n            if\
    \ ans[ans.count-1] == \"\" {\n                ans[ans.count-1] = String(Character(c))\n\
    \            }\n            else {\n                ans[ans.count-1] += String(Character(c))\n\
    \            }\n        }\n    }\n    return ans.reverse()", "\t\n\tlet letters\
    \ = count_letters(s)\n\t\n\tif letters < n {\n\t\treturn []\n\t}\n\t\n\tlet spaces\
    \ = count_spaces(s)\n\t\n\tlet consonants = [\n\t\t[\"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"y\", \"z\", \"\xE4\", \"\xF6\", \"\xFC\", \"\xDF\"],\n\t\t[\"\
    \xC4\", \"\xD6\", \"\xDC\", \"\xDF\"]\n\t]\n\t\n\tlet indexes = [\n\t\t[0, 1],\n\
    \t\t[0, 2],\n\t\t[0, 3],\n\t\t[0, 4],\n\t\t[0, 5],\n\t\t[0, 6],\n\t\t[0, 7],\n\
    \t\t[0, 8],\n\t\t[0, 9],\n\t\t[0, 10],\n\t\t[0, 11],\n\t\t[0, 12],\n\t\t[0, 13],\n\
    \t\t[0, 14],\n\t\t[0, 15],\n\t\t[0, 16],\n\t\t[0, 17],\n\t\t[0, 18],\n\t\t[0,\
    \ 19],\n\t\t[0, 20],\n\t\t[0, 21],\n\t\t[0, 22],\n\t\t[0, 23],\n\t\t[0, 24],\n\
    \t\t[0, 25],\n\t\t[0, 26],\n\t\t[0, 27],\n\t\t[0, 28],\n\t\t[0, 29],\n\t\t[0,\
    \ 30],\n\t\t[0, 31],\n\t\t[0, 32],\n\t\t[0, 33],\n\t\t[0, 34],\n\t\t[0, 35],\n\
    \t\t[0, 36],\n\t\t[0, 37],\n\t\t[0, 38],\n\t\t[0, 39],\n\t\t[0, 40],\n\t\t[0,\
    \ 41],\n\t\t[0, 42],\n\t\t[0, 43],\n\t\t[0, 44],\n\t\t[0, 45],\n\t\t[0, 46],\n\
    \t\t[0, 47],\n\t\t[0, 48],\n\t\t[0, 49],\n\t\t[0, 50],\n\t\t[0, 51],\n\t\t[0,\
    \ 52],\n\t\t[0, 53],\n\t\t[0, 54],\n\t\t[0, 55],\n\t\t[0, 56],\n\t\t[0, 57],\n\
    \t\t[0, 58],\n\t\t[0, 59],\n\t\t[0, 60],\n\t\t[0, 61],\n\t\t[0, 62],\n\t\t[0,\
    \ 63],\n\t\t[0, 64],\n\t\t[0, 65],\n\t\t[0, 66],\n\t\t[0, 67],\n\t\t[0, 68],\n\
    \t\t[0, 69],\n\t\t[0, 70],\n\t\t[0, 71],\n\t\t[0, 72],\n\t\t[0, 73],\n\t\t[0,\
    \ 74],\n\t\t[0, 75],\n\t\t[0, 76],\n\t\t[0, 77],\n\t\t[0, 78],\n\t\t[0, 79],\n\
    \t\t[0, 80],\n\t\t[0, 81],\n\t\t[0, 82", "    let chars = Array(s)\n    if s.isEmpty\
    \ { return [] }\n    var words: [String] = []\n    var c = 0\n    while c < s.count\
    \ {\n        if chars[c] == \" \" {\n            words.append(chars[c..<s.endIndex])\n\
    \        }\n        c += 1\n    }\n    return words", "    var result = s.components(separatedBy:\
    \ \" \")\n    \n    if s.isEmpty {\n        return []\n    }\n    \n    result.removeFirst()\n\
    \    \n    return result.filter({ $0.characters.count >= n }).sorted().flatMap({\
    \ $0.characters.prefix(n) })", "\tvar result : [String] = []\n\tfor word in s.split(\"\
    \ \") {\n\t\tvar count : Int = 0\n\t\tfor letter in word.lowercaseString.characters\
    \ {\n\t\t\tif letter == \"a\" || letter == \"e\" || letter == \"i\" || letter\
    \ == \"o\" || letter == \"u\" {\n\t\t\t\tcount += 1\n\t\t\t}\n\t\t}\n\t\tif count\
    \ == n {\n\t\t\tresult = append(result, word)\n\t\t}\n\t}\n\treturn result", " \
    \   \n    return []", "    \n    // Your code here\n    \n    return words\n \
    \   ", '    return []', '    return []', "    let mut result = Array<String>()\n\
    \    for letter in s.characters {\n        if letter == 'a' || letter == 'e' ||\
    \ letter == 'i' || letter == 'o' || letter == 'u' ||\n            letter == 'A'\
    \ || letter == 'E' || letter == 'I' || letter == 'O' || letter == 'U' ||\n   \
    \         letter == '0' {\n            \n        }\n    }\n    \n    ", "\t//\
    \ Your code here\n\treturn s.componentsSeparatedByString(\" \")\n\t\t.filter {\
    \ $0.rangeOfCharacter(from: NSCharacterSet.letters) == nil }\n\t\t.filter { $0.rangeOfCharacter(from:\
    \ NSCharacterSet.whitespaceCharacters) != nil }\n\t\t.filter { $0.rangeOfCharacter(from:\
    \ NSCharacterSet.consonants) != nil }\n\t\t.map { $0.lowercaseString.substring(with:\
    \ NSRange(location: 0, length: n)) }", "    let splits = s.split(separator: \"\
    \ \")\n    var res = [:]\n    for i in splits.indices {\n        for j in (0..<n).reverse()\
    \ {\n            let item = splits[i][j..<n+1]\n            if item.characters.count\
    \ == 0 {\n                break\n            } else {\n                if let\
    \ _ = res[item] {\n                    break\n                } else {\n     \
    \               res[item] = true\n                }\n            }\n        }\n\
    \    }\n    return res.keys.arrayValue.map {\n        $0.split(separator: \" \"\
    ).joined(separator: \" \")\n    }", '    return []', "    var r: [String] = []\n\
    \    \n    for s in s {\n        if s == \"\" {\n            return r\n      \
    \  }\n        \n        for _ in 0..<n-1 {\n            if s[s.startIndex.advancedBy(1)]\
    \ != \" \" {\n                return r\n            }\n        }\n        \n \
    \       r.append(s)\n    }\n    return r", "\treturn select_words_recur(s, n,\
    \ \"\")", "    if s == \"\" {\n        return []\n    }\n    var letters = s.characters\n\
    \    \n    var count = 0\n    var res = NSMutableArray()\n    for i in 0..<letters.count\
    \ {\n        var letter = letters[i]\n        \n        if letter == \"a\" {\n\
    \            continue\n        }\n        \n        if letter == \"e\" {\n   \
    \         count += 1\n        }\n        \n        if letter == \"i\" {\n    \
    \        count += 1\n        }\n        \n        if letter == \"o\" {\n     \
    \       count += 1\n        }\n        \n        if letter == \"u\" {\n      \
    \      count += 1\n        }\n        \n        if letter == \" \" {\n       \
    \     count += 1\n        }\n        \n        if count == n {\n            res.add(s.substringWithRange(NSMakeRange(i+1,\
    \ 1)))\n            count = 0\n        }\n    }\n    \n    return res.toArray(as:\
    \ [String])", "    \n    let alphabet = [\n        \"A\",\"B\",\"C\",\"D\",\"\
    E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"\
    R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\n        \"a\",\"b\",\"c\"\
    ,\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\"\
    ,\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\n        \"0\",\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\n        \"_\",\"-\",\".\"\
    ,\"=\",\"/\",\".\",\",\",\"-\",\".\",\"'\",\"\\\"\"\n    ]\n    \n    var res\
    \ = []\n    \n    for ch in s {\n        if ch in alphabet {\n            let\
    \ index = alphabet.index(of: ch)\n            let substr = str[..<index]\n   \
    \         let newStr = substr.flatMap { $0 }\n            if newStr.count == n\
    \ {\n                res.append (substr)\n            }\n        }\n    }\n  \
    \  \n    if res.count == 0 {\n        res = []\n    }\n    \n    return res",
  "\t// TODO: write your code in geeksforgeeks.org/select-words-in-string-containing-exactly-\n\
    \t// n-consonants-in-order-these-words-appear-s-in-string-s-if-s-is-empty\n\t\
    var res =  make([][String], s.count)\n\tvar i = 0\n\tvar index = s\n\tfor i <\
    \ s.count {\n\t\tvar count = 0\n\t\tfor index < s {\n\t\t\tif s[index] == \" \"\
    \ {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcount++\n\t\t\tindex++\n\t\t\tif count >= n\
    \ {\n\t\t\t\tres[i] = make([][String], count)\n\t\t\t\tindex++\n\t\t\t\tcount\
    \ = 0\n\t\t\t}\n\t\t}\n\t\tres[i] = make([][String], count)\n\t\ti++\n\t}\n\t\
    return res", "    if s == \"\" {\n        return []\n    }\n\n    guard let vowels\
    \ = Set([\"a\", \"e\", \"i\", \"o\", \"u\"]) else {\n        print(\"vowels cannot\
    \ initalized!\")\n        return []\n    }\n\n    let consonants = Set(s.characters.filter({\
    \ $0 != \"a\" && $0 != \"e\" && $0 != \"i\" && $0 != \"o\" && $0 != \"u\" }))\n\
    \n    let possibleWords = consonants.symmetrical.filter{ possibleWord in\n   \
    \     vowels.contains(possibleWord[0])\n    }\n\n    return possibleWords.filter{\
    \ word in\n        word.count == n\n    }", "\treturn []", "    \n    return []",
  "    var ans = [String]()\n\n    // Your code here\n\n    return ans", "    var\
    \ words = s.characters.split(\" \").map{$0.lowercased()}\n    \n    for index\
    \ in 0..<words.count{\n        if words.contains(String(repeatElement(\"a\" ,\
    \ count-index))){\n            break\n        }\n    }\n    let index = count-index\n\
    \    return words[index..<words.count]", '    return []', "    var result = [String]()\n\
    \    for c in s.characters {\n        if n <= 0 || isConsonant(c) {\n        \
    \    continue\n        }\n        if n-- == 0 {\n            result.append(String(c))\n\
    \        }\n    }\n    return result", "    \n    let counts = s.split_whitespace().map(String.count)\n\
    \    let indices = counts.indices { (i, _) -> Bool in\n        return counts[i]\
    \ == n\n    }\n    return indices.map { (i) -> String in\n        return String(s[indices[i]..<s.endIndex])\n\
    \    }", "    var words: [String] = []\n    if s.isEmpty {\n        return words\n\
    \    }\n    var current: String = s.substringToIndex(s.startIndex.advancedBy(1))\n\
    \    for _ in 0 ..< n {\n        if current.isEmpty {\n            break\n   \
    \     }\n        current = current.substringToIndex(current.startIndex.advancedBy(-1))\n\
    \        if current.characters.count == 1 {\n            words.append(current)\n\
    \        }\n    }\n    return words", "    var list = s.characters.flatMap{ $0\
    \ }\n    var result: [String] = []\n    for i : Int in 0..<n {\n        var index\
    \ = i\n        for j in list...list {\n            if list[j] == list[index] {\n\
    \                index = j\n            }\n        }\n        if index == list.endIndex\
    \ {\n            list.append(list[i])\n        } else {\n            result.append(String(list[index]))\n\
    \            list.append(list[i])\n        }\n    }\n    return result", "\t",
  "    \n    let result = s.components(separatedBy: \" \")\n    \n    let count =\
    \ result.count\n    \n    if count < n {\n        return []\n    }\n    \n   \
    \ let result2 = result.filter{ substr in\n        return substr.contains(\"a\"\
    ) || substr.contains(\"e\") || substr.contains(\"i\") || substr.contains(\"o\"\
    ) || substr.contains(\"u\") || substr.contains(\"y\")\n    }\n    \n    if count\
    \ == n {\n        return result2\n    }\n    \n    let result3 = result2.filter{\
    \ substr in\n        return substr.countElements(of: \"a\") >= n && substr.countElements(of:\
    \ \"e\") >= n && substr.countElements(of: \"i\") >= n && substr.countElements(of:\
    \ \"o\") >= n && substr.countElements(of: \"u\") >= n && substr.countElements(of:\
    \ \"y\") >= n\n    }\n    \n    return result3", '    return ""', '    return
    words', "\tvar words = [String]()\n\tlet letters = s.lowercased()\n\tfor letter\
    \ in letters {\n\t\tif letter.count == n {\n\t\t\twords.append(String(letter))\n\
    \t\t}\n\t}\n\treturn words", "    var result = [String]()\n    \n    for letter\
    \ in s {\n        if contains(s, letter) {\n            result.append((letter,\
    \ s.count))\n        }\n    }\n    \n    // Sort result by number of consonants\n\
    \    result\n        .sorted(by: {$1.0 > $1.1})\n        .prefix(n)\n        .map({\
    \ $0.0 })", "    var result = [String]()\n    for char in s.characters {\n   \
    \     if char == \" \" {\n            if n == 0 || result.isEmpty {\n        \
    \        result += [String]()\n            } else {\n                result.removeLast()\n\
    \            }\n        } else if char == \" \" {\n            if n == 0 || result.isEmpty\
    \ {\n                result += [String]()\n            } else {\n            \
    \    result.removeLast()\n            }\n        } else {\n            if n ==\
    \ 0 || result.isEmpty {\n                result.append(String(char))\n       \
    \     } else {\n                if char <= 122 {\n                    if char\
    \ == 96 {\n                        result += [String]()\n                    }\
    \ else {\n                        result.append(String(char))\n              \
    \      }\n                } else {\n                    if char == 96 {\n    \
    \                    result += [String]()\n                    } else {\n    \
    \                    if char <= 123 {\n                            if char ==\
    \ 97 {\n                                result += [String]()\n               \
    \             } else {\n                                result += [String]()\n\
    \                            }\n                        } else {\n           \
    \                 if char == 97 {\n                                result += [String]()\n\
    \                            } else {\n                                if char\
    \ <= 124 {\n                                    if char == 98 {\n            \
    \                            result += [String]()\n                          \
    \          } else {\n                                        result.append(String(char))\n\
    \                                    }\n                                } else\
    \ {\n                                    if char == 98 {\n                   \
    \                     result += [String]()\n                                 \
    \   } else {\n                                        if char <= 125 {\n     \
    \                                       if char == 99 {\n                    \
    \                            result += [String]()\n                          \
    \                  } else {\n                                                result\
    \ += [String]()\n                                            }\n             \
    \                           } else {\n                                       \
    \     if char == 99 {\n                                                result\
    \ += [String]()\n                                            } else {\n      \
    \                                          if char <= 126 {\n                \
    \                                    if char == 100 {\n                      \
    \                                  result += [String]()\n                    \
    \                                } else {\n                                  \
    \                      result.append(String(char))\n                         \
    \                           }\n                                              \
    \  } else {\n                                                    if char == 100\
    \ {\n                                                        result += [String]()\n\
    \                                                    } else {\n              \
    \                                          if char <= 127 {\n                \
    \                                            result += [String]()\n          \
    \                                              } else {\n                    \
    \                                        result += [String]()\n              \
    \                                          }\n                               \
    \                     }\n                                                }\n \
    \                                           }\n                              \
    \          }\n                                    }\n                        \
    \        }\n                            }\n                        }\n       \
    \             }\n                }\n            }\n        }\n    }\n    return\
    \ result", '    return []', "    var result = Set<String>()\n    for char in s\
    \ {\n        if char.countConsonants() == n {\n            result.insert(char)\n\
    \        }\n    }\n    return result.sorted()", '  return s.trimmingCharacters(in:
    .whitespaces).split(separator: " ").filter{$0.characters.count == n}.sorted(by:
    >)', "    var result: [String] = []\n    var current = \"\"\n    var flag = true\n\
    \    for word in s.split(separator: \" \") {\n        current = word\n       \
    \ if flag {\n            let letters = current.characters.filter { !$0.isLetter\
    \ }\n            if letters.count == n {\n                flag = false\n     \
    \           result.append(word)\n            }\n        } else {\n           \
    \ let letters = current.characters.filter { !$0.isLetter }\n            if letters.count\
    \ < n {\n                flag = true\n                result.append(word)\n  \
    \          }\n        }\n    }\n    return result", '    return select_words(s.chars().map(String.init),
    n: n)', '    return [] // TODO: Complete this function', "    \n    \n    var\
    \ arr = [String]()\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n   \
    \ \n    var strArr = s.characters.split{$0 == \" \"}\n    \n    for str in strArr\
    \ {\n        if str.characters.count < n {\n            continue\n        }\n\
    \        var arr = str.characters.split{$0 == \"a\" || $0 == \"e\" || $0 == \"\
    i\" || $0 == \"o\" || $0 == \"u\"}\n        \n        if arr.count == n {\n  \
    \          arr = arr + arr\n        }\n        \n        var newArr = arr.filter{vowels.contains({String($0)})}\n\
    \        \n        arr = arr + newArr\n        \n    }\n    \n    return arr\n\
    \    ", "\treturn select_words(s.characters, n, s.characters.count) ", "    var\
    \ output = [String]()\n    if s != \"\" {\n        var count = count_consonants(s)\n\
    \        var result = [String]()\n        var s = s\n        for _ in 1...n {\n\
    \            output = result.filter({ $0.contains(s) }).sorted() { $0.compare($1)\
    \ == .orderedAscending }\n            result.removeAll(output)\n            s\
    \ = output.last!\n        }\n        output = result.filter({ $0.contains(s) }).sorted()\
    \ { $0.compare($1) == .orderedAscending }\n    }\n    return output", "\tarr :=\
    \ [String]()\n\tvar i int\n\tfor ; i < len(s); i++ {\n\t\tvar str [String]\n\t\
    \tfor str[i] != \" \" && str[i] != \"\\n\" {\n\t\t\tif s[str[i]] != \"a\" && s[str[i]]\
    \ != \"e\" && s[str[i]] != \"i\" && s[str[i]] != \"o\" && s[str[i]] != \"u\" &&\
    \ s[str[i]] != \"y\" && s[str[i]] != \"A\" && s[str[i]] != \"E\" && s[str[i]]\
    \ != \"I\" && s[str[i]] != \"O\" && s[str[i]] != \"U\" && s[str[i]] != \"Y\" {\n\
    \t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif str[i] != \" \" && str[i] != \"\\n\" {\n\
    \t\t\tarr.append(s[str:])\n\t\t}\n\t}\n\treturn arr", "  // BEGIN Question 6\n\
    \  \n  // END Question 6", "    // BEGIN SOLUTION\n    \n    let countMap = countWords(s)\n\
    \    \n    var words: [String] = []\n    \n    for word, _ in countMap.keys {\n\
    \        \n        if countMap[word] == n {\n            \n            words.append(word)\n\
    \        }\n    }\n    \n    return words\n    \n    // END SOLUTION", "    if\
    \ s.isEmpty {\n        return []\n    }\n    var res = []\n    var start = 0\n\
    \    for letter in s {\n        if letter == \" \"{\n            res.append(s[start:])\n\
    \            break\n        }\n        var count = 0\n        for c in letter\
    \ {\n            if c != \"a\" && c != \"e\" && c != \"i\" && c != \"o\" && c\
    \ != \"u\" && c != \"A\" && c != \"E\" && c != \"I\" && c != \"O\" && c != \"\
    U\" {\n                count = count+1\n            }\n        }\n        if n\
    \ == count {\n            res.append(s[start:letter])\n        }\n        start\
    \ = letter+1\n    }\n    return res", "    \n    var words: [String] = []\n  \
    \  \n    let chars = count_chars(s)\n    \n    if chars.count >= n {\n       \
    \ let strs = s.characters.split(separator: \" \")\n        strs.forEach({ words.append(String($0))\
    \ })\n    }\n    \n    return words", "    if n == 1 {\n        return [s]\n \
    \   }\n    var strs = Array(s[...].unicodeScalars)\n    var words = [String]()\n\
    \    var consonants: [String] = []\n    var i = 0\n    while i < s.count {\n \
    \       i += 1\n        var str = \"\"\n        for j in strs {\n            str\
    \ += String(j)\n            if j == \" \" {\n                str += \" \"\n  \
    \          }\n        }\n        if consonants.contains(str) {\n            continue\n\
    \        }\n        consonants.append(str)\n        let found = s.unicodeScalars.filter\
    \ { (_) -> Bool in\n            return $0.isLetter\n        }\n        for j in\
    \ found {\n            words.append(String(j))\n        }\n    }\n    return words",
  "    var res = []\n    for i in 0..<s.characters.count {\n        if s[i] != \"\
    \ \" {\n            if let _ = s.range(of: String(s.characters\n             \
    \   .prefix(upTo: i+1)\n                .filter {$0 in \" \"}).joinedByString())\
    \ {\n                res.insert(s[i..<i+n], at: i)\n            }\n        }\n\
    \    }\n    return res", "    \n    // BEGIN PSEUDOCODE\n    \n    // BEGIN SOLUTION\n\
    \    \n    // END SOLUTION\n    \n    // END PSEUDOCODE\n    ", "    if s == \"\
    \" {\n        return []\n    }\n    var selected_words = [String]()\n    var word_list\
    \ = s.components(separatedBy: \" \")\n    for i in 0...word_list.count-1 {\n \
    \       var word = \"\"\n        var count = 0\n        for j in 0...word_list.count-1\
    \ {\n            word = word + word_list[j]\n            if word_list[j] == \"\
    \ \" {\n                count += 1\n            }\n            if count == n {\n\
    \                break\n            }\n        }\n        selected_words.append(word)\n\
    \    }\n    return selected_words", "    if s == \"\" {\n        return []\n \
    \   }\n    \n    let words = [String]()\n    var i = 0\n    while i < s.count\
    \ {\n        var j = i\n        while j > 0 && s[j-1] == ' ' {\n            j--\n\
    \        }\n        let word = String(s[i ..< j])\n        if words.contains(word)\
    \ {\n            j = i\n            while j > 0 && s[j-1] == ' ' {\n         \
    \       j--\n            }\n            var word2 = String(s[i ..< j])\n     \
    \       if n == word2.count {\n                words.append(word2)\n         \
    \       j = i\n                while j > 0 && s[j-1] == ' ' {\n              \
    \      j--\n                }\n            } else {\n                break\n \
    \           }\n        } else {\n            words.append(word)\n        }\n \
    \       i = j + 1\n    }\n    return words", "    let words = s.split(\" \")\n\
    \    return words.filter { (word: String) -> Bool in\n        select_consonants2(word,\
    \ n) == n\n    }", "    guard s != \"\" else {\n        return []\n    }\n   \
    \ \n    var wordsArr = s.characters\n    var wordsArrFiltered: [String] = []\n\
    \    \n    for letter in wordsArr {\n        \n        let consonantsCount: Int\
    \ = letter\n        \n        if consonantsCount < n {\n            wordsArrFiltered.append(letter)\n\
    \        }\n    }\n    \n    return wordsArrFiltered", "    var arr: [String]\
    \ = []\n    var i = 0\n    while i < s.characters.count {\n        var start =\
    \ i\n        while i < s.characters.count && CharacterSet(s.characters[i]).count\
    \ == n {\n            i += 1\n        }\n        arr.append(s[start ..< i])\n\
    \    }\n    return arr", '    // Good luck!', "    // TODO:\n    return []", '    return
    s.split(" ").filter{ $0.characters.count >= n }.map({ String($0) })', "    \n\
    \    let mut result = [String]()\n    \n    if s == \"\" {\n        return result\n\
    \    }\n    \n    // use recursion here\n    \n    let len = s.characters.count\n\
    \    \n    if len >= n {\n        let first = s.characters[0..(len - 1)]\n   \
    \     \n        if n == 1 {\n            result.append(first)\n            return\
    \ result\n        }\n        \n        if first == first[..] {\n            result.append(first)\n\
    \            return result\n        }\n    }\n    \n    return result"]
stop_tokens:
- "\n}"
