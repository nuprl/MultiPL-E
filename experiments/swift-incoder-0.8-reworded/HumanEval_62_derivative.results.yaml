language: swift
name: HumanEval_62_derivative
results:
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    \n    var derivative = [Int]()\n    for var i = 0; i < xs.count; i++ {\n\
    \        derivative.append(xs[i])\n        derivative.append(1)\n    }\n    \n\
    \    return derivative\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp82505_3v.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < xs.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let count = xs.count\n    var result = [Int](count: count + 1, repeatedValue:\
    \ 0)\n    for i in 0..<count {\n        result[i] = 1\n        for j in (i+1)..<count\
    \ {\n            result[i] *= xs[j]\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpi11z0u_1.swift:11:18: error: no exact matches in call to initializer\
    \ \n    var result = [Int](count: count + 1, repeatedValue: 0)\n             \
    \    ^\n/tmp/tmpi11z0u_1.swift:11:18: note: candidate has partially matching parameter\
    \ list (repeating: Int, count: Int)\n    var result = [Int](count: count + 1,\
    \ repeatedValue: 0)\n                 ^\n/tmp/tmpi11z0u_1.swift:11:18: note: candidate\
    \ has partially matching parameter list (repeating: Int, count: Int)\n    var\
    \ result = [Int](count: count + 1, repeatedValue: 0)\n                 ^\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var ys = [Int](repeating: 0, count: xs.count)\n    var x = xs[0]\n    for\
    \ index in 1..<xs.count {\n        x *= xs[index]\n        ys[index] = x\n   \
    \ }\n    return ys\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmplra4wj4e/tmplra4wj4e.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0adf4e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0adf1deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0adf1de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0adf1dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplra4wj4e                        0x000055be481cc6dc <unavailable> + 5852

    5    libc.so.6                          0x00002b0adf6d3460 __libc_start_main +
    245

    6    tmplra4wj4e                        0x000055be481cc2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659979710
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \tguard xs.count > 0 else { return [] }\n\t\n\treturn (1 ..< xs.count).map { idx\
    \ in\n\t\tlet coeff = xs[idx] \n\t\treturn coeff * (idx == 0 ? 1 : (xs[idx-1]\
    \ * idx - 1) / (idx + 1))\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpzv8k6f2m/tmpzv8k6f2m.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea397a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea39499b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea39499988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea394987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzv8k6f2m                        0x0000562c33fa865c <unavailable> + 5724

    5    libc.so.6                          0x00002aea3998e460 __libc_start_main +
    245

    6    tmpzv8k6f2m                        0x0000562c33fa8249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var y = xs[0]\n    for i in 1 ..< xs.count {\n        y = y * xs[i]\n   \
    \ }\n    return y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpk9tcivdr.swift:14:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return y\n           ^\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [1]\n\n    for i in 0..<xs.count {\n        result[0] *= xs[i]\n\
    \        if i < xs.count - 1 {\n            result[0] += result[0]*xs[i + 1]\n\
    \        }\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpj0bhxs7k/tmpj0bhxs7k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba02f7c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba02f4b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba02f4b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba02f4b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0bhxs7k                        0x00005619e387f66c <unavailable> + 5740

    5    libc.so.6                          0x00002ba02f9ad460 __libc_start_main +
    245

    6    tmpj0bhxs7k                        0x00005619e387f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    guard xs.count > 0 else {\n        return []\n    }\n    \n    guard xs.count\
    \ >= 2 else {\n        return []\n    }\n    \n    var result = [Int](xs.count)\n\
    \    var i = xs.count - 1\n    while i > 0 {\n        result[i] = result[i] /\
    \ xs[i]\n        i -= 1\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpzie6vbkf.swift:18:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var result = [Int](xs.count)\n                       ^\n      \
    \                 arrayLiteral: \n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return derivative(xs, numDerivatives: 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp372y1lt2.swift:10:43: error: extra argument 'numDerivatives' in\
    \ call\n    return derivative(xs, numDerivatives: 0)\n                     ~~~~~~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [Int](repeating: 0, count: xs.count + 1)\n    for i in 1..<xs.count\
    \ {\n        result[i] = result[i - 1] * xs[i - 1]\n    }\n    result[xs.count]\
    \ = 1\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmppxzjqun7/tmppxzjqun7.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add3c2e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add3bfd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add3bfd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add3bfd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxzjqun7                        0x000055cd25e9d6dc <unavailable> + 5852

    5    libc.so.6                          0x00002add3c4cc460 __libc_start_main +
    245

    6    tmppxzjqun7                        0x000055cd25e9d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659979710
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [0]\n    for i in 0 ..< xs.count {\n        result.append(result[i-1]\
    \ * xs[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b206a91bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b206a612561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b206a612286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b206a61213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b206a611bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b206a413e83 <unavailable> + 188035

    6    tmpnavu_31u                        0x00005601f42a2ce9 <unavailable> + 7401

    7    tmpnavu_31u                        0x00005601f42a2584 <unavailable> + 5508

    8    libc.so.6                          0x00002b206ab07460 __libc_start_main +
    245

    9    tmpnavu_31u                        0x00005601f42a2259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var d = 0\n    for index in 0..<xs.count {\n        let x = xs[index]\n \
    \       d *= x\n        d += xs[index] - x\n    }\n    return Array(1..<x).map\
    \ { d / x }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpspd8vofd.swift:16:22: error: cannot find 'x' in scope\n    return\
    \ Array(1..<x).map { d / x }\n                     ^\n/tmp/tmpspd8vofd.swift:16:35:\
    \ error: cannot find 'x' in scope\n    return Array(1..<x).map { d / x }\n   \
    \                               ^\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [0]\n    for i in 0 ..< xs.count {\n        result.append(result[i]\
    \ + xs[i] * derivative(xs[i + 1 ..< xs.count]))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp576c1hor.swift:12:43: error: cannot convert value of type '[Int]'\
    \ to expected argument type 'Int'\n        result.append(result[i] + xs[i] * derivative(xs[i\
    \ + 1 ..< xs.count]))\n                                          ^\n/tmp/tmp576c1hor.swift:12:54:\
    \ error: missing argument label 'xs:' in call\n        result.append(result[i]\
    \ + xs[i] * derivative(xs[i + 1 ..< xs.count]))\n                            \
    \                         ^\n                                                \
    \     xs: \n/tmp/tmp576c1hor.swift:12:56: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n        result.append(result[i]\
    \ + xs[i] * derivative(xs[i + 1 ..< xs.count]))\n                            \
    \                           ^\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  return derivatives(xs, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpbybmi0fi.swift:10:10: error: cannot find 'derivatives' in scope\n\
    \  return derivatives(xs, 1)\n         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return derivative(xs, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpmej0wxzl.swift:10:27: error: extra argument in call\n    return\
    \ derivative(xs, 0)\n                     ~~~~~^~\n"
  stdout: ''
  timestamp: 1659979640
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    precondition(xs.count >= 1, \"derivative needs at least 1 argument\")\n \
    \   var d: [Int] = [0]\n    for i in 1..xs.count {\n        if let x = Int(xs[i])\
    \ {\n            d[i] = d[i-1] * x\n        }\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp0g2obt2h.swift:12:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..xs.count {\n              ^~\n        \
    \      ...\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let len = xs.count\n    var result = Float(0.0)\n    for i in 0..<len - 1\
    \ {\n        let y = xs[i]\n        let x = xs[i + 1]\n        let value = y /\
    \ pow(x, Double(len - 1))\n        result += value\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcgx453gx.swift:15:25: error: cannot find 'pow' in scope\n     \
    \   let value = y / pow(x, Double(len - 1))\n                        ^~~\n/tmp/tmpcgx453gx.swift:18:12:\
    \ error: cannot convert return expression of type 'Float' to return type '[Int]'\n\
    \    return result\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  var dx: [Int] = []\n  for xi in xs {\n    let d = (1.0 * (xi * xi) - 1.0) *\
    \ (xi - 2.0) / xi\n    dx += [Int](repeating: d, count: 1)\n  }\n  return dx\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpzj3epg96.swift:12:13: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let d = (1.0 * (xi * xi) - 1.0) * (xi - 2.0) / xi\n   \
    \         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979736
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var ans = [Int](count: xs.count, repeatedValue: 0)\n    for i in 0..<(xs.count-1)\
    \ {\n        ans[i]++\n    }\n    ans[(xs.count-1)] = 1\n    return ans\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpkasqljri.swift:10:15: error: no exact matches in call to initializer\
    \ \n    var ans = [Int](count: xs.count, repeatedValue: 0)\n              ^\n\
    /tmp/tmpkasqljri.swift:10:15: note: candidate has partially matching parameter\
    \ list (repeating: Int, count: Int)\n    var ans = [Int](count: xs.count, repeatedValue:\
    \ 0)\n              ^\n/tmp/tmpkasqljri.swift:10:15: note: candidate has partially\
    \ matching parameter list (repeating: Int, count: Int)\n    var ans = [Int](count:\
    \ xs.count, repeatedValue: 0)\n              ^\n/tmp/tmpkasqljri.swift:12:15:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        ans[i]++\n\
    \              ^~\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in xs {\n        result.append(i * i)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp7ji4k29u/tmp7ji4k29u.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61e3624c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61e331bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61e331b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61e331a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ji4k29u                        0x000055eba87f659c <unavailable> + 5532

    5    libc.so.6                          0x00002b61e3810460 __libc_start_main +
    245

    6    tmp7ji4k29u                        0x000055eba87f6189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    precondition(xs.count > 0, \"Polynomial cannot be zero or empty.\")\n   \
    \ var result = [Int](xs.count) {\n        (0..<xs.count).reduce(0)\n    }\n  \
    \  result[0] = xs[0]\n    for i in  1..<xs.count - 1 {\n        let p = result[i-1]\n\
    \        result[i] = xs[i] - p\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpw49sbfoc.swift:11:23: error: missing argument label 'unsafeUninitializedCapacity:'\
    \ in call\n    var result = [Int](xs.count) {\n                      ^\n     \
    \                  unsafeUninitializedCapacity: \n/tmp/tmpw49sbfoc.swift:11:34:\
    \ error: contextual type for closure argument list expects 2 arguments, which\
    \ cannot be implicitly ignored\n    var result = [Int](xs.count) {\n         \
    \                        ^\n                                  buffer,initializedCount\
    \ in \n/tmp/tmpw49sbfoc.swift:12:32: error: missing argument for parameter #2\
    \ in call\n        (0..<xs.count).reduce(0)\n                               ^\n\
    \                               , <#(Int, Int) throws -> Int#>\nSwift.Sequence:2:28:\
    \ note: 'reduce' declared here\n    @inlinable public func reduce<Result>(_ initialResult:\
    \ Result, _ nextPartialResult: (_ partialResult: Result, Self.Element) throws\
    \ -> Result) rethrows -> Result\n                           ^\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  precondition(x.count >= 0)\n  var result: [Int] = []\n  for index in 0..<x.count\
    \ {\n    guard index < xs.count else { fatalError(\"array index out of range\"\
    ) }\n    let x = xs[index]\n    if xs.count == 1 {\n      result.append(1)\n \
    \   } else {\n      result.append(x * result[index])\n    }\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpah9p9cc5.swift:10:16: error: cannot find 'x' in scope\n  precondition(x.count\
    \ >= 0)\n               ^\n/tmp/tmpah9p9cc5.swift:12:20: error: cannot find 'x'\
    \ in scope\n  for index in 0..<x.count {\n                   ^\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let length = xs.count\n    var result : [Int] = []\n    for x in xs {\n \
    \       result = result + [1 - Double(x - 1)] / Double(length - 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpf9ik5jbs.swift:13:47: error: binary operator '/' cannot be applied\
    \ to operands of type '[Double]' and 'Double'\n        result = result + [1 -\
    \ Double(x - 1)] / Double(length - 1)\n                          ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~~~~~~\n/tmp/tmpf9ik5jbs.swift:13:47: note: overloads for '/'\
    \ exist with these partially matching parameter lists: (Double, Double), (Duration,\
    \ Double)\n        result = result + [1 - Double(x - 1)] / Double(length - 1)\n\
    \                                              ^\n/tmp/tmpf9ik5jbs.swift:13:25:\
    \ error: binary operator '+' cannot be applied to operands of type '[Int]' and\
    \ 'Double'\n        result = result + [1 - Double(x - 1)] / Double(length - 1)\n\
    \                 ~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  var r = [Int]()\n  for n in xs {\n    r.append(n * n)\n  }\n  return r\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpwx0rayiz/tmpwx0rayiz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c37b78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c3786fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c3786f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c3786e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwx0rayiz                        0x000055be1246e5fc <unavailable> + 5628

    5    libc.so.6                          0x00002b0c37d64460 __libc_start_main +
    245

    6    tmpwx0rayiz                        0x000055be1246e1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979710
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    assert(xs.count >= 1)\n    var product = 1\n    for x in xs {\n        product\
    \ *= x\n    }\n    var derivatives = [Int]()\n    for x in xs {\n        derivatives.append(product\
    \ / x)\n    }\n    return derivatives\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp7e7e2jmv/tmp7e7e2jmv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af96bc4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af96b943b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af96b943988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af96b9427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7e7e2jmv                        0x00005644ebfd46ec <unavailable> + 5868

    5    libc.so.6                          0x00002af96be38460 __libc_start_main +
    245

    6    tmp7e7e2jmv                        0x00005644ebfd42d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let n = xs.count\n    var d: [Int] = []\n    for i in 1..<n {\n        let\
    \ m = (n - i) / Double(i)\n        d.append((xs[i] * m).rounded(.toNearestOrZero))\n\
    \    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcjw7cfov.swift:13:25: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        let m = (n - i) / Double(i)\n\
    \                ~~~~~~~ ^ ~~~~~~~~~\n/tmp/tmpcjw7cfov.swift:13:25: note: overloads\
    \ for '/' exist with these partially matching parameter lists: (Double, Double),\
    \ (Duration, Double), (Int, Int)\n        let m = (n - i) / Double(i)\n      \
    \                  ^\n/tmp/tmpcjw7cfov.swift:14:39: error: cannot infer contextual\
    \ base in reference to member 'toNearestOrZero'\n        d.append((xs[i] * m).rounded(.toNearestOrZero))\n\
    \                                     ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var i = 0\n    var x = 1\n    var sum = [Int](count: xs.count, repeatedValue:\
    \ 0)\n    while i < xs.count {\n        sum[i] = xs[i] - x\n        i += 1\n \
    \       x *= xs[i]\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpvxhiaia9.swift:12:15: error: no exact matches in call to initializer\
    \ \n    var sum = [Int](count: xs.count, repeatedValue: 0)\n              ^\n\
    /tmp/tmpvxhiaia9.swift:12:15: note: candidate has partially matching parameter\
    \ list (repeating: Int, count: Int)\n    var sum = [Int](count: xs.count, repeatedValue:\
    \ 0)\n              ^\n/tmp/tmpvxhiaia9.swift:12:15: note: candidate has partially\
    \ matching parameter list (repeating: Int, count: Int)\n    var sum = [Int](count:\
    \ xs.count, repeatedValue: 0)\n              ^\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return Array(0..<(xs.count) - 1)\n        .map { idx in\n            let\
    \ x = xs[idx] * xs[idx].pow(2)\n            return x - xs[idx].pow(2)\n      \
    \  }\n        .reversed()\n        .map { Double($0).round() }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp0clxfcsc.swift:12:39: error: value of type 'Int' has no member\
    \ 'pow'\n            let x = xs[idx] * xs[idx].pow(2)\n                      \
    \        ~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659979747
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    func calcDerivative(a: Int) -> Int {\n        let a = a - 1\n        let\
    \ b = 1\n        return (b - a) * xs[a]\n    }\n\n    var result = [0]\n    for\
    \ a in xs {\n        result.append(calcDerivative(a))\n    }\n\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpbzzj816q.swift:18:38: error: missing argument label 'a:' in call\n\
    \        result.append(calcDerivative(a))\n                                  \
    \   ^\n                                     a: \n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in xs {\n        result.append(Double(i))\n\
    \        result.append(Double(i) * i)\n    }\n    result.reverse()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmphm5n0k23.swift:12:23: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        result.append(Double(i))\n        \
    \              ^\n                      Int(     )\n/tmp/tmphm5n0k23.swift:13:23:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        result.append(Double(i) * i)\n                      ^\n             \
    \         Int(     )\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return polyDerivative(xs, coefficients: 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmps74qp7eb.swift:10:12: error: cannot find 'polyDerivative' in scope\n\
    \    return polyDerivative(xs, coefficients: 1)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    if xs.count == 0 {\n        return [0]\n    }\n    var result = [Int]()\n\
    \    var product = 1\n    for x in xs {\n        result = result + [product -\
    \ 1] * x\n        product = product * x\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpvi385hwu.swift:16:41: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Array<Int>'\n        result = result + [product -\
    \ 1] * x\n                                        ^\n/tmp/tmpvi385hwu.swift:16:27:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \        result = result + [product - 1] * x\n                          ^\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return Array(0..<xs.count).map { (index, _) in\n        let x = xs[index]\n\
    \        return (xs - x).map { $0 * $1 / x }\n    }.flatMap { $0 }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpo7s8jr3y.swift:10:38: error: contextual closure type '(Int) throws\
    \ -> Int?' expects 1 argument, but 2 were used in closure body\n    return Array(0..<xs.count).map\
    \ { (index, _) in\n                                     ^\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var x2 = 0, x3 = 0 \n    for i in xs {\n        x2 += 2 * i\n        x3 +=\
    \ 3 * i * i\n    }\n    var result = [Int](xs.count)\n    result[0] = 1\n    result[1]\
    \ = x2\n    result[2] = x3\n    for i in 0 ..< xs.count - 1 {\n        let term\
    \ = xs[i] + (2 * result[i]) + (3 * result[i] * result[i]) + (4 * result[i] * result[i]\
    \ * result[i])\n        result[i + 1] = term\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp2lczj9xi.swift:15:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var result = [Int](xs.count)\n                       ^\n      \
    \                 arrayLiteral: \n"
  stdout: ''
  timestamp: 1659979710
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var x = 1\n    for _ in 0..<xs.count {\n      \
    \  result.append(x * xs.last!)\n        x *= xs.last!\n    }\n    result.reverse()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp1qqurrik/tmp1qqurrik.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec070a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec06d97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec06d97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec06d967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1qqurrik                        0x000055735fe507ac <unavailable> + 6060

    5    libc.so.6                          0x00002aec0728c460 __libc_start_main +
    245

    6    tmp1qqurrik                        0x000055735fe50399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979710
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in xs {\n        result.append(x * x)\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxxjn1p5v/tmpxxjn1p5v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12fb447c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12fb13eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12fb13e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12fb13d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxxjn1p5v                        0x000056326d5055fc <unavailable> + 5628

    5    libc.so.6                          0x00002b12fb633460 __libc_start_main +
    245

    6    tmpxxjn1p5v                        0x000056326d5051e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824844
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var acc = [Int]()\n    var accSquare = [Int]()\n    for i in 0 ..< xs.count\
    \ {\n        acc[i] = xs[i]\n        accSquare[i] = acc[i] * acc[i]\n    }\n \
    \   for i in 0 ..< xs.count - 1 {\n        acc[i] = acc[i + 1]\n        accSquare[i]\
    \ = accSquare[i + 1] + acc[i] * acc[i]\n    }\n    for i in 0 ..< xs.count - 1\
    \ {\n        accSquare[i] = accSquare[i + 1]\n    }\n    let result: [[Int]] =\
    \ acc.map({ $0 * $0 })\n    if !result.isEmpty {\n        let square: [[Int]]\
    \ = result.map({ $0 * $0 })\n        if !square.isEmpty {\n            return\
    \ square + result\n        }\n    }\n    return []\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpq4uft1xp.swift:23:40: error: cannot convert value of type 'Int'\
    \ to closure result type '[Int]'\n    let result: [[Int]] = acc.map({ $0 * $0\
    \ })\n                                    ~~~^~~~\n/tmp/tmpq4uft1xp.swift:25:47:\
    \ error: binary operator '*' cannot be applied to two '[Int]' operands\n     \
    \   let square: [[Int]] = result.map({ $0 * $0 })\n                          \
    \                    ^\nSwift.FloatingPoint:1:17: note: candidate requires that\
    \ '[Int]' conform to 'FloatingPoint' (requirement specified as 'Self' : 'FloatingPoint')\n\
    public protocol FloatingPoint : Hashable, SignedNumeric, Strideable where Self\
    \ == Self.Magnitude {\n                ^\n/tmp/tmpq4uft1xp.swift:27:27: error:\
    \ cannot convert return expression of type '[[Int]]' to return type '[Int]'\n\
    \            return square + result\n                          ^\n/tmp/tmpq4uft1xp.swift:27:27:\
    \ note: arguments to generic parameter 'Element' ('[Int]' and 'Int') are expected\
    \ to be equal\n            return square + result\n                          ^\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return (0...(xs.count)).map { i in\n        xs[i] * xs[(i + 1) % xs.count]\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3, 1, 2,\
    \ 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs:\
    \ [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b144e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b141de561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5b141de286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5b141de13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5b141ddbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5b13fdde83 <unavailable> + 188035

    6    tmp2ayn_ezs                        0x00005632d6559cb7 <unavailable> + 7351

    7    tmp2ayn_ezs                        0x00005632d655a22f <unavailable> + 8751

    8    libswiftCore.so                    0x00002b5b141c6820 Collection.map<A>(_:)
    + 426

    9    tmp2ayn_ezs                        0x00005632d6559bd9 <unavailable> + 7129

    10   tmp2ayn_ezs                        0x00005632d6559574 <unavailable> + 5492

    11   libc.so.6                          0x00002b5b146d3460 __libc_start_main +
    245

    12   tmp2ayn_ezs                        0x00005632d6559249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in xs {\n        result.append(x * x)\n \
    \   }\n    result.reverse()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpifxdje2l/tmpifxdje2l.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4dcb0cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dcadc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dcadc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dcadc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpifxdje2l                        0x000055623e9b26cc <unavailable> + 5836

    5    libc.so.6                          0x00002b4dcb2b9460 __libc_start_main +
    245

    6    tmpifxdje2l                        0x000055623e9b22b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979710
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var acc: Int = 0\n    var diff: Int = 0\n    var idx: Int = 0\n    while\
    \ idx < xs.count {\n        acc += xs[idx]\n        diff += xs[idx]\n        idx\
    \ += 1\n    }\n    var result = [Int]()\n    result[0] = acc\n    if diff != 0\
    \ {\n        result[1] = diff / acc\n        result[2] = diff / result[1]\n  \
    \      for idx in 2..<xs.count {\n            result[idx] = result[idx] - result[idx\
    \ - 1] * result[1]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b9cf74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b9cc6b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9b9cc6b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9b9cc6b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9b9cc6abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9b9ca6a7ec <unavailable> + 186348

    6    tmpxy773vxe                        0x0000555e8db12d4a <unavailable> + 7498

    7    tmpxy773vxe                        0x0000555e8db125d4 <unavailable> + 5588

    8    libc.so.6                          0x00002b9b9d160460 __libc_start_main +
    245

    9    tmpxy773vxe                        0x0000555e8db122a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let n = count(xs)\n    var result = [Int]()\n    var sum = 0\n\n    for i\
    \ in 0..<n {\n        sum += pow(xs[i], Double(i + 1))\n    }\n    for i in 0..<n\
    \ {\n        result.append(Int(xs[i] - sum))\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpcmh1nzcj.swift:10:13: error: cannot find 'count' in scope\n   \
    \ let n = count(xs)\n            ^~~~~\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    guard xs.count > 0 else { return [] }\n    var results = [Int](xs.count)\n\
    \    for i in 0..<results.count {\n        if i == 0 {\n            results[i]\
    \ = 1\n        }\n        else {\n            results[i] = results[i-1] * xs[i]\n\
    \        }\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp53tr76ta.swift:11:25: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var results = [Int](xs.count)\n                        ^\n    \
    \                    arrayLiteral: \n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return withUnsafeMutablePointer(&xs) { xsptr in\n        let p = UnsafeMutablePointer<Int>(bitPattern:\
    \ xsptr)\n        let p2 = UnsafeMutablePointer<Int>(bitPattern: p)\n        let\
    \ p3 = UnsafeMutablePointer<Int>(bitPattern: p2)\n        let p4 = UnsafeMutablePointer<Int>(bitPattern:\
    \ p3)\n        let p5 = UnsafeMutablePointer<Int>(bitPattern: p4)\n        let\
    \ p6 = UnsafeMutablePointer<Int>(bitPattern: p5)\n\n        var der: UnsafeMutablePointer<Int>\
    \ = UnsafeMutablePointer<Int>(bitPattern: 0)\n        let deg: Int = Degree(xs)\n\
    \        let deg2 = Int(powf(2.0, Double(deg)))\n\n        UnsafeMutablePointer<Float>\
    \ c0 = UnsafeMutablePointer<Float>(bitPattern: 0)\n        UnsafeMutablePointer<Float>\
    \ c1 = UnsafeMutablePointer<Float>(bitPattern: 0)\n        let n = deg2\n    \
    \    var x: Double = 0\n        var d = 0\n        UnsafeMutablePointer<Float>\
    \ z = UnsafeMutablePointer<Float>(bitPattern: 0)\n\n        while n > 0 {\n  \
    \          d += 1\n            x = (2 * x) * Double(d)\n            var sum: Double\
    \ = 0\n            for i in 0..<n {\n                let x2 = x\n            \
    \    sum += x2\n                let z = x2 / x\n                let c00 = c0\n\
    \                let c10 = c1\n                let c11 = c0\n                c0.advanced(by:\
    \ Int(n))\n                c1.advanced(by: Int(n))\n                let c0 = c00\n\
    \                let c1 = c10\n                c0.advanced(by: Int(n))\n     \
    \           c1.advanced(by: Int(n))\n\n                let p6 = UnsafeMutablePointer<Float>(bitPattern:\
    \ c0)\n                let p7 = UnsafeMutablePointer<Float>(bitPattern: c1)\n\
    \                let p8 = UnsafeMutablePointer<Float>(bitPattern: p7)\n      \
    \          let p9 = UnsafeMutablePointer<Float>(bitPattern: p8)\n            \
    \    let p10 = UnsafeMutablePointer<Float>(bitPattern: p9)\n                let\
    \ p11 = UnsafeMutablePointer<Float>(bitPattern: p10)\n                let p12\
    \ = UnsafeMutablePointer<Float>(bitPattern: p11)\n                let p13 = UnsafeMutablePointer<Float>(bitPattern:\
    \ p12)\n                let p14 = UnsafeMutablePointer<Float>(bitPattern: p13)\n\
    \                let p15 = UnsafeMutablePointer<Float>(\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpj95tkebq.swift:22:36: error: consecutive statements on a line must\
    \ be separated by ';'\n        UnsafeMutablePointer<Float> c0 = UnsafeMutablePointer<Float>(bitPattern:\
    \ 0)\n                                   ^\n                                 \
    \  ;\n/tmp/tmpj95tkebq.swift:23:36: error: consecutive statements on a line must\
    \ be separated by ';'\n        UnsafeMutablePointer<Float> c1 = UnsafeMutablePointer<Float>(bitPattern:\
    \ 0)\n                                   ^\n                                 \
    \  ;\n/tmp/tmpj95tkebq.swift:27:36: error: consecutive statements on a line must\
    \ be separated by ';'\n        UnsafeMutablePointer<Float> z = UnsafeMutablePointer<Float>(bitPattern:\
    \ 0)\n                                   ^\n                                 \
    \  ;\n/tmp/tmpj95tkebq.swift:57:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpj95tkebq.swift:76:43: error: expected '}' at end of brace statement\n\
    assert(derivative(xs: [1]) == [] as [Int])\n                                 \
    \         ^\n/tmp/tmpj95tkebq.swift:29:21: note: to match this opening '{'\n \
    \       while n > 0 {\n                    ^\n/tmp/tmpj95tkebq.swift:76:43: error:\
    \ expected '}' at end of closure\nassert(derivative(xs: [1]) == [] as [Int])\n\
    \                                          ^\n/tmp/tmpj95tkebq.swift:10:42: note:\
    \ to match this opening '{'\n    return withUnsafeMutablePointer(&xs) { xsptr\
    \ in\n                                         ^\n/tmp/tmpj95tkebq.swift:76:43:\
    \ error: expected '}' at end of brace statement\nassert(derivative(xs: [1]) ==\
    \ [] as [Int])\n                                          ^\n/tmp/tmpj95tkebq.swift:9:37:\
    \ note: to match this opening '{'\nfunc derivative(xs: [Int]) -> [Int] {\n   \
    \                                 ^\n/tmp/tmpj95tkebq.swift:19:24: error: cannot\
    \ find 'Degree' in scope\n        let deg: Int = Degree(xs)\n                \
    \       ^~~~~~\n/tmp/tmpj95tkebq.swift:20:24: error: cannot find 'powf' in scope\n\
    \        let deg2 = Int(powf(2.0, Double(deg)))\n                       ^~~~\n\
    /tmp/tmpj95tkebq.swift:22:35: error: '>' is not a postf"
  stdout: ''
  timestamp: 1659979710
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for i in 0..<(xs.count - 1) {\n        let x\
    \ = xs[i]\n        result.append(x)\n        result.append(x * x)\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpch9xn88e/tmpch9xn88e.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc48dfdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc48af4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc48af4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc48af37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpch9xn88e                        0x000055fe4a7ad66c <unavailable> + 5740

    5    libc.so.6                          0x00002acc48fe9460 __libc_start_main +
    245

    6    tmpch9xn88e                        0x000055fe4a7ad259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [0]\n    for i in 0 ..< xs.count {\n        let coef = xs[i]\n\
    \        let x = i\n        result[0] += coef\n        let fx = f(x)\n       \
    \ result[0] += fx * (xs[i] - x)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7yxfpbzj.swift:15:18: error: cannot find 'f' in scope\n       \
    \ let fx = f(x)\n                 ^\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in xs {\n        result.append(x * x)\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxxjn1p5v/tmpxxjn1p5v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12fb447c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12fb13eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12fb13e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12fb13d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxxjn1p5v                        0x000056326d5055fc <unavailable> + 5628

    5    libc.so.6                          0x00002b12fb633460 __libc_start_main +
    245

    6    tmpxxjn1p5v                        0x000056326d5051e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824844
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in xs {\n        result.append(x * x)\n \
    \   }\n    result.reverse()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpifxdje2l/tmpifxdje2l.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4dcb0cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dcadc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dcadc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dcadc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpifxdje2l                        0x000055623e9b26cc <unavailable> + 5836

    5    libc.so.6                          0x00002b4dcb2b9460 __libc_start_main +
    245

    6    tmpifxdje2l                        0x000055623e9b22b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979710
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    // TODO(xin): make xs copyable\n    let len = xs.count\n\n    var ds = [Int](repeating:\
    \ 0, count: len)\n    var m = 1\n    for i in 0..<len {\n        let x = xs[i]\n\
    \        for j in 0..<i {\n            ds[j] += m * x\n        }\n        ds[i]\
    \ = ds[i]\n        m *= x\n    }\n\n    return ds\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp_8mtpv12/tmp_8mtpv12.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b8facfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b8f7c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b8f7c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b8f7c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_8mtpv12                        0x0000555cc73ff6dc <unavailable> + 5852

    5    libc.so.6                          0x00002b7b8fcbb460 __libc_start_main +
    245

    6    tmp_8mtpv12                        0x0000555cc73ff2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return Array(0..<xs.count).map{ derivative($0, xs) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpbpyqlolm.swift:10:52: error: extra argument in call\n    return\
    \ Array(0..<xs.count).map{ derivative($0, xs) }\n                            \
    \                  ~~~~~^~~\n/tmp/tmpbpyqlolm.swift:10:48: error: cannot convert\
    \ value of type 'Int' to expected argument type '[Int]'\n    return Array(0..<xs.count).map{\
    \ derivative($0, xs) }\n                                               ^\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    assert(xs.count == 1)\n    var result = [Int]()\n    var x0 = xs[0]\n   \
    \ for x in xs {\n        let x = xs[0]\n        for d in 1...3 {\n           \
    \ result.append(x0 * pow(x, Float(d)) + x0 / pow(x, Float(d-1)) * x + (x0 - x)\
    \ / pow(x, Float(d - 2)))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpgqi2hews.swift:16:32: error: cannot find 'pow' in scope\n     \
    \       result.append(x0 * pow(x, Float(d)) + x0 / pow(x, Float(d-1)) * x + (x0\
    \ - x) / pow(x, Float(d - 2)))\n                               ^~~\n/tmp/tmpgqi2hews.swift:16:56:\
    \ error: cannot find 'pow' in scope\n            result.append(x0 * pow(x, Float(d))\
    \ + x0 / pow(x, Float(d-1)) * x + (x0 - x) / pow(x, Float(d - 2)))\n         \
    \                                              ^~~\n/tmp/tmpgqi2hews.swift:16:92:\
    \ error: cannot find 'pow' in scope\n            result.append(x0 * pow(x, Float(d))\
    \ + x0 / pow(x, Float(d-1)) * x + (x0 - x) / pow(x, Float(d - 2)))\n         \
    \                                                                            \
    \      ^~~\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var d: [Int] = []\n    var n = 0\n    for i in xs {\n        d[n] = i\n \
    \       n += 1\n    }\n    switch n {\n    case 0:\n        d[0] = 1\n    case\
    \ 1:\n        return d\n    default:\n        for n in 1...n {\n            d[n]\
    \ = (d[n-2] + d[n-1]) / Double(n)\n        }\n        return d\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9c4os89z.swift:23:40: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            d[n] = (d[n-2] + d[n-1]) / Double(n)\n\
    \                                       ^\n                                  \
    \     Int(     )\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = Array<Int>()\n    for index in stride(from: 0, to: xs.count\
    \ - 1, by: 1) {\n        let x = xs[index]\n        let value = 1\n        for\
    \ i in stride(from: 1, to: xs.count, by: 1) {\n            if i == index {\n \
    \               value *= x\n            } else {\n                value *= xs[i]\n\
    \            }\n        }\n        result.append(value)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwm5jpinq.swift:16:23: error: left side of mutating operator isn't\
    \ mutable: 'value' is a 'let' constant\n                value *= x\n         \
    \       ~~~~~ ^\n/tmp/tmpwm5jpinq.swift:13:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let value = 1\n        ^~~\n        var\n/tmp/tmpwm5jpinq.swift:18:23:\
    \ error: left side of mutating operator isn't mutable: 'value' is a 'let' constant\n\
    \                value *= xs[i]\n                ~~~~~ ^\n/tmp/tmpwm5jpinq.swift:13:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let value = 1\n    \
    \    ^~~\n        var\n"
  stdout: ''
  timestamp: 1659979710
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var d: [Int] = [0]\n\n    for i in 0..<xs.count {\n        let x = xs[i]\n\
    \        d[i] = d[i - 1] * x + 1\n    }\n\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b248050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2480206561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2480206286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b248020613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2480205bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2480005e83 <unavailable> + 188035

    6    tmpiuuz210a                        0x0000563adff85d34 <unavailable> + 7476

    7    tmpiuuz210a                        0x0000563adff85584 <unavailable> + 5508

    8    libc.so.6                          0x00002b24806fb460 __libc_start_main +
    245

    9    tmpiuuz210a                        0x0000563adff85259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var a = 1.0\n    var b = 0.0\n    for i in 0 ..< xs.count {\n        b =\
    \ b * (xs[i] + 1.0) + a[i]\n        a = a + xs[i]\n    }\n    return [b]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp2u17jui8.swift:13:20: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        b = b * (xs[i] + 1.0) + a[i]\n \
    \                  ^\n                 Double( )\n/tmp/tmp2u17jui8.swift:13:34:\
    \ error: value of type 'Double' has no subscripts\n        b = b * (xs[i] + 1.0)\
    \ + a[i]\n                                ~^\n/tmp/tmp2u17jui8.swift:14:19: error:\
    \ cannot convert value of type 'Int' to expected argument type 'Double'\n    \
    \    a = a + xs[i]\n                  ^\n                Double( )\n/tmp/tmp2u17jui8.swift:16:13:\
    \ error: cannot convert value of type 'Double' to expected element type 'Int'\n\
    \    return [b]\n            ^\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return Array(0..<xs.count).map { i in\n        if i > 0 {\n            return\
    \ xs[i] * derivative(xs[i-1]) + xs[i]\n        } else {\n            return xs[i]\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmphaewpu3n.swift:10:18: error: missing argument label 'arrayLiteral:'\
    \ in call\n    return Array(0..<xs.count).map { i in\n                 ^\n   \
    \              arrayLiteral: \n/tmp/tmphaewpu3n.swift:11:12: error: cannot convert\
    \ value of type 'Range<Int>' to expected argument type 'Int'\n        if i > 0\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    precondition(isPowerOfTwo(xs.count), \"xs must be a power of two\")\n   \
    \ let n = xs.count\n    var dp = [Int](n + 1)\n    dp[0] = 1\n    dp[1] = xs[0]\n\
    \    for i in 2..<n {\n        dp[i] = dp[i - 2] * (xs[i] - xs[i - 1])\n    }\n\
    \    return dp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsi1_17iy.swift:10:18: error: cannot find 'isPowerOfTwo' in scope\n\
    \    precondition(isPowerOfTwo(xs.count), \"xs must be a power of two\")\n   \
    \              ^~~~~~~~~~~~\n/tmp/tmpsi1_17iy.swift:12:20: error: missing argument\
    \ label 'arrayLiteral:' in call\n    var dp = [Int](n + 1)\n                 \
    \  ^\n                   arrayLiteral: \n"
  stdout: ''
  timestamp: 1659979710
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  if xs.isEmpty {\n    return []\n  }\n  var res: [Int] = []\n  for x in xs {\n\
    \    res.append(1)\n  }\n  res.append(0)\n  var j = 0\n  for x in xs {\n    let\
    \ y = res[j] * x\n    if j == 0 {\n      res.append(y)\n      j = -1\n    } else\
    \ {\n      res[j] += y\n    }\n  }\n  return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac24adafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac24aaa6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac24aaa6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac24aaa613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac24aaa5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac24a8a5e83 <unavailable> + 188035

    6    tmpigdlsap7                        0x000055f80aeffe06 <unavailable> + 7686

    7    tmpigdlsap7                        0x000055f80aeff5b4 <unavailable> + 5556

    8    libc.so.6                          0x00002ac24af9b460 __libc_start_main +
    245

    9    tmpigdlsap7                        0x000055f80aeff289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    // TODO: Add support for more complicated polynomials\n    if xs.count ==\
    \ 0 {\n        return [Int]()\n    }\n    var result = [Int]()\n    var i = 0\n\
    \    for _ in 0..<xs.count {\n        result.append(xs[i] / xs[i + 1])\n     \
    \   i += 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae43ed73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae43ea6a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae43ea6a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae43ea6a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae43ea69bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae43e869e83 <unavailable> + 188035

    6    tmpgz3wpc7u                        0x0000560b0d649d4a <unavailable> + 7498

    7    tmpgz3wpc7u                        0x0000560b0d6495e4 <unavailable> + 5604

    8    libc.so.6                          0x00002ae43ef5f460 __libc_start_main +
    245

    9    tmpgz3wpc7u                        0x0000560b0d6492b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var res = [0]\n\n    for x in xs {\n        var tmp = x\n\n        while\
    \ tmp > 0 {\n            tmp -= 1\n            res.append(1)\n        }\n    }\n\
    \n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmph_1vsv1m/tmph_1vsv1m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c10ec3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c10bbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c10bba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c10bb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_1vsv1m                        0x000055c6a322759c <unavailable> + 5532

    5    libc.so.6                          0x00002b8c110af460 __libc_start_main +
    245

    6    tmph_1vsv1m                        0x000055c6a3227189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    if xs.count == 0 {\n        return [0]\n    }\n    var d = [0]\n    var dn\
    \ = [1]\n    for i in 0..<(xs.count - 1) {\n        let x = xs[i]\n        d +=\
    \ dn\n        dn.append(x * x)\n    }\n    dn.reverse()\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmvscv8ot/tmpmvscv8ot.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3cf74dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3cf71d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3cf71d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3cf71d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvscv8ot                        0x00005555b87577ac <unavailable> + 6060

    5    libc.so.6                          0x00002b3cf76c8460 __libc_start_main +
    245

    6    tmpmvscv8ot                        0x00005555b8757399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = xs[0]\n    for i in 1 ..< xs.count {\n\
    \        sum += xs[i]\n        result.append(sum)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp9i5m0quc/tmp9i5m0quc.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14a4fefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14a4ce6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14a4ce6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14a4ce57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9i5m0quc                        0x000055aafbd4f6cc <unavailable> + 5836

    5    libc.so.6                          0x00002b14a51db460 __libc_start_main +
    245

    6    tmp9i5m0quc                        0x000055aafbd4f2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var i = 0\n    var d = 0\n    var ret = [Int]()\n    while i < xs.count {\n\
    \        ret += [xs[i]] * (xs[i] - 1)\n        i += 1\n    }\n    while i < xs.count\
    \ {\n        d += xs[i]\n        ret.append(d * ret[ret.count - 1])\n        i\
    \ += 1\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpajd40z_d.swift:14:24: error: binary operator '*' cannot be applied\
    \ to operands of type '[Int]' and 'Int'\n        ret += [xs[i]] * (xs[i] - 1)\n\
    \               ~~~~~~~ ^ ~~~~~~~~~~~\n/tmp/tmpajd40z_d.swift:14:24: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Int, Int)\n  \
    \      ret += [xs[i]] * (xs[i] - 1)\n                       ^\n"
  stdout: ''
  timestamp: 1659979719
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in 0..<xs.count {\n        result.append(xs[i])\n\
    \        result.append(xs[i] * xs[i])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp6e74lxt7/tmp6e74lxt7.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedefbd8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedef8cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedef8cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedef8ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6e74lxt7                        0x000055d1ef0f16cc <unavailable> + 5836

    5    libc.so.6                          0x00002aedefdc4460 __libc_start_main +
    245

    6    tmp6e74lxt7                        0x000055d1ef0f12b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659824844
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    precondition(xs.count >= 1)\n\n    var result = [Int](xs.count)\n    for\
    \ i in 1..<xs.count {\n        result[i] = result[i-1] * xs[i]\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpo4rg_7wk.swift:12:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var result = [Int](xs.count)\n                       ^\n      \
    \                 arrayLiteral: \n"
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var d = 0\n    for i in xs.indices {\n        d += xs[i]\n    }\n    let\
    \ n = xs.count\n    var y = d\n    for i in 0..<n {\n        y /= xs[i]\n    }\n\
    \    return [y]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp77bwi3pm/tmp77bwi3pm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17713b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17710b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17710b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17710af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp77bwi3pm                        0x000055f95d6cd6ac <unavailable> + 5804

    5    libc.so.6                          0x00002b17715a5460 __libc_start_main +
    245

    6    tmp77bwi3pm                        0x000055f95d6cd299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var x = 0\n    var r = [Int]()\n    for value in xs {\n        x += value\n\
    \        r.append(self[x])\n    }\n    return r\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp56gjof1w.swift:14:18: error: cannot find 'self' in scope; did you\
    \ mean to use it in a type or extension context?\n        r.append(self[x])\n\
    \                 ^~~~\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var dy: [Int] = []\n    for i in xs {\n        dy.append(1)\n    }\n    for\
    \ i in xs.dropFirst() {\n        dy[i] *= i\n    }\n    return dy\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae99a00dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae999d04561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae999d04286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae999d0413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae999d03bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae999b037ec <unavailable> + 186348

    6    tmp7bo5_jol                        0x00005593f3d72e89 <unavailable> + 7817

    7    tmp7bo5_jol                        0x00005593f3d72604 <unavailable> + 5636

    8    libc.so.6                          0x00002ae99a1f9460 __libc_start_main +
    245

    9    tmp7bo5_jol                        0x00005593f3d722d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  var result = [Int]()\n  var product = 1\n  for _ in 0 ..< xs.count {\n    product\
    \ = product * xs[_x]\n    _x += 1\n    result.append(product)\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpt2s_znck.swift:13:28: error: cannot find '_x' in scope\n    product\
    \ = product * xs[_x]\n                           ^~\n/tmp/tmpt2s_znck.swift:14:5:\
    \ error: cannot find '_x' in scope\n    _x += 1\n    ^~\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    \n    let degree = xs.count\n    var result = Array<Int>()\n    for index\
    \ in 0..<degree {\n        result.append(xs[index])\n    }\n    let result = result.map\
    \ { Double($0) / xs.last }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmps_hnawq7.swift:16:47: error: cannot convert value of type 'Int?'\
    \ to expected argument type 'Double'\n    let result = result.map { Double($0)\
    \ / xs.last }\n                                              ^\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  guard !isZero(xs) else {\n    return [0]\n  }\n  var result = [Int]()\n  for\
    \ i in 0 ..< xs.count {\n    result.append(xs[i] * xs[i])\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpffcqqs99.swift:10:10: error: cannot find 'isZero' in scope\n  guard\
    \ !isZero(xs) else {\n         ^~~~~~\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  var ds = [Int]()\n  for x in xs {\n    ds.append(x * x)\n  }\n  return ds\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpm97agwdz/tmpm97agwdz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab010a6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab010762b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab010762988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0107617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm97agwdz                        0x0000561d376955fc <unavailable> + 5628

    5    libc.so.6                          0x00002ab010c57460 __libc_start_main +
    245

    6    tmpm97agwdz                        0x0000561d376951e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    func f(y: Int) -> Int {\n        return y * y\n    }\n    \n    if let x\
    \ = xs.first {\n        return xs.reduce(1) { $0 + f(y: $1) * $0 }\n    }\n  \
    \  return [0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpvt9auflf.swift:15:19: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n        return xs.reduce(1) { $0 + f(y: $1)\
    \ * $0 }\n               ~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return derivative_core(xs: xs, dx: 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpyb7pazl7.swift:10:12: error: cannot find 'derivative_core' in scope\n\
    \    return derivative_core(xs: xs, dx: 1)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in xs {\n        result.append(x * x)\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxxjn1p5v/tmpxxjn1p5v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12fb447c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12fb13eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12fb13e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12fb13d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxxjn1p5v                        0x000056326d5055fc <unavailable> + 5628

    5    libc.so.6                          0x00002b12fb633460 __libc_start_main +
    245

    6    tmpxxjn1p5v                        0x000056326d5051e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824844
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return derivative(count: xs.count, repeatedValue: xs)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp3glo8t5a.swift:10:22: error: extra arguments at positions #1, #2\
    \ in call\n    return derivative(count: xs.count, repeatedValue: xs)\n       \
    \              ^\n/tmp/tmp3glo8t5a.swift:9:6: note: 'derivative(xs:)' declared\
    \ here\nfunc derivative(xs: [Int]) -> [Int] {\n     ^\n/tmp/tmp3glo8t5a.swift:10:23:\
    \ error: missing argument for parameter 'xs' in call\n    return derivative(count:\
    \ xs.count, repeatedValue: xs)\n                      ^\n                    \
    \  xs: <#[Int]#>, \n/tmp/tmp3glo8t5a.swift:9:6: note: 'derivative(xs:)' declared\
    \ here\nfunc derivative(xs: [Int]) -> [Int] {\n     ^\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var acc = 0\n    var pow = 1\n\n    for i in xs {\n        acc += i * pow\n\
    \        pow *= i\n    }\n\n    return Array(0..<Int(acc.toDouble()))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp11c_2g8i.swift:18:30: error: value of type 'Int' has no member\
    \ 'toDouble'\n    return Array(0..<Int(acc.toDouble()))\n                    \
    \     ~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var ys = [Int](repeating: 0, count: xs.count)\n    for i in 0 ..< xs.count\
    \ {\n        ys[i] = xs[i]\n    }\n    return ys.reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp7liz1clz/tmp7liz1clz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47163acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47160a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47160a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47160a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7liz1clz                        0x00005585b539273c <unavailable> + 5948

    5    libc.so.6                          0x00002b4716598460 __libc_start_main +
    245

    6    tmp7liz1clz                        0x00005585b5392329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var x = 0.0\n    var ys = [Int](repeating: 0, count: xs.count)\n    for x\
    \ in xs {\n        ys[x] = ys[x] + 1\n    }\n    for y in ys {\n        if y >\
    \ 0 {\n            ys[y] = ys[y] - xs[y] * y\n        }\n    }\n    return ys\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9860ba2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9860899561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9860899286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b986089913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9860898bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9860698e83 <unavailable> + 188035

    6    tmpnq3z9h33                        0x0000556091b33d27 <unavailable> + 7463

    7    tmpnq3z9h33                        0x0000556091b335d4 <unavailable> + 5588

    8    libc.so.6                          0x00002b9860d8e460 __libc_start_main +
    245

    9    tmpnq3z9h33                        0x0000556091b332a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  var res = [0]\n  for i in 0 ..< xs.count {\n    let x = xs[i]\n    if x ==\
    \ 0 {\n      fatalError(\"derivative(xs: [Int]) - xs[i] is 0\")\n    }\n    if\
    \ x > 1 {\n      fatalError(\"derivative(xs: [Int]) - xs[i] is > 1\")\n    }\n\
    \    if res.count == 0 {\n      res += [1]\n    }\n    if res.count >= 2 {\n \
    \     res += res[res.count - 1] * x\n    }\n    if res.count >= 3 {\n      res\
    \ += res[res.count - 2] * x * x\n    }\n  }\n  return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmppbqenuzb.swift:23:33: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Array<Int>'\n      res += res[res.count - 1] * x\n\
    \                                ^\n/tmp/tmppbqenuzb.swift:26:37: error: cannot\
    \ convert value of type 'Int' to expected argument type 'Array<Int>'\n      res\
    \ += res[res.count - 2] * x * x\n                                    ^\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    guard xs.isEmpty == false else {\n        return []\n    }\n    return xs.map\
    \ { 2 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpv4qf75pu/tmpv4qf75pu.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0362e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba035fdbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba035fdb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba035fda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4qf75pu                        0x000055b903b6e4dc <unavailable> + 5340

    5    libc.so.6                          0x00002ba0364d0460 __libc_start_main +
    245

    6    tmpv4qf75pu                        0x000055b903b6e0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    if xs.isEmpty { return [Int]() }\n    let start = xs.count - 1\n    let end\
    \ = start\n    let mid = start / 2\n    var result = [0]\n    for i in 0..<mid\
    \ {\n        result.append(result[i] * xs[i] * xs[i - mid])\n    }\n    if start\
    \ > end {\n        result.append(result[-1])\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9ffb15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9ff80c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac9ff80c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac9ff80c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac9ff80bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac9ff60be83 <unavailable> + 188035

    6    tmppqg141dn                        0x00005588875c0fa7 <unavailable> + 8103

    7    tmppqg141dn                        0x00005588875c0674 <unavailable> + 5748

    8    libc.so.6                          0x00002ac9ffd01460 __libc_start_main +
    245

    9    tmppqg141dn                        0x00005588875c0349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    func f(_ x: Int) -> Int {\n        if xs.count > 0 {\n            let s =\
    \ Array(0..<xs.count).map { 2 * x }\n            return (xs[0] * s + xs[1]).map\
    \ { $0 }\n        }\n        return [0]\n    }\n    return f(xs.first!)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp0mdr3bg6.swift:12:45: error: contextual type for closure argument\
    \ list expects 1 argument, which cannot be implicitly ignored\n            let\
    \ s = Array(0..<xs.count).map { 2 * x }\n                                    \
    \        ^\n                                              _ in\n/tmp/tmp0mdr3bg6.swift:13:40:\
    \ error: value of type 'Int' has no member 'map'\n            return (xs[0] *\
    \ s + xs[1]).map { $0 }\n                   ~~~~~~~~~~~~~~~~~~~ ^~~\n/tmp/tmp0mdr3bg6.swift:15:16:\
    \ error: cannot convert return expression of type '[Int]' to return type 'Int'\n\
    \        return [0]\n               ^~~\n/tmp/tmp0mdr3bg6.swift:17:12: error:\
    \ cannot convert return expression of type 'Int' to return type '[Int]'\n    return\
    \ f(xs.first!)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  return zip(xs, xs.dropFirst())\n    .map { $0 + $1*$0 }\n    .reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpai86i2sl/tmpai86i2sl.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b852c1a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b852be9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b852be9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b852be997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai86i2sl                        0x000055ec1b43463c <unavailable> + 5692

    5    libc.so.6                          0x00002b852c38f460 __libc_start_main +
    245

    6    tmpai86i2sl                        0x000055ec1b434229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let len = xs.count\n    var dp: [Int] = []\n    for i in 0..<len {\n    \
    \    let p = polyAt(xs, i)\n        dp.append(p - xs[i])\n    }\n    return dp\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9yhpnht6.swift:13:17: error: cannot find 'polyAt' in scope\n  \
    \      let p = polyAt(xs, i)\n                ^~~~~~\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    guard xs.count >= 2 else {\n        return [0]\n    }\n\n    let ys = [Int](xs.count)\n\
    \n    for i in 0..<xs.count {\n        let x = xs[i]\n        let k = xs.count\
    \ - 1 - i\n        ys[k] -= x\n        ys[k + 1] += x\n    }\n\n    return ys\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsjtawko_.swift:14:20: error: missing argument label 'arrayLiteral:'\
    \ in call\n    let ys = [Int](xs.count)\n                   ^\n              \
    \     arrayLiteral: \n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return Array(0..<xs.count).map {\n        Double(xs[$0]) * xs[$0]\n    }.flatMap(Float64.reciprocal)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpr01zgc3t.swift:11:24: error: binary operator '*' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n        Double(xs[$0]) * xs[$0]\n  \
    \      ~~~~~~~~~~~~~~ ^ ~~~~~~\n/tmp/tmpr01zgc3t.swift:11:24: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n        Double(xs[$0]) * xs[$0]\n                       ^\n/tmp/tmpr01zgc3t.swift:12:23:\
    \ error: type 'Float64' (aka 'Double') has no member 'reciprocal'\n    }.flatMap(Float64.reciprocal)\n\
    \              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979726
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var pow = 1\n    for i in 0 ..< xs.count {\n  \
    \      var x = xs[i]\n        var d = 1\n        for j in 0 ..< x {\n        \
    \    d *= pow\n        }\n        result.append(d)\n        pow *= x\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpugcclqqi/tmpugcclqqi.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33cf731c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33cf428b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33cf428988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33cf4277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpugcclqqi                        0x000055aab6cc36cc <unavailable> + 5836

    5    libc.so.6                          0x00002b33cf91d460 __libc_start_main +
    245

    6    tmpugcclqqi                        0x000055aab6cc32b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    // TODO: Handle non-polynomial input case\n    guard xs.count > 0 else {\n\
    \        return []\n    }\n\n    var sum: Int = 0\n    var partial: Int = 0\n\
    \    var partialDeriv = 0\n    for i in 0..<(xs.count - 1) {\n        partial\
    \ = partial * xs[i]\n        partialDeriv += partial\n        sum += partialDeriv\n\
    \    }\n\n    var ret = [Int]()\n    for i in 0..<(xs.count - 1) {\n        ret.append(partialDeriv\
    \ / sum)\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14137: Fatal error: Division by zero

    Current stack trace:

    0    libswiftCore.so                    0x00002acac6da0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acac6a97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acac6a97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acac6a9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acac6a96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp8berp9j2                        0x000055d949dfbfea <unavailable> + 8170

    6    tmp8berp9j2                        0x000055d949dfb5e4 <unavailable> + 5604

    7    libc.so.6                          0x00002acac6f8c460 __libc_start_main +
    245

    8    tmp8berp9j2                        0x000055d949dfb2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var dx: [Int] = []\n    for i in 0..<xs.count {\n        dx.append(xs[i]\
    \ - xs[i - 1] * xs[i])\n    }\n    return dx\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b4c5d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b4c2c9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8b4c2c9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8b4c2c913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8b4c2c8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8b4c0c8e83 <unavailable> + 188035

    6    tmp_586olkj                        0x0000563335283d03 <unavailable> + 7427

    7    tmp_586olkj                        0x0000563335283584 <unavailable> + 5508

    8    libc.so.6                          0x00002b8b4c7be460 __libc_start_main +
    245

    9    tmp_586olkj                        0x0000563335283259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    guard xs.count >= 1 else { return [] }\n    var result: [Int] = [0]\n   \
    \ for i in 1..<xs.count {\n        result.append(result[i-1] * xs[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpn0mcoh_r/tmpn0mcoh_r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7c6057c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7c5d4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7c5d4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7c5d4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0mcoh_r                        0x000055a7a00ed66c <unavailable> + 5740

    5    libc.so.6                          0x00002ac7c6243460 __libc_start_main +
    245

    6    tmpn0mcoh_r                        0x000055a7a00ed259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    var m = 0.0\n    for x in xs {\n        m = m\
    \ * x + 1.0\n        result.append(m)\n    }\n    result.reverse()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmprj7s_4l8.swift:13:17: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        m = m * x + 1.0\n              \
    \  ^\n                Double( )\n/tmp/tmprj7s_4l8.swift:14:23: error: cannot convert\
    \ value of type 'Double' to expected argument type 'Int'\n        result.append(m)\n\
    \                      ^\n                      Int( )\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let length = xs.count\n    var result: [Int] = []\n    for n in 0..<length-1\
    \ {\n        let x2 = pow(xs[length-1-n], 2)\n        result.append(xs[length-1-n]\
    \ - xs[length-1-n - 1] * x2)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1h9flwyc.swift:13:18: error: cannot find 'pow' in scope\n     \
    \   let x2 = pow(xs[length-1-n], 2)\n                 ^~~\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    if xs.isEmpty { return [] }\n    var result: [Int] = []\n    guard xs[0]\
    \ != 0 else {\n        // If xs[0] is zero, then the derivative is zero.\n   \
    \     return result\n    }\n    for x in xs.prefix(1) {\n        var coef = 1\n\
    \        if x != 1 {\n            coef = x * result[0]\n        }\n        result.insert(coef)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl5opkzuo.swift:21:27: error: missing argument for parameter 'at'\
    \ in call\n        result.insert(coef)\n                          ^\n        \
    \                  , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared\
    \ here\n    @inlinable public mutating func insert(_ newElement: __owned Element,\
    \ at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return derivativeInPlace(xs, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpkdcbmwnx.swift:10:12: error: cannot find 'derivativeInPlace' in\
    \ scope\n    return derivativeInPlace(xs, 0)\n           ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var x0 = xs[0]\n    var x1 = xs[1]\n    var x2 = xs[2]\n    var x3 = xs[3]\n\
    \    var x4 = xs[4]\n    var x5 = xs[5]\n\n    var deriv = [Int](repeating: 0,\
    \ count: 6)\n\n    deriv[1] = ((x0 - x1) * x0) + ((x2 - x3 * x1) * x1) + ((x4\
    \ - x5) * x2) + ((x5 * x3)) * x3\n\n    deriv[2] = ((x0 - x2) * x0) + ((x3 - x5\
    \ * x1) * x1) + ((x5 - x1) * x2) + ((x2 * x3)) * x3\n    deriv[3] = ((x0 - x4)\
    \ * x0) + ((x2 - x5) * x1) + ((x3 - x1) * x2) + ((x5 * x2)) * x3\n    deriv[4]\
    \ = ((x0 - x3) * x0) + ((x1 - x2) * x1) + ((x3 - x4) * x2) + ((x2 * x5)) * x3\n\
    \    deriv[5] = ((x0 - x1) * x0) + ((x2 - x3 * x1) * x1) + ((x4 - x5) * x2) +\
    \ ((x5 * x3)) * x3\n\n    return deriv\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d0a483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d0a17a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2d0a17a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2d0a17a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2d0a179bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2d09f7be83 <unavailable> + 188035

    6    tmpsmk78jyo                        0x00005597b9a62af1 <unavailable> + 6897

    7    tmpsmk78jyo                        0x00005597b9a62414 <unavailable> + 5140

    8    libc.so.6                          0x00002b2d0a66f460 __libc_start_main +
    245

    9    tmpsmk78jyo                        0x00005597b9a620e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let n = xs.count\n    var result = [Int](xs.count)\n    for i in 0..<n {\n\
    \        result[i] = (xs[i] - xs[i-1]) / xs[i-1]\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfv7lmsig.swift:11:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var result = [Int](xs.count)\n                       ^\n      \
    \                 arrayLiteral: \n"
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  var result = [Int]()\n  var power = 1\n  var i = 0\n  for _ in xs {\n    power\
    \ = power * i\n    i += 1\n  }\n  for _ in xs {\n    result.append(power * (xs[i]\
    \ - xs[i-1]))\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac042526c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac04221d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac04221d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac04221d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac04221cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac04201ce83 <unavailable> + 188035

    6    tmpi56eywdo                        0x0000561d12104d2b <unavailable> + 7467

    7    tmpi56eywdo                        0x0000561d12104564 <unavailable> + 5476

    8    libc.so.6                          0x00002ac042712460 __libc_start_main +
    245

    9    tmpi56eywdo                        0x0000561d12104239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return zip(xs, xs.dropFirst()).map { $1 / $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpvvj3s12u/tmpvvj3s12u.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9367818c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b936750fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b936750f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b936750e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvj3s12u                        0x000055d6ca71666c <unavailable> + 5740

    5    libc.so.6                          0x00002b9367a04460 __libc_start_main +
    245

    6    tmpvvj3s12u                        0x000055d6ca716259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    if xs.isEmpty {\n        return [0]\n    }\n    let nDec = Int(log10(Double(xs.count))\
    \ + 1)\n    var newXs = [Int](xs.count)\n    for i in 0..<nDec {\n        let\
    \ m = Double(10 * i + 1)\n        newXs[i] = (xs[i - 1] + xs[i] * xs[i + 1] +\
    \ xs[i + 1] * xs[i + 2]) / m\n    }\n    return newXs\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpf3f8gmfr.swift:13:20: error: cannot find 'log10' in scope\n   \
    \ let nDec = Int(log10(Double(xs.count)) + 1)\n                   ^~~~~\n/tmp/tmpf3f8gmfr.swift:14:23:\
    \ error: missing argument label 'arrayLiteral:' in call\n    var newXs = [Int](xs.count)\n\
    \                      ^\n                      arrayLiteral: \n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    if xs.isEmpty() {\n        return []\n    }\n    var result = [Int]()\n \
    \   var acc = 0\n    for v in xs {\n        acc = acc * v\n        result.append(acc)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpxfkege4j.swift:10:11: error: cannot call value of non-function\
    \ type 'Bool'\n    if xs.isEmpty() {\n          ^      ~~\n                 \n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [Int](repeating: 0, count: xs.count)\n    for i in 0..<xs.count\
    \ {\n        result[i] = xs[i]\n    }\n    return ArraySlice(result, start: 0,\
    \ count: xs.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpkt57uaou.swift:14:38: error: extra argument 'start' in call\n \
    \   return ArraySlice(result, start: 0, count: xs.count)\n                   \
    \  ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~\n/tmp/tmpkt57uaou.swift:14:12: error: cannot\
    \ convert return expression of type 'ArraySlice<[Int]>' to return type '[Int]'\n\
    \    return ArraySlice(result, start: 0, count: xs.count)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var d: [Int] = [1]\n    for i in 0 ..< xs.count - 1 {\n        let x = Int(xs[i])\n\
    \        d[i] = d[i] * x\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae846b2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae846824561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae846824286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae84682413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae846823bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae846623e83 <unavailable> + 188035

    6    tmp48m9rml0                        0x000055d602ce6ed1 <unavailable> + 7889

    7    tmp48m9rml0                        0x000055d602ce66c4 <unavailable> + 5828

    8    libc.so.6                          0x00002ae846d19460 __libc_start_main +
    245

    9    tmp48m9rml0                        0x000055d602ce6399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return sequence(from: 0, to: Int64(xs.count)) { i in\n        let x = xs[i]\n\
    \        return xs[i] - x * (xs.count - i) / 2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpnuouasg5.swift:10:12: error: cannot convert return expression of\
    \ type 'UnfoldSequence<T, (T?, Bool)>' to return type '[Int]'\n    return sequence(from:\
    \ 0, to: Int64(xs.count)) { i in\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnuouasg5.swift:10:20: error: extra arguments at positions #1, #2, #3 in\
    \ call\n    return sequence(from: 0, to: Int64(xs.count)) { i in\n           \
    \        ^\nSwift.sequence:1:24: note: 'sequence(first:next:)' declared here\n\
    @inlinable public func sequence<T>(first: T, next: @escaping (T) -> T?) -> UnfoldFirstSequence<T>\n\
    \                       ^\n/tmp/tmpnuouasg5.swift:10:20: error: missing arguments\
    \ for parameters 'first', 'next' in call\n    return sequence(from: 0, to: Int64(xs.count))\
    \ { i in\n                   ^\nSwift.sequence:1:24: note: 'sequence(first:next:)'\
    \ declared here\n@inlinable public func sequence<T>(first: T, next: @escaping\
    \ (T) -> T?) -> UnfoldFirstSequence<T>\n                       ^\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    if xs.isEmpty {\n        return []\n    }\n\n    var result: [Int] = [0]\n\
    \    var sum: Double = 0.0\n    var x = 1\n\n    for idx in 0..<xs.count {\n \
    \       sum += pow(x, idx) * xs[idx]\n    }\n    for idx in 0..<xs.count {\n \
    \       let value = xs[idx] * sum\n        result.append(Double(value))\n    \
    \    sum += value\n        x++\n    }\n\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmphbfit73u.swift:19:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow(x, idx) * xs[idx]\n               ^~~\n/tmp/tmphbfit73u.swift:19:32:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        sum += pow(x, idx) * xs[idx]\n                               ^\n    \
    \                         Double()\n/tmp/tmphbfit73u.swift:19:13: error: binary\
    \ operator '+=' cannot be applied to two 'Double' operands\n        sum += pow(x,\
    \ idx) * xs[idx]\n        ~~~ ^  ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphbfit73u.swift:19:13:\
    \ note: overloads for '+=' exist with these partially matching parameter lists:\
    \ (inout Double, Double)\n        sum += pow(x, idx) * xs[idx]\n            ^\n\
    /tmp/tmphbfit73u.swift:22:29: error: binary operator '*' cannot be applied to\
    \ operands of type 'Int' and 'Double'\n        let value = xs[idx] * sum\n   \
    \                 ~~~~~~~ ^ ~~~\n/tmp/tmphbfit73u.swift:22:29: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Double, Double),\
    \ (Duration, Double), (Int, Int)\n        let value = xs[idx] * sum\n        \
    \                    ^\n/tmp/tmphbfit73u.swift:23:16: error: no exact matches\
    \ in call to instance method 'append'\n        result.append(Double(value))\n\
    \               ^\n/tmp/tmphbfit73u.swift:23:16: note: found candidate with type\
    \ '(__owned Int) -> ()'\n        result.append(Double(value))\n              \
    \ ^\n/tmp/tmphbfit73u.swift:25:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        x++\n         ^~\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    precondition(xs.count > 0, \"xs must be non-empty\")\n    var result = [Int]()\n\
    \    for v in xs {\n        result.append(v * v)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpur3hf7vy/tmpur3hf7vy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb73ee7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb73bdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb73bde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb73bdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpur3hf7vy                        0x00005610c7d046dc <unavailable> + 5852

    5    libc.so.6                          0x00002abb740d3460 __libc_start_main +
    245

    6    tmpur3hf7vy                        0x00005610c7d042c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var results = [Int]()\n    var j = 0\n    for x in xs {\n        j += x\n\
    \        results.append(j)\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp46pg4k37/tmp46pg4k37.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfceb29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfce820b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfce820988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfce81f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp46pg4k37                        0x000055fd421625fc <unavailable> + 5628

    5    libc.so.6                          0x00002acfced15460 __libc_start_main +
    245

    6    tmp46pg4k37                        0x000055fd421621e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result : [Int] = []\n    for i in 0..<xs.count {\n        let value =\
    \ xs[i]\n        result += [value]\n        result += [value - 1]\n    }\n   \
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfjf65t7z.swift:16:5: warning: variable is unused\n    result\n\
    \    ^~~~~~\n/tmp/tmpfjf65t7z.swift:16:5: error: missing return in global function\
    \ expected to return '[Int]'\n    result\n    ^\n/tmp/tmpfjf65t7z.swift:16:5:\
    \ note: did you mean to return the last expression?\n    result\n    ^\n    return\
    \ \n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return Array(repeating: 0, count: (xs.count - 1) * 2)\n        .reduce([Int]())\n\
    \        .replacing(with: xs.map { 2 * $0 })\n        .replacing(with: xs.map\
    \ { $0 / 2 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpjosh4ptf.swift:11:17: error: missing argument for parameter 'into'\
    \ in call\n        .reduce([Int]())\n                ^\n                into:\
    \ <#_#>, \nSwift.Sequence:3:28: note: 'reduce(into:_:)' declared here\n    @inlinable\
    \ public func reduce<Result>(into initialResult: __owned Result, _ updateAccumulatingResult:\
    \ (_ partialResult: inout Result, Self.Element) throws -> ()) rethrows -> Result\n\
    \                           ^\n/tmp/tmpjosh4ptf.swift:11:17: error: cannot convert\
    \ value of type '[Int]' to expected argument type '(inout Result, Int) throws\
    \ -> ()'\n        .reduce([Int]())\n                ^\n"
  stdout: ''
  timestamp: 1659979721
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    \n    var x = Int()\n    var dx: [Int] = []\n    for _ in 0..<xs.count {\n\
    \        x = x * xs[xs.count - 1]\n        dx.append(x)\n    }\n    return dx\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpx67bvllo/tmpx67bvllo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8dbf7d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8dbf4c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8dbf4c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8dbf4c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx67bvllo                        0x00005610e383a66c <unavailable> + 5740

    5    libc.so.6                          0x00002b8dbf9be460 __libc_start_main +
    245

    6    tmpx67bvllo                        0x00005610e383a259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  return polynomial(xs, polynomialDerivative)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp51ju0bjr.swift:10:10: error: cannot find 'polynomial' in scope\n\
    \  return polynomial(xs, polynomialDerivative)\n         ^~~~~~~~~~\n/tmp/tmp51ju0bjr.swift:10:25:\
    \ error: cannot find 'polynomialDerivative' in scope\n  return polynomial(xs,\
    \ polynomialDerivative)\n                        ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  precondition(xs.count >= 1)\n  return Array(0..<xs.count).map {\n    xs[$0]\
    \ * xs[$0] * xs[$0] + xs[$1] * xs[$1]\n  }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpoh5k4_ex.swift:11:10: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n  return Array(0..<xs.count).map {\n         ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979885
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let len = xs.count\n    if len == 0 {\n        return []\n    }\n    let\
    \ zero = xs[0]\n    let result = [zero]\n    for i in 1..<len {\n        result.append(xs[i]\
    \ - xs[i - 1] * result[i - 1])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp4jrvmjhc.swift:17:16: error: cannot use mutating member on immutable\
    \ value: 'result' is a 'let' constant\n        result.append(xs[i] - xs[i - 1]\
    \ * result[i - 1])\n        ~~~~~~ ^\n/tmp/tmp4jrvmjhc.swift:15:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let result = [zero]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return derivative(xs, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpmej0wxzl.swift:10:27: error: extra argument in call\n    return\
    \ derivative(xs, 0)\n                     ~~~~~^~\n"
  stdout: ''
  timestamp: 1659979640
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var sum = 0\n    for i in xs.indices {\n        sum += xs[i]\n    }\n   \
    \ var derivative = [Int](repeating: 0, count: xs.count)\n    for i in 0..<derivative.count\
    \ {\n        derivative[i] = xs[i - 1] * sum\n    }\n    return derivative\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aec5c810c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec5c507561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aec5c507286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aec5c50713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aec5c506bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aec5c306e83 <unavailable> + 188035

    6    tmp6xih3vyb                        0x000055eff5d4af31 <unavailable> + 7985

    7    tmp6xih3vyb                        0x000055eff5d4a674 <unavailable> + 5748

    8    libc.so.6                          0x00002aec5c9fc460 __libc_start_main +
    245

    9    tmp6xih3vyb                        0x000055eff5d4a349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    precondition(xs.count >= 1)\n    precondition(xs.contains(0))\n\n    var\
    \ ys = Array(xs.count + 1)\n    var j = 0\n    for i in 0..<ys.count {\n     \
    \   ys[i] = 0\n    }\n    ys[0] = 1\n    for i in 1..<ys.count {\n        ys[i]\
    \ = ys[i-1] * xs[i]\n    }\n    return ys\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpho0nspug.swift:13:20: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var ys = Array(xs.count + 1)\n                   ^\n          \
    \         arrayLiteral: \n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let count = xs.count\n    if count < 2 {\n        return []\n    }\n    let\
    \ result = Array(count: count) {\n        0\n    }\n    var sum = 0\n    for i\
    \ in 0..<count {\n        sum += xs[i]\n        result[i] = sum\n    }\n    sum\
    \ = 0\n    for i in 1..<count {\n        sum += result[i]\n    }\n    for i in\
    \ 0..<count {\n        result[i] *= sum\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmptwkria30.swift:14:18: error: no exact matches in call to initializer\
    \ \n    let result = Array(count: count) {\n                 ^\nSwift.Array:4:23:\
    \ note: incorrect labels for candidate (have: '(count:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Element, count: Int)\n  \
    \                    ^\nSwift.RangeReplaceableCollection:2:23: note: incorrect\
    \ labels for candidate (have: '(count:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Self.Element, count: Int)\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    assert(xs.count > 1)\n    var result = Array<T>(xs.count + 1)\n    var i\
    \ = 0\n    result[0] = 1\n    for i in 1 ..< xs.count {\n        result[i] = result[i-xs[i]]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp5rjbun_y.swift:11:24: error: cannot find type 'T' in scope\n  \
    \  var result = Array<T>(xs.count + 1)\n                       ^\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  var acc = [Int]()\n  var i = 0\n  var sum = 0\n  for x in xs {\n    sum +=\
    \ x\n    acc[i] = sum\n    i += 1\n  }\n  while i < acc.count {\n    sum += acc[i]\n\
    \    i += 1\n    acc[i] = sum\n  }\n  return acc\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00686d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00683cf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00683cf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00683cf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00683cebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00681ce7ec <unavailable> + 186348

    6    tmpyx1bs37m                        0x0000563b2ac9ad03 <unavailable> + 7427

    7    tmpyx1bs37m                        0x0000563b2ac9a5b4 <unavailable> + 5556

    8    libc.so.6                          0x00002b00688c4460 __libc_start_main +
    245

    9    tmpyx1bs37m                        0x0000563b2ac9a289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  var result = [Int]()\n  for i in 0 ..< xs.count {\n    result.append(Int((xs[i]\
    \ * Int(i))) + Int(i))\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpthxkl7em/tmpthxkl7em.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f13ed1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f13bc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f13bc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f13bc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpthxkl7em                        0x00005625819e37fc <unavailable> + 6140

    5    libc.so.6                          0x00002b3f140bd460 __libc_start_main +
    245

    6    tmpthxkl7em                        0x00005625819e33e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return gradient(at: 0.0, xs: xs)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp4e3ehaot.swift:10:12: error: cannot find 'gradient' in scope\n\
    \    return gradient(at: 0.0, xs: xs)\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let len = xs.count\n    var ys = Array<Int>(repeating: 0, count: len)\n \
    \   for i in 0..<len - 1 {\n        ys[i] = xs[i + 1] - xs[i]\n    }\n    return\
    \ ys\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs:\
    \ [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpyy7ejuqt/tmpyy7ejuqt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c04fa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c04c9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c04c9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c04c997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyy7ejuqt                        0x000056000db426dc <unavailable> + 5852

    5    libc.so.6                          0x00002b3c0518f460 __libc_start_main +
    245

    6    tmpyy7ejuqt                        0x000056000db422c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    if xs.isEmpty { return [] }\n    var ys = [Int]()\n    for i in 0..<xs.count\
    \ {\n        var x = xs[i]\n        var y = 0\n        for j in 0..<xs.count {\n\
    \            y = y * xs[j] + xs[i + j]\n        }\n        ys.append(y)\n    }\n\
    \    return ys\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b13fd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b13cd0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0b13cd0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0b13cd013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0b13ccfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0b13acfe83 <unavailable> + 188035

    6    tmpoqkpz_ir                        0x000056247e3ddff3 <unavailable> + 8179

    7    tmpoqkpz_ir                        0x000056247e3dd674 <unavailable> + 5748

    8    libc.so.6                          0x00002b0b141c5460 __libc_start_main +
    245

    9    tmpoqkpz_ir                        0x000056247e3dd349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let length = xs.count\n    var result: [Int] = Array(repeating: 0, count:\
    \ length)\n    var n = 1\n    for i in 0 ..< length {\n        result[i] = xs[i]\n\
    \        n *= xs[i]\n    }\n    for i = length - 1 ..< 0 {\n        result[i]\
    \ = result[i] / n\n        n *= result[i]\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp_4n1zsun.swift:17:11: error: expected 'in' after for-each pattern\n\
    \    for i = length - 1 ..< 0 {\n          ^\n/tmp/tmp_4n1zsun.swift:17:11: error:\
    \ expected Sequence expression for for-each loop\n    for i = length - 1 ..< 0\
    \ {\n          ^\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let count = xs.count\n    var sums = [Int](repeating: 0, count: count)\n\
    \    for i in 0 ..< count {\n        let x = xs[i]\n        sums[i] = sums[i-1]\
    \ * x + xs[i+1]\n    }\n    return sums\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0724788c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b072447f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b072447f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b072447f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b072447ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b072427ee83 <unavailable> + 188035

    6    tmpnbhfszc2                        0x0000558e60cdad9e <unavailable> + 7582

    7    tmpnbhfszc2                        0x0000558e60cda5f4 <unavailable> + 5620

    8    libc.so.6                          0x00002b0724974460 __libc_start_main +
    245

    9    tmpnbhfszc2                        0x0000558e60cda2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let n = xs.count\n    let m = 1\n    for x in xs {\n        m *= x\n    }\n\
    \    var result: [Int] = []\n    for x in xs {\n        var y = m\n        for\
    \ _ in 0..<(n - 1) {\n            y *= x\n        }\n        result.append(y)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpt5kcc_ls.swift:13:11: error: left side of mutating operator isn't\
    \ mutable: 'm' is a 'let' constant\n        m *= x\n        ~ ^\n/tmp/tmpt5kcc_ls.swift:11:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let m = 1\n    ^~~\n   \
    \ var\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var sum = 0\n    for x in xs {\n        sum += x\n    }\n    return Array(stride(from:\
    \ 0, through: sum, by: 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpux6kyiqp/tmpux6kyiqp.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d07135c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d06e2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d06e2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d06e2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpux6kyiqp                        0x0000559c74fa470c <unavailable> + 5900

    5    libc.so.6                          0x00002b3d07321460 __libc_start_main +
    245

    6    tmpux6kyiqp                        0x0000559c74fa42f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  return map(xs) { $0 * pow($1, 2) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpgaqajlqe.swift:10:10: error: cannot find 'map' in scope\n  return\
    \ map(xs) { $0 * pow($1, 2) }\n         ^~~\n/tmp/tmpgaqajlqe.swift:10:25: error:\
    \ cannot find 'pow' in scope\n  return map(xs) { $0 * pow($1, 2) }\n         \
    \               ^~~\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var power = 0\n    var pow2 = 0\n    for i in 0..<xs.count\
    \ {\n        power = i * xs[i]\n        result.append(power)\n        pow2 = power\
    \ * power\n        result.append(pow2)\n    }\n    result.reverse()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpwk18_9iu/tmpwk18_9iu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f59b21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f59818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f59818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f598177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwk18_9iu                        0x000055d6cf44179c <unavailable> + 6044

    5    libc.so.6                          0x00002b5f59d0d460 __libc_start_main +
    245

    6    tmpwk18_9iu                        0x000055d6cf441389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let degree = Int64(1.0)\n    var result = [0]\n    for i in 1..<xs.count\
    \ {\n        let factor = (xs[i] - result[i-1]) / degree\n        result.append(factor\
    \ * degree)\n        degree *= xs[i]\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpew1iuywt.swift:13:44: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Int64'\n        let factor = (xs[i] - result[i-1])\
    \ / degree\n                     ~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~\n/tmp/tmpew1iuywt.swift:13:44:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Int, Int), (Int64, Int64)\n        let factor = (xs[i] - result[i-1]) / degree\n\
    \                                           ^\n/tmp/tmpew1iuywt.swift:14:16: error:\
    \ no exact matches in call to instance method 'append'\n        result.append(factor\
    \ * degree)\n               ^\n/tmp/tmpew1iuywt.swift:14:16: note: found candidate\
    \ with type '(__owned _) -> ()'\n        result.append(factor * degree)\n    \
    \           ^\n/tmp/tmpew1iuywt.swift:15:16: error: binary operator '*=' cannot\
    \ be applied to operands of type 'Int64' and 'Int'\n        degree *= xs[i]\n\
    \        ~~~~~~ ^  ~~~~~\n/tmp/tmpew1iuywt.swift:15:16: note: overloads for '*='\
    \ exist with these partially matching parameter lists: (inout Int, Int)\n    \
    \    degree *= xs[i]\n               ^\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var product = 0\n    for i in 0..<(xs.count - 1) {\n        product += Int(xs[i])\
    \ * xs[i]\n    }\n    return [product]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpwor2nr7s/tmpwor2nr7s.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dc4b3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dc4833b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dc4833988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dc48327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwor2nr7s                        0x000055b5ac67474c <unavailable> + 5964

    5    libc.so.6                          0x00002b1dc4d28460 __libc_start_main +
    245

    6    tmpwor2nr7s                        0x000055b5ac674339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    // TODO:\n    // We need to implement the derivative function for the polynomial\
    \ here.\n    // It should be fairly easy and straightforward once we understand\
    \ the algorithm.\n    // So far we just assume that input coefficients are non-negative.\n\
    \    // The algorithm should be able to handle non-linearly spaced input (e.g.\
    \ xs = [0, 2, 5, 10, 20]).\n    // For that we need to find a function that will\
    \ convert a non-negative number to an int.\n    // This function is called a root\
    \ finding function in our course.\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: '/tmp/tmpon26alov.swift:17:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var dys = [Int](repeating: 0, count: xs.count)\n    dys[0] = 1\n    for i\
    \ in 1..<xs.count {\n        dys[i] = dys[i - 1] * xs[i - 1]\n    }\n    return\
    \ dys\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3, 1, 2,\
    \ 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs:\
    \ [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmps3oyvfgw/tmps3oyvfgw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a5df67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a5dc5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a5dc5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a5dc5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3oyvfgw                        0x000055a5a033c6dc <unavailable> + 5852

    5    libc.so.6                          0x00002b2a5e153460 __libc_start_main +
    245

    6    tmps3oyvfgw                        0x000055a5a033c2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    // TODO: Write code here\n    return Array(0..<xs.count).map {\n        0\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3, 1, 2,\
    \ 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs:\
    \ [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpnmyoug79.swift:11:36: error: contextual type for closure argument\
    \ list expects 1 argument, which cannot be implicitly ignored\n    return Array(0..<xs.count).map\
    \ {\n                                   ^\n                                  \
    \  _ in \n"
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var res = Array<Int>()\n    for i in xs {\n        res.append(Int(i))\n \
    \   }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpvnjortrk/tmpvnjortrk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d0c131c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d0be28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d0be28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d0be277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvnjortrk                        0x0000560bc1c9473c <unavailable> + 5948

    5    libc.so.6                          0x00002b5d0c31d460 __libc_start_main +
    245

    6    tmpvnjortrk                        0x0000560bc1c94329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var res = [0]\n    for x in xs {\n        res[0] += x\n        res[0] *=\
    \ x\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpfhmtk8vz/tmpfhmtk8vz.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9eeccd3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9eec9cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9eec9ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9eec9c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfhmtk8vz                        0x00005565c77fd59c <unavailable> + 5532

    5    libc.so.6                          0x00002b9eecebf460 __libc_start_main +
    245

    6    tmpfhmtk8vz                        0x00005565c77fd189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    if xs.isEmpty() {\n        return [0]\n    }\n    var x = 0\n    var result\
    \ = [Int](xs.count)\n    for x in xs {\n        result[result.index(x)] = x +\
    \ 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp6kw23ff_.swift:10:11: error: cannot call value of non-function\
    \ type 'Bool'\n    if xs.isEmpty() {\n          ^      ~~\n                 \n\
    /tmp/tmp6kw23ff_.swift:14:24: error: missing argument label 'arrayLiteral:' in\
    \ call\n    var result = [Int](xs.count)\n                       ^\n         \
    \              arrayLiteral: \n"
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    if xs.count < 2 {\n        return []\n    }\n    var result = [Int]()\n \
    \   let n = (xs.count - 1) / 2\n    for i in 0..<n {\n        let x = xs[i + n]\n\
    \        result.append(x * x * xs[i])\n    }\n    result.append(xs[n])\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpc28uf1y1/tmpc28uf1y1.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baa42fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baa126b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baa126988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baa1257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc28uf1y1                        0x00005567ebc596cc <unavailable> + 5836

    5    libc.so.6                          0x00002b8baa61b460 __libc_start_main +
    245

    6    tmpc28uf1y1                        0x00005567ebc592b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    assert(xs.count >= 2)\n    var result = [Int](xs.count)\n    for i in 0 ..<\
    \ xs.count {\n        result[i] = xs[i + 1] - xs[i]\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpi01buqv7.swift:11:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var result = [Int](xs.count)\n                       ^\n      \
    \                 arrayLiteral: \n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return Array(0..<xs.count).map { i, x in\n        return xs[i] * xs.count\n\
    \    }.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp_lkoqe84.swift:10:38: error: contextual closure type '(Int) throws\
    \ -> Int' expects 1 argument, but 2 were used in closure body\n    return Array(0..<xs.count).map\
    \ { i, x in\n                                     ^\n"
  stdout: ''
  timestamp: 1659979735
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var y = xs[0]\n    for i in 1..<xs.count {\n        y = y * xs[i]\n    }\n\
    \    return Array(y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7d6zvtr4.swift:14:18: error: missing argument label 'arrayLiteral:'\
    \ in call\n    return Array(y)\n                 ^\n                 arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var deriv = [Int]()\n    var i = 0\n    while i < xs.count {\n        deriv.append(xs[i]\
    \ * (xs[i + 1] - xs[i]))\n        i += 2\n    }\n    return deriv\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3f50f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3f4ded561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab3f4ded286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab3f4ded13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab3f4decbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab3f4bece83 <unavailable> + 188035

    6    tmp8agsyjoy                        0x0000557acd9dfad7 <unavailable> + 6871

    7    tmp8agsyjoy                        0x0000557acd9df454 <unavailable> + 5204

    8    libc.so.6                          0x00002ab3f52e2460 __libc_start_main +
    245

    9    tmp8agsyjoy                        0x0000557acd9df129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    if xs.isEmpty { return [] }\n    var product = xs[0]\n    for i in 1 ..<\
    \ xs.count {\n        product *= xs[i]\n    }\n    return [xs[0] - product, xs[1]\
    \ - product*xs[0] - product*xs[1]]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmppwof7ls5/tmppwof7ls5.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acda1380c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acda1077b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acda1077988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acda10767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppwof7ls5                        0x0000555b57ae06ac <unavailable> + 5804

    5    libc.so.6                          0x00002acda156c460 __libc_start_main +
    245

    6    tmppwof7ls5                        0x0000555b57ae0299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let length = xs.count\n    var result = [Int]()\n    for i in 0..<length\
    \ {\n        result.append(xs[i])\n    }\n    result.append(0)\n    \n    for\
    \ i in 1..<length {\n        var product = 0\n        for j in 0..<i {\n     \
    \       product += xs[j] * result[i - 1]\n        }\n        result[i] = product\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpeziupc9g/tmpeziupc9g.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea4795bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea47652b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea47652988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea476517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeziupc9g                        0x000055d401f4171c <unavailable> + 5916

    5    libc.so.6                          0x00002aea47b47460 __libc_start_main +
    245

    6    tmpeziupc9g                        0x000055d401f41309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var res = [0]\n    for i in 0 ..< xs.count {\n        res[i] = xs[i + 1]\
    \ - xs[i]\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adba58adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adba55a4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adba55a4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adba55a413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adba55a3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adba53a37ec <unavailable> + 186348

    6    tmp90alk_w2                        0x000055d7b6c16d5e <unavailable> + 7518

    7    tmp90alk_w2                        0x000055d7b6c16584 <unavailable> + 5508

    8    libc.so.6                          0x00002adba5a99460 __libc_start_main +
    245

    9    tmp90alk_w2                        0x000055d7b6c16259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return derivative(xs, 1, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpt3dzvcun.swift:10:22: error: extra arguments at positions #2, #3\
    \ in call\n    return derivative(xs, 1, 0)\n                     ^\n/tmp/tmpt3dzvcun.swift:9:6:\
    \ note: 'derivative(xs:)' declared here\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \     ^\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let x0 = Int(xs[0])\n    let x1 = Int(xs[1])\n    var result = Array(xs.count).zero()\n\
    \    for var i = 2; i < xs.count; i++ {\n        result[i] = result[i-2] + xs[i-1]\
    \ * xs[i] - x0 * xs[i-1]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9zcfzbga.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < xs.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp9zcfzbga.swift:12:24: error: missing argument label 'arrayLiteral:' in\
    \ call\n    var result = Array(xs.count).zero()\n                       ^\n  \
    \                     arrayLiteral: \n/tmp/tmp9zcfzbga.swift:12:34: error: value\
    \ of type '[Int]' has no member 'zero'\n    var result = Array(xs.count).zero()\n\
    \                 ~~~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  var acc = [Int](xs.count)\n  var acc2 = acc\n\n  for idx in 0..<xs.count -\
    \ 1 {\n    acc2[idx] *= xs[idx+1]\n  }\n\n  for idx in 0..<xs.count - 1 {\n  \
    \  acc2[idx] /= xs[idx]\n  }\n  return acc2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpny9vfkl9.swift:10:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n  var acc = [Int](xs.count)\n                  ^\n                \
    \  arrayLiteral: \n"
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    guard xs.count >= 1 else { return [] }\n    var result = [1]\n    for i in\
    \ 0..<xs.count {\n        result[i] = result[i-1] * xs[i]\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7dde2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7dad9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acb7dad9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acb7dad913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acb7dad8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acb7d8d8e83 <unavailable> + 188035

    6    tmp3ql6ako0                        0x0000563f4273ed12 <unavailable> + 7442

    7    tmp3ql6ako0                        0x0000563f4273e584 <unavailable> + 5508

    8    libc.so.6                          0x00002acb7dfce460 __libc_start_main +
    245

    9    tmp3ql6ako0                        0x0000563f4273e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return _vjpDeriv(xs)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp2dy8cuy8.swift:10:12: error: cannot find '_vjpDeriv' in scope\n\
    \    return _vjpDeriv(xs)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [Int](repeating: 0, count: xs.count + 1)\n    var idx = 0\n\
    \    for x in xs {\n        result[idx] = x\n        idx += 1\n    }\n    result[idx]\
    \ = 1\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmptflm8qox/tmptflm8qox.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b231a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b22e9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b22e9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b22e9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptflm8qox                        0x000055625912465c <unavailable> + 5724

    5    libc.so.6                          0x00002b0b23391460 __libc_start_main +
    245

    6    tmptflm8qox                        0x0000556259124249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    if xs.count == 0 {\n        return []\n    }\n\n    // Sum all partial derivatives.\n\
    \    var sum: Int = 0\n    for i in 0..<xs.count - 1 {\n        sum += xs[i] *\
    \ derivative(xs[i + 1])\n    }\n\n    // Return this partial derivative in place\
    \ of last partial derivative.\n    xs[xs.count - 1] = sum\n    return xs\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpbb1m8qgx.swift:17:24: error: cannot convert value of type '[Int]'\
    \ to expected argument type 'Int'\n        sum += xs[i] * derivative(xs[i + 1])\n\
    \                       ^\n/tmp/tmpbb1m8qgx.swift:17:35: error: missing argument\
    \ label 'xs:' in call\n        sum += xs[i] * derivative(xs[i + 1])\n        \
    \                          ^\n                                  xs: \n/tmp/tmpbb1m8qgx.swift:17:37:\
    \ error: cannot convert value of type 'Int' to expected argument type '[Int]'\n\
    \        sum += xs[i] * derivative(xs[i + 1])\n                              \
    \      ^\n/tmp/tmpbb1m8qgx.swift:21:7: error: cannot assign through subscript:\
    \ 'xs' is a 'let' constant\n    xs[xs.count - 1] = sum\n    ~~^\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [Int](repeating: 0, count: xs.count)\n    var x = 1\n    for\
    \ _ in 0..<xs.count {\n        result[x] += xs[x]\n        x += 1\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af41a491c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af41a188561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af41a188286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af41a18813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af41a187bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af419f87e83 <unavailable> + 188035

    6    tmplbav_u3o                        0x000055a0a178dd34 <unavailable> + 7476

    7    tmplbav_u3o                        0x000055a0a178d5f4 <unavailable> + 5620

    8    libc.so.6                          0x00002af41a67d460 __libc_start_main +
    245

    9    tmplbav_u3o                        0x000055a0a178d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  precondition(xs.count >= 1)\n  var result = Array<Int>()\n  for i in 0 ..<\
    \ xs.count - 1 {\n    let a = (xs[i] * xs[i] + xs[i + 1] * xs[i + 1] - xs[i +\
    \ 2] * xs[i + 2])\n    let b = (xs[i] * xs[i] + xs[i + 1] * xs[i + 1])\n    result.append(b\
    \ / a)\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1832a33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b183272a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b183272a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b183272a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1832729bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1832529e83 <unavailable> + 188035

    6    tmpvp7kixtd                        0x0000560505735f1f <unavailable> + 7967

    7    tmpvp7kixtd                        0x00005605057355e4 <unavailable> + 5604

    8    libc.so.6                          0x00002b1832c1f460 __libc_start_main +
    245

    9    tmpvp7kixtd                        0x00005605057352b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for i in 0..<xs.count {\n        result.append(Int(xs[i]\
    \ * xs[i + 1]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac646e2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac646b25561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac646b25286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac646b2513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac646b24bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac646924e83 <unavailable> + 188035

    6    tmp53t47slo                        0x000055905525fe91 <unavailable> + 7825

    7    tmp53t47slo                        0x000055905525f714 <unavailable> + 5908

    8    libc.so.6                          0x00002ac64701a460 __libc_start_main +
    245

    9    tmp53t47slo                        0x000055905525f3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    var result = [0]\n    for\
    \ x in xs {\n        result.append(1)\n        for _ in 1..<x {\n            result.append(0)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpg75qzsnn/tmpg75qzsnn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8da7894c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8da758bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8da758b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8da758a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg75qzsnn                        0x00005617aaf3872c <unavailable> + 5932

    5    libc.so.6                          0x00002b8da7a80460 __libc_start_main +
    245

    6    tmpg75qzsnn                        0x00005617aaf38319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var derivative: [Int] = []\n    for x in xs {\n        let n = xs.count -\
    \ 1\n        var derivativeX = 0\n        for _ in 0..<n {\n            derivativeX\
    \ += xs.last!\n            xs.removeLast()\n        }\n        derivative.append(derivativeX)\n\
    \    }\n    return derivative\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp08c3b8gb.swift:16:16: error: cannot use mutating member on immutable\
    \ value: 'xs' is a 'let' constant\n            xs.removeLast()\n            ~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var results = [Int]()\n    let xCount = xs.count\n    for i in 0..<xCount\
    \ {\n        results.append(Int(powDouble(xs[i], xCount - 1 - i)))\n    }\n  \
    \  return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpn2hhd_8d.swift:13:28: error: cannot find 'powDouble' in scope\n\
    \        results.append(Int(powDouble(xs[i], xCount - 1 - i)))\n             \
    \              ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let count = xs.count\n    var product = 1\n    var result: [Int] = []\n\n\
    \    for x in xs {\n        product *= x\n    }\n\n    for x in xs {\n       \
    \ result.append(x * product)\n        product /= x\n    }\n\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpvb1sgsgt/tmpvb1sgsgt.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba23ca08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba23c6ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba23c6ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba23c6fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvb1sgsgt                        0x000055958ee0c68c <unavailable> + 5772

    5    libc.so.6                          0x00002ba23cbf4460 __libc_start_main +
    245

    6    tmpvb1sgsgt                        0x000055958ee0c279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var k = xs.count - 1\n    for _ in 0 ..< xs.count\
    \ {\n        let coeff = xs[k]\n        if k == 0 {\n            result.append(coeff)\n\
    \        } else {\n            result.append(coeff * result[Int(k)])\n       \
    \ }\n        k--\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpy2i8gj7m.swift:19:10: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n        k--\n         ^~\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    if xs.count == 1 {\n        return [xs[0]]\n    }\n    if xs.count == 2 {\n\
    \        var dx = xs[1]\n        for i in 1..(xs.count - 1) {\n            dx\
    \ = dy * xs[i] + dx\n        }\n        return [dx]\n    }\n    \n    var dxs\
    \ = [Int]()\n    for i in 1..(xs.count - 1) {\n        var dx = 1\n        for\
    \ j in 0..<(xs.count - i - 1) {\n            dx = dx * xs[j] + dx\n        }\n\
    \        dxs.append(dx)\n    }\n    return dxs\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpg67wu6fi.swift:15:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for i in 1..(xs.count - 1) {\n                \
    \  ^~\n                  ...\n/tmp/tmpg67wu6fi.swift:22:15: error: cannot find\
    \ operator '..' in scope; did you mean '...'?\n    for i in 1..(xs.count - 1)\
    \ {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  var result = [Int]()\n  for y in xs {\n    let x = Float(y)\n    let value\
    \ = (1.0 / (x ** 2))\n    result.append(x * value)\n  }\n  return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpkztudaxp.swift:13:27: error: cannot find operator '**' in scope\n\
    \    let value = (1.0 / (x ** 2))\n                          ^~\n/tmp/tmpkztudaxp.swift:14:12:\
    \ error: no exact matches in call to instance method 'append'\n    result.append(x\
    \ * value)\n           ^\n/tmp/tmpkztudaxp.swift:14:12: note: found candidate\
    \ with type '(__owned _) -> ()'\n    result.append(x * value)\n           ^\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var dy: [Int] = []\n    for i in xs {\n        dy.append(1)\n        for\
    \ j in xs.indices {\n            if i == j {\n                continue\n     \
    \       }\n            dy[i] += dy[j] * xs[j]\n        }\n    }\n    return dy\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b542210fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5421e06561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5421e06286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5421e0613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5421e05bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5421c057ec <unavailable> + 186348

    6    tmpiylotb0u                        0x0000563c6d0c1f59 <unavailable> + 8025

    7    tmpiylotb0u                        0x0000563c6d0c16e4 <unavailable> + 5860

    8    libc.so.6                          0x00002b54222fb460 __libc_start_main +
    245

    9    tmpiylotb0u                        0x0000563c6d0c13b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  var res: [Int] = []\n  for idx in 0..<xs.count {\n    res.append(xs[idx])\n\
    \  }\n  var dres = res\n  for i in 0..<res.count - 1 {\n    dres[i] = dres[i]\
    \ * (xs[i + 1] - xs[i])\n  }\n  return dres\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmper_9n2k7/tmper_9n2k7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b153f9f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b153f6ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b153f6ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b153f6eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmper_9n2k7                        0x00005645a33946cc <unavailable> + 5836

    5    libc.so.6                          0x00002b153fbe1460 __libc_start_main +
    245

    6    tmper_9n2k7                        0x00005645a33942b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    \n    // check sanity of inputs\n    assert(xs.count == 1)\n    \n    var\
    \ sum: Int = 0\n    for var i = 0; i < xs.count; i++ {\n        \n        if i\
    \ == 0 {\n            sum += xs[i]\n        } else {\n            sum -= xs[i]\
    \ * pow(xs.last - xs.first, i)\n        }\n    }\n    \n    return Array(sum)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpd5euo5nz.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < xs.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpd5euo5nz.swift:24:18: error: missing argument label 'arrayLiteral:' in\
    \ call\n    return Array(sum)\n                 ^\n                 arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var dx: [Int] = []\n    for i in xs {\n        dx.append(Int((i + 1) * Double(i)))\n\
    \    }\n    return dx\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpzdxkbb41.swift:12:31: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        dx.append(Int((i + 1) * Double(i)))\n\
    \                      ~~~~~~~ ^ ~~~~~~~~~\n/tmp/tmpzdxkbb41.swift:12:31: note:\
    \ overloads for '*' exist with these partially matching parameter lists: (Double,\
    \ Double), (Int, Int)\n        dx.append(Int((i + 1) * Double(i)))\n         \
    \                     ^\n"
  stdout: ''
  timestamp: 1659979718
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for x in xs {\n        let p = x\n        var p\
    \ = p\n        for i in 0...(n - 1) {\n            p = p * x + xs[i]\n       \
    \     result.append(p)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpujnsphvp.swift:13:13: error: invalid redeclaration of 'p'\n   \
    \     var p = p\n            ^\n/tmp/tmpujnsphvp.swift:12:13: note: 'p' previously\
    \ declared here\n        let p = x\n            ^\n/tmp/tmpujnsphvp.swift:14:23:\
    \ error: cannot find 'n' in scope\n        for i in 0...(n - 1) {\n          \
    \            ^\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return derivative(xs: xs, degree: 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpnjw0wv94.swift:10:39: error: extra argument 'degree' in call\n\
    \    return derivative(xs: xs, degree: 1)\n                     ~~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var res = [0]\n    for x in xs {\n        res.append(res[x] + 1)\n    }\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b211a969c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b211a660561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b211a660286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b211a66013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b211a65fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b211a45fe83 <unavailable> + 188035

    6    tmpt01peqdg                        0x0000565378ea5bfa <unavailable> + 7162

    7    tmpt01peqdg                        0x0000565378ea5514 <unavailable> + 5396

    8    libc.so.6                          0x00002b211ab55460 __libc_start_main +
    245

    9    tmpt01peqdg                        0x0000565378ea51e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let length = xs.count\n    if length == 0 {\n        return [0]\n    }\n\
    \    var result: [Int] = [Int](count: length, repeatedValue: 0)\n    for i in\
    \ 0..<length-1 {\n        result[i] = xs[i+1] - xs[i]\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpr2_uedpx.swift:14:61: error: extra argument 'repeatedValue' in\
    \ call\n    var result: [Int] = [Int](count: length, repeatedValue: 0)\n     \
    \                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmpr2_uedpx.swift:14:31:\
    \ error: missing argument for parameter 'repeating' in call\n    var result: [Int]\
    \ = [Int](count: length, repeatedValue: 0)\n                              ^\n\
    \                              repeating: <#Int#>, \nSwift.Array:4:23: note: 'init(repeating:count:)'\
    \ declared here\n    @inlinable public init(repeating repeatedValue: Element,\
    \ count: Int)\n                      ^\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  if xs.isEmpty { return [] }\n  return stride(from: 1, through: xs.count, repeating:\
    \ 1).map { x in\n    return (xs * x).sum()\n  }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpirjo81h1.swift:12:16: error: binary operator '*' cannot be applied\
    \ to operands of type '[Int]' and 'Int'\n    return (xs * x).sum()\n         \
    \   ~~ ^ ~\n/tmp/tmpirjo81h1.swift:12:16: note: overloads for '*' exist with these\
    \ partially matching parameter lists: (Int, Int)\n    return (xs * x).sum()\n\
    \               ^\n/tmp/tmpirjo81h1.swift:11:16: error: incorrect argument label\
    \ in call (have 'from:through:repeating:', expected 'from:through:by:')\n  return\
    \ stride(from: 1, through: xs.count, repeating: 1).map { x in\n              \
    \ ^                            ~~~~~~~~~\n                                   \
    \         by\n/tmp/tmpirjo81h1.swift:12:21: error: reference to member 'sum' cannot\
    \ be resolved without a contextual type\n    return (xs * x).sum()\n         \
    \           ^\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return Array(0..<xs.count).map { i in\n        pow(xs[i] - xs[i - 1], 2)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3, 1, 2,\
    \ 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs:\
    \ [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfxkye83b.swift:11:9: error: cannot find 'pow' in scope\n      \
    \  pow(xs[i] - xs[i - 1], 2)\n        ^~~\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var n = [Int](xs.count) // coefficient count is n\n    var h = [Int](repeating:\
    \ 0, count: n + 1) // storage for derivative\n    h[n] = -1\n    for x in xs {\n\
    \        h[n] += x\n        n--\n        if n == 0 {\n            h[n] = h[n+1]\n\
    \            n = n - 1\n        }\n    }\n    var y = [Int](repeating: 0, count:\
    \ n + 1) // storage for derivative (last term is 1)\n    for x in xs {\n     \
    \   y[n] = h[n]\n        n--\n        if n == 0 {\n            y[n] = 1\n    \
    \        n = n - 1\n        }\n    }\n    var d = [Int](repeating: 0, count: n\
    \ + 1) // storage for derivative\n    for x in xs {\n        d[n] = y[n]\n   \
    \     n--\n        if n == 0 {\n            d[n] = 1\n            n = n - 1\n\
    \        }\n    }\n    while n >= 0 {\n        if n == 0 {\n            return\
    \ d\n        }\n        let p = d[n]\n        let q = d[n-1] * x\n        let\
    \ r = d[n-1] - q\n        d[n] = p + q + r\n        n--\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7iyp1wyu.swift:10:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var n = [Int](xs.count) // coefficient count is n\n           \
    \       ^\n                  arrayLiteral: \n/tmp/tmp7iyp1wyu.swift:15:10: error:\
    \ cannot find operator '--' in scope; did you mean '-= 1'?\n        n--\n    \
    \     ^~\n/tmp/tmp7iyp1wyu.swift:24:10: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n        n--\n         ^~\n/tmp/tmp7iyp1wyu.swift:33:10:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n        n--\n\
    \         ^~\n/tmp/tmp7iyp1wyu.swift:44:26: error: cannot find 'x' in scope\n\
    \        let q = d[n-1] * x\n                         ^\n/tmp/tmp7iyp1wyu.swift:47:10:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n        n--\n\
    \         ^~\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return derivative(xs, x: 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7m4wx1ud.swift:10:30: error: extra argument 'x' in call\n    return\
    \ derivative(xs, x: 0)\n                     ~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    if xs.count == 0 {\n        return []\n    }\n    let x = xs[0]\n    let\
    \ xs = xs.dropFirst()\n    var ys = [Int](xs.count)\n    for i in xs.indices {\n\
    \        ys[i] = (x - xs[i]) / xs[i]\n    }\n    return ys\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpc822slgj.swift:15:20: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var ys = [Int](xs.count)\n                   ^\n              \
    \     arrayLiteral: \n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \tlet n = xs.count\n\tif n == 0 {\n\t\treturn [nil]\n\t}\n\tlet n = xs.count\n\
    \tlet result = Array<Int>(repeating: 0, count: n)\n\tfor d in 0 ..< n {\n\t\t\
    result[d] = xs[d] + x[d] * xs[d] + x[d] * xs[d] * xs[d]\n\t}\n\treturn result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp4hc6yrz9.swift:12:11: error: 'nil' is not compatible with expected\
    \ element type 'Int'\n                return [nil]\n                        ^\n\
    /tmp/tmp4hc6yrz9.swift:14:6: error: invalid redeclaration of 'n'\n        let\
    \ n = xs.count\n            ^\n/tmp/tmp4hc6yrz9.swift:10:6: note: 'n' previously\
    \ declared here\n        let n = xs.count\n            ^\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \tlet n = xs.count\n\tvar result = [Int](repeating: 0, count: n)\n\t\n\tfor index\
    \ in stride(from: 0, to: n, by: 1) {\n\t\tresult[index] = xs[index]\n\t}\n\t\n\
    \treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp_1ah66ag/tmp_1ah66ag.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adddd6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adddd3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adddd3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adddd3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_1ah66ag                        0x0000555a83da975c <unavailable> + 5980

    5    libc.so.6                          0x00002adddd8d5460 __libc_start_main +
    245

    6    tmp_1ah66ag                        0x0000555a83da9349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979713
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    func f(x: Int) -> Int {\n        if x == 0 {\n            return 0\n    \
    \    }\n        var y = 1\n        for i in 0..<xs {\n            y *= x\n   \
    \     }\n        return y\n    }\n\n    var result = [1]\n    for i in 1..<xs\
    \ {\n        let value = f(xs[i])\n        result.append(value)\n        for i\
    \ in 0..<i {\n            result[i] += result[i-1]\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpnylr2pgg.swift:15:22: error: cannot convert value of type '[Int]'\
    \ to expected argument type 'Int'\n        for i in 0..<xs {\n               \
    \      ^\n/tmp/tmpnylr2pgg.swift:22:18: error: cannot convert value of type '[Int]'\
    \ to expected argument type 'Int'\n    for i in 1..<xs {\n                 ^\n\
    /tmp/tmpnylr2pgg.swift:23:23: error: missing argument label 'x:' in call\n   \
    \     let value = f(xs[i])\n                      ^\n                      x:\
    \ \n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    switch xs.count {\n    case 0:\n        return [Int](count: xs.count, repeatedValue:\
    \ 0)\n    case 1:\n        return xs\n    case 2:\n        if let x = Double(xs[0]),\
    \ let y = Double(xs[1]) {\n            var result = [Int](count: xs.count, repeatedValue:\
    \ 0)\n            result[0] = Int(y)\n            result[1] = Int(x - y)\n   \
    \         return result\n        }\n    default:\n        fatalError(\"Should\
    \ not be reached\")\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpv71rqlo7.swift:12:16: error: no exact matches in call to initializer\
    \ \n        return [Int](count: xs.count, repeatedValue: 0)\n               ^\n\
    /tmp/tmpv71rqlo7.swift:12:16: note: candidate has partially matching parameter\
    \ list (repeating: Int, count: Int)\n        return [Int](count: xs.count, repeatedValue:\
    \ 0)\n               ^\n/tmp/tmpv71rqlo7.swift:12:16: note: candidate has partially\
    \ matching parameter list (repeating: Int, count: Int)\n        return [Int](count:\
    \ xs.count, repeatedValue: 0)\n               ^\n/tmp/tmpv71rqlo7.swift:17:26:\
    \ error: no exact matches in call to initializer \n            var result = [Int](count:\
    \ xs.count, repeatedValue: 0)\n                         ^\n/tmp/tmpv71rqlo7.swift:17:26:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n            var result = [Int](count: xs.count, repeatedValue: 0)\n  \
    \                       ^\n/tmp/tmpv71rqlo7.swift:17:26: note: candidate has partially\
    \ matching parameter list (repeating: Int, count: Int)\n            var result\
    \ = [Int](count: xs.count, repeatedValue: 0)\n                         ^\n/tmp/tmpv71rqlo7.swift:16:12:\
    \ error: initializer for conditional binding must have Optional type, not 'Double'\n\
    \        if let x = Double(xs[0]), let y = Double(xs[1]) {\n           ^     \
    \  ~~~~~~~~~~~~~\n/tmp/tmpv71rqlo7.swift:16:35: error: initializer for conditional\
    \ binding must have Optional type, not 'Double'\n        if let x = Double(xs[0]),\
    \ let y = Double(xs[1]) {\n                                  ^       ~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    let n = _derivative(xs)\n    return Array(0..<n).map { Int($0) }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpdqch9su9.swift:10:13: error: cannot find '_derivative' in scope\n\
    \    let n = _derivative(xs)\n            ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    func diff(coef: Int, xx: Int) -> Int {\n        return xs[xx + coef] - xs[xx]\n\
    \    }\n    var result = [Int](xs.count)\n    for coef in 0..<xs.count {\n   \
    \     result[coef] = diff(coef, 0)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp_8lqfa28.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var result = [Int](xs.count)\n                       ^\n      \
    \                 arrayLiteral: \n/tmp/tmp_8lqfa28.swift:15:28: error: missing\
    \ argument labels 'coef:xx:' in call\n        result[coef] = diff(coef, 0)\n \
    \                          ^\n                            coef: xx: \n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    if xs.isEmpty {\n        return [0]\n    }\n    let result = [Int](xs.count\
    \ + 1)\n    guard xs.count >= 3 else { return result }\n    result[0] = 1\n  \
    \  for i in 1..<xs.count {\n        result[i] = result[xs.count - i - 1]\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp2mdpftn_.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    let result = [Int](xs.count + 1)\n                       ^\n  \
    \                     arrayLiteral: \n"
  stdout: ''
  timestamp: 1659979713
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var acc: [Int] = []\n    for i in xs.indices {\n        acc.append(acc[i-1]\
    \ * xs[i] - acc[i])\n    }\n    return acc\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b29935f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29932ed561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b29932ed286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b29932ed13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b29932ecbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b29930ece83 <unavailable> + 188035

    6    tmpqmy5ce3s                        0x0000560d76158c20 <unavailable> + 7200

    7    tmpqmy5ce3s                        0x0000560d76158524 <unavailable> + 5412

    8    libc.so.6                          0x00002b29937e2460 __libc_start_main +
    245

    9    tmpqmy5ce3s                        0x0000560d761581f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979713
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  var results = [Int]()\n  var xPow = 0\n  var yPow = 0\n  var product = 1\n\
    \  var xSquare = 0\n  var xSquareSum = 0\n  for xPow < xs.count {\n    xSquare\
    \ = xs[xPow] * xs[xPow]\n    xSquareSum += xSquare\n    if xSquareSum > 0 {\n\
    \      product = xs[xPow] / xSquareSum\n      results[xPow] += product\n     \
    \ xSquareSum -= product\n    }\n    xPow += 1\n  }\n  return results\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpkenin1gm.swift:16:12: error: expected 'in' after for-each pattern\n\
    \  for xPow < xs.count {\n           ^\n/tmp/tmpkenin1gm.swift:16:12: error: unary\
    \ operator cannot be separated from its operand\n  for xPow < xs.count {\n   \
    \        ^~\n            \n/tmp/tmpkenin1gm.swift:16:12: error: '<' is not a prefix\
    \ unary operator\n  for xPow < xs.count {\n           ^\n"
  stdout: ''
  timestamp: 1659979713
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var ys = [Int]()\n    for i in 0..<xs.count {\n        let x = xs[i]\n  \
    \      let x2 = x * x\n        ys.append(x * x + x2)\n    }\n    return ys\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpj0dbhywr/tmpj0dbhywr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbfa218c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbf9f0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbf9f0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbf9f0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0dbhywr                        0x00005586350d86cc <unavailable> + 5836

    5    libc.so.6                          0x00002abbfa404460 __libc_start_main +
    245

    6    tmpj0dbhywr                        0x00005586350d82b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979713
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    \n    return map({x in map({z in map({x in map({y in map({x in map({a in\
    \ map({b in map({c in map({d in map({x in map({y in map({z in map({x in map({y\
    \ in map({z in map({x in map({y in map({a in map({b in map({c in map({d in map({x\
    \ in map({y in map({z in map({x in map({y in map({z in map({x in map({y in map({a\
    \ in map({b in map({c in map({d in map({x in map({y in map({z in map({x in map({y\
    \ in map({z in map({x in map({y in map({a in map({b in map({c in map({d in map({x\
    \ in map({y in map({z in map({x in map({y in map({z in map({a in map({b in map({c\
    \ in map({d in map({x in map({y in map({z in map({x in map({y in map({z in map({a\
    \ in map({b in map({c in map({d in map({x in map({y in map({z in map({x in map({y\
    \ in map({z in map({a in map({b in map({c in map({d in map({x in map({y in map({z\
    \ in map({x in map({y in map({z in map({a in map({b in map({c in map({d in map({x\
    \ in map({y in map({z in map({x in map({y in map({z in map({a in map({b in map({c\
    \ in map({d in map({x in map({y in map({z in map({x in map({y in map({z in map({a\
    \ in map({b in map({c in map({d in map({x in map({y in map({z in map({x in map({y\
    \ in map({z in map({a in map({b in map({c in map({d in map({x in map({y in map({z\
    \ in map({x in map({y in map({z in map({a in map({b in map({c in map({d in map({x\
    \ in map({y in map({z in map({z in map({a in map({b in map({c in map({d in map({x\
    \ in map({y in map({z in map({x in map({y in map({z in map({a in map({b in map({c\
    \ in map({d in map({x in map({y in map({z in map({x in map({y in map({z in map({a\
    \ in map({b in map({c in map({d in map({x in map({y in map({z in map({x in map({y\
    \ in map({z in map\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp3reutgc8.swift:11:1285: error: structure nesting level exceeded\
    \ maximum of 256\n    return map({x in map({z in map({x in map({y in map({x in\
    \ map({a in map({b in map({c in map({d in map({x in map({y in map({z in map({x\
    \ in map({y in map({z in map({x in map({y in map({a in map({b in map({c in map({d\
    \ in map({x in map({y in map({z in map({x in map({y in map({z in map({x in map({y\
    \ in map({a in map({b in map({c in map({d in map({x in map({y in map({z in map({x\
    \ in map({y in map({z in map({x in map({y in map({a in map({b in map({c in map({d\
    \ in map({x in map({y in map({z in map({x in map({y in map({z in map({a in map({b\
    \ in map({c in map({d in map({x in map({y in map({z in map({x in map({y in map({z\
    \ in map({a in map({b in map({c in map({d in map({x in map({y in map({z in map({x\
    \ in map({y in map({z in map({a in map({b in map({c in map({d in map({x in map({y\
    \ in map({z in map({x in map({y in map({z in map({a in map({b in map({c in map({d\
    \ in map({x in map({y in map({z in map({x in map({y in map({z in map({a in map({b\
    \ in map({c in map({d in map({x in map({y in map({z in map({x in map({y in map({z\
    \ in map({a in map({b in map({c in map({d in map({x in map({y in map({z in map({x\
    \ in map({y in map({z in map({a in map({b in map({c in map({d in map({x in map({y\
    \ in map({z in map({x in map({y in map({z in map({a in map({b in map({c in map({d\
    \ in map({x in map({y in map({z in map({z in map({a in map({b in map({c in map({d\
    \ in map({x in map({y in map({z in map({x in map({y in map({z in map({a in map({b\
    \ in map({c in map({d in map({x in map({y in map({z in map({x in map({y in map({z\
    \ in map({a in map({b in map({c in map({d in map({x in map({y in map({z in map({x\
    \ in map({y in map({z in map\n                                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \     "
  stdout: ''
  timestamp: 1659979713
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    assert(xs.count == 1, \"Only one term polynomial is supported!\")\n    let\
    \ degree = xs[0]\n    var terms = [Int]()\n    for d in 1..<degree {\n       \
    \ let term = xs[d] * d\n        terms.append(term)\n    }\n    return terms\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxai9a8sv/tmpxai9a8sv.swift:10: Assertion failed: Only one term polynomial
    is supported!

    Current stack trace:

    0    libswiftCore.so                    0x00002b831d0bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b831cdb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b831cdb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b831cdb27b0 _assertionFailure(_:_:file:line:flags:)
    + 365

    4    tmpxai9a8sv                        0x000055deb2e71d81 <unavailable> + 7553

    5    tmpxai9a8sv                        0x000055deb2e71664 <unavailable> + 5732

    6    libc.so.6                          0x00002b831d2a8460 __libc_start_main +
    245

    7    tmpxai9a8sv                        0x000055deb2e71339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979713
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return polynomialInterpolant(xs: xs, degree: 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpa6wimqg5.swift:10:12: error: cannot find 'polynomialInterpolant'\
    \ in scope\n    return polynomialInterpolant(xs: xs, degree: 2)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979713
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    let maxPowerIndex = xs.count - 1\n    for i in\
    \ 0..<maxPowerIndex {\n        let power = maxPowerIndex - i\n        result.append(xs[i]\
    \ * pow(xs[power], Double(i)))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp36gn2yil.swift:14:31: error: cannot find 'pow' in scope\n     \
    \   result.append(xs[i] * pow(xs[power], Double(i)))\n                       \
    \       ^~~\n"
  stdout: ''
  timestamp: 1659979713
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for x in xs {\n        result.append(x * x)\n\
    \    }\n    result.reverse()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpwmzg1_7c/tmpwmzg1_7c.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdd7672c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdd7369b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdd7369988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdd73687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwmzg1_7c                        0x000055eda9e4d67c <unavailable> + 5756

    5    libc.so.6                          0x00002abdd785e460 __libc_start_main +
    245

    6    tmpwmzg1_7c                        0x000055eda9e4d269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979713
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    if xs.count < 2 {\n        return Array(0.0)\n    }\n    var sum: Double\
    \ = 0.0\n    for i in 0 ..< xs.count - 2 {\n        sum += xs[i] * xs[i + 2]\n\
    \    }\n    return Array(sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpnkh68him.swift:11:16: error: no exact matches in call to initializer\
    \ \n        return Array(0.0)\n               ^\nSwift.Array:3:23: note: candidate\
    \ requires that 'Double' conform to 'Sequence' (requirement specified as 'S' :\
    \ 'Sequence')\n    @inlinable public init<S>(_ s: S) where Element == S.Element,\
    \ S : Sequence\n                      ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate requires that 'Double' conform to 'Sequence' (requirement specified\
    \ as 'S' : 'Sequence')\n    @inlinable public init<S>(_ elements: S) where S :\
    \ Sequence, Self.Element == S.Element\n                      ^\n/tmp/tmpnkh68him.swift:11:16:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'Double')\n\
    \        return Array(0.0)\n               ^\n/tmp/tmpnkh68him.swift:11:16: note:\
    \ candidate expects value of type 'any Decoder' for parameter #1 (got 'Double')\n\
    \        return Array(0.0)\n               ^\n/tmp/tmpnkh68him.swift:15:22: error:\
    \ cannot convert value of type 'Int' to expected argument type 'Double'\n    \
    \    sum += xs[i] * xs[i + 2]\n                     ^\n               Double(\
    \          )\n/tmp/tmpnkh68him.swift:17:12: error: no exact matches in call to\
    \ initializer \n    return Array(sum)\n           ^\n/tmp/tmpnkh68him.swift:17:12:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got '@lvalue Double')\n\
    \    return Array(sum)\n           ^\n/tmp/tmpnkh68him.swift:17:12: note: candidate\
    \ expects value of type 'any Decoder' for parameter #1 (got '@lvalue Double')\n\
    \    return Array(sum)\n           ^\n"
  stdout: ''
  timestamp: 1659979713
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    var pow: Int = 0\n    for x in xs {\n       \
    \ pow *= x\n        if pow == 0 {\n            result.append(1)\n        } else\
    \ {\n            result.append(pow)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12,\
    \ 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
    \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
    assert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpjwfolr7q/tmpjwfolr7q.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf92b46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf9283db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf9283d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf9283c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjwfolr7q                        0x0000556510aa559c <unavailable> + 5532

    5    libc.so.6                          0x00002abf92d32460 __libc_start_main +
    245

    6    tmpjwfolr7q                        0x0000556510aa5189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659979713
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return Array(0..<xs.count).map({ $0 * xs[$0] })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpyqsnui33/tmpyqsnui33.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47b9a28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47b971fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47b971f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47b971e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyqsnui33                        0x0000561a5267b6fc <unavailable> + 5884

    5    libc.so.6                          0x00002b47b9c14460 __libc_start_main +
    245

    6    tmpyqsnui33                        0x0000561a5267b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979713
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  var result = [Int](repeating: 0, count: xs.count)\n  result[0] = xs[0]\n  for\
    \ idx in 0..<xs.count - 1 {\n    result[idx - 1] = result[idx] + xs[idx] * result[idx\
    \ - 1]\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e1b876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e1b56d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7e1b56d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7e1b56d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7e1b56cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7e1b36ce83 <unavailable> + 188035

    6    tmppke0rs_g                        0x00005560e1a8fe2b <unavailable> + 7723

    7    tmppke0rs_g                        0x00005560e1a8f5f4 <unavailable> + 5620

    8    libc.so.6                          0x00002b7e1ba62460 __libc_start_main +
    245

    9    tmppke0rs_g                        0x00005560e1a8f2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659979713
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return gradient(at: xs.last!)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp485k9rul.swift:10:12: error: cannot find 'gradient' in scope\n\
    \    return gradient(at: xs.last!)\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979713
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \  return derivativeInner(xs: xs, numCoeffs: 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpehwu0en7.swift:10:10: error: cannot find 'derivativeInner' in scope\n\
    \  return derivativeInner(xs: xs, numCoeffs: 1)\n         ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979713
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return derivative(xs, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs:\
    \ [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2,\
    \ 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp74961vny.swift:10:27: error: extra argument in call\n    return\
    \ derivative(xs, 1)\n                     ~~~~~^~\n"
  stdout: ''
  timestamp: 1659979640
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    if xs.isEmpty {\n        return []\n    }\n    return Array(0..<xs.count).map\
    \ { i in\n        xs[i] - xs[i-1]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6de9bc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6de98b9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6de98b9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6de98b913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6de98b8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6de96b8e83 <unavailable> + 188035

    6    tmp51cy9js3                        0x000055bfba81ceb2 <unavailable> + 7858

    7    tmp51cy9js3                        0x000055bfba81d4df <unavailable> + 9439

    8    libswiftCore.so                    0x00002b6de98a1820 Collection.map<A>(_:)
    + 426

    9    tmp51cy9js3                        0x000055bfba81cd65 <unavailable> + 7525

    10   tmp51cy9js3                        0x000055bfba81c674 <unavailable> + 5748

    11   libc.so.6                          0x00002b6de9dae460 __libc_start_main +
    245

    12   tmp51cy9js3                        0x000055bfba81c349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979713
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return map(xs, &(_ - 1) * &(xs))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpkctb3l6a.swift:10:12: error: cannot find 'map' in scope\n    return\
    \ map(xs, &(_ - 1) * &(xs))\n           ^~~\n/tmp/tmpkctb3l6a.swift:10:22: error:\
    \ '_' can only appear in a pattern or on the left side of an assignment\n    return\
    \ map(xs, &(_ - 1) * &(xs))\n                     ^\n"
  stdout: ''
  timestamp: 1659979713
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    return (0..<xs.count).map { i in\n        let x0 = Double(xs[i])\n      \
    \  let x = xs[i+1]\n        let x2 = x0 * x\n        let x3 = x2 * x\n       \
    \ x3 * x0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\n\
    assert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0,\
    \ 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1ce179jj.swift:13:21: error: binary operator '*' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n        let x2 = x0 * x\n          \
    \       ~~ ^ ~\n/tmp/tmp1ce179jj.swift:13:21: note: overloads for '*' exist with\
    \ these partially matching parameter lists: (Double, Double), (Int, Int)\n   \
    \     let x2 = x0 * x\n                    ^\n"
  stdout: ''
  timestamp: 1659979713
- exit_code: 1
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    precondition(xs.count >= 1)\n    let derivativeCount = xs.count - 1\n   \
    \ var result = [0]\n    for i in 1..derivativeCount {\n        result[i - 1] =\
    \ result[i] + xs[i-1]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp_6guu3d4.swift:13:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..derivativeCount {\n              ^~\n \
    \             ...\n"
  stdout: ''
  timestamp: 1659979713
- exit_code: -4
  program: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same\
    \ form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>>\
    \ derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for x in xs {\n        result = result + [Int](repeatElement(0,\
    \ count: Int(x)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs:\
    \ [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs:\
    \ [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp_mqlyu97/tmp_mqlyu97.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b19352c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b19049b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b19049988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b190487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_mqlyu97                        0x0000556c5c96683c <unavailable> + 6204

    5    libc.so.6                          0x00002b0b1953e460 __libc_start_main +
    245

    6    tmp_mqlyu97                        0x0000556c5c966429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659979713
