name: HumanEval_153_Strongest_Extension
language: swift
prompt: "\n/// You will be given the name of a class (a string) and an array of extensions.\n\
  /// The extensions are to be used to load additional classes to the class. The\n\
  /// strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  /// letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n/// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n/// You should find the strongest extension and return a string in this \n///\
  \ format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions\
  \ with the same strength, you should\n/// choose the one that comes first in the\
  \ array.\n/// For example, if you are given \"Slices\" as the class and an array\
  \ of the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  /// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n/// (its strength is -1).\n/// Example:\n/// >>> Strongest_Extension(class_name:\
  \ \"my_class\", extensions: [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc\
  \ Strongest_Extension(class_name: String, extensions: [String]) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\"\
  , extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
  \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
  ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
  , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
  ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
  \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
  \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
  )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\",\
  \ \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\
  assert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\", \"\
  NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
  \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
  \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
completions: ["    var extensions_str = extensions[0]\n    for extension in extensions\
    \ {\n        var extension_str = extension\n        for char in extension_str\
    \ {\n            if char.isUpper() {\n                extension_str = extension_str.removePrefix()\n\
    \                break\n            }\n        }\n        var class_name_extension_str\
    \ = class_name + \".\" + extension_str\n        if class_name_extension_str in\
    \ extensionsMap {\n            let strength = extensionsMap[class_name_extension_str]!.count\n\
    \            if strength > extensions_str.count {\n                extensions_str\
    \ = class_name_extension_str\n            }\n        } else {\n            extensionsMap[class_name_extension_str]\
    \ = extensions_str.count\n        }\n    }\n    return class_name + \".\" + extensions_str",
  "    var result: String = \"\"\n    let class_name_string = class_name.characters\n\
    \    var extension_number = 0\n    var extension_array = [String]()\n    for extension\
    \ in extensions {\n        let extension_string = extension.characters\n     \
    \   var extension_strength = -1\n        for letter in extension_string {\n  \
    \          let letter_upper = letter as UInt8\n            if letter_upper > 97\
    \ { extension_strength += 1 }\n        }\n        if extension_strength > extension_number\
    \ {\n            result = class_name_string[class_name_string.startIndex..<class_name_string.endIndex].map\
    \ {String($0)}.joined(separator: extension_string)\n            extension_number\
    \ = extension_strength\n            extension_array = [extension]\n        } else\
    \ {\n            extension_array.append(extension)\n        }\n    }\n    if extension_number\
    \ > 0 {\n        result = class_name_string[class_name_string.startIndex..<class_name_string.endIndex].map\
    \ {String($0)}.joined(separator: extension_array[extension_number])\n    }\n \
    \   return result", "    // Your code here\n    \n    return class_name", "  \
    \  var extensions_string = extensions[0]\n    var extension_count = extensions[0]\n\
    \n    for i in 1...extensions.count {\n        if extensions_string.characters.count\
    \ != extension_count.characters.count {\n            return \"\"\n        }\n\n\
    \        if extensions_string == extensions[i] {\n            extension_count\
    \ = extensions[i]\n        } else {\n            extension_count = extensions[0]\n\
    \        }\n\n        extensions_string = extensions[i]\n    }\n\n    return class_name\
    \ + extension_count", '  return StrongestExtension(class_name, extensions, nil)',
  "    // Your code here\n    var max_strength = -1\n    for ext in extensions {\n\
    \        var strength = ext.toUppercase().count - ext.toLowercase().count\n  \
    \      if strength > max_strength {\n            max_strength = strength\n   \
    \     }\n    }\n    if max_strength > 0 {\n        return class_name + extensions[extensions.index(extensions.firstIndex(of:\
    \ extensions.firstIndex(of: max_strength))!)!]\n    } else {\n        return class_name\n\
    \    }", "    // TODO: Return the strongest extension from the array.\n    var\
    \ result = class_name\n    for extension in extensions {\n        var index =\
    \ class_name.index(extension, offsetBy: 0)\n        let capital_index = class_name.index(extension,\
    \ offsetBy: CAPITAL)\n        let lowercase_index = class_name.index(extension,\
    \ offsetBy: SM)\n        if capital_index == lowercase_index {\n            result\
    \ = class_name.replacingCharacters(in: index..<capital_index+1, with: extension)\n\
    \        } else {\n            result = class_name.replacingCharacters(in: index..<lowercase_index+1,\
    \ with: extension)\n        }\n    }\n    return result", "    if extensions ==\
    \ [] {\n        return \"Extension.\" + class_name\n    }\n    var sorted = extensions.sorted()\n\
    \    var max_score = -1\n    var best_extension = \"\"\n    var current_score\
    \ = 0\n    for i in 0..<extensions.count {\n        var score = current_score\
    \ + (len(extensions[i]) - sort_case(extensions[i]))\n        if score > max_score\
    \ {\n            max_score = score\n            best_extension = extensions[i]\n\
    \        }\n    }\n    return class_name + \".\" + best_extension", "    var strength\
    \ = -1\n    var strongest_extension: String = \"\"\n    var class_index_in_extensions:\
    \ [Int] = []\n\n    for index in 0..<extensions.count {\n        if extensions[index].range(of:\
    \ class_name, options: .caseInsensitive) != nil {\n            class_index_in_extensions.append(index)\n\
    \        }\n    }\n\n    if class_index_in_extensions.count > 0 {\n        let\
    \ class_index = class_index_in_extensions[0]\n        for index in class_index_in_extensions\
    \ {\n            if class_index_in_extensions[index] > class_index {\n       \
    \         class_index = class_index_in_extensions[index]\n            }\n    \
    \    }\n        strength = class_index_in_extensions[class_index] - class_index_in_extensions[class_index_in_extensions[0]]\n\
    \        strongest_extension = class_name + extensions[class_index_in_extensions[class_index]]\
    \ \n    }\n\n    if strength != -1 {\n        return class_name + extensions[strength]\n\
    \    } else {\n        return class_name\n    }", "    if extensions == nil ||\
    \ class_name == nil {\n        return \"\"\n    }\n    \n    // Convert extensions\
    \ to lowercase\n    let extension_lowercased = extensions.map { (x) -> String\
    \ in x.lowercased() }\n    \n    // Sort extension by strength\n    let sorted\
    \ = extension_lowercased.sorted { (first, second) -> Bool in\n        let first_upper\
    \ = first.characters.count\n        let second_upper = second.characters.count\n\
    \        \n        var compare = Int(0)\n        \n        if first_upper > second_upper\
    \ {\n            compare = -1\n        } else if first_upper < second_upper {\n\
    \            compare = 1\n        } else {\n            // If they have the same\
    \ number of uppercase characters, compare the\n            // characters according\
    \ to their ASCII (if they don't have a lowercase\n            // character then\
    \ the first one should come first)\n            let first_lower = first.characters.map\
    \ { String($0).lowercased() }\n            let second_lower = second.characters.map\
    \ { String($0).lowercased() }\n            compare = first_lower.compare(second_lower)\n\
    \        }\n        return compare == 0 ? true : compare < 0\n    }\n    \n  \
    \  // Check if there are multiple extensions with the same strongest\n    let\
    \ duplicates = sorted.filter { sorted.contains($0) }\n    if duplicates.count\
    \ > 1 {\n        let max_value = sorted.map { Int($0) }.max()\n        return\
    \ String(class_name).appending(max_value.description)\n    } else {\n        return\
    \ String(class_name)\n    }", "    var best: Int = 0\n    var bestClass: String\
    \ = \"\"\n    for extension in extensions {\n        switch Strongest(class_name:\
    \ class_name, extension: extension) {\n            case .Below(let strength):\n\
    \                if strength < best {\n                    best = strength\n \
    \                   bestClass = class_name\n                }\n            case\
    \ .Above(let strength):\n                if strength > best {\n              \
    \      best = strength\n                    bestClass = class_name\n         \
    \       }\n            default:\n                break\n        }\n    }\n   \
    \ return bestClass", "    // Solution Logic\n    var strongest_extension = \"\"\
    \n    for extension in extensions {\n        var class_name_count = 0\n      \
    \  for char in class_name {\n            if char == extension {\n            \
    \    class_name_count += 1\n            }\n        }\n        // If class_name_count\
    \ is greater or equal to SM, then we have a strongest extension\n        if class_name_count\
    \ >= CAP - SM {\n            strongest_extension = extension\n            break\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension", "   \
    \ var strongest = class_name\n    var totalStrongest = class_name.count\n    for\
    \ extension in extensions {\n        let extension = extension.lowercased()\n\
    \        let index = class_name.index(extension, options: .anchored)\n       \
    \ let newStrongest = class_name.substring(to: index)\n        let countOfNew =\
    \ class_name.components(separatedBy: extension).count\n        let strength =\
    \ newStrongest.count\n        let totalCount = countOfNew.count\n        let percentage\
    \ = (strength / totalCount) * 100\n        if percentage >= (totalStrongest /\
    \ 3) {\n            strongest = newStrongest\n        }\n        totalStrongest\
    \ = totalStrongest + countOfNew\n    }\n    return strongest", "    if extensions.isEmpty\
    \ {\n        return class_name\n    }\n    var numOfUpperCaseLetters = 0\n   \
    \ var numOfLowerCaseLetters = 0\n    for extension in extensions {\n        var\
    \ upperCaseCount = 0\n        var lowerCaseCount = 0\n        for c in extension\
    \ {\n            if c.isUppercase {\n                upperCaseCount += 1\n   \
    \         } else if c.isLowercase {\n                lowerCaseCount += 1\n   \
    \         }\n        }\n        let fraction = upperCaseCount - lowerCaseCount\n\
    \        if fraction > numOfUpperCaseLetters {\n            numOfUpperCaseLetters\
    \ = fraction\n        } else {\n            numOfLowerCaseLetters = fraction\n\
    \        }\n    }\n    let strength = numOfUpperCaseLetters - numOfLowerCaseLetters\n\
    \    return class_name + \".\" + extensions[extensions.index(of: class_name)!]\
    \ + \".\" + String(strength)", "    if extensions.isEmpty {\n        return class_name\n\
    \    }\n\n    var class_name = class_name\n    for extension in extensions {\n\
    \        class_name = class_name.components(separatedBy: \".\").last! + extension\n\
    \    }\n    return class_name", "    \n    let extensions_with_strength = extensions.filter\
    \ { (e) in\n        return e.hasPrefix(class_name)\n    }\n    let strongest_extension\
    \ = extensions_with_strength.sort { (a, b) -> Bool in\n        let a_strength\
    \ = a.substring(class_name.characters.count, extensions_with_strength.count)\n\
    \        let b_strength = b.substring(class_name.characters.count, extensions_with_strength.count)\n\
    \        let a = Int(a_strength)\n        let b = Int(b_strength)\n        return\
    \ b < a \n    }\n    return class_name.appending(\".\").appending(strongest_extension.first!)",
  "    var result: String = class_name\n    var max_strength = -1\n    for extension\
    \ in extensions {\n        let (str_class, str_extension) = extension.components(separatedBy:\
    \ \".\")\n        let strength = str_extension.count\n        if strength > max_strength\
    \ {\n            result = str_class\n            max_strength = strength\n   \
    \     }\n    }\n    return result", "    return class_name + \n        Strongest_ExtensionExtension(class_name,\
    \ extensions)", '    return class_name + "\." + extensions[extensions.reduce(0,
    {$0 > $1.count})]', '    return extensions[Strongest_Extension_index(class_name:
    class_name, extensions: extensions)]', "    let extension_array = extensions.map{\
    \ $0.lowercased() }\n    if extension_array.count == 0 { return class_name }\n\
    \    let class_cap = class_name.characters.count\n    let class_sm = class_cap\
    \ - class_array.count\n    let class_cap_sm = class_cap - class_sm\n    let min_extension\
    \ = extension_array.min()!\n    if class_cap_sm == 0 {\n        return class_name\n\
    \    }\n    let strong_extension = extension_array.filter({ $0.characters.count\
    \ >= class_cap_sm }).min()!\n    return class_name + String(min_extension) + String(strong_extension)",
  "    \n    let extensions_count = extensions.reduce(0, { $0 + ($1.uppercaseString.length\
    \ - $1.lowercaseString.length) })\n    let strength = extensions_count / extensions_count.squareRoot()\n\
    \    return class_name + \".\" + extensions.first!.lowercaseString.capitalizingFirst",
  "\tlet class_name = class_name.lowercased()\n\tvar max_strongest_extension_strength:\
    \ Int = -1\n\tfor extension in extensions {\n\t\tlet extension_str = extension.lowercased()\n\
    \t\tif class_name.hasPrefix(extension_str) {\n\t\t\tlet index = class_name.index(class_name.startIndex,\
    \ offsetBy: extension_str.count)\n\t\t\tlet class_name_end_index = class_name.index(index,\
    \ offsetBy: class_name.count)\n\t\t\tlet class_name_length = class_name_end_index\
    \ - index\n\t\t\tif class_name_length > max_strongest_extension_strength {\n\t\
    \t\t\tmax_strongest_extension_strength = class_name_length\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn class_name + String(repeating: \".\", count: max_strongest_extension_strength)",
  "    return class_name + \".\" + extensions.reduce((a, e) -> {\n        var a =\
    \ a.lowercased()\n        var e = e.lowercased()\n        var t = a.count - e.count\n\
    \        if (t > 0)\n            return a + \".\" + e\n        if (t < 0)\n  \
    \          return a + e\n        return a\n    }).lowercased()", "    \n    var\
    \ strongest_extension = class_name\n    \n    var num_uppercase_letters = class_name.characters.filter({\
    \ $0.isUpper() }).count\n    \n    var num_lowercase_letters = class_name.characters.filter({\
    \ $0.isLower() }).count\n    \n    if num_lowercase_letters > num_uppercase_letters\
    \ {\n        strongest_extension = class_name.substringToIndex(class_name.startIndex.advancedBy(num_lowercase_letters))\n\
    \    }\n    \n    var max_strength = -1\n    \n    for extension in extensions\
    \ {\n        \n        var extension_num_uppercase_letters = extension.characters.filter({\
    \ $0.isUpper() }).count\n        \n        var extension_num_lowercase_letters\
    \ = extension.characters.filter({ $0.isLower() }).count\n        \n        let\
    \ strongest = extension_num_uppercase_letters - extension_num_lowercase_letters\n\
    \        \n        if strongest > max_strength {\n            max_strength = strongest\n\
    \            strongest_extension = extension\n        }\n    }\n    \n    return\
    \ strongest_extension", "    if extensions.isEmpty {\n        return class_name\n\
    \    }\n\n    var class_array: [String] = []\n    class_array.append(class_name)\n\
    \    class_array.append(extensions[0])\n    for index in 1..extensions.count {\n\
    \        class_array.append(extensions[index])\n    }\n    let length = class_array.count\n\
    \n    let sum = 0\n    for _ in 0..<length {\n        sum += class_array[index].count\n\
    \        index++\n    }\n\n    let c = CGFloat(sum)\n\n    var smallest: Int =\
    \ length - 1\n    for index in 0..<length {\n        let e = class_array[index]\n\
    \        if e.count < smallest {\n            smallest = e.count\n        }\n\
    \    }\n\n    let smallest_c = CGFloat(smallest)\n\n    if c >= smallest_c {\n\
    \        return class_array[length - 1].lowercased() + class_array[index].lowercased()\n\
    \    }\n\n    return class_array[smallest_c].lowercased() + class_array[index].lowercased()",
  "    for i in 0..<extensions.count {\n        if extensions[i].characters.count\
    \ > class_name.characters.count {\n            return String(class_name).appending(\"\
    .\\(extensions[i])\")\n        }\n    }\n    return String(class_name)", "   \
    \ return class_name +\n        extensions[strongest_extension(class_name: class_name,\
    \ extensions: extensions)]", "    let class_name_as_array = class_name.characters.split(\"\
    \").map(String.init)\n    var max_strength = -1\n    var max_index = -1\n    \n\
    \    extension_array = extension_array.map(String.init)\n    extension_array.enumerated().forEach\
    \ { (index, element) in\n        let element_array = element.characters.split(\"\
    \").map(String.init)\n        let element_as_array = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array2 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array3 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array4 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array5 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array6 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array7 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array8 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array9 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array10 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array11 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array12 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array13 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array14 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array15 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array16 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array17 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array18 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array19 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array20 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array21 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array22 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array23 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array24 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array25 = element.characters.split(\"\
    \").map(String.init)\n        let element_as_string_array26 = element.characters.split(\"\
    \").map(String.init)\n", '    return class_name.StrongestExtensionName(extensions)',
  "    var class_extension: String = \"\"\n    var class_strength: Int = 0\n    \n\
    \    for extension in extensions {\n        class_extension += class_name.capitalized()\
    \ + extension\n        class_strength += extension.count\n    }\n    \n    var\
    \ strongest = class_extension\n    if class_strength == 0 {\n        return strongest\n\
    \    }\n    \n    for extension in extensions {\n        class_extension = class_extension.lowercased()\n\
    \        let letter_count = extension.lowercased().count\n        if class_strength\
    \ - letter_count < class_strength {\n            strongest = class_extension\n\
    \        }\n    }\n    \n    return strongest", "    guard extensions.isEmpty\
    \ == false else {\n        return \"\\(self.class_name)\"\n    }\n\n    let count\
    \ = extensions.count\n\n    // Count capital letters and lowercase letters\n \
    \   let capitals = extensions.reduce(0, combine: +)\n    let lowercases = extensions.reduce(0,\
    \ combine: +)\n\n    // Strength of extension\n    let strongest = capitals -\
    \ lowercases\n\n    // If same strength, chose the one that comes first in the\
    \ array\n    let index = strongest % extensions.count\n\n    // If same strength,\
    \ chose the one that comes first in the array\n    if index != extensions.count\
    \ {\n        return class_name + \".\\(extensions[index])\"\n    } else {\n  \
    \      return class_name\n    }", "    var strongest = \"\"\n    \n    for i in\
    \ 0..<extensions.count {\n        var s = extensions[i]\n        let cap = s.count\n\
    \        let sm = class_name.count\n        \n        let x = Double((cap - sm)\
    \ / cap)\n        \n        if x > 1 {\n            let a = String(cap.times(Double(x\
    \ / 1)))\n            s = class_name + a\n        }\n        \n        strongest\
    \ = strongest + s + \".\"\n    }\n    \n    return strongest.last", "    \n  \
    \  let capitals = class_name.characters.filter({CharacterSet.uppercaseLetters.contains($0)})\n\
    \    let lowercases = class_name.characters.filter({CharacterSet.lowercaseLetters.contains($0)})\n\
    \    let extension_classes = (extensions.map {Extension($0)})\n    var counts\
    \ = [Character: Int]()\n    \n    for i in 0..<extensions.count {\n        let\
    \ str = extensions[i]\n        if str.count < 1 {\n            continue\n    \
    \    }\n        let index = str.index(str.startIndex, offsetBy: 1)\n        let\
    \ letter = str[index].lowercaseString\n        if letter != \"_\" {\n        \
    \    counts[letter] = (counts[letter] ?? 0) + 1 \n        }\n    }\n    \n   \
    \ var best = 0\n    var best_letter = \"\"\n    for ((letter, count) in counts.enumerated()\
    \ {\n        let index = capitals.firstIndex(of: letter)\n        let classIndex\
    \ = lowercases.index(of: letter)\n        let strength = count - counts[letter]\n\
    \        if strength > best {\n            best = strength\n            best_letter\
    \ = letter\n        }\n    }\n    \n    return class_name + \".\" + best_letter",
  "    let maxStrength: Int = (extensions.map { $0.count }).max()\n    let maxLength\
    \ = class_name.count\n    let maxChar = class_name.characters().filter { $0.isUppercase\
    \ }.count\n    let maxChar2 = class_name.characters().filter { $0.isLowercase\
    \ }.count\n    let maxChar3 = class_name.characters().filter { $0.isLetter }.count\n\
    \    let maxChar4 = class_name.characters().filter { $0.isNumber }.count\n   \
    \ let maxChar5 = class_name.characters().filter { $0.isPunctuation }.count\n \
    \   let maxChar6 = class_name.characters().filter { $0.isSymbol }.count\n    let\
    \ maxChar7 = class_name.characters().filter { $0.isLetter || $0.isNumber || $0.isPunctuation\
    \ || $0.isSymbol }.count\n    let maxChar8 = class_name.characters().filter {\
    \ $0.isUppercase || $0.isLowercase || $0.isLetter || $0.isNumber || $0.isPunctuation\
    \ || $0.isSymbol }.count\n    if maxLength > maxChar*maxStrength + maxChar2*maxStrength\
    \ + maxChar3*maxStrength + maxChar4*maxStrength + maxChar5*maxStrength + maxChar6*maxStrength\
    \ + maxChar7*maxStrength + maxChar8*maxStrength {\n        let index = extensions.index(where:\
    \ { $0.count >= maxStrength })!\n        let name = String(class_name)\n     \
    \   if maxLength == maxChar*maxStrength + maxChar2*maxStrength + maxChar3*maxStrength\
    \ + maxChar4*maxStrength + maxChar5*maxStrength + maxChar6*maxStrength + maxChar7*maxStrength\
    \ + maxChar8*maxStrength {\n            let length = maxLength - maxChar*maxStrength\
    \ - maxChar2*maxStrength - maxChar3*maxStrength - maxChar4*maxStrength - maxChar5*maxStrength\
    \ - maxChar6*maxStrength - maxChar7*maxStrength - maxChar8*maxStrength\n     \
    \       return String(name[..<index]) + extensions[index]\n        } else if maxLength\
    \ == maxChar*maxStrength + maxChar2*maxStrength + maxChar3*maxStrength + maxChar4*maxStrength\
    \ + maxChar5*maxStrength + maxChar6*maxStrength + maxChar7*maxStrength {\n   \
    \         let length = maxLength - maxChar*maxStrength - maxChar2*maxStrength\
    \ - ", "    var extension_scores = [Int]()\n    for extension in extensions {\n\
    \        let extension_score = extension.countUppercaseLetters - extension.countLowercaseLetters\n\
    \        extension_scores[extension_score] = extension\n    }\n    extension_scores.sortInPlace({$0.0\
    \ < $1.0})\n    let first_extension = extension_scores.first?.element\n    return\
    \ String(class_name)\n        .components(separatedBy: \".\")\n        .joined(separator:\
    \ \".\")\n        .appending(\".\\(first_extension)\")", "\t\n\t\n\t// Create\
    \ 2 arrays to store the classes that have been used and the\n\t// strength of\
    \ each of them\n\tvar classes = [String]()\n\tvar class_strength = [Int]()\n\t\
    \n\t\n\t// Loop through the extensions and find out how many of each are in the\n\
    \t// class\n\tfor extension in extensions {\n\t\tvar class_index = classes.index(class_name)\n\
    \t\tif class_index != nil { // If we haven't found the class yet.\n\t\t\tvar class_strength_of_extension\
    \ = class_strength[class_index]\n\t\t\tclass_strength[class_index] += 1\n\t\t\t\
    if class_strength_of_extension > 0 { // If the current extension has more letters\
    \ than the previous one\n\t\t\t\tclass_strength[class_index] = class_strength_of_extension\n\
    \t\t\t} else { // If the current extension has the same letters as the current\
    \ one\n\t\t\t\tclass_strength[class_index] = -1\n\t\t\t}\n\t\t}\n\t\t\n\t\tclasses.append(extension)\n\
    \t}\n\t\n\t// Sort the array by the strength of each class first\n\tclass_strength\
    \ = class_strength.sorted { $0 < $1 }\n\t\n\t// Now we know how many of each extension\
    \ there are, we must choose\n\t// the strongest extension for each class\n\t\n\
    \t// Loop through the sorted array and find the first strongest extension for\
    \ each class\n\t\n\t\n\t\n\treturn \"\"", "    \n    // Your code here\n    var\
    \ strongest_extension = \"\"\n    \n    return strongest_extension", "    var\
    \ strongest_ext = \"\"\n    \n    var num_cap = 0\n    var num_sm = 0\n    \n\
    \    for str in extensions {\n        var char_array = Array(str)\n        \n\
    \        for index in 0..<char_array.count {\n            let char = char_array[index]\n\
    \            if char == char.lowercaseString {\n                char = \"A\"\n\
    \            } else if char == char.uppercaseString {\n                char =\
    \ \"a\"\n            }\n            \n            if index == char_array.count-1\
    \ {\n                \n                if char == char.lowercaseString {\n   \
    \                 num_sm += 1\n                } else {\n                    num_cap\
    \ += 1\n                }\n            }\n        }\n    }\n    \n    let strongest_ext_str\
    \ = class_name + \".\" + extensions[extensions.index(where: \\.isEqual)!]\n  \
    \  if num_cap > num_sm {\n        strongest_ext = \"-\" + strongest_ext_str\n\
    \    } else {\n        strongest_ext = strongest_ext_str\n    }\n    \n    return\
    \ strongest_ext", "    var max_val: Int = -99999\n    var extension: String? =\
    \ nil\n    for i in 0..<extensions.count {\n        let ext = extensions[i].uppercaseString\n\
    \        let val = class_name.countCharacters(in: ext)\n        max_val = max(val,\
    \ max_val)\n        extension = extensions[i]\n    }\n    return String(class_name\
    \ + extension)", "    \n    // Your code here\n    \n    return \"\"", "    var\
    \ bestExtension = \"\"\n    \n    for extension in extensions {\n        let firstLetter\
    \ = extension.first\n        \n        let numberOfUppercase = class_name.components(separatedBy:\
    \ firstLetter).filter({ $0.isUppercase }).count\n        let numberOfLowercase\
    \ = class_name.components(separatedBy: firstLetter).filter({ $0.isLowercase }).count\n\
    \        let totalNumberOfLetters = numberOfUppercase + numberOfLowercase\n  \
    \      let letterPercentage = totalNumberOfLetters / class_name.count\n      \
    \  \n        if letterPercentage > bestExtension.characters.count {\n        \
    \    bestExtension = extension\n        }\n    }\n    \n    return class_name\
    \ + bestExtension", "    if extensions == nil || extensions.isEmpty {\n      \
    \  return class_name\n    }\n\n    let className = String(cString: class_name)\n\
    \    let extensions = extensions.map { String(cString: $0) }\n\n    // Sort the\
    \ extensions by strength so that we can pick the strongest\n    // extension.\n\
    \    let sortedExtensions = extensions.sorted{ $0.hasPrefix(className)}\n\n  \
    \  // If there are multiple extensions with the same strength, return the\n  \
    \  // one that comes first in the array. For example, if the extension \n    //\
    \ array is [\"AA\", \"Be\", \"CC\"] and the strongest extension is \"Be\", then\
    \ we\n    // should return \"AA\" since \"Be\" comes before \"AA\".\n    let strength\
    \ = sortedExtensions.map { $0.hasPrefix(className) ? -1 }.reduce(0) { ($0 + $1)\
    \ % $0.count }\n\n    return String(className, extensions[strength])", "    var\
    \ extension = extensions.reduce((extension, extension_)->String{\n        if extension.count\
    \ > extension_.count {\n            return extension\n        } else {\n     \
    \       return extension_\n        }\n    })\n\n    var count = extension.count\n\
    \    for i in 0 ..< count {\n        let pos = extension[i].index(extension[i].startIndex,\
    \ offsetBy: 1)\n        let pos = extension[i].index(pos, offsetBy: -1)\n    \
    \    let pos = extension[i].index(pos, offsetBy: 1)\n        let pos = extension[i].index(pos,\
    \ offsetBy: -1)\n        let pos = extension[i].index(extension[i].endIndex, offsetBy:\
    \ -1)\n        extension[i] = extension[i][pos..<extension[i].endIndex]\n    }\n\
    \n    return class_name + \".\" + extension.joinWithSeparator(\"\")", "    var\
    \ min_strength = extensions[0].characters.count\n    for ext in extensions {\n\
    \        let strength = ext.characters.count\n        if strength < min_strength\
    \ {\n            min_strength = strength\n        }\n    }\n    return String(format:\
    \ \"%@.%@\", class_name, extensions[extensions.index(of: min_strength)!])", '    return
    class_name + "." + extensions[extensions.count - 1]', "    var strongest_extension:\
    \ String = \"\"\n    for extension in extensions {\n        switch class_name.count\
    \ - extension.count {\n        case 0..<4:\n            strongest_extension +=\
    \ class_name + extension\n        case 5..<7:\n            strongest_extension\
    \ += class_name.capitalized + extension.capitalized\n        default:\n      \
    \      strongest_extension += class_name.capitalized.capitalized + extension.capitalized.capitalized\n\
    \        }\n    }\n    return strongest_extension", "    let n = extension.count\n\
    \    let s = extension.map { $0.capitalized }\n    var c = extension.count - extensions.count\n\
    \    for i in 0..<n {\n        let r = s.randomElement()\n        if extension[i]\
    \ == r {\n            c--\n        } else {\n            return String(class_name\
    \ + \".\" + extensions.first! + \".\" + r)\n        }\n    }\n    return String(class_name\
    \ + \".\" + extensions.first!)", "    // Your code goes here\n    var max_extensions:\
    \ [(Int, Int)]\n    extensions = extensions.sorted(by: { $0.count > $1.count })\n\
    \    for extension in extensions {\n        let arr = extension.split(separator:\
    \ \"_\")\n        let cap = Int(arr[0].uppercased().count)\n        let sm = Int(arr[0].lowercased().count)\n\
    \        let val = cap - sm\n        max_extensions = append(max_extensions, val:\
    \ val)\n    }\n    let maxValue = max_extensions.max(by: { $0.1 })\n    return\
    \ class_name.stringByAppendingString(\".\\(maxValue.0)\")", "  assert(class_name.hasPrefix(\"\
    Class\"), \"class_name should start with 'Class:'\")\n  assert(extensions.count\
    \ > 0, \"At least one extension required\")\n  var strength : Int = 0\n  for extension\
    \ in extensions {\n    let cap = extension.characters.count\n    let sm = extension.lowercased().characters.count\n\
    \    guard cap > 0 && sm > 0 else { return class_name }\n    let diff = cap -\
    \ sm\n    guard diff != 0 else { return class_name }\n    strength = if diff <\
    \ 0 { -1 } else { diff }\n  }\n  guard strength == 0 else { return class_name\
    \ }\n  return class_name + \".\" + extensions.sorted()[extensions.count - 1]",
  "    var bestExtension = \"\"\n    let extensionCount = extensions.count\n    var\
    \ bestStrength = -1\n    for index in 0..<extensionCount {\n        let extension\
    \ = extensions[index]\n        let extensionCapital = extension.countUpToCapital()\n\
    \        let extensionLowercase = extension.countUpToLowercase()\n        let\
    \ extensionStrength = extensionCapital - extensionLowercase\n        if extensionStrength\
    \ > bestStrength {\n            bestExtension = extension\n            bestStrength\
    \ = extensionStrength\n        }\n    }\n    return class_name + bestExtension",
  "    guard let class = NSClassFromString(class_name) else {\n        return class_name\n\
    \    }\n\n    var strongest_extension: String = \"\"\n    var strength: Int =\
    \ 0\n    var letter = class_name.characters.first!\n    var found = false\n  \
    \  for extension in extensions {\n        var found = false\n        for character\
    \ in extension {\n            if character == letter {\n                found\
    \ = true\n                break\n            }\n        }\n        if found {\n\
    \            strength += 1\n        }\n        else {\n            strength -=\
    \ 1\n        }\n        if strength > 0 {\n            continue\n        }\n \
    \       strongest_extension += extension +\".\"\n        found = false\n     \
    \   for character in class_name {\n            if character == letter {\n    \
    \            found = true\n                break\n            }\n        }\n \
    \       if found {\n            break\n        }\n    }\n    return strongest_extension.dropLast()",
  "  // Your code here\n  var max = 0\n  \n  for extension in extensions {\n    if\
    \ extension.count > max {\n      max = extension.count\n    }\n  }\n  \n  let\
    \ maxString = class_name + extensions\n  \n  return class_name + extensions.maxElement()",
  "    return class_name +\n        Strongest_Extensions(class_name, extensions)",
  "    var res = class_name\n    for extension in extensions {\n        \n       \
    \ let cap = extension.count\n        let sm = class_name.lowercaseString.count\n\
    \        let strength = cap - sm\n        if strength == 0 {\n            continue\n\
    \        }\n        if let idx = extensions.index(of: extension) {\n         \
    \   if strength > extensions[idx].lowercaseString.count {\n                continue\n\
    \            }\n        }\n        res += extension\n    }\n    return res", " \
    \   var strongest_extension = \"\"\n    var strongest_extension_strength = -1\n\
    \n    for extension in extensions {\n        let extension_len = extension.characters.count\n\
    \        let extension_strength = extension_len - class_name.characters.count\n\
    \        if strongest_extension_strength < extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension\n        }\n\
    \    }\n\n    return class_name + \".\" + strongest_extension", "    var num_upper\
    \ = 0\n    var num_lower = 0\n    var best_str = \"\"\n    for ext in extensions\
    \ {\n        num := ext.count\n        if num > num_upper {\n            num_upper\
    \ = num\n            best_str = ext\n        } else if num > num_lower {\n   \
    \         num_lower = num\n            best_str = ext\n        }\n    }\n    if\
    \ num_lower > num_upper {\n        num_upper = num_lower\n        best_str = class_name\
    \ + best_str\n    }\n    return class_name + best_str", "    var strongest_extension:\
    \ String = class_name\n    for extension in extensions {\n        \n        //\
    \ Get the number of uppercase letters\n        let CAP = extension.unicodeScalars.filter\
    \ { $0.isUppercase }\n        \n        // Get the number of lowercase letters\n\
    \        let SM = extension.unicodeScalars.filter { $0.isLowercase }\n       \
    \ \n        // Calculate the strength\n        let strength = CAP.count - SM.count\n\
    \        \n        // Check if this extension has the greatest strength\n    \
    \    if strength > 0 {\n            strongest_extension += \".\" + extension\n\
    \        }\n    }\n    return strongest_extension", "    var strongest = \"\"\n\
    \    var extension_length = extensions[0].count\n\n    for extension in extensions\
    \ {\n        let class_extension = class_name + extension.lowercasedString\n \
    \       let class_extension_length = class_extension.count\n\n        if (class_extension_length\
    \ >= extension_length) {\n            strongest = class_extension\n        }\n\
    \    }\n\n    return strongest", "    var result = \"\"\n    if extensions.count\
    \ < 1 || extensions.count > 2 {\n        print(\"Error: strongest extension requires\
    \ 1 or 2 extensions.\")\n        return \"\"\n    }\n\n    var strongest_extension\
    \ = extensions[0]\n    for extension in extensions {\n        let match = Strongest_Extension(class_name:\
    \ class_name, extensions: [extension])\n        if match == strongest_extension\
    \ {\n            break\n        } else {\n            strongest_extension = match\n\
    \        }\n    }\n    return class_name + strongest_extension", "    // Write\
    \ your code here\n    var strongest: String = \"\"\n    for extension in extensions\
    \ {\n        let upper = extension.uppercaseString\n        let lower = extension.lowercaseString\n\
    \        let index = upper - lower\n        if index < 0 {\n            index\
    \ = index * (-1) + upper.count\n        }\n        let strength = class_name.range(of:\
    \ String(describing: extension))?.upperBound\n        if strength == nil {\n \
    \           strength = 0\n        }\n        if strength! < index {\n        \
    \    strongest = class_name + extension\n        }\n    }\n    return strongest",
  "  if class_name.hasPrefix(\"__\") {\n    // Don't let extension names start with\
    \ '__'\n    // This would be problematic for names like '__AA'\n    guard !class_name.hasSuffix(\"\
    .\") else {\n      return class_name;\n    }\n    return class_name.dropFirst(class_name.count(\"\
    .\") + 1)\n  }\n  \n  var name_components = class_name.components(separatedBy:\
    \ \".\");\n  var class_name = name_components.first!;\n  guard let extension =\
    \ extensions[extensions.index(of: class_name)!] else {\n    return class_name;\n\
    \  }\n  var index = extension.index(ofCapitalizedLetters, in: extension)\n  if\
    \ index == nil {\n    // No match found\n    return class_name;\n  }\n  let extension_name\
    \ = extension[index!..<extension.endIndex!]\n  var class_components = class_name.components(separatedBy:\
    \ \".\");\n  if class_components.count == 3 {\n    // No need to check class_components[2]\n\
    \    class_components[class_components.count-2] = extension_name\n  } else {\n\
    \    class_components.append(extension_name)\n  }\n  return class_components.joined(separator:\
    \ \".\")", "    // Base case\n    if extensions.isEmpty() {\n        return class_name\n\
    \    }\n    // Sort by strength \n    let sorted = extensions.sorted{ $0.count()\
    \ - $1.count() }\n    // Choose the strongest extension from the sorted array\n\
    \    var strongest_extension = \"\"\n    for extension in sorted {\n        var\
    \ remaining = class_name\n        for extension_char in extension {\n        \
    \    guard remaining[extension_char.unicodeScalars.count] == 0 else {\n      \
    \          break\n            }\n            remaining += extension_char.unicodeScalars.first!\n\
    \        }\n        strongest_extension += remaining\n    }\n    return strongest_extension",
  "    var strongest_extension = \"\"\n    for extension in extensions {\n       \
    \ let letter_count = (class_name[extension.startIndex].unicodeScalars.filter {\
    \ $0.isUppercase() }.count)\n        let letter_count2 = (class_name[extension.startIndex].unicodeScalars.filter\
    \ { $0.isLowercase() }.count)\n        let strength = Double(letter_count + letter_count2)\
    \ / 2\n        if strength > strongest_extension.characters.count {\n        \
    \    strongest_extension = class_name + \".\" + extension\n        }\n    }\n\
    \    return strongest_extension", "    // Your code here\n    return \"\"", '    return
    class_name + StrongestExtensionName(extensions, false)', "    \n    var strongest\
    \ = \"\"\n    var smallest_strength = -1\n    \n    for extension in extensions\
    \ {\n        let (extension_class, extension_name) = extension.split(\".\", maxSplit:\
    \ 2)\n        let strength = class_name.characters.filter({ $0.isUppercased()\
    \ }).count-class_name.characters.filter({ $0.isLowercased() }).count\n       \
    \ \n        if strength < smallest_strength {\n            smallest_strength =\
    \ strength\n            strongest = class_name + \".\" + extension_name\n    \
    \    }\n    }\n    \n    return strongest", "    let extensions_count = extensions.reduce(0,\
    \ combine: { (sum, e) in\n        sum + e.count\n    })\n    return class_name\
    \ + extensions[extensions_count - 1].lowercased()", '    return class_name.strongest_extension(extensions:
    extensions)', "    let extension_strength: [Int] = extensions.map { class_name.count($0.uppercased())\
    \ - class_name.count($0.lowercased()) }\n    extension_strength.sort()\n    guard\
    \ extension_strength.count > 0 else { return class_name }\n    var best_extension:\
    \ String = \"\"\n    var best_strength: Int = -1\n    for i in 0..<extension_strength.count\
    \ {\n        if extension_strength[i] > best_strength {\n            best_extension\
    \ = extensions[i]\n            best_strength = extension_strength[i]\n       \
    \ }\n    }\n    return class_name + best_extension", "    var result: String =\
    \ class_name\n    var maxValue: Int = -1\n    for e in extensions {\n        let\
    \ cap: Int = e.count\n        let sm: Int = e.lowercased().count\n        let\
    \ st: Int = cap - sm\n        if st > maxValue {\n            maxValue = st\n\
    \            result = class_name\n        }\n    }\n    return result", "    let\
    \ map = Dictionary(grouping: extensions, by: strongestExtension)\n    var extension\
    \ = \"\"\n    var max = 0\n\n    for (name, value) in map {\n        if value.count\
    \ > max {\n            extension = name\n            max = value.count\n     \
    \   }\n    }\n    return class_name + extension", "    let strongest_extension_array\
    \ = extensions.sorted { (a, b) -> (Bool) -> Bool in\n        let capa = a.components(separatedBy:\
    \ CharacterSet.uppercase)?.count\n        let capb = b.components(separatedBy:\
    \ CharacterSet.uppercase)?.count\n        if capa == capb {\n            return\
    \ a.localizedCaseInsensitiveCompare(b)! < 0\n        } else {\n            return\
    \ capa < capb\n        }\n    }\n    return class_name + strongest_extension_array![0]\
    \ + strongest_extension_array!.last!", "    var strongest = \"\"\n    for extension\
    \ in  extensions {\n        let cap = extension.count\n        let sm = extension.lowercased().count\n\
    \        let strength = cap - sm\n        if strength > strongest.count {\n  \
    \          strongest = class_name\n        }\n    }\n    return strongest", " \
    \   var maxSight = -1\n    var maxExtension = extensions[0]\n    for i in 0..<extensions.count\
    \ {\n        let extension = extensions[i]\n        let c = extension.uppercaseString.count\n\
    \        let s = extension.lowercaseString.count\n        let cap = c - s\n  \
    \      let num = cap > maxSight ? cap : maxSight\n        maxSight = maxSight\
    \ == -1 ? num : num\n        if cap == 0 {\n            return class_name+\".\"\
    +extension\n        }\n        if c == maxSight {\n            return class_name+\"\
    .\"+extension\n        }\n    }\n    return class_name+\".\"+maxExtension", " \
    \   // TODO: implement the Strongest_Extension function\n    return \"\"", "\t\
    let class_name = class_name.lowercased()\n\tlet extension_count = extensions.map\
    \ { $0.isUppercased().count }.max()!\n\tlet extension_sum = extensions.map { $0.isUppercased().count\
    \ }.sum()\n\t\n\tif extension_count == 0 {\n\t\treturn class_name.lowercased()\n\
    \t}\n\t\n\tif extension_count < extension_sum {\n\t\treturn class_name.lowercased()\n\
    \t}\n\t\n\tlet extension_strength = extension_count - extension_sum\n\t\n\treturn\
    \ class_name.lowercased() + \".\" + extension_strength.description.lowercased()",
  "    var strongest = \"\"\n    var strongest_strength = Int64(0)\n    var new_class_name\
    \ = \"\"\n    \n    for extension in extensions {\n        let class_name_length\
    \ = class_name.count + 1\n        let extension_length = extension.count + 1\n\
    \        let length = class_name_length + extension_length\n        let extension_letter\
    \ = extension[extension_length - 1]\n        let class_letter_count = class_name.characters.filter({\
    \ $0 == extension_letter }).count\n        let extension_letter_count = extension.characters.filter({\
    \ $0 == extension_letter }).count\n        let extension_strength = class_letter_count-extension_letter_count\n\
    \        \n        if (extension_strength < strongest_strength) {\n          \
    \  strongest_strength = extension_strength\n            strongest = extension\n\
    \        }\n    }\n    new_class_name = class_name + \".\" + strongest\n    \n\
    \    return new_class_name", '    return StrongestExtension(class_name, extensions).name',
  "    var total_strength = 0\n    for extension in extensions {\n        total_strength\
    \ = total_strength + extension.count\n    }\n    let strength = total_strength\
    \ - class_name.count\n    return class_name + extensions[extensions.index(extensions.firstIndex(of:\
    \ class_name.lowercased())!)]", "    let max: Int\n    if class_name.characters.count\
    \ == 0 {\n        print(\"Bad class name\")\n        return \"\"\n    }\n    let\
    \ class_name = class_name.characters.reduce(\"\") { $0 + $1.capitalized() }\n\
    \    max = -1\n    let max_extensions = extensions.reduce([]) { (max, _) -> Int\
    \ in\n        let class_name_with_max_char = $0 + $1.characters.reduce(\"\") {\
    \ $0 + $1.capitalized() }\n        var counter = class_name.characters.count\n\
    \        let class_name_with_max_char = class_name_with_max_char.characters.reduce(\"\
    \") { $0 + $1.capitalized() }\n        if class_name_with_max_char != class_name\
    \ {\n            counter = class_name.characters.count\n        }\n        if\
    \ class_name_with_max_char == class_name {\n            counter = counter + 1\n\
    \        }\n        if counter == max {\n            max = counter\n        }\n\
    \        return max\n    }\n    var strongest_extension = \"\"\n    for i in 0..<max_extensions\
    \ {\n        let s = extensions[max_extensions - i - 1]\n        let strength\
    \ = class_name.characters.count - s.characters.count\n        if strength >= max\
    \ {\n            strongest_extension = s\n            max = strength\n       \
    \ }\n    }\n    return class_name + \".\" + strongest_extension", "    // Your\
    \ code goes here\n    // return \"\"", "    var max_strength = -1\n    var max_name\
    \ = \"\"\n    for extension in extensions {\n        if class_name.hasPrefix(extension)\
    \ {\n            let strength = extension.distance(to: class_name)\n         \
    \   if strength > max_strength {\n                max_strength = strength\n  \
    \              max_name = extension\n            }\n        }\n    }\n    return\
    \ class_name + max_name", "    var sorted_extensions = extensions\n    let sorted_extensions_array\
    \ = sorted_extensions.sorted()\n    var strongest_extension: String?\n    for\
    \ extension in sorted_extensions_array {\n        if class_name.hasSuffix(extension)\
    \ {\n            strongest_extension = class_name + extension\n        }\n   \
    \ }\n    if let strongest_extension = strongest_extension {\n        return strongest_extension\n\
    \    }\n    for extension in sorted_extensions_array {\n        if class_name.hasPrefix(extension)\
    \ {\n            strongest_extension = class_name + extension\n        }\n   \
    \ }\n    return strongest_extension", "    var index = 0\n    var min_strength\
    \ = Int64(0)\n    var strongest_ext = \"\"\n\n    for (i, e) in extensions.enumerated()\
    \ {\n        let class_name = class_name + \"_\" + e\n        let strength = class_class_dict[class_name]\n\
    \n        if strength == nil {\n            return class_name\n        }\n\n \
    \       if strength! < min_strength {\n            min_strength = strength!\n\
    \            index = 0\n            strongest_ext = class_name\n        }\n  \
    \  }\n\n    if min_strength == 0 {\n        return class_name\n    }\n\n    if\
    \ min_strength > 0 {\n        return strongest_ext\n    }\n\n    return class_name",
  "    var strength: Int = -1\n    for extension in extensions {\n        strength\
    \ = extension.characters.count - extension.lowercased().characters.count\n   \
    \     if strength > strength {\n            return class_name + \".\" + extension\n\
    \        }\n    }\n    return class_name + \".\" + extensions[0]", "    var max_len\
    \ = -1\n    var max_extension = \"\"\n    for extension in extensions {\n    \
    \    let len = extension.characters.count\n        if len > max_len {\n      \
    \      max_extension = extension\n            max_len = len\n        }\n    }\n\
    \n    return class_name + max_extension", "    let mut sorted_extensions = extensions.iter().cloned().sorted()\n\
    \    \n    let first_extension = sorted_extensions.next()\n    let first_extension_upper\
    \ = first_extension.uppercased()\n    let first_extension_len = first_extension.count\n\
    \    \n    // The length of the current extension minus the length of the first\
    \ extension\n    // that comes after it\n    let strongest = first_extension_len\
    \ - sorted_extensions.next().count\n    \n    let mut current_extension = first_extension\n\
    \    for i in 1..=strongest {\n        let current_extension_upper = current_extension.uppercased()\n\
    \        let current_extension_len = current_extension.count\n        \n     \
    \   let sorted_extension = sorted_extensions.next()\n        let sorted_extension_upper\
    \ = sorted_extension.uppercased()\n        let sorted_extension_len = sorted_extension.count\n\
    \        \n        if current_extension_len > sorted_extension_len {\n       \
    \     current_extension = sorted_extension\n        } else {\n            current_extension\
    \ = first_extension\n        }\n    }\n    \n    return class_name + \".\" + current_extension",
  "    // Your code here\n    var result = \"\"\n    for extension in extensions {\n\
    \        if extension.hasPrefix(class_name.lowercased()) {\n            let lowercase_class_name\
    \ = extension.lowercased().prefix(class_name.lowercased().count)\n           \
    \ let char_length = lowercase_class_name.count\n            let cap_minus = char_length\
    \ - SM\n            let strength = CAP - cap_minus\n            if strength >\
    \ 0 {\n                result = class_name + extension.lowercased() + extension.suffix(char_length)\n\
    \            }\n        }\n    }\n    return result", "    // Your code here\n\
    \    guard extensions.count > 0 else {\n        return class_name\n    }\n   \
    \ let extensions_sorted = extensions.sorted()\n    var strength = -1\n    var\
    \ extension = \"\"\n    for extension in extensions_sorted {\n        let cap\
    \ = extension.count\n        let sm = class_name.lowercased().count\n        guard\
    \ cap >= sm else {\n            continue\n        }\n        strength = cap -\
    \ sm\n    }\n    \n    if strength != -1 {\n        return class_name.stringByAppendingFormat(\"\
    .%@\", extensions_sorted[0])\n    } else {\n        return class_name\n    }",
  "    \n    // your code here\n    if let class_count = class_name.characters.count\
    \ {\n        let class_name_lowercased = class_name.lowercased()\n        let\
    \ class_count = class_name_lowercased.characters.count\n        let extension_count\
    \ = extensions.count\n        let max_count = class_count - extension_count\n\
    \        let max_index = class_name_lowercased.index(class_name_lowercased.startIndex,\
    \ offsetBy: max_count) ?? class_name_lowercased.endIndex\n        let max_char\
    \ = class_name_lowercased[max_index]\n        var strongest_extension = \"\"\n\
    \        for ext in extensions {\n            let ext_lowercased = ext.lowercased()\n\
    \            let ext_count = ext_lowercased.characters.count\n            let\
    \ ext_count = ext_count - class_count\n            let ext_index = ext_lowercased.index(ext_lowercased.startIndex,\
    \ offsetBy: ext_count) ?? ext_lowercased.endIndex\n            let ext_char =\
    \ ext_lowercased[ext_index]\n            let strength = ext_char.distance(from:\
    \ max_char)\n            if strength > 0 {\n                strongest_extension\
    \ += ext\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    } else {\n        return class_name\n    }", "    var strongest_extension\
    \ = \"\"\n    for extension in extensions {\n        let CAP = extension.count\n\
    \        let SM = class_name.count\n        let strength = Double(CAP - SM) /\
    \ CAP\n        if strength > 0 {\n            if strongest_extension.characters.count\
    \ < 1 {\n                strongest_extension = extension\n            }\n    \
    \        else if (strength > Double(strongest_extension.characters.count)) {\n\
    \                strongest_extension = extension\n            }\n        }\n \
    \   }\n    return class_name + strongest_extension", "    guard extensions.count\
    \ > 0 else {\n        return class_name\n    }\n    var class_name_with_extension\
    \ = class_name\n    \n    if let first_extension = extensions.first {\n      \
    \  let first_extension_length = first_extension.count\n        \n        if first_extension_length\
    \ == 1 {\n            return class_name_with_extension + \".\" + first_extension\n\
    \        }\n        \n        let first_extension_without_lowercase = first_extension.lowercased()\n\
    \        let first_extension_without_caps_lowercase = first_extension_without_lowercase.capitalized\n\
    \        \n        var extensions_without_lowercase = extensions\n        extensions_without_lowercase.remove(at:\
    \ 0)\n        \n        if extensions.contains(first_extension_without_lowercase)\
    \ {\n            if extensions.contains(first_extension_without_caps_lowercase)\
    \ {\n                class_name_with_extension += \".\" + first_extension_without_lowercase\n\
    \            } else if extensions.contains(first_extension_without_lowercase +\
    \ String(\"-Capitalized\")) {\n                class_name_with_extension += \"\
    .\" + first_extension_without_caps_lowercase\n            }\n        }\n     \
    \   \n        if extensions.count > 1 {\n            let max_extension_strength\
    \ = extensions[0].count(of: first_extension_without_lowercase + String(\"-Capitalized\"\
    ))\n            \n            for i in 1..<extensions.count {\n              \
    \  let extension_strength = extensions[i].count(of: first_extension_without_lowercase\
    \ + String(\"-Capitalized\"))\n                \n                if extension_strength\
    \ > max_extension_strength {\n                    max_extension_strength = extension_strength\n\
    \                    class_name_with_extension = class_name + \".\" + extensions[i]\n\
    \                }\n            }\n        }\n    }\n    \n    return class_name_with_extension",
  '    return extensions[extensions.reduce(0, {$0 + $1.length}) - class_name.count]',
  "    // Convert all letters to lowercase.\n    var class_name_lowercase = class_name.lowercased()\n\
    \n    // Initialize a dictionary to hold the strength of each extension.\n   \
    \ var strengths = Dictionary<String, Int>()\n\n    // Find the strongest extension\
    \ by looping through all extensions, \n    // updating the dictionary for strongest\
    \ extension name as we go.\n    for extension in extensions {\n        // Find\
    \ the number of uppercase letters in the extension.\n        let uppercase_cap\
    \ = class_name_lowercase.countUpToCharacter(character: .uppercase)\n\n       \
    \ // Find the number of lowercase letters in the extension.\n        let lowercase_lower\
    \ = class_name_lowercase.countUpToCharacter(character: .lowercase)\n\n       \
    \ // Update the strength dictionary. \n        strengths[extension] = uppercase_cap\
    \ - lowercase_lower\n    }\n\n    // Find the strongest extension by looping through\
    \ all extensions, \n    // updating the dictionary for strongest extension name\
    \ as we go.\n    for (extension, strength) in strengths {\n        if strength\
    \ == 0 {\n            // If no extensions have the same strength, return whatever\
    \ was passed in.\n            return class_name\n        }\n    }\n\n    // If\
    \ the dictionary is empty, return the original name.\n    return class_name",
  "\tvar strongest_extension: String = \"Class\" // default return value\n\t\n\tlet\
    \ classes: Set<String> = [class_name]\n\tclasses.insert(class_name)\n\t\n\tfor\
    \ (index, value) in extension.enumerate() {\n\t\tlet length = extension.count\n\
    \t\tif classes[index] != value {\n\t\t\tbreak\n\t\t}\n\t\t\n\t\tif length == 0\
    \ {\n\t\t\tbreak\n\t\t}\n\t\t\n\t\tlet cap = extension.first?.uppercaseString.count\n\
    \t\tlet sm = extension.first?.lowercaseString.count\n\t\t\n\t\tif cap - sm > strongest_extension.count\
    \ {\n\t\t\tstrongest_extension = value + strongest_extension\n\t\t}\n\t}\n\t\n\
    \treturn strongest_extension", "    var className = class_name\n    var extensions\
    \ = extensions\n    \n    for extension in extensions {\n        var classCount\
    \ = 0\n        var extensionCount = 0\n        \n        for c in extension {\n\
    \            classCount += Int(unicodeScalars.contains[c])\n            extensionCount\
    \ += 1\n        }\n        \n        var strength = classCount - extensionCount\n\
    \        \n        if strength > 0 {\n            break\n        }\n    }\n  \
    \  \n    return className + \".\" + extensions.sorted()[extensions.count - 1]",
  "    // Add your code here\n    var max_strength = -1\n    var best_extension =\
    \ \"\"\n    for extension in extensions {\n        var strongest = (class_name\
    \ + extension).characters.count\n        for character in extension {\n      \
    \      var index = class_name.characters.index(of: character)\n            var\
    \ new_strongest = strongest*10 + index\n            if new_strongest > max_strength\
    \ {\n                max_strength = new_strongest\n                best_extension\
    \ = extension\n            }\n        }\n    }\n    return class_name + best_extension",
  "    var strongest_extension: String = class_name\n\n    for i in 0..<extensions.count\
    \ {\n        let class_extension: String = extensions[i]\n        let class_extension_lower:\
    \ String = class_extension.lowercased()\n        let class_extension_upper: String\
    \ = class_extension_lower.uppercased()\n        let class_extension_length_difference:\
    \ Int = class_extension_lower.count - class_extension_upper.count\n        let\
    \ class_extension_strength: Int = class_extension_length_difference / class_extension_lower.count\n\
    \n        if class_extension_strength > strongest_extension.countByWord().maxElement()!\
    \ {\n            strongest_extension = class_extension\n        }\n    }\n\n \
    \   return strongest_extension", '    return class_name.hashValue + "$" + extensions[0].hashValue',
  "    var best_extension: String = \"\"\n    var best_extension_score: Int = -1\n\
    \    for extension in extensions {\n        let score = Extension_Strongest(class_name:\
    \ class_name, extension: extension)\n        if score > best_extension_score {\n\
    \            best_extension = extension\n            best_extension_score = score\n\
    \        }\n    }\n    return best_extension", "    var extensions_arr = extensions\n\
    \    // Convert each element in the array to a lowercase string\n    for extension\
    \ in extensions_arr {\n        extensions_arr.insert(extension.lowercaseString,\
    \ at: 0)\n    }\n    \n    // Sort the extensions by their strength\n    extensions_arr.sort\
    \ { $0.first! - $1.first! }\n    \n    // Return the first extension in the array\n\
    \    return class_name.components(separatedBy: \".\")[0] + \".\" + extensions_arr[0].first!",
  '    return class_name.components(separatedBy: ".").joinWithSeparator(extensions)',
  "    return classes.filter({class_name.contains(\"\\(extensions[0])\")}).sorted(by:\
    \ { (a,b) -> Bool in\n        var c = a.lowercased().compare(b.lowercased())\n\
    \        if c != .orderedAscending {\n            return c < 0\n        } else\
    \ {\n            return a.characters.count - b.characters.count > 1\n        }\n\
    \    }).first!", "    let strongest_extension = extensions[0]\n    for (i, extension)\
    \ in enumerate(extensions) {\n        if extension == strongest_extension {\n\
    \            continue\n        }\n        let cap = extension.count\n        let\
    \ sm = strongest_extension.count\n        let strength = cap - sm\n        if\
    \ strength > 0 {\n            strongest_extension = extension\n        }\n   \
    \ }\n    return class_name + \".\" + strongest_extension", '    return ""', " \
    \   var max_extension: Int = 0\n    var max_extension_str = \"\"\n\n    for extension\
    \ in extensions {\n        let extension_str_len = extension.characters.count\n\
    \n        if extension_str_len > max_extension {\n            max_extension =\
    \ extension_str_len\n            max_extension_str = extension\n        }\n  \
    \  }\n\n    if max_extension == 0 {\n        return class_name\n    }\n\n    var\
    \ extension_str = \"\"\n\n    for extension in extensions {\n        let extension_str_len\
    \ = extension.characters.count\n        if extension_str_len == max_extension\
    \ {\n            extension_str += extension\n        }\n    }\n\n    return \"\
    \\(class_name)\\(strongest_extension_str)\"", "    // COMPLETED\n    if extensions.isEmpty()\
    \ {\n        return class_name\n    } else {\n        extension =  extensions[0]\n\
    \        extension =  extension.lowercased()\n        var class_name = class_name.lowercased()\n\
    \        for i in 1...extensions.count {\n            if class_name.hasPrefix(extension)\
    \ {\n                class_name = class_name.replaceFirst(extension, \"\")\n \
    \           }\n        }\n        return class_name + extension\n    }", "   \
    \ if extensions.isEmpty() {\n        return class_name\n    }\n    \n    // Initialize\
    \ counters\n    var counters = extensions[0].characters.map { UInt8(String($0))\
    \ }\n    \n    // Count number of different letters\n    for extension in extensions\
    \ {\n        // Count number of different letters\n        for char in extension.characters\
    \ {\n            guard counters[char] == nil else { counters[char] = counters[char]\
    \ + 1 }\n        }\n    }\n    \n    // Find max extension strength\n    let max_strength\
    \ = counters.compactMap { $0 }\n                          .max()\n    \n    //\
    \ Find extension with the highest strength\n    let extension = counters.map {\
    \ String($0) }\n                            .filter { $0 == max_strength }\n \
    \                           .sorted(by: { $0.count < $1.count })\n           \
    \                 .first\n    \n    return class_name + extension", "   var new_extension\
    \ = extensions.sort()\n   var result = \"\"\n   new_extension = extensions.sort()\n\
    \   let firstLetter = new_extension[0]\n   let lastLetter = new_extension.last!\n\
    \   let letterCount = firstLetter.toString.characters.count - lastLetter.toString.characters.count\n\
    \   let strength = letterCount / new_extension.count\n   let strongest = new_extension.first(where:\
    \ {$0 > strength})\n   result = class_name + \".\" + strongest\n   return result",
  "    return class_name + \".\" + extensions[extensions.reduce(0) { acc, elem in\n\
    \        if elem[elem.startIndex.advancedBy(1)].uppercased() != elem[elem.startIndex.advancedBy(2)].lowercased()\
    \ {\n            return 1\n        }\n        return acc\n    }]", "  let arr\
    \ = extensions.sorted()\n  if arr.count > 1 {\n    return class_name + \".\" +\
    \ extensions[arr.count - 2]\n  }\n  return class_name + \".\" + extensions[0]",
  "    \n    return class_name + \".\" + extensions[extensions.reduce((0, 0), (max:\
    \ Int.max, min: 0)) { $0.1.compare($1.1) }].sorted()", "    var max: Int = 0\n\
    \    var best: String = \"\"\n    for e in extensions {\n        let score = Extension_Strength(class_name:\
    \ class_name, extension_name: e)\n        if score > max {\n            max =\
    \ score\n            best = e\n        }\n    }\n    return best", "    if extensions.count\
    \ == 0 {\n        print(\"No extensions supplied\")\n        return \"\"\n   \
    \ }\n    var strongest_extension: String = \"\"\n    var strength = -1\n    var\
    \ number_of_uppercase = 0\n    var number_of_lowercase = 0\n    var number_of_class_name_uppercase\
    \ = 0\n    var number_of_class_name_lowercase = 0\n    var number_of_extension_uppercase\
    \ = 0\n    var number_of_extension_lowercase = 0\n    \n    for extension in extensions\
    \ {\n        let lowercaseExtension = extension.lowercaseString\n        let uppercaseExtension\
    \ = extension.uppercaseString\n        if lowercaseExtension == extension {\n\
    \            number_of_extension_lowercase++\n        } else if uppercaseExtension\
    \ == extension {\n            number_of_extension_uppercase++\n        } else\
    \ {\n            strength = -1\n            if extension.hasPrefix(class_name)\
    \ {\n                number_of_class_name_lowercase++\n            } else {\n\
    \                number_of_class_name_uppercase++\n            }\n        }\n\
    \    }\n    \n    for extension in extensions {\n        if extension.hasPrefix(class_name)\
    \ {\n            number_of_uppercase++\n        } else {\n            number_of_lowercase++\n\
    \        }\n    }\n    \n    if number_of_class_name_uppercase > number_of_uppercase\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0]\n      \
    \  \n        if number_of_extension_lowercase > number_of_lowercase {\n      \
    \      strongest_extension = strongest_extension.lowercaseString\n           \
    \ \n            if number_of_extension_uppercase > number_of_uppercase {\n   \
    \             strongest_extension = strongest_extension.uppercaseString\n    \
    \        }\n        }\n    }\n    \n    if number_of_class_name_lowercase > number_of_lowercase\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0]\n      \
    \  \n        if number_of_extension_uppercase > number_of_uppercase {\n      \
    \      strongest_extension = strongest_extension.uppercaseString\n        }\n\
    \    }\n    \n    if number_of_class_name_uppercase > number_of_uppercase {\n\
    \        strongest_extension = class_name + \".\" + extensions[0]\n        \n\
    \        if number_of_extension_lowercase > number_of_lowercase {\n          \
    \  strongest_extension = strongest_extension.lowercaseString\n        }\n    }\n\
    \    \n    return strongest_extension", "  let class_name_lower_case: String =\
    \ class_name.lowercased()\n  var classes = [class_name_lower_case]\n  var extensions_lower_case:\
    \ [String] = []\n  var extensions_name: [String] = []\n  extensions.forEach {\
    \ extension in\n    extension.lowercased() { extension in\n      if extensions_lower_case.contains(extension)\
    \ {\n        extensions_lowercase.append(extension)\n        extensions_name.append(extension)\n\
    \      } else {\n        extensions_lower_case.append(extension)\n        extensions_lower_case.append(extension)\n\
    \        extensions_name.append(extension)\n      }\n    }\n  }\n  let class_index\
    \ = classes.index(class_name_lower_case)\n  var strongest_extension = \"\"\n \
    \ var max_strength = -1\n  if class_index > 0 {\n    var prev_extension = extensions_lower_case[class_index-1]\n\
    \    for extension in extensions_lower_case {\n      if extension != prev_extension\
    \ {\n        let cap_strength = extension.characters.count\n        let sm_strength\
    \ = extension.lowercased().characters.count\n        let str_strength = cap_strength\
    \ - sm_strength\n        if str_strength > max_strength {\n          max_strength\
    \ = str_strength\n          strongest_extension = extension\n        }\n     \
    \ }\n      prev_extension = extension\n    }\n  }\n  return class_name + strongest_extension",
  "    var bestExtension = \"\"\n    var bestExtensionStrength = -1\n    var bestExtensionLower\
    \ = 0\n    var bestExtensionUpper = 0\n    for i in 0..<extensions.count {\n \
    \       var extension = extensions[i]\n        extension = extension.lowercased()\n\
    \        let extensionUpper = extension.unicodeScalars.filter{$0.isUpper}.count\n\
    \        let extensionLower = extension.unicodeScalars.filter{$0.isLower}.count\n\
    \        var strength = extensionUpper - extensionLower\n        if strength >\
    \ bestExtensionStrength {\n            bestExtensionStrength = strength\n    \
    \        bestExtension = extension\n            bestExtensionUpper = extensionUpper\n\
    \            bestExtensionLower = extensionLower\n        }\n    }\n    if bestExtensionStrength\
    \ == -1 {\n        return class_name\n    }\n    if bestExtensionStrength == 0\
    \ {\n        return bestExtension\n    }\n    if bestExtensionUpper == 0 {\n \
    \       return class_name + bestExtension\n    }\n    if bestExtensionUpper ==\
    \ 1 {\n        return class_name + bestExtension.lowercased() + bestExtension\n\
    \    }\n    return class_name + bestExtension.lowercased() + bestExtension.uppercased()\
    \ + bestExtension", "    var strongest_extension = \"\"\n\n    for extension in\
    \ extensions {\n        var split_str = extension.components(separatedBy: \".\"\
    )\n        if split_str[0] == class_name {\n            let index = extensions.firstIndex(of:\
    \ extension)\n            let strength = extension.split(separator: \".\").count\
    \ - split_str.count - 1\n            if strength >= strongest_extension.count\
    \ {\n                strongest_extension = extension\n            }\n        }\n\
    \    }\n\n    return strongest_extension", "    // write your code in Python without\
    \ using 'map'\n    // use map() method to find extension with strongest strength\n\
    \    return class_name.lowercased().components(separatedBy: \".\").map({ $0.uppercased()\
    \ }).reduce({ $0 + \".\" + $1 })", "    var className = class_name\n    var extensions\
    \ = extensions\n\n    for extension in extensions {\n        let cap = extension.count\n\
    \        let sm = extension.lowercased().count\n        let frac = cap - sm\n\n\
    \        if frac > 0 {\n            className = className + extension\n      \
    \  }\n    }\n\n    let className = className.lowercased()\n    \n    if className.hasSuffix(Extension.separator)\
    \ {\n        return \"\"\n    } else {\n        return className + Extension.separator\n\
    \    }", "    var strongest_extension: String = \"\"\n    var best_extension:\
    \ String = extensions[0]\n    for extension in extensions {\n        var extension_strength:\
    \ Int\n        if class_name.rangeOfCharacter(from: CharacterSet(charactersIn:\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").inverted) != nil {\n            extension_strength\
    \ = extension.count\n        } else {\n            extension_strength = extension.lowercased().count\n\
    \        }\n        if extension_strength > best_extension.lowercased().count\
    \ {\n            best_extension = extension\n        }\n    }\n    if class_name.rangeOfCharacter(from:\
    \ CharacterSet(charactersIn: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").inverted) != nil\
    \ {\n        strongest_extension = class_name + \".\" + best_extension\n    }\
    \ else {\n        strongest_extension = class_name + \".\" + best_extension.lowercased()\n\
    \    }\n    return strongest_extension", '  return "\(class_name).\(extensions.min())"',
  "  if extensions.isEmpty {\n    return \"\"\n  }\n  var min_strength = Int64(1)\n\
    \  var min_extension = \"\"\n  \n  for extension in extensions {\n    let letter_count\
    \ = extension.count\n    let cap_fraction = letter_count - Int(letter_count) \n\
    \    let strength = cap_fraction * (CAP - SM)\n    if strength < min_strength\
    \ {\n      min_strength = strength\n      min_extension = extension\n    }\n \
    \ }\n  return class_name + min_extension", "    var new_class_name = class_name\n\
    \    for extension in extensions {\n        let class_name_components = class_name.components(separatedBy:\
    \ \".\")\n        if class_name_components.count < 2 {\n            print(\"The\
    \ class name must be of the form <class_name>.<extension>\")\n            return\
    \ \"\"\n        } else if class_name_components.count == 2 {\n            if class_name_components[1]\
    \ != extension {\n                print(\"The extension '\\(extension)' does not\
    \ exist in the class name '\\(class_name)'\")\n                return \"\"\n \
    \           }\n        }\n\n        let extension_components = extension.components(separatedBy:\
    \ \".\")\n        if extension_components.count < 1 {\n            print(\"The\
    \ extension must be of the form <extension>.<class_name>\")\n            return\
    \ \"\"\n        } else if extension_components.count == 1 {\n            if extension_components[0]\
    \ != class_name {\n                print(\"The class name '\\(class_name)' does\
    \ not exist in the extension '\\(extension)'\")\n                return \"\"\n\
    \            }\n        }\n\n        // Check if the extension is \"longer\" than\
    \ the class\n        let class_name_components_string = class_name_components.joined(separator:\
    \ \"\")\n        let extension_components_string = extension_components.joined(separator:\
    \ \"\")\n        var strength = -1\n        if class_name_components_string.compare(extension_components_string)\
    \ == .orderedSame {\n            strength = class_name_components_string.compare(extension_components_string)\
    \ == .orderedSame ? 0 : class_name_components_string.compare(extension_components_string)\
    \ == .orderedSame ? 1 : 2\n        } else if class_name_components_string.compare(extension_components_string)\
    \ == .orderedDescending {\n            strength = class_name_components_string.compare(extension_components_string)\
    \ == .orderedDescending ? 0 : class_name_components_string.compare(extension_components_string)\
    \ == .orderedDescending ? 1 : 2\n        }\n\n        if strength > 0 {\n    \
    \        new_class_name = class_name_components[0] + \".\" + extension\n     \
    \       break\n        }\n    }\n\n    return new_class_name", '    return class_name.prefixedWith(class_name.map({
    $0.capitalizedFirstLetter() }).prefixedWith(extensions).prefixedWith(extensions).suffix(class_name.count));',
  "    var strongest_extension = \"\"\n    for extension in extensions {\n       \
    \ var strength: Int = -1\n        for char in extension.lowercased() {\n     \
    \       switch char {\n            case 'a':\n                strength += 1\n\
    \            case 'e':\n                strength += 1\n            case 'i':\n\
    \                strength += 1\n            case 'l':\n                strength\
    \ += 1\n            case 'n':\n                strength += 1\n            case\
    \ 'o':\n                strength += 1\n            case 's':\n               \
    \ strength += 1\n            case 't':\n                strength += 1\n      \
    \      default:\n                break\n            }\n        }\n        switch\
    \ strength {\n        case 1:\n            // The class name is already the strongest\
    \ extension.\n            strongest_extension = extension\n            break\n\
    \        case 2:\n            // The class name is already the strongest extension.\n\
    \            strongest_extension = extension\n            break\n        default:\n\
    \            // There are more than one extensions with the same strongest\n \
    \           // strength.\n            var first_extension_index = 1\n        \
    \    for (index, extension) in extensions.enumerated() {\n                if index\
    \ == 0 {\n                    break\n                }\n                if first_extension_index\
    \ == index {\n                    first_extension_index = index\n            \
    \        break\n                }\n            }\n            strongest_extension\
    \ = \"\\(class_name)\\(extensions[first_extension_index])\"\n        }\n    }\n\
    \    return strongest_extension", "    switch extensions.count {\n    case 0:\
    \ return \"\"\n    case 1: return class_name + \".\" + extensions[0]\n    case\
    \ 2: return class_name + \".\" + extensions[0] + \".\" + extensions[1]\n    default:\
    \ return class_name + \".\" + extensions[0] + \".\" + extensions[1] + \".\" +\
    \ extensions[2]\n    }", "    var max: String = \"\"\n    var maxIndex: Int =\
    \ 0\n    extensions.enumerated().forEach { (i, item) in\n        let str = item.lowercased()\n\
    \        let index = str.index(str.startIndex, offsetBy: 1)\n        let strength\
    \ = str.distance(from: class_name[..index])\n        if strength > maxStrength\
    \ {\n            max = item\n            maxIndex = i\n        }\n    }\n    return\
    \ class_name + max", "    var strongest_extension = \"\"\n    var strongest_extension_strength\
    \ = -1\n    for extension in extensions {\n        let (first, second) = extension.split(separator:\
    \ \".\").map(String.init)\n        if first.firstUpper() == second.firstUpper()\
    \ {\n            let cap_diff = first.firstUpper().count - second.firstUpper().count\n\
    \            let sm_diff = first.firstUpper().count - second.firstLower().count\n\
    \            if cap_diff > sm_diff {\n                strongest_extension = extension\n\
    \                strongest_extension_strength = cap_diff\n            }\n    \
    \    }\n    }\n    if strongest_extension_strength != -1 {\n        if strongest_extension_strength\
    \ > strongest_extension.count{\n            return class_name.stringByAppendingString(strongest_extension)\n\
    \        }\n        return class_name.stringByAppendingString(strongest_extension.prefix(strongest_extension_strength))\n\
    \    }\n    return class_name", "    return class_name + extensions[0].capitalized\
    \ +\n        extensions.dropFirst().map { $0.capitalized }.joined(separator: \"\
    \")", "    extension extension { return extension }\n\n    var classStrong: Character\n\
    \    var classStrongScore: Int\n    var classStrongCount: Int\n    let classStr\
    \ = String(class_name)\n\n    var classExtension = \"\"\n    var classExtensionScore:\
    \ Int\n    var classExtensionCount: Int\n\n    extension.strongestStrength = -1\
    \ // set all to -1 to be first in array by default\n\n    for extension in extensions\
    \ {\n        let extensionLetter = String(extension)\n        guard let letter\
    \ = extensionLetter.first?.lowercased() else {\n            continue\n       \
    \ }\n        let letterIndex = class_name.lowercased().characters.index(of: letter)\n\
    \        let index = (letterIndex?.advanced(by: 1))!\n\n        guard letter !=\
    \ className[0] else {\n            // If the letter at index is not the first\
    \ letter of class_name, \n            // we move to the next letter\n        \
    \    continue\n        }\n\n        classStrong = letter\n        classStrongScore\
    \ = index\n        classStrongCount += 1\n\n        if index != 0 {\n        \
    \    classExtension = className[index - 1]\n            classExtensionScore =\
    \ index\n            classExtensionCount += 1\n        }\n\n        if classStrongScore\
    \ > extension.strongestStrength {\n            extension.strongestStrength = classStrongScore\n\
    \            extension.strongestStrengthIndex = classStrongCount\n           \
    \ extension.strongestExtension = classExtension\n            extension.strongestExtensionScore\
    \ = classExtensionScore\n            extension.strongestExtensionCount = classExtensionCount\n\
    \        }\n    }\n\n    if classStrongCount == 0 { return class_name }\n\n  \
    \  // Sort extensions by strength\n    extension.sort { $0.strongestStrengthIndex\
    \ < $1.strongestStrengthIndex }\n\n    // Pick first extension from sorted list\n\
    \    guard extension.count > 0 else {\n        return class_name\n    }\n    extension.first!.strongestStrengthIndex\
    \ == 0 ?\n        class_name + extension.first!.strongestExtension : class_name",
  '    return class_name + StrongestExtension(class_name: class_name, extensions:
    extensions)', "    let sortedExtensions = extensions.sorted()\n    \n    return\
    \ class_name.components(separatedBy: \".\").last +\n           \".\" + sortedExtensions.first!",
  "    // Your code here\n    \n    return class_name + StrongestExtensionName(extensions)",
  '    return class_name + Extension_Name(extensions: extensions) + Strength(class_name:
    class_name, extensions: extensions)', "    // code here\n    var StrongestExtension\
    \ = \"\"\n    for index in 0..<extensions.count {\n        var Extension = extensions[index]\n\
    \        var indexCap = StrongestExtension.count\n        var indexSM = Extension.count\n\
    \        var Strongest = CAP - SM\n        if indexCap > indexSM {\n         \
    \   indexCap = indexSM\n        }\n        if CAP - indexCap > indexSM - indexCap\
    \ {\n            indexSM = CAP - CAP\n        }\n        if indexCap < indexSM\
    \ {\n            var temp = \"\\(class_name)\\((CAP - SM - indexCap)\\)\"\n  \
    \          StrongestExtension = \"\\(class_name)\\(temp)\"\n        }\n      \
    \  if indexCap == indexSM {\n            var temp = \"\\(class_name)\\(indexCap)\\\
    (Extension)\"\n            StrongestExtension = \"\\(class_name)\\(temp)\"\n \
    \       }\n        if indexCap > indexSM {\n            var temp = \"\\(class_name)\\\
    (indexSM)\\(Extension)\"\n            StrongestExtension = \"\\(class_name)\\\
    (temp)\"\n        }\n        if indexCap < indexSM {\n            var temp = \"\
    \\(class_name)\\(indexCap)\\(Extension)\"\n            StrongestExtension = \"\
    \\(class_name)\\(StrongestExtension)\"\n        }\n    }\n    return StrongestExtension",
  '    return class_name.StrongestExtension(extensions)', "    var strongest = extensions[0]\n\
    \    for x in extensions {\n        let c = x.capitalised()\n        if c > strongest.capitalised()\
    \ {\n            strongest = x\n        }\n    }\n    return class_name + \".\"\
    \ + strongest", "    var name = class_name\n    var strength: Int = 0\n    for\
    \ extension in extensions {\n        if extension.hasPrefix(name) { \n       \
    \     var extensionWithoutPrefix: String = extension.substringFromIndex(name.characters.count)\n\
    \            if extensionWithoutPrefix.hasPrefix(name) { \n                var\
    \ extensionWithoutPrefixWithoutUppercase: String = extensionWithoutPrefix.substringFromIndex(name.characters.count-extensionWithoutPrefix.characters.count)\n\
    \                var upperCaseCount: Int = extensionWithoutPrefixWithoutUppercase.characters.count\n\
    \                var lowercaseCount: Int = extensionWithoutPrefixWithoutUppercase.characters.count\n\
    \                var upperCaseFraction: Double = Double(upperCaseCount) / Double(name.characters.count)\n\
    \                var lowercaseFraction: Double = Double(lowercaseCount) / Double(name.characters.count)\n\
    \                var strengthFraction: Double = Double(upperCaseCount - lowercaseCount)\
    \ / Double(name.characters.count)\n                if strengthFraction > strength\
    \ {\n                    name = extensionWithoutPrefix\n                    strength\
    \ = strengthFraction\n                }\n                if strengthFraction ==\
    \ strength {\n                    if upperCaseFraction < lowerCaseFraction {\n\
    \                        name = extensionWithoutPrefix\n                     \
    \   strength = upperCaseFraction\n                    } else if upperCaseFraction\
    \ == lowerCaseFraction {\n                        if lowerCaseFraction > 0.9999\
    \ {\n                            name = extensionWithoutPrefix\n             \
    \               strength = lowerCaseFraction\n                        }\n    \
    \                }\n                }\n            }\n        }\n    }\n    return\
    \ name + extensions[extensions.index(extension)!]", "    // Complete this function\n\
    \    // This solution is in O(n) time.\n    var strongest_extension: String =\
    \ class_name;\n    for extension in extensions {\n        if strongest_extension.hasPrefix(extension.lowercased())\
    \ {\n            var num_letters: Int = class_name.countOfCharacters\n       \
    \     var num_letters_after: Int = strongest_extension.countOfCharacters\n   \
    \         var strength: Int;\n            if num_letters_after > num_letters {\n\
    \                strength = num_letters_after - num_letters\n            } else\
    \ {\n                strength = num_letters - num_letters_after\n            }\n\
    \            var strength_extension: Int = -1\n            for letter in extension.lowercased()\
    \ {\n                if letter != letter {\n                    strength_extension\
    \ = letter - strength\n                    num_letters_after = num_letters_after\
    \ - letter\n                    num_letters = num_letters - letter\n         \
    \       } else {\n                    break\n                }\n            }\n\
    \            if strength_extension >= 0 {\n                if strength_extension\
    \ > strength {\n                    strongest_extension = class_name + extension\n\
    \                } else {\n                    strongest_extension = class_name\
    \ + extension.substringFromIndex(0) + (String(strength_extension)) + extension.substringFromIndex(strength)\n\
    \                }\n            }\n        }\n    }\n    return strongest_extension;",
  '    return class_name+"."+extensions[extensions.index(extensions.reduce(0,{$0 +
    $1.characters.reduce(0,{$0 + $1 })})/extensions.count)]', "    let len = class_name.count\n\
    \    var strongest = \"\"\n    for _ in 0..<extensions.count {\n        let index\
    \ = extensions[_].lowercased().characters.count\n        let fraction = len -\
    \ index\n        let s = Double(fraction) / Double(len)\n        if s == 0.0 {\n\
    \            return class_name + \".\" + extensions[_]\n        }\n        if\
    \ s < strongest.characters.count {\n            strongest = class_name + \".\"\
    \ + extensions[_]\n        }\n    }\n    return strongest", '  return "\(class_name).\(extensions.sorted(by:
    {$0.first! < $1.first!}).map({ $0.last! }).sorted().first!)"', "\t\n\tvar max_strongest_extension\
    \ = \"\"\n\tfor extension in extensions {\n\t\tlet class_name_with_extension =\
    \ class_name + extension\n\t\tif let class_name_with_extension_ = NSClassFromString(class_name_with_extension)\
    \ {\n\t\t\tlet classWithMethod = class_name_with_extension_\n\t\t\t//\tprint(\"\
    classWithMethod: \\(classWithMethod)\")\n\t\t\tlet class_methods = classWithMethod.methodNamed(class_name_with_extension)\n\
    \t\t\t//\tprint(\"class_methods: \\(class_methods)\")\n\t\t\t\n\t\t\tif class_methods.count\
    \ == 0 { //\tprint(\"no methods for \\(class_name_with_extension)\")\n\t\t\t\t\
    \n\t\t\t} else { //\tprint(\"found \\(class_name_with_extension): \\(class_methods)\"\
    )\n\t\t\t\tfor method in class_methods {\n\t\t\t\t\tlet method_without_extension\
    \ = method.substring(with: class_name_with_extension.count)\n\t\t\t\t\t//\tprint(\"\
    method_without_extension: \\(method_without_extension)\")\n\t\t\t\t\tlet method_without_extension_uppercase\
    \ =  method_without_extension.uppercased()\n\t\t\t\t\t//\tprint(\"method_without_extension_uppercase:\
    \ \\(method_without_extension_uppercase)\")\n\t\t\t\t\tlet method_without_extension_lowercase\
    \ =  method_without_extension_uppercase.lowercased()\n\t\t\t\t\t//\tprint(\"method_without_extension_lowercase:\
    \ \\(method_without_extension_lowercase)\")\n\t\t\t\t\tlet method_with_extension\
    \ = method_without_extension_lowercase + extension\n\t\t\t\t\t//\tprint(\"method_with_extension:\
    \ \\(method_with_extension)\")\n\t\t\t\t\tlet class_name_without_extension = class_name_with_extension.substring(with:\
    \ class_name_with_extension.index(of: method_without_extension_lowercase))\n\t\
    \t\t\t\t//\tprint(\"class_name_without_extension: \\(class_name_without_extension)\"\
    )\n\t\t\t\t\tlet strength = class_name_without_extension.count - method_without_extension.count\n\
    \t\t\t\t\t//\tprint(\"strength: \\(strength)\")\n\t\t\t\t\tif strength > 0 {\n\
    \t\t\t\t\t\tif strength > max_strongest_extension.count {\n\t\t\t\t\t\t\tmax_strongest_extension\
    \ = class_name_without_extension\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\t\n\t//\tprint(\"max_strongest_extension: \\(max_strongest_extension)\"\
    )\n\treturn max_strongest_extension", "    var ext = \"\"\n    for x in extensions\
    \ {\n        ext += class_name + \".\" + x + \"\\n\"\n    }\n    \n    ext = \"\
    import \" + String(ext.characters.reversed())\n    let strongest_extension = ext.components(separatedBy:\
    \ \"\\n\").maxElement()\n    \n    return class_name + \".\" + strongest_extension",
  "    var max = 0\n    for extension in extensions {\n        var value = extension.lowercased()\n\
    \        for char in value {\n            if char.isUpper() {\n              \
    \  value -= char.lowercased()\n            } else {\n                break\n \
    \           }\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    if max == 0 {\n        return class_name\n    }\n    var\
    \ strongest_extension = \"\"\n    for extension in extensions {\n        var value\
    \ = extension.lowercased()\n        for char in value {\n            if char.isUpper()\
    \ {\n                value -= char.lowercased()\n            } else {\n      \
    \          break\n            }\n        }\n        if value > max {\n       \
    \     strongest_extension = extension\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension", "    \n    // Your code goes here\n    \n  \
    \  return \"\"", "    // Only positive extensions allowed\n    let valid_extensions\
    \ = extensions.filter({ $0.count > 0 }).map({ $0.lowercased() })\n    var strongest\
    \ = \"\"\n    let capacity = valid_extensions.count\n    let sma = valid_extensions.map({\
    \ $0.count })\n    let sm = valid_extensions.map({ $0.lowercased() })\n    var\
    \ i = 0\n    var max_str_length = Int(math.max(sm))\n    for extension in valid_extensions\
    \ {\n        let extension_length = extension.count\n        if extension_length\
    \ > max_str_length {\n            max_str_length = extension_length\n        }\n\
    \    }\n    while strongest.isEmpty && i < max_str_length {\n        let j = 0\n\
    \        for extension in valid_extensions {\n            let extension_length\
    \ = extension.count\n            if j > i {\n                if cap(j - i) >=\
    \ cap(sma[i] - sm[j]) {\n                    strongest = class_name + extension\n\
    \                    i = j\n                }\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return strongest", "    // Your code\
    \ here\n    extension := \"\"\n    for extension in extensions {\n        if extension.contains(class_name[CAP\
    \ - SM]) {\n            return class_name + extension\n        }\n    }\n    return\
    \ class_name + extensions[0]", "    // TODO: replace this implementation with\
    \ the solution provided\n    let classes = [class_name].flatMap{\n        extension.capitalization.count\
    \ - extension.lowercase\n    }\n    return classes.first", "    // Your code here\n\
    \    return \"\"", "    var strongest = \"\"\n    for extension in extensions\
    \ {\n        guard let ext = Extension(name: extension) else { continue }\n  \
    \      if ext.name == class_name {\n            continue\n        }\n        let\
    \ sm = ext.name[ext.name.startIndex.successor()...].lowercased().count\n     \
    \   let cap = ext.name[ext.name.startIndex.successor()...].uppercased().count\n\
    \        let strength = cap - sm\n        if strength == 0 {\n            continue\n\
    \        }\n        if strength > strongest.count {\n            strongest = ext.name\n\
    \        }\n    }\n    return strongest", "    let num_upper = extensions.count\
    \ { $0.first!.uppercased() == $0.first }\n    let num_lower = extensions.count\
    \ { $0.first!.lowercased() == $0.first }\n\n    let strength = (num_upper - num_lower).truncatingRemainder(dividingBy:\
    \ num_upper)\n\n    return class_name + \".\" + extensions[extensions.index(where:\
    \ { $0.first!.uppercased() == $0.first })!.first! + String(strength)]", "    let\
    \ classNames = class_name.split(separator: \".\")\n    var name: String\n    var\
    \ strength: Int\n    for (index, class) in classNames.enumerated() {\n       \
    \ name = class\n        strength = index\n    }\n    var strengths = extensions.map({\
    \ (name) -> String in\n        let letters = name.split(separator: \"-\")\n  \
    \      if letters.count == 2 {\n            return letters[0]\n        }\n   \
    \     return letters[0] + letters[1].uppercased()\n    })\n    \n    var extension\
    \ = extensions.filter({ (name) -> Bool in\n        let letters = name.split(separator:\
    \ \"-\")\n        if letters.count == 2 {\n            return letters[0] == letters[1]\n\
    \        }\n        return letters[0] == letters[1].uppercased()\n    }).first\n\
    \    \n    if let _ = extension {\n        return class_name + \".\" + extension\n\
    \    }\n    \n    if extensions.count! > strengths.count! {\n        return class_name\
    \ + \".\" + extensions.sorted()[strengths.count! - 1]\n    }\n    \n    for extension\
    \ in extensions {\n        if extensions[extensions.firstIndex(of: extension)!]\
    \ != extension {\n            if extensions[extensions.firstIndex(of: extension)!]\
    \ != extension.uppercased() {\n                return class_name + \".\" + extension\n\
    \            }\n        }\n    }\n    \n    return class_name + \".\" + extensions[strengths.count!\
    \ - 1]", "    var strongest = \"\"\n    var strength: Int64 = 0\n    for extension\
    \ in extensions {\n        extension switch {\n            case extension.lowercased()\
    \ == extension.uppercased() as String => strength = strength + 1\n           \
    \ case extension.lowercased().hasPrefix(extension.lowercased()) ? strength = strength\
    \ + 1 : strength = -1\n            case extension.lowercased().hasSuffix(extension.lowercased())\
    \ ? strength = strength + 1 : strength = -1\n            case extension.lowercased().contains(extension.lowercased())\
    \ ? strength = strength + 1 : strength = -1\n            default => strength =\
    \ -1\n        }\n        extension switch {\n            case extension.lowercased().count\
    \ == extension.lowercased().count/2 ? strength = strength + 1 : strength = -1\n\
    \            case extension.lowercased().count == extension.lowercased().count/3\
    \ ? strength = strength + 1 : strength = -1\n            case extension.lowercased().count\
    \ == extension.lowercased().count/4 ? strength = strength + 1 : strength = -1\n\
    \            case extension.lowercased().count == extension.lowercased().count/5\
    \ ? strength = strength + 1 : strength = -1\n            case extension.lowercased().count\
    \ == extension.lowercased().count/6 ? strength = strength + 1 : strength = -1\n\
    \            case extension.lowercased().count == extension.lowercased().count/7\
    \ ? strength = strength + 1 : strength = -1\n            case extension.lowercased().count\
    \ == extension.lowercased().count/8 ? strength = strength + 1 : strength = -1\n\
    \            case extension.lowercased().count == extension.lowercased().count/9\
    \ ? strength = strength + 1 : strength = -1\n            case extension.lowercased().count\
    \ == extension.lowercased().count/10 ? strength = strength + 1 : strength = -1\n\
    \            case extension.lowercased().count == extension.lowercased().count/11\
    \ ? strength = strength + 1 : strength = -1\n            case extension.lowercased().count\
    \ == extension.lowercased().count/12 ? strength = strength + 1 : strength = -1\n\
    \            case extension.lowercased().count == extension.lowercased().count/13\
    \ ? strength = strength + 1 : strength = -1\n            case extension.lowercased().count\
    \ == extension.lowercased().count/14 ? strength = strength + 1 : strength = -1\n\
    \            case extension.lowercased().count == extension.lowercased().count/15\
    \ ? strength = strength + 1 : strength = -1\n            case extension.lowercased().count\
    \ == extension.lowercased().count/16 ? strength = strength + 1 : strength = -1\n\
    \            case extension.lowercased().count == extension.lowercased().count/17\
    \ ? strength = strength + 1 : strength = -1\n            case extension.lowercased().count\
    \ == extension.", "    // Write your code here.\n    // If the class name and\
    \ the extensions array are both empty, return an empty string.\n    if class_name\
    \ == \"\" {\n        return \"\"\n    }\n    if extensions == [] {\n        return\
    \ \"\"\n    }\n    let classCount = class_name.characters\n    var classCharCount\
    \ = 0\n    var extensionCount = 0\n    var firstIndex = 0\n    var strongest =\
    \ 0\n    \n    for x in extensions {\n        if classCharCount <= x.count {\n\
    \            classCharCount = x.count\n        }\n        extensionCount += 1\n\
    \    }\n    \n    if classCharCount - extensionCount != 0 {\n        strongest\
    \ = Int(truncating: classCharCount - extensionCount) / Int(truncating: extensionCount)\n\
    \    }\n    if strongest > 0 {\n        firstIndex = strongest\n    } else {\n\
    \        firstIndex = extensionCount\n    }\n    let strongestExtension = extensions.sorted{\
    \ $0.count < $1.count }.first!\n    return class_name + \".\" + strongestExtension.lowercased",
  "    if class_name.count < extensions[0].count {\n        return \"Class name should\
    \ be at least as long as the first extension!\"\n    }\n    var total_count =\
    \ 0\n    var max_count = 0\n    \n    for extension in extensions {\n        total_count\
    \ += extension.count\n        \n        for letter in extension.lowercased() {\n\
    \            if letter.isUpper() {\n                max_count = total_count\n\
    \            }\n        }\n    }\n\n    guard let max_extension = extensions.first\
    \ else { return \"No extension with this strongest strength\" }\n    for extension\
    \ in extensions {\n        guard let first_letter = extension.first?.lowercased()\
    \ else {continue}\n        guard let letter_count = extension.count else { continue}\n\
    \        if letter_count > max_count / first_letter.count {\n            return\
    \ class_name.appending(\".\\(extension).\\(first_letter)\")\n        }\n    }\n\
    \    return \"No extension with this strongest strength\"", "    // BEGIN Practice\
    \ Question\n    // =============================================================================================\n\
    \n    // END (DO NOT DELETE/MODIFY OR REMOVE/MOVE)\n    return \"\"", '    return
    StrongestExtension(class_name, extensions)', "    let strength = extensions.reduce(0)\
    \ { (value, extension) -> Int in\n        guard let value = value as? Int else\
    \ {\n            fatalError(\"Value for extension must be a number.\")\n     \
    \   }\n        let uppercaseLetters = extension.components(separatedBy: CharacterSet.uppercase).count\n\
    \        let lowercaseLetters = extension.components(separatedBy: CharacterSet.lowercase).count\n\
    \        return (value + uppercaseLetters - lowercaseLetters)\n    }\n\n    if\
    \ strength == 0 { return class_name }\n\n    return class_name + \".\" + extensions.sorted(by:\
    \ { $0.compare($1) == .orderedAscending }).first!", "    var strongest = \"\"\n\
    \    for e in extensions {\n        if let index = class_name.range(of: String(e))\
    \ {\n            let length = class_name.count - index\n            let cap =\
    \ class_name.substring(to: index)\n            let sm = class_name.substring(from:\
    \ index + cap.count)\n            let strength = Int(cap) - Int(sm)\n        \
    \    if strength == 0 {\n                strongest = class_name\n            }\
    \ else {\n                if strength > strongest.range(of: \".\").lowerBound\
    \ {\n                    strongest = class_name\n                }\n         \
    \   }\n        }\n    }\n    return strongest", "    let class_name = class_name\n\
    \    let extensions = extensions\n    var classes = [String]()\n    for extension\
    \ in extensions {\n        let class_name_with_extension = class_name + \".\"\
    \ + extension\n        if !classes.contains(class_name_with_extension) {\n   \
    \         classes.append(class_name_with_extension)\n        }\n    }\n    let\
    \ class_with_max_strength = classes.max()\n    if classes.count > 1 {\n      \
    \  let firstStrongest = classes.first { (className, extension) -> Bool in\n  \
    \          let className = className\n            let extension = extension\n\
    \            let class_name_with_extension = class_name + \".\" + extension\n\
    \            let max_strength = classes.max()\n            if max_strength ==\
    \ className {\n                return true\n            } else if max_strength\
    \ == class_name_with_extension {\n                return true\n            } else\
    \ {\n                return false\n            }\n        }\n        return firstStrongest\n\
    \    } else {\n        return class_with_max_strength\n    }", '    return class_name
    + "." + extensions[extensions.reduce(0)]', '    return class_name + (extensions.sorted
    {$0.firstIndex(of: String(class_name.capitalized())!) == $0.firstIndex(of: String($1.capitalized())!)
    ? ($0.count - $1.count) : $0.firstIndex(of: String($1.capitalized())!) == $1.firstIndex(of:
    String(class_name.capitalized())!) ? ($0.count - $1.count) : ($0.firstIndex(of:
    String(class_name.capitalized())!) != $1.firstIndex(of: String(class_name.capitalized())!))}.first!)',
  "\textensions = extensions.sorted()\n\treturn class_name + \".\" + extensions[0]",
  "    let mut extension_array = extensions.sorted(by: { (first, second) -> Bool in\n\
    \        if first.isUppercase {\n            return second.isUppercase\n     \
    \   } else {\n            return true\n        }\n    })\n    return String(class_name\
    \ + extension_array.joinWithSeparator() + \".\")", "    var strongest: Int64 =\
    \ 0\n\n    for (i, e) in extensions.enumerated() {\n        let n = Int64(e.unicodeScalars.filter({\
    \ $0.isUppercase }).count / 3)\n        let s = Int64(e.unicodeScalars.filter({\
    \ $0.isLowercase }).count / 3)\n\n        strongest = Int64(strongest + (n - s))\n\
    \    }\n\n    return class_name.appending(\".\")\n        .appending(extensions[strongest])\n\
    \        .trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)", "    return\
    \ class_name.components(separatedBy: \".\").first! + extensions.reduce(\"\", combine:\
    \ { (a, e) -> String in\n        var a = a\n        for _ in 0..<e.count {\n \
    \           a += String(e.first!.uppercased()[e.first!.startIndex.advancedBy(CAP\
    \ - e.count)]) + String(e.dropFirst()).lowercased()\n        }\n        return\
    \ a.suffix(1) + e.first!.lowercased()\n    })", "\treturn extensions[extensions.map({\
    \ $0.firstUppercaseLetter - $0.firstLowercaseLetter }).max()!]", "    let result\
    \ = extension_strength(class_name, extensions, false)\n    let highest_strength\
    \ = result?.strongest\n    \n    // If all extensions have a strength, choose\
    \ the strongest\n    if result == nil {\n        return class_name\n    }\n  \
    \  \n    if highest_strength == nil {\n        return \"\\(class_name)\"\n   \
    \ }\n    \n    if highest_strength!.strongest == nil {\n        return \"\\(class_name)\"\
    \n    }\n    \n    return class_name.appending(\".\\(highest_strength!.strongest!)\"\
    )", '  return class_name + Strongest_Extension(extensions)', "    var extensions_strength\
    \ = 0\n    for extension in extensions {\n        let cap = extension.firstUpper\n\
    \        let sm = extension.firstLower\n        let strength = cap - sm\n    \
    \    extensions_strength += strength\n    }\n    \n    if extensions_strength\
    \ == 0 {\n        return class_name\n    }\n    \n    if extensions_strength <\
    \ 0 {\n        return class_name.dropFirst() + extensions.last!\n    }\n    \n\
    \    let strong_extension = extensions.first!\n    var new_extensions = extensions\n\
    \    while extensions_strength > 0 {\n        let strong_extension = extensions.first!\n\
    \        if extensions_strength == 1 {\n            return class_name.dropFirst()\
    \ + strong_extension\n        }\n        \n        extensions_strength -= 1\n\
    \        new_extensions.append(strong_extension)\n    }\n    \n    return class_name.dropFirst()\
    \ + new_extensions.last!", "    // Your code here\n    extension := extensions[extensions.count\
    \ - 1]\n    extension := extension.lowercased()\n    extension := extension.capitalizedString\n\
    \    return class_name.appending(\".\\(extension)\")", "    var max_strength =\
    \ -1\n    var max_extension = \"\"\n\n    for i in extensions {\n        let i\
    \ = i.lowercaseString\n        let strs = class_name.lowercaseString.components(separatedBy:\
    \ \".\")\n        var s = strs[0]\n        for j in 1...strs.count {\n       \
    \     let j = strs[j].lowercaseString\n            let a = strs[strs.count - j\
    \ - 1].lowercaseString\n            let b = strs[strs.count - j].lowercaseString\n\
    \            s = s.lowercaseString + j + \".\" + strs[strs.count - j].lowercaseString\n\
    \            if i == a || i == b { \n                continue\n            }\n\
    \            if s == b {\n                if i == a {\n                    s =\
    \ a + \"(\" + strs[strs.count - j].lowercaseString + \")\"\n                }\
    \ else {\n                    s = b + \"(\" + strs[strs.count - j - 1].lowercaseString\
    \ + \")\"\n                }\n                continue\n            }\n      \
    \      if i < s {\n                s = i\n            }\n            if max_strength\
    \ < i {\n                max_extension = i\n                max_strength = i\n\
    \            } else if max_strength == i {\n                if max_extension >\
    \ i {\n                    max_extension = i\n                }\n            }\n\
    \        }\n    }\n    return class_name + \".\" + max_extension", "    let classes:\
    \ [[String]] = [class_name, extensions]\n    var strongest_extension = \"\"\n\
    \    for arr in classes {\n        if arr.count <= 1 {\n            continue\n\
    \        }\n        let upper_case_letters = arr[0].count\n        let lower_case_letters\
    \ = arr[0].lowercaseString.count\n        let strength = upper_case_letters -\
    \ lower_case_letters\n        \n        var new_extension = \"\"\n        for\
    \ ext in arr {\n            if ext != arr[0] {\n                new_extension\
    \ += ext.substringFromIndex(1) + \".\"\n            } else {\n               \
    \ new_extension += ext\n            }\n        }\n        if strength == 0 {\n\
    \            continue\n        }\n        if strength < strongest_extension.characters.count\
    \ {\n            strongest_extension = new_extension\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension.lowercaseString", "\treturn \"\\(class_name).\\\
    (extensions[0].capitalized())\"", "    var max_score = -1\n    var best_extension:\
    \ Int = 0\n    for i in 0..<extensions.count {\n        let extension = extensions[i]\n\
    \        let score: Int = (class_name.characters.count - extension.characters.count)\
    \ / class_name.characters.count\n        if score > max_score {\n            max_score\
    \ = score\n            best_extension = i\n        }\n    }\n    return class_name\
    \ + extensions[best_extension]", "    return class_name.capitalized + \n     \
    \   extensions.reduce(\"\") { \n            a, b, in\n            return a + (a.isEmpty\
    \ ? \"\" : a.capitalize) + b.capitalize\n        }", "    var name = class_name\n\
    \    var extension_array = extensions\n    for extension in extension_array {\n\
    \        var count = 0\n        for letter in extension {\n            count =\
    \ count + letter\n        }\n        let fraction = CAP - SM\n        if fraction\
    \ > 0 {\n            let count = count / fraction\n        } else {\n        \
    \    count = count * fraction\n        }\n        if (CAP - SM) < (count - SM)\
    \ {\n            extension_array.remove(at: extension_array.index(of: extension))\n\
    \        }\n    }\n    for extension in extension_array {\n        name = name\
    \ + extension\n    }\n    return name", "    // Your code here\n    let totalUppercase\
    \ = extensions.reduce(0, combine: {$0 + $1.countUppercase})\n    let totalLowercase\
    \ = extensions.reduce(0, combine: {$0 + $1.countLowercase})\n    let totalStrongest\
    \ = totalUppercase - totalLowercase\n    let strength = totalStrongest / 2\n \
    \   return class_name + extensions.reduce(\"\", combine: {$0 + $1 + \".\"})[strongestIndex(extensions,\
    \ strength)!]", '    return class_name + extensions[extensions.index(extensions.startIndex,
    offsetBy: 1)..<extensions.endIndex].max()!', "    // Return the name of the class\
    \ that has the strongest extension\n    var max_extension = \"\"\n    for extension\
    \ in extensions {\n        var strength = 0\n        for char in extension.uppercaseString.characters\
    \ {\n            if let index = extension.lowercaseString.characters.index(of:\
    \ char) {\n                strength += (index - extension.lowercaseString.characters.index(of:\
    \ char))\n            }\n        }\n        if strength >= 0 {\n            if\
    \ strength > max_extension.characters.count {\n                max_extension =\
    \ class_name\n            }\n            if strength == max_extension.characters.count\
    \ {\n                max_extension = class_name\n            }\n        }\n  \
    \  }\n    return max_extension", "    var strongest = \"\"\n    var cap = \"\"\
    \n    var sm = \"\"\n\n    // We will keep track of the strength of the extensions\
    \ so we can choose the strongest one\n    var strength = Int()\n    for extItem\
    \ in extensions {\n        let capItem = extItem.uppercaseString\n        let\
    \ smItem = extItem.lowercaseString\n        if capItem.count > cap.count {\n \
    \           cap = capItem\n        } else if capItem.count == cap.count {\n  \
    \          cap = capItem\n        }\n        if smItem.count > sm.count {\n  \
    \          sm = smItem\n        } else if smItem.count == sm.count {\n       \
    \     sm = smItem\n        }\n    }\n\n    // Check if we have any extensions\
    \ with the same strength\n    if cap.count > sm.count {\n        strongest = class_name\n\
    \    } else if cap.count == sm.count {\n        strongest = class_name\n    }\
    \ else {\n        for extItem in extensions {\n            let capItem = extItem.uppercaseString\n\
    \            let smItem = extItem.lowercaseString\n            if capItem.count\
    \ < sm.count {\n                strongest = class_name\n                break\n\
    \            } else if capItem.count == sm.count {\n                strongest\
    \ = class_name\n            }\n        }\n    }\n\n    return strongest", "  \
    \  var total_extension_strength: Double = Double(-1)\n    for i in 0..<extensions.count\
    \ {\n        if let ext_name = extensions[i] as? String {\n            let ext_length\
    \ = ext_name.characters.count\n            if ext_length > 0 {\n             \
    \   if ext_length >= class_name.characters.count {\n                    total_extension_strength\
    \ += -1\n                } else {\n                    total_extension_strength\
    \ += 1\n                }\n            }\n        }\n    }\n    var strongest_extension\
    \ = extensions[0]\n    for i in 0..<extensions.count {\n        if total_extension_strength\
    \ == extensions[i].characters.count {\n            strongest_extension = extensions[i]\n\
    \        }\n    }\n    return strongest_extension", "    // your code goes here\n\
    \    var strongest_extension = extensions[0]\n    var total_chars = 0\n    for\
    \ i in extensions {\n        total_chars += i.count\n    }\n    var strength =\
    \ total_chars / extensions.count\n    for i in extensions {\n        var c = i.count\n\
    \        for j in i {\n            c -= 1\n        }\n        c += 1\n       \
    \ strength += c\n        if strength > strongest_extension.count {\n         \
    \   strongest_extension = i\n        }\n    }\n    return class_name + \".\" +\
    \ strongest_extension", "    if extensions.count > 1 {\n        var min = extensions[0]\n\
    \        for i in 1..<extensions.count {\n            let cap = class_name.uppercaseString.count\
    \ - class_name.lowercaseString.count\n            let sm = extensions[i].lowercaseString.count\n\
    \            let strength = cap - sm\n            if strength < min {\n      \
    \          min = strength\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[extensions.indexOf(min)!]\n    } else {\n        return\
    \ class_name\n    }", "    return extensions.reduce(\"\") { str, ext in\n    \
    \    let cap = ext.capitalized().characters.count\n        let sm = ext.lowercased().characters.count\n\
    \        let strength = cap - sm\n        return str + class_name + String(strength)\
    \ + ext\n    }", "    var class_name = class_name\n    var extensions = extensions\n\
    \n    // TODO: Write your code here.\n    for x in 0..<extensions.count {\n  \
    \      guard let lowercase_extension = extensions[x]\n            .lowercased()\n\
    \            .capitalized() else { continue }\n        class_name = class_name.stringByAppendingFormat(\n\
    \            \"%@.%@\", lowercase_extension.lowercased(), lowercase_extension\n\
    \        )\n    }\n    return class_name", "   \n    // Your code here\n    \n\
    \    return \"\"", "\tvar classString = \"\"\n\tvar classStrength = -1\n\tvar\
    \ extensionStrength = -1\n\t\n\tfor extension in extensions {\n\t\textension =\
    \ extension.lowercased()\n\t\textensionStrength = extension.characters.filter({\
    \ $0 >= 'a' && $0 <= 'z' }).count\n\t\textensionStrength += extension.characters.filter({\
    \ $0 >= 'A' && $0 <= 'Z' }).count\n\t\textensionStrength += extension.uppercased().characters.filter({\
    \ $0 >= 'a' && $0 <= 'z' }).count\n\t\textensionStrength += extension.uppercased().characters.filter({\
    \ $0 >= 'A' && $0 <= 'Z' }).count\n\t\t\n\t\tif extensionStrength > classStrength\
    \ {\n\t\t\tclassString = class_name\n\t\t\tclassStrength = extensionStrength\n\
    \t\t}\n\t}\n\t\n\treturn classString + \".\" + extensions[extensions.index(extensions.firstIndex({\
    \ $0 == extensionStrength })!)!]", "  guard extensions.count > 0 else { return\
    \ \"\" }\n  var className = class_name\n  var bestExtension = \"\"\n  var bestExtensionStrength\
    \ = -1\n  \n  for extension in extensions {\n    var extensionStrength = extension.countUpperCase().compare(extension.countLowerCase())\
    \ ?? 0\n    if extensionStrength > bestExtensionStrength {\n      bestExtensionStrength\
    \ = extensionStrength\n      bestExtension = extension\n    }\n  }\n  \n  return\
    \ className + \".\" + bestExtension", "    // Your code here\n    \n    return\
    \ class_name + String(extensions.map { extension in\n        var c = extension.count\n\
    \        var m = extension.lowercased()\n        var sum = c - m.count\n     \
    \   if sum == 0 {\n            return extension\n        }\n        return extension.prefix(sum)\
    \ + \"\\(\"+extension.suffix(sum)\n    })", "    var strongest_extension = \"\"\
    \n    var extension_strength = Int64(0)\n\n    for e in extensions {\n       \
    \ let n = extension_strength_of(e: e)\n        extension_strength = extension_strength.max(n.toInt64())\n\
    \        strongest_extension += e.capitalisedFirstLetter()\n    }\n    return\
    \ class_name + \".\" + strongest_extension", "    var strongest = \"\"\n    var\
    \ max = 0\n    for extension in extensions {\n        let count = StringUtils.countLowerCase(extension)\n\
    \        let cap = StringUtils.countUpperCase(extension)\n        let strength\
    \ = cap - count\n        if strength > max {\n            max = strength\n   \
    \         strongest = extension\n        }\n    }\n    return class_name + \"\
    .\" + strongest", "    // Your code here\n    if extensions.count == 0 {\n   \
    \     return class_name\n    }\n    let classes: [[String]] = class_name.characters.enumerated().map\
    \ { ($0.element, class_name.substringFromIndex($0.offset)) }\n    var class_extension:\
    \ String = class_name.characters\n    for extension in extensions {\n        let\
    \ indexes = class_extension.rangeOfString(extension)\n        let indexes_to_remove\
    \ = class_extension.rangeOfString(extension, range: Range<String.Index>(start:\
    \ indexes.endIndex, end: class_extension.endIndex))\n        class_extension.removeSubrange(indexes_to_remove)\n\
    \    }\n    let strength = class_extension.characters.count / class_extension.characters.count\n\
    \    return class_name + \".\" + extensions[extensions.index(of: class_extension,\
    \ options: .backwards)!]", "    var strongest_extension: String = \"\"\n    var\
    \ strongest_extension_strength: Int = 0\n    var counter_uppercase_letters: Int\
    \ = 0\n    var counter_lowercase_letters: Int = 0\n    var counter_strongest_extension_strength:\
    \ Int = 0\n\n    if class_name != \"\" {\n        for char in class_name {\n \
    \           counter_uppercase_letters += 1\n        }\n    }\n\n    for extension\
    \ in extensions {\n        for char in extension {\n            counter_lowercase_letters\
    \ += 1\n        }\n    }\n\n    if counter_strongest_extension_strength < strongest_extension_strength\
    \ {\n        strongest_extension_strength = counter_strongest_extension_strength\n\
    \        strongest_extension = class_name\n    }\n\n    if counter_strongest_extension_strength\
    \ > strongest_extension_strength {\n        strongest_extension_strength = counter_strongest_extension_strength\n\
    \        for extension in extensions {\n            if counter_strongest_extension_strength\
    \ > strongest_extension_strength {\n                strongest_extension = class_name\n\
    \                strongest_extension_strength = counter_strongest_extension_strength\n\
    \                break\n            }\n            counter_strongest_extension_strength\
    \ += 1\n        }\n    }\n\n    if counter_uppercase_letters > strongest_extension_strength\
    \ {\n        strongest_extension_strength = counter_uppercase_letters\n      \
    \  strongest_extension = class_name\n    }\n\n    if counter_lowercase_letters\
    \ > strongest_extension_strength {\n        strongest_extension_strength = counter_lowercase_letters\n\
    \        strongest_extension = class_name\n    }\n\n    return strongest_extension",
  "    return extensions.reduce(class_name, { (acc, element) -> String in\n      \
    \  let cap_length = element.count\n        let sm_length = acc.count\n       \
    \ let percentage_length = cap_length - sm_length\n        let percentage = percentage_length\
    \ / cap_length\n        return element + (String(percentage) + \"%\")\n    })",
  "    var best_extension = \"\"\n    \n    for i in 0..<extensions.count {\n    \
    \    let a = extensions[i].characters.count - extensions[i].lowercased().characters.count\n\
    \        let b = class_name.characters.count - class_name.lowercased().characters.count\n\
    \        \n        let s = a.compare(b)\n        if s > 0 {\n            best_extension\
    \ = extensions[i]\n        }\n    }\n    \n    return best_extension", "    \n\
    \    if extensions.count < 2 {\n        return \"\\(class_name)\"\n    }\n   \
    \ \n    let extension_name_with_lowest_strength = extensions.min(by: { $0.count\
    \ - $1.count })\n    \n    if extensions.count == extension_name_with_lowest_strength.count\
    \ {\n        return \"\\(class_name).\\(extension_name_with_lowest_strength)\"\
    \n    }\n    \n    return \"\\(class_name).\\(extension_name_with_lowest_strength.first!).\\\
    (extension_name_with_lowest_strength.dropFirst())\"", "    let num_upper = extensions.filter({$0.hasUppercase()}).count\n\
    \    let num_lower = extensions.filter({$0.hasLowercase()}).count\n    let num_range\
    \ = num_upper - num_lower\n    let ratio = num_upper - num_lower\n    \n    if\
    \ num_range == 0 {\n        return class_name\n    }\n    if ratio < 0 {\n   \
    \     return \"\\(class_name.capitalized).\\(extensions.sort().first!)\"\n   \
    \ }\n    else {\n        return class_name.capitalized + String(num_range + ratio).lowercased()\
    \ + String(num_lower)\n    }"]
stop_tokens:
- "\n}"
