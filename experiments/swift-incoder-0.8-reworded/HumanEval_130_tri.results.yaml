language: swift
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n <=\
    \ 1 {\n        return []\n    }\n    func compute(_ result: [Int], current: Int,\
    \ _ index: Int) -> [Int] {\n        if current == 0 {\n            return []\n\
    \        }\n        if current == 1 {\n            return result\n        }\n\
    \        var result = compute(result, current - 1, index)\n        let newIndex\
    \ = index + current\n        result = compute(result + [newIndex], newIndex, newIndex\
    \ - 1)\n        return result\n    }\n    return compute([], n, 0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmptrahv735.swift:29:29: error: missing argument label 'current:'\
    \ in call\n        var result = compute(result, current - 1, index)\n        \
    \                    ^\n                                     current: \n/tmp/tmptrahv735.swift:31:25:\
    \ error: missing argument label 'current:' in call\n        result = compute(result\
    \ + [newIndex], newIndex, newIndex - 1)\n                        ^\n         \
    \                                     current: \n/tmp/tmptrahv735.swift:34:19:\
    \ error: missing argument label 'current:' in call\n    return compute([], n,\
    \ 0)\n                  ^\n                       current: \n"
  stdout: ''
  timestamp: 1659979914
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr\
    \ = [Int]()\n    var tri = [Int]()\n    if n <= 1 {\n        return arr\n    }\n\
    \n    let base = 1\n    let temp = 2\n\n    var i = 0\n    while i <= n {\n  \
    \      if i % 2 == 0 {\n            arr.append(temp)\n            tri.append(temp)\n\
    \            temp = temp + temp\n        } else {\n            temp += temp\n\
    \        }\n        i += 1\n    }\n    arr.append(temp)\n    tri.append(temp)\n\
    \n    while i < arr.count {\n        if i % 2 == 0 {\n            arr[i] = tri[i\
    \ / 2]\n        } else {\n            arr[i] = arr[i / 2] + arr[i / 2 + 1]\n \
    \       }\n        i += 1\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_auqv5ae.swift:33:13: error: cannot assign to value: 'temp' is\
    \ a 'let' constant\n            temp = temp + temp\n            ^~~~\n/tmp/tmp_auqv5ae.swift:26:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let temp = 2\n    ^~~\n\
    \    var\n/tmp/tmp_auqv5ae.swift:35:18: error: left side of mutating operator\
    \ isn't mutable: 'temp' is a 'let' constant\n            temp += temp\n      \
    \      ~~~~ ^\n/tmp/tmp_auqv5ae.swift:26:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let temp = 2\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979914
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    precondition(n\
    \ >= 0, \"n must be positive\")\n    \n    if n == 0 {\n        return [0]\n \
    \   }\n    \n    return [0] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpo1uokl0m.swift:25:22: error: missing argument label 'n:' in call\n\
    \    return [0] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n                     ^\n\
    \                     n: \n/tmp/tmpo1uokl0m.swift:25:35: error: missing argument\
    \ label 'n:' in call\n    return [0] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \                                  ^\n                                  n: \n\
    /tmp/tmpo1uokl0m.swift:25:48: error: missing argument label 'n:' in call\n   \
    \ return [0] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n                        \
    \                       ^\n                                               n: \n"
  stdout: ''
  timestamp: 1659979914
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 1 {\n        return [1]\n    }\n    var arr = [Int]()\n    arr.append(1)\n \
    \   if n % 2 == 0 {\n        arr.append(n - 1)\n        arr.append(1 + n / 2)\n\
    \    }\n    if n % 2 != 0 {\n        arr.append(tri(n - 1) + tri(n - 2))\n   \
    \     arr.append(tri(n + 1))\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpvzvdv6sn.swift:29:20: error: missing argument label 'contentsOf:'\
    \ in call\n        arr.append(tri(n - 1) + tri(n - 2))\n                   ^\n\
    \                   contentsOf: \n/tmp/tmpvzvdv6sn.swift:29:24: error: missing\
    \ argument label 'n:' in call\n        arr.append(tri(n - 1) + tri(n - 2))\n \
    \                      ^\n                       n: \n/tmp/tmpvzvdv6sn.swift:29:37:\
    \ error: missing argument label 'n:' in call\n        arr.append(tri(n - 1) +\
    \ tri(n - 2))\n                                    ^\n                       \
    \             n: \n/tmp/tmpvzvdv6sn.swift:30:20: error: missing argument label\
    \ 'contentsOf:' in call\n        arr.append(tri(n + 1))\n                   ^\n\
    \                   contentsOf: \n/tmp/tmpvzvdv6sn.swift:30:24: error: missing\
    \ argument label 'n:' in call\n        arr.append(tri(n + 1))\n              \
    \         ^\n                       n: \n"
  stdout: ''
  timestamp: 1659979914
- exit_code: -1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var ans\
    \ = [Int]()\n    ans.append(3)\n    var leftNum = 1\n    var rightNum = 2\n  \
    \  while leftNum <= rightNum {\n        ans.append(leftNum)\n        if n % 2\
    \ == 0 {\n            leftNum += 1\n        } else {\n            rightNum +=\
    \ 1\n        }\n    }\n    ans.append(rightNum)\n    return ans\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n < 0\
    \ {\n        return []\n    }\n    \n    let result = [Int]()\n    \n    var i\
    \ = 0\n    var j = 1\n    var k = 2\n    var nTri = 0\n    \n    for _ in 0...(n\
    \ + 1) {\n        if n % 2 == 0 {\n            nTri = k\n        }\n        \n\
    \        result.insert(nTri, i)\n        \n        i += j\n        j += k\n  \
    \      k += nTri\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp75u5l_jp.swift:35:16: error: no exact matches in call to instance\
    \ method 'insert'\n        result.insert(nTri, i)\n               ^\n/tmp/tmp75u5l_jp.swift:35:16:\
    \ note: found candidate with type '(__owned Int, Int) -> ()'\n        result.insert(nTri,\
    \ i)\n               ^\n"
  stdout: ''
  timestamp: 1659979914
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    \n    var\
    \ sum = 0\n    var twos = [1, 2]\n    \n    for i in 1...n {\n        sum += twos[i]\n\
    \        if i % 2 == 0 {\n            twos.append(sum)\n        } else {\n   \
    \         twos.remove(at: 0)\n        }\n    }\n    return twos[0 ..< n]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxrcqlhph.swift:31:16: error: no 'subscript' candidates produce\
    \ the expected contextual result type '[Int]'\n    return twos[0 ..< n]\n    \
    \           ^\nSwift.Array:17:23: note: 'subscript(_:)' produces '@lvalue ArraySlice<Int>',\
    \ not the expected contextual result type '[Int]'\n    @inlinable public subscript(bounds:\
    \ Range<Int>) -> ArraySlice<Element> { get set }\n                      ^\nSwift.Collection:2:23:\
    \ note: 'subscript(_:)' produces 'ArraySlice<Int>', not the expected contextual\
    \ result type '[Int]'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence\
    \ where R : RangeExpression, Self.Index == R.Bound { get }\n                 \
    \     ^\nSwift.MutableCollection:2:23: note: 'subscript(_:)' produces '@lvalue\
    \ ArraySlice<Int>', not the expected contextual result type '[Int]'\n    @inlinable\
    \ public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get set }\n                      ^\n"
  stdout: ''
  timestamp: 1659979914
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    let a =\
    \ tri(n: 1)\n    var b = tri(n: 2)\n    var c = a + b\n    for i in stride(from:\
    \ 3, to: n, by: 1) {\n        b = b + c\n        c = c\n        a.append(b)\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3w8k1yna.swift:24:11: error: assigning a variable to itself\n \
    \       c = c\n        ~ ^ ~\n/tmp/tmp3w8k1yna.swift:25:11: error: no exact matches\
    \ in call to instance method 'append'\n        a.append(b)\n          ^\n/tmp/tmp3w8k1yna.swift:25:11:\
    \ note: found candidate with type '(__owned [Int]) -> ()'\n        a.append(b)\n\
    \          ^\n"
  stdout: ''
  timestamp: 1659979914
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var fibs\
    \ = [Int](repeating: 0, count: n + 1)\n    let tri = fibs.indices.map { fibs[$0]\
    \ + fibs[$0 + 1] + fibs[$0 + 2] }\n    return tri.map { $0 % 2 == 0 ? $0 : $0\
    \ + 1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2,\
    \ 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8,\
    \ 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\
    assert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b04025c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b03d1c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8b03d1c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8b03d1c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8b03d1bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8b03b1be83 <unavailable> + 188035

    6    tmpfffz3gn0                        0x000055c2f4a30438 <unavailable> + 9272

    7    tmpfffz3gn0                        0x000055c2f4a30990 <unavailable> + 10640

    8    libswiftCore.so                    0x00002b8b03d04820 Collection.map<A>(_:)
    + 426

    9    tmpfffz3gn0                        0x000055c2f4a302a8 <unavailable> + 8872

    10   tmpfffz3gn0                        0x000055c2f4a2f5fb <unavailable> + 5627

    11   libc.so.6                          0x00002b8b04211460 __libc_start_main +
    245

    12   tmpfffz3gn0                        0x000055c2f4a2f319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    switch n\
    \ {\n    case 0: return [3]\n    case 1: return [2, 1]\n    default: return (tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9bpitinr.swift:22:26: error: missing argument label 'n:' in call\n\
    \    default: return (tri(n - 1) + tri(n - 2) + tri(n + 1))\n                \
    \         ^\n                         n: \n/tmp/tmp9bpitinr.swift:22:39: error:\
    \ missing argument label 'n:' in call\n    default: return (tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                      ^\n              \
    \                        n: \n/tmp/tmp9bpitinr.swift:22:52: error: missing argument\
    \ label 'n:' in call\n    default: return (tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                   ^\n                      \
    \                             n: \n"
  stdout: ''
  timestamp: 1659979914
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  return sequence[n...].dropFirst()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0ysfo6o4.swift:19:10: error: generic parameter 'T' could not be\
    \ inferred\n  return sequence[n...].dropFirst()\n         ^\nSwift.sequence:1:24:\
    \ note: in call to function 'sequence(first:next:)'\n@inlinable public func sequence<T>(first:\
    \ T, next: @escaping (T) -> T?) -> UnfoldFirstSequence<T>\n                  \
    \     ^\n/tmp/tmp0ysfo6o4.swift:19:18: error: value of type '(_, @escaping (_)\
    \ -> Optional<_>) -> UnfoldSequence<_, (Optional<_>, Bool)>' has no subscripts\n\
    \  return sequence[n...].dropFirst()\n         ~~~~~~~~^\n"
  stdout: ''
  timestamp: 1659979914
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var currentTribonacci: Int\n    if n % 2 == 0 {\n        currentTribonacci\
    \ = 3\n    }\n    else {\n        currentTribonacci = 1\n    }\n    for _ in 1...n\
    \ {\n        result.append(currentTribonacci)\n        currentTribonacci += 2\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp3991fsol/tmp3991fsol.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b924fe65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b924fb5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b924fb5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b924fb5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3991fsol                        0x000055c066e835ca <unavailable> + 5578

    5    libc.so.6                          0x00002b9250051460 __libc_start_main +
    245

    6    tmp3991fsol                        0x000055c066e83209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var results\
    \ = [Int]()\n    results.append(3)\n    var num = 2\n    while num < n + 1 {\n\
    \        results.append(num + num / 2)\n        num += 1\n    }\n    return results\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpyutfirs7/tmpyutfirs7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad01d6b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad01d3a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad01d3a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad01d3a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyutfirs7                        0x0000557ec4da24da <unavailable> + 5338

    5    libc.so.6                          0x00002ad01d89e460 __libc_start_main +
    245

    6    tmpyutfirs7                        0x0000557ec4da2119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ >= 0 else {\n        return []\n    }\n    let a = [Int]()\n    let b = [1]\n\
    \    if n >= 2 {\n        a.append(b[0])\n        b[1] = b[0] + b[1]\n    }\n\
    \    for _ in 1..<n+2 {\n        b.append(b[0] + b[1])\n        a.append(b[1])\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpgiz7bixt.swift:25:11: error: cannot use mutating member on immutable\
    \ value: 'a' is a 'let' constant\n        a.append(b[0])\n        ~ ^\n/tmp/tmpgiz7bixt.swift:22:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let a = [Int]()\n    ^~~\n\
    \    var\n/tmp/tmpgiz7bixt.swift:26:10: error: cannot assign through subscript:\
    \ 'b' is a 'let' constant\n        b[1] = b[0] + b[1]\n        ~^\n/tmp/tmpgiz7bixt.swift:23:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let b = [1]\n    ^~~\n \
    \   var\n/tmp/tmpgiz7bixt.swift:29:11: error: cannot use mutating member on immutable\
    \ value: 'b' is a 'let' constant\n        b.append(b[0] + b[1])\n        ~ ^\n\
    /tmp/tmpgiz7bixt.swift:23:5: note: change 'let' to 'var' to make it mutable\n\
    \    let b = [1]\n    ^~~\n    var\n/tmp/tmpgiz7bixt.swift:30:11: error: cannot\
    \ use mutating member on immutable value: 'a' is a 'let' constant\n        a.append(b[1])\n\
    \        ~ ^\n/tmp/tmpgiz7bixt.swift:22:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let a = [Int]()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979914
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr\
    \ = [Int]()\n    var prev = 0\n    var next = 1\n    var i = 2\n    \n    while\
    \ i < n {\n        arr.append(prev + next + i)\n        prev = next\n        next\
    \ = i\n        i = i + 1\n    }\n    \n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp8wnwgtdi/tmp8wnwgtdi.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f0bf11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f0bc08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f0bc08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f0bc077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wnwgtdi                        0x00005643432d244a <unavailable> + 5194

    5    libc.so.6                          0x00002b2f0c0fd460 __libc_start_main +
    245

    6    tmp8wnwgtdi                        0x00005643432d2089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 1 {\n        return [1,]\n    } else if n == 2 {\n        return [1, 2]\n  \
    \  }\n    var result = [Int]()\n    for i in 1...n {\n        result.append(i+1)\n\
    \    }\n    result.appendContentsOf(tri(n-2) + tri(n-1) + tri(n+1))\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpfsw02ol4.swift:28:12: error: value of type '[Int]' has no member\
    \ 'appendContentsOf'\n    result.appendContentsOf(tri(n-2) + tri(n-1) + tri(n+1))\n\
    \    ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpfsw02ol4.swift:28:33: error: missing argument\
    \ label 'n:' in call\n    result.appendContentsOf(tri(n-2) + tri(n-1) + tri(n+1))\n\
    \                                ^\n                                n: \n/tmp/tmpfsw02ol4.swift:28:44:\
    \ error: missing argument label 'n:' in call\n    result.appendContentsOf(tri(n-2)\
    \ + tri(n-1) + tri(n+1))\n                                           ^\n     \
    \                                      n: \n/tmp/tmpfsw02ol4.swift:28:55: error:\
    \ missing argument label 'n:' in call\n    result.appendContentsOf(tri(n-2) +\
    \ tri(n-1) + tri(n+1))\n                                                     \
    \ ^\n                                                      n: \n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var first = Int(3)\n    result.append(first)\n    var second\
    \ = Int(1)\n    result.append(second)\n    if n % 2 == 1 {\n        var third\
    \ = Int(n / 2)\n        result.append(third)\n        result.append(second + third)\n\
    \    } else {\n        result.append(second + third)\n    }\n    for _ in 1..<n\
    \ + 1 {\n        result.append(result[n-1] + result[n-2])\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpe7h3zim5.swift:29:32: error: cannot find 'third' in scope\n   \
    \     result.append(second + third)\n                               ^~~~~\n"
  stdout: ''
  timestamp: 1659979914
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var numbers\
    \ = [Int]()\n    var sum: Int = 0\n    var third = 1\n    var fourth = 1\n   \
    \ var fifth = 1\n    var total: Int = 0\n    for index in 0...n {\n        numbers.append(third)\n\
    \        numbers.append(fourth)\n        numbers.append(fifth)\n        sum +=\
    \ third\n        sum += fourth\n        sum += fifth\n        if index < n-1 {\n\
    \            third = fourth\n            fourth = fifth\n            fifth = third\n\
    \        }\n        total += third\n        total += fourth\n        total +=\
    \ fifth\n    }\n    numbers.append(total)\n    return numbers\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpigvvghgf/tmpigvvghgf.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af227b64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af22785bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af22785b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af22785a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpigvvghgf                        0x000055bbddb195ca <unavailable> + 5578

    5    libc.so.6                          0x00002af227d50460 __libc_start_main +
    245

    6    tmpigvvghgf                        0x000055bbddb19209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  var firstThreeTri\
    \ = [Int]()\n  var currentTri = [Int]()\n  firstThreeTri.append(1)\n  currentTri.append(1)\n\
    \  var currentTri2 = currentTri\n  for _ in 1 ..< n {\n    let firstThree = firstThreeTri\n\
    \    let currentTri = currentTri2\n    let sumOfThree = firstThree[0] + currentTri[0]\
    \ + firstThree[1] + currentTri[1] + firstThree[2] + currentTri[2]\n    firstThreeTri.append(sumOfThree)\n\
    \    currentTri2.append(sumOfThree)\n  }\n  return firstThreeTri\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aac6b757c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac6b44e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac6b44e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac6b44e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac6b44dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aac6b24de83 <unavailable> + 188035

    6    tmpydab2b4o                        0x000055d024f6d2f3 <unavailable> + 8947

    7    tmpydab2b4o                        0x000055d024f6c53b <unavailable> + 5435

    8    libc.so.6                          0x00002aac6b943460 __libc_start_main +
    245

    9    tmpydab2b4o                        0x000055d024f6c259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // write\
    \ your code here\n    var fibo = [Int]()\n    if n == 0 {\n        fibo += [0]\n\
    \        return fibo\n    } else if n == 1 {\n        fibo += [1]\n        return\
    \ fibo\n    } else if n % 2 == 1 {\n        fibo += [n, (n + 1) + n/2]\n    }\
    \ else {\n        fibo += [n, (n + 1)/2, (n + 1) + n/2]\n    }\n    return fibo\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5a_qwjuf/tmp5a_qwjuf.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569328ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5692f81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5692f81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5692f807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5a_qwjuf                        0x0000561c4318d4da <unavailable> + 5338

    5    libc.so.6                          0x00002b5693476460 __libc_start_main +
    245

    6    tmp5a_qwjuf                        0x0000561c4318d119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.appendContentsOf([3])\n   \
    \ } else if n == 1 {\n        result.appendContentsOf([3])\n    } else {\n   \
    \     result.appendContentsOf([tri(n - 1) + tri(n - 2) + tri(n + 1)])\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpu99ulrdh.swift:22:16: error: value of type '[Int]' has no member\
    \ 'appendContentsOf'\n        result.appendContentsOf([3])\n        ~~~~~~ ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpu99ulrdh.swift:24:16: error: value of type '[Int]' has no member 'appendContentsOf'\n\
    \        result.appendContentsOf([3])\n        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpu99ulrdh.swift:26:16:\
    \ error: value of type '[Int]' has no member 'appendContentsOf'\n        result.appendContentsOf([tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)])\n        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpu99ulrdh.swift:26:38:\
    \ error: missing argument label 'n:' in call\n        result.appendContentsOf([tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)])\n                                     ^\n \
    \                                    n: \n/tmp/tmpu99ulrdh.swift:26:51: error:\
    \ missing argument label 'n:' in call\n        result.appendContentsOf([tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)])\n                                         \
    \         ^\n                                                  n: \n/tmp/tmpu99ulrdh.swift:26:64:\
    \ error: missing argument label 'n:' in call\n        result.appendContentsOf([tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)])\n                                         \
    \                      ^\n                                                   \
    \            n: \n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return fibs(n\
    \ + 1)[0 ..< n].map { ($0 % 2) + $1 / 2 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpozfr356h.swift:19:12: error: cannot find 'fibs' in scope\n    return\
    \ fibs(n + 1)[0 ..< n].map { ($0 % 2) + $1 / 2 }\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var array\
    \ = [Int]()\n    array.append(3)\n    if n % 2 == 0 {\n        array.append(1)\n\
    \        for _ in 0..<n / 2 {\n            array.append(array.append(array[1]\
    \ + array[2]))\n        }\n    } else {\n        array.append(1)\n        for\
    \ _ in 0..<(n - 1) / 2 {\n            array.append(array.append(array[2] + array[3]))\n\
    \        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpiwcrf66p.swift:24:32: error: cannot convert value of type '()'\
    \ to expected argument type 'Int'\n            array.append(array.append(array[1]\
    \ + array[2]))\n                               ^\n/tmp/tmpiwcrf66p.swift:29:32:\
    \ error: cannot convert value of type '()' to expected argument type 'Int'\n \
    \           array.append(array.append(array[2] + array[3]))\n                \
    \               ^\n"
  stdout: ''
  timestamp: 1659979914
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    let result:\
    \ [Int] = [n]\n    var next = 1\n    \n    for i in 1 ..< n {\n        result.append(next)\n\
    \        if i % 2 == 0 {\n            next = next + 1\n        } else {\n    \
    \        next = next + 2\n        }\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxmt9rdeq.swift:23:16: error: cannot use mutating member on immutable\
    \ value: 'result' is a 'let' constant\n        result.append(next)\n        ~~~~~~\
    \ ^\n/tmp/tmpxmt9rdeq.swift:19:5: note: change 'let' to 'var' to make it mutable\n\
    \    let result: [Int] = [n]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var a =\
    \ 2\n    var b = 3\n    var c = 0\n    var ans = [Int]()\n    ans.append(a)\n\
    \    while c < n {\n        ans.append(b)\n        ans.append(c)\n        c +=\
    \ a / 2\n        a = b\n        b = c\n    }\n    return ans\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpnc1k8gkx/tmpnc1k8gkx.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4835dbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4835ab2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4835ab2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4835ab17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnc1k8gkx                        0x0000564557a4e4da <unavailable> + 5338

    5    libc.so.6                          0x00002b4835fa7460 __libc_start_main +
    245

    6    tmpnc1k8gkx                        0x0000564557a4e119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var a: [Int]\
    \ = []\n    if n == 0 {\n        return a\n    }\n    \n    a.append(3)\n    \n\
    \    if n / 2 > 0 {\n        a.append(tri(n - 1) + tri(n - 2))\n    }\n    \n\
    \    if n / 2 % 2 == 1 {\n        a.append(tri(n / 2) + tri(n + 1))\n    }\n \
    \   \n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp95s2e_wc.swift:27:18: error: missing argument label 'contentsOf:'\
    \ in call\n        a.append(tri(n - 1) + tri(n - 2))\n                 ^\n   \
    \              contentsOf: \n/tmp/tmp95s2e_wc.swift:27:22: error: missing argument\
    \ label 'n:' in call\n        a.append(tri(n - 1) + tri(n - 2))\n            \
    \         ^\n                     n: \n/tmp/tmp95s2e_wc.swift:27:35: error: missing\
    \ argument label 'n:' in call\n        a.append(tri(n - 1) + tri(n - 2))\n   \
    \                               ^\n                                  n: \n/tmp/tmp95s2e_wc.swift:31:18:\
    \ error: missing argument label 'contentsOf:' in call\n        a.append(tri(n\
    \ / 2) + tri(n + 1))\n                 ^\n                 contentsOf: \n/tmp/tmp95s2e_wc.swift:31:22:\
    \ error: missing argument label 'n:' in call\n        a.append(tri(n / 2) + tri(n\
    \ + 1))\n                     ^\n                     n: \n/tmp/tmp95s2e_wc.swift:31:35:\
    \ error: missing argument label 'n:' in call\n        a.append(tri(n / 2) + tri(n\
    \ + 1))\n                                  ^\n                               \
    \   n: \n"
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1]\n    for i in 2...n {\n        result.append(result[i-1] + result[i-2])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cf1a83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cf177a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5cf177a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5cf177a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5cf1779bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5cf1579e83 <unavailable> + 188035

    6    tmp2qk82u9g                        0x000056233eb3e1e4 <unavailable> + 8676

    7    tmp2qk82u9g                        0x000056233eb3d4eb <unavailable> + 5355

    8    libc.so.6                          0x00002b5cf1c6f460 __libc_start_main +
    245

    9    tmp2qk82u9g                        0x000056233eb3d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if (n<0)\
    \ {\n        return [n]\n    }\n    var res = [Int]()\n    var n2 = n-2\n    for\
    \ index in stride(from: -1, through: 0, by: 2) {\n        res.append(n2)\n   \
    \     n2 = n2+n\n    }\n    res.append(n2)\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpvkpbjvn7/tmpvkpbjvn7.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eb768cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3eb7383b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3eb7383988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3eb73827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvkpbjvn7                        0x000056481be6566a <unavailable> + 5738

    5    libc.so.6                          0x00002b3eb7878460 __libc_start_main +
    245

    6    tmpvkpbjvn7                        0x000056481be652a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return sequence(n).prefix(by:\
    \ n + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9o80yc1j.swift:19:21: error: missing argument label 'first:' in\
    \ call\n    return sequence(n).prefix(by: n + 1)\n                    ^\n    \
    \                first: \n/tmp/tmp9o80yc1j.swift:19:22: error: missing argument\
    \ for parameter 'next' in call\n    return sequence(n).prefix(by: n + 1)\n   \
    \                  ^\n                     , next: <#(Int) -> Int?#>\nSwift.sequence:1:24:\
    \ note: 'sequence(first:next:)' declared here\n@inlinable public func sequence<T>(first:\
    \ T, next: @escaping (T) -> T?) -> UnfoldFirstSequence<T>\n                  \
    \     ^\n/tmp/tmp9o80yc1j.swift:19:30: error: extraneous argument label 'by:'\
    \ in call\n    return sequence(n).prefix(by: n + 1)\n                        \
    \     ^~~~~\n                              \n/tmp/tmp9o80yc1j.swift:19:24: error:\
    \ cannot convert return expression of type 'PrefixSequence<UnfoldSequence<Int,\
    \ (Int?, Bool)>>' to return type '[Int]'\n    return sequence(n).prefix(by: n\
    \ + 1)\n           ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 1 {\n        return [0]\n    } else if n == 2 {\n        return [0, 1]\n   \
    \ } else {\n        var first = 3\n        var second = 1\n        var third =\
    \ 2\n        var fourth = 1\n        if n % 2 == 0 {\n            second++\n \
    \       } else {\n            third++\n        }\n        fourth = third + second\n\
    \        var numbers = Array(count: (n + 1)*2, repeatedValue: 0)\n        numbers[0]\
    \ = first\n        numbers[(n + 1)*2 - 1] = fourth\n        for var index = 1..<(n\
    \ * 2)-1 {\n            if index == 1 {\n                numbers[index] = second\n\
    \            }\n            if index == (n * 2) - 2 {\n                numbers[index]\
    \ = third\n            }\n            if index >= (n * 2) - 3 {\n            \
    \    numbers[index] = second+third\n            }\n            if index >= (n\
    \ * 2) - 2 {\n                numbers[index] = third+fourth\n            }\n \
    \           if index >= (n * 2-1) {\n                numbers[index] = second+third+fourth\n\
    \            }\n        }\n        return numbers\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpa5jiuxv5.swift:37:23: error: expected 'in' after for-each pattern\n\
    \        for var index = 1..<(n * 2)-1 {\n                      ^\n/tmp/tmpa5jiuxv5.swift:37:23:\
    \ error: expected Sequence expression for for-each loop\n        for var index\
    \ = 1..<(n * 2)-1 {\n                      ^\n/tmp/tmpa5jiuxv5.swift:29:19: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            second++\n\
    \                  ^~\n/tmp/tmpa5jiuxv5.swift:31:18: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            third++\n                 ^~\n\
    /tmp/tmpa5jiuxv5.swift:34:23: error: no exact matches in call to initializer \n\
    \        var numbers = Array(count: (n + 1)*2, repeatedValue: 0)\n           \
    \           ^\n/tmp/tmpa5jiuxv5.swift:34:23: note: candidate has partially matching\
    \ parameter list (repeating: _, count: Int)\n        var numbers = Array(count:\
    \ (n + 1)*2, repeatedValue: 0)\n                      ^\n/tmp/tmpa5jiuxv5.swift:34:23:\
    \ note: candidate has partially matching parameter list (repeating: _, count:\
    \ Int)\n        var numbers = Array(count: (n + 1)*2, repeatedValue: 0)\n    \
    \                  ^\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    precondition(n%2\
    \ != 0)\n\n    var result: [Int] = []\n    for _ in 0..<n {\n        result.append(1)\n\
    \    }\n    for _ in 0..<n-1 {\n        result.append(result[result.count-1] +\
    \ result[result.count-2])\n    }\n    result.append(result[result.count-1] + result[result.count-2])\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp0kl3zg4a/tmp0kl3zg4a.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b527a2dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5279fd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5279fd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5279fd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0kl3zg4a                        0x000056266d88d61a <unavailable> + 5658

    5    libc.so.6                          0x00002b527a4ca460 __libc_start_main +
    245

    6    tmp0kl3zg4a                        0x000056266d88d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var firstTri = [Int]()\n    var secondTri = [Int]()\n    var\
    \ thirdTri = [Int]()\n    if n == 0 {\n        result.insert(1, 3)\n        result.insert(2,\
    \ 1)\n        result.insert(3, 2)\n    } else {\n        firstTri.append(3)\n\
    \        secondTri.append(1)\n        thirdTri.append(2)\n    }\n    let i = 2\n\
    \    while i < n {\n        firstTri.append(firstTri[i-2] + (secondTri[i-2] +\
    \ thirdTri[i-2]))\n        secondTri.append(secondTri[i-2])\n        thirdTri.append(thirdTri[i-2])\n\
    \        i += 1\n    }\n    result.insert(1, firstTri[0])\n    result.insert(2,\
    \ secondTri[0])\n    result.insert(3, thirdTri[0])\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5j2npwfr.swift:24:16: error: no exact matches in call to instance\
    \ method 'insert'\n        result.insert(1, 3)\n               ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp5j2npwfr.swift:25:16:\
    \ error: no exact matches in call to instance method 'insert'\n        result.insert(2,\
    \ 1)\n               ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmp5j2npwfr.swift:26:16: error: no exact matches in call\
    \ to instance method 'insert'\n        result.insert(3, 2)\n               ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp5j2npwfr.swift:37:11:\
    \ error: left side of mutating operator isn't mutable: 'i' is a 'let' constant\n\
    \        i += 1\n        ~ ^\n/tmp/tmp5j2npwfr.swift:32:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let i = 2\n    ^~~\n    var\n/tmp/"
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    precondition(n\
    \ > 0, \"Tribonacci sequence requires n > 0, got \\(n).\")\n    var result = [Int]()\n\
    \    \n    // Write your code here.\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpvx5babrb/tmpvx5babrb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae10a606c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae10a2fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae10a2fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae10a2fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvx5babrb                        0x000055f9e55df6ca <unavailable> + 5834

    5    libc.so.6                          0x00002ae10a7f2460 __libc_start_main +
    245

    6    tmpvx5babrb                        0x000055f9e55df309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n % 2 == 1 {\n        result.append(3)\n    }\n\n  \
    \  if n > 1 {\n        result.append(1)\n    }\n    \n    for var i = 3; i <=\
    \ n; i++ {\n        result.append(result[i-1] + result[i-2] + result[i+1])\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpdf5e85g1.swift:29:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 3; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    let result\
    \ = [Int]()\n    result.append((3 + (n / 2))) // tri(1) = 3\n    for n in 2..<n\
    \ {\n        guard n % 2 == 1 else {\n            continue\n        }\n      \
    \  result.append(result[n-1] + result[n-2] + result[n+1])\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0wfganwh.swift:20:12: error: cannot use mutating member on immutable\
    \ value: 'result' is a 'let' constant\n    result.append((3 + (n / 2))) // tri(1)\
    \ = 3\n    ~~~~~~ ^\n/tmp/tmp0wfganwh.swift:19:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let result = [Int]()\n    ^~~\n    var\n/tmp/tmp0wfganwh.swift:25:16:\
    \ error: cannot use mutating member on immutable value: 'result' is a 'let' constant\n\
    \        result.append(result[n-1] + result[n-2] + result[n+1])\n        ~~~~~~\
    \ ^\n/tmp/tmp0wfganwh.swift:19:5: note: change 'let' to 'var' to make it mutable\n\
    \    let result = [Int]()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var fibArray:\
    \ [Int] = [3]\n    func loop(n: Int) -> Int {\n        if n < 3 {\n          \
    \  return n\n        }\n        let firstFibonacci = fibArray[n-2] + fibArray[n-1]\n\
    \        let secondFibonacci = fibArray[n-2] - fibArray[n-1]\n        if n % 2\
    \ == 0 {\n            return firstFibonacci + secondFibonacci\n        }\n   \
    \     return secondFibonacci + firstFibonacci\n    }\n    for var i = 0; i < n;\
    \ i++ {\n        fibArray.append(loop(i))\n    }\n    return fibArray\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpv1ktoshp.swift:31:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var first = 1\n    var second = 2\n    if n % 2 == 0 {\n    \
    \    first = second\n        second = tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \   }\n    result.append(first)\n    result.append(second)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp26wwz5rq.swift:24:42: error: cannot assign value of type 'Array<Int>'\
    \ to type 'Int'\n        second = tri(n - 1) + tri(n - 2) + tri(n + 1)\n     \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n/tmp/tmp26wwz5rq.swift:24:22:\
    \ error: missing argument label 'n:' in call\n        second = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                     ^\n                     n: \n/tmp/tmp26wwz5rq.swift:24:35:\
    \ error: missing argument label 'n:' in call\n        second = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                  ^\n                   \
    \               n: \n/tmp/tmp26wwz5rq.swift:24:48: error: missing argument label\
    \ 'n:' in call\n        second = tri(n - 1) + tri(n - 2) + tri(n + 1)\n      \
    \                                         ^\n                                \
    \               n: \n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 || n == 1 {\n        return [0]\n    }\n\n    var left = [Int]()\n    var\
    \ right = [Int]()\n\n    for n in 0...n {\n        right.append(left)\n      \
    \  left.append(0)\n    }\n\n    right.append(left)\n\n    for i in 0...n-1 {\n\
    \        right.append(0)\n        right.append(1)\n    }\n\n    var result = [Int]()\n\
    \    for n in 0...n-1 {\n        result.append(right[n] + right[n+1] + left[n])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp57r6d_6_.swift:27:15: error: no exact matches in call to instance\
    \ method 'append'\n        right.append(left)\n              ^\nSwift.Array:7:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where Element == S.Element, S : Sequence\n                              \
    \      ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func\
    \ append<S>(contentsOf newElements: __owned S) where S : Sequence, Self.Element\
    \ == S.Element\n                                    ^\n/tmp/tmp57r6d_6_.swift:31:11:\
    \ error: no exact matches in call to instance method 'append'\n    right.append(left)\n\
    \          ^\nSwift.Array:7:37: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(contentsOf:)')\n    @inlinable public mutating func append<S>(contentsOf\
    \ newElements: __owned S) where Element == S.Element, S : Sequence\n         \
    \                           ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable\
    \ public mutating func append<S>(contentsOf newElements: __owned S) where S :\
    \ Sequence, Self.Element == S.Element\n                                    ^\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return []\n    }\n    \n    let lower = tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n    let upper = tri(n - 2) + tri(n - 1) + tri(n + 1)\n    let\
    \ result = lower..<upper\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmprn8i80e2.swift:23:21: error: missing argument label 'n:' in call\n\
    \    let lower = tri(n - 1) + tri(n - 2) + tri(n + 1)\n                    ^\n\
    \                    n: \n/tmp/tmprn8i80e2.swift:23:34: error: missing argument\
    \ label 'n:' in call\n    let lower = tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \                                ^\n                                 n: \n/tmp/tmprn8i80e2.swift:23:47:\
    \ error: missing argument label 'n:' in call\n    let lower = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                              ^\n       \
    \                                       n: \n/tmp/tmprn8i80e2.swift:24:21: error:\
    \ missing argument label 'n:' in call\n    let upper = tri(n - 2) + tri(n - 1)\
    \ + tri(n + 1)\n                    ^\n                    n: \n/tmp/tmprn8i80e2.swift:24:34:\
    \ error: missing argument label 'n:' in call\n    let upper = tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n                                 ^\n                    \
    \             n: \n/tmp/tmprn8i80e2.swift:24:47: error: missing argument label\
    \ 'n:' in call\n    let upper = tri(n - 2) + tri(n - 1) + tri(n + 1)\n       \
    \                                       ^\n                                  \
    \            n: \n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 1 {\n        return [Int]()\n    }\n    var fibonacci = [Int](repeating: 0,\
    \ count: n + 1)\n    fibonacci[0] = 3\n    fibonacci[1] = 1\n    \n    for i in\
    \ 2..<n {\n        fibonacci[i] = fibonacci[i - 1] + fibonacci[i - 2]\n    }\n\
    \    \n    return fibonacci[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf7ntwf1f.swift:30:21: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return fibonacci[n]\n           ~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    func calcTri(n:\
    \ Int) -> Int {\n        return n.isEven ? 3 : calcTri(n - 1) + calcTri(n - 2)\
    \ + calcTri(n + 1)\n    }\n    var result = [Int]()\n    for _ in 0..<n+1 {\n\
    \        result.append(calcTri(n))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpibxh4xdv.swift:20:18: error: value of type 'Int' has no member\
    \ 'isEven'\n        return n.isEven ? 3 : calcTri(n - 1) + calcTri(n - 2) + calcTri(n\
    \ + 1)\n               ~ ^~~~~~\n/tmp/tmpibxh4xdv.swift:20:39: error: missing\
    \ argument label 'n:' in call\n        return n.isEven ? 3 : calcTri(n - 1) +\
    \ calcTri(n - 2) + calcTri(n + 1)\n                                      ^\n \
    \                                     n: \n/tmp/tmpibxh4xdv.swift:20:56: error:\
    \ missing argument label 'n:' in call\n        return n.isEven ? 3 : calcTri(n\
    \ - 1) + calcTri(n - 2) + calcTri(n + 1)\n                                   \
    \                    ^\n                                                     \
    \  n: \n/tmp/tmpibxh4xdv.swift:20:73: error: missing argument label 'n:' in call\n\
    \        return n.isEven ? 3 : calcTri(n - 1) + calcTri(n - 2) + calcTri(n + 1)\n\
    \                                                                        ^\n \
    \                                                                       n: \n\
    /tmp/tmpibxh4xdv.swift:24:31: error: missing argument label 'n:' in call\n   \
    \     result.append(calcTri(n))\n                              ^\n           \
    \                   n: \n"
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    result.append(3)\n    if n >= 4 {\n        for index in stride(from:\
    \ 4, to: n, by: 2){\n            let sum = result[index - 1] + result[index -\
    \ 2] + result[index + 3]\n            result.append(sum)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpphb4ot2q/tmpphb4ot2q.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9a008ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae99fd85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae99fd85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae99fd847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpphb4ot2q                        0x0000560a7eeb569a <unavailable> + 5786

    5    libc.so.6                          0x00002ae9a027a460 __libc_start_main +
    245

    6    tmpphb4ot2q                        0x0000560a7eeb52d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  if n < 0 {\n\
    \    fatalError(\"n must be non-negative.\")\n  }\n\n  var a = [Int]()\n  a.reserve(n\
    \ + 1)\n\n  for i in 1...n {\n    var a2 = a\n    a2.append(a2.popLast() + a2.popLast()\
    \ + a2.popFirst())\n  }\n\n  return a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpn1o4q6qm.swift:24:5: error: value of type '[Int]' has no member\
    \ 'reserve'\n  a.reserve(n + 1)\n  ~ ^~~~~~~\n/tmp/tmpn1o4q6qm.swift:28:28: error:\
    \ binary operator '+' cannot be applied to two 'Int?' operands\n    a2.append(a2.popLast()\
    \ + a2.popLast() + a2.popFirst())\n              ~~~~~~~~~~~~ ^ ~~~~~~~~~~~~\n\
    /tmp/tmpn1o4q6qm.swift:28:28: note: overloads for '+' exist with these partially\
    \ matching parameter lists: (Int, Int)\n    a2.append(a2.popLast() + a2.popLast()\
    \ + a2.popFirst())\n                           ^\n/tmp/tmpn1o4q6qm.swift:28:48:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \    a2.append(a2.popLast() + a2.popLast() + a2.popFirst())\n                \
    \                               ^\n/tmp/tmpn1o4q6qm.swift:28:48: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \ a2.append(a2.popLast() + a2.popLast() + a2.popFirst())\n                   \
    \                            ^\n                                            (\
    \             ?? <#default value#>)\n/tmp/tmpn1o4q6qm.swift:28:48: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    a2.append(a2.popLast()\
    \ + a2.popLast() + a2.popFirst())\n                                          \
    \     ^\n                                                         !\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    \n    var\
    \ sequence = [Int]()\n    var n0 = 1\n    var n1 = n\n    var n2 = n\n    var\
    \ n3 = n\n    \n    while (n4 < n) {\n        n3 = n1 + n2 + n3\n        sequence.append(n3)\n\
    \        n0 = n1\n        n1 = n2\n        n2 = n3\n        n4 = n3\n    }\n \
    \   \n    return sequence\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxp9orgs2.swift:26:12: error: cannot find 'n4' in scope\n    while\
    \ (n4 < n) {\n           ^~\n/tmp/tmpxp9orgs2.swift:32:9: error: cannot find 'n4'\
    \ in scope\n        n4 = n3\n        ^~\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    // Base cases\n    if n < 3 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    // Recursion\n    var tri1 = 1\n    var\
    \ tri2 = 2\n    \n    for _ in 0..<n {\n        tri1 = tri1 + tri2\n        tri2\
    \ = tri1 + tri2 + tri2\n        result.append(tri1)\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmph00yycb0/tmph00yycb0.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed3f15cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed3ee53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed3ee53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed3ee527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph00yycb0                        0x000055faa179d5ca <unavailable> + 5578

    5    libc.so.6                          0x00002aed3f348460 __libc_start_main +
    245

    6    tmph00yycb0                        0x000055faa179d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    \n    guard\
    \ n > 0 else { return [] }\n    \n    var arr = [Int]()\n    \n    arr.append(3)\n\
    \    \n    if n % 2 == 0 {\n        arr.append((arr[0] + arr[1]) / 2)\n    }\n\
    \    \n    for i in 1..(n + 1) {\n        arr.append(arr[i - 1] + arr[i - 2] +\
    \ arr[i - 3])\n    }\n    \n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0uij492y.swift:30:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..(n + 1) {\n              ^~\n         \
    \     ...\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n\treturn tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzyyuensx.swift:19:13: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n - 1)\n                   ^\n \
    \                  n: \n/tmp/tmpzyyuensx.swift:19:26: error: missing argument\
    \ label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n - 1)\n  \
    \                              ^\n                                n: \n/tmp/tmpzyyuensx.swift:19:39:\
    \ error: missing argument label 'n:' in call\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1)\n                                             ^\n        \
    \                                     n: \n"
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    precondition(n\
    \ >= 0, \"n must be non-negative\")\n    var first = 0\n    var second = 3\n \
    \   var third = first\n    for i in stride(from: n, to: n, by: 2) {\n        third\
    \ = first + second + third\n        first = second\n        second = third\n \
    \   }\n    return Array(first...third)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmptgc7kucx/tmptgc7kucx.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9c49c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9c46b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9c46b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9c46b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptgc7kucx                        0x000055999879a7ba <unavailable> + 6074

    5    libc.so.6                          0x00002ab9c4bac460 __libc_start_main +
    245

    6    tmptgc7kucx                        0x000055999879a3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // write\
    \ your code here\n    var firstThreeFibo = [Int](repeating: 1, count: (n + 1))\n\
    \    for i in 0..<n {\n        let firstTwoFibo = firstThreeFibo[0] + firstThreeFibo[1]\
    \ + firstThreeFibo[2]\n        if i % 2 == 0 {\n            firstThreeFibo[0]\
    \ = firstTwoFibo\n        } else {\n            firstThreeFibo[1] = firstTwoFibo\n\
    \        }\n    }\n    return firstThreeFibo\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmprfrzgird/tmprfrzgird.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06e977dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06e9474b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06e9474988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06e94737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprfrzgird                        0x000055d6326bd62a <unavailable> + 5674

    5    libc.so.6                          0x00002b06e9969460 __libc_start_main +
    245

    6    tmprfrzgird                        0x000055d6326bd269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n    } else if n\
    \ == 2 {\n        result.append(3)\n    } else if n == 0 {\n        return [1]\n\
    \    }\n    \n    func iterate(_ n: Int) {\n        if n == 1 {\n            result.append(1)\n\
    \        } else if n == 2 {\n            result.append(3)\n        } else if n\
    \ == 0 {\n            result.append(1)\n            result.append(2)\n       \
    \ } else {\n            result.append(result[n-1] + result[n-2])\n        }\n\
    \    }\n    \n    iterate(0)\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp7x98gyvd/tmp7x98gyvd.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05c4360c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05c4057b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05c4057988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05c40567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7x98gyvd                        0x000055a057f7961a <unavailable> + 5658

    5    libc.so.6                          0x00002b05c454c460 __libc_start_main +
    245

    6    tmp7x98gyvd                        0x000055a057f79259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n < 1\
    \ {\n        return []\n    }\n    \n    var numbers = [Int]()\n    if n == 0\
    \ {\n        numbers.append(0)\n        return numbers\n    }\n    \n    var n1\
    \ = 1\n    var n2 = 1\n    \n    var sum = 0\n    for _ in 0 ..< n {\n       \
    \ sum = sum + n1\n        n1 = n2\n        n2 = sum\n    }\n    \n    numbers.append(n2)\n\
    \    \n    return numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpdo8eizuz/tmpdo8eizuz.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d3cb25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d3c81cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d3c81c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d3c81b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdo8eizuz                        0x000055e0b05835ca <unavailable> + 5578

    5    libc.so.6                          0x00002b9d3cd11460 __libc_start_main +
    245

    6    tmpdo8eizuz                        0x000055e0b0583209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var a =\
    \ [Int]()\n    \n    if n >= 2 {\n        a.append(3)\n        \n        if n\
    \ % 2 == 1 {\n            a.append(1)\n        }\n        \n        switch n &\
    \ 1 {\n            case 0:\n                a.append(n)\n            case 1:\n\
    \                a.append(n / 2)\n            case 2:\n                a.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n            default:\n                fatalError()\n\
    \        }\n    }\n    \n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp43th4_xo.swift:34:26: error: missing argument label 'contentsOf:'\
    \ in call\n                a.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \                       ^\n                         contentsOf: \n/tmp/tmp43th4_xo.swift:34:30:\
    \ error: missing argument label 'n:' in call\n                a.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n                             ^\n            \
    \                 n: \n/tmp/tmp43th4_xo.swift:34:43: error: missing argument label\
    \ 'n:' in call\n                a.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                          ^\n                               \
    \           n: \n/tmp/tmp43th4_xo.swift:34:56: error: missing argument label 'n:'\
    \ in call\n                a.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \                                                     ^\n                    \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    func tri(n:\
    \ Int, nums: [Int], current: Int) -> [Int] {\n        if n <= 0 {\n          \
    \  return nums\n        }\n\n        if n == 1 {\n            nums.append(current)\n\
    \        }\n        else {\n            let previous = tri(n - 1, nums, current\
    \ + previous)\n            nums.append(previous[0])\n            nums.append(previous[1])\n\
    \        }\n\n        return nums\n    }\n\n    var nums = [Int]()\n    return\
    \ tri(n: n, nums: nums, current: 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0uj96pu4.swift:25:18: error: cannot use mutating member on immutable\
    \ value: 'nums' is a 'let' constant\n            nums.append(current)\n      \
    \      ~~~~ ^\n/tmp/tmp0uj96pu4.swift:28:55: error: use of local variable 'previous'\
    \ before its declaration\n            let previous = tri(n - 1, nums, current\
    \ + previous)\n                                                      ^\n/tmp/tmp0uj96pu4.swift:28:17:\
    \ note: 'previous' declared here\n            let previous = tri(n - 1, nums,\
    \ current + previous)\n                ^\n/tmp/tmp0uj96pu4.swift:28:31: error:\
    \ missing argument labels 'n:nums:current:' in call\n            let previous\
    \ = tri(n - 1, nums, current + previous)\n                              ^\n  \
    \                             n:     nums: current: \n/tmp/tmp0uj96pu4.swift:29:18:\
    \ error: no exact matches in call to instance method 'append'\n            nums.append(previous[0])\n\
    \                 ^\n/tmp/tmp0uj96pu4.swift:29:18: note: found candidate with\
    \ type '(__owned Int) -> ()'\n            nums.append(previous[0])\n         \
    \        ^\n/tmp/tmp0uj96pu4.swift:30:18: error: no exact matches in call to instance\
    \ method 'append'\n            nums.append(previous[1])\n                 ^\n\
    /tmp/tmp0uj96pu4.swift:30:18: note: found candidate with type '(__owned Int) ->\
    \ ()'\n            nums.append(previous[1])\n                 ^\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return sequence(start:\
    \ 3, end: n + 1) {\n        $0 + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmplppdisqu.swift:19:20: error: extra arguments at positions #2, #3\
    \ in call\n    return sequence(start: 3, end: n + 1) {\n                   ^\n\
    Swift.sequence:1:24: note: 'sequence(state:next:)' declared here\n@inlinable public\
    \ func sequence<T, State>(state: State, next: @escaping (inout State) -> T?) ->\
    \ UnfoldSequence<T, State>\n                       ^\n/tmp/tmplppdisqu.swift:19:29:\
    \ error: missing argument for parameter 'next' in call\n    return sequence(start:\
    \ 3, end: n + 1) {\n                            ^\n                          \
    \  , next: <#(inout Int) -> _?#>\nSwift.sequence:1:24: note: 'sequence(state:next:)'\
    \ declared here\n@inlinable public func sequence<T, State>(state: State, next:\
    \ @escaping (inout State) -> T?) -> UnfoldSequence<T, State>\n               \
    \        ^\n/tmp/tmplppdisqu.swift:19:12: error: cannot convert return expression\
    \ of type 'UnfoldSequence<T, Int>' to return type '[Int]'\n    return sequence(start:\
    \ 3, end: n + 1) {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplppdisqu.swift:19:12:\
    \ error: generic parameter 'T' could not be inferred\n    return sequence(start:\
    \ 3, end: n + 1) {\n           ^\nSwift.sequence:1:24: note: in call to function\
    \ 'sequence(state:next:)'\n@inlinable public func sequence<T, State>(state: State,\
    \ next: @escaping (inout State) -> T?) -> UnfoldSequence<T, State>\n         \
    \              ^\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return sequence(n\
    \ - 1) + sequence(n - 2) + sequence(n + 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp80yd6p85.swift:19:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return sequence(n - 1) + sequence(n - 2) + sequence(n +\
    \ 1)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979943
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(1)\n        result.append(1)\n\
    \        result.append(1)\n        return result\n    }\n    if n == 1 {\n   \
    \     result.append(3)\n        return result\n    }\n    result.append(3)\n \
    \   var tmp1 = tri(n - 1)\n    var tmp2 = tri(n - 2)\n    for element in tmp1\
    \ {\n        result.append(element)\n    }\n    for element in tmp2 {\n      \
    \  result.append(element)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0c2t9lp8.swift:31:20: error: missing argument label 'n:' in call\n\
    \    var tmp1 = tri(n - 1)\n                   ^\n                   n: \n/tmp/tmp0c2t9lp8.swift:32:20:\
    \ error: missing argument label 'n:' in call\n    var tmp2 = tri(n - 2)\n    \
    \               ^\n                   n: \n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n\tvar firstFibo\
    \ = 3\n\tvar secondFibo = 1\n\tvar thirdFibo = 2\n\tvar result = [Int]()\n\t\n\
    \tfor var index = 0; index < n+1; index++ {\n\t\tif index%2 == 0 {\n\t\t\tfirstFibo\
    \ = firstFibo + secondFibo\n\t\t} else {\n\t\t\tfirstFibo = thirdFibo + secondFibo\n\
    \t\t}\n\t\t\n\t\tif index < n+1 {\n\t\t\tsecondFibo = secondFibo + thirdFibo\n\
    \t\t} else {\n\t\t\tsecondFibo = secondFibo + firstFibo\n\t\t}\n\t\t\n\t\tif index\
    \ < n+1 {\n\t\t\tthirdFibo = thirdFibo + firstFibo\n\t\t} else {\n\t\t\tthirdFibo\
    \ = thirdFibo + secondFibo\n\t\t}\n\t\t\n\t\tresult.append(firstFibo)\n\t}\n\t\
    \n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpv16vi6vw.swift:24:2: error: C-style for statement has been removed\
    \ in Swift 3\n        for var index = 0; index < n+1; index++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        return [1]\n    }\n    result.append(1)\n\
    \    if n >= 2 {\n        result.append(2)\n    }\n    if n >= 3 {\n        result.append(3)\n\
    \    }\n    var tmp: Int = 1\n    for _ in 0..<n + 1 {\n        result.append(tmp)\n\
    \        tmp += 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpuam9xh67/tmpuam9xh67.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57c96d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57c93cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57c93cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57c93ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuam9xh67                        0x000055af299b85ca <unavailable> + 5578

    5    libc.so.6                          0x00002b57c98c0460 __libc_start_main +
    245

    6    tmpuam9xh67                        0x000055af299b8209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return sequence(start:\
    \ 0, end: n + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6ugmoq97.swift:19:12: error: cannot convert return expression of\
    \ type 'UnfoldSequence<Int, (Int?, Bool)>' to return type '[Int]'\n    return\
    \ sequence(start: 0, end: n + 1)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6ugmoq97.swift:19:20: error: incorrect argument labels in call (have 'start:end:',\
    \ expected 'first:next:')\n    return sequence(start: 0, end: n + 1)\n       \
    \            ^~~~~~     ~~~\n                    first     next\n/tmp/tmp6ugmoq97.swift:19:38:\
    \ error: cannot convert value of type 'Int' to expected argument type '(Int) ->\
    \ Int?'\n    return sequence(start: 0, end: n + 1)\n                         \
    \            ^\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    let recurrence:\
    \ () -> [Int] = ({ [unowned self] in\n        var array: [Int] = []\n        array.append(self.0)\n\
    \        if n & 1 != 0 {\n            array.append(array[0] + array[1])\n    \
    \    }\n        if n > 2 {\n            array.append(array[0] + array[1] + array[2])\n\
    \        }\n        if n > 4 {\n            array.append(array[0] + array[1] +\
    \ array[2] + array[3])\n        }\n        array.removeLast()\n        return\
    \ array\n    })()\n    return recurrence()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmph4wno9_8.swift:19:47: error: cannot find 'self' in scope; did you\
    \ mean to use it in a type or extension context?\n    let recurrence: () -> [Int]\
    \ = ({ [unowned self] in\n                                              ^~~~\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var a: [Int]\
    \ = []\n    if n == 1 {\n        a.append(1)\n    } else {\n        a.append(tri(n-1))\n\
    \        if n % 2 == 0 {\n            a.append(tri(n-2))\n        } else {\n \
    \           a.append(tri(n-2) + tri(n+1))\n        }\n    }\n    return a\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp11iywcaj.swift:23:18: error: missing argument label 'contentsOf:'\
    \ in call\n        a.append(tri(n-1))\n                 ^\n                 contentsOf:\
    \ \n/tmp/tmp11iywcaj.swift:23:22: error: missing argument label 'n:' in call\n\
    \        a.append(tri(n-1))\n                     ^\n                     n: \n\
    /tmp/tmp11iywcaj.swift:25:22: error: missing argument label 'contentsOf:' in call\n\
    \            a.append(tri(n-2))\n                     ^\n                    \
    \ contentsOf: \n/tmp/tmp11iywcaj.swift:25:26: error: missing argument label 'n:'\
    \ in call\n            a.append(tri(n-2))\n                         ^\n      \
    \                   n: \n/tmp/tmp11iywcaj.swift:27:22: error: missing argument\
    \ label 'contentsOf:' in call\n            a.append(tri(n-2) + tri(n+1))\n   \
    \                  ^\n                     contentsOf: \n/tmp/tmp11iywcaj.swift:27:26:\
    \ error: missing argument label 'n:' in call\n            a.append(tri(n-2) +\
    \ tri(n+1))\n                         ^\n                         n: \n/tmp/tmp11iywcaj.swift:27:37:\
    \ error: missing argument label 'n:' in call\n            a.append(tri(n-2) +\
    \ tri(n+1))\n                                    ^\n                         \
    \           n: \n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return fibSeq(n:\
    \ n + 1).suffix(1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpn8nv46z8.swift:19:12: error: cannot find 'fibSeq' in scope\n  \
    \  return fibSeq(n: n + 1).suffix(1)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 1 {\n        return [3]\n    }\n    if n == 2 {\n        return [1, 3]\n   \
    \ }\n    var result = [Int](repeating: 0, count: n + 1)\n    var a = 0\n    var\
    \ b = 1\n    var c = 2\n    while a <= n {\n        if a % 2 == 0 {\n        \
    \    result[a] = b\n        } else {\n            result[a] = c\n        }\n \
    \       a += 1\n        c += 2\n        b += 1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjtylkg_m/tmpjtylkg_m.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade8d73cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade8d433b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade8d433988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade8d4327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjtylkg_m                        0x00005572f7ce64ea <unavailable> + 5354

    5    libc.so.6                          0x00002ade8d928460 __libc_start_main +
    245

    6    tmpjtylkg_m                        0x00005572f7ce6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    let result\
    \ = [1]\n    for i in 2..<n {\n        let tmp = result[i - 1]\n        result[i\
    \ - 1] = result[n - 1 - i] + result[n - 1 - i - 2]\n        result[n - 1 - i -\
    \ 2] = tmp\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpcru175mm.swift:22:15: error: cannot assign through subscript: 'result'\
    \ is a 'let' constant\n        result[i - 1] = result[n - 1 - i] + result[n -\
    \ 1 - i - 2]\n        ~~~~~~^\n/tmp/tmpcru175mm.swift:19:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let result = [1]\n    ^~~\n    var\n/tmp/tmpcru175mm.swift:23:15:\
    \ error: cannot assign through subscript: 'result' is a 'let' constant\n     \
    \   result[n - 1 - i - 2] = tmp\n        ~~~~~~^\n/tmp/tmpcru175mm.swift:19:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = [1]\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    switch n\
    \ {\n    case 2:\n        return [Int]([1])\n    case 3:\n        return [1, 2]\n\
    \    case 4:\n        return [3]\n    default:\n        var result = [Int](repeating:\
    \ 0, count: (n + 1))\n        result[0] = tri(n - 2) + tri(n - 1) + tri(n + 2)\n\
    \        result[n] = 1\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmphu2ylc_l.swift:28:45: error: cannot assign value of type 'Array<Int>'\
    \ to subscript of type 'Int'\n        result[0] = tri(n - 2) + tri(n - 1) + tri(n\
    \ + 2)\n                    ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n/tmp/tmphu2ylc_l.swift:28:25:\
    \ error: missing argument label 'n:' in call\n        result[0] = tri(n - 2) +\
    \ tri(n - 1) + tri(n + 2)\n                        ^\n                       \
    \ n: \n/tmp/tmphu2ylc_l.swift:28:38: error: missing argument label 'n:' in call\n\
    \        result[0] = tri(n - 2) + tri(n - 1) + tri(n + 2)\n                  \
    \                   ^\n                                     n: \n/tmp/tmphu2ylc_l.swift:28:51:\
    \ error: missing argument label 'n:' in call\n        result[0] = tri(n - 2) +\
    \ tri(n - 1) + tri(n + 2)\n                                                  ^\n\
    \                                                  n: \n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return sequence(n:\
    \ n).prefix(n + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqx51a1v3.swift:19:24: error: extra argument 'n' in call\n    return\
    \ sequence(n: n).prefix(n + 1)\n                   ~~~~^~\n/tmp/tmpqx51a1v3.swift:19:20:\
    \ error: missing arguments for parameters 'first', 'next' in call\n    return\
    \ sequence(n: n).prefix(n + 1)\n                   ^\nSwift.sequence:1:24: note:\
    \ 'sequence(first:next:)' declared here\n@inlinable public func sequence<T>(first:\
    \ T, next: @escaping (T) -> T?) -> UnfoldFirstSequence<T>\n                  \
    \     ^\n/tmp/tmpqx51a1v3.swift:19:27: error: cannot convert return expression\
    \ of type 'PrefixSequence<UnfoldSequence<T, (T?, Bool)>>' to return type '[Int]'\n\
    \    return sequence(n: n).prefix(n + 1)\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    func helper(n:\
    \ Int, res: [Int] = []) {\n        if n == 0 {\n            return res\n     \
    \   }\n        helper(n - 1, res + [res[res.endIndex-1] + res[res.endIndex-2]])\n\
    \        helper(n - 1, res)\n    }\n    return helper(n)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqwucz20_.swift:21:20: error: unexpected non-void return value in\
    \ void function\n            return res\n                   ^\n/tmp/tmpqwucz20_.swift:21:20:\
    \ note: did you mean to add a return type?\n            return res\n         \
    \          ^\n/tmp/tmpqwucz20_.swift:23:15: error: missing argument labels 'n:res:'\
    \ in call\n        helper(n - 1, res + [res[res.endIndex-1] + res[res.endIndex-2]])\n\
    \              ^\n               n:     res: \n/tmp/tmpqwucz20_.swift:24:15: error:\
    \ missing argument labels 'n:res:' in call\n        helper(n - 1, res)\n     \
    \         ^\n               n:     res: \n/tmp/tmpqwucz20_.swift:26:19: error:\
    \ missing argument label 'n:' in call\n    return helper(n)\n                \
    \  ^\n                  n: \n/tmp/tmpqwucz20_.swift:26:12: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return helper(n)\n\
    \           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr\
    \ = [Int]()\n    var firstTwo = [Int]()\n    if n == 1 {\n        arr += firstTwo\n\
    \        return arr\n    }\n    if n == 2 {\n        arr += [2]\n        return\
    \ arr\n    }\n    var firstTwoFive = [Int]()\n    firstTwoFive.append(0)\n   \
    \ firstTwoFive.append(1)\n    for _ in 0..<n {\n        firstTwoFive.append(0)\n\
    \        firstTwoFive.append(1)\n    }\n    for i in 2..<n {\n        firstTwoFive.append(0)\n\
    \        firstTwoFive.append(1)\n        for j in 0..<i {\n            firstTwoFive.append(1)\n\
    \        }\n        arr.append(firstTwoFive[0])\n        for j in 1..<n-2 {\n\
    \            firstTwoFive[j] = firstTwoFive[j-1] + firstTwoFive[j]\n         \
    \   arr.append(firstTwoFive[j])\n        }\n    }\n    return arr\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmplfrn2tac/tmplfrn2tac.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad700b8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad700882b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad700882988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7008817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplfrn2tac                        0x000055a0f5fd46ca <unavailable> + 5834

    5    libc.so.6                          0x00002ad700d77460 __libc_start_main +
    245

    6    tmplfrn2tac                        0x000055a0f5fd4309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // Write\
    \ your code here\n    var fib: [Int] = []\n    if n == 0 {\n        return fib\n\
    \    }\n    fib[0] = 0\n    fib[1] = 1\n    if n % 2 == 1 {\n        fib[2] =\
    \ fib[1] + fib[0]\n    } else {\n        fib[2] = fib[1] + fib[0] + fib[0]\n \
    \   }\n    for i in 2...n / 2 {\n        fib[i] = fib[i - 1] + fib[i - 2]\n  \
    \  }\n    return fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6eaadf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6eaaaf0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6eaaaf0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6eaaaf013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6eaaaefbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6eaa8ef7ec <unavailable> + 186348

    6    tmpeg7wfzaa                        0x00005651e81a910a <unavailable> + 8458

    7    tmpeg7wfzaa                        0x00005651e81a84db <unavailable> + 5339

    8    libc.so.6                          0x00002b6eaafe5460 __libc_start_main +
    245

    9    tmpeg7wfzaa                        0x00005651e81a81f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var tri:\
    \ [Int] = [1]\n    for number in tri {\n        tri.append(number + number / 2)\n\
    \    }\n    \n    if n % 2 == 0 {\n        var sum = 0\n        for number in\
    \ tri {\n            sum += number\n        }\n        \n        for number in\
    \ tri {\n            tri.append(sum + number)\n        }\n    }\n    return tri\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmphub0fqjz/tmphub0fqjz.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac829564c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82925bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac82925b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac82925a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphub0fqjz                        0x000055bbf791b5ea <unavailable> + 5610

    5    libc.so.6                          0x00002ac829750460 __libc_start_main +
    245

    6    tmphub0fqjz                        0x000055bbf791b229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return fib(n:\
    \ n).prefix(n: n + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmplkjcd6vd.swift:19:12: error: cannot find 'fib' in scope\n    return\
    \ fib(n: n).prefix(n: n + 1)\n           ^~~\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var ans\
    \ = [Int]()\n    \n    var one = 0\n    var two = 1\n    \n    var three = two\n\
    \    \n    var lastThree = one + two + three\n    \n    for _ in 0..<n+1 {\n \
    \       \n        if n == 0 {\n            \n            ans.append(one)\n   \
    \         \n        } else if n == 1 {\n            \n            ans.append(two)\n\
    \            \n        } else {\n            \n            ans.append(lastThree)\n\
    \            \n            one += two\n            two += three\n            three\
    \ += lastThree\n            \n            lastThree = one + two + three\n    \
    \        \n        }\n    }\n    \n    return ans\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp1fmcgqll/tmp1fmcgqll.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52488acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52485a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52485a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52485a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1fmcgqll                        0x00005606a0a135ca <unavailable> + 5578

    5    libc.so.6                          0x00002b5248a98460 __libc_start_main +
    245

    6    tmp1fmcgqll                        0x00005606a0a13209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return sequence(n:\
    \ n).prefix(by: n + 1).map { ($0 + $1 + $2) / 2 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp01hpxsqm.swift:19:24: error: extra argument 'n' in call\n    return\
    \ sequence(n: n).prefix(by: n + 1).map { ($0 + $1 + $2) / 2 }\n              \
    \     ~~~~^~\n/tmp/tmp01hpxsqm.swift:19:20: error: missing arguments for parameters\
    \ 'first', 'next' in call\n    return sequence(n: n).prefix(by: n + 1).map { ($0\
    \ + $1 + $2) / 2 }\n                   ^\nSwift.sequence:1:24: note: 'sequence(first:next:)'\
    \ declared here\n@inlinable public func sequence<T>(first: T, next: @escaping\
    \ (T) -> T?) -> UnfoldFirstSequence<T>\n                       ^\n/tmp/tmp01hpxsqm.swift:19:33:\
    \ error: extraneous argument label 'by:' in call\n    return sequence(n: n).prefix(by:\
    \ n + 1).map { ($0 + $1 + $2) / 2 }\n                                ^~~~~\n \
    \                                \n"
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var firstNum\
    \ = 0\n    var secondNum = 1\n    var thirdNum = 2\n    var fourthNum = 3\n  \
    \  var fifthNum = 4\n    \n    for i in 0..<n+1 {\n        var sum = firstNum\
    \ + secondNum\n        if sum > 4 {\n            secondNum = firstNum + thirdNum\n\
    \            thirdNum = secondNum + fourthNum\n            fourthNum = thirdNum\
    \ + fifthNum\n            fifthNum = fourthNum + firstNum\n        }\n       \
    \ firstNum = secondNum\n        secondNum = thirdNum\n        thirdNum = fourthNum\n\
    \        fourthNum = fifthNum\n        fifthNum = sum\n    }\n    \n    var result\
    \ = [Int]()\n    \n    result.append(firstNum)\n    result.append(secondNum)\n\
    \    result.append(thirdNum)\n    result.append(fourthNum)\n    result.append(fifthNum)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmptnlvvtlm/tmptnlvvtlm.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8364e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8361d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8361d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8361d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptnlvvtlm                        0x000055e6c68545ca <unavailable> + 5578

    5    libc.so.6                          0x00002ab8366cc460 __libc_start_main +
    245

    6    tmptnlvvtlm                        0x000055e6c6854209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // write\
    \ your code in Swift 4.2\n    var a = Int(0)\n    var b = Int(1)\n    var c =\
    \ [Int]()\n    var n2 = n / 2\n    while n >= 0 {\n        c = [a, b, b+n2]\n\
    \        n = n2 - 1\n        b.updateValue(b+n2, for: 2)\n        a = b\n    }\n\
    \    c = [a, b, c[1]]\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6kxlicb0.swift:26:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n2 - 1\n        ^\n/tmp/tmp6kxlicb0.swift:27:11: error:\
    \ value of type 'Int' has no member 'updateValue'\n        b.updateValue(b+n2,\
    \ for: 2)\n        ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return sequenceFrom(n:\
    \ n, func: Tribonacci)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6y93ly49.swift:19:12: error: cannot find 'sequenceFrom' in scope\n\
    \    return sequenceFrom(n: n, func: Tribonacci)\n           ^~~~~~~~~~~~\n/tmp/tmp6y93ly49.swift:19:37:\
    \ error: cannot find 'Tribonacci' in scope\n    return sequenceFrom(n: n, func:\
    \ Tribonacci)\n                                    ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    result.append(3)\n    \n    if n%2 == 0 {\n        for\
    \ var i = 3; i <= n; i++ {\n            result.append(i)\n        }\n    }\n \
    \   else {\n        for var i = 2; i < n; i++ {\n            result.append(i)\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp7bmr9moa.swift:24:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 3; i <= n; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7bmr9moa.swift:29:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for var i = 2; i < n; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ >= 0 else { return [] }\n    let sums = [1, 3, 5]\n    let sumArray = sums.lazy.map{_\
    \ in 0}\n    var sum = 0\n    return sumArray\n        .map {\n            if\
    \ n % ($0 + 1) == 0 {\n                sum += $0\n            }\n            sum\
    \ += $0 + 1\n            return sum\n        }\n        .lazy.map{ $0 + $1 + $2\
    \ }\n        .dropFirst()\n        .reduce(into: [0])\n        .dropFirst()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "error: compile command failed due to signal 6 (use -v to see invocation)\n\
    swift-frontend: /home/build-user/swift/include/swift/Sema/ConstraintSystem.h:546:\
    \ void swift::TypeVariableType::Implementation::assignFixedType(swift::Type, constraints::SavedTypeVariableBindings\
    \ *): Assertion `(!getFixedType(0) || getFixedType(0)->isEqual(type)) && \"Already\
    \ has a fixed type!\"' failed.\nPlease submit a bug report (https://swift.org/contributing/#reporting-bugs)\
    \ and include the project and the crash backtrace.\nStack dump:\n0.\tProgram arguments:\
    \ /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/bin/swift-frontend\
    \ -frontend -c -primary-file /tmp/tmp7znsj_qr.swift -target x86_64-unknown-linux-gnu\
    \ -disable-objc-interop -new-driver-path /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/bin/swift-driver\
    \ -empty-abi-descriptor -resource-dir /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/lib/swift\
    \ -module-name tmp7znsj_qr -o /tmp/TemporaryDirectory.OAUlkI/tmp7znsj_qr-1.o\n\
    1.\tSwift version 5.8-dev (LLVM 07d14852a049e40, Swift 613b3223d9ec5f6)\n2.\t\
    Compiling with the current language version\n3.\tWhile evaluating request TypeCheckSourceFileRequest(source_file\
    \ \"/tmp/tmp7znsj_qr.swift\")\n4.\tWhile evaluating request TypeCheckFunctionBodyRequest(tmp7znsj_qr.(file).tri(n:)@/tmp/tmp7znsj_qr.swift:18:6)\n\
    5.\tWhile type-checking statement at [/tmp/tmp7znsj_qr.swift:18:27 - line:35:1]\
    \ RangeText=\"{\n    guard n >= 0 else { return [] }\n    let sums = [1, 3, 5]\n\
    \    let sumArray = sums.lazy.map{_ in 0}\n    var sum = 0\n    return sumArray\n\
    \        .map {\n            if n % ($0 + 1) == 0 {\n                sum += $0\n\
    \            }\n            sum += $0 + 1\n            return sum\n        }\n\
    \        .lazy.map{ $0 + $1 + $2 }\n        .dropFirst()\n        .reduce(into:\
    \ [0])\n        .dropFirst()\n\"\n6.\tWhile type-checking statement at [/tmp/tmp7znsj_qr.swift:23:5\
    \ - line:34:20] RangeText=\"return sumArray\n        .map "
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n\treturn fibonacci(to:\
    \ n+1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2,\
    \ 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8,\
    \ 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\
    assert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpd2n1lxai.swift:19:9: error: cannot find 'fibonacci' in scope\n\
    \        return fibonacci(to: n+1)\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return sequence(n\
    \ - 1) + sequence(n - 2) + sequence(n + 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp80yd6p85.swift:19:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return sequence(n - 1) + sequence(n - 2) + sequence(n +\
    \ 1)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979943
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // write\
    \ your code in Swift 4.2\n    var result = [1]\n    for i in 2...n {\n       \
    \ result.append(result[result.count - 1] + result[result.count - 2])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b77b64dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77b61d6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b77b61d6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b77b61d613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b77b61d5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b77b5fd5e83 <unavailable> + 188035

    6    tmpx6glpqiv                        0x0000560776b212ca <unavailable> + 8906

    7    tmpx6glpqiv                        0x0000560776b2053b <unavailable> + 5435

    8    libc.so.6                          0x00002b77b66cb460 __libc_start_main +
    245

    9    tmpx6glpqiv                        0x0000560776b20259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n < 3\
    \ {\n        return []\n    }\n    let array = [Int]()\n    if n & 1 == 0 {\n\
    \        array.append(1)\n        array.append(n / 2)\n    } else {\n        array.append(1)\n\
    \        array.append(n)\n        array.append(n)\n    }\n    return array\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0x8owcw0.swift:24:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.append(1)\n        ~~~~~ ^\n\
    /tmp/tmp0x8owcw0.swift:22:5: note: change 'let' to 'var' to make it mutable\n\
    \    let array = [Int]()\n    ^~~\n    var\n/tmp/tmp0x8owcw0.swift:25:15: error:\
    \ cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \        array.append(n / 2)\n        ~~~~~ ^\n/tmp/tmp0x8owcw0.swift:22:5: note:\
    \ change 'let' to 'var' to make it mutable\n    let array = [Int]()\n    ^~~\n\
    \    var\n/tmp/tmp0x8owcw0.swift:27:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.append(1)\n        ~~~~~ ^\n\
    /tmp/tmp0x8owcw0.swift:22:5: note: change 'let' to 'var' to make it mutable\n\
    \    let array = [Int]()\n    ^~~\n    var\n/tmp/tmp0x8owcw0.swift:28:15: error:\
    \ cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \        array.append(n)\n        ~~~~~ ^\n/tmp/tmp0x8owcw0.swift:22:5: note:\
    \ change 'let' to 'var' to make it mutable\n    let array = [Int]()\n    ^~~\n\
    \    var\n/tmp/tmp0x8owcw0.swift:29:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.append(n)\n        ~~~~~ ^\n\
    /tmp/tmp0x8owcw0.swift:22:5: note: change 'let' to 'var' to make it mutable\n\
    \    let array = [Int]()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var array\
    \ = [1]\n    if n == 0 {\n        array[0] = 0\n        return array\n    }\n\
    \    if n % 2 == 0 {\n        array[0] = 1 + tri(n-1)\n        array[1] = tri(n\
    \ - 2) + tri(n - 1) + array[0]\n    } else {\n        array[0] = 1 + tri(n - 1)\
    \ + tri(n + 1) + tri(n - 2)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpvk50nmtp.swift:25:24: error: cannot convert value of type '[Int]'\
    \ to expected argument type 'Int'\n        array[0] = 1 + tri(n-1)\n         \
    \              ^\n/tmp/tmpvk50nmtp.swift:25:28: error: missing argument label\
    \ 'n:' in call\n        array[0] = 1 + tri(n-1)\n                           ^\n\
    \                           n: \n/tmp/tmpvk50nmtp.swift:26:44: error: cannot assign\
    \ value of type 'Array<Int>' to subscript of type 'Int'\n        array[1] = tri(n\
    \ - 2) + tri(n - 1) + array[0]\n                   ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\n\
    /tmp/tmpvk50nmtp.swift:26:24: error: missing argument label 'n:' in call\n   \
    \     array[1] = tri(n - 2) + tri(n - 1) + array[0]\n                       ^\n\
    \                       n: \n/tmp/tmpvk50nmtp.swift:26:37: error: missing argument\
    \ label 'n:' in call\n        array[1] = tri(n - 2) + tri(n - 1) + array[0]\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpvk50nmtp.swift:26:51: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Array<Int>'\n        array[1] = tri(n - 2) + tri(n -\
    \ 1) + array[0]\n                                                  ^\n/tmp/tmpvk50nmtp.swift:28:48:\
    \ error: cannot assign value of type 'Array<Int>' to subscript of type 'Int'\n\
    \        array[0] = 1 + tri(n - 1) + tri(n + 1) + tri(n - 2)\n               \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n/tmp/tmpvk50nmtp.swift:28:20: error:\
    \ cannot convert value of type 'Int' to expected argument type 'Array<Int>'\n\
    \        array[0] = 1 + tri(n - 1) + tri(n + 1) + tri(n - 2)\n               \
    \    ^\n/tmp/tmpvk50nmtp.swift:28:28: error: missing argument label 'n:' in call\n\
    \        array[0] = 1 + tri(n - 1) + tri(n + 1) + tri(n - 2)\n               \
    \            ^\n                           n: \n/tmp/tmpvk50nmtp.swift:28:41:\
    \ error: missing argument label 'n:' in call\n        array[0] = 1 + tri(n - 1)\
    \ + tri(n + 1) + tri(n - 2)\n                                        ^\n     \
    \                                   n: \n/tmp/tmpvk50nmtp.swift:28:54: error:\
    \ missing argument label 'n:' in call\n    "
  stdout: ''
  timestamp: 1659979919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n < 0\
    \ {\n        return []\n    }\n    var fib0 = 0\n    var fib1 = 1\n    var fib2\
    \ = 2\n    var fib3 = 3\n    var fib4 = 1\n    var fib5 = 3\n    var fib6 = 2\n\
    \    var fib7 = 8\n    var fib8 = 4\n    var fib9 = 3\n    var fib10 = fib8 +\
    \ fib9\n    var fib11 = 3 + fib10\n    var fib12 = fib11 + fib12\n    var fib13\
    \ = 2 + fib12\n    var fib14 = fib13 + fib14\n    var fib15 = fib14 + fib15\n\
    \    var fib16 = 1 + fib15\n    var fib17 = fib16 + fib17\n    var fib18 = fib17\
    \ + fib18\n    var fib19 = fib18 + fib19\n    var fib20 = 2 + fib19\n    var fib21\
    \ = fib20 + fib21\n    var fib22 = fib21 + fib22\n    var fib23 = 1 + fib22\n\
    \    var fib24 = fib23 + fib24\n    var fib25 = fib24 + fib25\n    var fib26 =\
    \ 2 + fib25\n    var fib27 = fib26 + fib27\n    var fib28 = fib27 + fib28\n  \
    \  var fib29 = fib28 + fib29\n    var fib30 = 1 + fib29\n    var fib31 = fib30\
    \ + fib31\n    var fib32 = fib31 + fib32\n    var fib33 = 2 + fib32\n    var fib34\
    \ = fib33 + fib34\n    var fib35 = fib34 + fib35\n    var fib36 = 1 + fib35\n\
    \    var fib37 = fib36 + fib37\n    var fib38 = fib37 + fib38\n    var fib39 =\
    \ fib38 + fib39\n    var fib40 = 1 + fib39\n    var fib41 = fib40 + fib41\n  \
    \  var fib42 = fib41 + fib42\n    var fib43 = 2 + fib42\n    var fib44 = fib43\
    \ + fib44\n    var fib45 = fib44 + fib45\n    var fib46 = 1 + fib45\n    var fib47\
    \ = fib46 + fib47\n    var fib48 = fib47 + fib48\n    var fib49 = fib48 + fib49\n\
    \    var fib50 = 2 + fib49\n    var fib51 = fib50 + fib51\n    var fib52 = fib51\
    \ + fib52\n    var fib53 = 1 + fib52\n    var fib54 = fib53 + fib54\n    var fib55\
    \ = fib54 + fib55\n    var fib56 = 2 + fib55\n    var fib57 = fib56 + fib57\n\
    \    var fib58 = fib57\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmppzahkq3n.swift:34:25: error: use of local variable 'fib12' before\
    \ its declaration\n    var fib12 = fib11 + fib12\n                        ^\n\
    /tmp/tmppzahkq3n.swift:34:9: note: 'fib12' declared here\n    var fib12 = fib11\
    \ + fib12\n        ^\n/tmp/tmppzahkq3n.swift:36:25: error: use of local variable\
    \ 'fib14' before its declaration\n    var fib14 = fib13 + fib14\n            \
    \            ^\n/tmp/tmppzahkq3n.swift:36:9: note: 'fib14' declared here\n   \
    \ var fib14 = fib13 + fib14\n        ^\n/tmp/tmppzahkq3n.swift:37:25: error: use\
    \ of local variable 'fib15' before its declaration\n    var fib15 = fib14 + fib15\n\
    \                        ^\n/tmp/tmppzahkq3n.swift:37:9: note: 'fib15' declared\
    \ here\n    var fib15 = fib14 + fib15\n        ^\n/tmp/tmppzahkq3n.swift:39:25:\
    \ error: use of local variable 'fib17' before its declaration\n    var fib17 =\
    \ fib16 + fib17\n                        ^\n/tmp/tmppzahkq3n.swift:39:9: note:\
    \ 'fib17' declared here\n    var fib17 = fib16 + fib17\n        ^\n/tmp/tmppzahkq3n.swift:40:25:\
    \ error: use of local variable 'fib18' before its declaration\n    var fib18 =\
    \ fib17 + fib18\n                        ^\n/tmp/tmppzahkq3n.swift:40:9: note:\
    \ 'fib18' declared here\n    var fib18 = fib17 + fib18\n        ^\n/tmp/tmppzahkq3n.swift:41:25:\
    \ error: use of local variable 'fib19' before its declaration\n    var fib19 =\
    \ fib18 + fib19\n                        ^\n/tmp/tmppzahkq3n.swift:41:9: note:\
    \ 'fib19' declared here\n    var fib19 = fib18 + fib19\n        ^\n/tmp/tmppzahkq3n.swift:43:25:\
    \ error: use of local variable 'fib21' before its declaration\n    var fib21 =\
    \ fib20 + fib21\n                        ^\n/tmp/tmppzahkq3n.swift:43:9: note:\
    \ 'fib21' declared here\n    var fib21 = fib20 + fib21\n        ^\n/tmp/tmppzahkq3n.swift:44:25:\
    \ error: use of local variable 'fib22' before its declaration\n    var fib22 =\
    \ fib21 + fib22\n                        ^\n/tmp/tmppzahkq3n.swift:44:9: note:\
    \ 'fib22' declared here\n    var fib22 = fib21 + fib22\n        ^\n/tmp/tmppzahkq3n.swift:46:25:\
    \ error: use of local variable 'fib24' before its declaration\n    var fib24 "
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr\
    \ = [Int]()\n    \n    switch n {\n    case 0:\n        arr.append(0)\n      \
    \  arr.append(0)\n        arr.append(1)\n        return arr\n    case 1:\n   \
    \     arr.append(0)\n        arr.append(0)\n        arr.append(1)\n        return\
    \ arr\n    case 2:\n        arr.append(0)\n        arr.append(1)\n        return\
    \ arr\n    default:\n        arr.append(1)\n        arr.append(n/2)\n        arr.append(n-1)\n\
    \        return arr\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpus5f1lma/tmpus5f1lma.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b348ee37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b348eb2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b348eb2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b348eb2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpus5f1lma                        0x00005622556794da <unavailable> + 5338

    5    libc.so.6                          0x00002b348f023460 __libc_start_main +
    245

    6    tmpus5f1lma                        0x0000562255679119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return triHelper(n,\
    \ 2, 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2,\
    \ 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8,\
    \ 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\
    assert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpb_6of5du.swift:19:12: error: cannot find 'triHelper' in scope\n\
    \    return triHelper(n, 2, 3)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return sequence(&tri(n:\
    \ n - 1) + tri(n - 2) + tri(n + 1), length: n + 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpv6vd0mbx.swift:19:20: error: incorrect argument labels in call\
    \ (have '_:length:', expected 'first:next:')\n    return sequence(&tri(n: n -\
    \ 1) + tri(n - 2) + tri(n + 1), length: n + 2)\n                   ^         \
    \                                 ~~~~~~\n                    first:         \
    \                           next\n/tmp/tmpv6vd0mbx.swift:19:12: error: cannot\
    \ convert return expression of type 'UnfoldSequence<[Int], ([Int]?, Bool)>' to\
    \ return type '[Int]'\n    return sequence(&tri(n: n - 1) + tri(n - 2) + tri(n\
    \ + 1), length: n + 2)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpv6vd0mbx.swift:19:73: error: cannot convert value of type 'Int' to expected\
    \ argument type '([Int]) -> [Int]?'\n    return sequence(&tri(n: n - 1) + tri(n\
    \ - 2) + tri(n + 1), length: n + 2)\n                                        \
    \                                ^\n/tmp/tmpv6vd0mbx.swift:19:21: error: cannot\
    \ pass immutable value as inout argument: 'tri' returns immutable value\n    return\
    \ sequence(&tri(n: n - 1) + tri(n - 2) + tri(n + 1), length: n + 2)\n        \
    \            ^~~~~~~~~~~~~~\n/tmp/tmpv6vd0mbx.swift:19:21: error: '&' used with\
    \ non-inout argument of type 'Array<Int>'\n    return sequence(&tri(n: n - 1)\
    \ + tri(n - 2) + tri(n + 1), length: n + 2)\n                    ^~~~~~~~~~~~~~\n\
    \                    \n/tmp/tmpv6vd0mbx.swift:19:42: error: missing argument label\
    \ 'n:' in call\n    return sequence(&tri(n: n - 1) + tri(n - 2) + tri(n + 1),\
    \ length: n + 2)\n                                         ^\n               \
    \                          n: \n/tmp/tmpv6vd0mbx.swift:19:55: error: missing argument\
    \ label 'n:' in call\n    return sequence(&tri(n: n - 1) + tri(n - 2) + tri(n\
    \ + 1), length: n + 2)\n                                                     \
    \ ^\n                                                      n: \n"
  stdout: ''
  timestamp: 1659979920
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var firstThreeFibo\
    \ = [0]\n    var nextTribo = 1\n    for _ in 0..<n {\n        firstThreeFibo.append(nextTribo)\n\
    \        nextTribo += nextTribo\n    }\n    return firstThreeFibo\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpk18_e65s/tmpk18_e65s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4c038cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4c0083b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4c0083988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4c00827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk18_e65s                        0x00005594ed9c556a <unavailable> + 5482

    5    libc.so.6                          0x00002ae4c0578460 __libc_start_main +
    245

    6    tmpk18_e65s                        0x00005594ed9c51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int](repeating: 0, count: (n + 1) * 2)\n    result[n] = 1\n    for i = 2\
    \ to n / 2 {\n        result[i] = result[i - 1] + result[i - 2] + result[i + 2]\n\
    \    }\n    result[n / 2] = result[n]\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8qony33x.swift:21:11: error: expected 'in' after for-each pattern\n\
    \    for i = 2 to n / 2 {\n          ^\n/tmp/tmp8qony33x.swift:21:11: error: expected\
    \ Sequence expression for for-each loop\n    for i = 2 to n / 2 {\n          ^\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    let fibs\
    \ = [0, 1, 1]\n    let result = fibs[Int(n) - 2] + fibs[Int(n) - 1] + fibs[Int(n)]\n\
    \    return Array(1...n).map { fibs[Int($0) - 1] + result }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b687e87ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b687e575561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b687e575286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b687e57513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b687e574bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b687e374e83 <unavailable> + 188035

    6    tmp1dql72io                        0x0000556d1a8523e6 <unavailable> + 9190

    7    tmp1dql72io                        0x0000556d1a85167b <unavailable> + 5755

    8    libc.so.6                          0x00002b687ea6a460 __libc_start_main +
    245

    9    tmp1dql72io                        0x0000556d1a851399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var array:\
    \ [Int] = []\n    \n    func compute(_ i: Int, _ j: Int) {\n        if i == 1\
    \ {\n            array.append(j)\n        } else if j == 1 {\n            array.append(i\
    \ + j)\n        } else {\n            array.append(tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) + tri(i + 2))\n        }\n    }\n    \n    compute(n, 1)\n    compute(n,\
    \ 2)\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpaih1d4zz.swift:27:26: error: missing argument label 'contentsOf:'\
    \ in call\n            array.append(tri(i - 1) + tri(i - 2) + tri(i + 1) + tri(i\
    \ + 2))\n                         ^\n                         contentsOf: \n/tmp/tmpaih1d4zz.swift:27:30:\
    \ error: missing argument label 'n:' in call\n            array.append(tri(i -\
    \ 1) + tri(i - 2) + tri(i + 1) + tri(i + 2))\n                             ^\n\
    \                             n: \n/tmp/tmpaih1d4zz.swift:27:43: error: missing\
    \ argument label 'n:' in call\n            array.append(tri(i - 1) + tri(i - 2)\
    \ + tri(i + 1) + tri(i + 2))\n                                          ^\n  \
    \                                        n: \n/tmp/tmpaih1d4zz.swift:27:56: error:\
    \ missing argument label 'n:' in call\n            array.append(tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) + tri(i + 2))\n                                          \
    \             ^\n                                                       n: \n\
    /tmp/tmpaih1d4zz.swift:27:69: error: missing argument label 'n:' in call\n   \
    \         array.append(tri(i - 1) + tri(i - 2) + tri(i + 1) + tri(i + 2))\n  \
    \                                                                  ^\n       \
    \                                                             n: \n"
  stdout: ''
  timestamp: 1659979926
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var ret\
    \ = [Int]()\n    if n > 1 {\n        ret.append(1)\n        if n % 2 == 0 {\n\
    \            ret.append(ret[ret.count-2] + ret[ret.count-1] + ret[ret.count])\n\
    \        } else {\n            ret.append(ret[ret.count-2] + ret[ret.count])\n\
    \        }\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a3ea87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a3e77e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8a3e77e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8a3e77e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8a3e77dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8a3e57de83 <unavailable> + 188035

    6    tmplct4kw5h                        0x000055eac5c642b7 <unavailable> + 8887

    7    tmplct4kw5h                        0x000055eac5c6349b <unavailable> + 5275

    8    libc.so.6                          0x00002b8a3ec73460 __libc_start_main +
    245

    9    tmplct4kw5h                        0x000055eac5c631b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = []\n    for n in 0 ..< n {\n        if n % 2 == 0 {\n            result.insert(result.last!\
    \ + result.last! + result.last!, n)\n        } else {\n            result.insert(result.last!\
    \ + result.last! + result.last!, n)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpd9h2kh6g.swift:22:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(result.last! + result.last! + result.last!,\
    \ n)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpd9h2kh6g.swift:24:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(result.last! + result.last!\
    \ + result.last!, n)\n                   ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var a =\
    \ [Int]()\n    var temp = 0\n    for _ in 0..<n {\n        if n % 2 == 1 {\n \
    \           temp += n\n        } else {\n            temp += (n-1) + n-2\n   \
    \     }\n        a.append(temp)\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp70hffe87/tmp70hffe87.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b513c851c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b513c548b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b513c548988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b513c5477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70hffe87                        0x00005652bf3245ca <unavailable> + 5578

    5    libc.so.6                          0x00002b513ca3d460 __libc_start_main +
    245

    6    tmp70hffe87                        0x00005652bf324209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = []\n    let base = 3\n    let limit = Int(ceil(sqrt(Double(n))))\n\n\
    \    for i in 1...limit {\n        var j = 2 * i\n        \n        if n % 2 ==\
    \ 0 {\n            j += i\n        }\n\n        result.append(j)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpd210040f.swift:21:21: error: cannot find 'ceil' in scope\n    let\
    \ limit = Int(ceil(sqrt(Double(n))))\n                    ^~~~\n/tmp/tmpd210040f.swift:21:26:\
    \ error: cannot find 'sqrt' in scope\n    let limit = Int(ceil(sqrt(Double(n))))\n\
    \                         ^~~~\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1]\n    if n == 0 {\n        return result\n    }\n    for i in 1..<(2 *\
    \ n) {\n        if n%2 == 0 {\n            result.append(result[i-1] + result[i-2])\n\
    \        } else {\n            result.append(result[i-1] + result[i-2] + (n-1)/2)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b493112ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4930e21561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4930e21286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4930e2113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4930e20bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4930c20e83 <unavailable> + 188035

    6    tmptcjmhal4                        0x0000564c586c43fb <unavailable> + 9211

    7    tmptcjmhal4                        0x0000564c586c34eb <unavailable> + 5355

    8    libc.so.6                          0x00002b4931316460 __libc_start_main +
    245

    9    tmptcjmhal4                        0x0000564c586c3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    switch n\
    \ {\n    case 1:\n        return [3]\n    case 2:\n        return [1, 3]\n   \
    \ case 3:\n        return [1, 3, 5]\n    case 4:\n        return [1, 3, 5, 8]\n\
    \    case 5:\n        return [1, 3, 5, 8, 13]\n    default:\n        return fib(n:\
    \ n).dropFirst()\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp11dd8tx_.swift:31:16: error: cannot find 'fib' in scope\n     \
    \   return fib(n: n).dropFirst()\n               ^~~\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // base\
    \ case\n    if n < 3 {\n        return [Int](repeating: 1, count: n + 1 )\n  \
    \  }\n    // recursive step\n    return tri(n-1) + tri(n-2) + tri(n + 1) + 1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0doxh9lw.swift:24:16: error: missing argument label 'n:' in call\n\
    \    return tri(n-1) + tri(n-2) + tri(n + 1) + 1\n               ^\n         \
    \      n: \n/tmp/tmp0doxh9lw.swift:24:27: error: missing argument label 'n:' in\
    \ call\n    return tri(n-1) + tri(n-2) + tri(n + 1) + 1\n                    \
    \      ^\n                          n: \n/tmp/tmp0doxh9lw.swift:24:38: error:\
    \ missing argument label 'n:' in call\n    return tri(n-1) + tri(n-2) + tri(n\
    \ + 1) + 1\n                                     ^\n                         \
    \            n: \n/tmp/tmp0doxh9lw.swift:24:47: error: cannot convert value of\
    \ type 'Int' to expected argument type 'Array<Int>'\n    return tri(n-1) + tri(n-2)\
    \ + tri(n + 1) + 1\n                                              ^\n"
  stdout: ''
  timestamp: 1659979922
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    result[0] = 3\n    if n % 2 == 1 {\n        result[1] = 1 + n\
    \ / 2\n    }\n    else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    }\n    \n    \n    for index in 2...n + 1 {\n        result.append(result[index\
    \ - 2] + result[index - 1])\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpcf2bthfz.swift:25:45: error: cannot assign value of type 'Array<Int>'\
    \ to subscript of type 'Int'\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n                    ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n/tmp/tmpcf2bthfz.swift:25:25:\
    \ error: missing argument label 'n:' in call\n        result[1] = tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n                        ^\n                       \
    \ n: \n/tmp/tmpcf2bthfz.swift:25:38: error: missing argument label 'n:' in call\n\
    \        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n                  \
    \                   ^\n                                     n: \n/tmp/tmpcf2bthfz.swift:25:51:\
    \ error: missing argument label 'n:' in call\n        result[1] = tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n                                                  ^\n\
    \                                                  n: \n"
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n < 2 {\n        return result\n    }\n    \n    var fib =\
    \ [0]\n    for _ in 1..<n {\n        fib.append(1 + fib[fib.count-1] + fib[fib.count-2])\n\
    \    }\n    \n    for _ in 0 ..< n-1 {\n        result.append(fib[n-1])\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b073d620c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b073d317561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b073d317286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b073d31713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b073d316bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b073d116e83 <unavailable> + 188035

    6    tmpmq2fx7p3                        0x000055ab393c938a <unavailable> + 9098

    7    tmpmq2fx7p3                        0x000055ab393c859b <unavailable> + 5531

    8    libc.so.6                          0x00002b073d80c460 __libc_start_main +
    245

    9    tmpmq2fx7p3                        0x000055ab393c82b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // Write\
    \ your code here\n    var result = [Int]()\n    result.append(3)\n    var count\
    \ = 0\n    if n <= 3 {\n        result.append(1)\n        count = n\n    }else{\n\
    \        let third = n/3\n        var firstThird = third\n        var secondThird\
    \ = third\n        while count < n{\n            let sum = firstThird + secondThird\n\
    \            result.append(sum)\n            firstThird = secondThird\n      \
    \      secondThird = sum\n            count+=1\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpe_t7ou3e/tmpe_t7ou3e.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ee0b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ee0801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ee0801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ee08007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe_t7ou3e                        0x0000556694bc64da <unavailable> + 5338

    5    libc.so.6                          0x00002b0ee0cf6460 __libc_start_main +
    245

    6    tmpe_t7ou3e                        0x0000556694bc6119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  return tri(n)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpddl25o4y.swift:19:14: error: missing argument label 'n:' in call\n\
    \  return tri(n)\n             ^\n             n: \n"
  stdout: ''
  timestamp: 1659979915
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var numbers\
    \ = [Int]()\n    var n1 = 1\n    var n2 = 1\n    var n3 = 1\n    var sum = n1\
    \ + n2 + n3\n    for i in 1..<n {\n        n3 = n2 + n1\n        n2 = n1\n   \
    \     n1 = sum - n2\n        sum = n1 + n2 + n3\n        numbers.append(n3)\n\
    \    }\n    return numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpst64p331/tmpst64p331.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba162263c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba161f5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba161f5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba161f597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpst64p331                        0x000055c87d5705ca <unavailable> + 5578

    5    libc.so.6                          0x00002ba16244f460 __libc_start_main +
    245

    6    tmpst64p331                        0x000055c87d570209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // write\
    \ your code in Swift 4.2\n    var a = [Int]()\n    var b = [Int]()\n    var c\
    \ = [Int]()\n    a.append(1)\n    b.append(1)\n    c.append(1)\n    for i in 1...n+1\
    \ {\n        let a1 = a[i]\n        let b1 = b[i-1]\n        let c1 = a[i-1]\n\
    \        a.append(b1+c1)\n        b.append(c1)\n        c.append(1)\n    }\n \
    \   return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af3e4ee7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3e4bde561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af3e4bde286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af3e4bde13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af3e4bddbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af3e49dde83 <unavailable> + 188035

    6    tmp1v97rbil                        0x00005620565df2d0 <unavailable> + 8912

    7    tmp1v97rbil                        0x00005620565de53b <unavailable> + 5435

    8    libc.so.6                          0x00002af3e50d3460 __libc_start_main +
    245

    9    tmp1v97rbil                        0x00005620565de259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var firstThree\
    \ = [Int]()\n    if n == 0 {\n        return firstThree\n    } else if n == 1\
    \ {\n        return firstThree + [1]\n    } else {\n        var five = 1 + Int(n\
    \ / 2)\n        firstThree += [3]\n        for number in stride(from: 3, to: five,\
    \ by: -1) {\n            firstThree += number\n        }\n        return firstThree\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2,\
    \ 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8,\
    \ 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\
    assert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5d5go9k0.swift:28:27: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Array<Int>'\n            firstThree += number\n \
    \                         ^\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var array\
    \ = [Int]()\n    var sum = [Int](repeating: 0, count: (n + 1))\n    sum[0] = 1\n\
    \    sum[1] = 1\n    for i in 2...n {\n        sum[i] = sum[i-1] + sum[i-2]\n\
    \    }\n    array.append(sum[n])\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmph2dvrg8i/tmph2dvrg8i.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cd2426c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cd211db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cd211d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cd211c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph2dvrg8i                        0x0000561fd43936da <unavailable> + 5850

    5    libc.so.6                          0x00002b5cd2612460 __libc_start_main +
    245

    6    tmph2dvrg8i                        0x0000561fd4393319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return sequence(n:\
    \ n).prefix(n: n + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpehybo8de.swift:19:24: error: extra argument 'n' in call\n    return\
    \ sequence(n: n).prefix(n: n + 1)\n                   ~~~~^~\n/tmp/tmpehybo8de.swift:19:20:\
    \ error: missing arguments for parameters 'first', 'next' in call\n    return\
    \ sequence(n: n).prefix(n: n + 1)\n                   ^\nSwift.sequence:1:24:\
    \ note: 'sequence(first:next:)' declared here\n@inlinable public func sequence<T>(first:\
    \ T, next: @escaping (T) -> T?) -> UnfoldFirstSequence<T>\n                  \
    \     ^\n/tmp/tmpehybo8de.swift:19:33: error: extraneous argument label 'n:' in\
    \ call\n    return sequence(n: n).prefix(n: n + 1)\n                         \
    \       ^~~~\n                                 \n/tmp/tmpehybo8de.swift:19:27:\
    \ error: cannot convert return expression of type 'PrefixSequence<UnfoldSequence<T,\
    \ (T?, Bool)>>' to return type '[Int]'\n    return sequence(n: n).prefix(n: n\
    \ + 1)\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    precondition(n\
    \ >= 0, \"Input must be non-negative\")\n    return sequence(n: n).map { $0 +\
    \ $1 / 2 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp4tbc6bg1.swift:20:24: error: extra argument 'n' in call\n    return\
    \ sequence(n: n).map { $0 + $1 / 2 }\n                   ~~~~^~\n/tmp/tmp4tbc6bg1.swift:20:20:\
    \ error: missing arguments for parameters 'first', 'next' in call\n    return\
    \ sequence(n: n).map { $0 + $1 / 2 }\n                   ^\nSwift.sequence:1:24:\
    \ note: 'sequence(first:next:)' declared here\n@inlinable public func sequence<T>(first:\
    \ T, next: @escaping (T) -> T?) -> UnfoldFirstSequence<T>\n                  \
    \     ^\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr\
    \ = [Int]()\n    \n    switch n {\n    case 0:\n        arr = [3]\n    case 1:\n\
    \        arr = [1, 3]\n    case 2:\n        arr = [1, 3, 2]\n    case 3:\n   \
    \     arr = [1, 3, 2, 8]\n    default:\n        let n = n - 3\n        let first\
    \ = [1,3,5,7] // 1 + 3 / 2\n        let second = [2,4,6,8] // 2 + 4 / 2\n    \
    \    let third = [1,3,5,7,9] // 1 + 3 + 5 + 7 / 2\n        \n        var firstIndex\
    \ = -1\n        var secondIndex = -1\n        \n        let index = 0\n      \
    \  \n        for first in first {\n            if n == firstIndex + 1 {\n    \
    \            arr = [first] + arr\n                break\n            }\n     \
    \       \n            firstIndex = firstIndex + 1\n        }\n        \n     \
    \   for second in second {\n            if n == secondIndex + 1 {\n          \
    \      arr = [second, first] + arr\n                break\n            }\n   \
    \         \n            secondIndex = secondIndex + 1\n        }\n        \n \
    \       for third in third {\n            if n == thirdIndex + 1 {\n         \
    \       arr = [third, second, first] + arr\n                break\n          \
    \  }\n            \n            thirdIndex = thirdIndex + 1\n        }\n    }\n\
    \    \n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpln46mump.swift:52:32: error: cannot convert value of type '[Int]'\
    \ to expected element type 'Int'\n                arr = [second, first] + arr\n\
    \                               ^\n/tmp/tmpln46mump.swift:60:21: error: cannot\
    \ find 'thirdIndex' in scope\n            if n == thirdIndex + 1 {\n         \
    \           ^~~~~~~~~~\n/tmp/tmpln46mump.swift:61:46: error: operator function\
    \ '+' requires the types 'Int' and '[Int]' be equivalent\n                arr\
    \ = [third, second, first] + arr\n                                           \
    \  ^\nSwift.RangeReplaceableCollection:3:35: note: where 'Self.Element' = 'Int',\
    \ 'Other.Element' = '[Int]'\n    @inlinable public static func + <Other>(lhs:\
    \ Other, rhs: Self) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\n/tmp/tmpln46mump.swift:65:13: error: cannot\
    \ find 'thirdIndex' in scope\n            thirdIndex = thirdIndex + 1\n      \
    \      ^~~~~~~~~~\n/tmp/tmpln46mump.swift:65:26: error: cannot find 'thirdIndex'\
    \ in scope\n            thirdIndex = thirdIndex + 1\n                        \
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 || n == 1 {\n        return [Int]()\n    }\n    if n == 2 {\n        return\
    \ [1, 2]\n    }\n    var tri = [Int](repeating: 0, count: n + 2)\n    tri[n] =\
    \ tri[n - 1] + tri[n - 2] + tri[n + 1]\n    guard n >= 3 else {\n        return\
    \ tri\n    }\n    for i in 0..<n {\n        tri[i] = tri[i - 1] + tri[i - 2] +\
    \ tri[i - 1]\n    }\n    return tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4e075ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4e0451561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab4e0451286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab4e045113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab4e0450bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab4e0250e83 <unavailable> + 188035

    6    tmpbyhs5qli                        0x0000564ce9f3e46c <unavailable> + 9324

    7    tmpbyhs5qli                        0x0000564ce9f3d59b <unavailable> + 5531

    8    libc.so.6                          0x00002ab4e0946460 __libc_start_main +
    245

    9    tmpbyhs5qli                        0x0000564ce9f3d2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    let fibs = sequence(for: 3..<n + 1)\n    \n    for n in 0..<fibs.count\
    \ {\n        let sum = fibs[n] + fibs[n-1] + fibs[n+0]\n        result.append(sum)\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6jteh82z.swift:20:31: error: extra argument 'for' in call\n   \
    \ let fibs = sequence(for: 3..<n + 1)\n                       ~~~~~~~^~~~~~~~~\n\
    /tmp/tmp6jteh82z.swift:20:24: error: missing arguments for parameters 'first',\
    \ 'next' in call\n    let fibs = sequence(for: 3..<n + 1)\n                  \
    \     ^\nSwift.sequence:1:24: note: 'sequence(first:next:)' declared here\n@inlinable\
    \ public func sequence<T>(first: T, next: @escaping (T) -> T?) -> UnfoldFirstSequence<T>\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1659979927
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr\
    \ = [Int]()\n    guard n >= 0 && n < 100 else {\n        return arr\n    }\n \
    \   var a = 2\n    var b = a + 1\n    for _ in 1..<n {\n        arr.append(a)\n\
    \        arr.append(b)\n        a = b\n        b += 1 + a / 2\n    }\n    return\
    \ arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2,\
    \ 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8,\
    \ 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\
    assert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmps3rney4u/tmps3rney4u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba099626c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba09931db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba09931d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba09931c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3rney4u                        0x00005640675ba5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ba099812460 __libc_start_main +
    245

    6    tmps3rney4u                        0x00005640675ba209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return sequence(n:\
    \ n + 1, step: 1, initialValues: [0, 1, 2])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmphlx1piim.swift:19:20: error: extra arguments at positions #1, #2,\
    \ #3 in call\n    return sequence(n: n + 1, step: 1, initialValues: [0, 1, 2])\n\
    \                   ^\nSwift.sequence:1:24: note: 'sequence(first:next:)' declared\
    \ here\n@inlinable public func sequence<T>(first: T, next: @escaping (T) -> T?)\
    \ -> UnfoldFirstSequence<T>\n                       ^\n/tmp/tmphlx1piim.swift:19:20:\
    \ error: missing arguments for parameters 'first', 'next' in call\n    return\
    \ sequence(n: n + 1, step: 1, initialValues: [0, 1, 2])\n                   ^\n\
    Swift.sequence:1:24: note: 'sequence(first:next:)' declared here\n@inlinable public\
    \ func sequence<T>(first: T, next: @escaping (T) -> T?) -> UnfoldFirstSequence<T>\n\
    \                       ^\n/tmp/tmphlx1piim.swift:19:12: error: cannot convert\
    \ return expression of type 'UnfoldSequence<T, (T?, Bool)>' to return type '[Int]'\n\
    \    return sequence(n: n + 1, step: 1, initialValues: [0, 1, 2])\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = []\n    var currentTrionacci: Int = 1\n    var currentTrionacciPrevious\
    \ = currentTrionacci\n    for _ in 1..(n + 1) {\n        result.append(currentTrionacci)\n\
    \        currentTrionacci = currentTrionacciPrevious + currentTrionacciPrevious\n\
    \        currentTrionacciPrevious = currentTrionacci\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpbtb1mvg2.swift:22:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for _ in 1..(n + 1) {\n              ^~\n         \
    \     ...\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    let array\
    \ = Array(0..<(n + 1))\n    if isOdd(n) { \n        array.remove(at: (n + 2)..<array.count\
    \ - 1)\n        array.remove(at: (n + 1)..<array.count)\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf14hrqqg.swift:20:8: error: cannot find 'isOdd' in scope\n    if\
    \ isOdd(n) { \n       ^~~~~\n/tmp/tmpf14hrqqg.swift:21:15: error: no exact matches\
    \ in call to instance method 'remove'\n        array.remove(at: (n + 2)..<array.count\
    \ - 1)\n              ^\n/tmp/tmpf14hrqqg.swift:21:15: note: found candidate with\
    \ type '(Int) -> Int'\n        array.remove(at: (n + 2)..<array.count - 1)\n \
    \             ^\n/tmp/tmpf14hrqqg.swift:22:15: error: no exact matches in call\
    \ to instance method 'remove'\n        array.remove(at: (n + 1)..<array.count)\n\
    \              ^\n/tmp/tmpf14hrqqg.swift:22:15: note: found candidate with type\
    \ '(Int) -> Int'\n        array.remove(at: (n + 1)..<array.count)\n          \
    \    ^\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int](repeating: 0, count: (n + 1))\n\n    var ones = [0]\n    var twos =\
    \ [0]\n    var threes = [0]\n    var fours = [0]\n    \n    for _ in 0..<n {\n\
    \        ones.append(ones[0].successor())\n        twos.append(twos[0].successor())\n\
    \        threes.append(threes[0].successor())\n        fours.append(fours[0].successor())\n\
    \    }\n\n    result[0] = 1\n    result[1] = ones[0]\n    result[2] = (ones[0].successor()).successor()\n\
    \    result[3] = (ones[0].successor()).successor().successor()\n    for i in 0..<(n\
    \ + 1) {\n        let three = threes[i]\n        let four = fours[i]\n       \
    \ result[i] = (three + four) / 2\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpkptxv3uq.swift:27:29: error: value of type 'Int' has no member\
    \ 'successor'\n        ones.append(ones[0].successor())\n                    ~~~~~~~\
    \ ^~~~~~~~~\n/tmp/tmpkptxv3uq.swift:28:29: error: value of type 'Int' has no member\
    \ 'successor'\n        twos.append(twos[0].successor())\n                    ~~~~~~~\
    \ ^~~~~~~~~\n/tmp/tmpkptxv3uq.swift:29:33: error: value of type 'Int' has no member\
    \ 'successor'\n        threes.append(threes[0].successor())\n                \
    \      ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpkptxv3uq.swift:30:31: error: value of type\
    \ 'Int' has no member 'successor'\n        fours.append(fours[0].successor())\n\
    \                     ~~~~~~~~ ^~~~~~~~~\n/tmp/tmpkptxv3uq.swift:35:26: error:\
    \ value of type 'Int' has no member 'successor'\n    result[2] = (ones[0].successor()).successor()\n\
    \                 ~~~~~~~ ^~~~~~~~~\n/tmp/tmpkptxv3uq.swift:36:26: error: value\
    \ of type 'Int' has no member 'successor'\n    result[3] = (ones[0].successor()).successor().successor()\n\
    \                 ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else {\n        return []\n    }\n\n    var result: [Int] = []\n    \n \
    \   func tri(_ n: Int, _ result: [Int]) -> [Int] {\n        if n == 0 { return\
    \ result }\n        \n        let lastTwo = result.last! + result[result.count-2]\n\
    \        result.last! = lastTwo\n        return tri(n-1, result)\n    }\n    \n\
    \    return tri(n, result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpq5k2t31n.swift:29:20: error: cannot assign through '!': 'last'\
    \ is a get-only property\n        result.last! = lastTwo\n        ~~~~~~~~~~~^\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var ret\
    \ = [Int]()\n    if n == 0 {\n        return ret\n    }\n    ret.insert((0), at:\
    \ 0)\n    ret.insert((1), at: 1)\n    ret.insert((1 + 1 / 2), at: 2)\n    if n\
    \ % 2 == 1 {\n        tri(n: n - 1, ret: &ret)\n    } else {\n        var tmp\
    \ = 0\n        for index in 3 ..< n+2 {\n            tmp = tmp + ret[index-1]\
    \ + ret[index-2]\n            ret.insert(tmp, at: index)\n        }\n    }\n \
    \   return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6ppf9u0g.swift:27:28: error: extra argument 'ret' in call\n   \
    \     tri(n: n - 1, ret: &ret)\n           ~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var sum\
    \ = [Int](repeating: 0, count: n + 1)\n    var temp = 0\n    var temp1 = 0\n \
    \   var temp2 = 0\n    sum[0] = 1\n    sum[1] = 3\n    for i in 2...n {\n    \
    \    if i % 2 == 1 {\n            temp1 = sum[i]\n            sum[i] = sum[i -\
    \ 1] + temp1\n        }\n        else {\n            temp2 = sum[i]\n        \
    \    sum[i] = temp2 + temp1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp1_e7zk2b/tmp1_e7zk2b.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bee5d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bee2c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bee2c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bee2c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_e7zk2b                        0x0000560f5f0d062a <unavailable> + 5674

    5    libc.so.6                          0x00002b3bee7be460 __libc_start_main +
    245

    6    tmp1_e7zk2b                        0x0000560f5f0d0269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return sequence(n:\
    \ n, firstIndex: 3, firstValue: 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpg2eefwv4.swift:19:20: error: extra arguments at positions #1, #2,\
    \ #3 in call\n    return sequence(n: n, firstIndex: 3, firstValue: 3)\n      \
    \             ^\nSwift.sequence:1:24: note: 'sequence(first:next:)' declared here\n\
    @inlinable public func sequence<T>(first: T, next: @escaping (T) -> T?) -> UnfoldFirstSequence<T>\n\
    \                       ^\n/tmp/tmpg2eefwv4.swift:19:20: error: missing arguments\
    \ for parameters 'first', 'next' in call\n    return sequence(n: n, firstIndex:\
    \ 3, firstValue: 3)\n                   ^\nSwift.sequence:1:24: note: 'sequence(first:next:)'\
    \ declared here\n@inlinable public func sequence<T>(first: T, next: @escaping\
    \ (T) -> T?) -> UnfoldFirstSequence<T>\n                       ^\n/tmp/tmpg2eefwv4.swift:19:12:\
    \ error: cannot convert return expression of type 'UnfoldSequence<T, (T?, Bool)>'\
    \ to return type '[Int]'\n    return sequence(n: n, firstIndex: 3, firstValue:\
    \ 3)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [0]\n    }\n    if n == 1 {\n        return [3]\n    }\n\
    \    let result = [1]\n    var tempArray = [Int]()\n    for _ in 1...n {\n   \
    \     tempArray.append(result.last! + 1)\n        result.append(tempArray[result.count\
    \ - 2])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpmmcl2dk7.swift:29:16: error: cannot use mutating member on immutable\
    \ value: 'result' is a 'let' constant\n        result.append(tempArray[result.count\
    \ - 2])\n        ~~~~~~ ^\n/tmp/tmpmmcl2dk7.swift:25:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let result = [1]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return sequence(n).prefix(n\
    \ + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2,\
    \ 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8,\
    \ 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\
    assert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpcthhazfz.swift:19:21: error: missing argument label 'first:' in\
    \ call\n    return sequence(n).prefix(n + 1)\n                    ^\n        \
    \            first: \n/tmp/tmpcthhazfz.swift:19:22: error: missing argument for\
    \ parameter 'next' in call\n    return sequence(n).prefix(n + 1)\n           \
    \          ^\n                     , next: <#(Int) -> Int?#>\nSwift.sequence:1:24:\
    \ note: 'sequence(first:next:)' declared here\n@inlinable public func sequence<T>(first:\
    \ T, next: @escaping (T) -> T?) -> UnfoldFirstSequence<T>\n                  \
    \     ^\n/tmp/tmpcthhazfz.swift:19:24: error: cannot convert return expression\
    \ of type 'PrefixSequence<UnfoldSequence<Int, (Int?, Bool)>>' to return type '[Int]'\n\
    \    return sequence(n).prefix(n + 1)\n           ~~~~~~~~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  return _tri(n)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_m9ll50b.swift:19:10: error: cannot find '_tri' in scope\n  return\
    \ _tri(n)\n         ^~~~\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var array:\
    \ [Int] = []\n    var one: Int = 1\n    var two: Int = 3\n    var three: Int =\
    \ 1\n\n    for _ in 0 ..< n {\n        array.append(three)\n        if isEven(n\
    \ - 1) {\n            two = one + two\n            one = three\n            three\
    \ = two\n        } else {\n            two = one + three\n            one = three\n\
    \            three = two\n        }\n    }\n\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9f34tuuo.swift:26:12: error: cannot find 'isEven' in scope\n  \
    \      if isEven(n - 1) {\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var array\
    \ = [Int]()\n    if n == 0 {\n        return array\n    }\n    if n % 2 == 1 {\n\
    \        array.append(1)\n        return array\n    }\n    array.append(3)\n \
    \   if n > 2 {\n        array.append(1 + tri(n - 2) + tri(n + 1))\n    }\n   \
    \ return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpwb8ulfit.swift:29:22: error: missing argument label 'contentsOf:'\
    \ in call\n        array.append(1 + tri(n - 2) + tri(n + 1))\n               \
    \      ^\n                     contentsOf: \n/tmp/tmpwb8ulfit.swift:29:22: error:\
    \ cannot convert value of type 'Int' to expected argument type 'Array<Int>'\n\
    \        array.append(1 + tri(n - 2) + tri(n + 1))\n                     ^\n/tmp/tmpwb8ulfit.swift:29:30:\
    \ error: missing argument label 'n:' in call\n        array.append(1 + tri(n -\
    \ 2) + tri(n + 1))\n                             ^\n                         \
    \    n: \n/tmp/tmpwb8ulfit.swift:29:43: error: missing argument label 'n:' in\
    \ call\n        array.append(1 + tri(n - 2) + tri(n + 1))\n                  \
    \                        ^\n                                          n: \n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n < 2\
    \ {\n        return []\n    }\n    var result = [Int]()\n    result.appendContentsOf(tri(n\
    \ - 1))\n    result.appendContentsOf(tri(n - 2))\n    result.appendContentsOf(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt4oguj0f.swift:23:12: error: value of type '[Int]' has no member\
    \ 'appendContentsOf'\n    result.appendContentsOf(tri(n - 1))\n    ~~~~~~ ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpt4oguj0f.swift:23:33: error: missing argument label 'n:' in call\n   \
    \ result.appendContentsOf(tri(n - 1))\n                                ^\n   \
    \                             n: \n/tmp/tmpt4oguj0f.swift:24:12: error: value\
    \ of type '[Int]' has no member 'appendContentsOf'\n    result.appendContentsOf(tri(n\
    \ - 2))\n    ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpt4oguj0f.swift:24:33: error: missing\
    \ argument label 'n:' in call\n    result.appendContentsOf(tri(n - 2))\n     \
    \                           ^\n                                n: \n/tmp/tmpt4oguj0f.swift:25:12:\
    \ error: value of type '[Int]' has no member 'appendContentsOf'\n    result.appendContentsOf(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpt4oguj0f.swift:25:33:\
    \ error: missing argument label 'n:' in call\n    result.appendContentsOf(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n                                ^\n       \
    \                         n: \n/tmp/tmpt4oguj0f.swift:25:46: error: missing argument\
    \ label 'n:' in call\n    result.appendContentsOf(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                             ^\n                    \
    \                         n: \n/tmp/tmpt4oguj0f.swift:25:59: error: missing argument\
    \ label 'n:' in call\n    result.appendContentsOf(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                                          ^\n       \
    \                                                   n: \n"
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int](repeating: 0, count: n + 1) \n    \n    var first = 3\n    var second\
    \ = 1\n    var third = 1\n    \n    result[0] = first\n    result[1] = second\n\
    \    \n    for i in 1...n {\n        if i % 2 == 0 {\n            third = first\
    \ + second\n            first = second\n            second = third\n        }\n\
    \        else {\n            third = first + second\n            first = second\n\
    \            second = third\n        }\n        result[i] = third\n    }\n   \
    \ \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpcd9v8suc/tmpcd9v8suc.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c15961c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c15658b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c15658988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c156577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcd9v8suc                        0x0000564507f7e5da <unavailable> + 5594

    5    libc.so.6                          0x00002b4c15b4d460 __libc_start_main +
    245

    6    tmpcd9v8suc                        0x0000564507f7e219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr\
    \ : [Int] = []\n    var a = 1 // n is even\n    var b = 2 // n is odd\n    var\
    \ c = a + b\n    arr.append(a)\n    arr.append(b)\n    for _ in 1...n {\n    \
    \    if n % 2 == 0 {\n            a = c\n            b = a + b\n            c\
    \ = a + b\n        }else {\n            a = b\n            b = c\n           \
    \ c = a + b\n        }\n        arr.append(c)\n    }\n    return arr\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpqxis92b9/tmpqxis92b9.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27e60dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27e5dd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27e5dd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27e5dd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqxis92b9                        0x0000556cd03a756a <unavailable> + 5482

    5    libc.so.6                          0x00002b27e62c6460 __libc_start_main +
    245

    6    tmpqxis92b9                        0x0000556cd03a71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ >= 0 else { return [] }\n    return (0..<n).map { n in\n        if n % 2 ==\
    \ 0 {\n            return 1 + n / 2\n        } else {\n            return n -\
    \ 1 + n - 2 + n + 1 % 2\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpo2th4ugp/tmpo2th4ugp.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e932ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e9021b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e9021988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e90207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo2th4ugp                        0x000055a9c485555a <unavailable> + 5466

    5    libc.so.6                          0x00002b83e9516460 __libc_start_main +
    245

    6    tmpo2th4ugp                        0x000055a9c4855199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return sequence(n:\
    \ n).dropFirst()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqpat0h2c.swift:19:24: error: extra argument 'n' in call\n    return\
    \ sequence(n: n).dropFirst()\n                   ~~~~^~\n/tmp/tmpqpat0h2c.swift:19:20:\
    \ error: missing arguments for parameters 'first', 'next' in call\n    return\
    \ sequence(n: n).dropFirst()\n                   ^\nSwift.sequence:1:24: note:\
    \ 'sequence(first:next:)' declared here\n@inlinable public func sequence<T>(first:\
    \ T, next: @escaping (T) -> T?) -> UnfoldFirstSequence<T>\n                  \
    \     ^\n/tmp/tmpqpat0h2c.swift:19:27: error: cannot convert return expression\
    \ of type 'DropFirstSequence<UnfoldSequence<T, (T?, Bool)>>' to return type '[Int]'\n\
    \    return sequence(n: n).dropFirst()\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    let fib0 = 1\n    let fib1 = fib0 + 1 // fib1 => 1\n    let fib2\
    \ = fib1 + 1 // fib2 => 3\n    let fib3 = fib2 + 1 // fib3 => 5\n    let fib4\
    \ = fib3 + 1 // fib4 => 8\n    \n    let fib5 = fib4 + 1 // fib5 => 10\n    let\
    \ fib6 = fib5 + 1 // fib6 => 14\n\n    let fib7 = fib6 + 1 // fib7 => 17\n   \
    \ let fib8 = fib7 + 1 // fib8 => 21\n    let fib9 = fib8 + 1 // fib9 => 28\n \
    \   let fib10 = fib9 + 1 // fib10 => 36\n    let fib11 = fib10 + 1 // fib11 =>\
    \ 45\n\n    let fib12 = fib11 + 1 // fib12 => 53\n    let fib13 = fib12 + 1 //\
    \ fib13 => 58\n    let fib14 = fib13 + 1 // fib14 => 66\n    let fib15 = fib14\
    \ + 1 // fib15 => 71\n    let fib16 = fib15 + 1 // fib16 => 78\n    \n    var\
    \ nInt: Int = Int(n) \n    while nInt >= 2 {\n        result.append(nInt)\n  \
    \      nInt -= 2 \n    }\n    \n    result.append(fib0) \n    result.append(fib1)\n\
    \    result.append(fib2)\n    result.append(fib3)\n    result.append(fib4)\n \
    \   result.append(fib5)\n    result.append(fib6)\n    result.append(fib7)\n  \
    \  result.append(fib8)\n    result.append(fib9)\n    result.append(fib10)\n  \
    \  result.append(fib11)\n    result.append(fib12)\n    result.append(fib13)\n\
    \    result.append(fib14)\n    result.append(fib15)\n    result.append(fib16)\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpvv0xsavz/tmpvv0xsavz.swift:81: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2de0cb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2de09a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2de09a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2de09a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvv0xsavz                        0x000055b8fca6e57a <unavailable> + 5498

    5    libc.so.6                          0x00002b2de0e9c460 __libc_start_main +
    245

    6    tmpvv0xsavz                        0x000055b8fca6e1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return sequence(stride:\
    \ 1, from: n - 1) + sequence(stride: 1, from: n + 1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpggg_l37n.swift:19:45: error: binary operator '+' cannot be applied\
    \ to two 'UnfoldSequence<Int, (Int?, Bool)>' operands\n    return sequence(stride:\
    \ 1, from: n - 1) + sequence(stride: 1, from: n + 1)\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpggg_l37n.swift:19:47: error: no\
    \ exact matches in call to global function 'sequence'\n    return sequence(stride:\
    \ 1, from: n - 1) + sequence(stride: 1, from: n + 1)\n                       \
    \                       ^\n/tmp/tmpggg_l37n.swift:19:47: note: candidate has partially\
    \ matching parameter list (first: Int, next: @escaping (Int) -> Int?)\n    return\
    \ sequence(stride: 1, from: n - 1) + sequence(stride: 1, from: n + 1)\n      \
    \                                        ^\n/tmp/tmpggg_l37n.swift:19:47: note:\
    \ candidate has partially matching parameter list (state: Int, next: @escaping\
    \ (inout Int) -> Int?)\n    return sequence(stride: 1, from: n - 1) + sequence(stride:\
    \ 1, from: n + 1)\n                                              ^\n/tmp/tmpggg_l37n.swift:19:12:\
    \ error: no exact matches in call to global function 'sequence'\n    return sequence(stride:\
    \ 1, from: n - 1) + sequence(stride: 1, from: n + 1)\n           ^\n/tmp/tmpggg_l37n.swift:19:12:\
    \ note: candidate has partially matching parameter list (first: Int, next: @escaping\
    \ (Int) -> Int?)\n    return sequence(stride: 1, from: n - 1) + sequence(stride:\
    \ 1, from: n + 1)\n           ^\n/tmp/tmpggg_l37n.swift:19:12: note: candidate\
    \ has partially matching parameter list (state: Int, next: @escaping (inout Int)\
    \ -> Int?)\n    return sequence(stride: 1, from: n - 1) + sequence(stride: 1,\
    \ from: n + 1)\n           ^\n"
  stdout: ''
  timestamp: 1659979922
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return (0..<n).map\
    \ { _ in\n        var a = 0\n        var b = 1\n        var c = 0\n\n        if\
    \ n % 2 == 0 {\n            c = a + b\n            a = b\n        } else {\n \
    \           c = a + b\n            a = b + c\n        }\n        return c\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\n\
    assert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\n\
    assert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n:\
    \ 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpmaufuute/tmpmaufuute.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb4842bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb48122b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb48122988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb481217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmaufuute                        0x0000560641dff55a <unavailable> + 5466

    5    libc.so.6                          0x00002acb48617460 __libc_start_main +
    245

    6    tmpmaufuute                        0x0000560641dff199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    precondition(n\
    \ >= 0, \"n must be non-negative\")\n    var result: [Int] = []\n    result.append(3)\n\
    \    result.append(1)\n    for var i = 2; i < (n + 1)/3; i++ {\n        result.append(result[i]\
    \ + result[i-2] + result[i+1])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9cz6qj7d.swift:23:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < (n + 1)/3; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return sequence(1,\
    \ n: n+1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_vbq_oke.swift:19:12: error: cannot convert return expression of\
    \ type 'UnfoldSequence<Int, (Int?, Bool)>' to return type '[Int]'\n    return\
    \ sequence(1, n: n+1)\n           ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_vbq_oke.swift:19:20:\
    \ error: incorrect argument labels in call (have '_:n:', expected 'first:next:')\n\
    \    return sequence(1, n: n+1)\n                   ^   ~\n                  \
    \  first:  next\n/tmp/tmp_vbq_oke.swift:19:28: error: cannot convert value of\
    \ type 'Int' to expected argument type '(Int) -> Int?'\n    return sequence(1,\
    \ n: n+1)\n                           ^\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var a =\
    \ [Int]()\n    var x = 2\n    var tri = [Int]()\n    tri.append(3)\n    tri.append(1\
    \ + x / 2)\n    for _ in stride(from: n, to: 1, by: -1) {\n        x += 2\n  \
    \      tri.append(tri[tri.count - 1] + tri[tri.count - 2])\n    }\n    return\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\n\
    assert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\n\
    assert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n:\
    \ 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpmc76fxp7/tmpmc76fxp7.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0b2ab5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0b27acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0b27ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0b27ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmc76fxp7                        0x00005634ba02378a <unavailable> + 6026

    5    libc.so.6                          0x00002ba0b2ca1460 __libc_start_main +
    245

    6    tmpmc76fxp7                        0x00005634ba0233c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n <=\
    \ 1 {\n        return [0]\n    }\n    var results = [Int]()\n    \n    var fibonacci\
    \ = [Int]()\n    \n    fibonacci.append(3)\n    \n    for i in 1..<n {\n     \
    \   let current = fibonacci.first!\n        let next = current + current\n   \
    \     fibonacci.append(next)\n        results.append(next)\n    }\n    \n    results.reverse()\n\
    \    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpg_73q_nr/tmpg_73q_nr.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53114b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53111adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53111ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53111ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_73q_nr                        0x000055ad41e7073a <unavailable> + 5946

    5    libc.so.6                          0x00002b53116a2460 __libc_start_main +
    245

    6    tmpg_73q_nr                        0x000055ad41e70379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n    }\n    else {\n  \
    \      result.append(3)\n        let currentFib = 2\n        for _ in 0..<(n -\
    \ 1) {\n            result.append(currentFib) // This line is wrong.\n       \
    \     currentFib += currentFib\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8f8099ns.swift:28:24: error: left side of mutating operator isn't\
    \ mutable: 'currentFib' is a 'let' constant\n            currentFib += currentFib\n\
    \            ~~~~~~~~~~ ^\n/tmp/tmp8f8099ns.swift:25:9: note: change 'let' to\
    \ 'var' to make it mutable\n        let currentFib = 2\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n    }\n    if n == 2 {\n\
    \        result.append(3)\n    }\n    if n % 2 == 0 {\n        result.append(1\
    \ + n / 2)\n    }\n    if n % 2 == 1 {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8vcncx5f.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp8vcncx5f.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8vcncx5f.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8vcncx5f.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        return result \n    }\n\n    var first =\
    \ 0\n    var second = 3\n    \n    for i in 1...n {\n        switch i % 2 {\n\
    \        case 0:\n            append(result, first)\n            append(result,\
    \ second)\n            append(result, first+second)\n        case 1:\n       \
    \     first = second\n            second = first+second\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpps2emmil.swift:30:13: error: cannot find 'append' in scope\n  \
    \          append(result, first)\n            ^~~~~~\n/tmp/tmpps2emmil.swift:31:13:\
    \ error: cannot find 'append' in scope\n            append(result, second)\n \
    \           ^~~~~~\n/tmp/tmpps2emmil.swift:32:13: error: cannot find 'append'\
    \ in scope\n            append(result, first+second)\n            ^~~~~~\n/tmp/tmpps2emmil.swift:28:9:\
    \ error: switch must be exhaustive\n        switch i % 2 {\n        ^\n/tmp/tmpps2emmil.swift:28:9:\
    \ note: do you want to add a default clause?\n        switch i % 2 {\n       \
    \ ^\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  if n == 1\
    \ {\n    return [1]\n  }\n  if n == 2 {\n    return [3]\n  }\n  if n == 3 {\n\
    \    return [1, 3, 2]\n  }\n  var result = [1]\n  result[0] = result[0] + 2\n\
    \  if n % 2 == 1 {\n    result[1] = result[1] + 1\n  }\n  result[2] = result[1]\
    \ + 1 + result[2]\n  if n % 2 == 1 {\n    result[2] = result[2] + 1\n  }\n  return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmphq84hmzr/tmphq84hmzr.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b057b09cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b057ad93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b057ad93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b057ad927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphq84hmzr                        0x000055868ea3c4ca <unavailable> + 5322

    5    libc.so.6                          0x00002b057b288460 __libc_start_main +
    245

    6    tmphq84hmzr                        0x000055868ea3c109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 1 {\n        return [1]\n    }\n    var result = [Int]()\n    result.append(3)\n\
    \    if n % 2 == 0 {\n        result.append(1 + n/2)\n    }\n    else {\n    \
    \    result.append(1 + n/2)\n        result.append(1 + n + n/2)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp405ih_oq/tmp405ih_oq.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31fb819c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31fb510b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31fb510988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31fb50f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp405ih_oq                        0x0000556ec6a6f4da <unavailable> + 5338

    5    libc.so.6                          0x00002b31fba05460 __libc_start_main +
    245

    6    tmp405ih_oq                        0x0000556ec6a6f119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = []\n    if n <= 0 {\n        return result\n    }\n    \n    let step\
    \ = (n - 1) >> 1\n    for x in stride(from: step, through: 0, by: 1) {\n     \
    \   let y = x + x\n        result.insert(y, at: 0)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpopncxgwk/tmpopncxgwk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76c29f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76c26f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76c26f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76c26ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopncxgwk                        0x00005580f6a1e61a <unavailable> + 5658

    5    libc.so.6                          0x00002b76c2be5460 __libc_start_main +
    245

    6    tmpopncxgwk                        0x00005580f6a1e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    precondition(n\
    \ >= 0, \"n must be non-negative\")\n    var result = [Int]()\n    func addFirst(n:\
    \ Int) {\n        result.append(n)\n    }\n    \n    if n%2 == 0 {\n        addFirst(3)\n\
    \    } else {\n        let third = tri(n-1)\n        let first: Int = third[0]\
    \ + third[1]\n        let second: Int = third[0] + third[1] + third[2]\n     \
    \   addFirst(first)\n        addFirst(second)\n    }\n    result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6oj1ygi7.swift:26:18: error: missing argument label 'n:' in call\n\
    \        addFirst(3)\n                 ^\n                 n: \n/tmp/tmp6oj1ygi7.swift:28:25:\
    \ error: missing argument label 'n:' in call\n        let third = tri(n-1)\n \
    \                       ^\n                        n: \n/tmp/tmp6oj1ygi7.swift:31:18:\
    \ error: missing argument label 'n:' in call\n        addFirst(first)\n      \
    \           ^\n                 n: \n/tmp/tmp6oj1ygi7.swift:32:18: error: missing\
    \ argument label 'n:' in call\n        addFirst(second)\n                 ^\n\
    \                 n: \n/tmp/tmp6oj1ygi7.swift:34:5: warning: variable is unused\n\
    \    result\n    ^~~~~~\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    var a = 1\n    var b = 1\n    if n % 2 == 0 {\n        result\
    \ = result + [Int](n)\n    }\n    \n    for _ in 1..<n / 2 {\n        a = a +\
    \ b\n        b = a + b\n    }\n    \n    if n % 2 == 1 {\n        a = a + b\n\
    \        b = a + b\n    }\n    \n    result = result + [a]\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpnpa0mtpp.swift:28:33: error: missing argument label 'arrayLiteral:'\
    \ in call\n        result = result + [Int](n)\n                              \
    \  ^\n                                arrayLiteral: \n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var a =\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    if n % 2 == 1 {\n        a[n / 2]\
    \ = a[n] + a[n + 1]\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9x812mr_.swift:19:17: error: missing argument label 'n:' in call\n\
    \    var a = tri(n - 1) + tri(n - 2) + tri(n + 1)\n                ^\n       \
    \         n: \n/tmp/tmp9x812mr_.swift:19:30: error: missing argument label 'n:'\
    \ in call\n    var a = tri(n - 1) + tri(n - 2) + tri(n + 1)\n                \
    \             ^\n                             n: \n/tmp/tmp9x812mr_.swift:19:43:\
    \ error: missing argument label 'n:' in call\n    var a = tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n                                          ^\n             \
    \                             n: \n"
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = []\n    for i in 1...n {\n        if i == 3 {\n            result.append(i)\n\
    \        } else {\n            result.append(i + Int(Double(i) / Double(2)))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpkegaydg7/tmpkegaydg7.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecdac36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecda92db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecda92d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecda92c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkegaydg7                        0x000055c27932956a <unavailable> + 5482

    5    libc.so.6                          0x00002aecdae22460 __libc_start_main +
    245

    6    tmpkegaydg7                        0x000055c2793291a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    result.append(3)\n    guard n >= 2 else { return result }\n\n\
    \    if n % 2 == 0 {\n        result.append((1 + n) / 2)\n    } else {\n     \
    \   var n1 = 1\n        var n2 = 2\n        var n3 = n + 1\n\n        while n3\
    \ < n {\n            result.append(n1)\n            (n1, n2, n3) = (n2, n3, n1\
    \ + n3)\n        }\n        result.append(n1)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5zeov21v/tmp5zeov21v.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a0adcec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a0aac5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a0aac5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a0aac47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5zeov21v                        0x000055eb20e3a4da <unavailable> + 5338

    5    libc.so.6                          0x00002b1a0afba460 __libc_start_main +
    245

    6    tmp5zeov21v                        0x000055eb20e3a119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n\tvar result\
    \ = [Int](repeating: 0, count: (n + 1) * 2)\n\n\tfor i in 1 ..< n + 1 {\n\t\t\
    result[i] = i + 1\n\t\tif i % 2 == 1 {\n\t\t\tresult[i * 2] += i\n\t\t}\n\t}\n\
    \n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp27w1hqr9/tmp27w1hqr9.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42ace68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42acb5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42acb5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42acb5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp27w1hqr9                        0x0000556b3d2775da <unavailable> + 5594

    5    libc.so.6                          0x00002b42ad054460 __libc_start_main +
    245

    6    tmp27w1hqr9                        0x0000556b3d277219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    switch n\
    \ {\n    case 0: return [3]\n    case 1: return [1, 3]\n    case 2: return [1,\
    \ 1, 3]\n    default: return [1, n / 2, 1 + n / 2, 1 + 2 * n / 2, 1 + 3 * n /\
    \ 2, 1 + 4 * n / 2, 1 + 5 * n / 2, 1 + 6 * n / 2, 1 + 7 * n / 2, 1 + 8 * n / 2,\
    \ 1 + 9 * n / 2, 1 + 10 * n / 2, 1 + 11 * n / 2, 1 + 12 * n / 2, 1 + 13 * n /\
    \ 2, 1 + 14 * n / 2, 1 + 15 * n / 2, 1 + 16 * n / 2, 1 + 17 * n / 2, 1 + 18 *\
    \ n / 2, 1 + 19 * n / 2, 1 + 20 * n / 2, 1 + 21 * n / 2, 1 + 22 * n / 2, 1 + 23\
    \ * n / 2, 1 + 24 * n / 2, 1 + 25 * n / 2, 1 + 26 * n / 2, 1 + 27 * n / 2, 1 +\
    \ 28 * n / 2, 1 + 29 * n / 2, 1 + 30 * n / 2, 1 + 31 * n / 2, 1 + 32 * n / 2,\
    \ 1 + 33 * n / 2, 1 + 34 * n / 2, 1 + 35 * n / 2, 1 + 36 * n / 2, 1 + 37 * n /\
    \ 2, 1 + 38 * n / 2, 1 + 39 * n / 2, 1 + 40 * n / 2, 1 + 41 * n / 2, 1 + 42 *\
    \ n / 2, 1 + 43 * n / 2, 1 + 44 * n / 2, 1 + 45 * n / 2, 1 + 46 * n / 2, 1 + 47\
    \ * n / 2, 1 + 48 * n / 2, 1 + 49 * n / 2, 1 + 50 * n / 2, 1 + 51 * n / 2, 1 +\
    \ 52 * n / 2, 1 + 53 * n / 2, 1 + 54 * n / 2, 1 + 55 * n / 2, 1 + 56 * n / 2,\
    \ 1 + 57 * n / 2, 1 + 58 * n / 2, 1 + 59 * n / 2, 1 + 60 * n / 2, 1 + 61 * n /\
    \ 2, 1 + 62 * n / 2, 1 + 63 * n / 2, 1 + 64 * n / 2, 1 + 65 * n / 2, 1 + 66 *\
    \ n / 2, 1 + 67 * n / 2, 1 + 68 * n / 2, 1 + 69 * n / 2, 1 + 70 * n / 2, 1 + 71\
    \ * n / 2, 1 + 72 * n / 2, 1 + 73 * n / 2, 1 + 74 * n / 2, 1 + 75 * n / 2, 1 +\
    \ 76 * n / 2, 1 + 77 * n / 2, 1 + 78 * n / 2, 1 + 79 * n / 2, 1 + 80 * n / 2,\
    \ 1 + 81 * n / 2, 1 + 82 * n / \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpru_t2e2l.swift:24:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpru_t2e2l.swift:48:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpru_t2e2l.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpru_t2e2l.swift:27:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    \n    if\
    \ n == 1 || n == 2 {\n        return [1]\n    }\n    \n    var a: [Int] = []\n\
    \    for i in 0..<n {\n        a.append(1 + i/2)\n    }\n    \n    if n % 2 ==\
    \ 1 {\n        for _ in 0..<(n-2) {\n            a.append(a[a.count - 1])\n  \
    \      }\n    }\n    \n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjr31z03q/tmpjr31z03q.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff525cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff522c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff522c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff522c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjr31z03q                        0x0000564180fd361a <unavailable> + 5658

    5    libc.so.6                          0x00002aff527bb460 __libc_start_main +
    245

    6    tmpjr31z03q                        0x0000564180fd3259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // write\
    \ your code here\n    var arr : [Int] = []\n    var triArray = [Int]()\n    if\
    \ n == 0 {\n        return arr\n    }\n\n    triArray.append(3)\n    triArray.append(1)\n\
    \    triArray.append(2)\n    triArray.append(1 + n / 2)\n\n    if n % 2 == 0 {\n\
    \        triArray.append(triArray[n-3])\n    }\n    return triArray\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp_o24l_wj/tmp_o24l_wj.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad832eeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad832be5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad832be5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad832be47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_o24l_wj                        0x000055c7d40a452a <unavailable> + 5418

    5    libc.so.6                          0x00002ad8330da460 __libc_start_main +
    245

    6    tmp_o24l_wj                        0x000055c7d40a4169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var a: [Int]\
    \ = []\n    var b: [Int] = [3]\n\n    var temp = 0\n    if n % 2 == 0 {\n    \
    \    temp = 3\n    } else {\n        temp = 1\n    }\n\n    for _ in 0..<n+1 {\n\
    \        let temp1 = temp\n        a = temp1 + b\n        b = a\n    }\n    return\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\n\
    assert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\n\
    assert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n:\
    \ 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpl4d06hfy.swift:31:13: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Array<Int>'\n        a = temp1 + b\n            ^\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int](repeating: 0, count: n + 1)\n    result[0] = 3\n    result[1] = 1 +\
    \ n / 2\n    result[n] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_a0fh07i.swift:22:41: error: cannot assign value of type 'Array<Int>'\
    \ to subscript of type 'Int'\n    result[n] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n                ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n/tmp/tmp_a0fh07i.swift:22:21:\
    \ error: missing argument label 'n:' in call\n    result[n] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                    ^\n                    n: \n/tmp/tmp_a0fh07i.swift:22:34:\
    \ error: missing argument label 'n:' in call\n    result[n] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                 ^\n                    \
    \             n: \n/tmp/tmp_a0fh07i.swift:22:47: error: missing argument label\
    \ 'n:' in call\n    result[n] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n       \
    \                                       ^\n                                  \
    \            n: \n"
  stdout: ''
  timestamp: 1659979917
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var fibArray\
    \ = [Int]()\n    var fib1: Int = 3\n    var fib2: Int = 3\n    var fib3: Int =\
    \ 0\n    for _ in 0..<n {\n        fibArray.append(fib1)\n        fib1 = fib1\
    \ + fib2\n        fib2 = fib3 + 1\n        fib3 = fib2 + fib3\n    }\n    return\
    \ fibArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpwq3nj9xt/tmpwq3nj9xt.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae34a637c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae34a32eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae34a32e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae34a32d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwq3nj9xt                        0x0000559c4f6b15ca <unavailable> + 5578

    5    libc.so.6                          0x00002ae34a823460 __libc_start_main +
    245

    6    tmpwq3nj9xt                        0x0000559c4f6b1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    let result\
    \ = [Int]()\n    for i in 1...n {\n        switch i % 2 {\n        case 0:\n \
    \           result.append(i)\n        case 1:\n            result.append(result[i-1]\
    \ + result[i-2] + result[i-3])\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzb7ips7f.swift:23:20: error: cannot use mutating member on immutable\
    \ value: 'result' is a 'let' constant\n            result.append(i)\n        \
    \    ~~~~~~ ^\n/tmp/tmpzb7ips7f.swift:19:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let result = [Int]()\n    ^~~\n    var\n/tmp/tmpzb7ips7f.swift:25:20:\
    \ error: cannot use mutating member on immutable value: 'result' is a 'let' constant\n\
    \            result.append(result[i-1] + result[i-2] + result[i-3])\n        \
    \    ~~~~~~ ^\n/tmp/tmpzb7ips7f.swift:19:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let result = [Int]()\n    ^~~\n    var\n/tmp/tmpzb7ips7f.swift:21:9:\
    \ error: switch must be exhaustive\n        switch i % 2 {\n        ^\n/tmp/tmpzb7ips7f.swift:21:9:\
    \ note: do you want to add a default clause?\n        switch i % 2 {\n       \
    \ ^\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // return\
    \ your code\n    var a: [Int] = []\n    switch n {\n    case 0:\n        return\
    \ a\n    case 1:\n        return [3] + a\n    default:\n        var firstTri:\
    \ Int = 0\n        var secondTri: Int = 0\n        var thirdTri: Int = 0\n   \
    \     var firstTriAdded: Int = 0\n        var secondTriAdded: Int = 0\n      \
    \  for _ in 0..<n {\n            if n % 2 != 0 {\n                secondTri =\
    \ secondTri + thirdTri\n                thirdTri = secondTri + secondTriAdded\n\
    \                secondTriAdded = firstTri + secondTriAdded\n            } else\
    \ {\n                firstTri = firstTri + secondTri\n                secondTri\
    \ = firstTri + firstTriAdded\n                firstTriAdded = secondTri + firstTriAdded\n\
    \            }\n            a += firstTri\n        }\n        return a\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp4yl248vq.swift:42:18: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Array<Int>'\n            a += firstTri\n        \
    \         ^\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return sequence(n:\
    \ n).filter { $0 % 2 == 0 }.prefix(n + 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmppnjxbuvu.swift:19:50: error: no 'prefix' candidates produce the\
    \ expected contextual result type '[Int]'\n    return sequence(n: n).filter {\
    \ $0 % 2 == 0 }.prefix(n + 1)\n                                              \
    \   ^\nSwift.Sequence:7:40: note: 'prefix' produces 'PrefixSequence<[Int]>', not\
    \ the expected contextual result type '[Int]'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> PrefixSequence<Self>\n                    \
    \                   ^\nSwift.Collection:6:40: note: 'prefix' produces 'ArraySlice<Int>',\
    \ not the expected contextual result type '[Int]'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> Self.SubSequence\n                        \
    \               ^\n/tmp/tmppnjxbuvu.swift:19:24: error: extra argument 'n' in\
    \ call\n    return sequence(n: n).filter { $0 % 2 == 0 }.prefix(n + 1)\n     \
    \              ~~~~^~\n/tmp/tmppnjxbuvu.swift:19:20: error: missing arguments\
    \ for parameters 'first', 'next' in call\n    return sequence(n: n).filter { $0\
    \ % 2 == 0 }.prefix(n + 1)\n                   ^\nSwift.sequence:1:24: note: 'sequence(first:next:)'\
    \ declared here\n@inlinable public func sequence<T>(first: T, next: @escaping\
    \ (T) -> T?) -> UnfoldFirstSequence<T>\n                       ^\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n < 2\
    \ {\n        return []\n    }\n    var res = [Int]()\n    res.append(3)\n    var\
    \ tmp = [Int]()\n    for _ in 0 ..< n {\n        tmp.append(0)\n    }\n    tmp[0]\
    \ = 1\n    tmp[1] = 1\n    var j = 0\n    for _ in 0 ..< (n - 1) {\n        tmp[j]\
    \ = (j + 1) / 2\n        j = (j + 1) % 2\n    }\n    j = j - 1\n    for _ in 0\
    \ ..< (n - 2) {\n        tmp[j + 1] = tmp[j] + tmp[j + 1]\n        j = (j + 1)\
    \ % 2\n    }\n    res.append(tmp[n])\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b02fb72fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02fb426561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b02fb426286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b02fb42613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b02fb425bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b02fb225e83 <unavailable> + 188035

    6    tmpax7ho61t                        0x000055cd80d05740 <unavailable> + 10048

    7    tmpax7ho61t                        0x000055cd80d0458b <unavailable> + 5515

    8    libc.so.6                          0x00002b02fb91b460 __libc_start_main +
    245

    9    tmpax7ho61t                        0x000055cd80d042a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979917
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    precondition(n\
    \ >= 0)\n    var numbers = [Int](repeating: 0, count: n + 1)\n    numbers[0] =\
    \ 3\n    for number in 1...n {\n        numbers[number] = numbers[number - 1]\
    \ + numbers[number - 2] + numbers[number + 1]\n    }\n    return numbers\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1efa942c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1efa639561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1efa639286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1efa63913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1efa638bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1efa438e83 <unavailable> + 188035

    6    tmprhse7ey7                        0x0000558915969358 <unavailable> + 9048

    7    tmprhse7ey7                        0x000055891596854b <unavailable> + 5451

    8    libc.so.6                          0x00002b1efab2e460 __libc_start_main +
    245

    9    tmprhse7ey7                        0x0000558915968269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var a =\
    \ Int(3) + 1\n    var b = Int(1) + Int(n) / 2\n    var c = Int(n) + 1\n    var\
    \ result = [Int]()\n    for i in 0..<n {\n        result.append(a)\n        a,\
    \ b = b, c\n        c = a + b\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpexe1fvqe.swift:25:10: error: consecutive statements on a line must\
    \ be separated by ';'\n        a, b = b, c\n         ^\n         ;\n/tmp/tmpexe1fvqe.swift:25:10:\
    \ error: expected expression\n        a, b = b, c\n         ^\n/tmp/tmpexe1fvqe.swift:25:9:\
    \ warning: variable is unused\n        a, b = b, c\n        ^\n/tmp/tmpexe1fvqe.swift:19:9:\
    \ warning: variable 'a' was never mutated; consider changing to 'let' constant\n\
    \    var a = Int(3) + 1\n    ~~~ ^\n    let\n/tmp/tmpexe1fvqe.swift:20:9: warning:\
    \ initialization of variable 'b' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var b = Int(1) + Int(n) / 2\n    ~~~~^\n    _\n/tmp/tmpexe1fvqe.swift:21:9:\
    \ warning: initialization of variable 'c' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var c = Int(n) + 1\n    ~~~~^\n    _\n\
    /tmp/tmpexe1fvqe.swift:23:9: warning: immutable value 'i' was never used; consider\
    \ replacing with '_' or removing it\n    for i in 0..<n {\n        ^\n       \
    \ _\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n <=\
    \ 1 {\n        return []\n    }\n    var result = [Int]()\n    result.append(3)\n\
    \    for n > 2 {\n        let triResult = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \        result.append(triResult)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpk7gavh1q.swift:24:11: error: expected 'in' after for-each pattern\n\
    \    for n > 2 {\n          ^\n/tmp/tmpk7gavh1q.swift:24:11: error: unary operator\
    \ cannot be separated from its operand\n    for n > 2 {\n          ^~\n      \
    \     \n/tmp/tmpk7gavh1q.swift:24:11: error: '>' is not a prefix unary operator\n\
    \    for n > 2 {\n          ^\n/tmp/tmpk7gavh1q.swift:25:29: error: missing argument\
    \ label 'n:' in call\n        let triResult = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n                            ^\n                            n: \n/tmp/tmpk7gavh1q.swift:25:42:\
    \ error: missing argument label 'n:' in call\n        let triResult = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n                                         ^\n \
    \                                        n: \n/tmp/tmpk7gavh1q.swift:25:55: error:\
    \ missing argument label 'n:' in call\n        let triResult = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                                      ^\n\
    \                                                      n: \n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if (n ==\
    \ 0) {\n        return [0]\n    }\n    let results: [Int] = [n]\n    for i in\
    \ 1...n {\n        results.append(results[i-1] + results[i-2])\n    }\n    return\
    \ results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpbtkby7dk.swift:24:17: error: cannot use mutating member on immutable\
    \ value: 'results' is a 'let' constant\n        results.append(results[i-1] +\
    \ results[i-2])\n        ~~~~~~~ ^\n/tmp/tmpbtkby7dk.swift:22:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let results: [Int] = [n]\n    ^~~\n \
    \   var\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n\treturn _tri(n)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpggn9ul7e.swift:19:9: error: cannot find '_tri' in scope\n     \
    \   return _tri(n)\n               ^~~~\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1]\n    if n == 0 {\n        return result\n    }\n    for i = 3; i <= n;\
    \ i++ {\n        result.append(result[i-2] + result[i-1])\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpdy3xaa5p.swift:23:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 3; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return [Int]()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5z0k0uu5/tmp5z0k0uu5.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a6d5ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a6d2e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a6d2e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a6d2e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5z0k0uu5                        0x0000561cbaa993ea <unavailable> + 5098

    5    libc.so.6                          0x00002b4a6d7d8460 __libc_start_main +
    245

    6    tmp5z0k0uu5                        0x0000561cbaa99029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659979917
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr\
    \ = [Int]()\n    var a = 1\n    var b = 3\n    if n % 2 == 0 {\n        while\
    \ a < n / 2 {\n            arr.append(a)\n            a = a + b\n            arr.append((a\
    \ + b) / 2)\n            b = 3 + b\n        }\n        arr.append(n)\n       \
    \ arr.append(a)\n    } else {\n        while a < n / 2 {\n            arr.append(a)\n\
    \            a = a + b\n            arr.append((a + b) / 2)\n            b = 3\
    \ + b\n        }\n        arr.append(b)\n        arr.append(n)\n    }\n    return\
    \ arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2,\
    \ 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8,\
    \ 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\
    assert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpbtdtl0sa/tmpbtdtl0sa.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41742d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4173fcdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4173fcd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4173fcc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtdtl0sa                        0x00005576dffc94da <unavailable> + 5338

    5    libc.so.6                          0x00002b41744c2460 __libc_start_main +
    245

    6    tmpbtdtl0sa                        0x00005576dffc9119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979917
- exit_code: -1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 1 {\n        return [3]\n    }\n    \n    if n % 2 == 0 {\n        return tri(n:\
    \ n - 1) + tri(n: n - 2) + tri(n: n + 1) \n    }\n    \n    return tri(n: n -\
    \ 1) + tri(n: n - 2) + tri(n: n + 1) + [n]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979923
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    switch n\
    \ {\n    case 0:\n        return []\n    case 1:\n        return [3]\n    case\
    \ 2:\n        let a = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        return a\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2,\
    \ 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8,\
    \ 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\
    assert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp1z_qxdnd.swift:25:21: error: missing argument label 'n:' in call\n\
    \        let a = tri(n - 1) + tri(n - 2) + tri(n + 1)\n                    ^\n\
    \                    n: \n/tmp/tmp1z_qxdnd.swift:25:34: error: missing argument\
    \ label 'n:' in call\n        let a = tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \                                ^\n                                 n: \n/tmp/tmp1z_qxdnd.swift:25:47:\
    \ error: missing argument label 'n:' in call\n        let a = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                              ^\n       \
    \                                       n: \n/tmp/tmp1z_qxdnd.swift:19:5: error:\
    \ switch must be exhaustive\n    switch n {\n    ^\n/tmp/tmp1z_qxdnd.swift:19:5:\
    \ note: do you want to add a default clause?\n    switch n {\n    ^\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var triSequence\
    \ = [Int]()\n    if n <= 1 {\n        return triSequence\n    }\n    let third\
    \ = n / 3\n    var first = 0\n    var second = 3\n    triSequence.append(first)\n\
    \    triSequence.append(second)\n    for i in 1...n {\n        let currentTri\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        first = second\n        second\
    \ = currentTri\n        triSequence.append(currentTri)\n    }\n    return triSequence\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpe0hc7cgl.swift:29:30: error: missing argument label 'n:' in call\n\
    \        let currentTri = tri(n - 1) + tri(n - 2) + tri(n + 1)\n             \
    \                ^\n                             n: \n/tmp/tmpe0hc7cgl.swift:29:43:\
    \ error: missing argument label 'n:' in call\n        let currentTri = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n                                          ^\n\
    \                                          n: \n/tmp/tmpe0hc7cgl.swift:29:56:\
    \ error: missing argument label 'n:' in call\n        let currentTri = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n                                             \
    \          ^\n                                                       n: \n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var a: [Int]\
    \ = []\n    let limit: Int = 3\n    guard n >= 0 else { return [] }\n    var temp:\
    \ Int = 0\n    a.append(1)\n    while n != 0 {\n        temp += n/2\n        n\
    \ = temp\n        if n % 2 == 0 {\n            temp += temp\n        } else {\n\
    \            temp += temp\n            temp += temp\n        }\n        a.append(temp)\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmps_geweuy.swift:26:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = temp\n        ^\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return sequence(start:\
    \ 0, end: n + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6ugmoq97.swift:19:12: error: cannot convert return expression of\
    \ type 'UnfoldSequence<Int, (Int?, Bool)>' to return type '[Int]'\n    return\
    \ sequence(start: 0, end: n + 1)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6ugmoq97.swift:19:20: error: incorrect argument labels in call (have 'start:end:',\
    \ expected 'first:next:')\n    return sequence(start: 0, end: n + 1)\n       \
    \            ^~~~~~     ~~~\n                    first     next\n/tmp/tmp6ugmoq97.swift:19:38:\
    \ error: cannot convert value of type 'Int' to expected argument type '(Int) ->\
    \ Int?'\n    return sequence(start: 0, end: n + 1)\n                         \
    \            ^\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for _ in 0 ..< n {\n        result.insert(3, 1)\n        if n\
    \ % 2 == 0 {\n            result.insert(3, n + 3 / 2)\n        } else {\n    \
    \        result.insert(3, n + 4)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpwtxijia8.swift:21:16: error: no exact matches in call to instance\
    \ method 'insert'\n        result.insert(3, 1)\n               ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpwtxijia8.swift:23:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(3,\
    \ n + 3 / 2)\n                   ^\nSwift.Array:11:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmpwtxijia8.swift:25:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(3, n\
    \ + 4)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var results\
    \ = [Int]()\n    if n == 1 {\n        results.append(1)\n        return results\
    \ + [1]\n    }\n    if n == 2 {\n        results.append(3)\n        return results\
    \ + [1, 1, 2]\n    }\n    let a1 = (tri(n - 1) + tri(n - 2))\n    let a2 = tri(n\
    \ + 1) // add last number in array\n    results.append(a1)\n    results.append(a2)\n\
    \    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp4bmxkfv1.swift:28:19: error: missing argument label 'n:' in call\n\
    \    let a1 = (tri(n - 1) + tri(n - 2))\n                  ^\n               \
    \   n: \n/tmp/tmp4bmxkfv1.swift:28:32: error: missing argument label 'n:' in call\n\
    \    let a1 = (tri(n - 1) + tri(n - 2))\n                               ^\n  \
    \                             n: \n/tmp/tmp4bmxkfv1.swift:29:18: error: missing\
    \ argument label 'n:' in call\n    let a2 = tri(n + 1) // add last number in array\n\
    \                 ^\n                 n: \n"
  stdout: ''
  timestamp: 1659979917
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = []\n    var n2 = n % 2 == 0 ? n : n + 1 // n is odd, add 1\n    var\
    \ n3 = n2 % 2 == 0 ? n2 : n2 + 1\n    var n4 = n3 % 2 == 0 ? n3 : n3 + 1\n   \
    \ var n5 = n4 % 2 == 0 ? n4 : n4 + 1\n\n    result[0] = n\n    result[1] = n2\
    \ + n\n    result[2] = n3 + n2 + n\n    result[3] = n4 + n3 + n2 + n\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab888b37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab88882e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab88882e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab88882e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab88882dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab88862d7ec <unavailable> + 186348

    6    tmp27251jng                        0x000055b904b9a380 <unavailable> + 9088

    7    tmp27251jng                        0x000055b904b9939b <unavailable> + 5019

    8    libc.so.6                          0x00002ab888d23460 __libc_start_main +
    245

    9    tmp27251jng                        0x000055b904b990b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return recur(n,\
    \ 1, 1, 3, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpwuf36895.swift:19:12: error: cannot find 'recur' in scope\n   \
    \ return recur(n, 1, 1, 3, 1)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    let recurrence: Int\n    if n % 2 == 0 {\n        recurrence\
    \ = 3\n    } else {\n        recurrence = (1 + n) / 2\n    }\n    for i in 1...n\
    \ {\n        result.append(recurrence)\n        recurrence = recurrence + recurrence\
    \ + recurrence\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpcreez2bt.swift:26:9: warning: immutable value 'i' was never used;\
    \ consider replacing with '_' or removing it\n    for i in 1...n {\n        ^\n\
    \        _\n/tmp/tmpcreez2bt.swift:28:20: error: immutable value 'recurrence'\
    \ may only be initialized once\n        recurrence = recurrence + recurrence +\
    \ recurrence\n                   ^\n/tmp/tmpcreez2bt.swift:20:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let recurrence: Int\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return (0...n).map{\n\
    \        Tribonacci.call($0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp93lkogk3.swift:20:9: error: cannot find 'Tribonacci' in scope\n\
    \        Tribonacci.call($0)\n        ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1]\n    for _ in 2..<n {\n        result *= 2\n        result.append(result[-1]\
    \ + result[-2])\n    }\n    return result.prefix(n + 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmplbbb2vjs.swift:21:16: error: binary operator '*=' cannot be applied\
    \ to operands of type '[Int]' and 'Int'\n        result *= 2\n               ^\n\
    Swift.DurationProtocol:2:17: note: candidate requires that '[Int]' conform to\
    \ 'DurationProtocol' (requirement specified as 'Self' : 'DurationProtocol')\n\
    public protocol DurationProtocol : AdditiveArithmetic, Comparable, Sendable {\n\
    \                ^\n/tmp/tmplbbb2vjs.swift:24:19: error: no 'prefix' candidates\
    \ produce the expected contextual result type '[Int]'\n    return result.prefix(n\
    \ + 1)\n                  ^\nSwift.Sequence:7:40: note: 'prefix' produces 'PrefixSequence<[Int]>',\
    \ not the expected contextual result type '[Int]'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> PrefixSequence<Self>\n                    \
    \                   ^\nSwift.Collection:6:40: note: 'prefix' produces 'ArraySlice<Int>',\
    \ not the expected contextual result type '[Int]'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> Self.SubSequence\n                        \
    \               ^\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var sums\
    \ = [Int]()\n    var twos = [1]\n    for _ in 0..<n {\n        sums.append(twos[(sums.last\
    \ ?? 0) + 1..<sums.count])\n        twos = twos + twos[..<sums.count] + [1]\n\
    \    }\n    return sums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp7e486knc.swift:22:14: error: no exact matches in call to instance\
    \ method 'append'\n        sums.append(twos[(sums.last ?? 0) + 1..<sums.count])\n\
    \             ^\nSwift.Array:7:37: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func append<S>(contentsOf\
    \ newElements: __owned S) where Element == S.Element, S : Sequence\n         \
    \                           ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable\
    \ public mutating func append<S>(contentsOf newElements: __owned S) where S :\
    \ Sequence, Self.Element == S.Element\n                                    ^\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var sum\
    \ = 1\n    \n    for i in 1...n {\n        sum += (i + 1) / 2\n    }\n    \n \
    \   return Array(1...n).prefix(sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0w6ifakn.swift:25:25: error: no 'prefix' candidates produce the\
    \ expected contextual result type '[Int]'\n    return Array(1...n).prefix(sum)\n\
    \                        ^\nSwift.Sequence:7:40: note: 'prefix' produces 'PrefixSequence<Array<Int>>',\
    \ not the expected contextual result type '[Int]'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> PrefixSequence<Self>\n                    \
    \                   ^\nSwift.Collection:6:40: note: 'prefix' produces 'ArraySlice<Int>',\
    \ not the expected contextual result type '[Int]'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> Self.SubSequence\n                        \
    \               ^\nSwift.Sequence:7:40: note: 'prefix' produces 'PrefixSequence<Array<Int>>',\
    \ not the expected contextual result type '[Int]'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> PrefixSequence<Self>\n                    \
    \                   ^\nSwift.Collection:6:40: note: 'prefix' produces 'ArraySlice<Int>',\
    \ not the expected contextual result type '[Int]'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> Self.SubSequence\n                        \
    \               ^\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if (n ==\
    \ 0) || (n == 1) || (n == 2) || (n % 2 == 0) || (n % 2 != 0) {\n        return\
    \ [Int](repeatElement(0, count: n + 1))\n    } else {\n        let result = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n        return result + result[0..<n]\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzi2_2oe2.swift:22:26: error: missing argument label 'n:' in call\n\
    \        let result = tri(n - 1) + tri(n - 2) + tri(n + 1)\n                 \
    \        ^\n                         n: \n/tmp/tmpzi2_2oe2.swift:22:39: error:\
    \ missing argument label 'n:' in call\n        let result = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                      ^\n               \
    \                       n: \n/tmp/tmpzi2_2oe2.swift:22:52: error: missing argument\
    \ label 'n:' in call\n        let result = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \                                                   ^\n                      \
    \                             n: \n"
  stdout: ''
  timestamp: 1659979917
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n <= 3 {\n        for num in 1...n {\n            result.append(num)\n\
    \        }\n    } else {\n        for num in 1...n {\n            result.append((num\
    \ % 2 == 0) ? 1 : 0)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpm7otk8z6/tmpm7otk8z6.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acad60f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acad5defb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acad5def988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acad5dee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm7otk8z6                        0x0000559dffe0f5ca <unavailable> + 5578

    5    libc.so.6                          0x00002acad62e4460 __libc_start_main +
    245

    6    tmpm7otk8z6                        0x0000559dffe0f209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979917
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n < 3\
    \ {\n        return [Int]()\n    }\n\n    var result = [1]\n\n    var tri = 0\n\
    \n    for _ in 0 ..< n / 2 {\n        tri += 1\n        result.append(tri)\n \
    \   }\n\n    if n % 2 == 1 {\n        result.append(tri)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpdq1fte37/tmpdq1fte37.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4987035c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4986d2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4986d2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4986d2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdq1fte37                        0x000055c36012d5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b4987221460 __libc_start_main +
    245

    6    tmpdq1fte37                        0x000055c36012d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    let result\
    \ = [Int]()\n    if n <= 1 {\n        result.append(1)\n        return result\n\
    \    }\n    result.append(3)\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    if n % 2 == 1 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpnimpiv65.swift:21:16: error: cannot use mutating member on immutable\
    \ value: 'result' is a 'let' constant\n        result.append(1)\n        ~~~~~~\
    \ ^\n/tmp/tmpnimpiv65.swift:19:5: note: change 'let' to 'var' to make it mutable\n\
    \    let result = [Int]()\n    ^~~\n    var\n/tmp/tmpnimpiv65.swift:24:12: error:\
    \ cannot use mutating member on immutable value: 'result' is a 'let' constant\n\
    \    result.append(3)\n    ~~~~~~ ^\n/tmp/tmpnimpiv65.swift:19:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let result = [Int]()\n    ^~~\n    var\n\
    /tmp/tmpnimpiv65.swift:26:16: error: cannot use mutating member on immutable value:\
    \ 'result' is a 'let' constant\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \        ~~~~~~ ^\n/tmp/tmpnimpiv65.swift:19:5: note: change 'let' to 'var' to\
    \ make it mutable\n    let result = [Int]()\n    ^~~\n    var\n/tmp/tmpnimpiv65.swift:26:23:\
    \ error: missing argument label 'contentsOf:' in call\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n                      ^\n                      contentsOf:\
    \ \n/tmp/tmpnimpiv65.swift:26:27: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2))\n                          ^\n\
    \                          n: \n/tmp/tmpnimpiv65.swift:26:40: error: missing argument\
    \ label 'n:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n       \
    \                                ^\n                                       n:\
    \ \n/tmp/tmpnimpiv65.swift:29:16: error: cannot use mutating member on immutable\
    \ value: 'result' is a 'let' constant\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n        ~~~~~~ ^\n/tmp/tmpnimpiv65.swift:19:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let result = [Int]()\n    ^~~\n    var\n\
    /tmp/tmpnimpiv65.swift:29:23: error: missing argument label 'contentsOf:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \       ^\n                      contentsOf: \n/tmp/tmpnimpiv65.swift:29:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n       "
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    let result\
    \ = [Int](repeating: 0, count: (n + 1))\n    result[0] = 3\n    result[n] = 1\
    \ + n / 2\n    result[n] = result[n] + result[n-1]\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpl4xsojbi.swift:20:11: error: cannot assign through subscript: 'result'\
    \ is a 'let' constant\n    result[0] = 3\n    ~~~~~~^\n/tmp/tmpl4xsojbi.swift:19:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = [Int](repeating:\
    \ 0, count: (n + 1))\n    ^~~\n    var\n/tmp/tmpl4xsojbi.swift:21:11: error: cannot\
    \ assign through subscript: 'result' is a 'let' constant\n    result[n] = 1 +\
    \ n / 2\n    ~~~~~~^\n/tmp/tmpl4xsojbi.swift:19:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let result = [Int](repeating: 0, count: (n + 1))\n \
    \   ^~~\n    var\n/tmp/tmpl4xsojbi.swift:22:11: error: cannot assign through subscript:\
    \ 'result' is a 'let' constant\n    result[n] = result[n] + result[n-1]\n    ~~~~~~^\n\
    /tmp/tmpl4xsojbi.swift:19:5: note: change 'let' to 'var' to make it mutable\n\
    \    let result = [Int](repeating: 0, count: (n + 1))\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n < 2\
    \ {\n        return [Int]()\n    }\n    var arr = [Int]()\n    arr.append(1)\n\
    \    arr.append(n + 1)\n    for i in  2..<n {\n        arr.append(tri(i-1) + tri(i-2))\n\
    \    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpbanz9iv_.swift:26:20: error: missing argument label 'contentsOf:'\
    \ in call\n        arr.append(tri(i-1) + tri(i-2))\n                   ^\n   \
    \                contentsOf: \n/tmp/tmpbanz9iv_.swift:26:24: error: missing argument\
    \ label 'n:' in call\n        arr.append(tri(i-1) + tri(i-2))\n              \
    \         ^\n                       n: \n/tmp/tmpbanz9iv_.swift:26:35: error:\
    \ missing argument label 'n:' in call\n        arr.append(tri(i-1) + tri(i-2))\n\
    \                                  ^\n                                  n: \n"
  stdout: ''
  timestamp: 1659979917
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n <= 3 {\n        result = [1]\n    } else {\n        for\
    \ i in 1...n {\n            if i % 2 == 0 {\n                result.append(i +\
    \ 1)\n            } else {\n                result.append(i + i + 1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpqlz1ph3e/tmpqlz1ph3e.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad32c194c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad32be8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad32be8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad32be8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlz1ph3e                        0x00005649d21825ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad32c380460 __libc_start_main +
    245

    6    tmpqlz1ph3e                        0x00005649d2182209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979917
- exit_code: -1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var numbers\
    \ = [Int]()\n    \n    if n%2 == 0 {\n        numbers.append(3)\n    }\n    else\
    \ {\n        let a = tri(n: n - 1)\n        let b = tri(n: n - 2)\n        numbers.append(a[0]+b[0])\n\
    \    }\n    \n    return numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979923
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [0]\n\n    if n == 0 {\n        return result\n    }\n    if n == 1 {\n  \
    \      result[0] = 1\n        return result\n    }\n\n    // Add first three numbers\
    \ in series and save them in result\n    result[0] = result[0] + result[1] + result[2]\n\
    \    if n % 2 == 0 {\n        result[2] = result[2] + result[3]\n    }\n\n   \
    \ // Add last two numbers in series and save them in result\n    result[1] = result[0]\
    \ + result[1]\n    if n % 2 == 0 {\n        result[3] = result[3] + result[4]\n\
    \    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aea6b249c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea6af40561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aea6af40286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aea6af4013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aea6af3fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aea6ad3fe83 <unavailable> + 188035

    6    tmpndrc_42b                        0x000055a1321b6083 <unavailable> + 8323

    7    tmpndrc_42b                        0x000055a1321b53eb <unavailable> + 5099

    8    libc.so.6                          0x00002aea6b435460 __libc_start_main +
    245

    9    tmpndrc_42b                        0x000055a1321b5109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var res:\
    \ [Int] = []\n    var a1 = 1\n    var a2 = 1\n    var b1 = 2\n    var b2 = 2\n\
    \    while n >= 0 {\n        if n & 1 == 0 {\n            a1 = a1 + b2\n     \
    \       b1 = b1 + a1\n            a2 = a2 + b2\n            b2 = b2 + a2\n   \
    \     }\n        n -= 1\n    }\n    res.reserve(n + 1)\n    res.append(a1)\n \
    \   res.append(a2)\n    res.append(b1)\n    res.append(b2)\n    return res\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6rtnxf8i.swift:31:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 1\n        ~ ^\n/tmp/tmp6rtnxf8i.swift:33:9:\
    \ error: value of type '[Int]' has no member 'reserve'\n    res.reserve(n + 1)\n\
    \    ~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    switch n\
    \ {\n    case 1: return [3]\n    case 2: return [1, 3]\n    case 3: return [1,\
    \ 3, 3]\n    default:\n        let prev1 = tri(n-1)\n        let prev2 = tri(n-2)\n\
    \        var sum = 0\n        for i in 0 ..< n {\n            sum = prev1[i] +\
    \ prev2[i] + sum\n        }\n        return [sum] + prev1 + prev2\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt1469ame.swift:24:25: error: missing argument label 'n:' in call\n\
    \        let prev1 = tri(n-1)\n                        ^\n                   \
    \     n: \n/tmp/tmpt1469ame.swift:25:25: error: missing argument label 'n:' in\
    \ call\n        let prev2 = tri(n-2)\n                        ^\n            \
    \            n: \n"
  stdout: ''
  timestamp: 1659979917
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  var ans =\
    \ [Int]()\n  if n < 3 {\n    return ans\n  }\n  ans.append(1)\n  ans.append(n\
    \ / 2)\n  if n % 2 == 0 {\n    ans.append(n / 2 + n/2 + 1)\n  } else {\n    ans.append(n)\n\
    \  }\n  return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp86yrlry3/tmp86yrlry3.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40757bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40754b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40754b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40754b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86yrlry3                        0x000055f3fcf444da <unavailable> + 5338

    5    libc.so.6                          0x00002b40759a9460 __libc_start_main +
    245

    6    tmp86yrlry3                        0x000055f3fcf44119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979917
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // write\
    \ your code in Swift 4.2 or later\n    \n    var ret: [Int] = []\n    if n ==\
    \ 1 {\n        ret = [3]\n    } else if n == 2 {\n        ret = [1, 3]\n    }\
    \ else {\n        let n = n % 2\n        let f = n + n - 1\n        let g = n\
    \ + n + n\n        ret = [n, f] + ret\n        if n < g {\n            ret[0]\
    \ = ret[0] + ret[1] + ret[2] + ret[3]\n        }\n    }\n    return ret\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af2584abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2581a2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af2581a2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af2581a213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af2581a1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af257fa1e83 <unavailable> + 188035

    6    tmpx4lqke8b                        0x00005651f44972f0 <unavailable> + 8944

    7    tmpx4lqke8b                        0x00005651f449644b <unavailable> + 5195

    8    libc.so.6                          0x00002af258697460 __libc_start_main +
    245

    9    tmpx4lqke8b                        0x00005651f4496169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    let leftTri = tri(n - 2)\n    let rightTri = tri(n - 1)\n   \
    \ for element in leftTri {\n        result.append(element)\n    }\n    for element\
    \ in rightTri {\n        result.append(element)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0l4ymz85.swift:20:23: error: missing argument label 'n:' in call\n\
    \    let leftTri = tri(n - 2)\n                      ^\n                     \
    \ n: \n/tmp/tmp0l4ymz85.swift:21:24: error: missing argument label 'n:' in call\n\
    \    let rightTri = tri(n - 1)\n                       ^\n                   \
    \    n: \n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var res:\
    \ [Int] = []\n    if n == 1 {\n        res.append(3)\n        return res\n   \
    \ }\n    \n    if n % 2 == 0 {\n        res.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        res.append(tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxqffhcvo.swift:26:20: error: missing argument label 'contentsOf:'\
    \ in call\n        res.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        \
    \           ^\n                   contentsOf: \n/tmp/tmpxqffhcvo.swift:26:24:\
    \ error: missing argument label 'n:' in call\n        res.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n                       ^\n                       n:\
    \ \n/tmp/tmpxqffhcvo.swift:26:37: error: missing argument label 'n:' in call\n\
    \        res.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n                  \
    \                  ^\n                                    n: \n/tmp/tmpxqffhcvo.swift:26:50:\
    \ error: missing argument label 'n:' in call\n        res.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n                                                 ^\n\
    \                                                 n: \n/tmp/tmpxqffhcvo.swift:28:20:\
    \ error: missing argument label 'contentsOf:' in call\n        res.append(tri(n\
    \ - 2) + tri(n + 1))\n                   ^\n                   contentsOf: \n\
    /tmp/tmpxqffhcvo.swift:28:24: error: missing argument label 'n:' in call\n   \
    \     res.append(tri(n - 2) + tri(n + 1))\n                       ^\n        \
    \               n: \n/tmp/tmpxqffhcvo.swift:28:37: error: missing argument label\
    \ 'n:' in call\n        res.append(tri(n - 2) + tri(n + 1))\n                \
    \                    ^\n                                    n: \n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var fibonacci\
    \ = [Int](count: n + 1, repeatedValue: 0)\n    fibonacci[0] = 3\n    \n    for\
    \ i in 1..<n {\n        fibonacci[i+1] = fibonacci[i] + fibonacci[i-1]\n    }\n\
    \    return fibonacci\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpr2lijjj9.swift:19:21: error: no exact matches in call to initializer\
    \ \n    var fibonacci = [Int](count: n + 1, repeatedValue: 0)\n              \
    \      ^\n/tmp/tmpr2lijjj9.swift:19:21: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var fibonacci = [Int](count:\
    \ n + 1, repeatedValue: 0)\n                    ^\n/tmp/tmpr2lijjj9.swift:19:21:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var fibonacci = [Int](count: n + 1, repeatedValue: 0)\n          \
    \          ^\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var sequence\
    \ = [Int]()\n    var fibonacci = [1]\n    var last = 0\n\n    for i in 1...n {\n\
    \        switch i % 2 {\n        case 0:\n            fibonacci.append(fibonacci[last]\
    \ + fibonacci[last-1])\n            last = 0\n        case 1:\n            last\
    \ = fibonacci[last] + fibonacci[last-1]\n        }\n\n        sequence.append(fibonacci[last])\n\
    \    }\n    return sequence\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpl2wph99k.swift:24:9: error: switch must be exhaustive\n       \
    \ switch i % 2 {\n        ^\n/tmp/tmpl2wph99k.swift:24:9: note: do you want to\
    \ add a default clause?\n        switch i % 2 {\n        ^\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr\
    \ = [Int]()\n    arr.reserve(1 + n)\n    arr[0] = 2\n    for i in  1...n {\n \
    \       arr.append(arr[i-2] + arr[i-1])\n    }\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5mxxbmxa.swift:20:9: error: value of type '[Int]' has no member\
    \ 'reserve'\n    arr.reserve(1 + n)\n    ~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = []\n    if n == 0 {\n        return result;\n    }\n    var one = 1\n\
    \    var two = 2\n    var three = 3\n    var four = two\n    if n % 2 == 1 {\n\
    \        result.append(one)\n    }\n    for n in 1...(n + 1) {\n        result.append(one)\n\
    \        if n % 2 == 1 {\n            result.append(two)\n        }\n        if\
    \ n % 3 == 1 {\n            result.append(three)\n        }\n        if n % 5\
    \ == 1 {\n            result.append(four)\n        }\n        one = two\n    \
    \    two = three\n        three = four\n        four = one + two + three + four\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpstj1z11w/tmpstj1z11w.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ea5972c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ea5669b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ea5669988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ea56687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpstj1z11w                        0x000055f068ad956a <unavailable> + 5482

    5    libc.so.6                          0x00002b6ea5b5e460 __libc_start_main +
    245

    6    tmpstj1z11w                        0x000055f068ad91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979917
