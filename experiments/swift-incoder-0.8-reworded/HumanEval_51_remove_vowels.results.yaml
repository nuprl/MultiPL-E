language: swift
name: HumanEval_51_remove_vowels
results:
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ res = text\n    var isVowel = false\n    for cIdx := 0; cIdx < len(text); cIdx++\
    \ {\n        if text[cIdx] == \"a\" || text[cIdx] == \"e\" || text[cIdx] == \"\
    i\" || text[cIdx] == \"o\" || text[cIdx] == \"u\" {\n            res = res[:cIdx]\
    \ + res[(cIdx+1):]\n            isVowel = true\n        }\n    }\n    if !isVowel\
    \ {\n        return res\n    }\n    // Return empty string if all letters are\
    \ vowels\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp5299k4jb.swift:16:15: error: expected type\n    for cIdx := 0;\
    \ cIdx < len(text); cIdx++ {\n              ^\n               <#type#>\n/tmp/tmp5299k4jb.swift:16:15:\
    \ error: expected 'in' after for-each pattern\n    for cIdx := 0; cIdx < len(text);\
    \ cIdx++ {\n              ^\n/tmp/tmp5299k4jb.swift:16:15: error: expected Sequence\
    \ expression for for-each loop\n    for cIdx := 0; cIdx < len(text); cIdx++ {\n\
    \              ^\n/tmp/tmp5299k4jb.swift:18:23: error: expected expression in\
    \ list of expressions\n            res = res[:cIdx] + res[(cIdx+1):]\n       \
    \               ^\n/tmp/tmp5299k4jb.swift:18:44: error: expected ',' separator\n\
    \            res = res[:cIdx] + res[(cIdx+1):]\n                             \
    \              ^\n                                           ,\n/tmp/tmp5299k4jb.swift:18:44:\
    \ error: expected expression in list of expressions\n            res = res[:cIdx]\
    \ + res[(cIdx+1):]\n                                           ^\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tlet\
    \ regex = try! NSRegularExpression(pattern: \"[aeiouAEIOU]\", options: [])\n\t\
    return regex.stringByReplacingMatchesInString(text, options: [], range: NSMakeRange(0,\
    \ countElements(text)), withTemplate: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpjnv_vq_e.swift:14:19: error: cannot find 'NSRegularExpression'\
    \ in scope\n        let regex = try! NSRegularExpression(pattern: \"[aeiouAEIOU]\"\
    , options: [])\n                         ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpjnv_vq_e.swift:15:74:\
    \ error: cannot find 'NSMakeRange' in scope\n        return regex.stringByReplacingMatchesInString(text,\
    \ options: [], range: NSMakeRange(0, countElements(text)), withTemplate: \"\"\
    )\n                                                                          \
    \      ^~~~~~~~~~~\n/tmp/tmpjnv_vq_e.swift:15:89: error: cannot find 'countElements'\
    \ in scope\n        return regex.stringByReplacingMatchesInString(text, options:\
    \ [], range: NSMakeRange(0, countElements(text)), withTemplate: \"\")\n      \
    \                                                                            \
    \             ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n  return\
    \ Strings.remove_vowels(text: text)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp3s2vb9s6.swift:14:10: error: cannot find 'Strings' in scope\n \
    \ return Strings.remove_vowels(text: text)\n         ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    switch\
    \ text.unicodeScalars {\n    case .uppercase:\n        return text.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n               .filter { !$0.isASCII }\n         \
    \      .map { String($0) }\n               .joinWithSeparator(\"\")\n    case\
    \ .lowercase:\n        return text.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \               .filter { $0.isASCII }\n               .map { String($0) }\n \
    \              .joinWithSeparator(\"\")\n    case .grapheme:\n        return text.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n               .filter { !$0.isASCII }\n         \
    \      .map { String($0) }\n               .joinWithSeparator(\"\")\n    case\
    \ .other:\n        return text.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \               .filter { $0.isASCII }\n               .map { String($0) }\n \
    \              .joinWithSeparator(\"\")\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpyxvebrbi.swift:15:11: error: type 'String.UnicodeScalarView' has\
    \ no member 'uppercase'\n    case .uppercase:\n         ~^~~~~~~~~\n/tmp/tmpyxvebrbi.swift:20:11:\
    \ error: type 'String.UnicodeScalarView' has no member 'lowercase'\n    case .lowercase:\n\
    \         ~^~~~~~~~~\n/tmp/tmpyxvebrbi.swift:25:11: error: type 'String.UnicodeScalarView'\
    \ has no member 'grapheme'\n    case .grapheme:\n         ~^~~~~~~~\n/tmp/tmpyxvebrbi.swift:30:11:\
    \ error: type 'String.UnicodeScalarView' has no member 'other'\n    case .other:\n\
    \         ~^~~~~\n/tmp/tmpyxvebrbi.swift:16:21: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n        return text.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n               ~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpyxvebrbi.swift:16:45:\
    \ error: cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \        return text.trimmingCharacters(in: .whitespacesAndNewlines)\n       \
    \                                    ~^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyxvebrbi.swift:21:21:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n        return\
    \ text.trimmingCharacters(in: .whitespacesAndNewlines)\n               ~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyxvebrbi.swift:21:45: error: cannot infer contextual base in reference\
    \ to member 'whitespacesAndNewlines'\n        return text.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n                                           ~^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyxvebrbi.swift:26:21: error: value of type 'String' has no member 'trimmingCharacters'\n\
    \        return text.trimmingCharacters(in: .whitespacesAndNewlines)\n       \
    \        ~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpyxvebrbi.swift:26:45: error: cannot\
    \ infer contextual base in reference to member 'whitespacesAndNewlines'\n    \
    \    return text.trimmingCharacters(in: .whitespacesAndNewlines)\n           \
    \                                ~^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyxvebrbi.swift:31:21:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n        return\
    \ text.trimmingCharacters(in: .whitespacesAndNewlines)\n   "
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    text\
    \ = text.lowercased()\n    var buffer = \"\"\n    var i = 0\n    var j = 0\n \
    \   var k = 0\n    while i < text.count {\n        if text[i] == 'a' {\n     \
    \       i += 1\n        } else if text[i] == 'e' {\n            i += 1\n     \
    \   } else if text[i] == 'i' {\n            i += 1\n        } else if text[i]\
    \ == 'o' {\n            i += 1\n        } else if text[i] == 'u' {\n         \
    \   i += 1\n        } else if text[i] == 'y' {\n            i += 1\n        }\
    \ else if text[i] == 'z' {\n            i += 1\n        } else {\n           \
    \ i += 1\n        }\n        buffer += String(text[i])\n    }\n    return buffer\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp0rab7via.swift:20:23: error: single-quoted string literal found,\
    \ use '\"'\n        if text[i] == 'a' {\n                      ^~~\n         \
    \             \"a\"\n/tmp/tmp0rab7via.swift:22:30: error: single-quoted string\
    \ literal found, use '\"'\n        } else if text[i] == 'e' {\n              \
    \               ^~~\n                             \"e\"\n/tmp/tmp0rab7via.swift:24:30:\
    \ error: single-quoted string literal found, use '\"'\n        } else if text[i]\
    \ == 'i' {\n                             ^~~\n                             \"\
    i\"\n/tmp/tmp0rab7via.swift:26:30: error: single-quoted string literal found,\
    \ use '\"'\n        } else if text[i] == 'o' {\n                             ^~~\n\
    \                             \"o\"\n/tmp/tmp0rab7via.swift:28:30: error: single-quoted\
    \ string literal found, use '\"'\n        } else if text[i] == 'u' {\n       \
    \                      ^~~\n                             \"u\"\n/tmp/tmp0rab7via.swift:30:30:\
    \ error: single-quoted string literal found, use '\"'\n        } else if text[i]\
    \ == 'y' {\n                             ^~~\n                             \"\
    y\"\n/tmp/tmp0rab7via.swift:32:30: error: single-quoted string literal found,\
    \ use '\"'\n        } else if text[i] == 'z' {\n                             ^~~\n\
    \                             \"z\"\n/tmp/tmp0rab7via.swift:14:5: error: cannot\
    \ assign to value: 'text' is a 'let' constant\n    text = text.lowercased()\n\
    \    ^~~~\n/tmp/tmp0rab7via.swift:20:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ text[i] == 'a' {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp0rab7via.swift:22:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        } else if text[i] == 'e' {\n                  ^~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           "
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ remove_vowels(text.lowercased())\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp5wo64vah.swift:14:26: error: missing argument label 'text:' in\
    \ call\n    return remove_vowels(text.lowercased())\n                        \
    \ ^\n                         text: \n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    text.gsub(Regex(\"\
    [aeiouAEIOU]\"), \"_\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpck0os3um.swift:14:10: error: value of type 'String' has no member\
    \ 'gsub'\n    text.gsub(Regex(\"[aeiouAEIOU]\"), \"_\")\n    ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    for _, b := range text {\n        switch b {\n        case\
    \ 'a':\n        case 'e':\n        case 'i':\n        case 'o':\n        case\
    \ 'u':\n            result = result + b\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp_be0wt_7.swift:15:10: error: expected 'in' after for-each pattern\n\
    \    for _, b := range text {\n         ^\n/tmp/tmp_be0wt_7.swift:15:10: error:\
    \ expected Sequence expression for for-each loop\n    for _, b := range text {\n\
    \         ^\n/tmp/tmp_be0wt_7.swift:17:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp_be0wt_7.swift:17:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'a':\n        ^~~~~~~~~\n                  break\n/tmp/tmp_be0wt_7.swift:18:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp_be0wt_7.swift:18:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'e':\n        ^~~~~~~~~\n                  break\n/tmp/tmp_be0wt_7.swift:19:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'i':\n   \
    \          ^~~\n             \"i\"\n/tmp/tmp_be0wt_7.swift:19:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'i':\n        ^~~~~~~~~\n                  break\n/tmp/tmp_be0wt_7.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'o':\n   \
    \          ^~~\n             \"o\"\n/tmp/tmp_be0wt_7.swift:20:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'o':\n        ^~~~~~~~~\n                  break\n/tmp/tmp_be0wt_7.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'u':\n   \
    \          ^~~\n             \"u\"\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text.isEmpty { return \"\" }\n    var rtext = \"\"\n    for cs in text.unicodeScalars\
    \ {\n        if cs.value > UnicodeScalar(unicodeScalars[0xa0]) {\n           \
    \ rtext += cs.value\n        } else {\n            rtext += \"\\u{0020}\"\n  \
    \      }\n    }\n    return rtext\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpqqdhab3w.swift:17:37: error: cannot find 'unicodeScalars' in scope\n\
    \        if cs.value > UnicodeScalar(unicodeScalars[0xa0]) {\n               \
    \                     ^~~~~~~~~~~~~~\n/tmp/tmpqqdhab3w.swift:17:21: error: operator\
    \ function '>' requires that 'UnicodeScalar' (aka 'Unicode.Scalar') conform to\
    \ 'BinaryInteger'\n        if cs.value > UnicodeScalar(unicodeScalars[0xa0]) {\n\
    \                    ^\nSwift.BinaryInteger:7:24: note: where 'Other' = 'UnicodeScalar'\
    \ (aka 'Unicode.Scalar')\n    public static func > <Other>(lhs: Self, rhs: Other)\
    \ -> Bool where Other : BinaryInteger\n                       ^\n/tmp/tmpqqdhab3w.swift:18:25:\
    \ error: cannot convert value of type 'UInt32' to expected argument type 'String'\n\
    \            rtext += cs.value\n                        ^\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\".unicodeScalars\n    let length = text.count\n    var\
    \ result = String()\n    for index in 0..<length {\n        let character = text[index]\n\
    \        let isVowel = vowels.contains(character)\n        if !isVowel {\n   \
    \         result += String(character)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpujgegngg.swift:18:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let character\
    \ = text[index]\n                        ^~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpujgegngg.swift:19:39: error:\
    \ cannot convert value of type 'Character' to expected argument type 'Unicode.Scalar'\n\
    \        let isVowel = vowels.contains(character)\n                          \
    \            ^\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" {\n        return \"\"\n    }\n    \n    var resultString = \"\"\
    \n    \n    for char in text {\n        if char == 'a' || char == 'e' || char\
    \ == 'i' || char == 'o' || char == 'u'{\n            resultString += \"\"\n  \
    \      } else {\n            resultString += char\n        }\n    }\n    \n  \
    \  return resultString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpxbrw2qs0.swift:21:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == 'a' || char == 'e' || char == 'i' || char == 'o'\
    \ || char == 'u'{\n                   ^~~\n                   \"a\"\n/tmp/tmpxbrw2qs0.swift:21:35:\
    \ error: single-quoted string literal found, use '\"'\n        if char == 'a'\
    \ || char == 'e' || char == 'i' || char == 'o' || char == 'u'{\n             \
    \                     ^~~\n                                  \"e\"\n/tmp/tmpxbrw2qs0.swift:21:50:\
    \ error: single-quoted string literal found, use '\"'\n        if char == 'a'\
    \ || char == 'e' || char == 'i' || char == 'o' || char == 'u'{\n             \
    \                                    ^~~\n                                   \
    \              \"i\"\n/tmp/tmpxbrw2qs0.swift:21:65: error: single-quoted string\
    \ literal found, use '\"'\n        if char == 'a' || char == 'e' || char == 'i'\
    \ || char == 'o' || char == 'u'{\n                                           \
    \                     ^~~\n                                                  \
    \              \"o\"\n/tmp/tmpxbrw2qs0.swift:21:80: error: single-quoted string\
    \ literal found, use '\"'\n        if char == 'a' || char == 'e' || char == 'i'\
    \ || char == 'o' || char == 'u'{\n                                           \
    \                                    ^~~\n                                   \
    \                                            \"u\"\n/tmp/tmpxbrw2qs0.swift:24:29:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            resultString += char\n                            ^\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    \n\
    \    return remove_vowels(text).map {\n        String($0)\n    }.joined()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp991s1ss8.swift:15:26: error: missing argument label 'text:' in\
    \ call\n    return remove_vowels(text).map {\n                         ^\n   \
    \                      text: \n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n    var vowels_removed = Set()\n\
    \    var text = text\n    if text == \"\" {\n        return \"\"\n    }\n    for\
    \ char in text {\n        if !vowels.contains(char) {\n            vowels_removed.insert(char)\n\
    \        }\n    }\n    var res = String()\n    for char in text {\n        if\
    \ vowels_removed.contains(char) {\n            res.insert(char)\n        }\n \
    \   }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpipdw2khx.swift:14:18: error: no exact matches in call to initializer\
    \ \n    var vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n                \
    \ ^\nSwift.Set:2:23: note: incorrect labels for candidate (have: '(_:_:_:_:_:)',\
    \ expected: '(arrayLiteral:_:_:_:_:)')\n    @inlinable public init(arrayLiteral\
    \ elements: Element...)\n                      ^\nSwift.SetAlgebra:2:23: note:\
    \ incorrect labels for candidate (have: '(_:_:_:_:_:)', expected: '(arrayLiteral:_:_:_:_:)')\n\
    \    @inlinable public init(arrayLiteral: Self.Element...)\n                 \
    \     ^\n/tmp/tmpipdw2khx.swift:15:26: error: generic parameter 'Element' could\
    \ not be inferred\n    var vowels_removed = Set()\n                         ^\n\
    /tmp/tmpipdw2khx.swift:15:26: note: explicitly specify the generic arguments to\
    \ fix this issue\n    var vowels_removed = Set()\n                         ^\n\
    \                            <<#Element: Hashable#>>\n/tmp/tmpipdw2khx.swift:28:28:\
    \ error: missing argument for parameter 'at' in call\n            res.insert(char)\n\
    \                           ^\n                           , at: <#String.Index#>\n\
    Swift.String:12:26: note: 'insert(_:at:)' declared here\n    public mutating func\
    \ insert(_ newElement: Character, at i: String.Index)\n                      \
    \   ^\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.fold([]) { (res, c) -> (String, String) -> String in\n        if c != \"\
    a\" && c != \"e\" && c != \"i\" && c != \"o\" && c != \"u\" {\n            return\
    \ (res + c, \"0\")\n        } else {\n            return (res + c, \"1\")\n  \
    \      }\n    }.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmppy4jkkw7.swift:14:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return text.fold([]) { (res, c) -> (String, String) ->\
    \ String in\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978781
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for c in text {\n        if\
    \ let index = vowels.firstIndex(of: c) {\n            let vowel = vowels[index]\n\
    \            text = text.remove(at: index)\n            text = text.remove(at:\
    \ index)\n            text = text.remove(at: index)\n            text = text.remove(at:\
    \ index)\n            text += vowel\n        }\n    }\n    return text\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpimp0fhk4.swift:16:46: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let index = vowels.firstIndex(of:\
    \ c) {\n                                             ^\n/tmp/tmpimp0fhk4.swift:18:25:\
    \ error: no exact matches in call to instance method 'remove'\n            text\
    \ = text.remove(at: index)\n                        ^\n/tmp/tmpimp0fhk4.swift:18:25:\
    \ note: found candidate with type '(String.Index) -> Character'\n            text\
    \ = text.remove(at: index)\n                        ^\n/tmp/tmpimp0fhk4.swift:18:13:\
    \ error: cannot assign to value: 'text' is a 'let' constant\n            text\
    \ = text.remove(at: index)\n            ^~~~\n/tmp/tmpimp0fhk4.swift:18:25: error:\
    \ cannot assign value of type 'Character' to type 'String'\n            text =\
    \ text.remove(at: index)\n                   ~~~~~^~~~~~~~~~~~~~~~~\n/tmp/tmpimp0fhk4.swift:19:25:\
    \ error: no exact matches in call to instance method 'remove'\n            text\
    \ = text.remove(at: index)\n                        ^\n/tmp/tmpimp0fhk4.swift:19:25:\
    \ note: found candidate with type '(String.Index) -> Character'\n            text\
    \ = text.remove(at: index)\n                        ^\n/tmp/tmpimp0fhk4.swift:19:13:\
    \ error: cannot assign to value: 'text' is a 'let' constant\n            text\
    \ = text.remove(at: index)\n            ^~~~\n/tmp/tmpimp0fhk4.swift:19:25: error:\
    \ cannot assign value of type 'Character' to type 'String'\n            text =\
    \ text.remove(at: index)\n                   ~~~~~^~~~~~~~~~~~~~~~~\n/tmp/tmpimp0fhk4.swift:20:25:\
    \ error: no exact matches in call to instance method 'remove'\n            text\
    \ = text.remove(at: index)\n                        ^\n/tmp/tmpimp0fhk4.swift:20:25:\
    \ note: found candidate with type '(String.Index) -> Character'\n            text\
    \ = text.remove(at: index)\n                        ^\n/tmp/tmpimp0fhk4.swift:20:13:\
    \ error: cannot assign to value: 'text' is a 'let' constant\n            text\
    \ = text.remove(at: index)\n            ^~~~\n/tmp/tmpimp0fhk4.swift:20:25: error:\
    \ cannot assign value of type 'Character' to type 'S"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\treturn\
    \ removeVowels(text)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmptsoxlnvc.swift:14:9: error: cannot find 'removeVowels' in scope\n\
    \        return removeVowels(text)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    if text == \"\" {\n        return result\n    }\n    for\
    \ c in text {\n        switch c {\n        case 'a':\n        case 'e':\n    \
    \    case 'i':\n        case 'o':\n        case 'u':\n        case 'A':\n    \
    \    case 'E':\n        case 'I':\n        case 'O':\n        case 'U':\n    \
    \        result = result + c\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp07nf3t2d.swift:20:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp07nf3t2d.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'a':\n        ^~~~~~~~~\n                  break\n/tmp/tmp07nf3t2d.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp07nf3t2d.swift:21:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'e':\n        ^~~~~~~~~\n                  break\n/tmp/tmp07nf3t2d.swift:22:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'i':\n   \
    \          ^~~\n             \"i\"\n/tmp/tmp07nf3t2d.swift:22:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'i':\n        ^~~~~~~~~\n                  break\n/tmp/tmp07nf3t2d.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'o':\n   \
    \          ^~~\n             \"o\"\n/tmp/tmp07nf3t2d.swift:23:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'o':\n        ^~~~~~~~~\n                  break\n/tmp/tmp07nf3t2d.swift:24:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'u':\n   \
    \          ^~~\n             \"u\"\n/tmp/tmp07nf3t2d.swift:24:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'u':\n        ^~~~~~~~~\n                  break\n/tmp/tmp07nf3t2d.swift:25:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'A':\n   \
    \          ^~~\n             \"A\"\n/tmp/tmp07nf3t2d.swift:25:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'A':\n        ^~~~~~~~~\n                  break\n/tmp/tmp07nf3t2d.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'E':\n   \
    \          ^~~\n             \"E\"\n/tmp/tmp07nf3t2d.swift:26:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        "
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\treturn\
    \ remove_vowels(text, chars: [])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpppvz3qoq.swift:14:36: error: extra argument 'chars' in call\n \
    \       return remove_vowels(text, chars: [])\n                            ~~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.lowercased().removeSubrange(text.startIndex..<text.index(before: text.endIndex,\
    \ options: .backwards))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpn6qh9vdz.swift:14:107: error: extra argument 'options' in call\n\
    \    return text.lowercased().removeSubrange(text.startIndex..<text.index(before:\
    \ text.endIndex, options: .backwards))\n                                     \
    \                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\n\
    /tmp/tmpn6qh9vdz.swift:14:30: error: no exact matches in call to instance method\
    \ 'removeSubrange'\n    return text.lowercased().removeSubrange(text.startIndex..<text.index(before:\
    \ text.endIndex, options: .backwards))\n                             ^\n/tmp/tmpn6qh9vdz.swift:14:30:\
    \ note: found candidate with type '(Range<String.Index>) -> ()'\n    return text.lowercased().removeSubrange(text.startIndex..<text.index(before:\
    \ text.endIndex, options: .backwards))\n                             ^\n/tmp/tmpn6qh9vdz.swift:14:30:\
    \ error: cannot convert return expression of type '()' to return type 'String'\n\
    \    return text.lowercased().removeSubrange(text.startIndex..<text.index(before:\
    \ text.endIndex, options: .backwards))\n           ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpn6qh9vdz.swift:14:107: error: cannot infer contextual base in reference\
    \ to member 'backwards'\n    return text.lowercased().removeSubrange(text.startIndex..<text.index(before:\
    \ text.endIndex, options: .backwards))\n                                     \
    \                                                                    ~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = CharacterSet(arrayLiteral: \"aeiou\")\n    let newString = text.filter{$0.isLetter\
    \ && !vowels.contains($0)}\n    return newString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpbsancuv7.swift:14:18: error: cannot find 'CharacterSet' in scope\n\
    \    let vowels = CharacterSet(arrayLiteral: \"aeiou\")\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    guard\
    \ let text = text else {\n        return \"\"\n    }\n    let vowels = Set([\"\
    a\", \"e\", \"i\", \"o\", \"u\"])\n    let filtered = text.unicodeScalars.filter\
    \ { vowels.contains($0.value) }\n    return String(filtered)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpqra37lvk.swift:14:11: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n    guard let text = text else {\n  \
    \        ^          ~~~~\n/tmp/tmpqra37lvk.swift:18:68: error: cannot convert\
    \ value of type 'UInt32' to expected argument type 'String'\n    let filtered\
    \ = text.unicodeScalars.filter { vowels.contains($0.value) }\n               \
    \                                                    ^\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    text.unicodeScalars.filter\
    \ {\n        CharacterSet.vowels.contains($0)\n    }.flatMap { String($0) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp_8e52qck.swift:15:9: error: cannot find 'CharacterSet' in scope\n\
    \        CharacterSet.vowels.contains($0)\n        ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    return text.filter{ vowels.indexOf(String($0)) != nil\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") ==\
    \ \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp943_9bz5.swift:15:32: error: value of type 'String' has no member\
    \ 'indexOf'\n    return text.filter{ vowels.indexOf(String($0)) != nil }\n   \
    \                     ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.unicodeScalars.filter{ $0.isUppercaseOrLowercase }.joined()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpukwjkr28.swift:14:43: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercaseOrLowercase'\n    return text.unicodeScalars.filter{ $0.isUppercaseOrLowercase\
    \ }.joined()\n                                       ~~ ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" {\n        return \"\"\n    }\n    let vowels = \"aeiou\"\n   \
    \ let letters = Array(text)\n    let output = String()\n    for letter in letters\
    \ {\n        if let index = vowels.index(of: letter) {\n            output = output\
    \ + String(letter)\n        }\n    }\n    return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpu2bpb1i5.swift:21:31: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = vowels.index(of: letter) {\n  \
    \                            ^\n/tmp/tmpu2bpb1i5.swift:21:31: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = vowels.index(of: letter) {\n               \
    \               ^~~~~\n                              firstIndex\n/tmp/tmpu2bpb1i5.swift:22:13:\
    \ error: cannot assign to value: 'output' is a 'let' constant\n            output\
    \ = output + String(letter)\n            ^~~~~~\n/tmp/tmpu2bpb1i5.swift:19:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let output = String()\n\
    \    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" {\n        return \"\"\n    }\n    var vowels = Set(\"aeiouAEIOU\"\
    )\n    var result = \"\"\n    for c in text {\n        if !vowels.contains(c)\
    \ {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpmfo6_8rc.swift:21:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += c\n              \
    \        ^\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ removeConsonants(removeVowels(text))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpf60n3f__.swift:14:12: error: cannot find 'removeConsonants' in\
    \ scope\n    return removeConsonants(removeVowels(text))\n           ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpf60n3f__.swift:14:29: error: cannot find 'removeVowels' in scope\n   \
    \ return removeConsonants(removeVowels(text))\n                            ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ remove_vowels(&text, text.characters.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp0fk38frq.swift:14:49: error: extra argument in call\n    return\
    \ remove_vowels(&text, text.characters.count)\n                        ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmp0fk38frq.swift:14:26: error: '&' used with non-inout argument of type\
    \ 'String'\n    return remove_vowels(&text, text.characters.count)\n         \
    \                ^~~~~\n                         \n/tmp/tmp0fk38frq.swift:14:26:\
    \ error: cannot pass immutable value as inout argument: 'text' is a 'let' constant\n\
    \    return remove_vowels(&text, text.characters.count)\n                    \
    \     ^~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = Set(\"aeiouy\")\n\n    // Return empty string if text is empty or contains\
    \ only vowels.\n    if text.characters.count == 0 || (text.characters.count ==\
    \ 1 && vowels.contains(text)) {\n        return \"\"\n    }\n\n    // Set up the\
    \ result string.\n    var result = \"\"\n\n    // Iterate over all the characters\
    \ in the text.\n    for var i = 0; i < text.characters.count; i++ {\n        result\
    \ += if text.characters.contains(i, for: String.UnicodeScalar.init(\"A\")) {\n\
    \            text.removeSubrange(i, i)\n        }\n        else { text[i] }\n\
    \    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp1mkjctr0.swift:25:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < text.characters.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1mkjctr0.swift:26:19: error: expected expression after operator\n    \
    \    result += if text.characters.contains(i, for: String.UnicodeScalar.init(\"\
    A\")) {\n                  ^\n/tmp/tmp1mkjctr0.swift:17:13: error: 'characters'\
    \ is unavailable: Please use String directly\n    if text.characters.count ==\
    \ 0 || (text.characters.count == 1 && vowels.contains(text)) {\n            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1mkjctr0.swift:17:44:\
    \ error: 'characters' is unavailable: Please use String directly\n    if text.characters.count\
    \ == 0 || (text.characters.count == 1 && vowels.contains(text)) {\n          \
    \                                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter {\n        switch String($0) {\n        case \"a\", \"e\", \"i\"\
    , \"o\", \"u\", \"y\", \"a\", \"e\", \"i\", \"o\", \"u\":\n            return\
    \ false\n        default:\n            return true\n        }\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpba3o74ca/tmpba3o74ca.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f31058c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f30d4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f30d4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f30d4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba3o74ca                        0x00005638553ea86b <unavailable> + 6251

    5    libc.so.6                          0x00002b2f31244460 __libc_start_main +
    245

    6    tmpba3o74ca                        0x00005638553ea069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ index = text.startIndex\n    var result = \"\"\n\n    for letter in text.unicodeScalars\
    \ {\n        if letter.value > 0x1F && letter.value < 0x7F {\n            result\
    \ += text[index]\n            index = text.index(after: index)\n        }\n  \
    \  }\n\n    if index != text.endIndex {\n        result += text[index..<text.endIndex]\n\
    \    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmptia7y4iv.swift:19:27: error: subscript 'subscript(_:)' requires\
    \ that 'String.Index' conform to 'RangeExpression'\n            result += text[index]\n\
    \                          ^\nSwift.Collection:2:23: note: where 'R' = 'String.Index'\n\
    \    @inlinable public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression,\
    \ Self.Index == R.Bound { get }\n                      ^\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.unicodeScalars.filter { ($0 as! UnicodeScalar).isInverted() }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp71fj0s2m.swift:14:32: error: no 'filter' candidates produce the\
    \ expected contextual result type 'String'\n    return text.unicodeScalars.filter\
    \ { ($0 as! UnicodeScalar).isInverted() }\n                               ^\n\
    Swift.RangeReplaceableCollection:3:40: note: 'filter' produces 'String.UnicodeScalarView',\
    \ not the expected contextual result type 'String'\n    @inlinable public __consuming\
    \ func filter(_ isIncluded: (Self.Element) throws -> Bool) rethrows -> Self\n\
    \                                       ^\nSwift.Sequence:3:40: note: 'filter'\
    \ produces '[Unicode.Scalar]', not the expected contextual result type 'String'\n\
    \    @inlinable public __consuming func filter(_ isIncluded: (Self.Element) throws\
    \ -> Bool) rethrows -> [Self.Element]\n                                      \
    \ ^\n/tmp/tmp71fj0s2m.swift:14:64: error: value of type 'UnicodeScalar' (aka 'Unicode.Scalar')\
    \ has no member 'isInverted'\n    return text.unicodeScalars.filter { ($0 as!\
    \ UnicodeScalar).isInverted() }\n                                        ~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" { return \"\" }\n    var result : String = text\n    for index\
    \ : Int32 = 0; index < text.characters.count; index++ {\n        let character:\
    \ unichar = text[index]\n        if character == 'a' || character == 'A' || character\
    \ == 'e' || character == 'E' || character == 'i' || character == 'I' || character\
    \ == 'o' || character == 'O' || character == 'u' || character == 'U' {\n     \
    \       result.remove(at: index)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpb_nzqthw.swift:16:23: error: expected 'in' after for-each pattern\n\
    \    for index : Int32 = 0; index < text.characters.count; index++ {\n       \
    \               ^\n/tmp/tmpb_nzqthw.swift:16:23: error: expected Sequence expression\
    \ for for-each loop\n    for index : Int32 = 0; index < text.characters.count;\
    \ index++ {\n                      ^\n/tmp/tmpb_nzqthw.swift:18:25: error: single-quoted\
    \ string literal found, use '\"'\n        if character == 'a' || character ==\
    \ 'A' || character == 'e' || character == 'E' || character == 'i' || character\
    \ == 'I' || character == 'o' || character == 'O' || character == 'u' || character\
    \ == 'U' {\n                        ^~~\n                        \"a\"\n/tmp/tmpb_nzqthw.swift:18:45:\
    \ error: single-quoted string literal found, use '\"'\n        if character ==\
    \ 'a' || character == 'A' || character == 'e' || character == 'E' || character\
    \ == 'i' || character == 'I' || character == 'o' || character == 'O' || character\
    \ == 'u' || character == 'U' {\n                                            ^~~\n\
    \                                            \"A\"\n/tmp/tmpb_nzqthw.swift:18:65:\
    \ error: single-quoted string literal found, use '\"'\n        if character ==\
    \ 'a' || character == 'A' || character == 'e' || character == 'E' || character\
    \ == 'i' || character == 'I' || character == 'o' || character == 'O' || character\
    \ == 'u' || character == 'U' {\n                                             \
    \                   ^~~\n                                                    \
    \            \"e\"\n/tmp/tmpb_nzqthw.swift:18:85: error: single-quoted string\
    \ literal found, use '\"'\n        if character == 'a' || character == 'A' ||\
    \ character == 'e' || character == 'E' || character == 'i' || character == 'I'\
    \ || character == 'o' || character == 'O' || character == 'u' || character ==\
    \ 'U' {\n                                                                    \
    \                ^~~\n                                                       \
    \                             \"E\"\n/tmp/tmpb_nzqthw.swift:18:105: error: single-quoted\
    \ string literal found, use "
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\ttext\
    \ = lowercase(text)\n\tlet vowels = CharacterSet(arrayLiteral: \"aeiouy\")\n\t\
    return text.filter{ !vowels.contains($0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp55atr1g2.swift:14:9: error: cannot find 'lowercase' in scope\n\
    \        text = lowercase(text)\n               ^~~~~~~~~\n/tmp/tmp55atr1g2.swift:14:2:\
    \ error: cannot assign to value: 'text' is a 'let' constant\n        text = lowercase(text)\n\
    \        ^~~~\n/tmp/tmp55atr1g2.swift:15:15: error: cannot find 'CharacterSet'\
    \ in scope\n        let vowels = CharacterSet(arrayLiteral: \"aeiouy\")\n    \
    \                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ removeConsonants(removeVowels(text))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpf60n3f__.swift:14:12: error: cannot find 'removeConsonants' in\
    \ scope\n    return removeConsonants(removeVowels(text))\n           ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpf60n3f__.swift:14:29: error: cannot find 'removeVowels' in scope\n   \
    \ return removeConsonants(removeVowels(text))\n                            ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tvar\
    \ vowels = \"aAiIuU\"\n\treturn text.trim(\n\t\tstartIndex: 0,\n\t\tendIndex:\
    \ text.characters.count,\n\t\twith: nil,\n\t\tdirection: String.CharacterDirection.backward,\n\
    \t\toptions: String.CompareOptions.literally\n\t).replacingOccurrences(of: \"\
    [aeiouAEIOU]\", with: \"\", options: .regularExpression)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpxnyatkg1.swift:15:14: error: value of type 'String' has no member\
    \ 'trim'\n        return text.trim(\n               ~~~~ ^~~~\n/tmp/tmpxnyatkg1.swift:19:21:\
    \ error: type 'String' has no member 'CharacterDirection'\n                direction:\
    \ String.CharacterDirection.backward,\n                           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxnyatkg1.swift:20:19: error: type 'String' has no member 'CompareOptions'\n\
    \                options: String.CompareOptions.literally\n                  \
    \       ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpxnyatkg1.swift:18:9: error: 'nil' requires\
    \ a contextual type\n                with: nil,\n                      ^\n/tmp/tmpxnyatkg1.swift:21:65:\
    \ error: cannot infer contextual base in reference to member 'regularExpression'\n\
    \        ).replacingOccurrences(of: \"[aeiouAEIOU]\", with: \"\", options: .regularExpression)\n\
    \                                                                      ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tvar\
    \ result = \"\"\n\tfor _, letter := range text {\n\t\tif is_vowel(letter) {\n\t\
    \t\tresult += letter\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpuzz10zi_.swift:15:7: error: expected 'in' after for-each pattern\n\
    \        for _, letter := range text {\n             ^\n/tmp/tmpuzz10zi_.swift:15:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range text {\n             ^\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ regex = try! NSRegularExpression(pattern: \"[^aeiou]\", options: [])\n    let\
    \ matches = regex.matches(in: text,\n                                 range: NSRange(text.startIndex...,\
    \ in: text))\n    let ranges: [(offset: Int, length: Int)] = [\n        (offset:\
    \ 0, length: 0),\n        (offset: text.startIndex, length: text.characters.count)\n\
    \    ]\n    guard matches.count > 0 else {\n        return text\n    }\n    return\
    \ String(text[ranges[0][0]...ranges[0][1]])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp_l8z7zr0.swift:14:22: error: cannot find 'NSRegularExpression'\
    \ in scope\n    let regex = try! NSRegularExpression(pattern: \"[^aeiou]\", options:\
    \ [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_l8z7zr0.swift:16:41:\
    \ error: cannot find 'NSRange' in scope\n                                 range:\
    \ NSRange(text.startIndex..., in: text))\n                                   \
    \     ^~~~~~~\n/tmp/tmp_l8z7zr0.swift:19:23: error: cannot convert value of type\
    \ 'String.Index' to expected element type 'Int'\n        (offset: text.startIndex,\
    \ length: text.characters.count)\n                      ^\n/tmp/tmp_l8z7zr0.swift:24:33:\
    \ error: cannot access element using subscript for tuple type '(offset: Int, length:\
    \ Int)'; did you mean to use '.0'?\n    return String(text[ranges[0][0]...ranges[0][1]])\n\
    \                                ^~~\n                                .0\n/tmp/tmp_l8z7zr0.swift:24:48:\
    \ error: cannot access element using subscript for tuple type '(offset: Int, length:\
    \ Int)'; did you mean to use '.1'?\n    return String(text[ranges[0][0]...ranges[0][1]])\n\
    \                                               ^~~\n                        \
    \                       .1\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    \n\
    \    // Write your solution here\n    return text\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmph9bmtqwy/tmph9bmtqwy.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e0da0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e0d704b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e0d704988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e0d7037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph9bmtqwy                        0x00005577e27b33f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b8e0dbf9460 __libc_start_main +
    245

    6    tmph9bmtqwy                        0x00005577e27b2f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    //\
    \ Your code here\n    if text == \"\" {\n        return \"\"\n    }\n    var textWithoutVowels:\
    \ String = text\n    var lastVowelIndex: Int = text.characters.count - 1\n   \
    \ if text.characters.count > 0 {\n        if textWithoutVowels.characters.first\
    \ == \"a\" || textWithoutVowels.characters.first == \"e\" || textWithoutVowels.characters.first\
    \ == \"i\" || textWithoutVowels.characters.first == \"o\" || textWithoutVowels.characters.first\
    \ == \"u\" {\n            lastVowelIndex = textWithoutVowels.characters.count\
    \ - 1\n            textWithoutVowels.removeSubrange(lastVowelIndex, 1)\n     \
    \   }\n    }\n    return textWithoutVowels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpnaohmaad.swift:19:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var lastVowelIndex: Int = text.characters.count - 1\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpnaohmaad.swift:20:13: error: 'characters' is unavailable:\
    \ Please use String directly\n    if text.characters.count > 0 {\n           \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpnaohmaad.swift:21:30:\
    \ error: 'characters' is unavailable: Please use String directly\n        if textWithoutVowels.characters.first\
    \ == \"a\" || textWithoutVowels.characters.first == \"e\" || textWithoutVowels.characters.first\
    \ == \"i\" || textWithoutVowels.characters.first == \"o\" || textWithoutVowels.characters.first\
    \ == \"u\" {\n                             ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpnaohmaad.swift:21:75: error: 'characters'\
    \ is unavailable: Please use String directly\n        if textWithoutVowels.characters.first\
    \ == \"a\" || textWithoutVowels.characters.first == \"e\" || textWithoutVowels.characters.first\
    \ == \"i\" || textWithoutVowels.characters.first == \"o\" || textWithoutVowels.characters.first\
    \ == \"u\" {\n                                                               \
    \           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpnaohmaad.swift:21:120: error: 'characters' is unavailable: Please use\
    \ String directly\n        if textWithoutVowels.characters.first == \"a\" || textWithoutVowels.characters.first\
    \ == \"e\" || textWithoutVowels.characters.first == \"i\" || textWithoutVowels.characters.first\
    \ == \"o\" || textWithoutVowels.characters.first == \"u\" {\n                \
    \                                                                "
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" {\n        return \"\"\n    }\n    var result = \"\"\n    for char\
    \ in text {\n        if !contains_vowels(char) {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpguii9dp9.swift:19:13: error: cannot find 'contains_vowels' in scope\n\
    \        if !contains_vowels(char) {\n            ^~~~~~~~~~~~~~~\n/tmp/tmpguii9dp9.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    remove_vowels.input\
    \ = text\n    return remove_vowels.output\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp4b0a8k8h.swift:14:19: error: value of type '(String) -> String'\
    \ has no member 'input'\n    remove_vowels.input = text\n    ~~~~~~~~~~~~~ ^~~~~\n\
    /tmp/tmp4b0a8k8h.swift:15:26: error: value of type '(String) -> String' has no\
    \ member 'output'\n    return remove_vowels.output\n           ~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ result = \"\"\n    for char in text.unicodeScalars {\n        if let _ = CharacterSet(vowels)\
    \ as CharacterSet {\n            result += String(char)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpz1lffa7n.swift:16:20: error: cannot find 'CharacterSet' in scope\n\
    \        if let _ = CharacterSet(vowels) as CharacterSet {\n                 \
    \  ^~~~~~~~~~~~\n/tmp/tmpz1lffa7n.swift:16:33: error: cannot find 'vowels' in\
    \ scope\n        if let _ = CharacterSet(vowels) as CharacterSet {\n         \
    \                       ^~~~~~\n/tmp/tmpz1lffa7n.swift:16:44: error: cannot find\
    \ type 'CharacterSet' in scope\n        if let _ = CharacterSet(vowels) as CharacterSet\
    \ {\n                                           ^~~~~~~~~~~~\n/tmp/tmpz1lffa7n.swift:17:20:\
    \ error: left side of mutating operator isn't mutable: 'result' is a 'let' constant\n\
    \            result += String(char)\n            ~~~~~~ ^\n/tmp/tmpz1lffa7n.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = \"\"\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" {\n        return text\n    }\n    var newText = \"\"\n    for\
    \ letter in text {\n        switch letter {\n        case \"a\":\n        case\
    \ \"A\":\n        case \"e\":\n        case \"E\":\n        case \"i\":\n    \
    \    case \"I\":\n        case \"o\":\n        case \"O\":\n        case \"u\"\
    :\n        case \"U\":\n        default:\n            newText += letter\n    \
    \    }\n    }\n    return newText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp12obtgfk.swift:20:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp12obtgfk.swift:21:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"A\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp12obtgfk.swift:22:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp12obtgfk.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"E\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp12obtgfk.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp12obtgfk.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"I\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp12obtgfk.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp12obtgfk.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"O\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp12obtgfk.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"u\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp12obtgfk.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"U\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp12obtgfk.swift:31:24:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            newText += letter\n                       ^\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" {\n        return \"\"\n    }\n    \n    let index = text.startIndex\n\
    \    var newString = \"\"\n    \n    for character in text {\n        if character\
    \ == \"a\" || character == \"e\" || character == \"i\" || character == \"o\" ||\
    \ character == \"u\" || character == \"y\" {\n            continue\n        }\
    \ else {\n            newString += String(character)\n        }\n    }\n    \n\
    \    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmprmkvjpmo/tmprmkvjpmo.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade8e715c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade8e40cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade8e40c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade8e40b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprmkvjpmo                        0x000055cc52c739eb <unavailable> + 6635

    5    libc.so.6                          0x00002ade8e901460 __libc_start_main +
    245

    6    tmprmkvjpmo                        0x000055cc52c731e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ remove_vowels(text.unicodeScalars)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpkug1aqnv.swift:14:26: error: missing argument label 'text:' in\
    \ call\n    return remove_vowels(text.unicodeScalars)\n                      \
    \   ^\n                         text: \n/tmp/tmpkug1aqnv.swift:14:31: error: cannot\
    \ convert value of type 'String.UnicodeScalarView' to expected argument type 'String'\n\
    \    return remove_vowels(text.unicodeScalars)\n                             \
    \ ^\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" {\n        return text\n    }\n    return stringByRemovingCharactersInRange(text.startIndex,\
    \ text.startIndex + stringByRemovingCharactersInRange(text.startIndex, text.startIndex\
    \ + text.count).characters.count, \"aeiouAEIOU\")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmplrzzbn4k.swift:17:12: error: cannot find 'stringByRemovingCharactersInRange'\
    \ in scope\n    return stringByRemovingCharactersInRange(text.startIndex, text.startIndex\
    \ + stringByRemovingCharactersInRange(text.startIndex, text.startIndex + text.count).characters.count,\
    \ \"aeiouAEIOU\")\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplrzzbn4k.swift:17:81:\
    \ error: cannot find 'stringByRemovingCharactersInRange' in scope\n    return\
    \ stringByRemovingCharactersInRange(text.startIndex, text.startIndex + stringByRemovingCharactersInRange(text.startIndex,\
    \ text.startIndex + text.count).characters.count, \"aeiouAEIOU\")\n          \
    \                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplrzzbn4k.swift:17:137: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n    return stringByRemovingCharactersInRange(text.startIndex,\
    \ text.startIndex + stringByRemovingCharactersInRange(text.startIndex, text.startIndex\
    \ + text.count).characters.count, \"aeiouAEIOU\")\n                          \
    \                                                                            \
    \                                  ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ filterString(text, removeVowels)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpwnrp3trr.swift:14:12: error: cannot find 'filterString' in scope\n\
    \    return filterString(text, removeVowels)\n           ^~~~~~~~~~~~\n/tmp/tmpwnrp3trr.swift:14:31:\
    \ error: cannot find 'removeVowels' in scope\n    return filterString(text, removeVowels)\n\
    \                              ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    guard\
    \ text.count > 0 else {\n        return text\n    }\n    let vowels = Set([\"\
    a\", \"e\", \"i\", \"o\", \"u\"])\n    return String((text as NSString).replacingOccurrences(of:\
    \ \"[aeiouy]+\", with: \"\", options: .regularExpression, range: nil))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpps5fav6r.swift:18:28: error: cannot find type 'NSString' in scope\n\
    \    return String((text as NSString).replacingOccurrences(of: \"[aeiouy]+\",\
    \ with: \"\", options: .regularExpression, range: nil))\n                    \
    \       ^~~~~~~~\n/tmp/tmpps5fav6r.swift:18:38: error: value of type 'String'\
    \ has no member 'replacingOccurrences'\n    return String((text as NSString).replacingOccurrences(of:\
    \ \"[aeiouy]+\", with: \"\", options: .regularExpression, range: nil))\n     \
    \             ~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpps5fav6r.swift:18:96:\
    \ error: cannot infer contextual base in reference to member 'regularExpression'\n\
    \    return String((text as NSString).replacingOccurrences(of: \"[aeiouy]+\",\
    \ with: \"\", options: .regularExpression, range: nil))\n                    \
    \                                                                          ~^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpps5fav6r.swift:18:122: error: 'nil' requires a contextual type\n    return\
    \ String((text as NSString).replacingOccurrences(of: \"[aeiouy]+\", with: \"\"\
    , options: .regularExpression, range: nil))\n                                \
    \                                                                            \
    \             ^\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    text\
    \ = text.lowercase()\n    var result = \"\"\n    for char in text {\n        if\
    \ char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char ==\
    \ \"u\" {\n            continue\n        }\n        result += char\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp882no3j8.swift:14:5: error: cannot assign to value: 'text' is a\
    \ 'let' constant\n    text = text.lowercase()\n    ^~~~\n/tmp/tmp882no3j8.swift:14:17:\
    \ error: value of type 'String' has no member 'lowercase'\n    text = text.lowercase()\n\
    \           ~~~~ ^~~~~~~~~\n/tmp/tmp882no3j8.swift:20:19: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        result\
    \ += char\n                  ^\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = String()\n    for c in self.chars {\n        if c == 'a' || c == 'A'\
    \ || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' || c == 'O' || c\
    \ == 'u' || c == 'U' {\n            result = result + c\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmplcz2vmm8.swift:16:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i'\
    \ || c == 'I' || c == 'o' || c == 'O' || c == 'u' || c == 'U' {\n            \
    \    ^~~\n                \"a\"\n/tmp/tmplcz2vmm8.swift:16:29: error: single-quoted\
    \ string literal found, use '\"'\n        if c == 'a' || c == 'A' || c == 'e'\
    \ || c == 'E' || c == 'i' || c == 'I' || c == 'o' || c == 'O' || c == 'u' || c\
    \ == 'U' {\n                            ^~~\n                            \"A\"\
    \n/tmp/tmplcz2vmm8.swift:16:41: error: single-quoted string literal found, use\
    \ '\"'\n        if c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' ||\
    \ c == 'I' || c == 'o' || c == 'O' || c == 'u' || c == 'U' {\n               \
    \                         ^~~\n                                        \"e\"\n\
    /tmp/tmplcz2vmm8.swift:16:53: error: single-quoted string literal found, use '\"\
    '\n        if c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c ==\
    \ 'I' || c == 'o' || c == 'O' || c == 'u' || c == 'U' {\n                    \
    \                                ^~~\n                                       \
    \             \"E\"\n/tmp/tmplcz2vmm8.swift:16:65: error: single-quoted string\
    \ literal found, use '\"'\n        if c == 'a' || c == 'A' || c == 'e' || c ==\
    \ 'E' || c == 'i' || c == 'I' || c == 'o' || c == 'O' || c == 'u' || c == 'U'\
    \ {\n                                                                ^~~\n   \
    \                                                             \"i\"\n/tmp/tmplcz2vmm8.swift:16:77:\
    \ error: single-quoted string literal found, use '\"'\n        if c == 'a' ||\
    \ c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' || c ==\
    \ 'O' || c == 'u' || c == 'U' {\n                                            \
    \                                ^~~\n                                       \
    \                                     \"I\"\n/tmp/tmplcz2vmm8.swift:16:89: error:\
    \ single-quoted string literal found, use '\"'\n        if c == 'a' || c == 'A'\
    \ || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' || c == '"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\treturn\
    \ strings.ReplaceAll(text, vowels, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpe78gdj1z.swift:14:9: error: cannot find 'strings' in scope\n  \
    \      return strings.ReplaceAll(text, vowels, \"\")\n               ^~~~~~~\n\
    /tmp/tmpe78gdj1z.swift:14:34: error: cannot find 'vowels' in scope\n        return\
    \ strings.ReplaceAll(text, vowels, \"\")\n                                   \
    \     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    guard\
    \ text.count > 0, let charSet = CharacterSet.letters else {\n        return text\n\
    \    }\n\n    return String(text.utf16.filter { !charSet.contains($0.unicodeScalars.first!)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") ==\
    \ \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpziwuzega.swift:14:41: error: cannot find 'CharacterSet' in scope\n\
    \    guard text.count > 0, let charSet = CharacterSet.letters else {\n       \
    \                                 ^~~~~~~~~~~~\n/tmp/tmpziwuzega.swift:18:12:\
    \ error: no exact matches in call to initializer \n    return String(text.utf16.filter\
    \ { !charSet.contains($0.unicodeScalars.first!) })\n           ^\n/tmp/tmpziwuzega.swift:18:12:\
    \ note: found candidate with type '([UTF16.CodeUnit]) -> String' (aka '(Array<UInt16>)\
    \ -> String')\n    return String(text.utf16.filter { !charSet.contains($0.unicodeScalars.first!)\
    \ })\n           ^\n/tmp/tmpziwuzega.swift:18:12: note: found candidate with type\
    \ '([UTF16.CodeUnit]) -> String' (aka '(Array<UInt16>) -> String')\n    return\
    \ String(text.utf16.filter { !charSet.contains($0.unicodeScalars.first!) })\n\
    \           ^\n/tmp/tmpziwuzega.swift:18:12: note: found candidate with type '([UTF16.CodeUnit])\
    \ -> String' (aka '(Array<UInt16>) -> String')\n    return String(text.utf16.filter\
    \ { !charSet.contains($0.unicodeScalars.first!) })\n           ^\n/tmp/tmpziwuzega.swift:18:60:\
    \ error: value of type 'UTF16.CodeUnit' (aka 'UInt16') has no member 'unicodeScalars'\n\
    \    return String(text.utf16.filter { !charSet.contains($0.unicodeScalars.first!)\
    \ })\n                                                        ~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ set = Set(\"aeiou\")\n    var result = \"\"\n    for char in text {\n      \
    \  if !set.contains(char) {\n            result += String(char)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmp3dzyinkn/tmp3dzyinkn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab65ddd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab65dac8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab65dac8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab65dac77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3dzyinkn                        0x000055864239ca4b <unavailable> + 6731

    5    libc.so.6                          0x00002ab65dfbd460 __libc_start_main +
    245

    6    tmp3dzyinkn                        0x000055864239c249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tstr\
    \ = text.lowercased()\n\tstr.remove(findSubstring(\"aeiou\"))\n\treturn str\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpv2oy4eis.swift:14:2: error: cannot find 'str' in scope\n      \
    \  str = text.lowercased()\n        ^~~\n/tmp/tmpv2oy4eis.swift:15:2: error: cannot\
    \ find 'str' in scope\n        str.remove(findSubstring(\"aeiou\"))\n        ^~~\n\
    /tmp/tmpv2oy4eis.swift:15:13: error: cannot find 'findSubstring' in scope\n  \
    \      str.remove(findSubstring(\"aeiou\"))\n                   ^~~~~~~~~~~~~\n\
    /tmp/tmpv2oy4eis.swift:16:9: error: cannot find 'str' in scope\n        return\
    \ str\n               ^~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" {\n        return \"\"\n    }\n    var vowels: Set<Character>\n\
    \    vowels = Set(\"aeiou\")\n    let letters = text.characters\n\n    let chars\
    \ = text.characters\n    var result = \"\"\n    for char in chars {\n        if\
    \ !vowels.contains(char) {\n            result += char\n        }\n    }\n\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpe2t7cmdy.swift:19:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    let letters = text.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpe2t7cmdy.swift:21:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    let chars\
    \ = text.characters\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpe2t7cmdy.swift:25:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            result\
    \ += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ let text = text {\n        let vowels: [Character] = [\"a\", \"e\", \"i\", \"\
    o\", \"u\", \"y\"]\n        var result = \"\"\n\n        for char in text {\n\
    \            if !vowels.contains(char) {\n                result += char\n   \
    \         }\n        }\n        return result\n    }\n\n    return text\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmptzg2a64w.swift:20:27: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n                result += char\n       \
    \                   ^\n/tmp/tmptzg2a64w.swift:14:8: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n    if let text = text {\n  \
    \     ^          ~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter{\n        char in vowels.contains{ $0 == char }\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpeocf3ubl.swift:15:17: error: cannot find 'vowels' in scope\n  \
    \      char in vowels.contains{ $0 == char }\n                ^~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    \n\
    \    let letters = \"qwertyuiopasdfghjklzxcvbnm\".lowercased()\n    var result\
    \ = \"\"\n    \n    for letter in text {\n        if letters.contains(letter)\
    \ {\n            result += letter\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpubhmpwmt.swift:20:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = CharacterSet.vowels\n\n    guard !text.isEmpty else { return \"\" }\n\
    \n    var result: String = text\n    var last: String.Index?\n    while last !=\
    \ nil {\n        last = result.rangeOfCharacter(from: vowels.inverted, options:\
    \ .backwards)?.upperBound\n        if last == 0 || last == result.count {\n  \
    \          break\n        }\n        result = result.substring(to: last ?? 0)\n\
    \    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp9531n42k.swift:14:18: error: cannot find 'CharacterSet' in scope\n\
    \    let vowels = CharacterSet.vowels\n                 ^~~~~~~~~~~~\n/tmp/tmp9531n42k.swift:21:23:\
    \ error: value of type 'String' has no member 'rangeOfCharacter'\n        last\
    \ = result.rangeOfCharacter(from: vowels.inverted, options: .backwards)?.upperBound\n\
    \               ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp9531n42k.swift:21:73: error:\
    \ cannot infer contextual base in reference to member 'backwards'\n        last\
    \ = result.rangeOfCharacter(from: vowels.inverted, options: .backwards)?.upperBound\n\
    \                                                                       ~^~~~~~~~~\n\
    /tmp/tmp9531n42k.swift:22:12: error: cannot convert value of type 'String.Index?'\
    \ to expected argument type 'Int'\n        if last == 0 || last == result.count\
    \ {\n           ^\n/tmp/tmp9531n42k.swift:22:25: error: cannot convert value of\
    \ type 'String.Index?' to expected argument type 'Int'\n        if last == 0 ||\
    \ last == result.count {\n                        ^\n/tmp/tmp9531n42k.swift:25:44:\
    \ error: binary operator '??' cannot be applied to operands of type 'String.Index?'\
    \ and 'Int'\n        result = result.substring(to: last ?? 0)\n              \
    \                        ~~~~ ^  ~\n/tmp/tmp9531n42k.swift:25:25: error: value\
    \ of type 'String' has no member 'substring'\n        result = result.substring(to:\
    \ last ?? 0)\n                 ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\ttext\
    \ = remove_vowels_impl.apply(text)\n\ttext = removeVowels(text)\n\treturn text\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpj241_4sq.swift:14:9: error: cannot find 'remove_vowels_impl' in\
    \ scope\n        text = remove_vowels_impl.apply(text)\n               ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpj241_4sq.swift:14:2: error: cannot assign to value: 'text' is a 'let'\
    \ constant\n        text = remove_vowels_impl.apply(text)\n        ^~~~\n/tmp/tmpj241_4sq.swift:15:9:\
    \ error: cannot find 'removeVowels' in scope\n        text = removeVowels(text)\n\
    \               ^~~~~~~~~~~~\n/tmp/tmpj241_4sq.swift:15:2: error: cannot assign\
    \ to value: 'text' is a 'let' constant\n        text = removeVowels(text)\n  \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ regex = NSRegularExpression.escapedPattern(for: \"[aeiouyAEIOUY]\");\n    let\
    \ range = (text as NSString).range(of: regex, options: .regularExpression);\n\
    \    return String((text as NSString).substring(with: range));\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp69uld0xi.swift:14:17: error: cannot find 'NSRegularExpression'\
    \ in scope\n    let regex = NSRegularExpression.escapedPattern(for: \"[aeiouyAEIOUY]\"\
    );\n                ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp69uld0xi.swift:15:26: error:\
    \ cannot find type 'NSString' in scope\n    let range = (text as NSString).range(of:\
    \ regex, options: .regularExpression);\n                         ^~~~~~~~\n/tmp/tmp69uld0xi.swift:15:36:\
    \ error: value of type 'String' has no member 'range'\n    let range = (text as\
    \ NSString).range(of: regex, options: .regularExpression);\n                ~~~~~~~~~~~~~~~~~~\
    \ ^~~~~\n/tmp/tmp69uld0xi.swift:15:63: error: cannot infer contextual base in\
    \ reference to member 'regularExpression'\n    let range = (text as NSString).range(of:\
    \ regex, options: .regularExpression);\n                                     \
    \                        ~^~~~~~~~~~~~~~~~~\n/tmp/tmp69uld0xi.swift:16:28: error:\
    \ cannot find type 'NSString' in scope\n    return String((text as NSString).substring(with:\
    \ range));\n                           ^~~~~~~~\n/tmp/tmp69uld0xi.swift:16:38:\
    \ error: value of type 'String' has no member 'substring'\n    return String((text\
    \ as NSString).substring(with: range));\n                  ~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    text.unicodeScalars.filter({\
    \ unicodeScalar in return !unicodeScalar.isVowel() })\n        .map { unicodeScalar\
    \ in\n            return String(unicodeScalar)\n        }\n        .reduce(\"\"\
    , { $0 + $1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpuk412fk1.swift:14:73: error: value of type 'Unicode.Scalar' has\
    \ no member 'isVowel'\n    text.unicodeScalars.filter({ unicodeScalar in return\
    \ !unicodeScalar.isVowel() })\n                                              \
    \            ~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ output = text\n    for _, b in text.unicodeScalars {\n        switch b {\n \
    \       case 97: // a\n            output = output.remove(at: output.index(before:\
    \ output.startIndex))\n        case 122: // b\n            output = output.remove(at:\
    \ output.index(before: output.startIndex))\n        case 93: // c\n          \
    \  output = output.remove(at: output.index(before: output.startIndex))\n     \
    \   case 121: // d\n            output = output.remove(at: output.index(before:\
    \ output.startIndex))\n        case 101: // e\n            output = output.remove(at:\
    \ output.index(before: output.startIndex))\n        case 117: // f\n         \
    \   output = output.remove(at: output.index(before: output.startIndex))\n    \
    \    default: break\n        }\n    }\n    return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp9oeu1f69.swift:15:10: error: expected 'in' after for-each pattern\n\
    \    for _, b in text.unicodeScalars {\n         ^\n/tmp/tmp9oeu1f69.swift:15:10:\
    \ error: expected Sequence expression for for-each loop\n    for _, b in text.unicodeScalars\
    \ {\n         ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    text.unicodeScalars.filter({\
    \ $0.isUppercase && $0.isLetterAscii }).toList()\n        .filter { !$0.hasPrefix(\"\
    AEIOUY\") }\n        .flatMap { $0.unicodeScalars.filter { $0.isLetterAscii }\
    \ }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp4llxakog.swift:14:72: error: reference to member 'toList' cannot\
    \ be resolved without a contextual type\n    text.unicodeScalars.filter({ $0.isUppercase\
    \ && $0.isLetterAscii }).toList()\n                                          \
    \                             ^\n/tmp/tmp4llxakog.swift:14:37: error: value of\
    \ type 'Unicode.Scalar' has no member 'isUppercase'\n    text.unicodeScalars.filter({\
    \ $0.isUppercase && $0.isLetterAscii }).toList()\n                           \
    \      ~~ ^~~~~~~~~~~\n/tmp/tmp4llxakog.swift:14:55: error: value of type 'Unicode.Scalar'\
    \ has no member 'isLetterAscii'\n    text.unicodeScalars.filter({ $0.isUppercase\
    \ && $0.isLetterAscii }).toList()\n                                          \
    \         ~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    defer\
    \ { debug_match_string(\"remove_vowels: \\(text)\") }\n    text += \"A\"\n   \
    \ var result = \"\"\n    for char in text {\n        if char != \"a\" && char\
    \ != \"e\" && char != \"i\" && char != \"o\" && char != \"u\" {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpuw2dqx5k.swift:14:13: error: cannot find 'debug_match_string' in\
    \ scope\n    defer { debug_match_string(\"remove_vowels: \\(text)\") }\n     \
    \       ^~~~~~~~~~~~~~~~~~\n/tmp/tmpuw2dqx5k.swift:15:10: error: left side of\
    \ mutating operator isn't mutable: 'text' is a 'let' constant\n    text += \"\
    A\"\n    ~~~~ ^\n/tmp/tmpuw2dqx5k.swift:19:23: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n            result += char\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tif\
    \ text == \"\" {\n\t\treturn \"\"\n\t}\n\ttext += \"a\"\n\ttext = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text,\
    \ \"\")\n\ttext = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text, \"\
    \")\n\ttext = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text, \"\")\n\
    \ttext = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text, \"\")\n\ttext\
    \ = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text, \"\")\n\ttext =\
    \ regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text, \"\")\n\ttext = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text,\
    \ \"\")\n\ttext = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text, \"\
    \")\n\ttext = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text, \"\")\n\
    \ttext = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text, \"\")\n\ttext\
    \ = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text, \"\")\n\ttext =\
    \ regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text, \"\")\n\ttext = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text,\
    \ \"\")\n\ttext = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text, \"\
    \")\n\ttext = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text, \"\")\n\
    \ttext = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text, \"\")\n\ttext\
    \ = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text, \"\")\n\ttext =\
    \ regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text, \"\")\n\ttext = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text,\
    \ \"\")\n\ttext = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text, \"\
    \")\n\ttext = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text, \"\")\n\
    \ttext = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text, \"\")\n\ttext\
    \ = regexp.MustCompile(`[aeiouAE\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpmlandenf.swift:18:28: error: expected expression in list of expressions\n\
    \        text = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text, \"\"\
    )\n                                  ^\n/tmp/tmpmlandenf.swift:19:28: error: expected\
    \ expression in list of expressions\n        text = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text,\
    \ \"\")\n                                  ^\n/tmp/tmpmlandenf.swift:20:28: error:\
    \ expected expression in list of expressions\n        text = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text,\
    \ \"\")\n                                  ^\n/tmp/tmpmlandenf.swift:21:28: error:\
    \ expected expression in list of expressions\n        text = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text,\
    \ \"\")\n                                  ^\n/tmp/tmpmlandenf.swift:22:28: error:\
    \ expected expression in list of expressions\n        text = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text,\
    \ \"\")\n                                  ^\n/tmp/tmpmlandenf.swift:23:28: error:\
    \ expected expression in list of expressions\n        text = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text,\
    \ \"\")\n                                  ^\n/tmp/tmpmlandenf.swift:24:28: error:\
    \ expected expression in list of expressions\n        text = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text,\
    \ \"\")\n                                  ^\n/tmp/tmpmlandenf.swift:25:28: error:\
    \ expected expression in list of expressions\n        text = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text,\
    \ \"\")\n                                  ^\n/tmp/tmpmlandenf.swift:26:28: error:\
    \ expected expression in list of expressions\n        text = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text,\
    \ \"\")\n                                  ^\n/tmp/tmpmlandenf.swift:27:28: error:\
    \ expected expression in list of expressions\n        text = regexp.MustCompile(`[aeiouAEIOU]`).ReplaceAllString(text,\
    \ \"\")\n                                  ^\n/tmp/tmpmlandenf.swift:28:28: error:\
    \ expected expression in list of expressions\n        text = regexp.MustCompile(`[ae"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    func\
    \ remove_vowels(_text: String) -> String {\n        var ret: String = String()\n\
    \        for c in _text {\n            if ![\"a\", \"e\", \"i\", \"o\", \"u\"\
    ].contains(c) {\n                ret += c\n            }\n        }\n        return\
    \ ret\n    }\n    return remove_vowels(text: text.lowercased()).lowercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpo6b79n6v.swift:18:24: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n                ret += c\n             \
    \          ^\n/tmp/tmpo6b79n6v.swift:23:25: error: incorrect argument label in\
    \ call (have 'text:', expected '_text:')\n    return remove_vowels(text: text.lowercased()).lowercased()\n\
    \                        ^~~~~\n                         _text\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    //\
    \ We go through all of the characters of the text and check if it is a vowel\n\
    \    // and if it is, we remove it.\n    for _, char := range text {\n       \
    \ if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n\
    \            text = text[:len(text)-1]\n        }\n    }\n    return text\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o3k99bv.swift:16:10: error: expected 'in' after for-each pattern\n\
    \    for _, char := range text {\n         ^\n/tmp/tmp3o3k99bv.swift:16:10: error:\
    \ expected Sequence expression for for-each loop\n    for _, char := range text\
    \ {\n         ^\n/tmp/tmp3o3k99bv.swift:17:20: error: single-quoted string literal\
    \ found, use '\"'\n        if char == 'a' || char == 'e' || char == 'i' || char\
    \ == 'o' || char == 'u' {\n                   ^~~\n                   \"a\"\n\
    /tmp/tmp3o3k99bv.swift:17:35: error: single-quoted string literal found, use '\"\
    '\n        if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char\
    \ == 'u' {\n                                  ^~~\n                          \
    \        \"e\"\n/tmp/tmp3o3k99bv.swift:17:50: error: single-quoted string literal\
    \ found, use '\"'\n        if char == 'a' || char == 'e' || char == 'i' || char\
    \ == 'o' || char == 'u' {\n                                                 ^~~\n\
    \                                                 \"i\"\n/tmp/tmp3o3k99bv.swift:17:65:\
    \ error: single-quoted string literal found, use '\"'\n        if char == 'a'\
    \ || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n            \
    \                                                    ^~~\n                   \
    \                                             \"o\"\n/tmp/tmp3o3k99bv.swift:17:80:\
    \ error: single-quoted string literal found, use '\"'\n        if char == 'a'\
    \ || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n            \
    \                                                                   ^~~\n    \
    \                                                                           \"\
    u\"\n/tmp/tmp3o3k99bv.swift:18:25: error: expected expression in list of expressions\n\
    \            text = text[:len(text)-1]\n                        ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tvar\
    \ newString String = \"\"\n\tfor _, letter := range text {\n\t\tif letter == 'a'\
    \ || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\t\t\t\
    continue\n\t\t}\n\t\tnewString = newString + string(letter)\n\t}\n\treturn newString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpn66dgndk.swift:14:16: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n        var newString\
    \ String = \"\"\n                      ^\n/tmp/tmpn66dgndk.swift:14:16: note:\
    \ join the identifiers together\n        var newString String = \"\"\n       \
    \     ~~~~~~~~~~^~~~~~\n            newStringString\n/tmp/tmpn66dgndk.swift:15:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ text {\n             ^\n/tmp/tmpn66dgndk.swift:15:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range text {\n      \
    \       ^\n/tmp/tmpn66dgndk.swift:16:16: error: single-quoted string literal found,\
    \ use '\"'\n                if letter == 'a' || letter == 'e' || letter == 'i'\
    \ || letter == 'o' || letter == 'u' {\n                             ^~~\n    \
    \                         \"a\"\n/tmp/tmpn66dgndk.swift:16:33: error: single-quoted\
    \ string literal found, use '\"'\n                if letter == 'a' || letter ==\
    \ 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n                 \
    \                             ^~~\n                                          \
    \    \"e\"\n/tmp/tmpn66dgndk.swift:16:50: error: single-quoted string literal\
    \ found, use '\"'\n                if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n                               \
    \                                ^~~\n                                       \
    \                        \"i\"\n/tmp/tmpn66dgndk.swift:16:67: error: single-quoted\
    \ string literal found, use '\"'\n                if letter == 'a' || letter ==\
    \ 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n                 \
    \                                                               ^~~\n        \
    \                                                                        \"o\"\
    \n/tmp/tmpn66dgndk.swift:16:84: error: single-quoted string literal found, use\
    \ '\"'\n                if letter == 'a' || letter == 'e' || letter == 'i' ||\
    \ letter == 'o' || letter == 'u' {\n                                         \
    \            "
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tlet\
    \ count = countVowels(text: text) + countConsonants(text: text) + countCapitals(text:\
    \ text)\n\tlet start = text.startIndex\n\tlet end = text.startIndex + text.count\n\
    \treturn text[start..<end].filter{ $0 != \"a\" &&\n\t\t$0 != \"e\" &&\n\t\t$0\
    \ != \"i\" &&\n\t\t$0 != \"o\" &&\n\t\t$0 != \"u\" }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpz6sfly3v.swift:14:14: error: cannot find 'countVowels' in scope\n\
    \        let count = countVowels(text: text) + countConsonants(text: text) + countCapitals(text:\
    \ text)\n                    ^~~~~~~~~~~\n/tmp/tmpz6sfly3v.swift:14:40: error:\
    \ cannot find 'countConsonants' in scope\n        let count = countVowels(text:\
    \ text) + countConsonants(text: text) + countCapitals(text: text)\n          \
    \                                    ^~~~~~~~~~~~~~~\n/tmp/tmpz6sfly3v.swift:14:70:\
    \ error: cannot find 'countCapitals' in scope\n        let count = countVowels(text:\
    \ text) + countConsonants(text: text) + countCapitals(text: text)\n          \
    \                                                                  ^~~~~~~~~~~~~\n\
    /tmp/tmpz6sfly3v.swift:16:17: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n        let end = text.startIndex + text.count\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filterString(isVowel)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmplrwt_8lo.swift:14:30: error: cannot find 'isVowel' in scope\n \
    \   return text.filterString(isVowel)\n                             ^~~~~~~\n\
    /tmp/tmplrwt_8lo.swift:14:17: error: value of type 'String' has no member 'filterString'\n\
    \    return text.filterString(isVowel)\n           ~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = \"AEIOUaeiou\"\n    let regex = try! NSRegularExpression(pattern: vowels,\
    \ options: [])\n    let replaced = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions(rawValue: 0), range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"\")\n    return replaced\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp_0_23elc.swift:15:22: error: cannot find 'NSRegularExpression'\
    \ in scope\n    let regex = try! NSRegularExpression(pattern: vowels, options:\
    \ [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_0_23elc.swift:16:74:\
    \ error: cannot find 'NSMatchingOptions' in scope\n    let replaced = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions(rawValue: 0), range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"\")\n                                                      \
    \                   ^~~~~~~~~~~~~~~~~\n/tmp/tmp_0_23elc.swift:16:113: error: cannot\
    \ find 'NSMakeRange' in scope\n    let replaced = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions(rawValue: 0), range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"\")\n                                                      \
    \                                                          ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    \n\
    \    let vowels = \"aeiouAEIOU\"\n    var result = text\n    \n    for vowel in\
    \ vowels {\n        result = result.replacingOccurrences(of: vowel, with: \"\"\
    )\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpfpx8wnny.swift:19:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: vowel,\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ strings.Join(\n        strings.Split(text, \"aeiou\"),\n        \"\",\n    )\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp5juxktyj.swift:17:5: error: unexpected ',' separator\n    )\n \
    \   ^\n/tmp/tmp5juxktyj.swift:14:12: error: cannot find 'strings' in scope\n \
    \   return strings.Join(\n           ^~~~~~~\n/tmp/tmp5juxktyj.swift:15:9: error:\
    \ cannot find 'strings' in scope\n        strings.Split(text, \"aeiou\"),\n  \
    \      ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ strings.Map(remove_vowels_map, text)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmptmx7u44s.swift:14:12: error: cannot find 'strings' in scope\n \
    \   return strings.Map(remove_vowels_map, text)\n           ^~~~~~~\n/tmp/tmptmx7u44s.swift:14:24:\
    \ error: cannot find 'remove_vowels_map' in scope\n    return strings.Map(remove_vowels_map,\
    \ text)\n                       ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter{!$0.isUppercase}.filter{!$0.isLowercase}.filter{!$0.isDigit}.filter{!$0.isPunctuation}.filter{!$0.isWhitespace}.filter{!$0.isASCII}\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpb4lbx2j6.swift:14:76: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isDigit'\n    return text.filter{!$0.isUppercase}.filter{!$0.isLowercase}.filter{!$0.isDigit}.filter{!$0.isPunctuation}.filter{!$0.isWhitespace}.filter{!$0.isASCII}\n\
    \                                                                        ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" {\n        return \"\"\n    }\n    var buffer = []rune(text)\n\
    \    var isVowel = false\n    for rune := range buffer {\n        if rune == 'a'\
    \ || rune == 'e' || rune == 'i' || rune == 'o' || rune == 'u' || rune == 'y' {\n\
    \            buffer = append(buffer, rune)\n            isVowel = true\n     \
    \       continue\n        }\n        if isVowel {\n            buffer = append(buffer,\
    \ rune)\n            isVowel = false\n        }\n    }\n    return string(buffer)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpe83d92v2.swift:17:20: error: consecutive statements on a line must\
    \ be separated by ';'\n    var buffer = []rune(text)\n                   ^\n \
    \                  ;\n/tmp/tmpe83d92v2.swift:19:15: error: expected type\n   \
    \ for rune := range buffer {\n              ^\n               <#type#>\n/tmp/tmpe83d92v2.swift:19:15:\
    \ error: expected 'in' after for-each pattern\n    for rune := range buffer {\n\
    \              ^\n/tmp/tmpe83d92v2.swift:19:15: error: expected Sequence expression\
    \ for for-each loop\n    for rune := range buffer {\n              ^\n/tmp/tmpe83d92v2.swift:20:20:\
    \ error: single-quoted string literal found, use '\"'\n        if rune == 'a'\
    \ || rune == 'e' || rune == 'i' || rune == 'o' || rune == 'u' || rune == 'y' {\n\
    \                   ^~~\n                   \"a\"\n/tmp/tmpe83d92v2.swift:20:35:\
    \ error: single-quoted string literal found, use '\"'\n        if rune == 'a'\
    \ || rune == 'e' || rune == 'i' || rune == 'o' || rune == 'u' || rune == 'y' {\n\
    \                                  ^~~\n                                  \"e\"\
    \n/tmp/tmpe83d92v2.swift:20:50: error: single-quoted string literal found, use\
    \ '\"'\n        if rune == 'a' || rune == 'e' || rune == 'i' || rune == 'o' ||\
    \ rune == 'u' || rune == 'y' {\n                                             \
    \    ^~~\n                                                 \"i\"\n/tmp/tmpe83d92v2.swift:20:65:\
    \ error: single-quoted string literal found, use '\"'\n        if rune == 'a'\
    \ || rune == 'e' || rune == 'i' || rune == 'o' || rune == 'u' || rune == 'y' {\n\
    \                                                                ^~~\n       \
    \                                                         \"o\"\n/tmp/tmpe83d92v2.swift:20:80:\
    \ error: single-quoted string literal found, use '\"'\n        if rune == 'a'\
    \ || rune == 'e' || rune == 'i' || rune == 'o' || rune == 'u' || rune == 'y' {\n\
    \                                                                            \
    \   ^~~\n                                                                    \
    \           \"u\"\n/tmp/tmpe83d92v2.swift:20:95: error: single-quoted string literal\
    \ found,"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    defer\
    \ { text = text.lowercased() }\n    var vowels = \"aeiou\"\n    var result = [Character]()\n\
    \    for char in text.unicodeScalars {\n        if vowels.contains(char.stringValue)\
    \ {\n            continue\n        }\n        result.append(char)\n    }\n   \
    \ return String.UnicodeScalarView(result)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp0w7rtr4_.swift:14:13: error: cannot assign to value: 'text' is\
    \ a 'let' constant\n    defer { text = text.lowercased() }\n            ^~~~\n\
    /tmp/tmp0w7rtr4_.swift:18:33: error: value of type 'Unicode.Scalar' has no member\
    \ 'stringValue'\n        if vowels.contains(char.stringValue) {\n            \
    \               ~~~~ ^~~~~~~~~~~\n/tmp/tmp0w7rtr4_.swift:21:16: error: no exact\
    \ matches in call to instance method 'append'\n        result.append(char)\n \
    \              ^\nSwift.Array:6:37: note: candidate expects value of type 'Character'\
    \ for parameter #1 (got 'Unicode.Scalar')\n    @inlinable public mutating func\
    \ append(_ newElement: __owned Element)\n                                    ^\n\
    Swift.RangeReplaceableCollection:4:37: note: candidate expects value of type 'Character'\
    \ for parameter #1 (got 'Unicode.Scalar')\n    @inlinable public mutating func\
    \ append(_ newElement: __owned Self.Element)\n                               \
    \     ^\n/tmp/tmp0w7rtr4_.swift:21:16: note: found candidate with type '(__owned\
    \ Unicode.Scalar) -> ()'\n        result.append(char)\n               ^\n/tmp/tmp0w7rtr4_.swift:23:12:\
    \ error: cannot convert return expression of type 'String.UnicodeScalarView' to\
    \ return type 'String'\n    return String.UnicodeScalarView(result)\n        \
    \   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tif\
    \ text == \"\" {\n\t\treturn \"\"\n\t}\n\tlet vowels = \"aeiouAEIOU\"\n\tvar newText\
    \ = String()\n\tfor char in text.characters {\n\t\tif vowels.contains(String(char))\
    \ {\n\t\t\tcontinue\n\t\t}\n\t\tnewText.append(String(char))\n\t}\n\treturn newText\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpr2ay0egs.swift:19:19: error: 'characters' is unavailable: Please\
    \ use String directly\n        for char in text.characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ removeVowels(text.unicodeScalars.filter { !$0.isASCII })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpbrdbvoje.swift:14:12: error: cannot find 'removeVowels' in scope\n\
    \    return removeVowels(text.unicodeScalars.filter { !$0.isASCII })\n       \
    \    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    for char in text {\n        if !has_vowels(String(char))\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpv9y8f9ox.swift:16:13: error: cannot find 'has_vowels' in scope\n\
    \        if !has_vowels(String(char)) {\n            ^~~~~~~~~~\n/tmp/tmpv9y8f9ox.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ removeVowels(text, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpq6ofm_d0.swift:14:12: error: cannot find 'removeVowels' in scope\n\
    \    return removeVowels(text, false)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824525
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tvar\
    \ newText = text\n\n\tfor _, char := range text {\n\t\tif char == 'a' || char\
    \ == 'e' || char == 'i' || char == 'o' || char == 'u' {\n\t\t\tnewText = newText[:newText.Index(char)]\n\
    \t\t}\n\t}\n\n\treturn newText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpvn_grhnd.swift:16:7: error: expected 'in' after for-each pattern\n\
    \        for _, char := range text {\n             ^\n/tmp/tmpvn_grhnd.swift:16:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, char :=\
    \ range text {\n             ^\n/tmp/tmpvn_grhnd.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n                if char == 'a' || char == 'e'\
    \ || char == 'i' || char == 'o' || char == 'u' {\n                           ^~~\n\
    \                           \"a\"\n/tmp/tmpvn_grhnd.swift:17:29: error: single-quoted\
    \ string literal found, use '\"'\n                if char == 'a' || char == 'e'\
    \ || char == 'i' || char == 'o' || char == 'u' {\n                           \
    \               ^~~\n                                          \"e\"\n/tmp/tmpvn_grhnd.swift:17:44:\
    \ error: single-quoted string literal found, use '\"'\n                if char\
    \ == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n     \
    \                                                    ^~~\n                   \
    \                                      \"i\"\n/tmp/tmpvn_grhnd.swift:17:59: error:\
    \ single-quoted string literal found, use '\"'\n                if char == 'a'\
    \ || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n            \
    \                                                            ^~~\n           \
    \                                                             \"o\"\n/tmp/tmpvn_grhnd.swift:17:74:\
    \ error: single-quoted string literal found, use '\"'\n                if char\
    \ == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n     \
    \                                                                            \
    \      ^~~\n                                                                 \
    \                      \"u\"\n/tmp/tmpvn_grhnd.swift:18:22: error: expected expression\
    \ in list of expressions\n                        newText = newText[:newText.Index(char)]\n\
    \                                          ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ resultText = text\n\n    for (_, value) in text.unicodeScalars {\n        //\
    \ if the character is a vowel...\n        if vowels.contains(value) {\n      \
    \      resultText = resultText.unicodeScalars.reduce(\"\", { acc, value in\n \
    \               return (acc + String(value))\n            })\n        }\n    }\n\
    \n    return resultText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpf8cdh3oo.swift:16:28: error: tuple pattern cannot match values\
    \ of non-tuple type 'Unicode.Scalar'\n    for (_, value) in text.unicodeScalars\
    \ {\n                           ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var s = text\n    let vowels_count = s.count{ vowels.contains($0)\
    \ }\n    for _ in 1..<vowels_count {\n        let index = s.firstIndex(of: vowels)!\n\
    \        s.remove(at: index)\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpygt7ivst.swift:16:26: error: cannot call value of non-function\
    \ type 'Int'\n    let vowels_count = s.count{ vowels.contains($0) }\n        \
    \                 ^\n/tmp/tmpygt7ivst.swift:18:38: error: cannot convert value\
    \ of type 'String' to expected argument type 'String.Element' (aka 'Character')\n\
    \        let index = s.firstIndex(of: vowels)!\n                             \
    \        ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tif\
    \ text == \"\" {\n\t\treturn \"\"\n\t}\n\tr := strings.NewReplacer(vowels, \"\
    _\")\n\treturn r.Replace(text)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpmiu2szx0.swift:17:3: error: consecutive statements on a line must\
    \ be separated by ';'\n        r := strings.NewReplacer(vowels, \"_\")\n     \
    \    ^\n         ;\n/tmp/tmpmiu2szx0.swift:17:4: error: expected expression\n\
    \        r := strings.NewReplacer(vowels, \"_\")\n          ^\n/tmp/tmpmiu2szx0.swift:17:2:\
    \ error: cannot find 'r' in scope\n        r := strings.NewReplacer(vowels, \"\
    _\")\n        ^\n/tmp/tmpmiu2szx0.swift:18:9: error: cannot find 'r' in scope\n\
    \        return r.Replace(text)\n               ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.unicodeScalars.filter({ $0.isInvertedSet }).map({ Character($0.value) }).joinWithSeparator(\"\
    \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") ==\
    \ \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp53cnfj26.swift:14:67: error: no exact matches in call to initializer\
    \ \n    return text.unicodeScalars.filter({ $0.isInvertedSet }).map({ Character($0.value)\
    \ }).joinWithSeparator(\"\")\n                                               \
    \                   ^\n/tmp/tmp53cnfj26.swift:14:67: note: found candidate with\
    \ type '(Unicode.Scalar) -> Character'\n    return text.unicodeScalars.filter({\
    \ $0.isInvertedSet }).map({ Character($0.value) }).joinWithSeparator(\"\")\n \
    \                                                                 ^\n/tmp/tmp53cnfj26.swift:14:67:\
    \ note: found candidate with type '(String) -> Character'\n    return text.unicodeScalars.filter({\
    \ $0.isInvertedSet }).map({ Character($0.value) }).joinWithSeparator(\"\")\n \
    \                                                                 ^\n/tmp/tmp53cnfj26.swift:14:44:\
    \ error: value of type 'Unicode.Scalar' has no member 'isInvertedSet'\n    return\
    \ text.unicodeScalars.filter({ $0.isInvertedSet }).map({ Character($0.value) }).joinWithSeparator(\"\
    \")\n                                        ~~ ^~~~~~~~~~~~~\n/tmp/tmp53cnfj26.swift:14:90:\
    \ error: value of type '[Character]' has no member 'joinWithSeparator'\n    return\
    \ text.unicodeScalars.filter({ $0.isInvertedSet }).map({ Character($0.value) }).joinWithSeparator(\"\
    \")\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ newText = text\n    for char in text {\n        switch char {\n        case\
    \ 'a':\n        case 'e':\n        case 'i':\n        case 'o':\n        case\
    \ 'u':\n            newText = String(text.utf16.dropLast())\n        }\n    }\n\
    \    return newText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp67sp30y2.swift:17:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp67sp30y2.swift:17:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'a':\n        ^~~~~~~~~\n                  break\n/tmp/tmp67sp30y2.swift:18:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp67sp30y2.swift:18:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'e':\n        ^~~~~~~~~\n                  break\n/tmp/tmp67sp30y2.swift:19:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'i':\n   \
    \          ^~~\n             \"i\"\n/tmp/tmp67sp30y2.swift:19:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'i':\n        ^~~~~~~~~\n                  break\n/tmp/tmp67sp30y2.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'o':\n   \
    \          ^~~\n             \"o\"\n/tmp/tmp67sp30y2.swift:20:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'o':\n        ^~~~~~~~~\n                  break\n/tmp/tmp67sp30y2.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'u':\n   \
    \          ^~~\n             \"u\"\n/tmp/tmp67sp30y2.swift:22:23: error: value\
    \ of optional type 'String?' must be unwrapped to a value of type 'String'\n \
    \           newText = String(text.utf16.dropLast())\n                      ^\n\
    /tmp/tmp67sp30y2.swift:22:23: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n            newText = String(text.utf16.dropLast())\n\
    \                      ^\n                                                   \
    \ ?? <#default value#>\n/tmp/tmp67sp30y2.swift:22:23: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n            newText\
    \ = String(text.utf16.dropLast())\n                      ^\n                 \
    \                                  !\n/tmp/tmp67sp30"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    \n\
    \    if text == \"\" {\n        return \"\"\n    }\n    \n    let filteredText\
    \ = text.filter {\n        char in vowels.contains(char) ?? false\n    }\n   \
    \ \n    return filteredText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp8d24aezg.swift:20:17: error: cannot find 'vowels' in scope\n  \
    \      char in vowels.contains(char) ?? false\n                ^~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tc :=\
    \ strings.NewReplacer(\"-\", \"\")\n\tr := strings.NewReplacer(\"aeiouAEIOU\"\
    , \"\")\n\tresult := strings.NewReplacer(\"-\", \"\", \"a\", \"e\", \"i\", \"\
    o\", \"u\", \"\").Replace(c.Replace(text))\n\tif strings.ContainsRune(result,\
    \ unicode.RuneError) || strings.ContainsRune(result, '-') {\n\t\treturn \"\"\n\
    \t}\n\tresult = r.Replace(result)\n\tif strings.ContainsRune(result, unicode.RuneError)\
    \ || strings.ContainsRune(result, '-') {\n\t\treturn \"\"\n\t}\n\treturn result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpdje5v8u3.swift:14:3: error: consecutive statements on a line must\
    \ be separated by ';'\n        c := strings.NewReplacer(\"-\", \"\")\n       \
    \  ^\n         ;\n/tmp/tmpdje5v8u3.swift:14:4: error: expected expression\n  \
    \      c := strings.NewReplacer(\"-\", \"\")\n          ^\n/tmp/tmpdje5v8u3.swift:17:85:\
    \ error: single-quoted string literal found, use '\"'\n        if strings.ContainsRune(result,\
    \ unicode.RuneError) || strings.ContainsRune(result, '-') {\n                \
    \                                                                           ^~~\n\
    \                                                                            \
    \               \"-\"\n/tmp/tmpdje5v8u3.swift:21:85: error: single-quoted string\
    \ literal found, use '\"'\n        if strings.ContainsRune(result, unicode.RuneError)\
    \ || strings.ContainsRune(result, '-') {\n                                   \
    \                                                        ^~~\n               \
    \                                                                            \"\
    -\"\n/tmp/tmpdje5v8u3.swift:14:2: error: cannot find 'c' in scope\n        c :=\
    \ strings.NewReplacer(\"-\", \"\")\n        ^\n/tmp/tmpdje5v8u3.swift:17:5: error:\
    \ cannot find 'strings' in scope\n        if strings.ContainsRune(result, unicode.RuneError)\
    \ || strings.ContainsRune(result, '-') {\n           ^~~~~~~\n/tmp/tmpdje5v8u3.swift:17:26:\
    \ error: cannot find 'result' in scope\n        if strings.ContainsRune(result,\
    \ unicode.RuneError) || strings.ContainsRune(result, '-') {\n                \
    \                ^~~~~~\n/tmp/tmpdje5v8u3.swift:17:34: error: cannot find 'unicode'\
    \ in scope\n        if strings.ContainsRune(result, unicode.RuneError) || strings.ContainsRune(result,\
    \ '-') {\n                                        ^~~~~~~\n/tmp/tmpdje5v8u3.swift:17:56:\
    \ error: cannot find 'strings' in scope\n        if strings.ContainsRune(result,\
    \ unicode.RuneError) || strings.ContainsRune(result, '-') {\n                \
    \                                              ^~~~~~~\n/tmp/tmpdje5v8u3.swift:17:77:\
    \ error: cannot find 'result' in scope\n        if strings.Conta"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter({$0.isLetter || $0.isUpper})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpwyfhazxy.swift:14:43: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isUpper'\n    return text.filter({$0.isLetter ||\
    \ $0.isUpper})\n                                       ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ strings.Map(remove_vowels_fn, text)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpwir3m3f5.swift:14:12: error: cannot find 'strings' in scope\n \
    \   return strings.Map(remove_vowels_fn, text)\n           ^~~~~~~\n/tmp/tmpwir3m3f5.swift:14:24:\
    \ error: cannot find 'remove_vowels_fn' in scope\n    return strings.Map(remove_vowels_fn,\
    \ text)\n                       ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ removeVowels(removeNonVowels(text))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpwmsxqebr.swift:14:12: error: cannot find 'removeVowels' in scope\n\
    \    return removeVowels(removeNonVowels(text))\n           ^~~~~~~~~~~~\n/tmp/tmpwmsxqebr.swift:14:25:\
    \ error: cannot find 'removeNonVowels' in scope\n    return removeVowels(removeNonVowels(text))\n\
    \                        ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\"\
    , \"U\")\n    return text.filter { vowels.contains($0) }.joined()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpzhj872af.swift:14:23: error: missing argument label 'arrayLiteral:'\
    \ in call\n    let vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"\
    E\", \"I\", \"O\", \"U\")\n                      ^\n                       arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter {\n        switch $0 {\n        case UnicodeScalar(code: 0x1AE):\n\
    \            return UnicodeScalar(code: 0x200E)\n        case UnicodeScalar(code:\
    \ 0x1F07):\n            return UnicodeScalar(code: 0x2075)\n        case UnicodeScalar(code:\
    \ 0x1F08):\n            return UnicodeScalar(code: 0x2076)\n        case UnicodeScalar(code:\
    \ 0x1F09):\n            return UnicodeScalar(code: 0x2077)\n        case UnicodeScalar(code:\
    \ 0x1F0A):\n            return UnicodeScalar(code: 0x2078)\n        case UnicodeScalar(code:\
    \ 0x1F0B):\n            return UnicodeScalar(code: 0x2079)\n        case UnicodeScalar(code:\
    \ 0x1F0C):\n            return UnicodeScalar(code: 0x207A)\n        case UnicodeScalar(code:\
    \ 0x1F0D):\n            return UnicodeScalar(code: 0x207B)\n        case UnicodeScalar(code:\
    \ 0x1F0E):\n            return UnicodeScalar(code: 0x207C)\n        case UnicodeScalar(code:\
    \ 0x1F0F):\n            return UnicodeScalar(code: 0x207D)\n        case UnicodeScalar(code:\
    \ 0x1F10):\n            return UnicodeScalar(code: 0x207E)\n        case UnicodeScalar(code:\
    \ 0x1F11):\n            return UnicodeScalar(code: 0x207F)\n        case UnicodeScalar(code:\
    \ 0x1F12):\n            return UnicodeScalar(code: 0x2080)\n        case UnicodeScalar(code:\
    \ 0x1F13):\n            return UnicodeScalar(code: 0x2081)\n        case UnicodeScalar(code:\
    \ 0x1F14):\n            return UnicodeScalar(code: 0x2082)\n        case UnicodeScalar(code:\
    \ 0x1F15):\n            return UnicodeScalar(code: 0x2083)\n        case UnicodeScalar(code:\
    \ 0x1F16):\n            return UnicodeScalar(code: 0x2084)\n        case UnicodeScalar(code:\
    \ 0x1F17):\n            return UnicodeScalar(code: 0x2085)\n        case UnicodeScalar(code:\
    \ 0x1F18):\n            return UnicodeScalar(code: 0x2086)\n        case UnicodeScalar(code:\
    \ 0x1F19):\n            return UnicodeScalar(code: 0x2087)\n        case UnicodeScalar(code:\
    \ 0x1F1A):\n            return UnicodeScalar(code: 0x2088)\n        case UnicodeScalar(code:\
    \ 0x1F1B):\n            return UnicodeScalar(code: 0x2089)\n        case UnicodeScalar(code:\
    \ 0x1F1C):\n            return UnicodeScalar(code: 0x208A)\n        case UnicodeScalar(code:\
    \ 0x1F1D):\n            return UnicodeScalar(code: 0x208B)\n        case UnicodeScalar(code:\
    \ 0x1F1E):\n            return Unicode\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpk_fsptcq.swift:87:46: error: expected '}' at end of closure\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")\n                                             ^\n/tmp/tmpk_fsptcq.swift:14:24:\
    \ note: to match this opening '{'\n    return text.filter {\n                \
    \       ^\n/tmp/tmpk_fsptcq.swift:87:46: error: expected '}' at end of brace statement\n\
    assert(remove_vowels(text: \"ybcd\") == \"ybcd\")\n                          \
    \                   ^\n/tmp/tmpk_fsptcq.swift:13:44: note: to match this opening\
    \ '{'\nfunc remove_vowels(text: String) -> String {\n                        \
    \                   ^\n/tmp/tmpk_fsptcq.swift:17:33: error: extraneous argument\
    \ label 'code:' in call\n            return UnicodeScalar(code: 0x200E)\n    \
    \                            ^~~~~~~\n                                 \n/tmp/tmpk_fsptcq.swift:17:20:\
    \ error: optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>') cannot\
    \ be used as a boolean; test for '!= nil' instead\n            return UnicodeScalar(code:\
    \ 0x200E)\n                   ^\n                   (                        \
    \   != nil)\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n  return\
    \ String(cut(text, false))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp0u94afaz.swift:14:17: error: cannot find 'cut' in scope\n  return\
    \ String(cut(text, false))\n                ^~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = Set(\"aeiouAEIOU\".characters)\n    if text.isEmpty {\n        return\
    \ \"\"\n    }\n\n    var vowel_iter = text.characters\n    if let last = vowel_iter.next()\
    \ {\n        while let vowel = vowel_iter.next() {\n            if vowel == last\
    \ {\n                vowel_iter.removeLast()\n            }\n        }\n    }\n\
    \    return String(vowel_iter)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp_8r_fcoz.swift:14:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowels = Set(\"aeiouAEIOU\".characters)\n     \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_8r_fcoz.swift:19:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowel_iter = text.characters\n         \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp_8r_fcoz.swift:20:30: error: value of type 'String' has no member\
    \ 'next'\n    if let last = vowel_iter.next() {\n                  ~~~~~~~~~~\
    \ ^~~~\n/tmp/tmp_8r_fcoz.swift:21:38: error: value of type 'String' has no member\
    \ 'next'\n        while let vowel = vowel_iter.next() {\n                    \
    \      ~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tlet\
    \ vowels = \"aeiou\"\n\tvar resultString = \"\"\n\ttext = StringTrim(text)\n\t\
    for char in text.characters {\n\t\tif let index = vowels.firstIndex(of: char)\
    \ {\n\t\t\tresultString += String(char)\n\t\t}\n\t}\n\treturn resultString\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpqp9m5fg7.swift:16:9: error: cannot find 'StringTrim' in scope\n\
    \        text = StringTrim(text)\n               ^~~~~~~~~~\n/tmp/tmpqp9m5fg7.swift:16:2:\
    \ error: cannot assign to value: 'text' is a 'let' constant\n        text = StringTrim(text)\n\
    \        ^~~~\n/tmp/tmpqp9m5fg7.swift:17:19: error: 'characters' is unavailable:\
    \ Please use String directly\n        for char in text.characters {\n        \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ strings.Join(strings.Fields(text), \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp_alnq0aa.swift:14:12: error: cannot find 'strings' in scope\n \
    \   return strings.Join(strings.Fields(text), \"\")\n           ^~~~~~~\n/tmp/tmp_alnq0aa.swift:14:25:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(strings.Fields(text),\
    \ \"\")\n                        ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text.hasPrefix(\"aeiou\") {\n        return text.dropFirst()\n    }\n    return\
    \ text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\"\
    ) == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp5youyrft.swift:15:21: error: no 'dropFirst' candidates produce\
    \ the expected contextual result type 'String'\n        return text.dropFirst()\n\
    \                    ^\nSwift.Sequence:4:40: note: 'dropFirst' produces 'DropFirstSequence<String>',\
    \ not the expected contextual result type 'String'\n    @inlinable public __consuming\
    \ func dropFirst(_ k: Int = 1) -> DropFirstSequence<Self>\n                  \
    \                     ^\nSwift.Collection:3:40: note: 'dropFirst' produces 'String.SubSequence'\
    \ (aka 'Substring'), not the expected contextual result type 'String'\n    @inlinable\
    \ public __consuming func dropFirst(_ k: Int = 1) -> Self.SubSequence\n      \
    \                                 ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" {\n        return \"\"\n    }\n\n    var outStr = \"\"\n\n    for\
    \ letter in text {\n        if !VOWELS.contains(letter) {\n            outStr\
    \ += letter\n        }\n    }\n\n    return outStr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpsvmbfhgk.swift:21:13: error: cannot find 'VOWELS' in scope\n  \
    \      if !VOWELS.contains(letter) {\n            ^~~~~~\n/tmp/tmpsvmbfhgk.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            outStr += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ strings.Filter(func(s String) bool {\n        return strings.HasSuffix(s, \"\
    a\") || strings.HasSuffix(s, \"e\") || strings.HasSuffix(s, \"i\") || strings.HasSuffix(s,\
    \ \"o\") || strings.HasSuffix(s, \"u\")\n    }, text)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpldhfgf0f.swift:14:27: error: expected expression in list of expressions\n\
    \    return strings.Filter(func(s String) bool {\n                          ^\n\
    /tmp/tmpldhfgf0f.swift:14:31: error: expected identifier in function declaration\n\
    \    return strings.Filter(func(s String) bool {\n                           \
    \   ^\n/tmp/tmpldhfgf0f.swift:14:12: error: cannot find 'strings' in scope\n \
    \   return strings.Filter(func(s String) bool {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = text\n    for i in 0 ..< text.count {\n        if let match = Vowels.characters.contains(text[i])\
    \ {\n            result += text[i..<i+match].first!\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp0xrffe8a.swift:16:24: error: cannot find 'Vowels' in scope\n  \
    \      if let match = Vowels.characters.contains(text[i]) {\n                \
    \       ^~~~~~\n/tmp/tmp0xrffe8a.swift:17:46: error: cannot convert value of type\
    \ 'String.Element' (aka 'Character') to expected argument type 'String'\n    \
    \        result += text[i..<i+match].first!\n                                \
    \             ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tvar\
    \ buffer String\n\n\tfor i, v := range text {\n\t\tif v not in \"aeiouAEIOU\"\
    \ {\n\t\t\tbuffer += String(v)\n\t\t}\n\t}\n\treturn buffer\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp87w2r9eh.swift:14:13: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n        var buffer String\n\
    \                   ^\n/tmp/tmp87w2r9eh.swift:14:13: note: join the identifiers\
    \ together\n        var buffer String\n            ~~~~~~~^~~~~~\n           \
    \ bufferString\n/tmp/tmp87w2r9eh.swift:16:7: error: expected 'in' after for-each\
    \ pattern\n        for i, v := range text {\n             ^\n/tmp/tmp87w2r9eh.swift:16:7:\
    \ error: expected Sequence expression for for-each loop\n        for i, v := range\
    \ text {\n             ^\n/tmp/tmp87w2r9eh.swift:17:8: error: expected '{' after\
    \ 'if' condition\n                if v not in \"aeiouAEIOU\" {\n             \
    \        ^\n/tmp/tmp87w2r9eh.swift:14:6: error: type annotation missing in pattern\n\
    \        var buffer String\n            ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\ttext\
    \ += \"\"\n\ttext = remove_all(text, \"aA\")\n\ttext = remove_all(text, \"aE\"\
    )\n\ttext = remove_all(text, \"iI\")\n\ttext = remove_all(text, \"oO\")\n\ttext\
    \ = remove_all(text, \"uU\")\n\ttext = remove_all(text, \"AEIOU\")\n\ttext = remove_all(text,\
    \ \"AEIOU\")\n\treturn text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpq8xdqu_u.swift:14:7: error: left side of mutating operator isn't\
    \ mutable: 'text' is a 'let' constant\n        text += \"\"\n        ~~~~ ^\n\
    /tmp/tmpq8xdqu_u.swift:15:9: error: cannot find 'remove_all' in scope\n      \
    \  text = remove_all(text, \"aA\")\n               ^~~~~~~~~~\n/tmp/tmpq8xdqu_u.swift:15:2:\
    \ error: cannot assign to value: 'text' is a 'let' constant\n        text = remove_all(text,\
    \ \"aA\")\n        ^~~~\n/tmp/tmpq8xdqu_u.swift:16:9: error: cannot find 'remove_all'\
    \ in scope\n        text = remove_all(text, \"aE\")\n               ^~~~~~~~~~\n\
    /tmp/tmpq8xdqu_u.swift:16:2: error: cannot assign to value: 'text' is a 'let'\
    \ constant\n        text = remove_all(text, \"aE\")\n        ^~~~\n/tmp/tmpq8xdqu_u.swift:17:9:\
    \ error: cannot find 'remove_all' in scope\n        text = remove_all(text, \"\
    iI\")\n               ^~~~~~~~~~\n/tmp/tmpq8xdqu_u.swift:17:2: error: cannot assign\
    \ to value: 'text' is a 'let' constant\n        text = remove_all(text, \"iI\"\
    )\n        ^~~~\n/tmp/tmpq8xdqu_u.swift:18:9: error: cannot find 'remove_all'\
    \ in scope\n        text = remove_all(text, \"oO\")\n               ^~~~~~~~~~\n\
    /tmp/tmpq8xdqu_u.swift:18:2: error: cannot assign to value: 'text' is a 'let'\
    \ constant\n        text = remove_all(text, \"oO\")\n        ^~~~\n/tmp/tmpq8xdqu_u.swift:19:9:\
    \ error: cannot find 'remove_all' in scope\n        text = remove_all(text, \"\
    uU\")\n               ^~~~~~~~~~\n/tmp/tmpq8xdqu_u.swift:19:2: error: cannot assign\
    \ to value: 'text' is a 'let' constant\n        text = remove_all(text, \"uU\"\
    )\n        ^~~~\n/tmp/tmpq8xdqu_u.swift:20:9: error: cannot find 'remove_all'\
    \ in scope\n        text = remove_all(text, \"AEIOU\")\n               ^~~~~~~~~~\n\
    /tmp/tmpq8xdqu_u.swift:20:2: error: cannot assign to value: 'text' is a 'let'\
    \ constant\n        text = remove_all(text, \"AEIOU\")\n        ^~~~\n/tmp/tmpq8xdqu_u.swift:21:9:\
    \ error: cannot find 'remove_all' in scope\n        text = remove_all(text, \"\
    AEIOU\")\n               ^~~~~~~~~~\n/tmp/tmpq8xdqu_u.swift:21:2: error: cannot\
    \ assign to value: 'text' is a 'let' constant\n        text = remove_all(text,\
    \ \"AEIOU\")\n  "
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    switch\
    \ text {\n    case \"\": // nothing to remove\n        return text\n    case \"\
    aeiou\": // nothing to remove\n        return text\n    default:\n        return\
    \ String(filter(text.unicodeScalars.filter{ $0.isOdd}))\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpncvj11ab.swift:20:23: error: cannot find 'filter' in scope\n  \
    \      return String(filter(text.unicodeScalars.filter{ $0.isOdd}))\n        \
    \              ^~~~~~\n/tmp/tmpncvj11ab.swift:20:61: error: value of type 'Unicode.Scalar'\
    \ has no member 'isOdd'\n        return String(filter(text.unicodeScalars.filter{\
    \ $0.isOdd}))\n                                                         ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    //\
    \ TODO: implement remove_vowels(text: String) -> String\n\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmp5ze7b4jz/tmp5ze7b4jz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8dbb9d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8dbb6c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8dbb6c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8dbb6c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ze7b4jz                        0x000055f5dc8ad3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b8dbbbbd460 __libc_start_main +
    245

    6    tmp5ze7b4jz                        0x000055f5dc8acf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\treturn\
    \ _StringUtils_remove_vowels(text)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpkmntin50.swift:14:9: error: cannot find '_StringUtils_remove_vowels'\
    \ in scope\n        return _StringUtils_remove_vowels(text)\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    text.lowercase().removeSubrange(text.rangeOfString(\"\
    -\"))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\"\
    ) == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpowwav5d_.swift:14:10: error: value of type 'String' has no member\
    \ 'lowercase'\n    text.lowercase().removeSubrange(text.rangeOfString(\"-\"))\n\
    \    ~~~~ ^~~~~~~~~\n/tmp/tmpowwav5d_.swift:14:42: error: value of type 'String'\
    \ has no member 'rangeOfString'\n    text.lowercase().removeSubrange(text.rangeOfString(\"\
    -\"))\n                                    ~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    func\
    \ removeVowels(text: String) -> String {\n        return text.unicodeScalars.filter{\
    \ UnicodeScalar($0).value != UnicodeScalar('a') }\n    }\n\n    return removeVowels(text)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp1rrg0sx_.swift:15:85: error: single-quoted string literal found,\
    \ use '\"'\n        return text.unicodeScalars.filter{ UnicodeScalar($0).value\
    \ != UnicodeScalar('a') }\n                                                  \
    \                                  ^~~\n                                     \
    \                                               \"a\"\n/tmp/tmp1rrg0sx_.swift:15:36:\
    \ error: no 'filter' candidates produce the expected contextual result type 'String'\n\
    \        return text.unicodeScalars.filter{ UnicodeScalar($0).value != UnicodeScalar('a')\
    \ }\n                                   ^\nSwift.RangeReplaceableCollection:3:40:\
    \ note: 'filter' produces 'String.UnicodeScalarView', not the expected contextual\
    \ result type 'String'\n    @inlinable public __consuming func filter(_ isIncluded:\
    \ (Self.Element) throws -> Bool) rethrows -> Self\n                          \
    \             ^\nSwift.Sequence:3:40: note: 'filter' produces '[Unicode.Scalar]',\
    \ not the expected contextual result type 'String'\n    @inlinable public __consuming\
    \ func filter(_ isIncluded: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\n\
    \                                       ^\n/tmp/tmp1rrg0sx_.swift:15:68: error:\
    \ operator function '!=' requires that 'UnicodeScalar' (aka 'Unicode.Scalar')\
    \ conform to 'BinaryInteger'\n        return text.unicodeScalars.filter{ UnicodeScalar($0).value\
    \ != UnicodeScalar('a') }\n                                                  \
    \                 ^\nSwift.BinaryInteger:3:24: note: where 'Other' = 'UnicodeScalar'\
    \ (aka 'Unicode.Scalar')\n    public static func != <Other>(lhs: Self, rhs: Other)\
    \ -> Bool where Other : BinaryInteger\n                       ^\n/tmp/tmp1rrg0sx_.swift:18:25:\
    \ error: missing argument label 'text:' in call\n    return removeVowels(text)\n\
    \                        ^\n                        text: \n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    vowels\
    \ := []rune{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    c := 0\n  \
    \  r := 0\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n\
    \            c = 0\n        } else {\n            for j := 0; j < len(vowels);\
    \ j++ {\n                if text[i] == vowels[j] {\n                    c++\n\
    \                    break\n                }\n            }\n            if c\
    \ > 0 {\n                r += rune(text[i])\n                c = 0\n         \
    \   }\n        }\n    }\n    return string(r)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpnfc8flmo.swift:14:11: error: consecutive statements on a line must\
    \ be separated by ';'\n    vowels := []rune{'a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U'}\n          ^\n          ;\n/tmp/tmpnfc8flmo.swift:14:12: error:\
    \ expected expression\n    vowels := []rune{'a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U'}\n           ^\n/tmp/tmpnfc8flmo.swift:14:22: error: single-quoted\
    \ string literal found, use '\"'\n    vowels := []rune{'a', 'e', 'i', 'o', 'u',\
    \ 'A', 'E', 'I', 'O', 'U'}\n                     ^~~\n                     \"\
    a\"\n/tmp/tmpnfc8flmo.swift:14:27: error: single-quoted string literal found,\
    \ use '\"'\n    vowels := []rune{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U'}\n                          ^~~\n                          \"e\"\n/tmp/tmpnfc8flmo.swift:14:32:\
    \ error: single-quoted string literal found, use '\"'\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n                             \
    \  ^~~\n                               \"i\"\n/tmp/tmpnfc8flmo.swift:14:37: error:\
    \ single-quoted string literal found, use '\"'\n    vowels := []rune{'a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n                                  \
    \  ^~~\n                                    \"o\"\n/tmp/tmpnfc8flmo.swift:14:42:\
    \ error: single-quoted string literal found, use '\"'\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n                             \
    \            ^~~\n                                         \"u\"\n/tmp/tmpnfc8flmo.swift:14:47:\
    \ error: single-quoted string literal found, use '\"'\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n                             \
    \                 ^~~\n                                              \"A\"\n/tmp/tmpnfc8flmo.swift:14:52:\
    \ error: single-quoted string literal found, use '\"'\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n                             \
    \                      ^~~\n                                                 \
    \  \"E\"\n/tmp/tmpnfc8flmo.swift:14:57: error: single-quoted string literal found,\
    \ use '\"'\n    vowels :"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text\n        .replaceAll(vowels, \"\")\n        .replaceAll(\" \", \"\")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpmlcek35v.swift:15:21: error: cannot find 'vowels' in scope\n  \
    \      .replaceAll(vowels, \"\")\n                    ^~~~~~\n/tmp/tmpmlcek35v.swift:15:10:\
    \ error: value of type 'String' has no member 'replaceAll'\n        .replaceAll(vowels,\
    \ \"\")\n         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tif\
    \ text == \"\" {\n\t\treturn text\n\t}\n\tresult := make([]rune, 0)\n\tvowels\
    \ := []rune(\"a..zA..Z\")\n\tfor _, r := range text {\n\t\tif !contains(vowels,\
    \ r) {\n\t\t\tresult = append(result, r)\n\t\t}\n\t}\n\treturn string(result)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpcagq4zkp.swift:17:8: error: consecutive statements on a line must\
    \ be separated by ';'\n        result := make([]rune, 0)\n              ^\n  \
    \            ;\n/tmp/tmpcagq4zkp.swift:17:9: error: expected expression\n    \
    \    result := make([]rune, 0)\n               ^\n/tmp/tmpcagq4zkp.swift:19:7:\
    \ error: expected 'in' after for-each pattern\n        for _, r := range text\
    \ {\n             ^\n/tmp/tmpcagq4zkp.swift:19:7: error: expected Sequence expression\
    \ for for-each loop\n        for _, r := range text {\n             ^\n/tmp/tmpcagq4zkp.swift:17:2:\
    \ error: cannot find 'result' in scope\n        result := make([]rune, 0)\n  \
    \      ^~~~~~\n/tmp/tmpcagq4zkp.swift:24:9: error: cannot find 'string' in scope\n\
    \        return string(result)\n               ^~~~~~\n/tmp/tmpcagq4zkp.swift:24:16:\
    \ error: cannot find 'result' in scope\n        return string(result)\n      \
    \                ^~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tif\
    \ text == \"\" {\n\t\treturn \"\"\n\t}\n\tresult := \"\"\n\ttext += string(unicode.ToLower(unicode.ToUpper(string(text))))\n\
    \tfor _, v := range vowels {\n\t\tresult = string(unicode.IsOneOf(unicode.ToLower(text),\
    \ unicode.ToUpper(v))) + result\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp5o4yklmo.swift:17:8: error: consecutive statements on a line must\
    \ be separated by ';'\n        result := \"\"\n              ^\n             \
    \ ;\n/tmp/tmp5o4yklmo.swift:17:9: error: expected expression\n        result :=\
    \ \"\"\n               ^\n/tmp/tmp5o4yklmo.swift:19:7: error: expected 'in' after\
    \ for-each pattern\n        for _, v := range vowels {\n             ^\n/tmp/tmp5o4yklmo.swift:19:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, v := range\
    \ vowels {\n             ^\n/tmp/tmp5o4yklmo.swift:17:2: error: cannot find 'result'\
    \ in scope\n        result := \"\"\n        ^~~~~~\n/tmp/tmp5o4yklmo.swift:22:9:\
    \ error: cannot find 'result' in scope\n        return result\n              \
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\treturn\
    \ removeFunc(text, removeVowels)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpq3w_d470.swift:14:9: error: cannot find 'removeFunc' in scope\n\
    \        return removeFunc(text, removeVowels)\n               ^~~~~~~~~~\n/tmp/tmpq3w_d470.swift:14:26:\
    \ error: cannot find 'removeVowels' in scope\n        return removeFunc(text,\
    \ removeVowels)\n                                ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    \n\
    \    func removeVowels(text: String) -> String {\n        var newString = \"\"\
    \n        for char in text {\n            if char == \"a\" || char == \"e\" ||\
    \ char == \"i\" || char == \"o\" || char == \"u\" || char == \"A\" || char ==\
    \ \"E\" || char == \"I\" || char == \"O\" || char == \"U\" {\n               \
    \ newString += char\n            }\n        }\n        \n        return newString\n\
    \    }\n    \n    if text.isEmpty {\n        return \"\"\n    }\n    \n    return\
    \ removeVowels(text: text)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp12hqddc6.swift:19:30: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n                newString += char\n    \
    \                         ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" {\n        return \"\"\n    }\n    return text.stringByReplacingOccurrencesOfString(\"\
    [aeiouAEIOU]\", withString: \"\", options: .RegularExpressionSearch, range: nil)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpmily_uj_.swift:17:17: error: value of type 'String' has no member\
    \ 'stringByReplacingOccurrencesOfString'\n    return text.stringByReplacingOccurrencesOfString(\"\
    [aeiouAEIOU]\", withString: \"\", options: .RegularExpressionSearch, range: nil)\n\
    \           ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmily_uj_.swift:17:96:\
    \ error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n\
    \    return text.stringByReplacingOccurrencesOfString(\"[aeiouAEIOU]\", withString:\
    \ \"\", options: .RegularExpressionSearch, range: nil)\n                     \
    \                                                                         ~^~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmily_uj_.swift:17:128: error: 'nil' requires a contextual type\n    return\
    \ text.stringByReplacingOccurrencesOfString(\"[aeiouAEIOU]\", withString: \"\"\
    , options: .RegularExpressionSearch, range: nil)\n                           \
    \                                                                            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\treturn\
    \ removeVowels(text.unicodeScalars.map { $0.value })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpx896eyb9.swift:14:9: error: cannot find 'removeVowels' in scope\n\
    \        return removeVowels(text.unicodeScalars.map { $0.value })\n         \
    \      ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ !isStringEmpty(text) {\n        var vowels: Array<Character> = []\n        for\
    \ c in text {\n            if isVowel(c) {\n                vowels.append(c)\n\
    \            }\n        }\n        return String(_nsString.subStringWithRanges(NSMakeRange(0,\
    \ text.length - 1), nil, vowels))\n    } else {\n        return text\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpm5ono0lw.swift:14:9: error: cannot find 'isStringEmpty' in scope\n\
    \    if !isStringEmpty(text) {\n        ^~~~~~~~~~~~~\n/tmp/tmpm5ono0lw.swift:17:16:\
    \ error: cannot find 'isVowel' in scope\n            if isVowel(c) {\n       \
    \        ^~~~~~~\n/tmp/tmpm5ono0lw.swift:21:23: error: cannot find '_nsString'\
    \ in scope\n        return String(_nsString.subStringWithRanges(NSMakeRange(0,\
    \ text.length - 1), nil, vowels))\n                      ^~~~~~~~~\n/tmp/tmpm5ono0lw.swift:21:53:\
    \ error: cannot find 'NSMakeRange' in scope\n        return String(_nsString.subStringWithRanges(NSMakeRange(0,\
    \ text.length - 1), nil, vowels))\n                                          \
    \          ^~~~~~~~~~~\n/tmp/tmpm5ono0lw.swift:21:73: error: value of type 'String'\
    \ has no member 'length'\n        return String(_nsString.subStringWithRanges(NSMakeRange(0,\
    \ text.length - 1), nil, vowels))\n                                          \
    \                         ~~~~ ^~~~~~\n/tmp/tmpm5ono0lw.swift:21:86: error: 'nil'\
    \ requires a contextual type\n        return String(_nsString.subStringWithRanges(NSMakeRange(0,\
    \ text.length - 1), nil, vowels))\n                                          \
    \                                           ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ regex = CharacterSet.lowercaseLetters.union(CharacterSet.uppercaseLetters).union(CharacterSet.nonBaseCharacters)\n\
    \    return text.stringByReplacingOccurrencesOfString(\"[aeiou]\", withString:\
    \ \"\", options: .regularExpression, range: nil)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp72osqwrg.swift:14:17: error: cannot find 'CharacterSet' in scope\n\
    \    let regex = CharacterSet.lowercaseLetters.union(CharacterSet.uppercaseLetters).union(CharacterSet.nonBaseCharacters)\n\
    \                ^~~~~~~~~~~~\n/tmp/tmp72osqwrg.swift:14:53: error: cannot find\
    \ 'CharacterSet' in scope\n    let regex = CharacterSet.lowercaseLetters.union(CharacterSet.uppercaseLetters).union(CharacterSet.nonBaseCharacters)\n\
    \                                                    ^~~~~~~~~~~~\n/tmp/tmp72osqwrg.swift:14:90:\
    \ error: cannot find 'CharacterSet' in scope\n    let regex = CharacterSet.lowercaseLetters.union(CharacterSet.uppercaseLetters).union(CharacterSet.nonBaseCharacters)\n\
    \                                                                            \
    \             ^~~~~~~~~~~~\n/tmp/tmp72osqwrg.swift:15:17: error: value of type\
    \ 'String' has no member 'stringByReplacingOccurrencesOfString'\n    return text.stringByReplacingOccurrencesOfString(\"\
    [aeiou]\", withString: \"\", options: .regularExpression, range: nil)\n      \
    \     ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp72osqwrg.swift:15:91:\
    \ error: cannot infer contextual base in reference to member 'regularExpression'\n\
    \    return text.stringByReplacingOccurrencesOfString(\"[aeiou]\", withString:\
    \ \"\", options: .regularExpression, range: nil)\n                           \
    \                                                              ~^~~~~~~~~~~~~~~~~\n\
    /tmp/tmp72osqwrg.swift:15:117: error: 'nil' requires a contextual type\n    return\
    \ text.stringByReplacingOccurrencesOfString(\"[aeiou]\", withString: \"\", options:\
    \ .regularExpression, range: nil)\n                                          \
    \                                                                          ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = text\n    for currentCharacter := range text {\n        if currentCharacter\
    \ == 'a' || currentCharacter == 'e' || currentCharacter == 'i' || currentCharacter\
    \ == 'o' || currentCharacter == 'u' {\n            result = result[:currentCharacter]\
    \ + result[currentCharacter+1:]\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpbeo2hzmh.swift:15:27: error: expected type\n    for currentCharacter\
    \ := range text {\n                          ^\n                           <#type#>\n\
    /tmp/tmpbeo2hzmh.swift:15:27: error: expected 'in' after for-each pattern\n  \
    \  for currentCharacter := range text {\n                          ^\n/tmp/tmpbeo2hzmh.swift:15:27:\
    \ error: expected Sequence expression for for-each loop\n    for currentCharacter\
    \ := range text {\n                          ^\n/tmp/tmpbeo2hzmh.swift:16:32:\
    \ error: single-quoted string literal found, use '\"'\n        if currentCharacter\
    \ == 'a' || currentCharacter == 'e' || currentCharacter == 'i' || currentCharacter\
    \ == 'o' || currentCharacter == 'u' {\n                               ^~~\n  \
    \                             \"a\"\n/tmp/tmpbeo2hzmh.swift:16:59: error: single-quoted\
    \ string literal found, use '\"'\n        if currentCharacter == 'a' || currentCharacter\
    \ == 'e' || currentCharacter == 'i' || currentCharacter == 'o' || currentCharacter\
    \ == 'u' {\n                                                          ^~~\n  \
    \                                                        \"e\"\n/tmp/tmpbeo2hzmh.swift:16:86:\
    \ error: single-quoted string literal found, use '\"'\n        if currentCharacter\
    \ == 'a' || currentCharacter == 'e' || currentCharacter == 'i' || currentCharacter\
    \ == 'o' || currentCharacter == 'u' {\n                                      \
    \                                               ^~~\n                        \
    \                                                             \"i\"\n/tmp/tmpbeo2hzmh.swift:16:113:\
    \ error: single-quoted string literal found, use '\"'\n        if currentCharacter\
    \ == 'a' || currentCharacter == 'e' || currentCharacter == 'i' || currentCharacter\
    \ == 'o' || currentCharacter == 'u' {\n                                      \
    \                                                                          ^~~\n\
    \                                                                            \
    \                                    \"o\"\n/tmp/tmpbeo2hzmh.swift:16:140: error:\
    \ single-quoted string literal found, use '\"'\n     "
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ removeVowels(text, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp2jq4uo7b.swift:14:12: error: cannot find 'removeVowels' in scope\n\
    \    return removeVowels(text, true)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824525
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n    let result = \"\"\n   \
    \ for c in text.unicodeScalars {\n        if !vowels.contains(c) {\n         \
    \   result += String(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp5qgd48po.swift:14:18: error: no exact matches in call to initializer\
    \ \n    let vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n                \
    \ ^\nSwift.Set:2:23: note: incorrect labels for candidate (have: '(_:_:_:_:_:)',\
    \ expected: '(arrayLiteral:_:_:_:_:)')\n    @inlinable public init(arrayLiteral\
    \ elements: Element...)\n                      ^\nSwift.SetAlgebra:2:23: note:\
    \ incorrect labels for candidate (have: '(_:_:_:_:_:)', expected: '(arrayLiteral:_:_:_:_:)')\n\
    \    @inlinable public init(arrayLiteral: Self.Element...)\n                 \
    \     ^\n/tmp/tmp5qgd48po.swift:18:20: error: left side of mutating operator isn't\
    \ mutable: 'result' is a 'let' constant\n            result += String(c)\n   \
    \         ~~~~~~ ^\n/tmp/tmp5qgd48po.swift:15:5: note: change 'let' to 'var' to\
    \ make it mutable\n    let result = \"\"\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\treturn\
    \ String(text.unicodeScalars.filter {\n\t\tunicodeScalars.contains(.lowercaseA,\
    \ false)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpjw8fh47e.swift:15:3: error: cannot find 'unicodeScalars' in scope\n\
    \                unicodeScalars.contains(.lowercaseA, false)\n               \
    \ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ regex = try! NSRegularExpression(pattern: \"[AEIOUaeiou]\", options: [])\n \
    \   return regex.stringByReplacingMatches(in: text, options: [], range: NSMakeRange(0,\
    \ text.length), withTemplate: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpu4mwj2sg.swift:14:22: error: cannot find 'NSRegularExpression'\
    \ in scope\n    let regex = try! NSRegularExpression(pattern: \"[AEIOUaeiou]\"\
    , options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpu4mwj2sg.swift:15:73:\
    \ error: cannot find 'NSMakeRange' in scope\n    return regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.length), withTemplate: \"\")\n\
    \                                                                        ^~~~~~~~~~~\n\
    /tmp/tmpu4mwj2sg.swift:15:93: error: value of type 'String' has no member 'length'\n\
    \    return regex.stringByReplacingMatches(in: text, options: [], range: NSMakeRange(0,\
    \ text.length), withTemplate: \"\")\n                                        \
    \                                               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\treturn\
    \ removeVowels(text, vowels, nil)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmptd_nbaf9.swift:14:9: error: cannot find 'removeVowels' in scope\n\
    \        return removeVowels(text, vowels, nil)\n               ^~~~~~~~~~~~\n\
    /tmp/tmptd_nbaf9.swift:14:28: error: cannot find 'vowels' in scope\n        return\
    \ removeVowels(text, vowels, nil)\n                                  ^~~~~~\n\
    /tmp/tmptd_nbaf9.swift:14:36: error: 'nil' requires a contextual type\n      \
    \  return removeVowels(text, vowels, nil)\n                                  \
    \        ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.removeSubrange(text.startIndex...text.endIndex.advancedBy(text.startIndex.advancedBy(-1)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpc306qek6.swift:14:17: error: cannot convert return expression of\
    \ type '()' to return type 'String'\n    return text.removeSubrange(text.startIndex...text.endIndex.advancedBy(text.startIndex.advancedBy(-1)))\n\
    \           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpc306qek6.swift:14:17: error: cannot use mutating member on immutable value:\
    \ 'text' is a 'let' constant\n    return text.removeSubrange(text.startIndex...text.endIndex.advancedBy(text.startIndex.advancedBy(-1)))\n\
    \           ~~~~ ^\n/tmp/tmpc306qek6.swift:14:64: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n    return text.removeSubrange(text.startIndex...text.endIndex.advancedBy(text.startIndex.advancedBy(-1)))\n\
    \                                                 ~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpc306qek6.swift:14:91:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n    return text.removeSubrange(text.startIndex...text.endIndex.advancedBy(text.startIndex.advancedBy(-1)))\n\
    \                                                                          ~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    \n\
    \    var newText = \"\"\n    \n    for letter in text {\n        if letter !=\
    \ \"a\" && letter != \"e\" && letter != \"i\" && letter != \"o\" && letter !=\
    \ \"u\" {\n            newText += String(letter)\n        }\n    }\n    \n   \
    \ return newText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpn9lcsd94/tmpn9lcsd94.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bc82e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bc7fddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bc7fdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bc7fdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn9lcsd94                        0x000055faeea1f99b <unavailable> + 6555

    5    libc.so.6                          0x00002b2bc84d2460 __libc_start_main +
    245

    6    tmpn9lcsd94                        0x000055faeea1f199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ stringFunc(text, func(r rune) bool {\n        switch r {\n        case 'a':\n\
    \        case 'e':\n        case 'i':\n        case 'o':\n        case 'u':\n\
    \            return false\n        default:\n            return true\n       \
    \ }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpy4hx02gp.swift:14:29: error: expected expression in list of expressions\n\
    \    return stringFunc(text, func(r rune) bool {\n                           \
    \ ^\n/tmp/tmpy4hx02gp.swift:14:33: error: expected identifier in function declaration\n\
    \    return stringFunc(text, func(r rune) bool {\n                           \
    \     ^\n/tmp/tmpy4hx02gp.swift:16:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpy4hx02gp.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpy4hx02gp.swift:18:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpy4hx02gp.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'o':\n             ^~~\n             \"o\"\n/tmp/tmpy4hx02gp.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'u':\n   \
    \          ^~~\n             \"u\"\n/tmp/tmpy4hx02gp.swift:14:12: error: cannot\
    \ find 'stringFunc' in scope\n    return stringFunc(text, func(r rune) bool {\n\
    \           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n    return text.filter\
    \ {\n        !vowels.contains($0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpj_dy3eu0.swift:14:18: error: no exact matches in call to initializer\
    \ \n    let vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n         \
    \        ^\nSwift.Set:2:23: note: incorrect labels for candidate (have: '(_:_:_:_:_:_:)',\
    \ expected: '(arrayLiteral:_:_:_:_:_:)')\n    @inlinable public init(arrayLiteral\
    \ elements: Element...)\n                      ^\nSwift.SetAlgebra:2:23: note:\
    \ incorrect labels for candidate (have: '(_:_:_:_:_:_:)', expected: '(arrayLiteral:_:_:_:_:_:)')\n\
    \    @inlinable public init(arrayLiteral: Self.Element...)\n                 \
    \     ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tif\
    \ text == \"\" {\n\t\treturn \"\"\n\t}\n\tstrs := strings.Split(text, \"z\")\n\
    \tstrs2 := make([]string, len(strs))\n\tfor i, s := range strs {\n\t\tstrs2[i]\
    \ = strings.Replace(s, \"a\", \"a\", -1)\n\t\tstrs2[i] = strings.Replace(strs2[i],\
    \ \"e\", \"e\", -1)\n\t\tstrs2[i] = strings.Replace(strs2[i], \"i\", \"i\", -1)\n\
    \t\tstrs2[i] = strings.Replace(strs2[i], \"o\", \"o\", -1)\n\t\tstrs2[i] = strings.Replace(strs2[i],\
    \ \"u\", \"u\", -1)\n\t\tstrs2[i] = strings.Replace(strs2[i], \"A\", \"a\", -1)\n\
    \t\tstrs2[i] = strings.Replace(strs2[i], \"E\", \"e\", -1)\n\t\tstrs2[i] = strings.Replace(strs2[i],\
    \ \"I\", \"i\", -1)\n\t\tstrs2[i] = strings.Replace(strs2[i], \"O\", \"o\", -1)\n\
    \t\tstrs2[i] = strings.Replace(strs2[i], \"U\", \"u\", -1)\n\t}\n\treturn strings.Join(strs2,\
    \ \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\"\
    ) == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpznhexa0r.swift:17:6: error: consecutive statements on a line must\
    \ be separated by ';'\n        strs := strings.Split(text, \"z\")\n          \
    \  ^\n            ;\n/tmp/tmpznhexa0r.swift:17:7: error: expected expression\n\
    \        strs := strings.Split(text, \"z\")\n             ^\n/tmp/tmpznhexa0r.swift:19:7:\
    \ error: expected 'in' after for-each pattern\n        for i, s := range strs\
    \ {\n             ^\n/tmp/tmpznhexa0r.swift:19:7: error: expected Sequence expression\
    \ for for-each loop\n        for i, s := range strs {\n             ^\n/tmp/tmpznhexa0r.swift:17:2:\
    \ error: cannot find 'strs' in scope\n        strs := strings.Split(text, \"z\"\
    )\n        ^~~~\n/tmp/tmpznhexa0r.swift:31:9: error: cannot find 'strings' in\
    \ scope\n        return strings.Join(strs2, \"\")\n               ^~~~~~~\n/tmp/tmpznhexa0r.swift:31:22:\
    \ error: cannot find 'strs2' in scope\n        return strings.Join(strs2, \"\"\
    )\n                            ^~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ removeVowels(text).string(using: .ascii)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpg1ohc6dd.swift:14:12: error: cannot find 'removeVowels' in scope\n\
    \    return removeVowels(text).string(using: .ascii)\n           ^~~~~~~~~~~~\n\
    /tmp/tmpg1ohc6dd.swift:14:46: error: cannot infer contextual base in reference\
    \ to member 'ascii'\n    return removeVowels(text).string(using: .ascii)\n   \
    \                                         ~^~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text.isEmpty {\n        return text\n    }\n    let vowels = \"aeiouAEIOU\"\n\
    \    let charactersSet = CharacterSet(charactersIn: vowels)\n    return text.filter\
    \ { charactersSet.contains($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpve7v87c2.swift:18:25: error: cannot find 'CharacterSet' in scope\n\
    \    let charactersSet = CharacterSet(charactersIn: vowels)\n                \
    \        ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ !text.hasPrefix(\"aeiouy\") {\n        return text\n    }\n\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let text = text.removeFirst()\n\
    \    var result: String = \"\"\n    for c in text {\n        if !vowels.contains(c)\
    \ {\n            result += \"\\(c)\" + text\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpumvjnv6v.swift:19:21: error: cannot use mutating member on immutable\
    \ value: 'text' is a 'let' constant\n    let text = text.removeFirst()\n     \
    \          ~~~~ ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" {\n        return \"\"\n    }\n\n    var result = \"\"\n    for\
    \ c in text {\n        let is_vowel = c == \"a\" || c == \"e\" || c == \"i\" ||\
    \ c == \"o\" || c == \"u\"\n        if !is_vowel {\n            result += \"\\\
    (c)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmp1ej7yulf/tmp1ej7yulf.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29e959bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29e9292b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29e9292988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29e92917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ej7yulf                        0x000055b5c6256c4b <unavailable> + 7243

    5    libc.so.6                          0x00002b29e9787460 __libc_start_main +
    245

    6    tmp1ej7yulf                        0x000055b5c6256449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" {\n        return \"\"\n    }\n    text += \" \"\n    text.lowercase()\n\
    \    let letters = text.unicodeScalars\n    var newText = String()\n    for letter\
    \ in letters {\n        if letter.value > 'z' || letter.value < 'a' {\n      \
    \      newText += String(letter.value)\n        }\n    }\n    return newText\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpa0t7fglj.swift:22:27: error: single-quoted string literal found,\
    \ use '\"'\n        if letter.value > 'z' || letter.value < 'a' {\n          \
    \                ^~~\n                          \"z\"\n/tmp/tmpa0t7fglj.swift:22:49:\
    \ error: single-quoted string literal found, use '\"'\n        if letter.value\
    \ > 'z' || letter.value < 'a' {\n                                            \
    \    ^~~\n                                                \"a\"\n/tmp/tmpa0t7fglj.swift:17:10:\
    \ error: left side of mutating operator isn't mutable: 'text' is a 'let' constant\n\
    \    text += \" \"\n    ~~~~ ^\n/tmp/tmpa0t7fglj.swift:18:10: error: value of\
    \ type 'String' has no member 'lowercase'\n    text.lowercase()\n    ~~~~ ^~~~~~~~~\n\
    /tmp/tmpa0t7fglj.swift:22:47: error: binary operator '<' cannot be applied to\
    \ operands of type 'UInt32' and 'String'\n        if letter.value > 'z' || letter.value\
    \ < 'a' {\n                                 ~~~~~~~~~~~~ ^ ~~~\n/tmp/tmpa0t7fglj.swift:22:47:\
    \ note: overloads for '<' exist with these partially matching parameter lists:\
    \ (String, String), (UInt32, UInt32)\n        if letter.value > 'z' || letter.value\
    \ < 'a' {\n                                              ^\n/tmp/tmpa0t7fglj.swift:22:27:\
    \ error: cannot convert value of type 'String' to expected argument type 'UInt32'\n\
    \        if letter.value > 'z' || letter.value < 'a' {\n                     \
    \     ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.trimmingCharacters(in: NSCharacterSet.vowels) ?? text\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpu35v708m.swift:14:40: error: cannot find 'NSCharacterSet' in scope\n\
    \    return text.trimmingCharacters(in: NSCharacterSet.vowels) ?? text\n     \
    \                                  ^~~~~~~~~~~~~~\n/tmp/tmpu35v708m.swift:14:17:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ text.trimmingCharacters(in: NSCharacterSet.vowels) ?? text\n           ~~~~\
    \ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\treturn\
    \ removeVowels(text, vowels: vowels)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp6y5fca4b.swift:14:9: error: cannot find 'removeVowels' in scope\n\
    \        return removeVowels(text, vowels: vowels)\n               ^~~~~~~~~~~~\n\
    /tmp/tmp6y5fca4b.swift:14:36: error: cannot find 'vowels' in scope\n        return\
    \ removeVowels(text, vowels: vowels)\n                                       \
    \   ^~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" {\n        return \"\"\n    }\n    var result = \"\"\n    var vowels\
    \ = vowels()\n    for str in text.characters {\n        if !contains(vowels, str)\
    \ {\n            result += str\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp92kzmrkd.swift:18:18: error: use of local variable 'vowels' before\
    \ its declaration\n    var vowels = vowels()\n                 ^\n/tmp/tmp92kzmrkd.swift:18:9:\
    \ note: 'vowels' declared here\n    var vowels = vowels()\n        ^\n/tmp/tmp92kzmrkd.swift:19:21:\
    \ error: 'characters' is unavailable: Please use String directly\n    for str\
    \ in text.characters {\n                    ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp92kzmrkd.swift:20:13: error: cannot find\
    \ 'contains' in scope\n        if !contains(vowels, str) {\n            ^~~~~~~~\n\
    /tmp/tmp92kzmrkd.swift:21:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += str\n            \
    \          ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    \n\
    \    let vowels = \"aeiou\"\n    \n    var filteredText = text\n    \n    for\
    \ letter in text {\n        if !vowels.contains(letter) {\n            filteredText\
    \ = filteredText[..<filteredText.index(filteredText.startIndex, offsetBy: 1)]\n\
    \            break\n        }\n    }\n    \n    return filteredText\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmplzsd49oh.swift:21:40: error: cannot assign value of type 'String.SubSequence'\
    \ (aka 'Substring') to type 'String'\n            filteredText = filteredText[..<filteredText.index(filteredText.startIndex,\
    \ offsetBy: 1)]\n                           ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \                           String(                                          \
    \                        )\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ removeChars(text, remove_vowels)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpip3vw8a4.swift:14:12: error: cannot find 'removeChars' in scope\n\
    \    return removeChars(text, remove_vowels)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\treturn\
    \ text.filter { (c: Character)  in ('a','e','i','o','u') }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp0_hfh3ex.swift:14:43: error: single-quoted string literal found,\
    \ use '\"'\n        return text.filter { (c: Character)  in ('a','e','i','o','u')\
    \ }\n                                                 ^~~\n                  \
    \                               \"a\"\n/tmp/tmp0_hfh3ex.swift:14:47: error: single-quoted\
    \ string literal found, use '\"'\n        return text.filter { (c: Character)\
    \  in ('a','e','i','o','u') }\n                                              \
    \       ^~~\n                                                     \"e\"\n/tmp/tmp0_hfh3ex.swift:14:51:\
    \ error: single-quoted string literal found, use '\"'\n        return text.filter\
    \ { (c: Character)  in ('a','e','i','o','u') }\n                             \
    \                            ^~~\n                                           \
    \              \"i\"\n/tmp/tmp0_hfh3ex.swift:14:55: error: single-quoted string\
    \ literal found, use '\"'\n        return text.filter { (c: Character)  in ('a','e','i','o','u')\
    \ }\n                                                             ^~~\n      \
    \                                                       \"o\"\n/tmp/tmp0_hfh3ex.swift:14:59:\
    \ error: single-quoted string literal found, use '\"'\n        return text.filter\
    \ { (c: Character)  in ('a','e','i','o','u') }\n                             \
    \                                    ^~~\n                                   \
    \                              \"u\"\n/tmp/tmp0_hfh3ex.swift:14:42: error: cannot\
    \ convert value of type '(String, String, String, String, String)' to closure\
    \ result type 'Bool'\n        return text.filter { (c: Character)  in ('a','e','i','o','u')\
    \ }\n                                                ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    guard\
    \ let text = text.unicodeScalars.filter { $0.isLetter() }\n        else { return\
    \ text }\n    return String(text.prefix(text.startIndex.successor()))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp4ofk1yhc.swift:14:49: error: expected 'else' after 'guard' condition\n\
    \    guard let text = text.unicodeScalars.filter { $0.isLetter() }\n         \
    \                                       ^\n                                  \
    \              else \n/tmp/tmp4ofk1yhc.swift:14:51: error: anonymous closure argument\
    \ not contained in a closure\n    guard let text = text.unicodeScalars.filter\
    \ { $0.isLetter() }\n                                                  ^\n/tmp/tmp4ofk1yhc.swift:15:9:\
    \ error: expected expression\n        else { return text }\n        ^\n/tmp/tmp4ofk1yhc.swift:14:11:\
    \ error: initializer for conditional binding must have Optional type, not '((Unicode.Scalar)\
    \ throws -> Bool) throws -> String.UnicodeScalarView'\n    guard let text = text.unicodeScalars.filter\
    \ { $0.isLetter() }\n          ^          ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4ofk1yhc.swift:16:24:\
    \ error: value of type '((Unicode.Scalar) throws -> Bool) throws -> String.UnicodeScalarView'\
    \ has no member 'prefix'\n    return String(text.prefix(text.startIndex.successor()))\n\
    \                  ~~~~ ^~~~~~\n/tmp/tmp4ofk1yhc.swift:16:36: error: value of\
    \ type '((Unicode.Scalar) throws -> Bool) throws -> String.UnicodeScalarView'\
    \ has no member 'startIndex'\n    return String(text.prefix(text.startIndex.successor()))\n\
    \                              ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ removeVowels(text.unicodeScalars.reduce(text.replacingOccurrences(of: \"\\u{0000}\"\
    , with: \"\")))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpe7mfxicl.swift:14:12: error: cannot find 'removeVowels' in scope\n\
    \    return removeVowels(text.unicodeScalars.reduce(text.replacingOccurrences(of:\
    \ \"\\u{0000}\", with: \"\")))\n           ^~~~~~~~~~~~\n/tmp/tmpe7mfxicl.swift:14:103:\
    \ error: missing argument for parameter #2 in call\n    return removeVowels(text.unicodeScalars.reduce(text.replacingOccurrences(of:\
    \ \"\\u{0000}\", with: \"\")))\n                                             \
    \                                                         ^\n                \
    \                                                                            \
    \          , <#(_, Unicode.Scalar) throws -> _#>\nSwift.Sequence:2:28: note: 'reduce'\
    \ declared here\n    @inlinable public func reduce<Result>(_ initialResult: Result,\
    \ _ nextPartialResult: (_ partialResult: Result, Self.Element) throws -> Result)\
    \ rethrows -> Result\n                           ^\n/tmp/tmpe7mfxicl.swift:14:57:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n    return\
    \ removeVowels(text.unicodeScalars.reduce(text.replacingOccurrences(of: \"\\u{0000}\"\
    , with: \"\")))\n                                                   ~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tvar\
    \ result String = \"\"\n\tfor _, char := range text {\n\t\tif is_vowel(text.rune(char))\
    \ {\n\t\t\tresult += char\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpxtu4zim5.swift:14:13: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n        var result String\
    \ = \"\"\n                   ^\n/tmp/tmpxtu4zim5.swift:14:13: note: join the identifiers\
    \ together\n        var result String = \"\"\n            ~~~~~~~^~~~~~\n    \
    \        resultString\n/tmp/tmpxtu4zim5.swift:15:7: error: expected 'in' after\
    \ for-each pattern\n        for _, char := range text {\n             ^\n/tmp/tmpxtu4zim5.swift:15:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, char :=\
    \ range text {\n             ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tlet\
    \ pattern = NSRegularExpression.escapedPattern(for: \"[aAeEiIoOuU]\")\n\treturn\
    \ text.stringByReplacingMatches(in: text, options: [], range: NSMakeRange(0, text.utf16Count),\
    \ withTemplate: \"\")\n\t\t.replacingOccurrences(of: pattern, with: \"\", options:\
    \ [], range: nil)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp_h_ino3o.swift:14:16: error: cannot find 'NSRegularExpression'\
    \ in scope\n        let pattern = NSRegularExpression.escapedPattern(for: \"[aAeEiIoOuU]\"\
    )\n                      ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_h_ino3o.swift:15:69: error:\
    \ cannot find 'NSMakeRange' in scope\n        return text.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.utf16Count), withTemplate: \"\"\
    )\n                                                                          \
    \ ^~~~~~~~~~~\n/tmp/tmp_h_ino3o.swift:15:14: error: value of type 'String' has\
    \ no member 'stringByReplacingMatches'\n        return text.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.utf16Count), withTemplate: \"\"\
    )\n               ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_h_ino3o.swift:15:89:\
    \ error: value of type 'String' has no member 'utf16Count'\n        return text.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.utf16Count), withTemplate: \"\"\
    )\n                                                                          \
    \                ~~~~ ^~~~~~~~~~\n/tmp/tmp_h_ino3o.swift:16:68: error: 'nil' requires\
    \ a contextual type\n                .replacingOccurrences(of: pattern, with:\
    \ \"\", options: [], range: nil)\n                                           \
    \                                      ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text.IsEmpty() {\n        return text\n    }\n\n    let vowels: [String] = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    return text.filter { !vowels.contains($0)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") ==\
    \ \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpdgmegtl8.swift:14:13: error: value of type 'String' has no member\
    \ 'IsEmpty'\n    if text.IsEmpty() {\n       ~~~~ ^~~~~~~\n/tmp/tmpdgmegtl8.swift:19:43:\
    \ error: cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'String'\n    return text.filter { !vowels.contains($0) }\n  \
    \                                        ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ string(\n        text,\n        removeSubstring: removeSubstring(\"aeiouAEIOU\"\
    , options: .caseInsensitive),\n        options: .caseInsensitive\n    )\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpu7cdkr4c.swift:14:12: error: cannot find 'string' in scope\n  \
    \  return string(\n           ^~~~~~\n/tmp/tmpu7cdkr4c.swift:16:26: error: cannot\
    \ find 'removeSubstring' in scope\n        removeSubstring: removeSubstring(\"\
    aeiouAEIOU\", options: .caseInsensitive),\n                         ^~~~~~~~~~~~~~~\n\
    /tmp/tmpu7cdkr4c.swift:16:66: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n        removeSubstring: removeSubstring(\"aeiouAEIOU\"\
    , options: .caseInsensitive),\n                                              \
    \                  ~^~~~~~~~~~~~~~~\n/tmp/tmpu7cdkr4c.swift:17:19: error: cannot\
    \ infer contextual base in reference to member 'caseInsensitive'\n        options:\
    \ .caseInsensitive\n                 ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\treturn\
    \ remove_vowels_internal(text)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpdp7c82kr.swift:14:9: error: cannot find 'remove_vowels_internal'\
    \ in scope\n        return remove_vowels_internal(text)\n               ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" {\n        return \"\"\n    }\n    var result = \"\"\n    for ch\
    \ in text {\n        if !hasVowel(ch) {\n            result += ch\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp_u_d40pv.swift:19:13: error: cannot find 'hasVowel' in scope\n\
    \        if !hasVowel(ch) {\n            ^~~~~~~~\n/tmp/tmp_u_d40pv.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += ch\n                      ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ filtered = text.filter {\n        !self.isVowel($0)\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpd0n2r3e_.swift:15:10: error: cannot find 'self' in scope; did you\
    \ mean to use it in a type or extension context?\n        !self.isVowel($0)\n\
    \         ^~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    text.makeLower()\n\
    \    if let vowels = Vowels {\n        let filteredText = text.filter {\n    \
    \        vowels.contains($0)\n        }\n        return filteredText\n    }\n\
    \    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmptyrwjvw9.swift:14:10: error: value of type 'String' has no member\
    \ 'makeLower'\n    text.makeLower()\n    ~~~~ ^~~~~~~~~\n/tmp/tmptyrwjvw9.swift:15:21:\
    \ error: cannot find 'Vowels' in scope\n    if let vowels = Vowels {\n       \
    \             ^~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\thas_vowels\
    \ := false\n\tfor _, r := range text {\n\t\tif r == 'a' || r == 'e' || r == 'i'\
    \ || r == 'o' || r == 'u' {\n\t\t\thas_vowels = true\n\t\t\tcontinue\n\t\t}\n\t\
    \tif has_vowels {\n\t\t\treturn string([]rune(text)[0 : len(text)-1])\n\t\t}\n\
    \t}\n\treturn string(text)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp_puvgezm.swift:14:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        has_vowels := false\n                  ^\n    \
    \              ;\n/tmp/tmp_puvgezm.swift:14:13: error: expected expression\n \
    \       has_vowels := false\n                   ^\n/tmp/tmp_puvgezm.swift:15:7:\
    \ error: expected 'in' after for-each pattern\n        for _, r := range text\
    \ {\n             ^\n/tmp/tmp_puvgezm.swift:15:7: error: expected Sequence expression\
    \ for for-each loop\n        for _, r := range text {\n             ^\n/tmp/tmp_puvgezm.swift:16:11:\
    \ error: single-quoted string literal found, use '\"'\n                if r ==\
    \ 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u' {\n                    \
    \    ^~~\n                        \"a\"\n/tmp/tmp_puvgezm.swift:16:23: error:\
    \ single-quoted string literal found, use '\"'\n                if r == 'a' ||\
    \ r == 'e' || r == 'i' || r == 'o' || r == 'u' {\n                           \
    \         ^~~\n                                    \"e\"\n/tmp/tmp_puvgezm.swift:16:35:\
    \ error: single-quoted string literal found, use '\"'\n                if r ==\
    \ 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u' {\n                    \
    \                            ^~~\n                                           \
    \     \"i\"\n/tmp/tmp_puvgezm.swift:16:47: error: single-quoted string literal\
    \ found, use '\"'\n                if r == 'a' || r == 'e' || r == 'i' || r ==\
    \ 'o' || r == 'u' {\n                                                        \
    \    ^~~\n                                                            \"o\"\n\
    /tmp/tmp_puvgezm.swift:16:59: error: single-quoted string literal found, use '\"\
    '\n                if r == 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u'\
    \ {\n                                                                        ^~~\n\
    \                                                                        \"u\"\
    \n/tmp/tmp_puvgezm.swift:21:20: error: expected ',' separator\n              \
    \          return string([]rune(text)[0 : len(text)-1])\n                    \
    \                    ^\n                                        ,"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ lowercaseText = text.lowercased()\n    let vowels = CharacterSet.vowels\n  \
    \  var result = \"\"\n    if lowercaseText.count > 0 {\n        if let index =\
    \ lowercaseText.rangeOfCharacter(from: vowels) {\n            if let first = lowercaseText.index(before:\
    \ index) {\n                result = lowercaseText[first..<lowercaseText.endIndex]\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpeaye0fcd.swift:15:18: error: cannot find 'CharacterSet' in scope\n\
    \    let vowels = CharacterSet.vowels\n                 ^~~~~~~~~~~~\n/tmp/tmpeaye0fcd.swift:18:38:\
    \ error: value of type 'String' has no member 'rangeOfCharacter'\n        if let\
    \ index = lowercaseText.rangeOfCharacter(from: vowels) {\n                   \
    \    ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpeaye0fcd.swift:20:39: error: cannot\
    \ assign value of type 'Substring' to type 'String'\n                result =\
    \ lowercaseText[first..<lowercaseText.endIndex]\n                         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \                         String(                                      )\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let lowercase = text.lowercased()\n    let result\
    \ = (lowercase as NSString).componentsSeparatedByString(String(vowels)).joined()\n\
    \    return result + (result.characters.count > 0 ? String(\" \") : \"\")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp9n08p2w_.swift:16:32: error: cannot find type 'NSString' in scope\n\
    \    let result = (lowercase as NSString).componentsSeparatedByString(String(vowels)).joined()\n\
    \                               ^~~~~~~~\n/tmp/tmp9n08p2w_.swift:16:42: error:\
    \ value of type 'String' has no member 'componentsSeparatedByString'\n    let\
    \ result = (lowercase as NSString).componentsSeparatedByString(String(vowels)).joined()\n\
    \                 ~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = text\n    for _, letter := range text {\n        if letter == vowels[0]\
    \ {\n            result = result.substring(1)\n        } else if letter == vowels[1]\
    \ {\n            result = result.substring(1, 2)\n        } else if letter ==\
    \ vowels[2] {\n            result = result.substring(1, 2)\n        } else if\
    \ letter == vowels[3] {\n            result = result.substring(1, 2)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmprkfg52rg.swift:15:10: error: expected 'in' after for-each pattern\n\
    \    for _, letter := range text {\n         ^\n/tmp/tmprkfg52rg.swift:15:10:\
    \ error: expected Sequence expression for for-each loop\n    for _, letter :=\
    \ range text {\n         ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tlet\
    \ alphabet = CharacterSet.init(charactersIn: \"aeiouyAEIOUY\")\n\treturn String(text.filter\
    \ { !alphabet.contains($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpc8smh0_k.swift:14:17: error: cannot find 'CharacterSet' in scope\n\
    \        let alphabet = CharacterSet.init(charactersIn: \"aeiouyAEIOUY\")\n  \
    \                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\treturn\
    \ removeVowels(text)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmptsoxlnvc.swift:14:9: error: cannot find 'removeVowels' in scope\n\
    \        return removeVowels(text)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ charToRemove = CharacterSet(\"aeiou\").inverted()\n    return text.filter{ !charToRemove[$0]\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") ==\
    \ \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpx4lcwrmz.swift:14:24: error: cannot find 'CharacterSet' in scope\n\
    \    let charToRemove = CharacterSet(\"aeiou\").inverted()\n                 \
    \      ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result : String = text\n    for char in text.reverse() {\n        switch char\
    \ {\n        case 'a':\n        case \"e\":\n        case \"i\":\n        case\
    \ \"o\":\n        case \"u\":\n            result += char\n        default:\n\
    \            break\n        }\n    }\n    return result.reverse()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpn8pdv93r.swift:17:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpn8pdv93r.swift:17:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'a':\n        ^~~~~~~~~\n                  break\n/tmp/tmpn8pdv93r.swift:18:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpn8pdv93r.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpn8pdv93r.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpn8pdv93r.swift:15:22:\
    \ error: value of type 'String' has no member 'reverse'\n    for char in text.reverse()\
    \ {\n                ~~~~ ^~~~~~~\n/tmp/tmpn8pdv93r.swift:27:19: error: value\
    \ of type 'String' has no member 'reverse'\n    return result.reverse()\n    \
    \       ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter {\n        guard let c = self.character(for: $0) else { return false\
    \ }\n        return !vowels.contains(c)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpjeo6accm.swift:15:23: error: cannot find 'self' in scope; did you\
    \ mean to use it in a type or extension context?\n        guard let c = self.character(for:\
    \ $0) else { return false }\n                      ^~~~\n/tmp/tmpjeo6accm.swift:16:17:\
    \ error: cannot find 'vowels' in scope\n        return !vowels.contains(c)\n \
    \               ^~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" {\n        return text\n    }\n\n    var result = [String]()\n\n\
    \    for c in text {\n        if !contains_vowel(c) {\n            result.append(c)\n\
    \        }\n    }\n\n    return String(result)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpsu67gf8r.swift:21:13: error: cannot find 'contains_vowel' in scope\n\
    \        if !contains_vowel(c) {\n            ^~~~~~~~~~~~~~\n/tmp/tmpsu67gf8r.swift:22:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result.append(c)\n                          ^\n/tmp/tmpsu67gf8r.swift:26:12:\
    \ error: no exact matches in call to initializer \n    return String(result)\n\
    \           ^\nSwift.String:4:12: note: candidate requires that the types 'String'\
    \ and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')\n\
    \    public init<S>(_ characters: S) where S : Sequence, S.Element == Character\n\
    \           ^\nSwift.RangeReplaceableCollection:3:23: note: candidate requires\
    \ that the types 'String.Element' (aka 'Character') and 'String' be equivalent\
    \ (requirement specified as 'Self.Element' == 'S.Element')\n    @inlinable public\
    \ init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element\n     \
    \                 ^\nSwift.String:2:12: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(describing:)')\n    public init<Subject>(describing instance:\
    \ Subject)\n           ^\nSwift.String:3:23: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(describing:)')\n    @inlinable public init<Subject>(describing\
    \ instance: Subject) where Subject : CustomStringConvertible\n               \
    \       ^\nSwift.String:6:12: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(reflecting:)')\n    public init<Subject>(reflecting subject: Subject)\n\
    \           ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\treturn\
    \ text.filter() {\n\t\t$0.unicodeScalars.filter() {\n\t\t\t$0.value > UnicodeScalar('a')\n\
    \t\t\t\t&& $0.value <= UnicodeScalar('z')\n\t\t}\n\t}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp1bv3z1im.swift:16:29: error: single-quoted string literal found,\
    \ use '\"'\n                        $0.value > UnicodeScalar('a')\n          \
    \                                       ^~~\n                                \
    \                 \"a\"\n/tmp/tmp1bv3z1im.swift:17:34: error: single-quoted string\
    \ literal found, use '\"'\n                                && $0.value <= UnicodeScalar('z')\n\
    \                                                             ^~~\n          \
    \                                                   \"z\"\n/tmp/tmp1bv3z1im.swift:16:13:\
    \ error: operator function '>' requires that 'UnicodeScalar' (aka 'Unicode.Scalar')\
    \ conform to 'BinaryInteger'\n                        $0.value > UnicodeScalar('a')\n\
    \                                 ^\nSwift.BinaryInteger:7:24: note: where 'Other'\
    \ = 'UnicodeScalar' (aka 'Unicode.Scalar')\n    public static func > <Other>(lhs:\
    \ Self, rhs: Other) -> Bool where Other : BinaryInteger\n                    \
    \   ^\n/tmp/tmp1bv3z1im.swift:17:17: error: operator function '<=' requires that\
    \ 'UnicodeScalar' (aka 'Unicode.Scalar') conform to 'BinaryInteger'\n        \
    \                        && $0.value <= UnicodeScalar('z')\n                 \
    \                           ^\nSwift.BinaryInteger:5:24: note: where 'Other' =\
    \ 'UnicodeScalar' (aka 'Unicode.Scalar')\n    public static func <= <Other>(lhs:\
    \ Self, rhs: Other) -> Bool where Other : BinaryInteger\n                    \
    \   ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ strings.Map(remove_vowels_fn, text)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpwir3m3f5.swift:14:12: error: cannot find 'strings' in scope\n \
    \   return strings.Map(remove_vowels_fn, text)\n           ^~~~~~~\n/tmp/tmpwir3m3f5.swift:14:24:\
    \ error: cannot find 'remove_vowels_fn' in scope\n    return strings.Map(remove_vowels_fn,\
    \ text)\n                       ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ let text = text,\n        let vowels = CharacterSet.vowels {\n        return\
    \ text.filter {\n            return !vowels.contains($0)\n        }\n    }\n \
    \   return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpplrlj2wa.swift:15:22: error: cannot find 'CharacterSet' in scope\n\
    \        let vowels = CharacterSet.vowels {\n                     ^~~~~~~~~~~~\n\
    /tmp/tmpplrlj2wa.swift:14:8: error: initializer for conditional binding must have\
    \ Optional type, not 'String'\n    if let text = text,\n       ^          ~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    text\
    \ = remove_pattern(text, \"aeiouy\")\n    text = remove_pattern(text, \"AEIOUY\"\
    )\n    text = remove_pattern(text, \"aEiOuY\")\n    text = remove_pattern(text,\
    \ \"AEiouy\")\n    text = remove_pattern(text, \"AEiouy\")\n    text = remove_pattern(text,\
    \ \"aEiouy\")\n    text = remove_pattern(text, \"AEiouy\")\n    text = remove_pattern(text,\
    \ \"aEiuy\")\n    text = remove_pattern(text, \"AEiuy\")\n    text = remove_pattern(text,\
    \ \"AEiuy\")\n    text = remove_pattern(text, \"aEiuy\")\n    text = remove_pattern(text,\
    \ \"AEiuy\")\n    text = remove_pattern(text, \"AEiuy\")\n    text = remove_pattern(text,\
    \ \"AEiuy\")\n    text = remove_pattern(text, \"AEiuy\")\n    text = remove_pattern(text,\
    \ \"aEiuy\")\n    text = remove_pattern(text, \"AEiuy\")\n    text = remove_pattern(text,\
    \ \"AEiuy\")\n    text = remove_pattern(text, \"AEiuy\")\n    text = remove_pattern(text,\
    \ \"AEiuy\")\n    text = remove_pattern(text, \"AEiuy\")\n    text = remove_pattern(text,\
    \ \"aEiuy\")\n    text = remove_pattern(text, \"AEiuy\")\n    text = remove_pattern(text,\
    \ \"AEiuy\")\n    text = remove_pattern(text, \"AEiuy\")\n    text = remove_pattern(text,\
    \ \"AEiuy\")\n    text = remove_pattern(text, \"AEiuy\")\n    text = remove_pattern(text,\
    \ \"aeiuy\")\n    text = remove_pattern(text, \"aeiuy\")\n    text = remove_pattern(text,\
    \ \"aeiuy\")\n    text = remove_pattern(text, \"aeiuy\")\n    text = remove_pattern(text,\
    \ \"aeiuy\")\n    text = remove_pattern(text, \"aeiuy\")\n    text = remove_pattern(text,\
    \ \"aeiuy\")\n    text = remove_pattern(text, \"aeiuy\")\n    text = remove_pattern(text,\
    \ \"AEiuy\")\n    text = remove_pattern(text, \"aeiuy\")\n    text = remove_pattern(text,\
    \ \"AEiuy\")\n    text = remove_pattern(text, \"aeiuy\")\n    text = remove_pattern(text,\
    \ \"AEiuy\")\n    text = remove_pattern(text, \"aeiuy\")\n    text = remove_pattern(text,\
    \ \"AEiuy\")\n    text = remove_pattern(text, \"AEiuy\")\n    text = remove_pattern(text,\
    \ \"AEiuy\")\n    text = remove_pattern(text, \"aeiuy\")\n    text = remove_pattern(text,\
    \ \"AEiuy\")\n    text = remove_pattern\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpvrafzgzi.swift:14:12: error: cannot find 'remove_pattern' in scope\n\
    \    text = remove_pattern(text, \"aeiouy\")\n           ^~~~~~~~~~~~~~\n/tmp/tmpvrafzgzi.swift:14:5:\
    \ error: cannot assign to value: 'text' is a 'let' constant\n    text = remove_pattern(text,\
    \ \"aeiouy\")\n    ^~~~\n/tmp/tmpvrafzgzi.swift:15:12: error: cannot find 'remove_pattern'\
    \ in scope\n    text = remove_pattern(text, \"AEIOUY\")\n           ^~~~~~~~~~~~~~\n\
    /tmp/tmpvrafzgzi.swift:15:5: error: cannot assign to value: 'text' is a 'let'\
    \ constant\n    text = remove_pattern(text, \"AEIOUY\")\n    ^~~~\n/tmp/tmpvrafzgzi.swift:16:12:\
    \ error: cannot find 'remove_pattern' in scope\n    text = remove_pattern(text,\
    \ \"aEiOuY\")\n           ^~~~~~~~~~~~~~\n/tmp/tmpvrafzgzi.swift:16:5: error:\
    \ cannot assign to value: 'text' is a 'let' constant\n    text = remove_pattern(text,\
    \ \"aEiOuY\")\n    ^~~~\n/tmp/tmpvrafzgzi.swift:17:12: error: cannot find 'remove_pattern'\
    \ in scope\n    text = remove_pattern(text, \"AEiouy\")\n           ^~~~~~~~~~~~~~\n\
    /tmp/tmpvrafzgzi.swift:17:5: error: cannot assign to value: 'text' is a 'let'\
    \ constant\n    text = remove_pattern(text, \"AEiouy\")\n    ^~~~\n/tmp/tmpvrafzgzi.swift:18:12:\
    \ error: cannot find 'remove_pattern' in scope\n    text = remove_pattern(text,\
    \ \"AEiouy\")\n           ^~~~~~~~~~~~~~\n/tmp/tmpvrafzgzi.swift:18:5: error:\
    \ cannot assign to value: 'text' is a 'let' constant\n    text = remove_pattern(text,\
    \ \"AEiouy\")\n    ^~~~\n/tmp/tmpvrafzgzi.swift:19:12: error: cannot find 'remove_pattern'\
    \ in scope\n    text = remove_pattern(text, \"aEiouy\")\n           ^~~~~~~~~~~~~~\n\
    /tmp/tmpvrafzgzi.swift:19:5: error: cannot assign to value: 'text' is a 'let'\
    \ constant\n    text = remove_pattern(text, \"aEiouy\")\n    ^~~~\n/tmp/tmpvrafzgzi.swift:20:12:\
    \ error: cannot find 'remove_pattern' in scope\n    text = remove_pattern(text,\
    \ \"AEiouy\")\n           ^~~~~~~~~~~~~~\n/tmp/tmpvrafzgzi.swift:20:5: error:\
    \ cannot assign to value: 'text' is a 'let' constant\n    text = remove_pattern(text,\
    \ \"AEiouy\")\n    ^~~~\n/tmp/tmpvrafzgzi.swift:21:12: error: cannot find 'remove_pattern'\
    \ in scope\n    te"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" { return text }\n\n    text += String(Character(UnicodeScalar(0x0660))\
    \ /* six point five */)\n    for _, v := range vowels {\n        text = strings.Replace(text,\
    \ v, \"\", -1)\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpha00woec.swift:17:10: error: expected 'in' after for-each pattern\n\
    \    for _, v := range vowels {\n         ^\n/tmp/tmpha00woec.swift:17:10: error:\
    \ expected Sequence expression for for-each loop\n    for _, v := range vowels\
    \ {\n         ^\n/tmp/tmpha00woec.swift:16:10: error: left side of mutating operator\
    \ isn't mutable: 'text' is a 'let' constant\n    text += String(Character(UnicodeScalar(0x0660))\
    \ /* six point five */)\n    ~~~~ ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ removeVowels(text, isVowelized: true)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpxg21yap8.swift:14:12: error: cannot find 'removeVowels' in scope\n\
    \    return removeVowels(text, isVowelized: true)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    vowels.Range(text.RangeOfString(\"\
    \")).ForEach(text.Remove)\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp57ry4d2r.swift:14:5: error: cannot find 'vowels' in scope\n   \
    \ vowels.Range(text.RangeOfString(\"\")).ForEach(text.Remove)\n    ^~~~~~\n/tmp/tmp57ry4d2r.swift:14:23:\
    \ error: value of type 'String' has no member 'RangeOfString'\n    vowels.Range(text.RangeOfString(\"\
    \")).ForEach(text.Remove)\n                 ~~~~ ^~~~~~~~~~~~~\n/tmp/tmp57ry4d2r.swift:14:55:\
    \ error: value of type 'String' has no member 'Remove'\n    vowels.Range(text.RangeOfString(\"\
    \")).ForEach(text.Remove)\n                                                 ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ removeVowels(textToCharArray(text))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpogz2j2xg.swift:14:12: error: cannot find 'removeVowels' in scope\n\
    \    return removeVowels(textToCharArray(text))\n           ^~~~~~~~~~~~\n/tmp/tmpogz2j2xg.swift:14:25:\
    \ error: cannot find 'textToCharArray' in scope\n    return removeVowels(textToCharArray(text))\n\
    \                        ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\treturn\
    \ removeVowels(text)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmptsoxlnvc.swift:14:9: error: cannot find 'removeVowels' in scope\n\
    \        return removeVowels(text)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    text.lowercased().removeAll(vowels)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpr6tsc_i3.swift:14:33: error: cannot find 'vowels' in scope\n  \
    \  text.lowercased().removeAll(vowels)\n                                ^~~~~~\n\
    /tmp/tmpr6tsc_i3.swift:14:23: error: no exact matches in call to instance method\
    \ 'removeAll'\n    text.lowercased().removeAll(vowels)\n                     \
    \ ^\n/tmp/tmpr6tsc_i3.swift:14:23: note: found candidate with type '(Bool) ->\
    \ ()'\n    text.lowercased().removeAll(vowels)\n                      ^\n/tmp/tmpr6tsc_i3.swift:14:23:\
    \ error: cannot convert return expression of type '()' to return type 'String'\n\
    \    text.lowercased().removeAll(vowels)\n    ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\treturn\
    \ text.filter {\n\t\t!is_vowel($0)\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp4_k2rbya.swift:15:4: error: cannot find 'is_vowel' in scope\n \
    \               !is_vowel($0)\n                 ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.unicodeScalars.filter{ !($0.isVowel()) }.map({ String($0) }).joinWithSeparator(\"\
    \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") ==\
    \ \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp10lk47nv.swift:14:45: error: value of type 'Unicode.Scalar' has\
    \ no member 'isVowel'\n    return text.unicodeScalars.filter{ !($0.isVowel())\
    \ }.map({ String($0) }).joinWithSeparator(\"\")\n                            \
    \             ~~ ^~~~~~~\n/tmp/tmp10lk47nv.swift:14:78: error: value of type '[String]'\
    \ has no member 'joinWithSeparator'\n    return text.unicodeScalars.filter{ !($0.isVowel())\
    \ }.map({ String($0) }).joinWithSeparator(\"\")\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ remove_vowels(text, locale: nil)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpxjjg4ifa.swift:14:40: error: extra argument 'locale' in call\n\
    \    return remove_vowels(text, locale: nil)\n                        ~~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpxjjg4ifa.swift:14:40: error: 'nil' requires a contextual type\n    return\
    \ remove_vowels(text, locale: nil)\n                                       ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text\n        .unicodeScalars\n        .filter({ $0.value > 0x0041 })\n    \
    \    .map({ $0.value })\n        .joinWithSeparator(\"\")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpnf78w8dz.swift:18:10: error: value of type '[UInt32]' has no member\
    \ 'joinWithSeparator'\n        .joinWithSeparator(\"\")\n         ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    \n\
    \    // TODO: Complete this function\n    \n    return text\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpbmmm9_zj/tmpbmmm9_zj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75b5a3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75b5734b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75b5734988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75b57337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbmmm9_zj                        0x00005623c91003f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b75b5c29460 __libc_start_main +
    245

    6    tmpbmmm9_zj                        0x00005623c90fff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    var index = 0\n    for letter in text {\n        if !is_vowel(letter)\
    \ {\n            result = (result + string(text[index:]))\n        }\n       \
    \ index++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpdczjgtff.swift:18:50: error: expected expression in list of expressions\n\
    \            result = (result + string(text[index:]))\n                      \
    \                           ^\n/tmp/tmpdczjgtff.swift:17:13: error: cannot find\
    \ 'is_vowel' in scope\n        if !is_vowel(letter) {\n            ^~~~~~~~\n\
    /tmp/tmpdczjgtff.swift:18:32: error: cannot find 'string' in scope\n         \
    \   result = (result + string(text[index:]))\n                               ^~~~~~\n\
    /tmp/tmpdczjgtff.swift:18:50: error: missing argument for parameter #1 in call\n\
    \            result = (result + string(text[index:]))\n                      \
    \                           ^\n                                              \
    \   <#String.Index#>\nSwift.String:12:12: note: 'subscript(_:)' declared here\n\
    \    public subscript(i: String.Index) -> Character { get }\n           ^\n/tmp/tmpdczjgtff.swift:20:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.fold(\"\") {\n        String($0.filter { $0 != \"aeiou\" })\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpx3__ifzx.swift:14:17: error: value of type 'String' has no member\
    \ 'fold'\n    return text.fold(\"\") {\n           ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659978734
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter {\n        !contains(vow, $0)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp18c1_iya.swift:15:10: error: cannot find 'contains' in scope\n\
    \        !contains(vow, $0)\n         ^~~~~~~~\n/tmp/tmp18c1_iya.swift:15:19:\
    \ error: cannot find 'vow' in scope\n        !contains(vow, $0)\n            \
    \      ^~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ resultString = String()\n    for char in text {\n        if char in vowels {\n\
    \            resultString = resultString + char\n        }\n    }\n    return\
    \ resultString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpxliw3c7e.swift:16:17: error: expected '{' after 'if' condition\n\
    \        if char in vowels {\n                ^\n/tmp/tmpxliw3c7e.swift:16:12:\
    \ error: cannot convert value of type 'Character' to expected condition type 'Bool'\n\
    \        if char in vowels {\n           ^~~~\n/tmp/tmpxliw3c7e.swift:17:43: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            resultString = resultString + char\n                            \
    \              ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    for c in text.unicodeScalars {\n        switch c {\n    \
    \    case \"a\":\n            result += \"aeiou\"\n        case \"e\":\n     \
    \       result += \"AEIOU\"\n        case \"i\":\n            result += \"aiou\"\
    \n        case \"o\":\n            result += \"AIOU\"\n        case \"u\":\n \
    \           result += \"iou\"\n        default:\n            result += c\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpkr7dwz7v.swift:28:20: error: operator function '+=' requires that\
    \ 'Unicode.Scalar' conform to 'Sequence'\n            result += c\n          \
    \         ^\nSwift.RangeReplaceableCollection:4:35: note: where 'Other' = 'Unicode.Scalar'\n\
    \    @inlinable public static func += <Other>(lhs: inout Self, rhs: Other) where\
    \ Other : Sequence, Self.Element == Other.Element\n                          \
    \        ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    text.filter\
    \ { (c) -> Bool in\n        return vowels.contains(c)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpfpsxb9ac.swift:15:16: error: cannot find 'vowels' in scope\n  \
    \      return vowels.contains(c)\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" {\n        return text\n    }\n    \n    var letters: String =\
    \ \"\"\n    var i: Int\n    for i = 0; i < text.count; i++ {\n        if vowelsSet.contains(text[i])\
    \ {\n            letters += String(text[i])\n        }\n    }\n    return letters\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpq6gwlzps.swift:20:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 0; i < text.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\ttext\
    \ = normalizeText(text)\n\treturn removeVowels(text)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp1k29c8tu.swift:14:9: error: cannot find 'normalizeText' in scope\n\
    \        text = normalizeText(text)\n               ^~~~~~~~~~~~~\n/tmp/tmp1k29c8tu.swift:14:2:\
    \ error: cannot assign to value: 'text' is a 'let' constant\n        text = normalizeText(text)\n\
    \        ^~~~\n/tmp/tmp1k29c8tu.swift:15:9: error: cannot find 'removeVowels'\
    \ in scope\n        return removeVowels(text)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tif\
    \ text == \"\" {\n\t\treturn \"\"\n\t}\n\tresult := \"\"\n\tfor _, c := range\
    \ text {\n\t\tif !strings.ContainsAny(c, \"aeiou\") {\n\t\t\tresult += c\n\t\t\
    }\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpqqqxosxj.swift:17:8: error: consecutive statements on a line must\
    \ be separated by ';'\n        result := \"\"\n              ^\n             \
    \ ;\n/tmp/tmpqqqxosxj.swift:17:9: error: expected expression\n        result :=\
    \ \"\"\n               ^\n/tmp/tmpqqqxosxj.swift:18:7: error: expected 'in' after\
    \ for-each pattern\n        for _, c := range text {\n             ^\n/tmp/tmpqqqxosxj.swift:18:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, c := range\
    \ text {\n             ^\n/tmp/tmpqqqxosxj.swift:17:2: error: cannot find 'result'\
    \ in scope\n        result := \"\"\n        ^~~~~~\n/tmp/tmpqqqxosxj.swift:23:9:\
    \ error: cannot find 'result' in scope\n        return result\n              \
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ resultText = text\n    for char in text.characters {\n        switch char {\n\
    \        case \"a\": resultText = \"\"\n        case \"A\": resultText = \"\"\n\
    \        case \"e\": resultText = \"\"\n        case \"E\": resultText = \"\"\n\
    \        case \"i\": resultText = \"\"\n        case \"I\": resultText = \"\"\n\
    \        case \"o\": resultText = \"\"\n        case \"O\": resultText = \"\"\n\
    \        case \"u\": resultText = \"\"\n        case \"U\": resultText = \"\"\n\
    \        case \"y\": resultText = \"\"\n        case \"Y\": resultText = \"\"\n\
    \        case \"\xE6\": resultText = \"\"\n        case \"\xF8\": resultText =\
    \ \"\"\n        case \"\xE5\": resultText = \"\"\n        default: break\n   \
    \     }\n    }\n    return resultText\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpodu5yzx9.swift:15:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in text.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter() {\n        switch $0 {\n        case \"a\", \"e\", \"i\", \"o\"\
    , \"u\":\n            return false\n        default:\n            return true\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpmpea1nib/tmpmpea1nib.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea34588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3427fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3427f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3427e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmpea1nib                        0x00005613b64b190b <unavailable> + 6411

    5    libc.so.6                          0x00002aea34774460 __libc_start_main +
    245

    6    tmpmpea1nib                        0x00005613b64b1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978734
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    text.unicodeScalars.filter\
    \ { !$0.isVoice }\n        .joinWithSeparator(\"\")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpdfv1lm7f.swift:15:10: error: reference to member 'joinWithSeparator'\
    \ cannot be resolved without a contextual type\n        .joinWithSeparator(\"\"\
    )\n         ^\n/tmp/tmpdfv1lm7f.swift:14:38: error: value of type 'Unicode.Scalar'\
    \ has no member 'isVoice'\n    text.unicodeScalars.filter { !$0.isVoice }\n  \
    \                                ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = text\n    for letter in result {\n        switch letter {\n       \
    \ case \"a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n\
    \        case \"u\":\n        case \"A\":\n        case \"E\":\n        case \"\
    I\":\n        case \"O\":\n        case \"U\":\n            continue // remove\
    \ it\n        default:\n            result = result.replace(letter, \"\")\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpddf5x8em.swift:17:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpddf5x8em.swift:18:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpddf5x8em.swift:19:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpddf5x8em.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpddf5x8em.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"u\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpddf5x8em.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"A\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpddf5x8em.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"E\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpddf5x8em.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"I\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpddf5x8em.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"O\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpddf5x8em.swift:29:29:\
    \ error: no exact matches in call to instance method 'replace'\n            result\
    \ = result.replace(letter, \"\")\n                            ^\n/tmp/tmpddf5x8em.swift:29:29:\
    \ note: found candidate with type '(Character, String, Int) -> ()'\n         \
    \   result = result.replace(letter, \"\")\n                            ^\n/tmp/tmpddf5x8em.swift:29:29:\
    \ error: cannot assign value of type '()' to type 'String'\n            result\
    \ = result.replace(letter, \"\")\n                     ~~~~~~~^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ strings.ReplaceAllString(text, replacements: vowels, with: \"\")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp0awald_q.swift:14:12: error: cannot find 'strings' in scope\n \
    \   return strings.ReplaceAllString(text, replacements: vowels, with: \"\")\n\
    \           ^~~~~~~\n/tmp/tmp0awald_q.swift:14:57: error: cannot find 'vowels'\
    \ in scope\n    return strings.ReplaceAllString(text, replacements: vowels, with:\
    \ \"\")\n                                                        ^~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n  return\
    \ text.filter { isVowel($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmprnl54w5v.swift:14:24: error: cannot find 'isVowel' in scope\n \
    \ return text.filter { isVowel($0) }\n                       ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    text.unicodeScalars.filter\
    \ { $0.value > 0x30 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpygti87d8.swift:14:25: error: no 'filter' candidates produce the\
    \ expected contextual result type 'String'\n    text.unicodeScalars.filter { $0.value\
    \ > 0x30 }\n                        ^\nSwift.RangeReplaceableCollection:3:40:\
    \ note: 'filter' produces 'String.UnicodeScalarView', not the expected contextual\
    \ result type 'String'\n    @inlinable public __consuming func filter(_ isIncluded:\
    \ (Self.Element) throws -> Bool) rethrows -> Self\n                          \
    \             ^\nSwift.Sequence:3:40: note: 'filter' produces '[Unicode.Scalar]',\
    \ not the expected contextual result type 'String'\n    @inlinable public __consuming\
    \ func filter(_ isIncluded: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659978734
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter({ $0 != \"a\" &&\n                            $0 != \"e\" &&\n \
    \                           $0 != \"i\" &&\n                            $0 !=\
    \ \"o\" &&\n                            $0 != \"u\" })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmp0nx0__k5/tmp0nx0__k5.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad42dbb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad42d8aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad42d8aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad42d8a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0nx0__k5                        0x0000561d07e1a90b <unavailable> + 6411

    5    libc.so.6                          0x00002ad42dd9f460 __libc_start_main +
    245

    6    tmp0nx0__k5                        0x0000561d07e1a109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978734
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ vowels = Set(\"aeiouy\")\n    if text.IsEmpty() {\n        return text\n   \
    \ }\n    var newText = \"\"\n    for _, b := range text {\n        if !vowels.Has(b)\
    \ {\n            newText += string(b)\n        }\n    }\n    return newText\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpznii51vr.swift:19:10: error: expected 'in' after for-each pattern\n\
    \    for _, b := range text {\n         ^\n/tmp/tmpznii51vr.swift:19:10: error:\
    \ expected Sequence expression for for-each loop\n    for _, b := range text {\n\
    \         ^\n/tmp/tmpznii51vr.swift:15:13: error: value of type 'String' has no\
    \ member 'IsEmpty'\n    if text.IsEmpty() {\n       ~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978734
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    text\
    \ = text.lowercased()\n    var result = text\n    for vowel in vowels {\n    \
    \    if let range = text.range(of: vowel) {\n            guard let start = text.index(text.startIndex,\
    \ offsetBy: range.upperBound)\n            else { continue }\n            guard\
    \ let end = text.index(text.startIndex, offsetBy: range.lowerBound)\n        \
    \    else { continue }\n            if text[start] == \"a\" || text[start] ==\
    \ \"e\" || text[start] == \"i\" ||\n                text[start] == \"o\" || text[start]\
    \ == \"u\" {\n                result =  result.substring(to: start)\n        \
    \    }\n            if text[end] == \"a\" || text[end] == \"e\" || text[end] ==\
    \ \"i\" ||\n                text[end] == \"o\" || text[end] == \"u\" {\n     \
    \           result =  result.substring(from: end)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpekc_todo.swift:14:5: error: cannot assign to value: 'text' is a\
    \ 'let' constant\n    text = text.lowercased()\n    ^~~~\n/tmp/tmpekc_todo.swift:16:18:\
    \ error: cannot find 'vowels' in scope\n    for vowel in vowels {\n          \
    \       ^~~~~~\n/tmp/tmpekc_todo.swift:17:29: error: value of type 'String' has\
    \ no member 'range'\n        if let range = text.range(of: vowel) {\n        \
    \               ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978734
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    guard\
    \ let vowels = (\"aA\", \"eE\", \"iI\", \"oO\", \"uU\"),\n        !text.isEmpty\
    \ else { return text }\n    let newText = removeFirstOccurrences(of: vowels, in:\
    \ text)\n    return newText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp64py3dzj.swift:14:11: error: initializer for conditional binding\
    \ must have Optional type, not '(String, String, String, String, String)'\n  \
    \  guard let vowels = (\"aA\", \"eE\", \"iI\", \"oO\", \"uU\"),\n          ^ \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp64py3dzj.swift:16:19: error:\
    \ cannot find 'removeFirstOccurrences' in scope\n    let newText = removeFirstOccurrences(of:\
    \ vowels, in: text)\n                  ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978734
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text == \"\" {\n        return \"\"\n    }\n    var newText = \"\"\n    let\
    \ arr = text.characters\n    for i in 0..<arr.count {\n        if arr[i] == \"\
    a\" || arr[i] == \"e\" || arr[i] == \"i\" || arr[i] == \"o\" || arr[i] == \"u\"\
    \ {\n            continue\n        } else {\n            newText += String(arr[i])\n\
    \        }\n    }\n    return newText\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpksib08m2.swift:18:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    let arr = text.characters\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpksib08m2.swift:20:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if arr[i] == \"a\" || arr[i] == \"e\" ||\
    \ arr[i] == \"i\" || arr[i] == \"o\" || arr[i] == \"u\" {\n           ^~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpksib08m2.swift:20:29:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if arr[i] == \"a\" || arr[i] == \"e\" ||\
    \ arr[i] == \"i\" || arr[i] == \"o\" || arr[i] == \"u\" {\n                  \
    \          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpksib08m2.swift:20:46: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ arr[i] == \"a\" || arr[i] == \"e\" || arr[i] == \"i\" || arr[i] == \"o\" ||\
    \ arr[i] == \"u\" {\n                                             ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpksib08m2.swift:20:63:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if arr[i] == \"a\" || arr[i] == \"e\" ||\
    \ arr[i] == \"i\" || arr[i] == \"o\" || arr[i] == \"u\" {\n                  \
    \                                            ^~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpksib08m2.swift:20:80: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript"
  stdout: ''
  timestamp: 1659978734
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\treturn\
    \ remove_vowels(text, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpd9xu1i42.swift:14:29: error: extra argument in call\n        return\
    \ remove_vowels(text, 0)\n                            ~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659978734
