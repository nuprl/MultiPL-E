language: swift
name: HumanEval_63_fibfib
results:
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fib = 0\n\
    \    var fib1 = 0\n\n    if n < 0 {\n        return -1\n    }\n\n    defer {\n\
    \        if n < 3 {\n            return\n        }\n        fib = fib1 + fib\n\
    \        fib1 = fib\n    }\n\n    for var i = 0; i < n; i++ {\n        fib +=\
    \ fib\n    }\n\n    return fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpg29slesw.swift:30:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpg29slesw.swift:24:13: error: 'return' cannot transfer control out of a\
    \ defer statement\n            return\n            ^\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\t// TODO: Fill out\
    \ some docs to show that fibfib(n) is the nth Fibbonacci number.\n\treturn 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp9sy_ehyx/tmp9sy_ehyx.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f5b13dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f5ae34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f5ae34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f5ae337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9sy_ehyx                        0x000055a4a764b1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b1f5b329460 __libc_start_main +
    245

    6    tmp9sy_ehyx                        0x000055a4a764ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: [[Int]]\
    \ = [[0]];\n    for i in 1..n {\n        fibfib.append(fibfib[i-1].dropLast()\
    \ + fibfib[i-2].dropLast() + fibfib[i-3].dropLast());\n    }\n    return fibfib[n-1];\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpp2tlzqqc.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..n {\n              ^~\n              ...\n\
    /tmp/tmpp2tlzqqc.swift:19:18: error: cannot convert return expression of type\
    \ '[Int]' to return type 'Int'\n    return fibfib[n-1];\n           ~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    let result: Int\
    \ = Int(fib(n - 1)) + Int(fib(n - 2)) + Int(fib(n - 3))\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmporhhg_ko.swift:15:27: error: cannot find 'fib' in scope\n    let\
    \ result: Int = Int(fib(n - 1)) + Int(fib(n - 2)) + Int(fib(n - 3))\n        \
    \                  ^~~\n/tmp/tmporhhg_ko.swift:15:45: error: cannot find 'fib'\
    \ in scope\n    let result: Int = Int(fib(n - 1)) + Int(fib(n - 2)) + Int(fib(n\
    \ - 3))\n                                            ^~~\n/tmp/tmporhhg_ko.swift:15:63:\
    \ error: cannot find 'fib' in scope\n    let result: Int = Int(fib(n - 1)) + Int(fib(n\
    \ - 2)) + Int(fib(n - 3))\n                                                  \
    \            ^~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  return _fibfib(n:\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpqyl1zi3z.swift:15:10: error: cannot find '_fibfib' in scope\n \
    \ return _fibfib(n: n)\n         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  assert(n >= 0 &&\
    \ n <= 100, \"fibfib(n) input must range in 0...100\")\n  // use an accumulator\
    \ to compute the nth fibfib\n  var fibfibAcc: Int = 0\n  for _ in 0..<n {\n  \
    \  fibfibAcc += fibfibAcc\n  }\n  return fibfibAcc\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpdgg1d_bh/tmpdgg1d_bh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cb9bc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cb98bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cb98bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cb98bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdgg1d_bh                        0x000056090441a3c8 <unavailable> + 5064

    5    libc.so.6                          0x00002b9cb9db2460 __libc_start_main +
    245

    6    tmpdgg1d_bh                        0x000056090441a079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn Int(Fibonacci(n\
    \ - 3))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp78iijtgh.swift:15:13: error: cannot find 'Fibonacci' in scope\n\
    \        return Int(Fibonacci(n - 3))\n                   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 1 + fibfib(n-1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpihw4l6ll.swift:15:23: error: missing argument label 'n:' in call\n\
    \    return 1 + fibfib(n-1)\n                      ^\n                      n:\
    \ \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 0 || n >=\
    \ Int32.max {\n    fatalError(\"fibfib: illegal fibfib number \\(n\\)\")\n  }\n\
    \  let fib: Dictionary<Int, Int> = [0: 0, 1: 0, 2: 1]\n  let prev: Dictionary<Int,\
    \ Int> = [0: 0, 1: 0, 2: 1]\n  let fibfib: Dictionary<Int, Int> = [0: 0, 1: 0,\
    \ 2: 1]\n  for i in 2..<n {\n    fibfib[i] = prev[i-2] + prev[i-1]\n    prev[i]\
    \ = fibfib[i]\n  }\n  return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpvlup9nq6.swift:16:50: error: expected ',' separator\n    fatalError(\"\
    fibfib: illegal fibfib number \\(n\\)\")\n                                   \
    \              ^\n                                                 ,\n/tmp/tmpvlup9nq6.swift:16:51:\
    \ error: expected expression path in Swift key path\n    fatalError(\"fibfib:\
    \ illegal fibfib number \\(n\\)\")\n                                         \
    \         ^\n/tmp/tmpvlup9nq6.swift:22:11: error: cannot assign through subscript:\
    \ 'fibfib' is a 'let' constant\n    fibfib[i] = prev[i-2] + prev[i-1]\n    ~~~~~~^\n\
    /tmp/tmpvlup9nq6.swift:20:3: note: change 'let' to 'var' to make it mutable\n\
    \  let fibfib: Dictionary<Int, Int> = [0: 0, 1: 0, 2: 1]\n  ^~~\n  var\n/tmp/tmpvlup9nq6.swift:22:21:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \    fibfib[i] = prev[i-2] + prev[i-1]\n                    ^\n/tmp/tmpvlup9nq6.swift:22:21:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    fibfib[i] = prev[i-2] + prev[i-1]\n                    ^\n      \
    \          (         ?? <#default value#>)\n/tmp/tmpvlup9nq6.swift:22:21: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \    fibfib[i] = prev[i-2] + prev[i-1]\n                    ^\n              \
    \           !\n/tmp/tmpvlup9nq6.swift:22:33: error: value of optional type 'Int?'\
    \ must be unwrapped to a value of type 'Int'\n    fibfib[i] = prev[i-2] + prev[i-1]\n\
    \                                ^\n/tmp/tmpvlup9nq6.swift:22:33: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \ fibfib[i] = prev[i-2] + prev[i-1]\n                                ^\n     \
    \                       (         ?? <#default value#>)\n/tmp/tmpvlup9nq6.swift:22:33:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    fibfib[i] = prev[i-2] + prev[i-1]\n                             \
    \   ^\n                                     !\n/tmp/tmpvlup9nq6.swift:23:9: error:\
    \ cannot assign through subscript: 'prev' is a 'let' constant\n    p"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n\
    \ == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpp9emx9ie.swift:21:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpp9emx9ie.swift:21:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpp9emx9ie.swift:21:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 2 {\n   \
    \ return 0\n  }\n\n  var result = 1\n\n  for _ in 2...n {\n    var fibfibResult\
    \ = result\n\n    for _ in 3...n {\n      fibfibResult += fibfibResult - 2\n \
    \   }\n\n    result = fibfibResult\n  }\n\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ad413181c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad412e78561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad412e78286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad412e7813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad412e77bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprukru8f3                        0x0000556c96cb083f <unavailable> + 6207

    6    tmprukru8f3                        0x0000556c96cb02cb <unavailable> + 4811

    7    libc.so.6                          0x00002ad41336d460 __libc_start_main +
    245

    8    tmprukru8f3                        0x0000556c96caffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n <= 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpbh4oy3uq.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpbh4oy3uq.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpbh4oy3uq.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009787
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n <= 2 {\n\
    \        return 0\n    }\n    if n == 3 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpy1ey2grm.swift:21:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpy1ey2grm.swift:21:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpy1ey2grm.swift:21:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\t// write your code\
    \ here\n\tswitch n {\n\tcase 0: return 0\n\tcase 1: return 1\n\tcase 2: return\
    \ 1\n\tcase 3: return 2\n\tdefault: return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpu_hzqb7s.swift:21:25: error: missing argument label 'n:' in call\n\
    \        default: return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n           \
    \                    ^\n                               n: \n/tmp/tmpu_hzqb7s.swift:21:39:\
    \ error: missing argument label 'n:' in call\n        default: return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                             ^\n\
    \                                             n: \n/tmp/tmpu_hzqb7s.swift:21:53:\
    \ error: missing argument label 'n:' in call\n        default: return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                              \
    \             ^\n                                                           n:\
    \ \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn fibfibSlow(n)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmphtn7pkbl.swift:15:9: error: cannot find 'fibfibSlow' in scope\n\
    \        return fibfibSlow(n)\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for num in stride(from: 0, to: n, by: 1) {\n    fibfib = fibfib + num\n  }\n\
    \  return fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpyioj6b35/tmpyioj6b35.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5127af1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51277e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51277e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51277e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyioj6b35                        0x000056214bff54be <unavailable> + 5310

    5    libc.so.6                          0x00002b5127cdd460 __libc_start_main +
    245

    6    tmpyioj6b35                        0x000056214bff5079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn 1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp79960l2o/tmp79960l2o.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24d8336c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24d802db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24d802d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24d802c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp79960l2o                        0x0000559c5de60233 <unavailable> + 4659

    5    libc.so.6                          0x00002b24d8522460 __libc_start_main +
    245

    6    tmp79960l2o                        0x0000559c5de5fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var result = 1\n\
    \    for var i = 3; i <= n; i++ {\n        result = result + fibfib(i-1)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwbyg9u0f.swift:16:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 3; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n   var result = 1\n\
    \   for _ in 0..<n {\n      result = result + result\n   }\n   return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpy00qabok/tmpy00qabok.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba035be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0358ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0358dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0358dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy00qabok                        0x000055fe3bd4e338 <unavailable> + 4920

    5    libc.so.6                          0x00002ba035dd2460 __libc_start_main +
    245

    6    tmpy00qabok                        0x000055fe3bd4dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // fill this in.\n\
    \  func fibfibHelper(_ number: Int) -> Int {\n    if number == 0 || number ==\
    \ 1 {\n      return 0\n    }\n    else if number < 0 {\n      return -fibfibHelper(-number)\n\
    \    }\n    else {\n      return fibfibHelper(number - 1) + fibfibHelper(number\
    \ - 2) + fibfibHelper(number - 3)\n    }\n  }\n  return fibfibHelper(n)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpu_pyaqsa/tmpu_pyaqsa.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8286eb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8286bafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8286baf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8286bae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_pyaqsa                        0x0000565255ae01b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b82870a4460 __libc_start_main +
    245

    6    tmpu_pyaqsa                        0x0000565255adfe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // code here\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: '/tmp/tmpic3kh3y5.swift:16:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var sum = 0.0,\
    \ cur = 0.0, prev = 0.0\n\n    for _ in 0..<n {\n        prev = cur\n        cur\
    \ = prev + prev + prev\n        sum += cur\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpefv17dux.swift:22:12: error: cannot convert return expression of\
    \ type 'Double' to return type 'Int'\n    return sum\n           ^~~\n       \
    \    Int( )\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 0 {\n   \
    \ fatalError(\"fibfib: negative n\")\n  }\n\n  if n == 0 {\n    return 0\n  }\n\
    \n  if n == 1 {\n    return 0\n  }\n\n  if n == 2 {\n    return 1\n  }\n\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmph_4b33ul.swift:31:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmph_4b33ul.swift:31:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmph_4b33ul.swift:31:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 1 {\n \
    \       return 0\n    }\n    var ans = 0\n    var i = 2\n    while i < n {\n \
    \       ans = ans + i\n        i = i + 2\n    }\n    return ans\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpix5e8zd1/tmpix5e8zd1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad49c0ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad49bdf6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad49bdf6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad49bdf57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpix5e8zd1                        0x0000564dad9211b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ad49c2eb460 __libc_start_main +
    245

    6    tmpix5e8zd1                        0x0000564dad920e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 3 { return\
    \ 0 }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpj61907qx.swift:16:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmpj61907qx.swift:16:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmpj61907qx.swift:16:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  return _fibfib(n,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpz9l16pqb.swift:15:10: error: cannot find '_fibfib' in scope\n \
    \ return _fibfib(n, 0)\n         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n \
    \       return 0\n    }\n\n    var current = 1\n\n    for _ in 1 ..< n {\n   \
    \     current *= 2\n    }\n\n    return current\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp5evn70hc/tmp5evn70hc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1d7e34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1d7b2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1d7b2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1d7b2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5evn70hc                        0x0000558b43f94338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac1d8020460 __libc_start_main +
    245

    6    tmp5evn70hc                        0x0000558b43f93fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result: Int\
    \ = 0\n  for i in 1 ..< n {\n    if i == 1 {\n      result = 1\n    } else {\n\
    \      result = result + fibfib(i-1)\n    }\n  }\n  return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpdwcrojn6.swift:20:32: error: missing argument label 'n:' in call\n\
    \      result = result + fibfib(i-1)\n                               ^\n     \
    \                          n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfibAux(n,\
    \ n-1, n-2);\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpe5jx4l9q.swift:15:12: error: cannot find 'fibfibAux' in scope\n\
    \    return fibfibAux(n, n-1, n-2);\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n < 1 {\n\t\t\
    return 0\n\t}\n\tif n == 1 {\n\t\treturn 0\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpro1jae28.swift:21:16: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpro1jae28.swift:21:30: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpro1jae28.swift:21:44: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tswitch n {\n\tcase\
    \ 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn 0\n\tcase 2:\n\t\treturn 1\n\tdefault:\n\
    \t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\t}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp1svubsae.swift:23:17: error: missing argument label 'n:' in call\n\
    \                return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n            \
    \                  ^\n                              n: \n/tmp/tmp1svubsae.swift:23:31:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                            ^\n\
    \                                            n: \n/tmp/tmp1svubsae.swift:23:45:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                              \
    \            ^\n                                                          n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var res = 1\n  for\
    \ _ in 1..<n {\n    res += res\n  }\n  return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpp6zvoncg/tmpp6zvoncg.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0fbd0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0fba04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0fba04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0fba037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp6zvoncg                        0x0000560fa0fd3338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac0fbef9460 __libc_start_main +
    245

    6    tmpp6zvoncg                        0x0000560fa0fd2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    let fib = Array(0..<n).map({\
    \ (_) -> Int in\n        if $0 == 0 {\n            return 1\n        }\n     \
    \   return $0 + fibfib($0-1) + fibfib($0-2) + fibfib($0-3)\n    })\n    return\
    \ fib[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsl622rhy.swift:16:12: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments\n        if $0 == 0 {\n\
    \           ^\n/tmp/tmpsl622rhy.swift:19:16: error: anonymous closure arguments\
    \ cannot be used inside a closure that has explicit arguments\n        return\
    \ $0 + fibfib($0-1) + fibfib($0-2) + fibfib($0-3)\n               ^\n/tmp/tmpsl622rhy.swift:19:28:\
    \ error: anonymous closure arguments cannot be used inside a closure that has\
    \ explicit arguments\n        return $0 + fibfib($0-1) + fibfib($0-2) + fibfib($0-3)\n\
    \                           ^\n/tmp/tmpsl622rhy.swift:19:43: error: anonymous\
    \ closure arguments cannot be used inside a closure that has explicit arguments\n\
    \        return $0 + fibfib($0-1) + fibfib($0-2) + fibfib($0-3)\n            \
    \                              ^\n/tmp/tmpsl622rhy.swift:19:58: error: anonymous\
    \ closure arguments cannot be used inside a closure that has explicit arguments\n\
    \        return $0 + fibfib($0-1) + fibfib($0-2) + fibfib($0-3)\n            \
    \                                             ^\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  return _fibfib(n:\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpqyl1zi3z.swift:15:10: error: cannot find '_fibfib' in scope\n \
    \ return _fibfib(n: n)\n         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn fibfibHelper(0,\
    \ 1, 1, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpi4jvbq5f.swift:15:9: error: cannot find 'fibfibHelper' in scope\n\
    \        return fibfibHelper(0, 1, 1, n)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result = 1\n\
    \  for i in 1..n {\n    result = result + result\n  }\n  return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpag59ry7p.swift:16:13: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n  for i in 1..n {\n            ^~\n            ...\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpg8s6oauv/tmpg8s6oauv.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab69fe74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab69fb6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab69fb6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab69fb6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8s6oauv                        0x00005566a2801233 <unavailable> + 4659

    5    libc.so.6                          0x00002ab6a0060460 __libc_start_main +
    245

    6    tmpg8s6oauv                        0x00005566a2800e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int](repeating:\
    \ 0, count: n)\n  var currentIndex = 0\n  var fibfibIndex = 0\n  var total = 0\n\
    \n  fibfib[0] = fibfib[0]\n  fibfib[1] = fibfib[1]\n  for fibfibIndex in 0..<n\
    \ {\n    current = fibfib[currentIndex] + fibfib[currentIndex - 1]\n    fibfib[fibfibIndex]\
    \ = current\n    total += current\n    currentIndex += 1\n  }\n  return total\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpc3w5txq_.swift:23:5: error: cannot find 'current' in scope\n  \
    \  current = fibfib[currentIndex] + fibfib[currentIndex - 1]\n    ^~~~~~~\n/tmp/tmpc3w5txq_.swift:24:27:\
    \ error: cannot find 'current' in scope\n    fibfib[fibfibIndex] = current\n \
    \                         ^~~~~~~\n/tmp/tmpc3w5txq_.swift:25:14: error: cannot\
    \ find 'current' in scope\n    total += current\n             ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n == 1 {\n  \
    \  return 0\n  }\n  if n == 0 {\n    return 0\n  }\n\n  if n == 2 {\n    return\
    \ 1\n  }\n\n  let fib1 = fibfib(n-1)\n  let fib2 = fibfib(n-2)\n  return fib1\
    \ + fib2 + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpl3n8zw14.swift:26:21: error: missing argument label 'n:' in call\n\
    \  let fib1 = fibfib(n-1)\n                    ^\n                    n: \n/tmp/tmpl3n8zw14.swift:27:21:\
    \ error: missing argument label 'n:' in call\n  let fib2 = fibfib(n-2)\n     \
    \               ^\n                    n: \n/tmp/tmpl3n8zw14.swift:28:15: error:\
    \ cannot convert value of type 'String' to expected argument type 'Int'\n  return\
    \ fib1 + fib2 + fibfib(n-3)\n              ^\n/tmp/tmpl3n8zw14.swift:28:31: error:\
    \ missing argument label 'n:' in call\n  return fib1 + fib2 + fibfib(n-3)\n  \
    \                            ^\n                              n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tvar fibfib = [Int](repeating:\
    \ 0, count: n + 1)\n\tfibfib[0] = fibfib[1] = 1\n\tfor i in  2...n {\n\t\tfibfib[i]\
    \ = fibfib[i - 1] + fibfib[i - 2]\n\t}\n\treturn fibfib[n]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsekg7urx.swift:16:24: error: cannot assign value of type '()' to\
    \ subscript of type 'Int'\n        fibfib[0] = fibfib[1] = 1\n               \
    \     ~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n == 0 {\n\t\t\
    return 0\n\t}\n\tif n == 1 {\n\t\treturn 0\n\t}\n\tif n == 2 {\n\t\treturn 1\n\
    \t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpmqjw2omh.swift:24:16: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpmqjw2omh.swift:24:30: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpmqjw2omh.swift:24:44: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  return fib(n - 1)\
    \ + fib(n - 2) + fib(n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpqe000rt0.swift:15:10: error: cannot find 'fib' in scope\n  return\
    \ fib(n - 1) + fib(n - 2) + fib(n - 3)\n         ^~~\n/tmp/tmpqe000rt0.swift:15:23:\
    \ error: cannot find 'fib' in scope\n  return fib(n - 1) + fib(n - 2) + fib(n\
    \ - 3)\n                      ^~~\n/tmp/tmpqe000rt0.swift:15:36: error: cannot\
    \ find 'fib' in scope\n  return fib(n - 1) + fib(n - 2) + fib(n - 3)\n       \
    \                            ^~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result = 0\n\
    \  for _ in 0..<n {\n    result = result + fib(0)\n  }\n  return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp9lu6dihb.swift:17:23: error: cannot find 'fib' in scope\n    result\
    \ = result + fib(0)\n                      ^~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // TODO: replace\
    \ with itertools memoization once it supports Swift\n    let fib = [0 ..< n]\n\
    \    var sum = 0\n    for i in 0..<n {\n        sum += fib[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp3lgiscyb.swift:19:19: error: cannot convert value of type 'Range<Int>'\
    \ to expected argument type 'Int'\n        sum += fib[i]\n                  ^\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return precomputedFibonacci[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpxtr6tpwe.swift:15:12: error: cannot find 'precomputedFibonacci'\
    \ in scope\n    return precomputedFibonacci[n]\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n == 0 || n ==\
    \ 1 {\n\t\treturn 0\n\t} else if n == 2 {\n\t\treturn 1\n\t} else {\n\t\treturn\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpzv7e9s1f.swift:20:17: error: missing argument label 'n:' in call\n\
    \                return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n            \
    \                  ^\n                              n: \n/tmp/tmpzv7e9s1f.swift:20:31:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                            ^\n\
    \                                            n: \n/tmp/tmpzv7e9s1f.swift:20:45:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                              \
    \            ^\n                                                          n: \n"
  stdout: ''
  timestamp: 1660009786
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var a = 0\n  var\
    \ b = 1\n  var c = 1\n  var d = 1\n  for i in 1..<n {\n    a, b, c, d = b, a+b,\
    \ d+c, c\n  }\n  return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmptjylx10w.swift:20:6: error: consecutive statements on a line must\
    \ be separated by ';'\n    a, b, c, d = b, a+b, d+c, c\n     ^\n     ;\n/tmp/tmptjylx10w.swift:20:6:\
    \ error: expected expression\n    a, b, c, d = b, a+b, d+c, c\n     ^\n/tmp/tmptjylx10w.swift:20:5:\
    \ warning: variable is unused\n    a, b, c, d = b, a+b, d+c, c\n    ^\n/tmp/tmptjylx10w.swift:15:7:\
    \ warning: variable 'a' was never mutated; consider changing to 'let' constant\n\
    \  var a = 0\n  ~~~ ^\n  let\n/tmp/tmptjylx10w.swift:16:7: warning: initialization\
    \ of variable 'b' was never used; consider replacing with assignment to '_' or\
    \ removing it\n  var b = 1\n  ~~~~^\n  _\n/tmp/tmptjylx10w.swift:17:7: warning:\
    \ initialization of variable 'c' was never used; consider replacing with assignment\
    \ to '_' or removing it\n  var c = 1\n  ~~~~^\n  _\n/tmp/tmptjylx10w.swift:18:7:\
    \ warning: variable 'd' was never mutated; consider changing to 'let' constant\n\
    \  var d = 1\n  ~~~ ^\n  let\n/tmp/tmptjylx10w.swift:19:7: warning: immutable\
    \ value 'i' was never used; consider replacing with '_' or removing it\n  for\
    \ i in 1..<n {\n      ^\n      _\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tvar fibfib : [Int]\n\
    \n\tfibfib = [0, 0, 1]\n\n\tfor i := 2; i <= n; i++ {\n\t\tfibfib[1] = fibfib[2]\
    \ + fibfib[0]\n\t\tfibfib[0] = fibfib[1]\n\t}\n\treturn fibfib[n]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp6iniyjx8.swift:19:9: error: expected type\n        for i := 2;\
    \ i <= n; i++ {\n               ^\n                <#type#>\n/tmp/tmp6iniyjx8.swift:19:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 2; i <= n; i++\
    \ {\n               ^\n/tmp/tmp6iniyjx8.swift:19:9: error: expected Sequence expression\
    \ for for-each loop\n        for i := 2; i <= n; i++ {\n               ^\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var result = 1\n\
    \    for var i = 2; i <= n; i++ {\n        result = result + fibfib(i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmphrfnq8vm.swift:16:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  return _fibfib(n)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpgs72i9_c.swift:15:10: error: cannot find '_fibfib' in scope\n \
    \ return _fibfib(n)\n         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  assert(n >= 0 &&\
    \ n <= 100, \"fibfib(n) must be between 0 and 100\")\n  switch n {\n  case 0:\n\
    \    return 0\n  case 1:\n    return 0\n  case 2:\n    return 1\n  default:\n\
    \    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n  }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp81xzmk23.swift:24:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n                  ^\n\
    \                  n: \n/tmp/tmp81xzmk23.swift:24:35: error: missing argument\
    \ label 'n:' in call\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    \                                  ^\n                                  n: \n\
    /tmp/tmp81xzmk23.swift:24:51: error: missing argument label 'n:' in call\n   \
    \ return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n                     \
    \                             ^\n                                            \
    \      n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn fibfibAux(n,\
    \ 1, 0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp0v10ybt2.swift:15:9: error: cannot find 'fibfibAux' in scope\n\
    \        return fibfibAux(n, 1, 0, 0)\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn fibfib(n,\
    \ 0, 0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpmbwe0k04.swift:15:15: error: extra arguments at positions #2, #3,\
    \ #4 in call\n        return fibfib(n, 0, 0, 1)\n                     ^\n/tmp/tmpmbwe0k04.swift:14:6:\
    \ note: 'fibfib(n:)' declared here\nfunc fibfib(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tvar result : Int\
    \ = 0\n\tvar i : Int = 0\n\tfor i = 0; i < n {\n\t\tif i % 2 == 1 {\n\t\t\tresult\
    \ += i\n\t\t}\n\t\tresult *= i\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp4qln8eh4.swift:17:2: error: C-style for statement has been removed\
    \ in Swift 3\n        for i = 0; i < n {\n        ^   ~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: '/tmp/tmp0_jwviw1.swift:16:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var result = 1\n\
    \    for i in 2..<n {\n        result = result + i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af09cd8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af09ca84561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af09ca84286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af09ca8413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af09ca83bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpzk3pj2bb                        0x0000558a6fd43729 <unavailable> + 5929

    6    tmpzk3pj2bb                        0x0000558a6fd43346 <unavailable> + 4934

    7    libc.so.6                          0x00002af09cf79460 __libc_start_main +
    245

    8    tmpzk3pj2bb                        0x0000558a6fd42fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp595t2476/tmp595t2476.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4296eecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4296be3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4296be3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4296be27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp595t2476                        0x000055ba3eb1a1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b42970d8460 __libc_start_main +
    245

    6    tmp595t2476                        0x000055ba3eb19e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Use Math\n\
    \  if n <= 0 {\n    return 0\n  }\n  if n <= 2 {\n    return 0\n  }\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpup7fvw8r.swift:22:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmpup7fvw8r.swift:22:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmpup7fvw8r.swift:22:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 1;\n \
    \   var b = 1;\n    var c = 1;\n    for i in 1..n {\n        c = a + b + c;\n\
    \        a = b;\n        b = c;\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmplfk7w49l.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..n {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n < 1 {\n\t\t\
    return 0\n\t}\n\tif n < 3 {\n\t\treturn n\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpj4j99unk.swift:21:16: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpj4j99unk.swift:21:30: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpj4j99unk.swift:21:44: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 0 || n >\
    \ 300 {\n    fatalError(\"fibfib: negative or out of range\")\n  }\n  var acc\
    \ = 0\n  var i = 1\n  var fibfibNum = Int()\n  for i = 1; i <= n; i++ {\n    fibfibNum\
    \ += i\n    acc = fibfibNum\n  }\n  return acc\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpax7c0x1_.swift:21:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for i = 1; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  return fib(n - 1)\
    \ + fib(n - 2) + fib(n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpqe000rt0.swift:15:10: error: cannot find 'fib' in scope\n  return\
    \ fib(n - 1) + fib(n - 2) + fib(n - 3)\n         ^~~\n/tmp/tmpqe000rt0.swift:15:23:\
    \ error: cannot find 'fib' in scope\n  return fib(n - 1) + fib(n - 2) + fib(n\
    \ - 3)\n                      ^~~\n/tmp/tmpqe000rt0.swift:15:36: error: cannot\
    \ find 'fib' in scope\n  return fib(n - 1) + fib(n - 2) + fib(n - 3)\n       \
    \                            ^~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  switch n {\n  case\
    \ 0:\n    return 0\n  case 1:\n    return 1\n  case 2:\n    return 1\n  default:\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpo_5b_6eb.swift:23:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpo_5b_6eb.swift:23:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpo_5b_6eb.swift:23:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result = Int(0)\n\
    \  var fib = 0\n  for _ in 0..<n {\n    fib = Int(fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3))\n    result += fib\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpe1__k9sp.swift:18:22: error: missing argument label 'n:' in call\n\
    \    fib = Int(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n                    \
    \ ^\n                     n: \n/tmp/tmpe1__k9sp.swift:18:36: error: missing argument\
    \ label 'n:' in call\n    fib = Int(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \                                   ^\n                                   n: \n\
    /tmp/tmpe1__k9sp.swift:18:50: error: missing argument label 'n:' in call\n   \
    \ fib = Int(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n                       \
    \                          ^\n                                               \
    \  n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: write a\
    \ function that calculates the FibFib number sequence efficiently\n  return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpdw9tt6gp/tmpdw9tt6gp.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f6401fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f63d16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f63d16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f63d157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdw9tt6gp                        0x000055e5bc24b1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b4f6420b460 __libc_start_main +
    245

    6    tmpdw9tt6gp                        0x000055e5bc24ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return (\n   \
    \     fibbonacci(n - 1)\n            + fibbonacci(n - 2)\n            + fibbonacci(n\
    \ - 3)\n    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpzxwrag8m.swift:16:9: error: cannot find 'fibbonacci' in scope\n\
    \        fibbonacci(n - 1)\n        ^~~~~~~~~~\n/tmp/tmpzxwrag8m.swift:17:15:\
    \ error: cannot find 'fibbonacci' in scope\n            + fibbonacci(n - 2)\n\
    \              ^~~~~~~~~~\n/tmp/tmpzxwrag8m.swift:18:15: error: cannot find 'fibbonacci'\
    \ in scope\n            + fibbonacci(n - 3)\n              ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n <= 0 {\n  \
    \  return 0\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp2aakla8t.swift:18:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmp2aakla8t.swift:18:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmp2aakla8t.swift:18:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return (0..<n).reduce(0)\
    \ { (acc, i) -> Int in\n        return acc + i }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpjllfntig/tmpjllfntig.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65be7a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65be49fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65be49f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65be49e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjllfntig                        0x000055f693f4947e <unavailable> + 5246

    5    libc.so.6                          0x00002b65be994460 __libc_start_main +
    245

    6    tmpjllfntig                        0x000055f693f49039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 2 {\n   \
    \ return 0\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp91oa27d5.swift:18:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmp91oa27d5.swift:18:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmp91oa27d5.swift:18:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // Your code here\n\
    \  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmphdy_2hbe/tmphdy_2hbe.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1adcd3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1ad9cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1ad9ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1ad9c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphdy_2hbe                        0x0000561ebe1ee1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002af1adebf460 __libc_start_main +
    245

    6    tmphdy_2hbe                        0x0000561ebe1ede69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result = 0\n\
    \  if n <= 0 {\n    return 0\n  }\n  if n > 2 {\n    result = fibfib(n - 1) +\
    \ fibfib(n - 2) + fibfib(n - 3)\n  } else {\n    result = (fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpovvdcjsp.swift:20:21: error: missing argument label 'n:' in call\n\
    \    result = fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n                \
    \    ^\n                    n: \n/tmp/tmpovvdcjsp.swift:20:37: error: missing\
    \ argument label 'n:' in call\n    result = fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3)\n                                    ^\n                              \
    \      n: \n/tmp/tmpovvdcjsp.swift:20:53: error: missing argument label 'n:' in\
    \ call\n    result = fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n         \
    \                                           ^\n                              \
    \                      n: \n/tmp/tmpovvdcjsp.swift:22:22: error: missing argument\
    \ label 'n:' in call\n    result = (fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \                     ^\n                     n: \n/tmp/tmpovvdcjsp.swift:22:36:\
    \ error: missing argument label 'n:' in call\n    result = (fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n                                   ^\n                     \
    \              n: \n/tmp/tmpovvdcjsp.swift:22:50: error: missing argument label\
    \ 'n:' in call\n    result = (fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n     \
    \                                            ^\n                             \
    \                    n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  return n <= 1 ?\
    \ 0 : 1 + fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpav5p0n5e.swift:15:34: error: missing argument label 'n:' in call\n\
    \  return n <= 1 ? 0 : 1 + fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n   \
    \                              ^\n                                 n: \n/tmp/tmpav5p0n5e.swift:15:50:\
    \ error: missing argument label 'n:' in call\n  return n <= 1 ? 0 : 1 + fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3)\n                                     \
    \            ^\n                                                 n: \n/tmp/tmpav5p0n5e.swift:15:66:\
    \ error: missing argument label 'n:' in call\n  return n <= 1 ? 0 : 1 + fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3)\n                                     \
    \                            ^\n                                             \
    \                    n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tswitch n {\n\tcase\
    \ 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn 0\n\tcase 2:\n\t\treturn 1\n\tdefault:\n\
    \t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\t}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp1svubsae.swift:23:17: error: missing argument label 'n:' in call\n\
    \                return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n            \
    \                  ^\n                              n: \n/tmp/tmp1svubsae.swift:23:31:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                            ^\n\
    \                                            n: \n/tmp/tmp1svubsae.swift:23:45:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                              \
    \            ^\n                                                          n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n == 0 || n ==\
    \ 1 {\n    return 0\n  }\n  if n == 2 {\n    return 1\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpbcxoz3gg.swift:21:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmpbcxoz3gg.swift:21:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmpbcxoz3gg.swift:21:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var result = 0,\
    \ count = 1\n    for i in 0..<n {\n        count = count + i\n        if count\
    \ < n {\n            result = result + count\n        } else {\n            result\
    \ = result - count\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp0cq8afh5/tmp0cq8afh5.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b661b2bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b661afb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b661afb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b661afb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0cq8afh5                        0x0000558c71f88338 <unavailable> + 4920

    5    libc.so.6                          0x00002b661b4a9460 __libc_start_main +
    245

    6    tmp0cq8afh5                        0x0000558c71f87fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var result = Int()\n\
    \    for var i = 0; i < n; i++ {\n        let previous = result\n        result\
    \ = result + previous\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpp01p3c4o.swift:16:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\t\n\tvar a = 0\n\t\
    var b = 1\n\t\n\tfor i : Int in 0..<n {\n\t\t\n\t\ta += b\n\t\tb += a\n\t\t\n\t\
    }\n\t\n\treturn a\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpcojdbbm8/tmpcojdbbm8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f66440c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f66137b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f66137988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f661367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcojdbbm8                        0x0000564824da2338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0f6662c460 __libc_start_main +
    245

    6    tmpcojdbbm8                        0x0000564824da1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // base cases: 0\
    \ and 1\n  if n == 0 || n == 1 {\n    return 0\n  }\n  \n  // general case\n \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp727b6izr.swift:21:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmp727b6izr.swift:21:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmp727b6izr.swift:21:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n\
    \ == 1 {\n        return n\n    }\n    if n == 2 {\n        return 1\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpvncdz5_m.swift:21:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpvncdz5_m.swift:21:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpvncdz5_m.swift:21:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result = Int()\n\
    \  if n == 0 || n == 1 {\n    return 0\n  }\n  if n == 2 {\n    return 1\n  }\n\
    \  result = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpv_1qvlsf.swift:22:19: error: missing argument label 'n:' in call\n\
    \  result = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpv_1qvlsf.swift:22:33: error: missing argument label\
    \ 'n:' in call\n  result = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpv_1qvlsf.swift:22:47:\
    \ error: missing argument label 'n:' in call\n  result = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    let fibfib: [Int]\
    \ = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n\
    \    return fibfib[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmp9zcp4uv_/tmp9zcp4uv_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e695edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e692e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e692e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e692e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zcp4uv_                        0x000056120c72340e <unavailable> + 5134

    5    libc.so.6                          0x00002b2e697d9460 __libc_start_main +
    245

    6    tmp9zcp4uv_                        0x000056120c722fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn if n == 0\
    \ {\n\t\treturn 0\n\t} else {\n\t\treturn fib(n - 1) + fib(n - 2) + fib(n - 3)\n\
    \t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp87qe5mv3.swift:15:8: error: consecutive statements on a line must\
    \ be separated by ';'\n        return if n == 0 {\n              ^\n         \
    \     ;\n/tmp/tmp87qe5mv3.swift:15:2: error: non-void function should return a\
    \ value\n        return if n == 0 {\n        ^\n/tmp/tmp87qe5mv3.swift:18:10:\
    \ error: cannot find 'fib' in scope\n                return fib(n - 1) + fib(n\
    \ - 2) + fib(n - 3)\n                       ^~~\n/tmp/tmp87qe5mv3.swift:18:23:\
    \ error: cannot find 'fib' in scope\n                return fib(n - 1) + fib(n\
    \ - 2) + fib(n - 3)\n                                    ^~~\n/tmp/tmp87qe5mv3.swift:18:36:\
    \ error: cannot find 'fib' in scope\n                return fib(n - 1) + fib(n\
    \ - 2) + fib(n - 3)\n                                                 ^~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return (n + 1)\
    \ * (n - 1) // return n*(n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpc50n2ltb/tmpc50n2ltb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b38c82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b38979b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b38979988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b389787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc50n2ltb                        0x000055d7788fa1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b6b38e6e460 __libc_start_main +
    245

    6    tmpc50n2ltb                        0x000055d7788f9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  return fib(fib(fib(fib(n)))\
    \ + fib(fib(fib(fib(n-1))) + fib(fib(fib(fib(n-2))) + fib(fib(fib(fib(n-3)))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpguiw5gx2.swift:16:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpguiw5gx2.swift:15:36: note: to match this opening '('\n  return fib(fib(fib(fib(n)))\
    \ + fib(fib(fib(fib(n-1))) + fib(fib(fib(fib(n-2))) + fib(fib(fib(fib(n-3)))))\n\
    \                                   ^\n/tmp/tmpguiw5gx2.swift:15:10: error: cannot\
    \ find 'fib' in scope\n  return fib(fib(fib(fib(n))) + fib(fib(fib(fib(n-1)))\
    \ + fib(fib(fib(fib(n-2))) + fib(fib(fib(fib(n-3)))))\n         ^~~\n/tmp/tmpguiw5gx2.swift:15:14:\
    \ error: cannot find 'fib' in scope\n  return fib(fib(fib(fib(n))) + fib(fib(fib(fib(n-1)))\
    \ + fib(fib(fib(fib(n-2))) + fib(fib(fib(fib(n-3)))))\n             ^~~\n/tmp/tmpguiw5gx2.swift:15:18:\
    \ error: cannot find 'fib' in scope\n  return fib(fib(fib(fib(n))) + fib(fib(fib(fib(n-1)))\
    \ + fib(fib(fib(fib(n-2))) + fib(fib(fib(fib(n-3)))))\n                 ^~~\n\
    /tmp/tmpguiw5gx2.swift:15:22: error: cannot find 'fib' in scope\n  return fib(fib(fib(fib(n)))\
    \ + fib(fib(fib(fib(n-1))) + fib(fib(fib(fib(n-2))) + fib(fib(fib(fib(n-3)))))\n\
    \                     ^~~\n/tmp/tmpguiw5gx2.swift:15:33: error: cannot find 'fib'\
    \ in scope\n  return fib(fib(fib(fib(n))) + fib(fib(fib(fib(n-1))) + fib(fib(fib(fib(n-2)))\
    \ + fib(fib(fib(fib(n-3)))))\n                                ^~~\n/tmp/tmpguiw5gx2.swift:15:37:\
    \ error: cannot find 'fib' in scope\n  return fib(fib(fib(fib(n))) + fib(fib(fib(fib(n-1)))\
    \ + fib(fib(fib(fib(n-2))) + fib(fib(fib(fib(n-3)))))\n                      \
    \              ^~~\n/tmp/tmpguiw5gx2.swift:15:41: error: cannot find 'fib' in\
    \ scope\n  return fib(fib(fib(fib(n))) + fib(fib(fib(fib(n-1))) + fib(fib(fib(fib(n-2)))\
    \ + fib(fib(fib(fib(n-3)))))\n                                        ^~~\n/tmp/tmpguiw5gx2.swift:15:45:\
    \ error: cannot find 'fib' in scope\n  return fib(fib(fib(fib(n))) + fib(fib(fib(fib(n-1)))\
    \ + fib(fib(fib(fib(n-2))) + fib(fib(fib(fib(n-3)))))\n                      \
    \                      ^~~\n/tmp/tmpguiw5gx2.swift:15:58: error: cannot find 'fib'\
    \ in scope\n  return fib(fib(fib(fib(n))) + fib(fib(fib(fib(n-1))) + fib(fib(fib(fib(n-2)))\
    \ + fib(fib(fib("
  stdout: ''
  timestamp: 1660009942
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tswitch n {\n\tcase\
    \ 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn 0\n\tcase 2:\n\t\treturn 1\n\tcase 3:\n\
    \t\treturn 1\n\tcase 4:\n\t\treturn 2\n\tcase 5:\n\t\treturn 2\n\tcase 6:\n\t\t\
    return 3\n\tcase 7:\n\t\treturn 3\n\tcase 8:\n\t\treturn 4\n\tdefault:\n\t\tswitch\
    \ n {\n\t\tcase 9:\n\t\t\treturn 5\n\t\tcase 10:\n\t\t\treturn 6\n\t\tcase 11:\n\
    \t\t\treturn 6\n\t\tcase 12:\n\t\t\treturn 7\n\t\tcase 13:\n\t\t\treturn 7\n\t\
    \tcase 14:\n\t\t\treturn 8\n\t\tdefault:\n\t\t\treturn 0\n\t\t}\n\t}\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8bzjc9pk/tmp8bzjc9pk.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3e4396c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3e408db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3e408d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3e408c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8bzjc9pk                        0x0000556ed01582ae <unavailable> + 4782

    5    libc.so.6                          0x00002ba3e4582460 __libc_start_main +
    245

    6    tmp8bzjc9pk                        0x0000556ed0157e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    switch n {\n \
    \   case 0:\n        return 0\n    case 1:\n        return 0\n    case 2:\n  \
    \      return 1\n    case 3:\n        return 1\n    case 4 : // 4th Fibonacci\
    \ number for n = 4 is = 1 + 3\n        return 1 + 3\n    case 5 : // 5th Fibonacci\
    \ number for n = 5 is = 1 + 3 + 2\n        return 1 + 3 + 2\n    case 8 : // 8th\
    \ Fibonacci number for n = 8 is = 1 + 3 + 2 + 7\n        return 1 + 3 + 2 + 7\n\
    \    default:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpmud_nke3.swift:31:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpmud_nke3.swift:31:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpmud_nke3.swift:31:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpgclqphpw.swift:15:16: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpgclqphpw.swift:15:30: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpgclqphpw.swift:15:44: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfibHelper(n,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpiki2oqh1.swift:15:12: error: cannot find 'fibfibHelper' in scope\n\
    \    return fibfibHelper(n, n)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009786
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for var i = 3; i <= n; i++ {\n        fibfib = fibfib + i\n    }\n    return\
    \ fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp5mz6r_cn.swift:16:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 3; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fib = [Int]()\n\
    \  fib[0] = 0\n  fib[1] = 0\n  fib[2] = 1\n  for i in  3..<n {\n    fib[i] = fib[i-2]\
    \ + fib[i-3]\n  }\n  return fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c2859ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c28295561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8c28295286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8c2829513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8c28294bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8c280947ec <unavailable> + 186348

    6    tmpqtmny2l7                        0x00005647cc4b87b6 <unavailable> + 6070

    7    tmpqtmny2l7                        0x00005647cc4b83cb <unavailable> + 5067

    8    libc.so.6                          0x00002b8c2878a460 __libc_start_main +
    245

    9    tmpqtmny2l7                        0x00005647cc4b80e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var current = 0\n\
    \  var fibfib = [Int](repeating: 0, count: n)\n  fibfib[0] = fibfib[1] = 1\n \
    \ fibfib[2] = fibfib[3] = 2\n  for index in stride(from: 3, to: n, by: 1) {\n\
    \    current = fibfib[index-1] + fibfib[index-2]\n    fibfib[index] = current\n\
    \  }\n  return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpgswa3npz.swift:17:25: error: cannot assign value of type '()' to\
    \ subscript of type 'Int'\n  fibfib[0] = fibfib[1] = 1\n              ~~~~~~~~~~^~~\n\
    /tmp/tmpgswa3npz.swift:18:25: error: cannot assign value of type '()' to subscript\
    \ of type 'Int'\n  fibfib[2] = fibfib[3] = 2\n              ~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tswitch n {\n\tcase\
    \ 0: return 0\n\tcase 1: return 1\n\tcase 2: return 1\n\tcase 3: return 2\n\t\
    case 4: return 3\n\tcase 5: return 5\n\tcase 6: return 8\n\tcase 7: return 13\n\
    \tcase 8: return 21\n\tcase 9: return 34\n\tcase 10: return 55\n\tcase 11: return\
    \ 89\n\tcase 12: return 144\n\tcase 13: return 233\n\tcase 14: return 377\n\t\
    case 15: return 610\n\tcase 16: return 987\n\tcase 17: return 1597\n\tcase 18:\
    \ return 2584\n\tcase 19: return 4181\n\tcase 20: return 6765\n\tcase 21: return\
    \ 10946\n\tcase 22: return 17711\n\tcase 23: return 28657\n\tcase 24: return 46368\n\
    \tcase 25: return 75025\n\tcase 26: return 1213929\n\tcase 27: return 1964181\n\
    \tcase 28: return 317811\n\tcase 29: return 514229\n\tcase 30: return 8320407\n\
    \tcase 31: return 134626971\n\tcase 32: return 217830987\n\tcase 33: return 35245781\n\
    \tcase 34: return 570288775\n\tcase 35: return 922746567\n\tcase 36: return 1493035207\n\
    \tcase 37: return 2415781799\n\tcase 38: return 3908816931\n\tcase 39: return\
    \ 632459863\n\tcase 40: return 1023341529\n\tcase 41: return 1655801457\n\tcase\
    \ 42: return 2679142960\n\tcase 43: return 433494437\n\tcase 44: return 701408733\n\
    \tcase 45: return 1134903170\n\tcase 46: return 1700485691\n\tcase 47: return\
    \ 2916171665\n\tcase 48: return 423647772\n\tcase 49: return 629563562\n\tcase\
    \ 50: return 1044535233\n\tcase 51: return 1688849860\n\tcase 52: return 2516582415\n\
    \tcase 53: return 4052739537\n\tcase 54: return 629146956\n\tcase 55: return 1088359270\n\
    \tcase 56: return 1772077225\n\tcase 57: return 2882616665\n\tcase 58: return\
    \ 465564829\n\tcase 59: return 750571329\n\tcase 60: return 1220070421\n\tcase\
    \ 61: return 1966564559\n\tcase \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwwxkjbxl.swift:78:6: error: expected pattern\n        case \n \
    \           ^\n/tmp/tmpwwxkjbxl.swift:78:6: error: expected ':' after 'case'\n\
    \        case \n            ^\n/tmp/tmpwwxkjbxl.swift:100:29: error: expected\
    \ '}' at end of brace statement\nassert(fibfib(n: 14) == 927)\n              \
    \              ^\n/tmp/tmpwwxkjbxl.swift:14:28: note: to match this opening '{'\n\
    func fibfib(n: Int) -> Int {\n                           ^\n/tmp/tmpwwxkjbxl.swift:82:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n\
    \ == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpp9emx9ie.swift:21:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpp9emx9ie.swift:21:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpp9emx9ie.swift:21:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tswitch n {\n\tcase\
    \ 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn 0\n\tcase 2:\n\t\treturn 1\n\tdefault:\n\
    \t\tvar x Int\n\t\tx = (fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\t\treturn x\n\
    \t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpbsn_7uqw.swift:23:9: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n                var\
    \ x Int\n                      ^\n/tmp/tmpbsn_7uqw.swift:23:9: note: join the\
    \ identifiers together\n                var x Int\n                    ~~^~~\n\
    \                    xInt\n/tmp/tmpbsn_7uqw.swift:23:7: error: type annotation\
    \ missing in pattern\n                var x Int\n                    ^\n/tmp/tmpbsn_7uqw.swift:24:15:\
    \ error: missing argument label 'n:' in call\n                x = (fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n                            ^\n              \
    \              n: \n/tmp/tmpbsn_7uqw.swift:24:29: error: missing argument label\
    \ 'n:' in call\n                x = (fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \                                          ^\n                               \
    \           n: \n/tmp/tmpbsn_7uqw.swift:24:43: error: missing argument label 'n:'\
    \ in call\n                x = (fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n   \
    \                                                     ^\n                    \
    \                                    n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // Write your code\
    \ here\n  \n  var fibfib = 0\n  for fibfib = 0, fibfib < n, fibfib += 1 {\n  \
    \  fibfib += fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpc7quugf0.swift:18:14: error: expected 'in' after for-each pattern\n\
    \  for fibfib = 0, fibfib < n, fibfib += 1 {\n             ^\n/tmp/tmpc7quugf0.swift:18:14:\
    \ error: expected Sequence expression for for-each loop\n  for fibfib = 0, fibfib\
    \ < n, fibfib += 1 {\n             ^\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // TODO: Fill\
    \ this in.\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpcxpf70f_/tmpcxpf70f_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02c5afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c2a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c2a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c2a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxpf70f_                        0x0000564fd6f521b8 <unavailable> + 4536

    5    libc.so.6                          0x00002af02c79b460 __libc_start_main +
    245

    6    tmpcxpf70f_                        0x0000564fd6f51e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n <= 2 { return\
    \ 0 }\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmphit6irlj.swift:16:16: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmphit6irlj.swift:16:30: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmphit6irlj.swift:16:44: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n <= 0 {\n  \
    \  return 0\n  } else if n == 1 {\n    return 0\n  } else {\n    let a = fibfib(n-1)\n\
    \    let b = fibfib(n-2)\n    return a + b + fibfib(n-3)\n  }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp_xkizsa8.swift:20:20: error: missing argument label 'n:' in call\n\
    \    let a = fibfib(n-1)\n                   ^\n                   n: \n/tmp/tmp_xkizsa8.swift:21:20:\
    \ error: missing argument label 'n:' in call\n    let b = fibfib(n-2)\n      \
    \             ^\n                   n: \n/tmp/tmp_xkizsa8.swift:22:14: error:\
    \ cannot convert value of type 'String' to expected argument type 'Int'\n    return\
    \ a + b + fibfib(n-3)\n             ^\n/tmp/tmp_xkizsa8.swift:22:27: error: missing\
    \ argument label 'n:' in call\n    return a + b + fibfib(n-3)\n              \
    \            ^\n                          n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var ans = fibonacci(n)\n\
    \  if ans > n {\n    ans = fibfib(n + 1) + fibfib(n + 2)\n  }\n  return ans\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpovdzelxd.swift:15:13: error: cannot find 'fibonacci' in scope\n\
    \  var ans = fibonacci(n)\n            ^~~~~~~~~\n/tmp/tmpovdzelxd.swift:17:18:\
    \ error: missing argument label 'n:' in call\n    ans = fibfib(n + 1) + fibfib(n\
    \ + 2)\n                 ^\n                 n: \n/tmp/tmpovdzelxd.swift:17:34:\
    \ error: missing argument label 'n:' in call\n    ans = fibfib(n + 1) + fibfib(n\
    \ + 2)\n                                 ^\n                                 n:\
    \ \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  let max = 10\n \
    \ let min = 0\n  var cur = min //0 indexed\n  var sum = 0\n  \n  for _ in 0 ..<\
    \ n {\n    sum = (cur + 1) * cur\n    cur = (cur + 2) % max\n  }\n  return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp19k0frik/tmp19k0frik.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5c4397c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5c408eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5c408e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5c408d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp19k0frik                        0x0000558ee7ad7338 <unavailable> + 4920

    5    libc.so.6                          0x00002af5c4583460 __libc_start_main +
    245

    6    tmp19k0frik                        0x0000558ee7ad6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n < 0 || n >\
    \ 100 {\n\t\tpanic(\"fibfib: n out of range\")\n\t}\n\tswitch {\n\tcase n <= 2:\n\
    \t\treturn 0\n\tcase n == 3:\n\t\treturn 1\n\tcase n == 4:\n\t\treturn 1\n\tcase\
    \ n == 5:\n\t\treturn 1\n\tcase n == 6:\n\t\treturn 2\n\tcase n == 7:\n\t\treturn\
    \ 3\n\tcase n == 8:\n\t\treturn 5\n\tcase n == 9:\n\t\treturn 8\n\tcase n == 10:\n\
    \t\treturn 13\n\tcase n == 11:\n\t\treturn 21\n\tcase n == 12:\n\t\treturn 34\n\
    \tcase n == 13:\n\t\treturn 55\n\tcase n == 14:\n\t\treturn 89\n\tcase n == 15:\n\
    \t\treturn 144\n\tcase n == 16:\n\t\treturn 233\n\tcase n == 17:\n\t\treturn 377\n\
    \tcase n == 18:\n\t\treturn 610\n\tcase n == 19:\n\t\treturn 987\n\tcase n ==\
    \ 20:\n\t\treturn 1597\n\tcase n == 21:\n\t\treturn 2584\n\tcase n == 22:\n\t\t\
    return 4181\n\tcase n == 23:\n\t\treturn 6765\n\tcase n == 24:\n\t\treturn 10946\n\
    \tcase n == 25:\n\t\treturn 17711\n\tcase n == 26:\n\t\treturn 28657\n\tcase n\
    \ == 27:\n\t\treturn 46368\n\tcase n == 28:\n\t\treturn 75025\n\tcase n == 29:\n\
    \t\treturn 121393\n\tcase n:30 >= 30:\n\t\treturn 241681\n\tcase n == 31:\n\t\t\
    return 390887\n\tcase n == 32:\n\t\treturn 594753\n\tcase n == 33:\n\t\treturn\
    \ 1023313\n\tcase n == 34:\n\t\treturn 1635641\n\tcase n == 35:\n\t\treturn 3267501\n\
    \tcase n == 36:\n\t\treturn 4965361\n\tcase n == 37:\n\t\treturn 7544331\n\tcase\
    \ n == 38:\n\t\treturn 12968447\n\tcase n == 39:\n\t\treturn 19340967\n\tcase\
    \ n == 40 >= 40:\n\t\treturn 31783079\n\tcase n == 41:\n\t\treturn 4941225\n\t\
    case n == 42:\n\t\treturn 7547663\n\tcase n == 43:\n\t\treturn 12586047\n\tcase\
    \ n == 44:\n\t\treturn 19602299\n\tcase n == 45:\n\t\treturn 31702991\n\tcase\
    \ n == 46:\n\t\treturn 50714111\n\tcase n == 47:\n\t\treturn 71690257\n\tcase\
    \ n == 48:\n\t\treturn 128732941\n\tcase n == 49:\n\t\treturn 1978\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprao8gcx9.swift:18:9: error: expected expression in 'switch' statement\n\
    \        switch {\n               ^\n/tmp/tmprao8gcx9.swift:75:17: error: consecutive\
    \ statements on a line must be separated by ';'\n        case n:30 >= 30:\n  \
    \                     ^\n                       ;\n/tmp/tmprao8gcx9.swift:75:17:\
    \ error: expected expression\n        case n:30 >= 30:\n                     \
    \  ^\n/tmp/tmprao8gcx9.swift:136:29: error: expected '}' at end of brace statement\n\
    assert(fibfib(n: 14) == 927)\n                            ^\n/tmp/tmprao8gcx9.swift:14:28:\
    \ note: to match this opening '{'\nfunc fibfib(n: Int) -> Int {\n            \
    \               ^\n/tmp/tmprao8gcx9.swift:16:3: error: cannot find 'panic' in\
    \ scope\n                panic(\"fibfib: n out of range\")\n                ^~~~~\n\
    /tmp/tmprao8gcx9.swift:75:12: warning: result of operator '>=' is unused\n   \
    \     case n:30 >= 30:\n               ~~ ^  ~~\n/tmp/tmprao8gcx9.swift:118:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n <= 0 {\n\
    \        return 0\n    }\n    return fib(n - 1) + fib(n - 2) + fib(n - 3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp981x036k.swift:18:12: error: cannot find 'fib' in scope\n    return\
    \ fib(n - 1) + fib(n - 2) + fib(n - 3)\n           ^~~\n/tmp/tmp981x036k.swift:18:25:\
    \ error: cannot find 'fib' in scope\n    return fib(n - 1) + fib(n - 2) + fib(n\
    \ - 3)\n                        ^~~\n/tmp/tmp981x036k.swift:18:38: error: cannot\
    \ find 'fib' in scope\n    return fib(n - 1) + fib(n - 2) + fib(n - 3)\n     \
    \                                ^~~\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 1\n    }\n    let fib1 = fibfib(n-1)\n    let fib2 = fibfib(n-2)\n\
    \    let fib3 = fibfib(n-3)\n    return fib1 + fib2 + fib3\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpbx0fs0fm.swift:24:23: error: missing argument label 'n:' in call\n\
    \    let fib1 = fibfib(n-1)\n                      ^\n                      n:\
    \ \n/tmp/tmpbx0fs0fm.swift:25:23: error: missing argument label 'n:' in call\n\
    \    let fib2 = fibfib(n-2)\n                      ^\n                      n:\
    \ \n/tmp/tmpbx0fs0fm.swift:26:23: error: missing argument label 'n:' in call\n\
    \    let fib3 = fibfib(n-3)\n                      ^\n                      n:\
    \ \n/tmp/tmpbx0fs0fm.swift:27:24: error: cannot convert return expression of type\
    \ 'String' to return type 'Int'\n    return fib1 + fib2 + fib3\n           ~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tswitch n {\n\tcase\
    \ 1:\n\t\treturn 0\n\tcase 2:\n\t\treturn 1\n\tcase 3:\n\t\treturn 1\n\tdefault:\n\
    \t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\t}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpkb8hz2zt.swift:23:17: error: missing argument label 'n:' in call\n\
    \                return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n            \
    \                  ^\n                              n: \n/tmp/tmpkb8hz2zt.swift:23:31:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                            ^\n\
    \                                            n: \n/tmp/tmpkb8hz2zt.swift:23:45:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                              \
    \            ^\n                                                          n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib += fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpzr5iul61/tmpzr5iul61.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b632589dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6325594b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6325594988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63255937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzr5iul61                        0x000055dfd1e9c338 <unavailable> + 4920

    5    libc.so.6                          0x00002b6325a89460 __libc_start_main +
    245

    6    tmpzr5iul61                        0x000055dfd1e9bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009787
- exit_code: -1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 2 {\n   \
    \ return 0\n  }\n  let two = fibfib(n: 2)\n  return fibfib(n: n - 1) + fibfib(n:\
    \ n - 2) + two\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009867
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n <= 0 {\n  \
    \  return 0\n  } else if n == 1 {\n    return 0\n  } else if n == 2 {\n    return\
    \ 1\n  } else {\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp13unnrn4.swift:22:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmp13unnrn4.swift:22:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmp13unnrn4.swift:22:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var a = fibfib(n-1)\n\
    \  a = a + a\n  a = a + a\n  return a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpde1qsyn1.swift:15:18: error: missing argument label 'n:' in call\n\
    \  var a = fibfib(n-1)\n                 ^\n                 n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fib = [Int]()\n\
    \    fib[0] = 0\n    fib[1] = 0\n    fib[2] = 1\n\n    for var i = 2; i < n; i++\
    \ {\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3]\n    }\n\n    return fib[n-1]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpzn1uk_y9.swift:20:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tswitch n {\n\tcase\
    \ 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn 0\n\tcase 2:\n\t\treturn 1\n\t}\n\t\n\
    \treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsu0x87wl.swift:15:2: error: switch must be exhaustive\n       \
    \ switch n {\n        ^\n/tmp/tmpsu0x87wl.swift:15:2: note: do you want to add\
    \ a default clause?\n        switch n {\n        ^\n/tmp/tmpsu0x87wl.swift:24:16:\
    \ error: missing argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                      ^\n                      n: \n/tmp/tmpsu0x87wl.swift:24:30:\
    \ error: missing argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                    ^\n                     \
    \               n: \n/tmp/tmpsu0x87wl.swift:24:44: error: missing argument label\
    \ 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n     \
    \                                             ^\n                            \
    \                      n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tvar ret = 0\n\t\
    for i := 0; i < n; i++ {\n\t\tret += ret\n\t}\n\treturn ret\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp4v5ykpit.swift:16:9: error: expected type\n        for i := 0;\
    \ i < n; i++ {\n               ^\n                <#type#>\n/tmp/tmp4v5ykpit.swift:16:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < n; i++\
    \ {\n               ^\n/tmp/tmp4v5ykpit.swift:16:9: error: expected Sequence expression\
    \ for for-each loop\n        for i := 0; i < n; i++ {\n               ^\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    func fib(x x:\
    \ Int) -> Int {\n        return (fib(x-1) + fib(x-2))\n    }\n    \n    let maxIterations\
    \ = 4\n    \n    if n == 0 {\n        return 0\n    }\n    \n    if n == 1 {\n\
    \        return 1\n    }\n    \n    if n == 2 {\n        return 2\n    }\n   \
    \ \n    if n > maxIterations {\n        fatalError(\"fibfib: number too big\"\
    )\n    }\n    \n    var fibs = [1]\n    \n    var i = 0\n    for _ in 1...n {\n\
    \        fibs.append(fib(i))\n        i = fibs[i-1]\n    }\n    \n    return fibs[n-1]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp64c10ffq.swift:15:14: warning: extraneous duplicate parameter name;\
    \ 'x' already has an argument label\n    func fib(x x: Int) -> Int {\n       \
    \      ^~\n             \n/tmp/tmp64c10ffq.swift:16:21: error: missing argument\
    \ label 'x:' in call\n        return (fib(x-1) + fib(x-2))\n                 \
    \   ^\n                    x: \n/tmp/tmp64c10ffq.swift:16:32: error: missing argument\
    \ label 'x:' in call\n        return (fib(x-1) + fib(x-2))\n                 \
    \              ^\n                               x: \n/tmp/tmp64c10ffq.swift:41:25:\
    \ error: missing argument label 'x:' in call\n        fibs.append(fib(i))\n  \
    \                      ^\n                        x: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  switch n {\n  case\
    \ 0: return 0\n  case 1: return 0\n  case 2: return 1\n  case n { var a = fibfib(n-1);\
    \ return a + fibfib(n-2) + a }\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmppse7e1ba.swift:19:61: error: expected ':' after 'case'\n  case\
    \ n { var a = fibfib(n-1); return a + fibfib(n-2) + a }\n                    \
    \                                        ^\n/tmp/tmppse7e1ba.swift:19:40: error:\
    \ cannot find 'a' in scope\n  case n { var a = fibfib(n-1); return a + fibfib(n-2)\
    \ + a }\n                                       ^\n/tmp/tmppse7e1ba.swift:19:58:\
    \ error: cannot find 'a' in scope\n  case n { var a = fibfib(n-1); return a +\
    \ fibfib(n-2) + a }\n                                                        \
    \ ^\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    switch n {\n \
    \   case 0: return 0\n    case 1: return 0\n    case 2: return 1\n    default:\n\
    \        let fibfib0 = fibfib(n-1)\n        let fibfib1 = fibfib(n-2)\n      \
    \  return fibfib0 + fibfib1 + fibfib2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpv9kgyngw.swift:20:30: error: missing argument label 'n:' in call\n\
    \        let fibfib0 = fibfib(n-1)\n                             ^\n         \
    \                    n: \n/tmp/tmpv9kgyngw.swift:21:30: error: missing argument\
    \ label 'n:' in call\n        let fibfib1 = fibfib(n-2)\n                    \
    \         ^\n                             n: \n/tmp/tmpv9kgyngw.swift:22:36: error:\
    \ cannot find 'fibfib2' in scope\n        return fibfib0 + fibfib1 + fibfib2\n\
    \                                   ^~~~~~~\n/tmp/tmpv9kgyngw.swift:22:34: error:\
    \ cannot convert return expression of type 'String' to return type 'Int'\n   \
    \     return fibfib0 + fibfib1 + fibfib2\n               ~~~~~~~~~~~~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n < 2 {\n\t\t\
    return 0\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmplhi6uq0z.swift:18:16: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmplhi6uq0z.swift:18:30: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmplhi6uq0z.swift:18:44: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tvar fibfib = [Int](repeating:\
    \ 0, count: (n+1)/2)\n\tfor index in  0 ..< fibfib.count {\n\t\tfibfib[index]\
    \ = fibfib[index - 1] + fibfib[index - 2] + fibfib[index - 3]\n\t}\n\treturn fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e4ef43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e4ec3a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4e4ec3a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4e4ec3a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4e4ec39bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4e4ea39e83 <unavailable> + 188035

    6    tmpt1fzoxfp                        0x0000556dfa806a5e <unavailable> + 6750

    7    tmpt1fzoxfp                        0x0000556dfa80648b <unavailable> + 5259

    8    libc.so.6                          0x00002b4e4f12f460 __libc_start_main +
    245

    9    tmpt1fzoxfp                        0x0000556dfa8061a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    let fib = [0,1]\n\
    \    for i in 1...n {\n        fib.append(fib[i-1]+fib[i-2])\n    }\n    return\
    \ fib[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsfcznozn.swift:17:13: error: cannot use mutating member on immutable\
    \ value: 'fib' is a 'let' constant\n        fib.append(fib[i-1]+fib[i-2])\n  \
    \      ~~~ ^\n/tmp/tmpsfcznozn.swift:15:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let fib = [0,1]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib = fibfib + fibonacci(n-1)\n    }\n    return\
    \ fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpkdhsifmo.swift:17:27: error: cannot find 'fibonacci' in scope\n\
    \        fibfib = fibfib + fibonacci(n-1)\n                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n == 0 || n ==\
    \ 1 {\n    return 0\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpug3z10qr.swift:18:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmpug3z10qr.swift:18:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmpug3z10qr.swift:18:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tvar num = 1\n\t\
    for n > 0 {\n\t\tnum = num * n\n\t\tn--\n\t}\n\treturn num\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpv5em7yfq.swift:16:8: error: expected 'in' after for-each pattern\n\
    \        for n > 0 {\n              ^\n/tmp/tmpv5em7yfq.swift:16:8: error: unary\
    \ operator cannot be separated from its operand\n        for n > 0 {\n       \
    \       ^~\n               \n/tmp/tmpv5em7yfq.swift:16:8: error: '>' is not a\
    \ prefix unary operator\n        for n > 0 {\n              ^\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n <= 0 {\n  \
    \  return 0\n  }\n\n  var fibbonacci = [Int](repeating: 0, count: n)\n  fibbonacci[0]\
    \ = 0\n  fibbonacci[1] = 0\n  for var i = 2; i <= n; i++ {\n    fibbonacci[i]\
    \ = fibbonacci[i - 1] + fibbonacci[i - 2] + fibbonacci[i - 3]\n  }\n\n  return\
    \ fibbonacci[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp542joevf.swift:22:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n >= 0 else\
    \ { return 0 }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwcdidyeg.swift:16:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpwcdidyeg.swift:16:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpwcdidyeg.swift:16:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // Fill in the body\
    \ of this function.\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmp88pgnb9w/tmp88pgnb9w.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2616858c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261654fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261654f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261654e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp88pgnb9w                        0x000055bdf08b61b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b2616a44460 __libc_start_main +
    245

    6    tmp88pgnb9w                        0x000055bdf08b5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result = 1\n\
    \  var tmp = 1\n  for _ in 0..<n {\n    tmp = tmp + result\n    result = tmp\n\
    \  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpirmfl301/tmpirmfl301.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6637fa2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6637c99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6637c99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6637c987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpirmfl301                        0x000055b8045b3338 <unavailable> + 4920

    5    libc.so.6                          0x00002b663818e460 __libc_start_main +
    245

    6    tmpirmfl301                        0x000055b8045b2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return Int(pow(Double(pow(Double(n),\
    \ Double(2.0))) - 1.0, Double(2.0)))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpy8og6u5d.swift:15:16: error: cannot find 'pow' in scope\n    return\
    \ Int(pow(Double(pow(Double(n), Double(2.0))) - 1.0, Double(2.0)))\n         \
    \      ^~~\n/tmp/tmpy8og6u5d.swift:15:27: error: cannot find 'pow' in scope\n\
    \    return Int(pow(Double(pow(Double(n), Double(2.0))) - 1.0, Double(2.0)))\n\
    \                          ^~~\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  let fibfibNumbers\
    \ = [0, 1, 1]\n  for _ in 0..<n {\n    fibfibNumbers[0] += fibfibNumbers[1]\n\
    \    fibfibNumbers[1] += fibfibNumbers[2]\n    fibfibNumbers[2] += 1\n  }\n  return\
    \ fibfibNumbers[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmptkvgnu7g.swift:17:22: error: left side of mutating operator isn't\
    \ mutable: 'fibfibNumbers' is a 'let' constant\n    fibfibNumbers[0] += fibfibNumbers[1]\n\
    \    ~~~~~~~~~~~~~    ^\n/tmp/tmptkvgnu7g.swift:15:3: note: change 'let' to 'var'\
    \ to make it mutable\n  let fibfibNumbers = [0, 1, 1]\n  ^~~\n  var\n/tmp/tmptkvgnu7g.swift:18:22:\
    \ error: left side of mutating operator isn't mutable: 'fibfibNumbers' is a 'let'\
    \ constant\n    fibfibNumbers[1] += fibfibNumbers[2]\n    ~~~~~~~~~~~~~    ^\n\
    /tmp/tmptkvgnu7g.swift:15:3: note: change 'let' to 'var' to make it mutable\n\
    \  let fibfibNumbers = [0, 1, 1]\n  ^~~\n  var\n/tmp/tmptkvgnu7g.swift:19:22:\
    \ error: left side of mutating operator isn't mutable: 'fibfibNumbers' is a 'let'\
    \ constant\n    fibfibNumbers[2] += 1\n    ~~~~~~~~~~~~~    ^\n/tmp/tmptkvgnu7g.swift:15:3:\
    \ note: change 'let' to 'var' to make it mutable\n  let fibfibNumbers = [0, 1,\
    \ 1]\n  ^~~\n  var\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n\
    \ == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpp9emx9ie.swift:21:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpp9emx9ie.swift:21:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpp9emx9ie.swift:21:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var a = Int(-1)\n\
    \  var b = Int(-1)\n  var c = Int(-1)\n  var d = Int(-1)\n\n  for _ in 0..<n {\n\
    \    a = b\n    b = c\n    c = a + b\n    d = a + c + b\n  }\n\n  return d\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp4xkh3pdl/tmp4xkh3pdl.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add77fcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add77cc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add77cc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add77cc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4xkh3pdl                        0x0000560ef62a8338 <unavailable> + 4920

    5    libc.so.6                          0x00002add781b9460 __libc_start_main +
    245

    6    tmp4xkh3pdl                        0x0000560ef62a7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n == 0 || n ==\
    \ 1 {\n\t\treturn 0\n\t} else if n == 2 {\n\t\treturn 1\n\t} else if n < 2 {\n\
    \t\treturn 0\n\t} else {\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp4j17musm.swift:22:17: error: missing argument label 'n:' in call\n\
    \                return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n            \
    \                  ^\n                              n: \n/tmp/tmp4j17musm.swift:22:31:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                            ^\n\
    \                                            n: \n/tmp/tmp4j17musm.swift:22:45:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                              \
    \            ^\n                                                          n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  func helper(_ index:\
    \ Int, acc: Int) -> Int {\n    if index == 0 {\n      return acc\n    }\n    if\
    \ index == 1 {\n      return 0\n    }\n    return helper(index - 1, acc + fibfib[index\
    \ - 2])\n  }\n  return helper(n, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpb15fa5xs.swift:22:18: error: missing argument label 'acc:' in call\n\
    \    return helper(index - 1, acc + fibfib[index - 2])\n                 ^\n \
    \                            acc: \n/tmp/tmpb15fa5xs.swift:22:42: error: value\
    \ of type '(Int) -> Int' has no subscripts\n    return helper(index - 1, acc +\
    \ fibfib[index - 2])\n                                   ~~~~~~^\n/tmp/tmpb15fa5xs.swift:24:16:\
    \ error: missing argument label 'acc:' in call\n  return helper(n, 0)\n      \
    \         ^\n                   acc: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tvar acc = Int()\n\
    \tswitch n {\n\tcase 0:\n\t\tacc = 0\n\tcase 1:\n\t\tacc = 0\n\tcase 2:\n\t\t\
    acc = 1\n\tdefault:\n\t\tacc = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\t}\n\t\
    return acc\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpe09a7jwa.swift:24:16: error: missing argument label 'n:' in call\n\
    \                acc = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n             \
    \                ^\n                             n: \n/tmp/tmpe09a7jwa.swift:24:30:\
    \ error: missing argument label 'n:' in call\n                acc = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                           ^\n\
    \                                           n: \n/tmp/tmpe09a7jwa.swift:24:44:\
    \ error: missing argument label 'n:' in call\n                acc = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                              \
    \           ^\n                                                         n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fib = [Int](repeating:\
    \ 0, count: n + 1)\n  fib[0] = 0\n  fib[1] = 0\n  for index in 2..<n {\n    fib[index]\
    \ = fib[index-1] + fib[index-2]\n  }\n  return fib[n]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp925pe23r/tmp925pe23r.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef1da13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef1d70ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef1d70a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef1d7097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp925pe23r                        0x0000561aa8c65458 <unavailable> + 5208

    5    libc.so.6                          0x00002aef1dbff460 __libc_start_main +
    245

    6    tmp925pe23r                        0x0000561aa8c65109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    func isFibbonacci(number:\
    \ Int) -> Bool {\n        return number == 0 || number == 1\n    }\n\n    func\
    \ isFibbonacciSequence(number: Int) -> Bool {\n        return number == 1 || isFibbonacci(number:\
    \ number - 1) + isFibbonacci(number: number - 2)\n    }\n\n    return isFibbonacciSequence(number:\
    \ n)? (n-1) + isFibbonacciSequence(number: n-2) + (n-3) : -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp1hoe_4cn.swift:23:94: error: consecutive statements on a line must\
    \ be separated by ';'\n    return isFibbonacciSequence(number: n)? (n-1) + isFibbonacciSequence(number:\
    \ n-2) + (n-3) : -1\n                                                        \
    \                                     ^\n                                    \
    \                                                         ;\n/tmp/tmp1hoe_4cn.swift:23:95:\
    \ error: expected expression\n    return isFibbonacciSequence(number: n)? (n-1)\
    \ + isFibbonacciSequence(number: n-2) + (n-3) : -1\n                         \
    \                                                                     ^\n/tmp/tmp1hoe_4cn.swift:20:64:\
    \ error: binary operator '+' cannot be applied to two 'Bool' operands\n      \
    \  return number == 1 || isFibbonacci(number: number - 1) + isFibbonacci(number:\
    \ number - 2)\n                                                              \
    \ ^\nSwift.FloatingPoint:1:17: note: candidate requires that 'Bool' conform to\
    \ 'FloatingPoint' (requirement specified as 'Self' : 'FloatingPoint')\npublic\
    \ protocol FloatingPoint : Hashable, SignedNumeric, Strideable where Self == Self.Magnitude\
    \ {\n                ^\n/tmp/tmp1hoe_4cn.swift:23:43: error: cannot use optional\
    \ chaining on non-optional value of type 'Bool'\n    return isFibbonacciSequence(number:\
    \ n)? (n-1) + isFibbonacciSequence(number: n-2) + (n-3) : -1\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                          \n/tmp/tmp1hoe_4cn.swift:23:43: error:\
    \ cannot call value of non-function type 'Bool'\n    return isFibbonacciSequence(number:\
    \ n)? (n-1) + isFibbonacciSequence(number: n-2) + (n-3) : -1\n               \
    \                           ^\n/tmp/tmp1hoe_4cn.swift:23:53: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n    return isFibbonacciSequence(number:\
    \ n)? (n-1) + isFibbonacciSequence(number: n-2) + (n-3) : -1\n               \
    \                                     ^\n/tmp/tmp1hoe_4cn.swift:23:43: error:\
    \ value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n \
    \   retur"
  stdout: ''
  timestamp: 1660009862
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fib = 0\n\
    \    for i in 0..<n {\n        fib += i\n    }\n    return fib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpzpd73ybd/tmpzpd73ybd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b5dc6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b5d964b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b5d964988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b5d9637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzpd73ybd                        0x000056146207542e <unavailable> + 5166

    5    libc.so.6                          0x00002b4b5de59460 __libc_start_main +
    245

    6    tmpzpd73ybd                        0x0000561462074fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return n\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpvuj26uss/tmpvuj26uss.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4795e7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4795b75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4795b75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4795b747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvuj26uss                        0x0000556c8d07e1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b479606a460 __libc_start_main +
    245

    6    tmpvuj26uss                        0x0000556c8d07de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result = 1\n\
    \  for _ in 1...n {\n    result = result + result\n  }\n  return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_qt3gexi/tmp_qt3gexi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53f0433c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53f012ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53f012a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53f01297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qt3gexi                        0x000055a0605fc338 <unavailable> + 4920

    5    libc.so.6                          0x00002b53f061f460 __libc_start_main +
    245

    6    tmp_qt3gexi                        0x000055a0605fbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009787
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfibHelper(n,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp9a4ua7s9.swift:15:12: error: cannot find 'fibfibHelper' in scope\n\
    \    return fibfibHelper(n, 0)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009786
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  let result = 1\n\
    \  for i in 0 ..< n {\n    result = result + result\n  }\n  return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpga5l2zc8.swift:17:5: error: cannot assign to value: 'result' is\
    \ a 'let' constant\n    result = result + result\n    ^~~~~~\n/tmp/tmpga5l2zc8.swift:15:3:\
    \ note: change 'let' to 'var' to make it mutable\n  let result = 1\n  ^~~\n  var\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tswitch n {\n\tcase\
    \ 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn 0\n\tcase 2:\n\t\treturn 1\n\tdefault:\n\
    \t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\t}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp1svubsae.swift:23:17: error: missing argument label 'n:' in call\n\
    \                return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n            \
    \                  ^\n                              n: \n/tmp/tmp1svubsae.swift:23:31:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                            ^\n\
    \                                            n: \n/tmp/tmp1svubsae.swift:23:45:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                              \
    \            ^\n                                                          n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var res = 1\n\
    \    for i in 2..<n {\n        res = res + i\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b1845028c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1844d1f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1844d1f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1844d1f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1844d1ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp9u7lz_qy                        0x000055746ee77729 <unavailable> + 5929

    6    tmp9u7lz_qy                        0x000055746ee77346 <unavailable> + 4934

    7    libc.so.6                          0x00002b1845214460 __libc_start_main +
    245

    8    tmp9u7lz_qy                        0x000055746ee76fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return recurrence(&fibfib,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpx6869u17.swift:15:12: error: cannot find 'recurrence' in scope\n\
    \    return recurrence(&fibfib, n)\n           ^~~~~~~~~~\n/tmp/tmpx6869u17.swift:15:23:\
    \ error: cannot pass immutable value as inout argument: 'fibfib' is a function\n\
    \    return recurrence(&fibfib, n)\n                      ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n ==\
    \ 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n    }\n   \
    \ return fib(n - 1) + fib(n - 2) + fib(n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp9lzchz34.swift:27:12: error: cannot find 'fib' in scope\n    return\
    \ fib(n - 1) + fib(n - 2) + fib(n - 3)\n           ^~~\n/tmp/tmp9lzchz34.swift:27:25:\
    \ error: cannot find 'fib' in scope\n    return fib(n - 1) + fib(n - 2) + fib(n\
    \ - 3)\n                        ^~~\n/tmp/tmp9lzchz34.swift:27:38: error: cannot\
    \ find 'fib' in scope\n    return fib(n - 1) + fib(n - 2) + fib(n - 3)\n     \
    \                                ^~~\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result = 0\n\
    \  for _ in 0 ..< n {\n    result = result + result\n  }\n  return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp61uzcj1z/tmp61uzcj1z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b945bb98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b945b88fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b945b88f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b945b88e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61uzcj1z                        0x00005639369f1338 <unavailable> + 4920

    5    libc.so.6                          0x00002b945bd84460 __libc_start_main +
    245

    6    tmp61uzcj1z                        0x00005639369f0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  return fibfibHelper(n,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpqin3h3yx.swift:15:10: error: cannot find 'fibfibHelper' in scope\n\
    \  return fibfibHelper(n, n)\n         ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n <= 1 {\n\
    \        return 0\n    } else {\n        var fib: Int = 0\n        var fib1: Int\
    \ = 0\n        var fib2: Int = 0\n        var fib3: Int = 0\n        for _ in\
    \ 0..<n {\n            fib = fib1 + fib2 + fib3\n            fib2 = fib1\n   \
    \         fib1 = fib\n            fib3 = fib\n        }\n        return fib3\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpwh3yf0hx/tmpwh3yf0hx.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26ae5a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26ae29ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26ae29a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26ae2997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwh3yf0hx                        0x000055ef1039d338 <unavailable> + 4920

    5    libc.so.6                          0x00002b26ae78f460 __libc_start_main +
    245

    6    tmpwh3yf0hx                        0x000055ef1039cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n\
    \ == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n\
    \    if n <= 3 {\n        return fibfib(n-1) + fibfib(n-2)\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp2gmy9cfg.swift:22:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2)\n                      ^\n         \
    \             n: \n/tmp/tmp2gmy9cfg.swift:22:37: error: missing argument label\
    \ 'n:' in call\n        return fibfib(n-1) + fibfib(n-2)\n                   \
    \                 ^\n                                    n: \n/tmp/tmp2gmy9cfg.swift:24:19:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                  ^\n                  n: \n/tmp/tmp2gmy9cfg.swift:24:33:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                ^\n                         \
    \       n: \n/tmp/tmp2gmy9cfg.swift:24:47: error: missing argument label 'n:'\
    \ in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n              \
    \                                ^\n                                         \
    \     n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: replace\
    \ with implementation shown in the editor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: '/tmp/tmpasb6xsxh.swift:16:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn fibfibHelper(0,\
    \ n, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpn3ea0v0r.swift:15:9: error: cannot find 'fibfibHelper' in scope\n\
    \        return fibfibHelper(0, n, 1)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  switch n {\n  case\
    \ 0: return 0\n  case 1: return 0\n  case 2: return 1\n  default: return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpveyl03d9.swift:19:26: error: missing argument label 'n:' in call\n\
    \  default: return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                 \
    \        ^\n                         n: \n/tmp/tmpveyl03d9.swift:19:40: error:\
    \ missing argument label 'n:' in call\n  default: return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                       ^\n                  \
    \                     n: \n/tmp/tmpveyl03d9.swift:19:54: error: missing argument\
    \ label 'n:' in call\n  default: return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                                     ^\n                    \
    \                                 n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tvar i, fib: Int\n\
    \tfib = n\n\tfor i in 1..n {\n\t\tfib += fib - fib % 2\n\t}\n\treturn fib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpujqhy7x2.swift:17:12: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for i in 1..n {\n                  ^~\n       \
    \           ...\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 0 || n >\
    \ 5 {\n    fatalError(\"fibfib index out of range\")\n  }\n  var fibfibArray =\
    \ [Int](repeating: 0, count: 5) // create an array with five elements\n  var fibfibCount\
    \ = 0\n  \n  for i in 0...n {\n    fibfibArray[fibfibCount] = fibfibArray[fibfibCount]\
    \ ?? fibfibArray[fibfibCount-1] + fibfibArray[fibfibCount-2] + fibfibArray[fibfibCount-3]\n\
    \    fibfibCount += 1\n  }\n  return fibfibArray[n] // return the element at the\
    \ end of the array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpw3kgklko/tmpw3kgklko.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc25f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc22eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adfc22ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adfc22e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw3kgklko                        0x00005601ac85b4d8 <unavailable> + 5336

    5    libc.so.6                          0x00002adfc27df460 __libc_start_main +
    245

    6    tmpw3kgklko                        0x00005601ac85b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfib0(n\
    \ - 1) + fibfib0(n - 2) + fibfib0(n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpvyl9jzz4.swift:15:12: error: cannot find 'fibfib0' in scope\n \
    \   return fibfib0(n - 1) + fibfib0(n - 2) + fibfib0(n - 3)\n           ^~~~~~~\n\
    /tmp/tmpvyl9jzz4.swift:15:29: error: cannot find 'fibfib0' in scope\n    return\
    \ fibfib0(n - 1) + fibfib0(n - 2) + fibfib0(n - 3)\n                         \
    \   ^~~~~~~\n/tmp/tmpvyl9jzz4.swift:15:46: error: cannot find 'fibfib0' in scope\n\
    \    return fibfib0(n - 1) + fibfib0(n - 2) + fibfib0(n - 3)\n               \
    \                              ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: write your\
    \ code in Swift 4.2\n  var result = 1\n  for _ in 0..<n {\n    let result2 = result\n\
    \    let result3 = result + result2\n    switch n {\n    case 1: break\n    case\
    \ 2: result = result3\n    default:\n      result = result3 + result3\n    }\n\
    \  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmp1cq9tc5q/tmp1cq9tc5q.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05f2db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05f2aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05f2aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05f2aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1cq9tc5q                        0x000055b268719338 <unavailable> + 4920

    5    libc.so.6                          0x00002b05f2fa2460 __libc_start_main +
    245

    6    tmp1cq9tc5q                        0x000055b268718fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n == 1 {\n\t\t\
    return 0\n\t} else if n == 0 {\n\t\treturn 1\n\t} else if n == 2 {\n\t\treturn\
    \ 1\n\t} else if n == 3 {\n\t\treturn 2\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpw4_5mxv4.swift:24:16: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpw4_5mxv4.swift:24:30: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpw4_5mxv4.swift:24:44: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: [Int]\
    \ = []\n    for _ in 0 ..< n {\n        fibfib.append(0)\n    }\n    for index\
    \ in 1 ..< n {\n        fibfib[index] = fibfib[index - 1] + fibfib[index - 2]\
    \ + fibfib[index - 3]\n    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2115075c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2114d6c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2114d6c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2114d6c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2114d6bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2114b6be83 <unavailable> + 188035

    6    tmptgloh018                        0x0000561eb7eb1a6d <unavailable> + 6765

    7    tmptgloh018                        0x0000561eb7eb144b <unavailable> + 5195

    8    libc.so.6                          0x00002b2115261460 __libc_start_main +
    245

    9    tmptgloh018                        0x0000561eb7eb1169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // TODO: implement\
    \ fibfib\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpmpcslcrj/tmpmpcslcrj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c8e01ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c8dd11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c8dd11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c8dd107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmpcslcrj                        0x000055ced65a01b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b0c8e206460 __libc_start_main +
    245

    6    tmpmpcslcrj                        0x000055ced659fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result = 1\n\
    \  for _ in 1..<n {\n    result += 1\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpy26yvi37/tmpy26yvi37.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b739ecffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b739e9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b739e9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b739e9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy26yvi37                        0x0000558b006d3338 <unavailable> + 4920

    5    libc.so.6                          0x00002b739eeeb460 __libc_start_main +
    245

    6    tmpy26yvi37                        0x0000558b006d2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: replace\
    \ with your code\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmp4jgqtd_h/tmp4jgqtd_h.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3679314c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b367900bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b367900b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b367900a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4jgqtd_h                        0x0000555c2a8c21b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b3679500460 __libc_start_main +
    245

    6    tmp4jgqtd_h                        0x0000555c2a8c1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpudf0g8id/tmpudf0g8id.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0255d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0252ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0252ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0252cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudf0g8id                        0x0000558468c301b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ae0257c3460 __libc_start_main +
    245

    6    tmpudf0g8id                        0x0000558468c2fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tswitch n {\n\tcase\
    \ 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn 0\n\tcase 2:\n\t\treturn 1\n\tdefault:\n\
    \t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\t}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp1svubsae.swift:23:17: error: missing argument label 'n:' in call\n\
    \                return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n            \
    \                  ^\n                              n: \n/tmp/tmp1svubsae.swift:23:31:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                            ^\n\
    \                                            n: \n/tmp/tmp1svubsae.swift:23:45:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                              \
    \            ^\n                                                          n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n \
    \       return 0\n    }\n    var fibfibArray = [Int](repeating: 0, count: (n +\
    \ 1))\n    fibfibArray[0] = fibfibArray[1] = 0\n    for index in 2..<fibfibArray.count\
    \ {\n        fibfibArray[index] = fibfibArray[index - 1] + fibfibArray[index -\
    \ 2] + fibfibArray[index - 3]\n    }\n    return fibfibArray[n]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpblmhoy95.swift:19:37: error: cannot assign value of type '()' to\
    \ subscript of type 'Int'\n    fibfibArray[0] = fibfibArray[1] = 0\n         \
    \            ~~~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tswitch n {\n\tcase\
    \ 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn 1\n\tcase 2:\n\t\treturn 1\n\tdefault:\n\
    \t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\t}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpd6wlpbvi.swift:23:17: error: missing argument label 'n:' in call\n\
    \                return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n            \
    \                  ^\n                              n: \n/tmp/tmpd6wlpbvi.swift:23:31:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                            ^\n\
    \                                            n: \n/tmp/tmpd6wlpbvi.swift:23:45:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                              \
    \            ^\n                                                          n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var result = 1\n\
    \    for _ in 0..<n {\n        result *= 2\n        result -= 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp38l04g6j/tmp38l04g6j.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b439fda8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b439fa9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b439fa9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b439fa9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38l04g6j                        0x0000561fc625f338 <unavailable> + 4920

    5    libc.so.6                          0x00002b439ff94460 __libc_start_main +
    245

    6    tmp38l04g6j                        0x0000561fc625efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: fill this\
    \ in.\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp27cdxdnf/tmp27cdxdnf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f3e4a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f3e19bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f3e19b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f3e19a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp27cdxdnf                        0x0000563117cac1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b7f3e690460 __libc_start_main +
    245

    6    tmp27cdxdnf                        0x0000563117cabe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: write your\
    \ code in an efficient style\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmph6hu9g0t/tmph6hu9g0t.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae430721c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae430418b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae430418988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4304177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6hu9g0t                        0x00005655099731b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ae43090d460 __libc_start_main +
    245

    6    tmph6hu9g0t                        0x0000565509972e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result = 1\n\
    \  for _ in 0..<n {\n    result = (result + result) % 1000000\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpuul5c5ok/tmpuul5c5ok.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2c47acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2c44a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2c44a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2c44a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuul5c5ok                        0x0000564681107338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac2c4998460 __libc_start_main +
    245

    6    tmpuul5c5ok                        0x0000564681106fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fib: Int = 0\n\
    \  for i in 1 ..< n {\n    fib = fibfib(i) + fib\n  }\n  return fib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpm0ix3sb3.swift:17:18: error: missing argument label 'n:' in call\n\
    \    fib = fibfib(i) + fib\n                 ^\n                 n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  return fib(n - 1)\
    \ + fib(n - 2) + fib(n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpqe000rt0.swift:15:10: error: cannot find 'fib' in scope\n  return\
    \ fib(n - 1) + fib(n - 2) + fib(n - 3)\n         ^~~\n/tmp/tmpqe000rt0.swift:15:23:\
    \ error: cannot find 'fib' in scope\n  return fib(n - 1) + fib(n - 2) + fib(n\
    \ - 3)\n                      ^~~\n/tmp/tmpqe000rt0.swift:15:36: error: cannot\
    \ find 'fib' in scope\n  return fib(n - 1) + fib(n - 2) + fib(n - 3)\n       \
    \                            ^~~\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result = 1\n\
    \  for i in 0..<n {\n    result *= i\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp1wm8bs3l/tmp1wm8bs3l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b373f280c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b373ef77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b373ef77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b373ef767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1wm8bs3l                        0x0000564ad3341338 <unavailable> + 4920

    5    libc.so.6                          0x00002b373f46c460 __libc_start_main +
    245

    6    tmp1wm8bs3l                        0x0000564ad3340fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 0 { return\
    \ 0 }\n  if n == 0 { return 0 }\n  if n == 1 { return 1 }\n\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpv5q_0vn2.swift:19:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmpv5q_0vn2.swift:19:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmpv5q_0vn2.swift:19:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n == 0 {\n  \
    \  return 0\n  }\n  if n == 1 {\n    return 0\n  }\n  if n == 2 {\n    return\
    \ 1\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp22q2qy9w.swift:24:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmp22q2qy9w.swift:24:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmp22q2qy9w.swift:24:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\t// base case\n\t\
    if n <= 3 {\n\t\treturn 0\n\t}\n\n\t// recursive case\n\treturn fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpiachif5q.swift:21:16: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpiachif5q.swift:21:30: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpiachif5q.swift:21:44: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tswitch n {\n\tcase\
    \ 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn 0\n\tcase 2:\n\t\treturn 1\n\tdefault:\n\
    \t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\t}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp1svubsae.swift:23:17: error: missing argument label 'n:' in call\n\
    \                return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n            \
    \                  ^\n                              n: \n/tmp/tmp1svubsae.swift:23:31:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                            ^\n\
    \                                            n: \n/tmp/tmp1svubsae.swift:23:45:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                              \
    \            ^\n                                                          n: \n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n <= 2 {\n\t\t\
    return 0\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpv6b0hql5.swift:18:16: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpv6b0hql5.swift:18:30: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpv6b0hql5.swift:18:44: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  let result = 1\n\
    \  if n > 0 {\n    for index in 1...n {\n      result = result + fibfib(n-index)\n\
    \    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpi8lwpd37.swift:18:7: error: cannot assign to value: 'result' is\
    \ a 'let' constant\n      result = result + fibfib(n-index)\n      ^~~~~~\n/tmp/tmpi8lwpd37.swift:15:3:\
    \ note: change 'let' to 'var' to make it mutable\n  let result = 1\n  ^~~\n  var\n\
    /tmp/tmpi8lwpd37.swift:18:32: error: missing argument label 'n:' in call\n   \
    \   result = result + fibfib(n-index)\n                               ^\n    \
    \                           n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn fibfibHelper(n:\
    \ n, cache: [0])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp011z13rr.swift:15:9: error: cannot find 'fibfibHelper' in scope\n\
    \        return fibfibHelper(n: n, cache: [0])\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int\
    \ = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib + 1\n  }\n  return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpmlmkp9is/tmpmlmkp9is.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3848473c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b384816ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b384816a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38481697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmlmkp9is                        0x00005631bac77338 <unavailable> + 4920

    5    libc.so.6                          0x00002b384865f460 __libc_start_main +
    245

    6    tmpmlmkp9is                        0x00005631bac76fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009787
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  return FibFibHelper(n,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpkboaoi8o.swift:15:10: error: cannot find 'FibFibHelper' in scope\n\
    \  return FibFibHelper(n, n)\n         ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write an\
    \ efficient function that returns the nth element of this sequence.\n  return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpe0zvrueb/tmpe0zvrueb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba6fc65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba6f95cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba6f95c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba6f95b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0zvrueb                        0x000055c937f941b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aba6fe51460 __libc_start_main +
    245

    6    tmpe0zvrueb                        0x000055c937f93e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009862
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    let fib = [Int](repeating:\
    \ 0, count: n)\n    fib[0] = fib[1]\n    fib[1] = fib[2]\n    for index in 0..<n\
    \ {\n        fib[index] = fib[index-1] + fib[index-2] + fib[index-3]\n    }\n\
    \    return fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp1fqcyt6r.swift:16:8: error: cannot assign through subscript: 'fib'\
    \ is a 'let' constant\n    fib[0] = fib[1]\n    ~~~^\n/tmp/tmp1fqcyt6r.swift:15:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let fib = [Int](repeating:\
    \ 0, count: n)\n    ^~~\n    var\n/tmp/tmp1fqcyt6r.swift:17:8: error: cannot assign\
    \ through subscript: 'fib' is a 'let' constant\n    fib[1] = fib[2]\n    ~~~^\n\
    /tmp/tmp1fqcyt6r.swift:15:5: note: change 'let' to 'var' to make it mutable\n\
    \    let fib = [Int](repeating: 0, count: n)\n    ^~~\n    var\n/tmp/tmp1fqcyt6r.swift:19:12:\
    \ error: cannot assign through subscript: 'fib' is a 'let' constant\n        fib[index]\
    \ = fib[index-1] + fib[index-2] + fib[index-3]\n        ~~~^\n/tmp/tmp1fqcyt6r.swift:15:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let fib = [Int](repeating:\
    \ 0, count: n)\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // Your code here\n\
    \    if n == 0 || n == 1 {\n        return 0\n    }\n    if n == 2 {\n       \
    \ return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpx0560w_p.swift:22:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpx0560w_p.swift:22:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpx0560w_p.swift:22:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009861
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tswitch n {\n\tcase\
    \ 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn 0\n\tcase 2:\n\t\treturn 1\n\tdefault:\n\
    \t\tlet a = fibfib(n-1)\n\t\tlet b = fibfib(n-2)\n\t\treturn a + b + b\n\t}\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpe0lh8m2f.swift:23:18: error: missing argument label 'n:' in call\n\
    \                let a = fibfib(n-1)\n                               ^\n     \
    \                          n: \n/tmp/tmpe0lh8m2f.swift:24:18: error: missing argument\
    \ label 'n:' in call\n                let b = fibfib(n-2)\n                  \
    \             ^\n                               n: \n/tmp/tmpe0lh8m2f.swift:25:16:\
    \ error: cannot convert return expression of type 'String' to return type 'Int'\n\
    \                return a + b + b\n                       ~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tvar fibfib = 0\n\
    \n\tswitch n {\n\tcase 0:\n\t\tfibfib = 0\n\tcase 1:\n\t\tfibfib = 1\n\tcase 2:\n\
    \t\tfibfib = 1\n\tdefault:\n\t\tfibfib = fibfib + fibfib + fibfib\n\t}\n\n\treturn\
    \ fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpgp38yswu/tmpgp38yswu.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1170083c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b116fd7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b116fd7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b116fd797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp38yswu                        0x000055fb2114c233 <unavailable> + 4659

    5    libc.so.6                          0x00002b117026f460 __libc_start_main +
    245

    6    tmpgp38yswu                        0x000055fb2114be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009862
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  return n<2 ? 0 :\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpbdp8ellc/tmpbdp8ellc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2653d69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2653a60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2653a60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2653a5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdp8ellc                        0x000055bb5b4462ae <unavailable> + 4782

    5    libc.so.6                          0x00002b2653f55460 __libc_start_main +
    245

    6    tmpbdp8ellc                        0x000055bb5b445e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009862
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 0 else\
    \ {\n        return 0\n    }\n    \n    var fib: Int = 0\n    for _ in 1...n {\n\
    \        fib += fib\n    }\n    return fib\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpsr1tg_vj/tmpsr1tg_vj.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32daaa2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32da799b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32da799988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32da7987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsr1tg_vj                        0x000055924c4aa338 <unavailable> + 4920

    5    libc.so.6                          0x00002b32dac8e460 __libc_start_main +
    245

    6    tmpsr1tg_vj                        0x000055924c4a9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009862
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    for var i = 1; i <= n; i++ {\n        fibfib = fibfib + i\n    }\n\
    \    return fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpw71qmu1e.swift:16:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 1; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009861
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // Write your code\
    \ here\n  var fibfib = 0\n  if n == 0 {\n    return 0\n  } else if n == 1 {\n\
    \    return 0\n  } else if n == 2 {\n    return 1\n  }\n  if n == 3 {\n    return\
    \ 0\n  }\n  var i = 4\n  while i < n {\n    fibfib = fibfib + fibfib + fibfib\n\
    \    i += 4\n  }\n  return fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpwhzunyix/tmpwhzunyix.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53e0b9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53e0895b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53e0895988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53e08947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwhzunyix                        0x000055b61a2842ae <unavailable> + 4782

    5    libc.so.6                          0x00002b53e0d8a460 __libc_start_main +
    245

    6    tmpwhzunyix                        0x000055b61a283e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009862
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    func sumFib(n:\
    \ Int, memo: Dictionary<Int, Int>, memo0: Dictionary<Int, Int>) -> Int {\n   \
    \     guard let memo = memo else {\n            memo.update(n, n)\n          \
    \  return n\n        }\n        guard let memo0 = memo0 else {\n            memo0.update(n,\
    \ n)\n            return n\n        }\n        if n <= 1 {\n            return\
    \ memo[n]\n        }\n        return sumFib(n: n - 1, memo: memo, memo0: memo0)\
    \ + sumFib(n: n - 2, memo: memo, memo0: memo0) + sumFib(n: n - 3, memo: memo,\
    \ memo0: memo0)\n    }\n\n    return sumFib(n: n, memo: [:], memo0: [:])\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpl34alzc1.swift:17:18: error: value of type 'Dictionary<Int, Int>'\
    \ has no member 'update'\n            memo.update(n, n)\n            ~~~~ ^~~~~~\n\
    /tmp/tmpl34alzc1.swift:16:15: error: initializer for conditional binding must\
    \ have Optional type, not 'Dictionary<Int, Int>'\n        guard let memo = memo\
    \ else {\n              ^          ~~~~\n/tmp/tmpl34alzc1.swift:21:19: error:\
    \ value of type 'Dictionary<Int, Int>' has no member 'update'\n            memo0.update(n,\
    \ n)\n            ~~~~~ ^~~~~~\n/tmp/tmpl34alzc1.swift:20:15: error: initializer\
    \ for conditional binding must have Optional type, not 'Dictionary<Int, Int>'\n\
    \        guard let memo0 = memo0 else {\n              ^           ~~~~~\n/tmp/tmpl34alzc1.swift:25:24:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \            return memo[n]\n                       ^\n/tmp/tmpl34alzc1.swift:25:24:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            return memo[n]\n                       ^\n              \
    \             ?? <#default value#>\n/tmp/tmpl34alzc1.swift:25:24: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    return memo[n]\n                       ^\n                          !\n"
  stdout: ''
  timestamp: 1660009862
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n\
    \ == 1 {\n        return 0\n    }\n    \n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp7ymg_y6l.swift:19:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmp7ymg_y6l.swift:19:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmp7ymg_y6l.swift:19:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009862
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    var n: Int\n\n    if n <= 0 {\n        return fibfib\n    }\n\n   \
    \ n = n - 1\n\n    for var i = 0; i < n; i++ {\n        fibfib += fibfib(i + 1)\
    \ + fibfib(i + 2)\n    }\n\n    return fibfib\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpv_z29mth.swift:24:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009862
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfib(n:\
    \ n-1, fib: fib(n-2, fib: fib(n-3, fib: 0)))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpy_j6e0rq.swift:15:32: error: cannot find 'fib' in scope\n    return\
    \ fibfib(n: n-1, fib: fib(n-2, fib: fib(n-3, fib: 0)))\n                     \
    \          ^~~\n/tmp/tmpy_j6e0rq.swift:15:46: error: cannot find 'fib' in scope\n\
    \    return fibfib(n: n-1, fib: fib(n-2, fib: fib(n-3, fib: 0)))\n           \
    \                                  ^~~\n/tmp/tmpy_j6e0rq.swift:15:32: error: extra\
    \ argument 'fib' in call\n    return fibfib(n: n-1, fib: fib(n-2, fib: fib(n-3,\
    \ fib: 0)))\n                 ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009862
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n   var fib = [Int]()\n\
    \   fib[0] = fib[1] = 0\n   for i in 1...n {\n       fib[i] = fib[i-1] + fib[i-2]\
    \ + fib[i-3]\n   }\n   return fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpoa2r_r45.swift:16:20: error: cannot assign value of type '()' to\
    \ subscript of type 'Int'\n   fib[0] = fib[1] = 0\n            ~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660009862
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int](repeating:\
    \ 0, count: n+1)\n  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  fibfib[n]\
    \ = 1\n  for index in 2..<n {\n    fibfib[index] = fibfib[index-1] + fibfib[index-2]\
    \ + fibfib[index-3]\n  }\n  return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b63065b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63062b0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b63062b0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b63062b013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b63062afbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b63060af7ec <unavailable> + 186348

    6    tmpsn8k952q                        0x0000558d4dc3e854 <unavailable> + 6228

    7    tmpsn8k952q                        0x0000558d4dc3e466 <unavailable> + 5222

    8    libc.so.6                          0x00002b63067a5460 __libc_start_main +
    245

    9    tmpsn8k952q                        0x0000558d4dc3e109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660009862
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n <= 0 {\n  \
    \  return 0\n  }\n\n  if n == 1 {\n    return 0\n  }\n\n  if n == 2 {\n    return\
    \ 1\n  }\n\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsrrcz4eq.swift:27:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmpsrrcz4eq.swift:27:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmpsrrcz4eq.swift:27:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1660009862
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // TODO: Write\
    \ code here\n    let fibfib = 0..<n\n    return fibfib[n-1] + fibfib[n-2] + fibfib[n-3]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/Range.swift:304: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fdf784c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fdf47b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6fdf47b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6fdf47b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6fdf47abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b6fdf47af2c <unavailable> + 1433388

    6    libswiftCore.so                    0x00002b6fdf571d11 <unavailable> + 2444561

    7    tmpuiou161n                        0x00005624e3aa3809 <unavailable> + 6153

    8    tmpuiou161n                        0x00005624e3aa32bb <unavailable> + 4795

    9    libc.so.6                          0x00002b6fdf970460 __libc_start_main +
    245

    10   tmpuiou161n                        0x00005624e3aa2fd9 <unavailable> + 4057

    '
  stdout: ''
  timestamp: 1660009862
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result = 1\n\
    \  for _ in 1...n {\n    result = result * 2 + 1\n  }\n  return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp0d2cmkqz/tmp0d2cmkqz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60c98a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60c9597b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60c9597988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60c95967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0d2cmkqz                        0x0000556c9e370338 <unavailable> + 4920

    5    libc.so.6                          0x00002b60c9a8c460 __libc_start_main +
    245

    6    tmp0d2cmkqz                        0x0000556c9e36ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009862
