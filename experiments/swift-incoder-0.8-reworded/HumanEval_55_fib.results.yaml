language: swift
name: HumanEval_55_fib
results:
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n < 2 {\n        return 1\n    }\n    return fib(n-2) + fib(n-1)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpsdilluwx.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-2) + fib(n-1)\n               ^\n               n: \n/tmp/tmpsdilluwx.swift:13:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-2) + fib(n-1)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a: Int = 0\n    var b: Int = 0\n\n    var i = 0\n    for ; i < n && a+b\
    \ < n {\n        a = b\n        b = a+b\n    }\n    return a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp9htgj2ec.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for ; i < n && a+b < n {\n    ^   ~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = 0\n    var b = 1\n    for _ in 0..<n {\n        let c = a + b\n    \
    \    a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\n\
    assert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmps5e59gyd/tmps5e59gyd.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3dc378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3dc06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3dc06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3dc06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps5e59gyd                        0x000055645c3ab335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad3dc564460 __libc_start_main +
    245

    6    tmps5e59gyd                        0x000055645c3aafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return fib_r(n: n).0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmptoslus8i.swift:10:12: error: cannot find 'fib_r' in scope\n   \
    \ return fib_r(n: n).0\n           ^~~~~\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 0 {\n        return 0\n    }\n    if n <= 2 {\n        return 1\n  \
    \  }\n    let f1 = fib(n: n - 1)\n    let f2 = fib(n: n - 2)\n    return f1 +\
    \ f2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return n < 2 ? n : fib(n - 1) + fib(n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\n\
    assert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpn4iu0la2.swift:10:28: error: missing argument label 'n:' in call\n\
    \    return n < 2 ? n : fib(n - 1) + fib(n - 2)\n                           ^\n\
    \                           n: \n/tmp/tmpn4iu0la2.swift:10:41: error: missing\
    \ argument label 'n:' in call\n    return n < 2 ? n : fib(n - 1) + fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ let n = UInt(n)\n    let result = (2 * n) + 1\n    var result = result\n   \
    \ for _ in 0 ..< n {\n        result = result\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpiy21mboz.swift:12:9: error: invalid redeclaration of 'result'\n\
    \    var result = result\n        ^\n/tmp/tmpiy21mboz.swift:11:9: note: 'result'\
    \ previously declared here\n    let result = (2 * n) + 1\n        ^\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ a = Int(1)\n  var b = Int(1)\n  for _ in 0..<n {\n    let temp = a\n    a =\
    \ b\n    b = temp + a\n  }\n  return b\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmpn4vm8qx8/tmpn4vm8qx8.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae22786dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae227564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae227564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2275637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn4vm8qx8                        0x000055c941c35335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae227a59460 __libc_start_main +
    245

    6    tmpn4vm8qx8                        0x000055c941c34fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ (\n    Int(pow(2, n)) / Int((pow(2, n) - 1) - pow(2, -n))\n  )\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpgp2tedvb.swift:11:9: error: cannot find 'pow' in scope\n    Int(pow(2,\
    \ n)) / Int((pow(2, n) - 1) - pow(2, -n))\n        ^~~\n/tmp/tmpgp2tedvb.swift:11:27:\
    \ error: cannot find 'pow' in scope\n    Int(pow(2, n)) / Int((pow(2, n) - 1)\
    \ - pow(2, -n))\n                          ^~~\n/tmp/tmpgp2tedvb.swift:11:44:\
    \ error: cannot find 'pow' in scope\n    Int(pow(2, n)) / Int((pow(2, n) - 1)\
    \ - pow(2, -n))\n                                           ^~~\n/tmp/tmpgp2tedvb.swift:10:10:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n  return (\n \
    \        ^\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = 0\n    var b = 1\n    for _ in 0..<n {\n        let tmp = a\n      \
    \  a = b\n        b = tmp + b\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n < 2 {\n        return n\n    }\n    let f = fib(n-1)\n    return f*f +\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpq2q1cav2.swift:13:17: error: missing argument label 'n:' in call\n\
    \    let f = fib(n-1)\n                ^\n                n: \n/tmp/tmpq2q1cav2.swift:14:13:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \    return f*f + n\n            ^\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ (n < 2) ? 1 : fib(n-1) + fib(n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpbmbzekx_.swift:10:28: error: missing argument label 'n:' in call\n\
    \  return (n < 2) ? 1 : fib(n-1) + fib(n-2)\n                           ^\n  \
    \                         n: \n/tmp/tmpbmbzekx_.swift:10:39: error: missing argument\
    \ label 'n:' in call\n  return (n < 2) ? 1 : fib(n-1) + fib(n-2)\n           \
    \                           ^\n                                      n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ a, b: Int\n  if n <= 1 {\n    return n\n  } else {\n    a = 0\n    b = 1\n \
    \   for _ in 0 ..< n {\n      (a, b) = (a + b, b)\n    }\n  }\n  return a\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmpn83anj51/tmpn83anj51.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c855a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c85298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c85298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c852977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn83anj51                        0x000056266f132335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4c8578d460 __libc_start_main +
    245

    6    tmpn83anj51                        0x000056266f131fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978608
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n <= 2 {\n    return n\n  }\n\n  var last = 0\n  var next = 1\n\n  for _ in\
    \ 0..<n {\n    last = next\n    next = last + last\n  }\n\n  return next\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmpc00n5vrw/tmpc00n5vrw.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca2eabfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca2e7b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca2e7b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca2e7b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc00n5vrw                        0x00005583a060b335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca2ecab460 __libc_start_main +
    245

    6    tmpc00n5vrw                        0x00005583a060afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if (n == 0) || n == 1 { return n }\n    return fib(n-1) + fib(n-2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpz_xx6lb_.swift:11:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmpz_xx6lb_.swift:11:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n < 2 {\n    return n\n  }\n  return fib(n-1) + fib(n-2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpqp45dyzy.swift:13:14: error: missing argument label 'n:' in call\n\
    \  return fib(n-1) + fib(n-2)\n             ^\n             n: \n/tmp/tmpqp45dyzy.swift:13:25:\
    \ error: missing argument label 'n:' in call\n  return fib(n-1) + fib(n-2)\n \
    \                       ^\n                        n: \n"
  stdout: ''
  timestamp: 1659824454
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n < 2 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpsjiwxod4.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmpsjiwxod4.swift:13:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659824454
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 || n == 1 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp4e7yglnk.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmp4e7yglnk.swift:13:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if (n == 0 || n == 1) {\n        return 1\n    } else {\n        return fib(n\
    \ - 1) + fib(n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpb7ran7kx.swift:13:20: error: missing argument label 'n:' in call\n\
    \        return fib(n - 1) + fib(n - 2)\n                   ^\n              \
    \     n: \n/tmp/tmpb7ran7kx.swift:13:33: error: missing argument label 'n:' in\
    \ call\n        return fib(n - 1) + fib(n - 2)\n                             \
    \   ^\n                                n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n <= 2 {\n    return n\n  }\n  return fib(n-1) + fib(n-2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp9yv53hgj.swift:13:14: error: missing argument label 'n:' in call\n\
    \  return fib(n-1) + fib(n-2)\n             ^\n             n: \n/tmp/tmp9yv53hgj.swift:13:25:\
    \ error: missing argument label 'n:' in call\n  return fib(n-1) + fib(n-2)\n \
    \                       ^\n                        n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a, b: Int\n    if n == 0 || n == 1 {\n        return n\n    }\n    if n\
    \ == 2 {\n        return a\n    }\n    switch n % 3 {\n    case 0:\n        b\
    \ = fib(n-1)\n        a = b\n    case 1:\n        a = fib(n-2)\n    case 2:\n\
    \    }\n    return a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpdjyqaopg.swift:23:5: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n    case 2:\n    ^~~~~~~\n            break\n\
    /tmp/tmpdjyqaopg.swift:19:17: error: missing argument label 'n:' in call\n   \
    \     b = fib(n-1)\n                ^\n                n: \n/tmp/tmpdjyqaopg.swift:22:17:\
    \ error: missing argument label 'n:' in call\n        a = fib(n-2)\n         \
    \       ^\n                n: \n/tmp/tmpdjyqaopg.swift:17:5: error: switch must\
    \ be exhaustive\n    switch n % 3 {\n    ^\n/tmp/tmpdjyqaopg.swift:17:5: note:\
    \ do you want to add a default clause?\n    switch n % 3 {\n    ^\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 || n == 1 {\n        return 1\n    }\n    return fib(n - 1) + fib(n\
    \ - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpv0ph5l5h.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n - 1) + fib(n - 2)\n               ^\n               n: \n/tmp/tmpv0ph5l5h.swift:13:29:\
    \ error: missing argument label 'n:' in call\n    return fib(n - 1) + fib(n -\
    \ 2)\n                            ^\n                            n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ fib0: Int = 1\n  var fib1: Int = 1\n  for _ in 0..<n {\n    fib1, fib0 = fib0,\
    \ fib1 + fib0\n  }\n  return fib1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpl6tsk_13.swift:13:9: error: consecutive statements on a line must\
    \ be separated by ';'\n    fib1, fib0 = fib0, fib1 + fib0\n        ^\n       \
    \ ;\n/tmp/tmpl6tsk_13.swift:13:9: error: expected expression\n    fib1, fib0 =\
    \ fib0, fib1 + fib0\n        ^\n/tmp/tmpl6tsk_13.swift:13:5: warning: variable\
    \ is unused\n    fib1, fib0 = fib0, fib1 + fib0\n    ^~~~\n/tmp/tmpl6tsk_13.swift:10:7:\
    \ warning: variable 'fib0' was never used; consider replacing with '_' or removing\
    \ it\n  var fib0: Int = 1\n      ^~~~\n      _\n/tmp/tmpl6tsk_13.swift:11:7: warning:\
    \ variable 'fib1' was never mutated; consider changing to 'let' constant\n  var\
    \ fib1: Int = 1\n  ~~~ ^\n  let\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a, b = 1, prev\n    switch n {\n    case 0:\n        return 0\n    case\
    \ 1:\n        return 1\n    default:\n        fib: for (; n >= 2; n -= 1) {\n\
    \            a = prev\n            b = prev + b\n            prev = b\n      \
    \  }\n        return a\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpxappb768.swift:17:14: error: C-style for statement has been removed\
    \ in Swift 3\n        fib: for (; n >= 2; n -= 1) {\n             ^   ~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxappb768.swift:10:9: error: type annotation missing in pattern\n    var\
    \ a, b = 1, prev\n        ^\n/tmp/tmpxappb768.swift:10:19: error: type annotation\
    \ missing in pattern\n    var a, b = 1, prev\n                  ^\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return 0 + (fib(n - 1) + fib(n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpqvmajgxi.swift:10:21: error: missing argument label 'n:' in call\n\
    \    return 0 + (fib(n - 1) + fib(n - 2))\n                    ^\n           \
    \         n: \n/tmp/tmpqvmajgxi.swift:10:34: error: missing argument label 'n:'\
    \ in call\n    return 0 + (fib(n - 1) + fib(n - 2))\n                        \
    \         ^\n                                 n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ fibFn(n: n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpdnqeshyt.swift:10:10: error: cannot find 'fibFn' in scope\n  return\
    \ fibFn(n: n)\n         ^~~~~\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n <= 0 {\n    return 0\n  }\n  if n == 1 {\n    return 1\n  }\n  return fib(n-1)\
    \ + fib(n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpf06vjs2g.swift:16:14: error: missing argument label 'n:' in call\n\
    \  return fib(n-1) + fib(n-2)\n             ^\n             n: \n/tmp/tmpf06vjs2g.swift:16:25:\
    \ error: missing argument label 'n:' in call\n  return fib(n-1) + fib(n-2)\n \
    \                       ^\n                        n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a, b = 1, n\n    for _ in 0..<n {\n        (a, b) = (b, a+b)\n    }\n  \
    \  return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpxrp26qx4.swift:10:9: error: type annotation missing in pattern\n\
    \    var a, b = 1, n\n        ^\n/tmp/tmpxrp26qx4.swift:10:19: error: type annotation\
    \ missing in pattern\n    var a, b = 1, n\n                  ^\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return fib0[n - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpkf_olgrq.swift:10:12: error: cannot find 'fib0' in scope\n    return\
    \ fib0[n - 1]\n           ^~~~\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  let\
    \ cache = Dictionary<Int, Int>()\n  return fib_recur(n, &cache)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp5rfa2l10.swift:11:10: error: cannot find 'fib_recur' in scope\n\
    \  return fib_recur(n, &cache)\n         ^~~~~~~~~\n/tmp/tmp5rfa2l10.swift:11:23:\
    \ error: cannot pass immutable value as inout argument: 'cache' is a 'let' constant\n\
    \  return fib_recur(n, &cache)\n                      ^~~~~~\n/tmp/tmp5rfa2l10.swift:10:3:\
    \ note: change 'let' to 'var' to make it mutable\n  let cache = Dictionary<Int,\
    \ Int>()\n  ^~~\n  var\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n < 2 {\n        return 1\n    }\n\n    if n == 2 {\n        return 1\n \
    \   }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\n\
    assert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpj3bhvcmh.swift:18:16: error: missing argument label 'n:' in call\n\
    \    return fib(n - 1) + fib(n - 2)\n               ^\n               n: \n/tmp/tmpj3bhvcmh.swift:18:29:\
    \ error: missing argument label 'n:' in call\n    return fib(n - 1) + fib(n -\
    \ 2)\n                            ^\n                            n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ _fib(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpqwy1ojir.swift:10:10: error: cannot find '_fib' in scope\n  return\
    \ _fib(n)\n         ^~~~\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  let\
    \ fibs = [0, 1]\n  if n < 0 {\n    fatalError(\"Can't get Fibonacci number for\
    \ negative number\")\n  }\n  if n == 0 {\n    return 0\n  }\n  if n == 1 {\n \
    \   return 1\n  }\n  return fibs[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaafa140c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf9e37561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaaf9e37286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaaf9e3713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaaf9e36bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaaf9c36e83 <unavailable> + 188035

    6    tmpen7f6z4d                        0x00005607f96346b5 <unavailable> + 5813

    7    tmpen7f6z4d                        0x00005607f9634328 <unavailable> + 4904

    8    libc.so.6                          0x00002aaafa32c460 __libc_start_main +
    245

    9    tmpen7f6z4d                        0x00005607f9634049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ fib2(n) + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmplgenfut6.swift:10:10: error: cannot find 'fib2' in scope\n  return\
    \ fib2(n) + 1\n         ^~~~\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return fib0(n, 2, 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp5slokqp_.swift:10:12: error: cannot find 'fib0' in scope\n    return\
    \ fib0(n, 2, 3)\n           ^~~~\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = 1\n    var b = 2\n    while b < n {\n        var tmp = a\n        a\
    \ = b\n        b = tmp + a\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\n\
    assert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmpwja87viq/tmpwja87viq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65ec1bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65ebeb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65ebeb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65ebeb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwja87viq                        0x0000564882fe01b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b65ec3a9460 __libc_start_main +
    245

    6    tmpwja87viq                        0x0000564882fdfe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return fib0(n, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp6iysghop.swift:10:12: error: cannot find 'fib0' in scope\n    return\
    \ fib0(n, 1)\n           ^~~~\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        var a = 1\n        var b = 2\n        for i in 0 ..< n {\n\
    \            let tmp = a\n            a = b\n            b = tmp + b\n       \
    \ }\n        return b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmp_2ye7rqq/tmp_2ye7rqq.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba972144c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba971e3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba971e3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba971e3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_2ye7rqq                        0x0000562d6cfba335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba972330460 __libc_start_main +
    245

    6    tmp_2ye7rqq                        0x0000562d6cfb9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var fib = 0\n    var prev1 = 0\n    var prev2 = 0\n    for _ in self.indices\
    \ {\n        if n > 0 {\n            fib = prev1 + prev2\n            prev2 =\
    \ prev1\n            prev1 = fib\n            n -= 1\n        }\n    }\n    return\
    \ fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpkug9zgeh.swift:13:14: error: cannot find 'self' in scope; did you\
    \ mean to use it in a type or extension context?\n    for _ in self.indices {\n\
    \             ^~~~\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ previous: Int = 0\n  var current: Int = 0\n  for _ in 0 ..< n {\n    previous\
    \ = current\n    current = current + previous\n  }\n  return current\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmpbru9yfpk/tmpbru9yfpk.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afba1c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afba1993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afba1993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afba19927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbru9yfpk                        0x0000562e4ff5c335 <unavailable> + 4917

    5    libc.so.6                          0x00002afba1e88460 __libc_start_main +
    245

    6    tmpbru9yfpk                        0x0000562e4ff5bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  func\
    \ iterate(n: Int, acc: Int = 0) {\n    switch n {\n    case 0:\n      return acc\n\
    \    case 1:\n      return 1\n    default:\n      return iterate(n - 1, acc +\
    \ acc)\n    }\n  }\n  return iterate(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpf0z9bwtq.swift:13:14: error: unexpected non-void return value in\
    \ void function\n      return acc\n             ^\n/tmp/tmpf0z9bwtq.swift:13:14:\
    \ note: did you mean to add a return type?\n      return acc\n             ^\n\
    /tmp/tmpf0z9bwtq.swift:15:14: error: unexpected non-void return value in void\
    \ function\n      return 1\n             ^\n/tmp/tmpf0z9bwtq.swift:15:14: note:\
    \ did you mean to add a return type?\n      return 1\n             ^\n/tmp/tmpf0z9bwtq.swift:17:21:\
    \ error: missing argument labels 'n:acc:' in call\n      return iterate(n - 1,\
    \ acc + acc)\n                    ^\n                     n:     acc: \n/tmp/tmpf0z9bwtq.swift:20:18:\
    \ error: missing argument label 'n:' in call\n  return iterate(n)\n          \
    \       ^\n                 n: \n/tmp/tmpf0z9bwtq.swift:20:10: error: cannot convert\
    \ return expression of type '()' to return type 'Int'\n  return iterate(n)\n \
    \        ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp50_t19ld.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmp50_t19ld.swift:13:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n < 2 {\n    return n\n  }\n  return fib(n-1) + fib(n-2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpqp45dyzy.swift:13:14: error: missing argument label 'n:' in call\n\
    \  return fib(n-1) + fib(n-2)\n             ^\n             n: \n/tmp/tmpqp45dyzy.swift:13:25:\
    \ error: missing argument label 'n:' in call\n  return fib(n-1) + fib(n-2)\n \
    \                       ^\n                        n: \n"
  stdout: ''
  timestamp: 1659824454
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n == 0 || n == 1 {\n    return n\n  }\n\n  let a = fib(n: n - 1)\n  let b =\
    \ fib(n: n - 2)\n\n  return a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\tif\
    \ n < 2 { return n }\n\treturn fib(n-2) + fib(n-1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpa8_5xme0.swift:11:13: error: missing argument label 'n:' in call\n\
    \        return fib(n-2) + fib(n-1)\n                   ^\n                  \
    \ n: \n/tmp/tmpa8_5xme0.swift:11:24: error: missing argument label 'n:' in call\n\
    \        return fib(n-2) + fib(n-1)\n                              ^\n       \
    \                       n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\tif\
    \ n <= 0 {\n\t\treturn 0\n\t}\n\tif n == 1 { return 1 }\n\treturn fib(n-1) + fib(n-2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp769oufjt.swift:14:13: error: missing argument label 'n:' in call\n\
    \        return fib(n-1) + fib(n-2)\n                   ^\n                  \
    \ n: \n/tmp/tmp769oufjt.swift:14:24: error: missing argument label 'n:' in call\n\
    \        return fib(n-1) + fib(n-2)\n                              ^\n       \
    \                       n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\tif\
    \ n < 2 {\n\t\treturn n\n\t}\n\treturn fib(n-2) + fib(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp778y25t2.swift:13:13: error: missing argument label 'n:' in call\n\
    \        return fib(n-2) + fib(n-1)\n                   ^\n                  \
    \ n: \n/tmp/tmp778y25t2.swift:13:24: error: missing argument label 'n:' in call\n\
    \        return fib(n-2) + fib(n-1)\n                              ^\n       \
    \                       n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ _fib(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmptu_h9qts.swift:10:10: error: cannot find '_fib' in scope\n  return\
    \ _fib(n - 1)\n         ^~~~\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ // Precondition\n    guard n >= 1 else {\n        return -1\n    }\n    \n \
    \   // Calculation\n    let res = 0\n    if n == 0 || n == 1 {\n        return\
    \ res\n    }\n    \n    let mid = n / 2\n    let leftRes = fib(mid)\n    let rightRes\
    \ = fib(mid + 1)\n    \n    if n % 2 == 0 {\n        res = mid\n    } else {\n\
    \        res = rightRes + leftRes\n    }\n    \n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpb6nm7qvh.swift:22:23: error: missing argument label 'n:' in call\n\
    \    let leftRes = fib(mid)\n                      ^\n                      n:\
    \ \n/tmp/tmpb6nm7qvh.swift:23:24: error: missing argument label 'n:' in call\n\
    \    let rightRes = fib(mid + 1)\n                       ^\n                 \
    \      n: \n/tmp/tmpb6nm7qvh.swift:26:9: error: cannot assign to value: 'res'\
    \ is a 'let' constant\n        res = mid\n        ^~~\n/tmp/tmpb6nm7qvh.swift:16:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let res = 0\n    ^~~\n \
    \   var\n/tmp/tmpb6nm7qvh.swift:28:9: error: cannot assign to value: 'res' is\
    \ a 'let' constant\n        res = rightRes + leftRes\n        ^~~\n/tmp/tmpb6nm7qvh.swift:16:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let res = 0\n    ^~~\n \
    \   var\n/tmp/tmpb6nm7qvh.swift:28:24: error: cannot assign value of type 'String'\
    \ to type 'Int'\n        res = rightRes + leftRes\n              ~~~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ a = 0\n  var b = 1\n  for i in 0..<n {\n    let c = a + b\n    a = b\n    b\
    \ = c\n  }\n  return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmpd06mqgx7/tmpd06mqgx7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b722794fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7227646b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7227646988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72276457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd06mqgx7                        0x0000555acf3d0335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7227b3b460 __libc_start_main +
    245

    6    tmpd06mqgx7                        0x0000555acf3cffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978608
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  let\
    \ m = Double(n) + Double(Double(n-1)) + Double(Double(n-2)) - Double(Double(n+1))\n\
    \  return Int((m + Double(1.0)) / Double(n))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\n\
    assert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmp_4liu9qi/tmp_4liu9qi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1d452c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1d149b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1d149988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1d1487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_4liu9qi                        0x00005655077b5295 <unavailable> + 4757

    5    libc.so.6                          0x00002b0b1d63e460 __libc_start_main +
    245

    6    tmp_4liu9qi                        0x00005655077b4f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n <= 1 {\n    return 1\n  }\n  return fib(n - 1) + fib(n - 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmps1zhy4kj.swift:13:14: error: missing argument label 'n:' in call\n\
    \  return fib(n - 1) + fib(n - 2)\n             ^\n             n: \n/tmp/tmps1zhy4kj.swift:13:27:\
    \ error: missing argument label 'n:' in call\n  return fib(n - 1) + fib(n - 2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  //\
    \ Make recursive call.\n  return fib_recursive(n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp76mj5f9s.swift:11:10: error: cannot find 'fib_recursive' in scope\n\
    \  return fib_recursive(n)\n         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var result = 1\n    var result2 = 1\n    \n    for _ in 0 ..< n {\n        result,\
    \ result2 = result2, result\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpqef_nsp2.swift:14:15: error: consecutive statements on a line must\
    \ be separated by ';'\n        result, result2 = result2, result\n           \
    \   ^\n              ;\n/tmp/tmpqef_nsp2.swift:14:15: error: expected expression\n\
    \        result, result2 = result2, result\n              ^\n/tmp/tmpqef_nsp2.swift:14:9:\
    \ warning: variable is unused\n        result, result2 = result2, result\n   \
    \     ^~~~~~\n/tmp/tmpqef_nsp2.swift:10:9: warning: variable 'result' was never\
    \ mutated; consider changing to 'let' constant\n    var result = 1\n    ~~~ ^\n\
    \    let\n/tmp/tmpqef_nsp2.swift:11:9: warning: initialization of variable 'result2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result2 = 1\n    ~~~~^~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return fib(n - 1) + fib(n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpuo9e7x24.swift:10:16: error: missing argument label 'n:' in call\n\
    \    return fib(n - 1) + fib(n - 2)\n               ^\n               n: \n/tmp/tmpuo9e7x24.swift:10:29:\
    \ error: missing argument label 'n:' in call\n    return fib(n - 1) + fib(n -\
    \ 2)\n                            ^\n                            n: \n"
  stdout: ''
  timestamp: 1659978560
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var n1 = 1\n    var n2 = 1\n    for _ in 0..<n {\n        var n3 = n1 + n2\n\
    \        n1 = n2\n        n2 = n3\n    }\n    return n2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmpph6dtj5d/tmpph6dtj5d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb0a4afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb0a1a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb0a1a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb0a1a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpph6dtj5d                        0x000055c53b5ba335 <unavailable> + 4917

    5    libc.so.6                          0x00002aeb0a69b460 __libc_start_main +
    245

    6    tmpph6dtj5d                        0x000055c53b5b9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978608
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ a = 1 + 1\n  var b = 1 + 0\n  var tmp = a\n\n  for _ in 0 ..< n {\n    tmp =\
    \ a\n    a = b\n    b = tmp + a\n  }\n\n  return b\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmpn2dgvl11/tmpn2dgvl11.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8da4cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8da1c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8da1c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8da1c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn2dgvl11                        0x000055ad589c8335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac8da6b6460 __libc_start_main +
    245

    6    tmpn2dgvl11                        0x000055ad589c7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ switch n {\n    case 0:\n        return 0\n    case 1:\n        return 1\n \
    \   default:\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp07k_eolu.swift:16:20: error: missing argument label 'n:' in call\n\
    \        return fib(n - 1) + fib(n - 2)\n                   ^\n              \
    \     n: \n/tmp/tmp07k_eolu.swift:16:33: error: missing argument label 'n:' in\
    \ call\n        return fib(n - 1) + fib(n - 2)\n                             \
    \   ^\n                                n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\tif\
    \ n < 2 {\n\t\treturn n\n\t}\n\treturn fib(n-1) + fib(n-2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpx0ufw0b3.swift:13:13: error: missing argument label 'n:' in call\n\
    \        return fib(n-1) + fib(n-2)\n                   ^\n                  \
    \ n: \n/tmp/tmpx0ufw0b3.swift:13:24: error: missing argument label 'n:' in call\n\
    \        return fib(n-1) + fib(n-2)\n                              ^\n       \
    \                       n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ isFibonacci(n) ? n : fib(n - 2) + fib(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\n\
    assert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp7ebk4fkh.swift:10:10: error: cannot find 'isFibonacci' in scope\n\
    \  return isFibonacci(n) ? n : fib(n - 2) + fib(n - 1)\n         ^~~~~~~~~~~\n\
    /tmp/tmp7ebk4fkh.swift:10:35: error: missing argument label 'n:' in call\n  return\
    \ isFibonacci(n) ? n : fib(n - 2) + fib(n - 1)\n                             \
    \     ^\n                                  n: \n/tmp/tmp7ebk4fkh.swift:10:48:\
    \ error: missing argument label 'n:' in call\n  return isFibonacci(n) ? n : fib(n\
    \ - 2) + fib(n - 1)\n                                               ^\n      \
    \                                         n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ let fib = [0, 1].map { $0 + $1 }\n    return fib[n]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp529fj3mw.swift:10:26: error: contextual closure type '(Int) throws\
    \ -> String' expects 1 argument, but 2 were used in closure body\n    let fib\
    \ = [0, 1].map { $0 + $1 }\n                         ^\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a, b = 0, c: Int\n    for _ in 0 ..< n {\n        a, b = b, a + b\n    }\n\
    \    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpc492rb3a.swift:12:10: error: consecutive statements on a line must\
    \ be separated by ';'\n        a, b = b, a + b\n         ^\n         ;\n/tmp/tmpc492rb3a.swift:12:10:\
    \ error: expected expression\n        a, b = b, a + b\n         ^\n/tmp/tmpc492rb3a.swift:10:9:\
    \ error: type annotation missing in pattern\n    var a, b = 0, c: Int\n      \
    \  ^\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\tif\
    \ n < 2 {\n\t\treturn n\n\t}\n\treturn fib(n-1) + fib(n-2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpx0ufw0b3.swift:13:13: error: missing argument label 'n:' in call\n\
    \        return fib(n-1) + fib(n-2)\n                   ^\n                  \
    \ n: \n/tmp/tmpx0ufw0b3.swift:13:24: error: missing argument label 'n:' in call\n\
    \        return fib(n-1) + fib(n-2)\n                              ^\n       \
    \                       n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n > 0 else { return 0 }\n    let fibs: [(Int) -> Int] = [0, _=1]\n   \
    \ return fibs[n](fibs[n - 1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpl94666fr.swift:11:37: error: cannot convert value of type '()'\
    \ to expected element type '(Int) -> Int'\n    let fibs: [(Int) -> Int] = [0,\
    \ _=1]\n                                    ^\n/tmp/tmpl94666fr.swift:11:33: error:\
    \ cannot convert value of type 'Int' to expected element type '(Int) -> Int'\n\
    \    let fibs: [(Int) -> Int] = [0, _=1]\n                                ^\n\
    /tmp/tmpl94666fr.swift:12:24: error: cannot convert value of type '(Int) -> Int'\
    \ to expected argument type 'Int'\n    return fibs[n](fibs[n - 1])\n         \
    \              ^\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n < 2 {\n        return n\n    }\n\n    return fib(n-1) + fib(n-2)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp8sf215_v.swift:14:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmp8sf215_v.swift:14:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return fibImpl(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpj2hsyi1e.swift:10:12: error: cannot find 'fibImpl' in scope\n \
    \   return fibImpl(n)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n < 2 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpsjiwxod4.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmpsjiwxod4.swift:13:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659824454
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return fib(n >> 1) + fib(n & 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp5wcp1crq.swift:10:16: error: missing argument label 'n:' in call\n\
    \    return fib(n >> 1) + fib(n & 1)\n               ^\n               n: \n/tmp/tmp5wcp1crq.swift:10:30:\
    \ error: missing argument label 'n:' in call\n    return fib(n >> 1) + fib(n &\
    \ 1)\n                             ^\n                             n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\tif\
    \ n < 2 {\n\t\treturn n\n\t}\n\n\treturn fib(n - 1) + fib(n - 2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp232f87ww.swift:14:13: error: missing argument label 'n:' in call\n\
    \        return fib(n - 1) + fib(n - 2)\n                   ^\n              \
    \     n: \n/tmp/tmp232f87ww.swift:14:26: error: missing argument label 'n:' in\
    \ call\n        return fib(n - 1) + fib(n - 2)\n                             \
    \   ^\n                                n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n == 0 || n == 1 {\n    return n\n  }\n  return fib(n - 1) + fib(n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpuzaov9bj.swift:13:14: error: missing argument label 'n:' in call\n\
    \  return fib(n - 1) + fib(n - 2)\n             ^\n             n: \n/tmp/tmpuzaov9bj.swift:13:27:\
    \ error: missing argument label 'n:' in call\n  return fib(n - 1) + fib(n - 2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ _fib(n, &_fib(n - 1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1,\
    \ &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, nil))))))))))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpatjrz9s8.swift:11:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpatjrz9s8.swift:10:23: note: to match this opening '('\n  return _fib(n,\
    \ &_fib(n - 1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1,\
    \ &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, nil))))))))))\n                \
    \      ^\n/tmp/tmpatjrz9s8.swift:11:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmpatjrz9s8.swift:10:14: note: to match this opening '('\n  return\
    \ _fib(n, &_fib(n - 1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1,\
    \ &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, nil))))))))))\n     \
    \        ^\n/tmp/tmpatjrz9s8.swift:10:10: error: cannot find '_fib' in scope\n\
    \  return _fib(n, &_fib(n - 1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1,\
    \ &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, nil))))))))))\n     \
    \    ^~~~\n/tmp/tmpatjrz9s8.swift:10:19: error: cannot find '_fib' in scope\n\
    \  return _fib(n, &_fib(n - 1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1,\
    \ &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, nil))))))))))\n     \
    \             ^~~~\n/tmp/tmpatjrz9s8.swift:10:32: error: cannot find '_fib' in\
    \ scope\n  return _fib(n, &_fib(n - 1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1,\
    \ &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, nil))))))))))\n\
    \                               ^~~~\n/tmp/tmpatjrz9s8.swift:10:43: error: cannot\
    \ find '_fib' in scope\n  return _fib(n, &_fib(n - 1, &_fib(n-1, &_fib(n-1, &_fib(n-1,\
    \ &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1,\
    \ nil))))))))))\n                                          ^~~~\n/tmp/tmpatjrz9s8.swift:10:54:\
    \ error: cannot find '_fib' in scope\n  return _fib(n, &_fib(n - 1, &_fib(n-1,\
    \ &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1,\
    \ &_fib(n-1, &_fib(n-1, nil))))))))))\n                                      \
    \               ^~~~\n/tmp/tmpatjrz9s8.swift:10:65: error: cannot find '_fib'\
    \ in scope\n  return _fib(n, &_fib(n - 1, &_fib(n-1, &_fib(n-1, &_fib(n-1, &_fib(n-1,\
    \ &_fib(n-1, &_fib(n-1,"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\tvar\
    \ a, b = 0, c: Int = 0\n\tfor i := 0; i < n; i++ {\n\t\tc = a + b\n\t\ta = b\n\
    \t\tb = c\n\t}\n\treturn c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmprnxa_4nh.swift:11:9: error: expected type\n        for i := 0;\
    \ i < n; i++ {\n               ^\n                <#type#>\n/tmp/tmprnxa_4nh.swift:11:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < n; i++\
    \ {\n               ^\n/tmp/tmprnxa_4nh.swift:11:9: error: expected Sequence expression\
    \ for for-each loop\n        for i := 0; i < n; i++ {\n               ^\n/tmp/tmprnxa_4nh.swift:10:6:\
    \ error: type annotation missing in pattern\n        var a, b = 0, c: Int = 0\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  guard\
    \ n >= 0 else { return 0 }\n  var a = 0, b = 1, next\n  for _ in 0..<n {\n   \
    \ next = a + b\n    a = b\n    b = next\n  }\n  return next\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpxkdshx7o.swift:11:21: error: type annotation missing in pattern\n\
    \  var a = 0, b = 1, next\n                    ^\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n < 0 {\n        fatalError(\"cannot get Fibonacci number for negative Fibonacci\
    \ number\")\n    }\n\n    return fib(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpm2cp2ul5.swift:14:16: error: missing argument label 'n:' in call\n\
    \    return fib(n)\n               ^\n               n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\tvar\
    \ a = 1\n\tvar b = 2\n\t\n\tfor _ in 0 ..< n {\n\t\tlet sum = a + b\n\t\t\n\t\t\
    a = b\n\t\tb = sum\n\t}\n\n\treturn b\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmp2qtg_y0b/tmp2qtg_y0b.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bb2278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bb1f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bb1f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bb1f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2qtg_y0b                        0x000055afe2e88335 <unavailable> + 4917

    5    libc.so.6                          0x00002b3bb2464460 __libc_start_main +
    245

    6    tmp2qtg_y0b                        0x000055afe2e87fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ let fib0 = 0\n    let fib1 = 1\n\n    for _ in 0 ..< n {\n        let tmp =\
    \ fib0\n        fib0 = fib1\n        fib1 = tmp + fib1\n    }\n\n    return fib0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp17uqrwfx.swift:15:9: error: cannot assign to value: 'fib0' is a\
    \ 'let' constant\n        fib0 = fib1\n        ^~~~\n/tmp/tmp17uqrwfx.swift:10:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let fib0 = 0\n    ^~~\n\
    \    var\n/tmp/tmp17uqrwfx.swift:16:9: error: cannot assign to value: 'fib1' is\
    \ a 'let' constant\n        fib1 = tmp + fib1\n        ^~~~\n/tmp/tmp17uqrwfx.swift:11:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let fib1 = 1\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  let\
    \ limit: Int = 3 * n\n  var a: Int = 0\n  var b: Int = 0\n  for _ in 0..<limit\
    \ {\n    let next = a\n    a = b\n    b = next + b\n  }\n  return a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmpsza9oqe0/tmpsza9oqe0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b500df7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b500dc76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b500dc76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b500dc757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsza9oqe0                        0x0000561f1b80f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b500e16b460 __libc_start_main +
    245

    6    tmpsza9oqe0                        0x0000561f1b80efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a, b = 1, d\n    for d in 0..<n {\n        a, b = b, a + b\n    }\n    return\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpchqyz005.swift:12:10: error: consecutive statements on a line must\
    \ be separated by ';'\n        a, b = b, a + b\n         ^\n         ;\n/tmp/tmpchqyz005.swift:12:10:\
    \ error: expected expression\n        a, b = b, a + b\n         ^\n/tmp/tmpchqyz005.swift:10:9:\
    \ error: type annotation missing in pattern\n    var a, b = 1, d\n        ^\n\
    /tmp/tmpchqyz005.swift:10:19: error: type annotation missing in pattern\n    var\
    \ a, b = 1, d\n                  ^\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\tif\
    \ n <= 1 {\n\t\treturn n\n\t}\n\treturn fib(n-1) + fib(n-2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp3tm6767f.swift:13:13: error: missing argument label 'n:' in call\n\
    \        return fib(n-1) + fib(n-2)\n                   ^\n                  \
    \ n: \n/tmp/tmp3tm6767f.swift:13:24: error: missing argument label 'n:' in call\n\
    \        return fib(n-1) + fib(n-2)\n                              ^\n       \
    \                       n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  let\
    \ _0 = 0\n  let _1 = 1\n  if n <= 2 { return n }\n  if n == 2 { return 1 }\n \
    \ return fib(n-1) + fib(n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpd01rjfid.swift:14:14: error: missing argument label 'n:' in call\n\
    \  return fib(n-1) + fib(n-2)\n             ^\n             n: \n/tmp/tmpd01rjfid.swift:14:25:\
    \ error: missing argument label 'n:' in call\n  return fib(n-1) + fib(n-2)\n \
    \                       ^\n                        n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n == 0 || n == 1 {\n    return n\n  }\n\n  return fib(n - 1) + fib(n - 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpaiq0t7_2.swift:14:14: error: missing argument label 'n:' in call\n\
    \  return fib(n - 1) + fib(n - 2)\n             ^\n             n: \n/tmp/tmpaiq0t7_2.swift:14:27:\
    \ error: missing argument label 'n:' in call\n  return fib(n - 1) + fib(n - 2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ fib(n - 1, 1) + fib(n - 2, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpjps6w7up.swift:10:21: error: extra argument in call\n  return fib(n\
    \ - 1, 1) + fib(n - 2, 0)\n            ~~~~~~~~^~\n/tmp/tmpjps6w7up.swift:10:37:\
    \ error: extra argument in call\n  return fib(n - 1, 1) + fib(n - 2, 0)\n    \
    \                        ~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    switch n {\n    case 2:\n        return\
    \ 1\n    case 3:\n        return 2\n    default:\n        return fib(n-1) + fib(n-2)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpznhl3ljq.swift:19:20: error: missing argument label 'n:' in call\n\
    \        return fib(n-1) + fib(n-2)\n                   ^\n                  \
    \ n: \n/tmp/tmpznhl3ljq.swift:19:31: error: missing argument label 'n:' in call\n\
    \        return fib(n-1) + fib(n-2)\n                              ^\n       \
    \                       n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  let\
    \ cache = Array(0..<n).map { [$0, $0] }\n  let fib0 = cache[0]\n  let fib1 = cache[1]\n\
    \  for i in 2..<n {\n    fib0 = fib1\n    fib1 = cache[i] + fib0\n  }\n  return\
    \ fib1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpcacp8970.swift:14:5: error: cannot assign to value: 'fib0' is a\
    \ 'let' constant\n    fib0 = fib1\n    ^~~~\n/tmp/tmpcacp8970.swift:11:3: note:\
    \ change 'let' to 'var' to make it mutable\n  let fib0 = cache[0]\n  ^~~\n  var\n\
    /tmp/tmpcacp8970.swift:15:5: error: cannot assign to value: 'fib1' is a 'let'\
    \ constant\n    fib1 = cache[i] + fib0\n    ^~~~\n/tmp/tmpcacp8970.swift:12:3:\
    \ note: change 'let' to 'var' to make it mutable\n  let fib1 = cache[1]\n  ^~~\n\
    \  var\n/tmp/tmpcacp8970.swift:17:10: error: cannot convert return expression\
    \ of type '[Int]' to return type 'Int'\n  return fib1\n         ^~~~\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ fib(n - 1) + fib(n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpeze89lp3.swift:10:14: error: missing argument label 'n:' in call\n\
    \  return fib(n - 1) + fib(n - 2)\n             ^\n             n: \n/tmp/tmpeze89lp3.swift:10:27:\
    \ error: missing argument label 'n:' in call\n  return fib(n - 1) + fib(n - 2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\tswitch\
    \ {\n\tcase n < 2:\n\t\treturn n\n\tcase n == 2:\n\t\treturn 1\n\tdefault:\n\t\
    \treturn fib(n-2) + fib(n-1)\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp1xnsatrw.swift:10:9: error: expected expression in 'switch' statement\n\
    \        switch {\n               ^\n/tmp/tmp1xnsatrw.swift:16:14: error: missing\
    \ argument label 'n:' in call\n                return fib(n-2) + fib(n-1)\n  \
    \                         ^\n                           n: \n/tmp/tmp1xnsatrw.swift:16:25:\
    \ error: missing argument label 'n:' in call\n                return fib(n-2)\
    \ + fib(n-1)\n                                      ^\n                      \
    \                n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n < 2 {\n        return n\n    }\n    return fib(n-2) + fib(n-1)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpl589c6t9.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-2) + fib(n-1)\n               ^\n               n: \n/tmp/tmpl589c6t9.swift:13:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-2) + fib(n-1)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ fib(n - 1) + fib(n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpeze89lp3.swift:10:14: error: missing argument label 'n:' in call\n\
    \  return fib(n - 1) + fib(n - 2)\n             ^\n             n: \n/tmp/tmpeze89lp3.swift:10:27:\
    \ error: missing argument label 'n:' in call\n  return fib(n - 1) + fib(n - 2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return fibHelper(n, 0, 0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpy5d19_zr.swift:10:12: error: cannot find 'fibHelper' in scope\n\
    \    return fibHelper(n, 0, 0, 1)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n < 2 {\n        return n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp8cafumkf.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n - 1) + fib(n - 2)\n               ^\n               n: \n/tmp/tmp8cafumkf.swift:13:29:\
    \ error: missing argument label 'n:' in call\n    return fib(n - 1) + fib(n -\
    \ 2)\n                            ^\n                            n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n == 0 || n == 1 {\n    return n\n  }\n  return fib(n - 1) + fib(n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpuzaov9bj.swift:13:14: error: missing argument label 'n:' in call\n\
    \  return fib(n - 1) + fib(n - 2)\n             ^\n             n: \n/tmp/tmpuzaov9bj.swift:13:27:\
    \ error: missing argument label 'n:' in call\n  return fib(n - 1) + fib(n - 2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a, b Int64\n    _ = Scan(&a, &b, 1, n)\n    return a + b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp4ewxusap.swift:10:14: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n    var a, b Int64\n\
    \             ^\n/tmp/tmp4ewxusap.swift:10:14: note: join the identifiers together\n\
    \    var a, b Int64\n           ~~^~~~~\n           bInt64\n/tmp/tmp4ewxusap.swift:10:9:\
    \ error: type annotation missing in pattern\n    var a, b Int64\n        ^\n/tmp/tmp4ewxusap.swift:10:12:\
    \ error: type annotation missing in pattern\n    var a, b Int64\n           ^\n\
    /tmp/tmp4ewxusap.swift:11:9: error: cannot find 'Scan' in scope\n    _ = Scan(&a,\
    \ &b, 1, n)\n        ^~~~\n/tmp/tmp4ewxusap.swift:12:14: error: cannot convert\
    \ return expression of type 'String' to return type 'Int'\n    return a + b\n\
    \           ~~^~~\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ fibRecursive(n, 1, 1, 1, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp561nl8s8.swift:10:10: error: cannot find 'fibRecursive' in scope\n\
    \  return fibRecursive(n, 1, 1, 1, 1)\n         ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ switch n {\n    case 0:\n        return 0\n    case 1:\n        return 1\n \
    \   case 2:\n        return 2\n    }\n\n    var a = 0\n    var b = 1\n    for\
    \ _ in 0..<n {\n        var tmp = a + b\n        a = b\n        b = tmp\n    }\n\
    \n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpbgt3r8j6.swift:10:5: error: switch must be exhaustive\n    switch\
    \ n {\n    ^\n/tmp/tmpbgt3r8j6.swift:10:5: note: do you want to add a default\
    \ clause?\n    switch n {\n    ^\n/tmp/tmpbgt3r8j6.swift:22:13: warning: variable\
    \ 'tmp' was never mutated; consider changing to 'let' constant\n        var tmp\
    \ = a + b\n        ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var first = 0\n    var second = 1\n    var sum = 0\n\n    for i in 0 ..< n {\n\
    \        sum = first + second\n        first = second\n        second = sum\n\
    \    }\n\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmpcqmsaghi/tmpcqmsaghi.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9442a6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9442762b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9442762988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94427617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcqmsaghi                        0x000055ef41ab4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9442c57460 __libc_start_main +
    245

    6    tmpcqmsaghi                        0x000055ef41ab3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n < 2 {\n    return 1\n  }\n  return fib(n-1) + fib(n-2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpkv34bvo1.swift:13:14: error: missing argument label 'n:' in call\n\
    \  return fib(n-1) + fib(n-2)\n             ^\n             n: \n/tmp/tmpkv34bvo1.swift:13:25:\
    \ error: missing argument label 'n:' in call\n  return fib(n-1) + fib(n-2)\n \
    \                       ^\n                        n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return 1\n    }\n    return fib(n - 2) + fib(n - 1)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpq6fys2_c.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n - 2) + fib(n - 1)\n               ^\n               n: \n/tmp/tmpq6fys2_c.swift:13:29:\
    \ error: missing argument label 'n:' in call\n    return fib(n - 2) + fib(n -\
    \ 1)\n                            ^\n                            n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\tswitch\
    \ n {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn 1\n\tcase 2:\n\t\treturn\
    \ 2\n\tdefault:\n\t\treturn fib(n-1) + fib(n-2)\n\t}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpmsuh_g5l.swift:18:14: error: missing argument label 'n:' in call\n\
    \                return fib(n-1) + fib(n-2)\n                           ^\n  \
    \                         n: \n/tmp/tmpmsuh_g5l.swift:18:25: error: missing argument\
    \ label 'n:' in call\n                return fib(n-1) + fib(n-2)\n           \
    \                           ^\n                                      n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return fib(n - 2) + fib(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpookmrmwt.swift:10:16: error: missing argument label 'n:' in call\n\
    \    return fib(n - 2) + fib(n - 1)\n               ^\n               n: \n/tmp/tmpookmrmwt.swift:10:29:\
    \ error: missing argument label 'n:' in call\n    return fib(n - 2) + fib(n -\
    \ 1)\n                            ^\n                            n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\treturn\
    \ fibFn(n: n)(1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmprfy_ur26.swift:10:9: error: cannot find 'fibFn' in scope\n    \
    \    return fibFn(n: n)(1)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n < 2 {\n        return n\n    } else {\n        let p = fib(n-1) + fib(n-2)\n\
    \        return p\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpn8bfz495.swift:13:21: error: missing argument label 'n:' in call\n\
    \        let p = fib(n-1) + fib(n-2)\n                    ^\n                \
    \    n: \n/tmp/tmpn8bfz495.swift:13:32: error: missing argument label 'n:' in\
    \ call\n        let p = fib(n-1) + fib(n-2)\n                               ^\n\
    \                               n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  switch\
    \ n {\n  case 0:\n    return 0\n  case 1:\n    return 1\n  case 2:\n    return\
    \ 1\n  default:\n    return fib(n-2) + fib(n-1)\n  }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpvigxpfvu.swift:18:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-2) + fib(n-1)\n               ^\n               n: \n/tmp/tmpvigxpfvu.swift:18:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-2) + fib(n-1)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ fib1 = 1\n  var fib2 = 1\n  var next\n  if n <= 0 {\n    next = 1\n  } else\
    \ {\n    next = (fib1 + fib2)\n    fib1 = fib2\n    fib2 = next\n  }\n  return\
    \ next\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp127i1l2f.swift:12:7: error: type annotation missing in pattern\n\
    \  var next\n      ^\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ cache = [Int]()\n  return fibImpl(&cache, n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\n\
    assert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp8_h2yxjs.swift:11:10: error: cannot find 'fibImpl' in scope\n \
    \ return fibImpl(&cache, n)\n         ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return fib_table[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpi4_4z14_.swift:10:12: error: cannot find 'fib_table' in scope\n\
    \    return fib_table[n]\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\tif\
    \ n < 2 {\n\t\treturn n\n\t}\n\treturn fib(n - 1) + fib(n - 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmplws7gt_k.swift:13:13: error: missing argument label 'n:' in call\n\
    \        return fib(n - 1) + fib(n - 2)\n                   ^\n              \
    \     n: \n/tmp/tmplws7gt_k.swift:13:26: error: missing argument label 'n:' in\
    \ call\n        return fib(n - 1) + fib(n - 2)\n                             \
    \   ^\n                                n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ guard n >= 0 && n < 25 else {\n        fatalError(\"fib: n must be in range\
    \ 0..25\")\n    }\n    return n < 2 ? 1 : fib(n - 1) + fib(n - 2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp906kolu9.swift:13:28: error: missing argument label 'n:' in call\n\
    \    return n < 2 ? 1 : fib(n - 1) + fib(n - 2)\n                           ^\n\
    \                           n: \n/tmp/tmp906kolu9.swift:13:41: error: missing\
    \ argument label 'n:' in call\n    return n < 2 ? 1 : fib(n - 1) + fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n < 2 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpsjiwxod4.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmpsjiwxod4.swift:13:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659824454
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n <= 2 {\n    return n\n  }\n  return fib(n - 1) + fib(n - 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp6pgmasli.swift:13:14: error: missing argument label 'n:' in call\n\
    \  return fib(n - 1) + fib(n - 2)\n             ^\n             n: \n/tmp/tmp6pgmasli.swift:13:27:\
    \ error: missing argument label 'n:' in call\n  return fib(n - 1) + fib(n - 2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\tswitch\
    \ n {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn 1\n\tdefault:\n\t\treturn\
    \ fib(n-1) + fib(n-2)\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmphz29y3w3.swift:16:14: error: missing argument label 'n:' in call\n\
    \                return fib(n-1) + fib(n-2)\n                           ^\n  \
    \                         n: \n/tmp/tmphz29y3w3.swift:16:25: error: missing argument\
    \ label 'n:' in call\n                return fib(n-1) + fib(n-2)\n           \
    \                           ^\n                                      n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 { return 1 }\n    return fib(n-1) + fib(n-2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp91__rw68.swift:11:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmp91__rw68.swift:11:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpxsj_66js.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmpxsj_66js.swift:13:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpkuob4jv5.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmpkuob4jv5.swift:13:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ fib0 = 1\n  var fib1 = 1\n  for i in 0..<n {\n    let tmp = fib0\n    fib0 =\
    \ fib1\n    fib1 = tmp + fib1\n  }\n  return fib0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmpl1cr0l3s/tmpl1cr0l3s.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9798edec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9798bd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9798bd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9798bd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1cr0l3s                        0x0000560ba169a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b97990ca460 __libc_start_main +
    245

    6    tmpl1cr0l3s                        0x0000560ba1699fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a = fibHelper(0)\n    var b = fibHelper(1)\n    return a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp5zgzrpg3.swift:10:13: error: cannot find 'fibHelper' in scope\n\
    \    var a = fibHelper(0)\n            ^~~~~~~~~\n/tmp/tmp5zgzrpg3.swift:11:13:\
    \ error: cannot find 'fibHelper' in scope\n    var b = fibHelper(1)\n        \
    \    ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ a = 0, b = 1\n  for i in 1...n {\n    let tmp = b\n    b = a\n    a = tmp +\
    \ b\n  }\n  return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\tif\
    \ n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\treturn fib(n\
    \ - 1) + fib(n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp72yua2ly.swift:16:13: error: missing argument label 'n:' in call\n\
    \        return fib(n - 1) + fib(n - 2)\n                   ^\n              \
    \     n: \n/tmp/tmp72yua2ly.swift:16:26: error: missing argument label 'n:' in\
    \ call\n        return fib(n - 1) + fib(n - 2)\n                             \
    \   ^\n                                n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n < 2 {\n    return 1\n  }\n  return fib(n - 1) + fib(n - 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpxbabtw8y.swift:13:14: error: missing argument label 'n:' in call\n\
    \  return fib(n - 1) + fib(n - 2)\n             ^\n             n: \n/tmp/tmpxbabtw8y.swift:13:27:\
    \ error: missing argument label 'n:' in call\n  return fib(n - 1) + fib(n - 2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ _fib(n, maxValue: 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpfddincpv.swift:10:10: error: cannot find '_fib' in scope\n  return\
    \ _fib(n, maxValue: 2)\n         ^~~~\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  //\
    \ Special cases\n  if n <= 1 { return n }\n  if n == 0 { return 1 }\n  if n ==\
    \ 1 { return 2 }\n\n  var f1 = fib(n: n - 1)\n  var f2 = fib(n: n - 2)\n  return\
    \ f1 + f2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ let n = abs(Int64(n))\n    if n < 2 {\n        return 1\n    }\n    return fib(n-1)\
    \ + fib(n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp8c2l9qo3.swift:14:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmp8c2l9qo3.swift:14:16:\
    \ error: cannot convert value of type 'Int64' to expected argument type 'Int'\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               Int( )\n/tmp/tmp8c2l9qo3.swift:14:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n/tmp/tmp8c2l9qo3.swift:14:27:\
    \ error: cannot convert value of type 'Int64' to expected argument type 'Int'\n\
    \    return fib(n-1) + fib(n-2)\n                          ^\n               \
    \           Int( )\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  let\
    \ a = 1\n  let b = 2\n  for _ in 0..<n {\n    let next = a\n    a = b\n    b =\
    \ next\n  }\n  return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmprrbdi343.swift:14:5: error: cannot assign to value: 'a' is a 'let'\
    \ constant\n    a = b\n    ^\n/tmp/tmprrbdi343.swift:10:3: note: change 'let'\
    \ to 'var' to make it mutable\n  let a = 1\n  ^~~\n  var\n/tmp/tmprrbdi343.swift:15:5:\
    \ error: cannot assign to value: 'b' is a 'let' constant\n    b = next\n    ^\n\
    /tmp/tmprrbdi343.swift:11:3: note: change 'let' to 'var' to make it mutable\n\
    \  let b = 2\n  ^~~\n  var\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\treturn\
    \ isPrime(n) ? 2 : fib(n - 2) + fib(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\n\
    assert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpeobph1ps.swift:10:9: error: cannot find 'isPrime' in scope\n  \
    \      return isPrime(n) ? 2 : fib(n - 2) + fib(n - 1)\n               ^~~~~~~\n\
    /tmp/tmpeobph1ps.swift:10:30: error: missing argument label 'n:' in call\n   \
    \     return isPrime(n) ? 2 : fib(n - 2) + fib(n - 1)\n                      \
    \              ^\n                                    n: \n/tmp/tmpeobph1ps.swift:10:43:\
    \ error: missing argument label 'n:' in call\n        return isPrime(n) ? 2 :\
    \ fib(n - 2) + fib(n - 1)\n                                                 ^\n\
    \                                                 n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ f1 = 1\n  var f2 = 1\n  var fibSum = 0\n  for _ in 0 ..< n {\n    fibSum +=\
    \ f1\n    f1 = f2\n    f2 = fibSum\n  }\n  return fibSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmpyahu5p18/tmpyahu5p18.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcc5a75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcc576cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcc576c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcc576b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyahu5p18                        0x0000560d7ba74335 <unavailable> + 4917

    5    libc.so.6                          0x00002adcc5c61460 __libc_start_main +
    245

    6    tmpyahu5p18                        0x0000560d7ba73fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var result = 1\n    var a = b = 1\n    for _ in 1 ..< n {\n        let tmp =\
    \ a\n        a = b\n        b = tmp + b\n        result = tmp + result\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmppz8q4isl.swift:11:13: error: cannot find 'b' in scope\n    var\
    \ a = b = 1\n            ^\n/tmp/tmppz8q4isl.swift:14:13: error: cannot find 'b'\
    \ in scope\n        a = b\n            ^\n/tmp/tmppz8q4isl.swift:15:9: error:\
    \ cannot find 'b' in scope\n        b = tmp + b\n        ^\n/tmp/tmppz8q4isl.swift:15:19:\
    \ error: cannot find 'b' in scope\n        b = tmp + b\n                  ^\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ x = 0\n  var y = 0\n  for _ in 0..<n {\n    let tmpx = x\n    let tmpy = y\n\
    \    x = y\n    y = tmpx + tmpy\n  }\n  return x\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmpqqytq5na/tmpqqytq5na.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e9c7fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e9c4f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e9c4f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e9c4f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqqytq5na                        0x00005560f1a0a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9e9c9e6460 __libc_start_main +
    245

    6    tmpqqytq5na                        0x00005560f1a09fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978609
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ (1 + n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: Exception
  stderr: 'tmpayhv8xan/tmpayhv8xan.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e5b162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e5ae59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e5ae59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e5ae587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayhv8xan                        0x000055ae2e92c1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b0e5b34e460 __libc_start_main +
    245

    6    tmpayhv8xan                        0x000055ae2e92be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978609
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  //\
    \ https://en.wikipedia.org/wiki/Fibonacci_number#Recursion\n  if n == 0 || n ==\
    \ 1 {\n    return n\n  }\n  return fib(n: n - 2) + fib(n: n - 1)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  //\
    \ Check input value.\n  if n <= 0 || n >= Int64(IntMax) || n == Int64(IntMax)-1\
    \ {\n    return 0\n  }\n\n  // Calculate and return the n-th Fibonacci number.\n\
    \  let x: Int64 = 0\n  let y: Int64 = 1\n  \n  for i in 1 ..< n {\n    let term\
    \ = x + y\n    x = y\n    y = term\n  }\n  return y\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpw63_s6vf.swift:11:27: error: cannot find 'IntMax' in scope\n  if\
    \ n <= 0 || n >= Int64(IntMax) || n == Int64(IntMax)-1 {\n                   \
    \       ^~~~~~\n/tmp/tmpw63_s6vf.swift:11:49: error: cannot find 'IntMax' in scope\n\
    \  if n <= 0 || n >= Int64(IntMax) || n == Int64(IntMax)-1 {\n               \
    \                                 ^~~~~~\n/tmp/tmpw63_s6vf.swift:21:5: error:\
    \ cannot assign to value: 'x' is a 'let' constant\n    x = y\n    ^\n/tmp/tmpw63_s6vf.swift:16:3:\
    \ note: change 'let' to 'var' to make it mutable\n  let x: Int64 = 0\n  ^~~\n\
    \  var\n/tmp/tmpw63_s6vf.swift:22:5: error: cannot assign to value: 'y' is a 'let'\
    \ constant\n    y = term\n    ^\n/tmp/tmpw63_s6vf.swift:17:3: note: change 'let'\
    \ to 'var' to make it mutable\n  let y: Int64 = 1\n  ^~~\n  var\n/tmp/tmpw63_s6vf.swift:24:10:\
    \ error: cannot convert return expression of type 'Int64' to return type 'Int'\n\
    \  return y\n         ^\n         Int( )\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 {\n        return n\n    } else {\n        return fib(n - 1) + fib(n\
    \ - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpjegt5owk.swift:13:20: error: missing argument label 'n:' in call\n\
    \        return fib(n - 1) + fib(n - 2)\n                   ^\n              \
    \     n: \n/tmp/tmpjegt5owk.swift:13:33: error: missing argument label 'n:' in\
    \ call\n        return fib(n - 1) + fib(n - 2)\n                             \
    \   ^\n                                n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  //\
    \ Create a temporary variable\n  var a = 0, b = 1, next\n  if n > 0 {\n    next\
    \ = a + b\n    a = b\n    b = next\n  }\n  return next\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp0w9y1tga.swift:11:21: error: type annotation missing in pattern\n\
    \  var a = 0, b = 1, next\n                    ^\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ _fib(Int(n))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpmaaflubm.swift:10:10: error: cannot find '_fib' in scope\n  return\
    \ _fib(Int(n))\n         ^~~~\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ a = 1\n  var b = 1 \n  for i in 0..n {\n    let temp = a\n    a = b\n    b =\
    \ temp + a\n  }\n  return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp7ruywd0z.swift:12:13: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n  for i in 0..n {\n            ^~\n            ...\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 || n == 1 {\n        return n\n    }\n    return fib(n - 1) + fib(n\
    \ - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpjxnm71dm.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n - 1) + fib(n - 2)\n               ^\n               n: \n/tmp/tmpjxnm71dm.swift:13:29:\
    \ error: missing argument label 'n:' in call\n    return fib(n - 1) + fib(n -\
    \ 2)\n                            ^\n                            n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 {\n        return 0\n    }\n    \n    guard n > 0 else { return 1\
    \ }\n    \n    var a, b = 1 // a = 1, b = 2\n    for i in 1..n {\n        (a,\
    \ b) = (b, a + b)\n    }\n    \n    return b\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\n\
    assert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpmw3w1xbe.swift:16:9: error: type annotation missing in pattern\n\
    \    var a, b = 1 // a = 1, b = 2\n        ^\n/tmp/tmpmw3w1xbe.swift:17:15: error:\
    \ cannot find operator '..' in scope; did you mean '...'?\n    for i in 1..n {\n\
    \              ^~\n              ...\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return fib(n - 1) + fib(n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpuo9e7x24.swift:10:16: error: missing argument label 'n:' in call\n\
    \    return fib(n - 1) + fib(n - 2)\n               ^\n               n: \n/tmp/tmpuo9e7x24.swift:10:29:\
    \ error: missing argument label 'n:' in call\n    return fib(n - 1) + fib(n -\
    \ 2)\n                            ^\n                            n: \n"
  stdout: ''
  timestamp: 1659978560
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ let cache = [1,1]\n    return cache[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b971d8dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b971d5d6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b971d5d6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b971d5d613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b971d5d5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b971d3d5e83 <unavailable> + 188035

    6    tmpabu2s1qc                        0x0000559b3ebf5574 <unavailable> + 5492

    7    tmpabu2s1qc                        0x0000559b3ebf52a8 <unavailable> + 4776

    8    libc.so.6                          0x00002b971dacb460 __libc_start_main +
    245

    9    tmpabu2s1qc                        0x0000559b3ebf4fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 0 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpy4v8tt4m.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmpy4v8tt4m.swift:13:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ fibHelper(n, 1, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpwr7p_ago.swift:10:10: error: cannot find 'fibHelper' in scope\n\
    \  return fibHelper(n, 1, 2)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ _fib(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpqwy1ojir.swift:10:10: error: cannot find '_fib' in scope\n  return\
    \ _fib(n)\n         ^~~~\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ fib(n - 1) + fib(n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpeze89lp3.swift:10:14: error: missing argument label 'n:' in call\n\
    \  return fib(n - 1) + fib(n - 2)\n             ^\n             n: \n/tmp/tmpeze89lp3.swift:10:27:\
    \ error: missing argument label 'n:' in call\n  return fib(n - 1) + fib(n - 2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\tif\
    \ n < 2 {\n\t\treturn n\n\t}\n\treturn fib(n-1) + fib(n-2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpx0ufw0b3.swift:13:13: error: missing argument label 'n:' in call\n\
    \        return fib(n-1) + fib(n-2)\n                   ^\n                  \
    \ n: \n/tmp/tmpx0ufw0b3.swift:13:24: error: missing argument label 'n:' in call\n\
    \        return fib(n-1) + fib(n-2)\n                              ^\n       \
    \                       n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 2 { return n }\n    return fib(n - 1) + fib(n - 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp6a1tmmci.swift:11:16: error: missing argument label 'n:' in call\n\
    \    return fib(n - 1) + fib(n - 2)\n               ^\n               n: \n/tmp/tmp6a1tmmci.swift:11:29:\
    \ error: missing argument label 'n:' in call\n    return fib(n - 1) + fib(n -\
    \ 2)\n                            ^\n                            n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ result: Int = 0\n  var first: Int = 0\n  var second: Int = 0\n  for _ in 0...n\
    \ {\n    first = second\n    second = first+second\n    result += second\n  }\n\
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: Exception
  stderr: 'tmpq_wbrnzo/tmpq_wbrnzo.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2dd520c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2dd217b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2dd217988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2dd2167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq_wbrnzo                        0x0000559eba1fb335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae2dd70c460 __libc_start_main +
    245

    6    tmpq_wbrnzo                        0x0000559eba1fafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ switch n {\n    case 0: return 0\n    case 1: return 1\n    default: return\
    \ fib(n-1) + fib(n-2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpym88ke9j.swift:13:25: error: missing argument label 'n:' in call\n\
    \    default: return fib(n-1) + fib(n-2)\n                        ^\n        \
    \                n: \n/tmp/tmpym88ke9j.swift:13:36: error: missing argument label\
    \ 'n:' in call\n    default: return fib(n-1) + fib(n-2)\n                    \
    \               ^\n                                   n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return (1..<n).reduce(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpecnvce_7.swift:10:28: error: missing argument for parameter #2\
    \ in call\n    return (1..<n).reduce(0)\n                           ^\n      \
    \                     , <#(Int, Int) throws -> Int#>\nSwift.Sequence:2:28: note:\
    \ 'reduce' declared here\n    @inlinable public func reduce<Result>(_ initialResult:\
    \ Result, _ nextPartialResult: (_ partialResult: Result, Self.Element) throws\
    \ -> Result) rethrows -> Result\n                           ^\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n <= 1 {\n    return n\n  } else {\n    return fib(n - 1) + fib(n - 2)\n  }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpnshz6wrx.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n - 1) + fib(n - 2)\n               ^\n               n: \n/tmp/tmpnshz6wrx.swift:13:29:\
    \ error: missing argument label 'n:' in call\n    return fib(n - 1) + fib(n -\
    \ 2)\n                            ^\n                            n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ fib(n, max: 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp740nn_cv.swift:10:22: error: extra argument 'max' in call\n  return\
    \ fib(n, max: 0)\n            ~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var fib1: Int = 0\n    var fib2: Int = 0\n    for _ in 0 ..< n {\n        fib1\
    \ += fib2\n        fib2 = fib1\n        fib1 -= fib2\n    }\n    return fib1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmpdobylmp_/tmpdobylmp_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68aa770c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68aa467b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68aa467988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68aa4667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdobylmp_                        0x000055ce186ab335 <unavailable> + 4917

    5    libc.so.6                          0x00002b68aa95c460 __libc_start_main +
    245

    6    tmpdobylmp_                        0x000055ce186aafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978609
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ func fibRecursion(_ a: Int,_ b: Int) -> Int {\n        guard a <= b else {\n\
    \            return b\n        }\n        return fibRecursion(a + 1,b + b)\n \
    \   }\n    return fibRecursion(0,1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ // return in last iteration\n    if n == 0 || n == 1 {\n        return 1\n \
    \   }\n\n    return fib(n-1) + fib(n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpu42si8sx.swift:15:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmpu42si8sx.swift:15:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\treturn\
    \ _fibonacci(n).sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpgnbgj6kf.swift:10:9: error: cannot find '_fibonacci' in scope\n\
    \        return _fibonacci(n).sum\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ result = 0\n  var prev = 0\n  for i in 0 ..< n {\n    result += prev\n    prev\
    \ = result - 1\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n:\
    \ 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmpcjksssar/tmpcjksssar.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed7fdaec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed7faa5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed7faa5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed7faa47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcjksssar                        0x0000558d641a8335 <unavailable> + 4917

    5    libc.so.6                          0x00002aed7ff9a460 __libc_start_main +
    245

    6    tmpcjksssar                        0x0000558d641a7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n < 0 {\n        return 0\n    }\n\n    return fib(n-2) + fib(n-1)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpwoezm_ne.swift:14:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-2) + fib(n-1)\n               ^\n               n: \n/tmp/tmpwoezm_ne.swift:14:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-2) + fib(n-1)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\tswitch\
    \ n {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn 1\n\tdefault:\n\t\treturn\
    \ fib(n-1) + fib(n-2)\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmphz29y3w3.swift:16:14: error: missing argument label 'n:' in call\n\
    \                return fib(n-1) + fib(n-2)\n                           ^\n  \
    \                         n: \n/tmp/tmphz29y3w3.swift:16:25: error: missing argument\
    \ label 'n:' in call\n                return fib(n-1) + fib(n-2)\n           \
    \                           ^\n                                      n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\tswitch\
    \ n {\n\tcase 0: return 0\n\tcase 1: return 1\n\tcase 2: return 1\n\tdefault:\
    \ return fib(n-1) + fib(n-2)\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpadwzl_b6.swift:14:22: error: missing argument label 'n:' in call\n\
    \        default: return fib(n-1) + fib(n-2)\n                            ^\n\
    \                            n: \n/tmp/tmpadwzl_b6.swift:14:33: error: missing\
    \ argument label 'n:' in call\n        default: return fib(n-1) + fib(n-2)\n \
    \                                      ^\n                                   \
    \    n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n < 2 {\n        return 1\n    }\n    return fib(n - 2) + fib(n - 1)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpguc_imw0.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n - 2) + fib(n - 1)\n               ^\n               n: \n/tmp/tmpguc_imw0.swift:13:29:\
    \ error: missing argument label 'n:' in call\n    return fib(n - 2) + fib(n -\
    \ 1)\n                            ^\n                            n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n < 2 {\n    return n\n  }\n  return fib(n-1) + fib(n-2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpqp45dyzy.swift:13:14: error: missing argument label 'n:' in call\n\
    \  return fib(n-1) + fib(n-2)\n             ^\n             n: \n/tmp/tmpqp45dyzy.swift:13:25:\
    \ error: missing argument label 'n:' in call\n  return fib(n-1) + fib(n-2)\n \
    \                       ^\n                        n: \n"
  stdout: ''
  timestamp: 1659824454
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ f1: Int = 0\n  var f2: Int = 0\n  if n <= 0 {\n    return 0\n  }\n  f1 = f1\n\
    \  f2 = f2\n  for _ in 1..n {\n    f1, f2 = f2, f1 + f2\n  }\n  return f2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpqtk7gvwq.swift:18:7: error: consecutive statements on a line must\
    \ be separated by ';'\n    f1, f2 = f2, f1 + f2\n      ^\n      ;\n/tmp/tmpqtk7gvwq.swift:18:7:\
    \ error: expected expression\n    f1, f2 = f2, f1 + f2\n      ^\n/tmp/tmpqtk7gvwq.swift:15:6:\
    \ error: assigning a variable to itself\n  f1 = f1\n  ~~ ^ ~~\n/tmp/tmpqtk7gvwq.swift:16:6:\
    \ error: assigning a variable to itself\n  f2 = f2\n  ~~ ^ ~~\n/tmp/tmpqtk7gvwq.swift:17:13:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n  for _ in 1..n\
    \ {\n            ^~\n            ...\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a : Int = 0\n    var b : Int = 0\n    \n    for _ in 0..<n {\n        (a,\
    \ b) = (b, a+b)\n    }\n    \n    return b\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\n\
    assert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmp4hi66jji/tmp4hi66jji.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b744ffd2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b744fcc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b744fcc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b744fcc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4hi66jji                        0x0000558994277335 <unavailable> + 4917

    5    libc.so.6                          0x00002b74501be460 __libc_start_main +
    245

    6    tmp4hi66jji                        0x0000558994276fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 0 {\n        return 0\n    }\n\n    return fib(n-1) + fib(n-2)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpibu88w7n.swift:14:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmpibu88w7n.swift:14:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ func fib(head : Int) -> Int {\n        return head + fib(head - 1)\n    }\n\n\
    \    if n == 0 || n == 1 {\n        return 1\n    }\n    return fib(n - 1)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpdsiqbr6l.swift:11:27: error: missing argument label 'head:' in\
    \ call\n        return head + fib(head - 1)\n                          ^\n   \
    \                       head: \n/tmp/tmpdsiqbr6l.swift:17:16: error: missing argument\
    \ label 'head:' in call\n    return fib(n - 1)\n               ^\n           \
    \    head: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n < 2 {\n    return n\n  }\n  return fib(n-1) + fib(n-2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpqp45dyzy.swift:13:14: error: missing argument label 'n:' in call\n\
    \  return fib(n-1) + fib(n-2)\n             ^\n             n: \n/tmp/tmpqp45dyzy.swift:13:25:\
    \ error: missing argument label 'n:' in call\n  return fib(n-1) + fib(n-2)\n \
    \                       ^\n                        n: \n"
  stdout: ''
  timestamp: 1659824454
- exit_code: -1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ func fib(_ i: Int) -> Int {\n        return fib(i+1) + fib(i-1)\n    }\n   \
    \ return fib(n) % 2147483647\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978615
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ let result = n <= 0 ? 0 : fib(n - 1) + fib(n - 2)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpdlu412b0.swift:10:35: error: missing argument label 'n:' in call\n\
    \    let result = n <= 0 ? 0 : fib(n - 1) + fib(n - 2)\n                     \
    \             ^\n                                  n: \n/tmp/tmpdlu412b0.swift:10:48:\
    \ error: missing argument label 'n:' in call\n    let result = n <= 0 ? 0 : fib(n\
    \ - 1) + fib(n - 2)\n                                               ^\n      \
    \                                         n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\tif\
    \ n <= 0 {\n\t\treturn 0\n\t}\n\treturn fib(n - 1) + fib(n - 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpx969b7bq.swift:13:13: error: missing argument label 'n:' in call\n\
    \        return fib(n - 1) + fib(n - 2)\n                   ^\n              \
    \     n: \n/tmp/tmpx969b7bq.swift:13:26: error: missing argument label 'n:' in\
    \ call\n        return fib(n - 1) + fib(n - 2)\n                             \
    \   ^\n                                n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ fib(n - 1) + fib(n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpeze89lp3.swift:10:14: error: missing argument label 'n:' in call\n\
    \  return fib(n - 1) + fib(n - 2)\n             ^\n             n: \n/tmp/tmpeze89lp3.swift:10:27:\
    \ error: missing argument label 'n:' in call\n  return fib(n - 1) + fib(n - 2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n < 1 {\n        return 0\n    }\n    \n    return fib(n-1) + fib(n-2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp6lao1v18.swift:14:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmp6lao1v18.swift:14:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ // use tail recursion, saving some stack space\n    func fibHelper(_ n: Int,\
    \ _ result: inout Int) -> Int {\n        guard n >= 0 else {\n            result\
    \ = 0\n            return 1\n        }\n\n        if n == 0 {\n            result\
    \ = 0\n            return 1\n        }\n\n        fibHelper(n - 1, &result)\n\
    \        result\n    }\n\n    return fibHelper(n, &0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpufhd7dsq.swift:22:9: warning: result of call to 'fibHelper' is\
    \ unused\n        fibHelper(n - 1, &result)\n        ^        ~~~~~~~~~~~~~~~~\n\
    /tmp/tmpufhd7dsq.swift:23:9: warning: variable is unused\n        result\n   \
    \     ^~~~~~\n/tmp/tmpufhd7dsq.swift:26:25: error: cannot pass immutable value\
    \ as inout argument: literals are not mutable\n    return fibHelper(n, &0)\n \
    \                       ^~\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  func\
    \ fibonacci(index: Int) -> Int {\n    if index > 0 {\n      return fibonacci(index\
    \ - 1) + fibonacci(index - 2)\n    }\n    return 0\n  }\n\n  return fibonacci(n)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpen8ficr9.swift:12:24: error: missing argument label 'index:' in\
    \ call\n      return fibonacci(index - 1) + fibonacci(index - 2)\n           \
    \            ^\n                       index: \n/tmp/tmpen8ficr9.swift:12:47:\
    \ error: missing argument label 'index:' in call\n      return fibonacci(index\
    \ - 1) + fibonacci(index - 2)\n                                              ^\n\
    \                                              index: \n/tmp/tmpen8ficr9.swift:17:20:\
    \ error: missing argument label 'index:' in call\n  return fibonacci(n)\n    \
    \               ^\n                   index: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpkuob4jv5.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmpkuob4jv5.swift:13:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 || n == 1 {\n        return 1\n    }\n    return fib(n - 1) + fib(n\
    \ - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpv0ph5l5h.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n - 1) + fib(n - 2)\n               ^\n               n: \n/tmp/tmpv0ph5l5h.swift:13:29:\
    \ error: missing argument label 'n:' in call\n    return fib(n - 1) + fib(n -\
    \ 2)\n                            ^\n                            n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var next: Int\n    var next2: Int\n    next = next2 = 1\n    for i in 1..n {\n\
    \        next = next2 + next\n        next2 = next\n    }\n    return next\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmplsqh3yqs.swift:12:18: error: cannot assign value of type '()' to\
    \ type 'Int'\n    next = next2 = 1\n           ~~~~~~^~~\n/tmp/tmplsqh3yqs.swift:13:15:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n    for i in\
    \ 1..n {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ let cache = [0, 1]\n    if n >= 2 { cache[n] = fib(n-1) + fib(n-2) }\n    return\
    \ cache[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpen_z3fw7.swift:11:22: error: cannot assign through subscript: 'cache'\
    \ is a 'let' constant\n    if n >= 2 { cache[n] = fib(n-1) + fib(n-2) }\n    \
    \            ~~~~~^\n/tmp/tmpen_z3fw7.swift:10:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let cache = [0, 1]\n    ^~~\n    var\n/tmp/tmpen_z3fw7.swift:11:32:\
    \ error: missing argument label 'n:' in call\n    if n >= 2 { cache[n] = fib(n-1)\
    \ + fib(n-2) }\n                               ^\n                           \
    \    n: \n/tmp/tmpen_z3fw7.swift:11:43: error: missing argument label 'n:' in\
    \ call\n    if n >= 2 { cache[n] = fib(n-1) + fib(n-2) }\n                   \
    \                       ^\n                                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ a = 0\n  var b = 1\n  for _ in 0..<n {\n    let next = a + b\n    a = b\n  \
    \  b = next\n  }\n  return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmp94pipj3n/tmp94pipj3n.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc665cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc6353b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc6353988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc63527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp94pipj3n                        0x0000556199b88335 <unavailable> + 4917

    5    libc.so.6                          0x00002b5bc6848460 __libc_start_main +
    245

    6    tmp94pipj3n                        0x0000556199b87fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a, b Int\n    \n    // first two terms are 0\n    if n == 0 || n == 1 {\n\
    \        return n\n    }\n    \n    // otherwise calculate fib(n-1) and fib(n-2)\n\
    \    a, b = b, a + b\n    if n < 0 {\n        n += a\n        n -= b\n    }\n\
    \    \n    // return the result\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\n\
    assert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpoikjbit3.swift:10:14: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n    var a, b Int\n \
    \            ^\n/tmp/tmpoikjbit3.swift:10:14: note: join the identifiers together\n\
    \    var a, b Int\n           ~~^~~\n           bInt\n/tmp/tmpoikjbit3.swift:18:6:\
    \ error: consecutive statements on a line must be separated by ';'\n    a, b =\
    \ b, a + b\n     ^\n     ;\n/tmp/tmpoikjbit3.swift:18:6: error: expected expression\n\
    \    a, b = b, a + b\n     ^\n/tmp/tmpoikjbit3.swift:10:9: error: type annotation\
    \ missing in pattern\n    var a, b Int\n        ^\n/tmp/tmpoikjbit3.swift:10:12:\
    \ error: type annotation missing in pattern\n    var a, b Int\n           ^\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ a = 1 // a is the base of Fibonacci sequence\n  var b = 1 // b is the base of\
    \ Fibonacci sequence\n  var i = 0 // i is the base of Fibonacci sequence\n  var\
    \ tmp = 0 // tmp is temporary variable used to calculate Fibonacci sequence\n\
    \  \n  for i = 2; i <= n; i++) {\n    tmp = a + b\n    a = b\n    b = tmp\n  }\n\
    \n  return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpstdr1ii5.swift:15:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for i = 2; i <= n; i++) {\n  ^   ~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n == 0 || n == 1 {\n        return n\n    }\n\n    return fib(n-1) + fib(n-2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp3qsjawb5.swift:14:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmp3qsjawb5.swift:14:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  return\
    \ fibImpl(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpf4gqgxta.swift:10:10: error: cannot find 'fibImpl' in scope\n \
    \ return fibImpl(n - 1)\n         ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 0
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n == 0 || n == 1 {\n    return n\n  }\n\n  return fib(n: n - 1) + fib(n: n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n:\
    \ 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12)\
    \ == 144)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n < 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpwthsz7kv.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmpwthsz7kv.swift:13:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    for _ in 0..<n {\n\
    \        c = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'tmpdwbrz7lv/tmpdwbrz7lv.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b4244dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b42144b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b42144988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b421437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdwbrz7lv                        0x00005597e861e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b2b42639460 __libc_start_main +
    245

    6    tmpdwbrz7lv                        0x00005597e861dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return fibAux(n, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp_608vai9.swift:10:12: error: cannot find 'fibAux' in scope\n  \
    \  return fibAux(n, 0)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n <= 1 {\n    return n\n  }\n\n  return fib(n - 1) + fib(n - 2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmprgilnus3.swift:14:14: error: missing argument label 'n:' in call\n\
    \  return fib(n - 1) + fib(n - 2)\n             ^\n             n: \n/tmp/tmprgilnus3.swift:14:27:\
    \ error: missing argument label 'n:' in call\n  return fib(n - 1) + fib(n - 2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  //\
    \ O(N), linear recursion.\n  var a = 1;\n  var b = 1;\n  for i := 0; i < n; i++\
    \ {\n    a, b = b, a+b;\n  }\n  return a;\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\n\
    assert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp7enulpot.swift:13:10: error: expected type\n  for i := 0; i < n;\
    \ i++ {\n         ^\n          <#type#>\n/tmp/tmp7enulpot.swift:13:10: error:\
    \ expected 'in' after for-each pattern\n  for i := 0; i < n; i++ {\n         ^\n\
    /tmp/tmp7enulpot.swift:13:10: error: expected Sequence expression for for-each\
    \ loop\n  for i := 0; i < n; i++ {\n         ^\n/tmp/tmp7enulpot.swift:14:6: error:\
    \ consecutive statements on a line must be separated by ';'\n    a, b = b, a+b;\n\
    \     ^\n     ;\n/tmp/tmp7enulpot.swift:14:6: error: expected expression\n   \
    \ a, b = b, a+b;\n     ^\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ result = 1\n  for number in 1...n {\n    result = result + result\n  }\n  return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: Exception
  stderr: 'tmp0w4txqfo/tmp0w4txqfo.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48eee5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48eeb54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48eeb54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48eeb537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0w4txqfo                        0x000055fd12188335 <unavailable> + 4917

    5    libc.so.6                          0x00002b48ef049460 __libc_start_main +
    245

    6    tmp0w4txqfo                        0x000055fd12187fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n\tif\
    \ n < 2 {\n\t\treturn n\n\t}\n\treturn fib(n-2) + fib(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmp778y25t2.swift:13:13: error: missing argument label 'n:' in call\n\
    \        return fib(n-2) + fib(n-1)\n                   ^\n                  \
    \ n: \n/tmp/tmp778y25t2.swift:13:24: error: missing argument label 'n:' in call\n\
    \        return fib(n-2) + fib(n-1)\n                              ^\n       \
    \                       n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ switch n {\n    case 0:\n        return 0\n    case 1:\n        return 1\n \
    \   case 2:\n        return 2\n    }\n    var a = 0\n    var b = 1\n    for _\
    \ in 0..<n {\n        var c = a + b\n        a = b\n        b = c\n    }\n   \
    \ return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmph437p70c.swift:10:5: error: switch must be exhaustive\n    switch\
    \ n {\n    ^\n/tmp/tmph437p70c.swift:10:5: note: do you want to add a default\
    \ clause?\n    switch n {\n    ^\n/tmp/tmph437p70c.swift:21:13: warning: variable\
    \ 'c' was never mutated; consider changing to 'let' constant\n        var c =\
    \ a + b\n        ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpxsj_66js.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmpxsj_66js.swift:13:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  //\
    \ TODO\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: Exception
  stderr: 'tmpnqhvksn4/tmpnqhvksn4.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab860191c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab85fe88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab85fe88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab85fe877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnqhvksn4                        0x00005574e201d1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ab86037d460 __libc_start_main +
    245

    6    tmpnqhvksn4                        0x00005574e201ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n < 2 {\n        return 1\n    }\n    return fib(n-2) + fib(n-1)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpsdilluwx.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-2) + fib(n-1)\n               ^\n               n: \n/tmp/tmpsdilluwx.swift:13:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-2) + fib(n-1)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n < 1 {\n        return 0\n    }\n\n    if n < 2 {\n        return 1\n  \
    \  }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\n\
    assert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpgnmjnmf6.swift:18:16: error: missing argument label 'n:' in call\n\
    \    return fib(n - 1) + fib(n - 2)\n               ^\n               n: \n/tmp/tmpgnmjnmf6.swift:18:29:\
    \ error: missing argument label 'n:' in call\n    return fib(n - 1) + fib(n -\
    \ 2)\n                            ^\n                            n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpkuob4jv5.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmpkuob4jv5.swift:13:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ return fibonacci(n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10)\
    \ == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) ==\
    \ 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpsunkhzsv.swift:10:12: error: cannot find 'fibonacci' in scope\n\
    \    return fibonacci(n - 2)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: -4
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ var fib = [0, 1]\n    for i in 2...n {\n        fib[i] = fib[i - 1] + fib[i\
    \ - 2]\n    }\n    return fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac527e7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac527b76561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac527b76286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac527b7613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac527b75bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac5279757ec <unavailable> + 186348

    6    tmpq2gzhp_t                        0x00005555d0212905 <unavailable> + 6405

    7    tmpq2gzhp_t                        0x00005555d0212478 <unavailable> + 5240

    8    libc.so.6                          0x00002ac52806b460 __libc_start_main +
    245

    9    tmpq2gzhp_t                        0x00005555d0212199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  //\
    \ Create a stack based buffer with a capacity of n\n  var fibStack = Array<Int>(capacity:\
    \ n)\n  fibStack.push(fibStack[0], fibStack[1], 0)\n  var fibResult = 0\n  var\
    \ fibStackSize = 0\n\n  // For each number in fibonacci series\n  for _ in 0 ..<\
    \ n {\n    // For each number in the stack\n    for _ in 0 ..< fibStackSize {\n\
    \      // Add the number on top of the stack to the result of the addition\n \
    \     fibResult = fibResult + fibStack[fibStackSize - 1]\n      fibStack[fibStackSize]\
    \ = fibStack[fibStackSize - 1]\n      fibStackSize += 1\n    }\n  }\n\n  return\
    \ fibResult\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\n\
    assert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n:\
    \ 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpjvnbi4r9.swift:11:28: error: incorrect argument label in call (have\
    \ 'capacity:', expected 'arrayLiteral:')\n  var fibStack = Array<Int>(capacity:\
    \ n)\n                           ^~~~~~~~~\n                            arrayLiteral\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n <= 1 {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpm4r6a4h9.swift:13:16: error: missing argument label 'n:' in call\n\
    \    return fib(n - 1) + fib(n - 2)\n               ^\n               n: \n/tmp/tmpm4r6a4h9.swift:13:29:\
    \ error: missing argument label 'n:' in call\n    return fib(n - 1) + fib(n -\
    \ 2)\n                            ^\n                            n: \n"
  stdout: ''
  timestamp: 1659978560
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n   \
    \ if n < 2 {\n        return 1\n    }\n\n    return fib(n-1) + fib(n-2)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpn6vt42tm.swift:14:16: error: missing argument label 'n:' in call\n\
    \    return fib(n-1) + fib(n-2)\n               ^\n               n: \n/tmp/tmpn6vt42tm.swift:14:27:\
    \ error: missing argument label 'n:' in call\n    return fib(n-1) + fib(n-2)\n\
    \                          ^\n                          n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  if\
    \ n < 2 {\n    return n\n  }\n  return fib(n-2) + fib(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n:\
    \ 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmpncfixa1b.swift:13:14: error: missing argument label 'n:' in call\n\
    \  return fib(n-2) + fib(n-1)\n             ^\n             n: \n/tmp/tmpncfixa1b.swift:13:25:\
    \ error: missing argument label 'n:' in call\n  return fib(n-2) + fib(n-1)\n \
    \                       ^\n                        n: \n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
    \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n  var\
    \ a = b = 0\n  return func next() -> Int {\n    defer { a, b = b, a+b }\n    return\
    \ n == 0 ? a : next(n - 1)\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n:\
    \ 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11)\
    \ == 89)\nassert(fib(n: 12) == 144)"
  status: SyntaxError
  stderr: "/tmp/tmppkwvtfpr.swift:11:9: error: consecutive statements on a line must\
    \ be separated by ';'\n  return func next() -> Int {\n        ^\n        ;\n/tmp/tmppkwvtfpr.swift:12:14:\
    \ error: consecutive statements on a line must be separated by ';'\n    defer\
    \ { a, b = b, a+b }\n             ^\n             ;\n/tmp/tmppkwvtfpr.swift:12:14:\
    \ error: expected expression\n    defer { a, b = b, a+b }\n             ^\n/tmp/tmppkwvtfpr.swift:10:11:\
    \ error: cannot find 'b' in scope\n  var a = b = 0\n          ^\n/tmp/tmppkwvtfpr.swift:11:3:\
    \ error: non-void function should return a value\n  return func next() -> Int\
    \ {\n  ^\n/tmp/tmppkwvtfpr.swift:13:32: error: argument passed to call that takes\
    \ no arguments\n    return n == 0 ? a : next(n - 1)\n                        \
    \    ~~~^~~~\n"
  stdout: ''
  timestamp: 1659978609
