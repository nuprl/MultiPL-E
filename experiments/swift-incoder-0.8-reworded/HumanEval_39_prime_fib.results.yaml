language: swift
name: HumanEval_39_prime_fib
results:
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib = [1, 2, 3, 5, 8, 13,\
    \ 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    let limit = Double(fib.count)\n\
    \    let remainder = Double(n) / limit\n    let remainderInt = Int(remainder)\n\
    \    let result = fib[remainderInt] + fib[remainderInt - 1]\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6df1653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6df134a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6df134a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6df134a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6df1349bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6df1149e83 <unavailable> + 188035

    6    tmpwdamc6yf                        0x000055e7fd9a6a98 <unavailable> + 6808

    7    tmpwdamc6yf                        0x000055e7fd9a639b <unavailable> + 5019

    8    libc.so.6                          0x00002b6df183f460 __libc_start_main +
    245

    9    tmpwdamc6yf                        0x000055e7fd9a60b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  return IntMax(prime_prime_prime(n),\
    \ prime_prime(n))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpf2r138k7.swift:14:10: error: cannot find 'IntMax' in scope\n  return\
    \ IntMax(prime_prime_prime(n), prime_prime(n))\n         ^~~~~~\n/tmp/tmpf2r138k7.swift:14:17:\
    \ error: cannot find 'prime_prime_prime' in scope\n  return IntMax(prime_prime_prime(n),\
    \ prime_prime(n))\n                ^~~~~~~~~~~~~~~~~\n/tmp/tmpf2r138k7.swift:14:39:\
    \ error: cannot find 'prime_prime' in scope\n  return IntMax(prime_prime_prime(n),\
    \ prime_prime(n))\n                                      ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  var first = 0\n  var second =\
    \ 1\n  var isPrime = false\n\n  for _ in 0..<n {\n    let temp = first\n    first\
    \ = second\n    second = temp + second\n\n    if isPrime {\n      return second\n\
    \    }\n\n    if first % second != 0 {\n      isPrime = false\n    } else {\n\
    \      isPrime = true\n    }\n  }\n\n  return second\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpxxmet1xj/tmpxxmet1xj.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f41458c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f4114fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f4114f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f4114e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxxmet1xj                        0x000055a6d47a6338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0f41644460 __libc_start_main +
    245

    6    tmpxxmet1xj                        0x000055a6d47a5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  // prime fibonacci numbers is\
    \ already a very large number.\n  // the result will always be less than the original\
    \ input\n  // number `n`\n  if n <= 2 {\n    return n\n  }\n  if n > 2 {\n   \
    \ var a = 2\n    var b = 5\n    for _ in 0..<n {\n      let c = b\n      b +=\
    \ a\n      a = c\n    }\n    return b\n  }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmpp1xsmj1v.swift:30:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tif n <= 1 {\n\t\treturn 2\n\t\
    }\n\tif n == 2 {\n\t\treturn 3\n\t}\n\treturn fib(n - 1) + fib(n - 2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8vq8bk47.swift:20:9: error: cannot find 'fib' in scope\n      \
    \  return fib(n - 1) + fib(n - 2)\n               ^~~\n/tmp/tmp8vq8bk47.swift:20:22:\
    \ error: cannot find 'fib' in scope\n        return fib(n - 1) + fib(n - 2)\n\
    \                            ^~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmprv2gql8b.swift:18:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmprv2gql8b.swift:18:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmprv2gql8b.swift:20:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n       \
    \              ^\n                     n: \n/tmp/tmprv2gql8b.swift:20:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tif n > 0 {\n\t\tvar prev, cur\
    \ Int = 0\n\t\tvar result Int = Int(sqrt(Double(n)))\n\t\tfor var i = 0; i < result;\
    \ i++ {\n\t\t\tprev = cur\n\t\t\tcur = (prev + cur) % Int((n + 1) / 2)\n\t\t}\n\
    \t\treturn cur\n\t}\n\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpv6sg941d.swift:15:17: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n                var\
    \ prev, cur Int = 0\n                              ^\n/tmp/tmpv6sg941d.swift:15:17:\
    \ note: join the identifiers together\n                var prev, cur Int = 0\n\
    \                          ~~~~^~~\n                          curInt\n/tmp/tmpv6sg941d.swift:16:14:\
    \ error: found an unexpected second identifier in variable declaration; is there\
    \ an accidental break?\n                var result Int = Int(sqrt(Double(n)))\n\
    \                           ^\n/tmp/tmpv6sg941d.swift:16:14: note: join the identifiers\
    \ together\n                var result Int = Int(sqrt(Double(n)))\n          \
    \          ~~~~~~~^~~\n                    resultInt\n/tmp/tmpv6sg941d.swift:17:3:\
    \ error: C-style for statement has been removed in Swift 3\n                for\
    \ var i = 0; i < result; i++ {\n                ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpv6sg941d.swift:15:7: error: type annotation missing in pattern\n     \
    \           var prev, cur Int = 0\n                    ^\n/tmp/tmpv6sg941d.swift:16:24:\
    \ error: cannot find 'sqrt' in scope\n                var result Int = Int(sqrt(Double(n)))\n\
    \                                     ^~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let sqrt5 = Int(sqrt5.sqrt()\
    \ * 2)\n    return ((n & 1) * prime_fib((n >> 1) + 1) + prime_fib((n >> 2) + 1)\
    \ + prime_fib((n >> 3) + 3) + prime_fib((n >> 4) + 5)) % sqrt5\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpzlpf9pkp.swift:14:21: error: use of local variable 'sqrt5' before\
    \ its declaration\n    let sqrt5 = Int(sqrt5.sqrt() * 2)\n                   \
    \ ^\n/tmp/tmpzlpf9pkp.swift:14:9: note: 'sqrt5' declared here\n    let sqrt5 =\
    \ Int(sqrt5.sqrt() * 2)\n        ^\n/tmp/tmpzlpf9pkp.swift:15:33: error: missing\
    \ argument label 'n:' in call\n    return ((n & 1) * prime_fib((n >> 1) + 1) +\
    \ prime_fib((n >> 2) + 1) + prime_fib((n >> 3) + 3) + prime_fib((n >> 4) + 5))\
    \ % sqrt5\n                                ^\n                               \
    \ n: \n/tmp/tmpzlpf9pkp.swift:15:59: error: missing argument label 'n:' in call\n\
    \    return ((n & 1) * prime_fib((n >> 1) + 1) + prime_fib((n >> 2) + 1) + prime_fib((n\
    \ >> 3) + 3) + prime_fib((n >> 4) + 5)) % sqrt5\n                            \
    \                              ^\n                                           \
    \               n: \n/tmp/tmpzlpf9pkp.swift:15:85: error: missing argument label\
    \ 'n:' in call\n    return ((n & 1) * prime_fib((n >> 1) + 1) + prime_fib((n >>\
    \ 2) + 1) + prime_fib((n >> 3) + 3) + prime_fib((n >> 4) + 5)) % sqrt5\n     \
    \                                                                            \
    \   ^\n                                                                      \
    \              n: \n/tmp/tmpzlpf9pkp.swift:15:111: error: missing argument label\
    \ 'n:' in call\n    return ((n & 1) * prime_fib((n >> 1) + 1) + prime_fib((n >>\
    \ 2) + 1) + prime_fib((n >> 3) + 3) + prime_fib((n >> 4) + 5)) % sqrt5\n     \
    \                                                                            \
    \                             ^\n                                            \
    \                                                                  n: \n"
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ 0\n    }\n\n    var result = 1\n\n    for _ in 1..<n {\n        result = result\
    \ + result\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmptmxgmn_2/tmptmxgmn_2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addcb2e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addcafdcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addcafdc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addcafdb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptmxgmn_2                        0x0000560b93e2e338 <unavailable> + 4920

    5    libc.so.6                          0x00002addcb4d1460 __libc_start_main +
    245

    6    tmptmxgmn_2                        0x0000560b93e2dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tswitch n {\n\tcase 1:\n\t\treturn\
    \ 2\n\tcase 2:\n\t\treturn 3\n\tcase 3:\n\t\treturn 5\n\tcase 5:\n\t\treturn 13\n\
    \tcase 13:\n\t\treturn 89\n\tcase 89:\n\t\treturn prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n\tdefault:\n\t\tprecondition(n > 2)\n\t\treturn prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpuu6ama1g.swift:26:20: error: missing argument label 'n:' in call\n\
    \                return prime_fib(n - 1) + prime_fib(n - 2)\n                \
    \                 ^\n                                 n: \n/tmp/tmpuu6ama1g.swift:26:39:\
    \ error: missing argument label 'n:' in call\n                return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n                                                  \
    \  ^\n                                                    n: \n/tmp/tmpuu6ama1g.swift:29:20:\
    \ error: missing argument label 'n:' in call\n                return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n                                 ^\n              \
    \                   n: \n/tmp/tmpuu6ama1g.swift:29:39: error: missing argument\
    \ label 'n:' in call\n                return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                                    ^\n                \
    \                                    n: \n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  var fib = 1\n  for i in 2..<n\
    \ {\n    if i > fib {\n      fib = fibonacci_prime(i)\n    }\n  }\n  return fib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp9kxi3l96.swift:17:13: error: cannot find 'fibonacci_prime' in scope\n\
    \      fib = fibonacci_prime(i)\n            ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return Int(Fib(n - Int(sqrt2integer(Double(n)))))\
    \ % Int(sqrt2integer(Double(n)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpnusn7_do.swift:14:16: error: cannot find 'Fib' in scope\n    return\
    \ Int(Fib(n - Int(sqrt2integer(Double(n))))) % Int(sqrt2integer(Double(n)))\n\
    \               ^~~\n/tmp/tmpnusn7_do.swift:14:28: error: cannot find 'sqrt2integer'\
    \ in scope\n    return Int(Fib(n - Int(sqrt2integer(Double(n))))) % Int(sqrt2integer(Double(n)))\n\
    \                           ^~~~~~~~~~~~\n/tmp/tmpnusn7_do.swift:14:61: error:\
    \ cannot find 'sqrt2integer' in scope\n    return Int(Fib(n - Int(sqrt2integer(Double(n)))))\
    \ % Int(sqrt2integer(Double(n)))\n                                           \
    \                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var ret: Int = 0\n    \n  \
    \  var primes: Int = 0\n    \n    for var i = 2; i < n; i++ {\n        var isPrime\
    \ = true\n        for var j = 2; j < i; j++ {\n            if ((j % i) != 0) {\n\
    \                isPrime = false\n                break\n            }\n     \
    \   }\n        \n        if isPrime {\n            primes++\n        }\n     \
    \   \n        if primes > 1 {\n            ret++\n        }\n    }\n    \n   \
    \ return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp4zhgam0e.swift:18:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4zhgam0e.swift:20:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for var j = 2; j < i; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let cache: Dictionary<Int,\
    \ Int> = Dictionary<Int, Int>()\n    var fib: Int = 0\n    if cache[n] != nil\
    \ {\n        return cache[n]!\n    }\n    if n <= 2 {\n        return n\n    }\n\
    \n    fib += prime_fib(n - 1)\n    fib += prime_fib(n - 2)\n\n    cache[n] = fib\n\
    \    return fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp4iksobn7.swift:23:22: error: missing argument label 'n:' in call\n\
    \    fib += prime_fib(n - 1)\n                     ^\n                     n:\
    \ \n/tmp/tmp4iksobn7.swift:24:22: error: missing argument label 'n:' in call\n\
    \    fib += prime_fib(n - 2)\n                     ^\n                     n:\
    \ \n/tmp/tmp4iksobn7.swift:26:10: error: cannot assign through subscript: 'cache'\
    \ is a 'let' constant\n    cache[n] = fib\n    ~~~~~^\n/tmp/tmp4iksobn7.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let cache: Dictionary<Int,\
    \ Int> = Dictionary<Int, Int>()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return Int(ceil(sqrt(Double(n))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpu3xue1qj.swift:14:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sqrt(Double(n))))\n               ^~~~\n/tmp/tmpu3xue1qj.swift:14:21:\
    \ error: cannot find 'sqrt' in scope\n    return Int(ceil(sqrt(Double(n))))\n\
    \                    ^~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  if n < 2 {\n    return n\n  }\n\
    \  if n == 2 {\n    return 2\n  }\n\n  if isPrime(n) {\n    return n\n  }\n\n\
    \  let mut n2 = n - 1\n  let mut n3 = 2 * n\n\n  for _ in 0..3 {\n    if n3 >=\
    \ n2 {\n      return n3\n    }\n    n3 += n2\n    n2 = n1\n    n1 = n3\n  }\n\n\
    \  return n3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp2wup2xrq.swift:25:11: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n  let mut n2 = n - 1\n\
    \          ^\n/tmp/tmp2wup2xrq.swift:25:11: note: join the identifiers together\n\
    \  let mut n2 = n - 1\n      ~~~~^~\n      mutn2\n/tmp/tmp2wup2xrq.swift:25:11:\
    \ note: join the identifiers together with camel-case\n  let mut n2 = n - 1\n\
    \      ~~~~^~\n      mutN2\n/tmp/tmp2wup2xrq.swift:26:11: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \ let mut n3 = 2 * n\n          ^\n/tmp/tmp2wup2xrq.swift:26:11: note: join the\
    \ identifiers together\n  let mut n3 = 2 * n\n      ~~~~^~\n      mutn3\n/tmp/tmp2wup2xrq.swift:26:11:\
    \ note: join the identifiers together with camel-case\n  let mut n3 = 2 * n\n\
    \      ~~~~^~\n      mutN3\n/tmp/tmp2wup2xrq.swift:21:6: error: cannot find 'isPrime'\
    \ in scope\n  if isPrime(n) {\n     ^~~~~~~\n/tmp/tmp2wup2xrq.swift:26:7: error:\
    \ invalid redeclaration of 'mut'\n  let mut n3 = 2 * n\n      ^\n/tmp/tmp2wup2xrq.swift:25:7:\
    \ note: 'mut' previously declared here\n  let mut n2 = n - 1\n      ^\n/tmp/tmp2wup2xrq.swift:28:13:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n  for _ in 0..3\
    \ {\n            ^~\n            ...\n/tmp/tmp2wup2xrq.swift:37:10: error: cannot\
    \ find 'n3' in scope\n  return n3\n         ^~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  if n < 2 {\n    return 1\n  }\n\
    \  return prime_fib(n - 1) + prime_fib(n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp01_2b7lz.swift:17:20: error: missing argument label 'n:' in call\n\
    \  return prime_fib(n - 1) + prime_fib(n - 2)\n                   ^\n        \
    \           n: \n/tmp/tmp01_2b7lz.swift:17:39: error: missing argument label 'n:'\
    \ in call\n  return prime_fib(n - 1) + prime_fib(n - 2)\n                    \
    \                  ^\n                                      n: \n"
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  if n == 0 || n == 1 {\n    return\
    \ n\n  }\n\n  var a = 2\n  var b = 2\n\n  for _ in 0..<n {\n    let tmp = a\n\
    \    a = b\n    b = tmp + b\n  }\n\n  return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpyae8qabp/tmpyae8qabp.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f3a9fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f3a6f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f3a6f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f3a6f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyae8qabp                        0x000055d37f618338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0f3abea460 __libc_start_main +
    245

    6    tmpyae8qabp                        0x000055d37f617fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    // create fibonacci sequence\n\
    \    var fib_seq = [Int]()\n    fib_seq.append(0)\n    fib_seq.append(1)\n\n \
    \   // calculate n-th fib\n    for index in 1...n {\n        let fib = fib_seq[index\
    \ - 1] + fib_seq[index - 2]\n        fib_seq.append(fib)\n    }\n\n    // check\
    \ if n-th number is prime\n    for index in 1...n {\n        if fib_seq[index]\
    \ != 0 {\n            if fib_seq[index] != 1 {\n                return fib_seq[index]\n\
    \            }\n        }\n    }\n\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad023a3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad023731561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad023731286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad02373113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad023730bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad023530e83 <unavailable> + 188035

    6    tmpt4j40_d_                        0x000056102baa4afc <unavailable> + 6908

    7    tmpt4j40_d_                        0x000056102baa43db <unavailable> + 5083

    8    libc.so.6                          0x00002ad023c26460 __libc_start_main +
    245

    9    tmpt4j40_d_                        0x000056102baa40f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  return fib(n: n).map(prime)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0y9j3vwv.swift:14:10: error: cannot find 'fib' in scope\n  return\
    \ fib(n: n).map(prime)\n         ^~~\n/tmp/tmp0y9j3vwv.swift:14:24: error: cannot\
    \ find 'prime' in scope\n  return fib(n: n).map(prime)\n                     \
    \  ^~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return (1 + sqrt(5)) * (n /\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp7uj79wmw.swift:14:17: error: cannot find 'sqrt' in scope\n    return\
    \ (1 + sqrt(5)) * (n / 2)\n                ^~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  guard n >= 0 else {\n    fatalError(\"\
    n must be positive\")\n  }\n  guard n <= 5 else {\n    return 2\n  }\n  let result\
    \ = 3\n  for i in 1..n {\n    let t = result + result + result\n    if t > 57\
    \ {\n      return t\n    }\n    result = t\n  }\n  return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmplo5d8yjq.swift:21:13: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n  for i in 1..n {\n            ^~\n            ...\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n\n    let next_number = prime_fib(n - 1)\n    return next_number *\
    \ next_number % n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp4pk__gxo.swift:18:33: error: missing argument label 'n:' in call\n\
    \    let next_number = prime_fib(n - 1)\n                                ^\n \
    \                               n: \n/tmp/tmp4pk__gxo.swift:19:24: error: cannot\
    \ convert value of type 'Duration' to expected argument type 'Int'\n    return\
    \ next_number * next_number % n\n                       ^\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tif n == 1 || n == 2 {\n\t\treturn\
    \ n\n\t}\n\n\treturn prime_fib(n - 1) + prime_fib(n - 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpmuk5k7yp.swift:18:19: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpmuk5k7yp.swift:18:38: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tswitch n {\n\tcase 0:\n\t\treturn\
    \ 1\n\tcase 1:\n\t\treturn 2\n\t}\n\n\tlet a = 1\n\tlet b = 1\n\n\tfor i in 1\
    \ ..< n {\n\t\tlet k = b + a\n\n\t\ta = b\n\t\tb = k\n\n\t\tif k == n {\n\t\t\t\
    return k\n\t\t}\n\t}\n\n\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8amsw1a6.swift:14:2: error: switch must be exhaustive\n       \
    \ switch n {\n        ^\n/tmp/tmp8amsw1a6.swift:14:2: note: do you want to add\
    \ a default clause?\n        switch n {\n        ^\n/tmp/tmp8amsw1a6.swift:27:3:\
    \ error: cannot assign to value: 'a' is a 'let' constant\n                a =\
    \ b\n                ^\n/tmp/tmp8amsw1a6.swift:21:2: note: change 'let' to 'var'\
    \ to make it mutable\n        let a = 1\n        ^~~\n        var\n/tmp/tmp8amsw1a6.swift:28:3:\
    \ error: cannot assign to value: 'b' is a 'let' constant\n                b =\
    \ k\n                ^\n/tmp/tmp8amsw1a6.swift:22:2: note: change 'let' to 'var'\
    \ to make it mutable\n        let b = 1\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 1\n    for _ in\
    \ 1...n {\n        if isPrime(result) {\n            result = result + result\n\
    \        } else {\n            result = result - result\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp5am_q4my.swift:16:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(result) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  if n < 2 {\n    return n\n  }\n\
    \  if n == 2 {\n    return 2\n  }\n  if n == 3 {\n    return 3\n  }\n  if n ==\
    \ 4 {\n    return 5\n  }\n\n  var a = [Int]()\n  var b = [Int]()\n  a[0] = a[1]\
    \ = 1\n  b[0] = 1\n  b[1] = 1\n  for _ in 0 ..< n / 2 {\n    var k = 0\n    for\
    \ _ in 0 ..< n {\n      if a[k] < b[k] {\n        a[k] = a[k] + b[k] // increment\
    \ a\n      } else {\n        b[k] = b[k] + a[k] // increment b\n      }\n    \
    \  k += 1\n    }\n  }\n  return a[n-1] + b[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpky0dp53g.swift:29:15: error: cannot assign value of type '()' to\
    \ subscript of type 'Int'\n  a[0] = a[1] = 1\n         ~~~~~^~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let cache = [0, 1]\n    var\
    \ x = 2\n    var ret = 1\n    while ret <= n {\n        if cache[x] != nil {\n\
    \            ret = cache[x]!\n        } else {\n            cache[x] = ret\n \
    \           ret = x + ret\n            x = 2 * x\n        }\n    }\n    return\
    \ cache[n]!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpdyd7bnrb.swift:18:21: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns true\n        if cache[x] != nil {\n    \
    \       ~~~~~~~~ ^  ~~~\n/tmp/tmpdyd7bnrb.swift:19:27: error: cannot force unwrap\
    \ value of non-optional type 'Int'\n            ret = cache[x]!\n            \
    \      ~~~~~~~~^\n                          \n/tmp/tmpdyd7bnrb.swift:21:18: error:\
    \ cannot assign through subscript: 'cache' is a 'let' constant\n            cache[x]\
    \ = ret\n            ~~~~~^\n/tmp/tmpdyd7bnrb.swift:14:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let cache = [0, 1]\n    ^~~\n    var\n/tmp/tmpdyd7bnrb.swift:26:20:\
    \ error: cannot force unwrap value of non-optional type 'Int'\n    return cache[n]!\n\
    \           ~~~~~~~~^\n                   \n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  func isPrime(_ n: Int) -> Bool\
    \ {\n    return Int(log2(n)) % 2 != 0\n  }\n\n  func fibonacci(_ n: Int) -> Int\
    \ {\n    var a = b = 1\n    for i in 2..<n {\n      a, b = b, a + b\n    }\n \
    \   return a\n  }\n\n  func fibonacci_iter(_ n: Int) -> Int {\n    guard n > 2\
    \ else {\n      return 0\n    }\n    var a = 1\n    var b = 2\n    while n > 1\
    \ {\n      a, b = b, a + b\n      n -= 1\n    }\n    return a\n  }\n\n  guard\
    \ n > 1 else {\n    return 0\n  }\n  var candidate: Int = fibonacci(n)\n  if isPrime(candidate)\
    \ {\n    return candidate\n  } else {\n    return fibonacci_iter(n)\n  }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp75a_uph2.swift:21:8: error: consecutive statements on a line must\
    \ be separated by ';'\n      a, b = b, a + b\n       ^\n       ;\n/tmp/tmp75a_uph2.swift:21:8:\
    \ error: expected expression\n      a, b = b, a + b\n       ^\n/tmp/tmp75a_uph2.swift:33:8:\
    \ error: consecutive statements on a line must be separated by ';'\n      a, b\
    \ = b, a + b\n       ^\n       ;\n/tmp/tmp75a_uph2.swift:33:8: error: expected\
    \ expression\n      a, b = b, a + b\n       ^\n/tmp/tmp75a_uph2.swift:15:16: error:\
    \ cannot find 'log2' in scope\n    return Int(log2(n)) % 2 != 0\n            \
    \   ^~~~\n/tmp/tmp75a_uph2.swift:19:13: error: cannot find 'b' in scope\n    var\
    \ a = b = 1\n            ^\n/tmp/tmp75a_uph2.swift:33:7: warning: variable is\
    \ unused\n      a, b = b, a + b\n      ^\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var ret = 0\n\n    if n <=\
    \ 1 {\n        return ret\n    }\n\n    for i := 2; i <= n / 2 ; i++ {\n     \
    \   if isPrime(i) {\n            ret = i\n        }\n    }\n\n    return ret\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpewbi4mnm.swift:20:12: error: expected type\n    for i := 2; i <=\
    \ n / 2 ; i++ {\n           ^\n            <#type#>\n/tmp/tmpewbi4mnm.swift:20:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n / 2 ; i++\
    \ {\n           ^\n/tmp/tmpewbi4mnm.swift:20:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n / 2 ; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tif n < 2 {\n\t\treturn 0\n\t\
    } else if n == 2 {\n\t\treturn 1\n\t} else if n == 3 {\n\t\treturn 2\n\t} else\
    \ if n % 2 == 0 {\n\t\treturn prime_fib(n - 1) + prime_fib(n - 2)\n\t} else if\
    \ n % 3 == 0 {\n\t\treturn prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3)\n\t} else {\n\t\treturn prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3) + prime_fib(n - 4)\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmprgkukybv.swift:21:20: error: missing argument label 'n:' in call\n\
    \                return prime_fib(n - 1) + prime_fib(n - 2)\n                \
    \                 ^\n                                 n: \n/tmp/tmprgkukybv.swift:21:39:\
    \ error: missing argument label 'n:' in call\n                return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n                                                  \
    \  ^\n                                                    n: \n/tmp/tmprgkukybv.swift:23:20:\
    \ error: missing argument label 'n:' in call\n                return prime_fib(n\
    \ - 1) + prime_fib(n - 2) + prime_fib(n - 3)\n                               \
    \  ^\n                                 n: \n/tmp/tmprgkukybv.swift:23:39: error:\
    \ missing argument label 'n:' in call\n                return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                ^\n                                                    n: \n\
    /tmp/tmprgkukybv.swift:23:58: error: missing argument label 'n:' in call\n   \
    \             return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3)\n\
    \                                                                       ^\n  \
    \                                                                     n: \n/tmp/tmprgkukybv.swift:25:20:\
    \ error: missing argument label 'n:' in call\n                return prime_fib(n\
    \ - 1) + prime_fib(n - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n            \
    \                     ^\n                                 n: \n/tmp/tmprgkukybv.swift:25:39:\
    \ error: missing argument label 'n:' in call\n                return prime_fib(n\
    \ - 1) + prime_fib(n - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n            \
    \                                        ^\n                                 \
    \                   n: \n/tmp/tmprgkukybv.swift:25:58: error: missing argument\
    \ label 'n:' in call\n                return prime_fib(n - 1) + prime_fib(n -\
    \ 2) + prime_fib(n - 3) + prime_fib(n - 4)\n                                 \
    \                                      ^\n                                   \
    \                   "
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    // base case is n = 0\n   \
    \ if n == 0 || n == 1 {\n        return n\n    }\n\n    // base case is n = 1\n\
    \    if n == 2 {\n        return n\n    }\n\n    var a: Int\n    var b: Int\n\n\
    \    // base case is n = 2\n    if n == 3 {\n        return n\n    }\n\n    //\
    \ calculate nth Fibonacci number\n    for a = 1, b = 2 ; n != 0; a++, b = b +\
    \ 1 {\n        n -= 1\n    }\n\n    return a * b\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp15vao1wb.swift:33:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for a = 1, b = 2 ; n != 0; a++, b = b + 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tswitch {\n\tcase n <= 2:\n\t\t\
    return n\n\tcase n >= 30 && n % 2 == 0: return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n\tdefault: return prime_fib(n - 1) + prime_fib((n - 2) % 5) + prime_fib((n\
    \ - 3) % 5) + prime_fib((n - 5) % 5)\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0dkbuhlb.swift:14:9: error: expected expression in 'switch' statement\n\
    \        switch {\n               ^\n/tmp/tmp0dkbuhlb.swift:17:47: error: missing\
    \ argument label 'n:' in call\n        case n >= 30 && n % 2 == 0: return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n                                                  \
    \   ^\n                                                     n: \n/tmp/tmp0dkbuhlb.swift:17:66:\
    \ error: missing argument label 'n:' in call\n        case n >= 30 && n % 2 ==\
    \ 0: return prime_fib(n - 1) + prime_fib(n - 2)\n                            \
    \                                            ^\n                             \
    \                                           n: \n/tmp/tmp0dkbuhlb.swift:18:28:\
    \ error: missing argument label 'n:' in call\n        default: return prime_fib(n\
    \ - 1) + prime_fib((n - 2) % 5) + prime_fib((n - 3) % 5) + prime_fib((n - 5) %\
    \ 5)\n                                  ^\n                                  n:\
    \ \n/tmp/tmp0dkbuhlb.swift:18:47: error: missing argument label 'n:' in call\n\
    \        default: return prime_fib(n - 1) + prime_fib((n - 2) % 5) + prime_fib((n\
    \ - 3) % 5) + prime_fib((n - 5) % 5)\n                                       \
    \              ^\n                                                     n: \n/tmp/tmp0dkbuhlb.swift:18:72:\
    \ error: missing argument label 'n:' in call\n        default: return prime_fib(n\
    \ - 1) + prime_fib((n - 2) % 5) + prime_fib((n - 3) % 5) + prime_fib((n - 5) %\
    \ 5)\n                                                                       \
    \       ^\n                                                                  \
    \            n: \n/tmp/tmp0dkbuhlb.swift:18:97: error: missing argument label\
    \ 'n:' in call\n        default: return prime_fib(n - 1) + prime_fib((n - 2) %\
    \ 5) + prime_fib((n - 3) % 5) + prime_fib((n - 5) % 5)\n                     \
    \                                                                            \
    \      ^\n                                                                   \
    \                                    n: \n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 1\n    var temp\
    \ = 2\n    var power = 2\n    while true {\n        temp = temp * temp % prime\n\
    \        if temp == n {\n            return result\n        }\n        result\
    \ = result + temp\n        power = power + 1\n        if power > 1000 {\n    \
    \        return result\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpghg0lroa.swift:18:30: error: cannot find 'prime' in scope\n   \
    \     temp = temp * temp % prime\n                             ^~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n % 2 == 0 {\n  \
    \      return prime_fib(n - 1) + prime_fib(n - 2)\n    }\n    if n % 3 == 0 {\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3)\n    }\n\
    \    var tmp: Int = 0\n    for i : Int in 1...n {\n        tmp += i\n    }\n \
    \   return tmp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp2lxiexjd.swift:21:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmp2lxiexjd.swift:21:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmp2lxiexjd.swift:24:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmp2lxiexjd.swift:24:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmp2lxiexjd.swift:24:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n    if isPrime(n) {\n        return n\n    }\n    if isPrime(n\
    \ - 1) {\n        return prime_fib(n - 1) + prime_fib(n - 2)\n    }\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpkexfajzb.swift:17:8: error: cannot find 'isPrime' in scope\n  \
    \  if isPrime(n) {\n       ^~~~~~~\n/tmp/tmpkexfajzb.swift:20:8: error: cannot\
    \ find 'isPrime' in scope\n    if isPrime(n - 1) {\n       ^~~~~~~\n/tmp/tmpkexfajzb.swift:21:26:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2)\n                         ^\n                         n:\
    \ \n/tmp/tmpkexfajzb.swift:21:45: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \                    ^\n                                            n: \n/tmp/tmpkexfajzb.swift:23:22:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n                     ^\n                     n: \n/tmp/tmpkexfajzb.swift:23:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n\n    if n <= 2 {\n        return 1\n    }\n\n    if n % 2 == 0 {\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n    }\n\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp2u_qsudu.swift:23:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmp2u_qsudu.swift:23:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmp2u_qsudu.swift:26:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmp2u_qsudu.swift:26:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return fib_fib(n, n, 0, 0,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp203_w69j.swift:14:12: error: cannot find 'fib_fib' in scope\n \
    \   return fib_fib(n, n, 0, 0, 0)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 1 || n == 2 {\n   \
    \     return 2\n    }\n    \n    // Check if n is divisible by 3\n    if n % 3\
    \ == 0 {\n        return prime_fib(n / 3) + prime_fib(n / 3)\n    }\n    \n  \
    \  // Check if n is divisible by 5\n    if n % 5 == 0 {\n        return prime_fib(n\
    \ / 5) + prime_fib(n / 5)\n    }\n    \n    var fib: Int = 0\n    \n    // Check\
    \ if n is divisible by 7\n    if n % 7 == 0 {\n        fib = prime_fib(n / 7)\
    \ + prime_fib(n / 7) + 3\n    }\n    \n    // Check if n is divisible by 11\n\
    \    if n % 11 == 0 {\n        fib = prime_fib(n / 11) + prime_fib(n / 11) + 7\n\
    \    }\n    \n    return fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpk8tzqpmw.swift:20:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n / 3) + prime_fib(n / 3)\n                        \
    \ ^\n                         n: \n/tmp/tmpk8tzqpmw.swift:20:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n / 3) + prime_fib(n /\
    \ 3)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpk8tzqpmw.swift:25:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n / 5) + prime_fib(n / 5)\n   \
    \                      ^\n                         n: \n/tmp/tmpk8tzqpmw.swift:25:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n / 5)\
    \ + prime_fib(n / 5)\n                                            ^\n        \
    \                                    n: \n/tmp/tmpk8tzqpmw.swift:32:25: error:\
    \ missing argument label 'n:' in call\n        fib = prime_fib(n / 7) + prime_fib(n\
    \ / 7) + 3\n                        ^\n                        n: \n/tmp/tmpk8tzqpmw.swift:32:44:\
    \ error: missing argument label 'n:' in call\n        fib = prime_fib(n / 7) +\
    \ prime_fib(n / 7) + 3\n                                           ^\n       \
    \                                    n: \n/tmp/tmpk8tzqpmw.swift:37:25: error:\
    \ missing argument label 'n:' in call\n        fib = prime_fib(n / 11) + prime_fib(n\
    \ / 11) + 7\n                        ^\n                        n: \n/tmp/tmpk8tzqpmw.swift:37:45:\
    \ error: missing argument label 'n:' in call\n        fib = prime_fib(n / 11)\
    \ + prime_fib(n / 11) + 7\n                                            ^\n   \
    \                                         n: \n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tswitch n {\n\tcase 0:\n\t\treturn\
    \ 1\n\tcase 1:\n\t\treturn 2\n\t}\n\t\n\tvar fib_number, prime: Int\n\tfib_number\
    \ = prime_fib(n-1) + prime_fib(n-2)\n\tprime = (n % 2 == 0) ? 0 : -1\n\t\n\tswitch\
    \ {\n\tcase fib_number < prime:\n\t\treturn fib_number\n\tcase prime < fib_number\
    \ < 2 * prime:\n\t\treturn fib_number\n\tcase 2 * prime < fib_number < 3 * prime:\n\
    \t\treturn fib_number\n\tcase 3 * prime < fib_number:\n\t\treturn prime\n\tdefault:\n\
    \t\treturn fib_number\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmph_uztr3x.swift:25:9: error: expected expression in 'switch' statement\n\
    \        switch {\n               ^\n/tmp/tmph_uztr3x.swift:14:2: error: switch\
    \ must be exhaustive\n        switch n {\n        ^\n/tmp/tmph_uztr3x.swift:14:2:\
    \ note: do you want to add a default clause?\n        switch n {\n        ^\n\
    /tmp/tmph_uztr3x.swift:22:25: error: missing argument label 'n:' in call\n   \
    \     fib_number = prime_fib(n-1) + prime_fib(n-2)\n                         \
    \      ^\n                               n: \n/tmp/tmph_uztr3x.swift:22:42: error:\
    \ missing argument label 'n:' in call\n        fib_number = prime_fib(n-1) + prime_fib(n-2)\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return Int(sqrt(Double(n)))\
    \ + Int(ceil(log(sqrt(Double(n))) / log(2)))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmptpzuy61s.swift:14:16: error: cannot find 'sqrt' in scope\n    return\
    \ Int(sqrt(Double(n))) + Int(ceil(log(sqrt(Double(n))) / log(2)))\n          \
    \     ^~~~\n/tmp/tmptpzuy61s.swift:14:39: error: cannot find 'ceil' in scope\n\
    \    return Int(sqrt(Double(n))) + Int(ceil(log(sqrt(Double(n))) / log(2)))\n\
    \                                      ^~~~\n/tmp/tmptpzuy61s.swift:14:44: error:\
    \ cannot find 'log' in scope\n    return Int(sqrt(Double(n))) + Int(ceil(log(sqrt(Double(n)))\
    \ / log(2)))\n                                           ^~~\n/tmp/tmptpzuy61s.swift:14:48:\
    \ error: cannot find 'sqrt' in scope\n    return Int(sqrt(Double(n))) + Int(ceil(log(sqrt(Double(n)))\
    \ / log(2)))\n                                               ^~~~\n/tmp/tmptpzuy61s.swift:14:67:\
    \ error: cannot find 'log' in scope\n    return Int(sqrt(Double(n))) + Int(ceil(log(sqrt(Double(n)))\
    \ / log(2)))\n                                                               \
    \   ^~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return (1 + sqrt(Double(n)))\
    \ * Double(pow(Double(n), Double(2.0)))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpac_jzsnm.swift:14:17: error: cannot find 'sqrt' in scope\n    return\
    \ (1 + sqrt(Double(n))) * Double(pow(Double(n), Double(2.0)))\n              \
    \  ^~~~\n/tmp/tmpac_jzsnm.swift:14:43: error: cannot find 'pow' in scope\n   \
    \ return (1 + sqrt(Double(n))) * Double(pow(Double(n), Double(2.0)))\n       \
    \                                   ^~~\n/tmp/tmpac_jzsnm.swift:14:34: error:\
    \ cannot convert return expression of type 'Double' to return type 'Int'\n   \
    \ return (1 + sqrt(Double(n))) * Double(pow(Double(n), Double(2.0)))\n       \
    \    ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n           Int(\
    \                                                       )\n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    // Check n is positive and\
    \ odd\n    guard n > 0 && n % 2 == 0 else { return 0 }\n    \n    // Create an\
    \ array with Fibonacci numbers and check whether it's prime\n    let fibs = Array(1\
    \ ... n)\n    let isPrime = fibs.reduce(true) { $0 || $1.isPrime }\n    \n   \
    \ // Return n-th Fibonacci number that is prime\n    guard isPrime else { return\
    \ 0 }\n    \n    return fibs[(n - 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp2r7ri87k.swift:19:30: error: missing argument label 'into:' in\
    \ call\n    let isPrime = fibs.reduce(true) { $0 || $1.isPrime }\n           \
    \                  ^\n                              into: \n/tmp/tmp2r7ri87k.swift:19:31:\
    \ error: cannot convert value of type 'Bool' to expected argument type '(inout\
    \ @escaping (Bool, _) -> Bool, Int) throws -> ()'\n    let isPrime = fibs.reduce(true)\
    \ { $0 || $1.isPrime }\n                              ^\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\treturn Int(pow(Double(n), Double(n)\
    \ - Int(1.0)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpo10w1j9o.swift:14:13: error: cannot find 'pow' in scope\n     \
    \   return Int(pow(Double(n), Double(n) - Int(1.0)))\n                   ^~~\n\
    /tmp/tmpo10w1j9o.swift:14:38: error: binary operator '-' cannot be applied to\
    \ operands of type 'Double' and 'Int'\n        return Int(pow(Double(n), Double(n)\
    \ - Int(1.0)))\n                                  ~~~~~~~~~ ^ ~~~~~~~~\n/tmp/tmpo10w1j9o.swift:14:38:\
    \ note: overloads for '-' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n        return Int(pow(Double(n), Double(n) -\
    \ Int(1.0)))\n                                            ^\n"
  stdout: ''
  timestamp: 1660014081
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    var a = 1\n    var b = 2\n    for _ in 0..<n {\n        if a.isMultiple(of:\
    \ b) {\n            a += 1\n        } else {\n            b += 1\n        }\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpxy4xz011/tmpxy4xz011.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad94755ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad947255b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad947255988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9472547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxy4xz011                        0x00005645a0661448 <unavailable> + 5192

    5    libc.so.6                          0x00002ad94774a460 __libc_start_main +
    245

    6    tmpxy4xz011                        0x00005645a06610f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 0 {\n        return\
    \ -1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp19lyfwul.swift:17:12: error: cannot find 'fib' in scope\n    return\
    \ fib(n - 1) + fib(n - 2)\n           ^~~\n/tmp/tmp19lyfwul.swift:17:25: error:\
    \ cannot find 'fib' in scope\n    return fib(n - 1) + fib(n - 2)\n           \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int?\n    var prev:\
    \ Int?\n    fib = 0\n    prev = 0\n    while fib == nil {\n        fib = (prev!\
    \ + prev! + n!) % n!\n        prev = fib\n    }\n    return fib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmplvlnmwoy.swift:19:33: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n        fib = (prev! + prev! + n!) % n!\n                      \
    \         ~^\n                                \n/tmp/tmplvlnmwoy.swift:19:39:\
    \ error: cannot force unwrap value of non-optional type 'Int'\n        fib = (prev!\
    \ + prev! + n!) % n!\n                                     ~^\n              \
    \                        \n/tmp/tmplvlnmwoy.swift:22:12: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n    return fib\n   \
    \        ^\n/tmp/tmplvlnmwoy.swift:22:12: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    return fib\n         \
    \  ^\n               ?? <#default value#>\n/tmp/tmplvlnmwoy.swift:22:12: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \    return fib\n           ^\n              !\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return prime_fib_impl(n).0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp_5r3tt_j.swift:14:12: error: cannot find 'prime_fib_impl' in scope\n\
    \    return prime_fib_impl(n).0\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result: Int\n    var n:\
    \ Int\n    var resultSquare: Int\n    var i: Int\n\n    n = -1 * Int(pow(10, n))\n\
    \n    for i = 3; i <= n; i++ {\n        result = result + i\n        resultSquare\
    \ = result * result\n        if resultSquare > n {\n            result = resultSquare\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpvt8kyvdn.swift:21:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 3; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~\n/tmp/tmpvt8kyvdn.swift:19:18:\
    \ error: cannot find 'pow' in scope\n    n = -1 * Int(pow(10, n))\n          \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var prev = 0\n    var cur = 1\n    for i in 1..(n-2) {\n     \
    \   prev = cur\n        cur = prev + cur\n    }\n    return cur\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpuyqfkpc6.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..(n-2) {\n              ^~\n           \
    \   ...\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 2) +\
    \ prime_fib(n - 1)\n    } else {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpaazca3os.swift:18:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 2) + prime_fib(n - 1)\n                        \
    \ ^\n                         n: \n/tmp/tmpaazca3os.swift:18:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 2) + prime_fib(n -\
    \ 1)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpaazca3os.swift:20:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2)\n   \
    \                      ^\n                         n: \n/tmp/tmpaazca3os.swift:20:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2)\n                                            ^\n        \
    \                                    n: \n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  var res = 1\n  if n == 0 {\n\
    \    return 0\n  } else if n < 2 {\n    return 1\n  } else {\n    for _ in 0..<n\
    \ {\n      res *= 2\n      res %= primes.count\n    }\n  }\n  return res\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpe3bfkb3b.swift:22:14: error: cannot find 'primes' in scope\n  \
    \    res %= primes.count\n             ^~~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\treturn math.Mod(prime_fac(n -\
    \ 1) + prime_fac(n - 2), prime_fac(n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpjwvzo16y.swift:14:9: error: cannot find 'math' in scope\n     \
    \   return math.Mod(prime_fac(n - 1) + prime_fac(n - 2), prime_fac(n - 2))\n \
    \              ^~~~\n/tmp/tmpjwvzo16y.swift:14:18: error: cannot find 'prime_fac'\
    \ in scope\n        return math.Mod(prime_fac(n - 1) + prime_fac(n - 2), prime_fac(n\
    \ - 2))\n                        ^~~~~~~~~\n/tmp/tmpjwvzo16y.swift:14:37: error:\
    \ cannot find 'prime_fac' in scope\n        return math.Mod(prime_fac(n - 1) +\
    \ prime_fac(n - 2), prime_fac(n - 2))\n                                      \
    \     ^~~~~~~~~\n/tmp/tmpjwvzo16y.swift:14:55: error: cannot find 'prime_fac'\
    \ in scope\n        return math.Mod(prime_fac(n - 1) + prime_fac(n - 2), prime_fac(n\
    \ - 2))\n                                                             ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  assert(n >= 2)\n  let p = 2\n\
    \  var f = 0\n  var f = 1\n  for _ in 0..<n {\n    f *= p\n    f %= Int64(pow(Int.max,\
    \ Double(n)))\n    p += 1\n  }\n  return f\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpdokzjbq1.swift:17:7: error: invalid redeclaration of 'f'\n  var\
    \ f = 1\n      ^\n/tmp/tmpdokzjbq1.swift:16:7: note: 'f' previously declared here\n\
    \  var f = 0\n      ^\n/tmp/tmpdokzjbq1.swift:20:16: error: cannot find 'pow'\
    \ in scope\n    f %= Int64(pow(Int.max, Double(n)))\n               ^~~\n/tmp/tmpdokzjbq1.swift:21:7:\
    \ error: left side of mutating operator isn't mutable: 'p' is a 'let' constant\n\
    \    p += 1\n    ~ ^\n/tmp/tmpdokzjbq1.swift:15:3: note: change 'let' to 'var'\
    \ to make it mutable\n  let p = 2\n  ^~~\n  var\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let m = Int(sqrt(Double(n)))\n\
    \    if m == 1 {\n        return n\n    }\n    if n <= 2 {\n        return n\n\
    \    }\n    if n == 2 {\n        return 1\n    }\n    if n % 2 == 0 {\n      \
    \  return prime_fib(n - 1) + prime_fib(n - 2)\n    }\n    var a = prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n    for i in 1..m {\n        var tmp = prime_fib(n\
    \ - 1)\n        a = a + tmp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp3czsq249.swift:14:17: error: cannot find 'sqrt' in scope\n    let\
    \ m = Int(sqrt(Double(n)))\n                ^~~~\n/tmp/tmp3czsq249.swift:25:26:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2)\n                         ^\n                         n:\
    \ \n/tmp/tmp3czsq249.swift:25:45: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \                    ^\n                                            n: \n/tmp/tmp3czsq249.swift:27:23:\
    \ error: missing argument label 'n:' in call\n    var a = prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n                      ^\n                      n: \n/tmp/tmp3czsq249.swift:27:42:\
    \ error: missing argument label 'n:' in call\n    var a = prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n                                         ^\n                         \
    \                n: \n/tmp/tmp3czsq249.swift:28:15: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for i in 1..m {\n              ^~\n\
    \              ...\n/tmp/tmp3czsq249.swift:29:29: error: missing argument label\
    \ 'n:' in call\n        var tmp = prime_fib(n - 1)\n                         \
    \   ^\n                            n: \n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return prime_fib_iterative(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpdyf0yb4s.swift:14:12: error: cannot find 'prime_fib_iterative'\
    \ in scope\n    return prime_fib_iterative(n - 1)\n           ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    }\n    var fib = [Int]()\n    var current = 1\n    fib[0] = current\n\
    \    fib[1] = current\n    for index in 2..(n - 1) {\n        current = fib[index\
    \ - 1] + fib[index - 2]\n        fib[index] = current\n    }\n    return fib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpqmalob_g.swift:21:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for index in 2..(n - 1) {\n                  ^~\n \
    \                 ...\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var result = 1\n    var i = 0\n    var is_prime = true\n\n    for _ in 0..<n\
    \ {\n        i += 1\n        let c = a + b\n        a = b\n        b = c\n   \
    \     if c != n {\n            is_prime = false\n        }\n    }\n\n    if is_prime\
    \ {\n        result = n\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpayitvnnw/tmpayitvnnw.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b372b9aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b372b6a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b372b6a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b372b6a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayitvnnw                        0x00005628b70f0338 <unavailable> + 4920

    5    libc.so.6                          0x00002b372bb96460 __libc_start_main +
    245

    6    tmpayitvnnw                        0x00005628b70effe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  let result = 1\n  let limit =\
    \ (2 * n) - 1\n  for index in 1 ..< limit {\n    if index > n {\n      return\
    \ result\n    }\n    if index == n {\n      return index\n    }\n    let result\
    \ = result + index\n  }\n  return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp6ecatkiu/tmp6ecatkiu.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4a73e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4a70ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4a70dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4a70dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ecatkiu                        0x000056054533d338 <unavailable> + 4920

    5    libc.so.6                          0x00002ad4a75d2460 __libc_start_main +
    245

    6    tmp6ecatkiu                        0x000056054533cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  var sum: Int\n  sum = 0\n  if\
    \ n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  var last: Int\n\
    \  last = 1\n  if n == 3 {\n    return 3\n  }\n  for n in 1 ..< n {\n    sum =\
    \ last + last\n    last = sum\n  }\n  return last\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpzl43by3d/tmpzl43by3d.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe2236ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe22061b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe22061988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe220607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzl43by3d                        0x000055f567335338 <unavailable> + 4920

    5    libc.so.6                          0x00002afe22556460 __libc_start_main +
    245

    6    tmpzl43by3d                        0x000055f567334fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  let a = 2\n  var b = 5\n  var\
    \ c = 1\n  var prime: Int\n\n  repeat{\n    prime = a\n    prime = b\n    b =\
    \ c\n    c = prime + b\n  } while(c*c <= n)\n\n  return prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpta35jke1/tmpta35jke1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad496fd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad496cc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad496cc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad496cc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpta35jke1                        0x000056438698f1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ad4971bc460 __libc_start_main +
    245

    6    tmpta35jke1                        0x000056438698ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    fib = 1\n    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    for\
    \ y in 2..(n-1) {\n        for x in 2..(fib-1) {\n            if ((fib - x) /\
    \ x == y) {\n                prime = y\n                break\n            }\n\
    \        }\n        fib = fib + y\n    }\n    return prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpmkw4z2sp.swift:25:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for y in 2..(n-1) {\n              ^~\n           \
    \   ...\n/tmp/tmpmkw4z2sp.swift:26:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for x in 2..(fib-1) {\n                  ^~\n \
    \                 ...\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a, b, i, sum: Int\n   \
    \ var checker = 1\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n\
    \        return 3\n    }\n    if n > 2 {\n        checker++\n        if n % 2\
    \ == 1 {\n            return 0\n        }\n        a = prime_fib(n - 2)\n    \
    \    b = prime_fib(n - 1)\n        sum = a * b\n        for i = 3; i <= sum; i+=2\
    \ {\n            checker = checker + (i - 1) * i\n            if checker >= n\
    \ {\n                return i\n            }\n        }\n    }\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpztq_h3c6.swift:30:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for i = 3; i <= sum; i+=2 {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpztq_h3c6.swift:23:16: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n        checker++\n               ^~\n/tmp/tmpztq_h3c6.swift:27:23:\
    \ error: missing argument label 'n:' in call\n        a = prime_fib(n - 2)\n \
    \                     ^\n                      n: \n/tmp/tmpztq_h3c6.swift:28:23:\
    \ error: missing argument label 'n:' in call\n        b = prime_fib(n - 1)\n \
    \                     ^\n                      n: \n"
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var nums = [Int]()\n    var\
    \ fibs = [Int]()\n\n    // compute fibs in O(n^2) time complexity\n    for _ in\
    \ 1...n {\n        let a = fibs.last! + 2\n        let b = fibs.last!\n      \
    \  fibs.append(a)\n        fibs.append(b)\n        nums.append(a)\n        nums.append(b)\n\
    \    }\n\n    // find prime numbers in O(n) time complexity\n    for num in nums\
    \ {\n        if num > 2 {\n            return num\n        }\n    }\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpmu1zmjp_/tmpmu1zmjp_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ea48cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ea45c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1ea45c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1ea45c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1ea45c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpmu1zmjp_                        0x000055dfcc2fdd5a <unavailable> + 7514

    6    tmpmu1zmjp_                        0x000055dfcc2fd5cb <unavailable> + 5579

    7    libc.so.6                          0x00002b1ea4aba460 __libc_start_main +
    245

    8    tmpmu1zmjp_                        0x000055dfcc2fd2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  var a = 2\n  var b = 1\n  var\
    \ next = 0\n  for next < n {\n    var next = a\n    a = b\n    b = next\n    next\
    \ += 2\n  }\n  return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpwhbe36mc.swift:17:12: error: expected 'in' after for-each pattern\n\
    \  for next < n {\n           ^\n/tmp/tmpwhbe36mc.swift:17:12: error: unary operator\
    \ cannot be separated from its operand\n  for next < n {\n           ^~\n    \
    \        \n/tmp/tmpwhbe36mc.swift:17:12: error: '<' is not a prefix unary operator\n\
    \  for next < n {\n           ^\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    // Base cases\n    if n ==\
    \ 0 || n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4 {\n        return\
    \ 13\n    }\n    if n == 5 {\n        return 89\n    }\n\n    // Recursive case\n\
    \    let fib = prime_fib(n: n - 1) + prime_fib(n: n - 2)\n    return fib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmphurk308y/tmphurk308y.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54a0bebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54a08e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54a08e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54a08e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphurk308y                        0x000056418086d1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b54a0dd7460 __libc_start_main +
    245

    6    tmphurk308y                        0x000056418086ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var f1 = 1\n    var f2 = 1\n\
    \    for _ in 0 ..< n {\n        let f3 = f1 + f2\n        f1 = f2\n        f2\
    \ = f3\n    }\n    return f2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmptvi38vqm/tmptvi38vqm.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a7cb97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a7c88eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a7c88e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a7c88d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptvi38vqm                        0x0000561cd0e814a9 <unavailable> + 5289

    5    libc.so.6                          0x00002b5a7cd83460 __libc_start_main +
    245

    6    tmptvi38vqm                        0x0000561cd0e80fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  if n < 2 {\n    return n\n  }\n\
    \n  var a = 0\n  var b = 1\n  var c = 2\n\n  var i = 2\n  var j = 3\n\n  while\
    \ (true) {\n    while (a * c <= n) {\n      a = b\n      b = c\n      c = j\n\
    \      j = i\n\n      i = i + 1\n    }\n\n    i = i - 1\n    j = j + 2\n\n   \
    \ if j > n {\n      break\n    }\n\n    c = a + b\n    a = b\n    b = c\n\n  \
    \  i = i + 1\n  }\n\n  return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpzu3n8fbn/tmpzu3n8fbn.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12d16cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12d13c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12d13c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12d13c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzu3n8fbn                        0x000055fa83f311b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b12d18b6460 __libc_start_main +
    245

    6    tmpzu3n8fbn                        0x000055fa83f30e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\treturn prime_fib_loop(n, 0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpt6vszdq4.swift:14:9: error: cannot find 'prime_fib_loop' in scope\n\
    \        return prime_fib_loop(n, 0)\n               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result: Int = 0\n    var\
    \ previous: Int = 0\n    var current: Int = 0\n    \n    if n <= 1 {\n       \
    \ return result\n    }\n    \n    for _ in 0 ..< n {\n        result = previous\n\
    \        previous = current\n        current = current + previous\n    }\n   \
    \ \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpiclj0e2q/tmpiclj0e2q.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb11e24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb11b1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb11b1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb11b1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiclj0e2q                        0x000055dec059f338 <unavailable> + 4920

    5    libc.so.6                          0x00002abb12010460 __libc_start_main +
    245

    6    tmpiclj0e2q                        0x000055dec059efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 1\n    var i =\
    \ 2\n    while i <= n {\n        if prime_factors(i).count > 1 {\n           \
    \ i += 2\n            continue\n        }\n        i += 1\n        result += i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpyxvdua4q.swift:17:12: error: cannot find 'prime_factors' in scope\n\
    \        if prime_factors(i).count > 1 {\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    // We need to calculate fibonacci\
    \ numbers using Sieve of Eratosthenes algorithm\n    // https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \    // We want to return n-th number that is a Fibonacci number and it's also\
    \ prime.\n    var sieve = [Int]()\n    sieve[0] = 0\n    sieve[1] = 1\n    for\
    \ i in 2..<n {\n        if sieve[i] { continue }\n        sieve[i] = sieve[i -\
    \ 2] + sieve[i - 1]\n    }\n    return sieve[n]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpe19ag0fe.swift:21:17: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n        if sieve[i] { continue }\n                ^\n\
    \           (        != 0)\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmprv2gql8b.swift:18:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmprv2gql8b.swift:18:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmprv2gql8b.swift:20:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n       \
    \              ^\n                     n: \n/tmp/tmprv2gql8b.swift:20:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    // TODO: Improve the performance\n\
    \    var res = 0\n    var tmp_1 = 0\n    var tmp_2 = 0\n    var tmp_3 = 0\n  \
    \  for _ in 0 ..< n {\n        tmp_1 = tmp_1 + 1\n        tmp_2 = tmp_3\n    \
    \    tmp_3 = tmp_1 + tmp_2\n        res = tmp_3\n    }\n    return res\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmp9inar5cr/tmp9inar5cr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe1e732c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe1e429b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe1e429988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe1e4287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9inar5cr                        0x000055f18e366338 <unavailable> + 4920

    5    libc.so.6                          0x00002abe1e91e460 __libc_start_main +
    245

    6    tmp9inar5cr                        0x000055f18e365fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return sieveOfS2(n).next().asInt\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpffd23b7y.swift:14:12: error: cannot find 'sieveOfS2' in scope\n\
    \    return sieveOfS2(n).next().asInt\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return n <= 2 ? n : prime_fib(n-2)\
    \ + prime_fib(n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp274xaetg.swift:14:35: error: missing argument label 'n:' in call\n\
    \    return n <= 2 ? n : prime_fib(n-2) + prime_fib(n-1)\n                   \
    \               ^\n                                  n: \n/tmp/tmp274xaetg.swift:14:52:\
    \ error: missing argument label 'n:' in call\n    return n <= 2 ? n : prime_fib(n-2)\
    \ + prime_fib(n-1)\n                                                   ^\n   \
    \                                                n: \n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tlet result = 1\n\tvar a = 2\n\
    \tvar b = 3\n\tif n > 2 {\n\t\tfor i in 1..<n {\n\t\t\tlet c = a + b\n\t\t\ta\
    \ = b\n\t\t\tb = c\n\t\t}\n\t\tresult = c\n\t}\n\treturn result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpw2hx460p.swift:23:12: error: cannot find 'c' in scope\n       \
    \         result = c\n                         ^\n/tmp/tmpw2hx460p.swift:23:3:\
    \ error: cannot assign to value: 'result' is a 'let' constant\n              \
    \  result = c\n                ^~~~~~\n/tmp/tmpw2hx460p.swift:14:2: note: change\
    \ 'let' to 'var' to make it mutable\n        let result = 1\n        ^~~\n   \
    \     var\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let mut x = 1;\n    let mut\
    \ y = 2;\n    var result = x;\n    while y < n {\n        result += y;\n     \
    \   y = x + y;\n        x = y;\n    }\n    result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp_h2az59e.swift:14:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut x = 1;\n\
    \            ^\n/tmp/tmp_h2az59e.swift:14:13: note: join the identifiers together\n\
    \    let mut x = 1;\n        ~~~~^\n        mutx\n/tmp/tmp_h2az59e.swift:14:13:\
    \ note: join the identifiers together with camel-case\n    let mut x = 1;\n  \
    \      ~~~~^\n        mutX\n/tmp/tmp_h2az59e.swift:15:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut y = 2;\n            ^\n/tmp/tmp_h2az59e.swift:15:13: note: join the\
    \ identifiers together\n    let mut y = 2;\n        ~~~~^\n        muty\n/tmp/tmp_h2az59e.swift:15:13:\
    \ note: join the identifiers together with camel-case\n    let mut y = 2;\n  \
    \      ~~~~^\n        mutY\n/tmp/tmp_h2az59e.swift:15:9: error: invalid redeclaration\
    \ of 'mut'\n    let mut y = 2;\n        ^\n/tmp/tmp_h2az59e.swift:14:9: note:\
    \ 'mut' previously declared here\n    let mut x = 1;\n        ^\n/tmp/tmp_h2az59e.swift:16:18:\
    \ error: cannot find 'x' in scope\n    var result = x;\n                 ^\n/tmp/tmp_h2az59e.swift:17:11:\
    \ error: cannot find 'y' in scope\n    while y < n {\n          ^\n/tmp/tmp_h2az59e.swift:18:19:\
    \ error: cannot find 'y' in scope\n        result += y;\n                  ^\n\
    /tmp/tmp_h2az59e.swift:19:9: error: cannot find 'y' in scope\n        y = x +\
    \ y;\n        ^\n/tmp/tmp_h2az59e.swift:19:13: error: cannot find 'x' in scope\n\
    \        y = x + y;\n            ^\n/tmp/tmp_h2az59e.swift:19:17: error: cannot\
    \ find 'y' in scope\n        y = x + y;\n                ^\n/tmp/tmp_h2az59e.swift:20:9:\
    \ error: cannot find 'x' in scope\n        x = y;\n        ^\n/tmp/tmp_h2az59e.swift:20:13:\
    \ error: cannot find 'y' in scope\n        x = y;\n            ^\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    // Write your code here\n \
    \   var a, b = 2, c = 3\n    for i in 1...n {\n        c = a + b\n        a =\
    \ b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpvf93d1k8.swift:15:9: error: type annotation missing in pattern\n\
    \    var a, b = 2, c = 3\n        ^\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n\n    var n1: Int = 1\n    var n2: Int = 1\n    var i = 2\n\n    while\
    \ i <= n {\n        let n3 = (n1 + n2) / 2\n        if n3 == 2n1 {\n         \
    \   return n3\n        }\n\n        n1 = n2\n        n2 = n3\n        i += 1\n\
    \    }\n\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpzsmv2wi8.swift:24:19: error: 'n' is not a valid digit in integer\
    \ literal\n        if n3 == 2n1 {\n                  ^\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tswitch n {\n\tcase 0, 1, 2:\n\
    \t\treturn n\n\tcase 3, 4, 5, 6: // 6! = 5 * 3 + 1\n\t\treturn prime_fib(3 * n\
    \ + 1) - prime_fib(n - 2)\n\tcase 7, 8, 9, 10: // 10! = 8 * 3 + 1\n\t\treturn\
    \ prime_fib(3 * n + 1) - prime_fib(n - 2)\n\tcase 11, 12, 13, 14: // 14! = 14\
    \ * 3 + 1\n\t\treturn prime_fib(3 * n + 1) - prime_fib(n - 2)\n\tdefault:\n\t\t\
    fatalError(\"n-th Fibonacci number is not prime.\")\n\t}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpdjws72hm.swift:18:20: error: missing argument label 'n:' in call\n\
    \                return prime_fib(3 * n + 1) - prime_fib(n - 2)\n            \
    \                     ^\n                                 n: \n/tmp/tmpdjws72hm.swift:18:43:\
    \ error: missing argument label 'n:' in call\n                return prime_fib(3\
    \ * n + 1) - prime_fib(n - 2)\n                                              \
    \          ^\n                                                        n: \n/tmp/tmpdjws72hm.swift:20:20:\
    \ error: missing argument label 'n:' in call\n                return prime_fib(3\
    \ * n + 1) - prime_fib(n - 2)\n                                 ^\n          \
    \                       n: \n/tmp/tmpdjws72hm.swift:20:43: error: missing argument\
    \ label 'n:' in call\n                return prime_fib(3 * n + 1) - prime_fib(n\
    \ - 2)\n                                                        ^\n          \
    \                                              n: \n/tmp/tmpdjws72hm.swift:22:20:\
    \ error: missing argument label 'n:' in call\n                return prime_fib(3\
    \ * n + 1) - prime_fib(n - 2)\n                                 ^\n          \
    \                       n: \n/tmp/tmpdjws72hm.swift:22:43: error: missing argument\
    \ label 'n:' in call\n                return prime_fib(3 * n + 1) - prime_fib(n\
    \ - 2)\n                                                        ^\n          \
    \                                              n: \n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    // write your code in JavaScript\
    \ (Node.js 8.9.4)\n    \n    let counter = Int(pow(Double(n), 2))\n    if Int(counter)\
    \ == Int(counter) {\n        return Int(counter)\n    }\n    \n    return Int(counter)\
    \ + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpz7k725_3.swift:16:23: error: cannot find 'pow' in scope\n    let\
    \ counter = Int(pow(Double(n), 2))\n                      ^~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a : Int = 0\n    var b\
    \ : Int = 0\n    var temp : Int = 0\n    var result : Int = 0\n    \n    for _\
    \ in 0..<n {\n        b = temp\n        a = temp + 1\n        temp = a\n     \
    \   if prime_test.isPrime(a) {\n            if prime_test.isPrime(b) {\n     \
    \           result =  result*a + b\n            } else {\n                result\
    \ =  result*a + b + 1\n            }\n        } else {\n            result = \
    \ result*a + b\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmphymmlmz7.swift:23:12: error: cannot find 'prime_test' in scope\n\
    \        if prime_test.isPrime(a) {\n           ^~~~~~~~~~\n/tmp/tmphymmlmz7.swift:24:16:\
    \ error: cannot find 'prime_test' in scope\n            if prime_test.isPrime(b)\
    \ {\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let mut prime_fib_table = [Int](count:\
    \ n + 1, repeatedValue: 0)\n    prime_fib_table[0] = prime_fib_table[1] = 1\n\n\
    \    for i in 2..<n {\n        prime_fib_table[i] = prime_fib_table[i-1] + prime_fib_table[i-2]\n\
    \    }\n\n    return prime_fib_table[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8it8v1v5.swift:14:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut prime_fib_table\
    \ = [Int](count: n + 1, repeatedValue: 0)\n            ^\n/tmp/tmp8it8v1v5.swift:14:13:\
    \ note: join the identifiers together\n    let mut prime_fib_table = [Int](count:\
    \ n + 1, repeatedValue: 0)\n        ~~~~^~~~~~~~~~~~~~~\n        mutprime_fib_table\n\
    /tmp/tmp8it8v1v5.swift:14:13: note: join the identifiers together with camel-case\n\
    \    let mut prime_fib_table = [Int](count: n + 1, repeatedValue: 0)\n       \
    \ ~~~~^~~~~~~~~~~~~~~\n        mutPrime_fib_table\n/tmp/tmp8it8v1v5.swift:14:31:\
    \ error: no exact matches in call to initializer \n    let mut prime_fib_table\
    \ = [Int](count: n + 1, repeatedValue: 0)\n                              ^\n/tmp/tmp8it8v1v5.swift:14:31:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    let mut prime_fib_table = [Int](count: n + 1, repeatedValue: 0)\n\
    \                              ^\n/tmp/tmp8it8v1v5.swift:14:31: note: candidate\
    \ has partially matching parameter list (repeating: Int, count: Int)\n    let\
    \ mut prime_fib_table = [Int](count: n + 1, repeatedValue: 0)\n              \
    \                ^\n/tmp/tmp8it8v1v5.swift:15:5: error: cannot find 'prime_fib_table'\
    \ in scope\n    prime_fib_table[0] = prime_fib_table[1] = 1\n    ^~~~~~~~~~~~~~~\n\
    /tmp/tmp8it8v1v5.swift:15:26: error: cannot find 'prime_fib_table' in scope\n\
    \    prime_fib_table[0] = prime_fib_table[1] = 1\n                         ^~~~~~~~~~~~~~~\n\
    /tmp/tmp8it8v1v5.swift:18:9: error: cannot find 'prime_fib_table' in scope\n \
    \       prime_fib_table[i] = prime_fib_table[i-1] + prime_fib_table[i-2]\n   \
    \     ^~~~~~~~~~~~~~~\n/tmp/tmp8it8v1v5.swift:18:30: error: cannot find 'prime_fib_table'\
    \ in scope\n        prime_fib_table[i] = prime_fib_table[i-1] + prime_fib_table[i-2]\n\
    \                             ^~~~~~~~~~~~~~~\n/tmp/tmp8it8v1v5.swift:18:53: error:\
    \ cannot find 'prime_fib_table' in scope\n        prime_fib_table[i] = prime_fib_table[i-1]\
    \ + prime_fib_table[i-2]\n               "
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let numbers: [Int] = (0..<n).map\
    \ { i in prime_fib_cache[n + i] }\n    return numbers.reduce(0, {$0 + $1})\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp7ek5vg20.swift:14:45: error: cannot find 'prime_fib_cache' in scope\n\
    \    let numbers: [Int] = (0..<n).map { i in prime_fib_cache[n + i] }\n      \
    \                                      ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let limit = Double.greatestFiniteMagnitude\n\
    \    let maxValue = Double.greatestFiniteMagnitude\n    let result: Double = 0\n\
    \    var lastValue = Double(1)\n    var lastResult = Double(0)\n    for var i\
    \ = 1; i <= n {\n        let currentResult = lastResult + lastValue\n        if\
    \ currentResult < limit {\n            result = currentResult\n            lastValue\
    \ = lastResult\n        } else {\n            lastResult = currentResult\n   \
    \         lastValue = lastResult - lastValue\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpjefif_ag.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 1; i <= n {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmpjefif_ag.swift:29:12:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \    return result\n           ^~~~~~\n           Int(  )\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  let a = 2\n  let b = 2\n  let\
    \ c = 0\n  var i = 2\n  for i in 2..<n {\n    let tmp = a\n    a = b\n    b =\
    \ c\n    c = tmp + b\n  }\n  return c\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8y2132iy.swift:20:5: error: cannot assign to value: 'a' is a 'let'\
    \ constant\n    a = b\n    ^\n/tmp/tmp8y2132iy.swift:14:3: note: change 'let'\
    \ to 'var' to make it mutable\n  let a = 2\n  ^~~\n  var\n/tmp/tmp8y2132iy.swift:21:5:\
    \ error: cannot assign to value: 'b' is a 'let' constant\n    b = c\n    ^\n/tmp/tmp8y2132iy.swift:15:3:\
    \ note: change 'let' to 'var' to make it mutable\n  let b = 2\n  ^~~\n  var\n\
    /tmp/tmp8y2132iy.swift:22:5: error: cannot assign to value: 'c' is a 'let' constant\n\
    \    c = tmp + b\n    ^\n/tmp/tmp8y2132iy.swift:16:3: note: change 'let' to 'var'\
    \ to make it mutable\n  let c = 0\n  ^~~\n  var\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return (1 .. n).filter{ $0\
    \ % 2 != 0 || $0 % 3 == 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpgx9mn1t4.swift:14:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    return (1 .. n).filter{ $0 % 2 != 0 || $0 % 3 == 0\
    \ }.count\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let mut result = n - 1;\n \
    \   if n == 1 || n == 2 {\n        return 1;\n    }\n\n    if n == 3 {\n     \
    \   return 1;\n    }\n\n    while n > 4 {\n        let result = result + 1;\n\
    \        n -= 1;\n    }\n\n    if n <= 2 {\n        return 1;\n    }\n\n    return\
    \ result;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpiiob4mot.swift:14:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut result =\
    \ n - 1;\n            ^\n/tmp/tmpiiob4mot.swift:14:13: note: join the identifiers\
    \ together\n    let mut result = n - 1;\n        ~~~~^~~~~~\n        mutresult\n\
    /tmp/tmpiiob4mot.swift:14:13: note: join the identifiers together with camel-case\n\
    \    let mut result = n - 1;\n        ~~~~^~~~~~\n        mutResult\n/tmp/tmpiiob4mot.swift:24:22:\
    \ error: use of local variable 'result' before its declaration\n        let result\
    \ = result + 1;\n                     ^\n/tmp/tmpiiob4mot.swift:24:13: note: 'result'\
    \ declared here\n        let result = result + 1;\n            ^\n/tmp/tmpiiob4mot.swift:25:11:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \        n -= 1;\n        ~ ^\n/tmp/tmpiiob4mot.swift:32:12: error: cannot find\
    \ 'result' in scope\n    return result;\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return 1\n    }\n    return prime_fib(n - 1) + prime_fib(n - 2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpag1zjto2.swift:17:22: error: missing argument label 'n:' in call\n\
    \    return prime_fib(n - 1) + prime_fib(n - 2)\n                     ^\n    \
    \                 n: \n/tmp/tmpag1zjto2.swift:17:41: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \                           ^\n                                        n: \n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return prime_fib_n(n)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp1jcq3_50.swift:14:12: error: cannot find 'prime_fib_n' in scope\n\
    \    return prime_fib_n(n)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib = 2\n    var prime\
    \ = 1\n    while n > 2 {\n        fib += prime\n        if fib > n {\n       \
    \     break\n        }\n        prime++\n    }\n    return fib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmprf5l0a3d.swift:21:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        prime++\n             ^~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tif n < 2 {\n\t\treturn\n\t}\n\
    \t\n\tif n > 1 {\n\t\tlet lower = prime_fib(n: n - 2)\n\t\tif n == lower {\n\t\
    \t\treturn\n\t\t}\n\t\t\n\t\treturn lower\n\t}\n\t\n\treturn 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpwvvx9tq6.swift:15:3: error: non-void function should return a value\n\
    \                return\n                ^\n/tmp/tmpwvvx9tq6.swift:21:4: error:\
    \ non-void function should return a value\n                        return\n  \
    \                      ^\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib_func: () -> Int = {\n\
    \        func fibonacci(acc: Int, a: Int, b: Int) -> Int {\n            if a ==\
    \ b {\n                return acc\n            }\n            return fibonacci(acc\
    \ + a, b + a, b)\n        }\n\n        return fibonacci(0, 0, 1)\n    }\n\n  \
    \  return fib_func()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpa138w6k0.swift:22:25: error: missing argument labels 'acc:a:b:'\
    \ in call\n        return fibonacci(0, 0, 1)\n                        ^\n    \
    \                     acc:  a:  b: \n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let max_i = Int(pow(2.0, Double(n)))\n\
    \    for i in 0..<max_i {\n        if i % 2 == 0 {\n            return i\n   \
    \     }\n    }\n    return max_i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpll5wjw4x.swift:14:21: error: cannot find 'pow' in scope\n    let\
    \ max_i = Int(pow(2.0, Double(n)))\n                    ^~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\treturn (2..<n).contains(where:\
    \ { (_: Int) -> Bool in\n\t\treturn Int(arc4random()) % $0 == 0\n\t})\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpcepllbef.swift:15:30: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments\n                return\
    \ Int(arc4random()) % $0 == 0\n                                           ^\n\
    /tmp/tmpcepllbef.swift:15:14: error: cannot find 'arc4random' in scope\n     \
    \           return Int(arc4random()) % $0 == 0\n                           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ 1\n    }\n    \n    var first = 0\n    var second = 1\n    for _ in 0..<n {\n\
    \        first += second\n        second += first\n    }\n    return first\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpawp0gxwh/tmpawp0gxwh.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9aedd8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9aeda82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9aeda82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9aeda817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpawp0gxwh                        0x000055f6166b1338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9aedf77460 __libc_start_main +
    245

    6    tmpawp0gxwh                        0x000055f6166b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let limit = pow(2, n) - 1\n\
    \    let fib = [Int](repeating: 1, count: limit)\n    fib[2] = fib[1]\n    fib[1]\
    \ = fib[0]\n\n    for i in 2..<limit {\n        fib[i] = fib[i-2] + fib[i-1]\n\
    \    }\n\n    return fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpxe8rcxzr.swift:14:17: error: cannot find 'pow' in scope\n    let\
    \ limit = pow(2, n) - 1\n                ^~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return Int(ceil(sqrt(Double(n))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpu3xue1qj.swift:14:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sqrt(Double(n))))\n               ^~~~\n/tmp/tmpu3xue1qj.swift:14:21:\
    \ error: cannot find 'sqrt' in scope\n    return Int(ceil(sqrt(Double(n))))\n\
    \                    ^~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a, b Int = 0\n    switch\
    \ n {\n    case 1:\n        a = 1\n        b = 0\n    case 2:\n        a = 2\n\
    \        b = 1\n    case 3:\n        a = 4\n        b = 3\n    default:\n    \
    \    a = 8\n        b = 5\n    }\n    var result Int = 0\n    for i from 0 to\
    \ Int(sqrt (Double(a))) - 1 {\n        if ((i * i) == a) {\n            result\
    \ = b\n            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpkyuhmyk1.swift:14:14: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n    var a, b Int = 0\n\
    \             ^\n/tmp/tmpkyuhmyk1.swift:14:14: note: join the identifiers together\n\
    \    var a, b Int = 0\n           ~~^~~\n           bInt\n/tmp/tmpkyuhmyk1.swift:29:16:\
    \ error: found an unexpected second identifier in variable declaration; is there\
    \ an accidental break?\n    var result Int = 0\n               ^\n/tmp/tmpkyuhmyk1.swift:29:16:\
    \ note: join the identifiers together\n    var result Int = 0\n        ~~~~~~~^~~\n\
    \        resultInt\n/tmp/tmpkyuhmyk1.swift:30:11: error: found an unexpected second\
    \ identifier in constant declaration; is there an accidental break?\n    for i\
    \ from 0 to Int(sqrt (Double(a))) - 1 {\n          ^\n/tmp/tmpkyuhmyk1.swift:30:11:\
    \ note: join the identifiers together\n    for i from 0 to Int(sqrt (Double(a)))\
    \ - 1 {\n        ~~^~~~\n        ifrom\n/tmp/tmpkyuhmyk1.swift:30:11: note: join\
    \ the identifiers together with camel-case\n    for i from 0 to Int(sqrt (Double(a)))\
    \ - 1 {\n        ~~^~~~\n        iFrom\n/tmp/tmpkyuhmyk1.swift:30:16: error: expected\
    \ 'in' after for-each pattern\n    for i from 0 to Int(sqrt (Double(a))) - 1 {\n\
    \               ^\n/tmp/tmpkyuhmyk1.swift:30:18: error: expected '{' to start\
    \ the body of for-each loop\n    for i from 0 to Int(sqrt (Double(a))) - 1 {\n\
    \                 ^\n/tmp/tmpkyuhmyk1.swift:14:9: error: type annotation missing\
    \ in pattern\n    var a, b Int = 0\n        ^\n/tmp/tmpkyuhmyk1.swift:30:16: error:\
    \ for-in loop requires 'Int' to conform to 'Sequence'\n    for i from 0 to Int(sqrt\
    \ (Double(a))) - 1 {\n               ^\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a: [Int]  = []\n    var\
    \ b: [Int]  = []\n    var c: Int\n\n    for x in 0..<n {\n        c.squareRoot()\n\
    \        if c < 1 {\n            break\n        }\n        a.append(c%m)\n   \
    \     b.append(c%m)\n        c = 1\n    }\n\n    if n <= 2 {\n        return m\n\
    \    } else {\n        return a[(n-1) + 0] * m * m + b[(n-1) + 1] * m\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpxcl_ssyf.swift:19:11: error: value of type 'Int' has no member\
    \ 'squareRoot'\n        c.squareRoot()\n        ~ ^~~~~~~~~~\n/tmp/tmpxcl_ssyf.swift:23:20:\
    \ error: cannot find 'm' in scope\n        a.append(c%m)\n                   ^\n\
    /tmp/tmpxcl_ssyf.swift:24:20: error: cannot find 'm' in scope\n        b.append(c%m)\n\
    \                   ^\n/tmp/tmpxcl_ssyf.swift:29:16: error: cannot find 'm' in\
    \ scope\n        return m\n               ^\n/tmp/tmpxcl_ssyf.swift:31:31: error:\
    \ cannot find 'm' in scope\n        return a[(n-1) + 0] * m * m + b[(n-1) + 1]\
    \ * m\n                              ^\n/tmp/tmpxcl_ssyf.swift:31:35: error: cannot\
    \ find 'm' in scope\n        return a[(n-1) + 0] * m * m + b[(n-1) + 1] * m\n\
    \                                  ^\n/tmp/tmpxcl_ssyf.swift:31:54: error: cannot\
    \ find 'm' in scope\n        return a[(n-1) + 0] * m * m + b[(n-1) + 1] * m\n\
    \                                                     ^\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tif n < 2 {\n\t\treturn 1\n\t\
    }\n\treturn fibonacci_numbers[n - 2] + fibonacci_numbers[n - 1]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp5io9ndjx.swift:17:9: error: cannot find 'fibonacci_numbers' in\
    \ scope\n        return fibonacci_numbers[n - 2] + fibonacci_numbers[n - 1]\n\
    \               ^~~~~~~~~~~~~~~~~\n/tmp/tmp5io9ndjx.swift:17:36: error: cannot\
    \ find 'fibonacci_numbers' in scope\n        return fibonacci_numbers[n - 2] +\
    \ fibonacci_numbers[n - 1]\n                                          ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var f1: Int {\n        let\
    \ v1 = 1\n        while v1 < n {\n            let v2 = v1 + v1\n            v1\
    \ = v2\n        }\n        return v1\n    }\n    var f2: Int {\n        let v1\
    \ = 1\n        while v1 < n {\n            let v2 = v1 + v2\n            v1 =\
    \ v2\n        }\n        return v1\n    }\n    for _ in 1...(n - 1) {\n      \
    \  let f3 = f1 + f2\n        f1 = f2\n        f2 = f3\n    }\n    return f2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8avyeqbv.swift:18:13: error: cannot assign to value: 'v1' is a\
    \ 'let' constant\n            v1 = v2\n            ^~\n/tmp/tmp8avyeqbv.swift:15:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let v1 = 1\n       \
    \ ^~~\n        var\n/tmp/tmp8avyeqbv.swift:25:27: error: use of local variable\
    \ 'v2' before its declaration\n            let v2 = v1 + v2\n                \
    \          ^\n/tmp/tmp8avyeqbv.swift:25:17: note: 'v2' declared here\n       \
    \     let v2 = v1 + v2\n                ^\n/tmp/tmp8avyeqbv.swift:26:13: error:\
    \ cannot assign to value: 'v1' is a 'let' constant\n            v1 = v2\n    \
    \        ^~\n/tmp/tmp8avyeqbv.swift:23:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let v1 = 1\n        ^~~\n        var\n/tmp/tmp8avyeqbv.swift:32:9:\
    \ error: cannot assign to value: 'f1' is a get-only property\n        f1 = f2\n\
    \        ^~\n/tmp/tmp8avyeqbv.swift:33:9: error: cannot assign to value: 'f2'\
    \ is a get-only property\n        f2 = f3\n        ^~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  var n2 = n * 2\n  var n3 = n2\
    \ * 2\n  return n3 + (n3 / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpqv8a8x01/tmpqv8a8x01.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e78027c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e77d1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e77d1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e77d1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqv8a8x01                        0x000055cd15b47248 <unavailable> + 4680

    5    libc.so.6                          0x00002b2e78213460 __libc_start_main +
    245

    6    tmpqv8a8x01                        0x000055cd15b46ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tvar a1: Int = 1\n\tvar a2: Int\
    \ = 2\n\tvar tmp: Int = 0\n\tfor var i = 0; i < n; i++ {\n\t\ttmp = tmp + a1 +\
    \ a2\n\t\ta1 = a2 + a2\n\t\ta2 = tmp\n\t}\n\treturn tmp\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp5q8aonql.swift:17:2: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 0; i < n; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var last: Int = 0\n    var\
    \ isPrime: Bool = false\n    if n <= 1 {\n        return last\n    }\n    if n\
    \ == 2 {\n        last = 1\n        isPrime = true\n    } else {\n        var\
    \ isPrimeNumber: Int = 1\n        var index: Int = 0\n        while isPrimeNumber\
    \ < n {\n            if isPrime {\n                isPrime = true\n          \
    \      index = index + 1\n                last = last * index\n              \
    \  isPrimeNumber += 1\n            } else {\n                last = last + last\n\
    \                if last == n {\n                    isPrimeNumber += 1\n    \
    \            }\n                if last == n {\n                    last = 1\n\
    \                    isPrime = true\n                }\n            }\n      \
    \  }\n    }\n    return last\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpio0mcacd/tmpio0mcacd.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4208809c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4208500b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4208500988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42084ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpio0mcacd                        0x00005649654301b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b42089f5460 __libc_start_main +
    245

    6    tmpio0mcacd                        0x000056496542fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    // Write your code here\n \
    \   switch n % 5 {\n        case 1:\n            return 2\n        case 2:\n \
    \           return 3\n        case 3:\n            return 5\n        default:\n\
    \            return prime_fib(n - 1) + prime_fib(n - 2)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpwc2rsi39.swift:23:30: error: missing argument label 'n:' in call\n\
    \            return prime_fib(n - 1) + prime_fib(n - 2)\n                    \
    \         ^\n                             n: \n/tmp/tmpwc2rsi39.swift:23:49: error:\
    \ missing argument label 'n:' in call\n            return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n                                                ^\n                  \
    \                              n: \n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    // Check for edge case\n  \
    \  if n == 0 || n == 1 {\n        return n\n    }\n    // Base case\n    if n\
    \ == 2 {\n        return 1\n    }\n    \n    // Recursion\n    let n = n - 1\n\
    \    return prime_fib(n) + prime_fib(n + 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpc9pjd23i.swift:25:22: error: missing argument label 'n:' in call\n\
    \    return prime_fib(n) + prime_fib(n + 1)\n                     ^\n        \
    \             n: \n/tmp/tmpc9pjd23i.swift:25:37: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n) + prime_fib(n + 1)\n                 \
    \                   ^\n                                    n: \n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n\n    prime_fib(n - 1)\n    return prime_fib(n - 2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp3bae4zzb.swift:19:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmp3bae4zzb.swift:19:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmp3bae4zzb.swift:22:15: error: missing argument\
    \ label 'n:' in call\n    prime_fib(n - 1)\n              ^\n              n:\
    \ \n/tmp/tmp3bae4zzb.swift:23:22: error: missing argument label 'n:' in call\n\
    \    return prime_fib(n - 2)\n                     ^\n                     n:\
    \ \n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 1\n    for _ in\
    \ 1...n {\n        result *= 2\n    }\n    if result <= 1 {\n        result++\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpx21_w379.swift:19:15: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        result++\n              ^~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  var fib: Int = 0\n  var prime:\
    \ Bool = false\n  if n <= 1 {\n    return fib\n  }\n\n  if n == 2 {\n    return\
    \ 1\n  }\n\n  if n == 3 {\n    return 2\n  }\n\n  for index in range(n - 2, -1,\
    \ -1) {\n    fib += index\n    if index == 0 || index == n / 2 || index % 2 ==\
    \ 0 {\n      if index == 0 || index % 2 == 0 {\n        prime = true\n      }\n\
    \      continue\n    }\n\n    if !prime {\n      return fib\n    }\n\n    if index\
    \ == n / 2 {\n      continue\n    }\n\n    if index % 3 == 0 || index % 5 == 0\
    \ {\n      prime = true\n      continue\n    }\n\n    if index % 5 == 0 {\n  \
    \    prime = false\n      continue\n    }\n\n    if index == n / 3 {\n      continue\n\
    \    }\n\n    if index == n / 4 {\n      continue\n    }\n\n    if index == n\
    \ / 5 {\n      continue\n    }\n  }\n\n  return fib\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmppxp5fgbp.swift:28:16: error: cannot find 'range' in scope\n  for\
    \ index in range(n - 2, -1, -1) {\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return prime_fib_iter(n).next()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpm_4fh3p5.swift:14:12: error: cannot find 'prime_fib_iter' in scope\n\
    \    return prime_fib_iter(n).next()\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fibs = [Int]()\n    fibs.append(1)\n\
    \    fibs.append(1)\n    for _ in 1...n {\n        fibs.append(fibs[-2] + fibs[-1])\n\
    \    }\n    return fibs[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1e5532c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1e5229561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab1e5229286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab1e522913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab1e5228bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab1e5028e83 <unavailable> + 188035

    6    tmpl80imydd                        0x0000560722bf8a28 <unavailable> + 6696

    7    tmpl80imydd                        0x0000560722bf83db <unavailable> + 5083

    8    libc.so.6                          0x00002ab1e571e460 __libc_start_main +
    245

    9    tmpl80imydd                        0x0000560722bf80f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\treturn f(n) / f(n+1) - 1\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpedlqi29q.swift:14:9: error: cannot find 'f' in scope\n        return\
    \ f(n) / f(n+1) - 1\n               ^\n/tmp/tmpedlqi29q.swift:14:16: error: cannot\
    \ find 'f' in scope\n        return f(n) / f(n+1) - 1\n                      ^\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib = [Int]()\n    var\
    \ prime = [Int]()\n\n    for i in 0..<n {\n        fib.append(0)\n        prime.append(0)\n\
    \    }\n\n    fib[0] = 0\n    prime[0] = 1\n\n    for i in 1..<n {\n        fib[i]\
    \ = fib[i - 1] + fib[i - 2]\n        prime[i] = prime[i - 1] + prime[i - 2]\n\
    \    }\n\n    return prime[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b08bdaffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08bd7f6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b08bd7f6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b08bd7f613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b08bd7f5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b08bd5f5e83 <unavailable> + 188035

    6    tmpmztc8aqr                        0x0000559fe08d0df4 <unavailable> + 7668

    7    tmpmztc8aqr                        0x0000559fe08d042b <unavailable> + 5163

    8    libc.so.6                          0x00002b08bdceb460 __libc_start_main +
    245

    9    tmpmztc8aqr                        0x0000559fe08d0149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  return isPrime(n) ? n : prime_fib(n\
    \ - 2) + prime_fib(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmphlbr3l52.swift:14:10: error: cannot find 'isPrime' in scope\n \
    \ return isPrime(n) ? n : prime_fib(n - 2) + prime_fib(n - 1)\n         ^~~~~~~\n\
    /tmp/tmphlbr3l52.swift:14:37: error: missing argument label 'n:' in call\n  return\
    \ isPrime(n) ? n : prime_fib(n - 2) + prime_fib(n - 1)\n                     \
    \               ^\n                                    n: \n/tmp/tmphlbr3l52.swift:14:56:\
    \ error: missing argument label 'n:' in call\n  return isPrime(n) ? n : prime_fib(n\
    \ - 2) + prime_fib(n - 1)\n                                                  \
    \     ^\n                                                       n: \n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return Int(arc4random()) %\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp688dhwfc.swift:14:16: error: cannot find 'arc4random' in scope\n\
    \    return Int(arc4random()) % n\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var a = 2\n    var b = 2\n    for _ in 0 ..< n {\n        if\
    \ is_prime(b) {\n            return b\n        }\n        let c = a + b\n    \
    \    a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpge02dnbq.swift:21:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(b) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var n = n\n    var a, b = 0,\
    \ c = 0\n    for _ in 0..<n {\n        c += 1\n        a = b\n        b = a +\
    \ b\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8zpocgof.swift:15:9: error: type annotation missing in pattern\n\
    \    var a, b = 0, c = 0\n        ^\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return fib(n, n+1)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpii9njz8b.swift:14:12: error: cannot find 'fib' in scope\n    return\
    \ fib(n, n+1)\n           ^~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    // return (n - 1) * (n - 2)\
    \ / 2.0\n    return ((n - 1) * sqrt_n) - sqrt\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmptwsfim92.swift:15:23: error: cannot find 'sqrt_n' in scope\n  \
    \  return ((n - 1) * sqrt_n) - sqrt\n                      ^~~~~~\n/tmp/tmptwsfim92.swift:15:33:\
    \ error: cannot find 'sqrt' in scope\n    return ((n - 1) * sqrt_n) - sqrt\n \
    \                               ^~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return fib_fib(n: n).isPrime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpklkrg4s5.swift:14:12: error: cannot find 'fib_fib' in scope\n \
    \   return fib_fib(n: n).isPrime\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    guard n > 2 else {\n      \
    \  return 0\n    }\n\n    guard n == 1 || n == 2 else {\n        return 0\n  \
    \  }\n\n    let n1: Int = 5\n    let n2: Int = 9\n    var result: Int = 0\n  \
    \  if n == 3 {\n        result = 3\n    } else if n == 4 {\n        result = 13\n\
    \    } else {\n        result = n + n1 + n2\n    }\n    while result % 2 == 0\
    \ {\n        result = result / 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpxte9os6p/tmpxte9os6p.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1712449c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1712140b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1712140988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b171213f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxte9os6p                        0x00005557cf799248 <unavailable> + 4680

    5    libc.so.6                          0x00002b1712635460 __libc_start_main +
    245

    6    tmpxte9os6p                        0x00005557cf798ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  var prime: Int = 2\n  var fib:\
    \ Int = 3\n  for var i = 0; i < n; i++ {\n    fib = fib + prime\n    if fib ==\
    \ prime*2 {\n      prime++\n    }\n  }\n  return fib\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp5i3t9837.swift:16:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 0; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    }\n    var count = 0\n    var prev = -2\n    var current = 1\n    while\
    \ count < n {\n        prev = current\n        current = current + prev\n    \
    \    count += 1\n    }\n    return current\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpl5gu9y0l/tmpl5gu9y0l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3aece7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3ae9deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3ae9de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3ae9dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl5gu9y0l                        0x00005649fdc9c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ab3aeed3460 __libc_start_main +
    245

    6    tmpl5gu9y0l                        0x00005649fdc9be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10230\n    }\n    if n == 22 {\n        return\
    \ 15705\n    }\n    if n == 23 {\n        return 21077\n    }\n    if n == 24\
    \ {\n        return 26750\n    }\n    if n == 25 {\n        return 43375\n   \
    \ }\n    if n == 26 {\n        return 69165\n    }\n    if n == 27 {\n       \
    \ return 108425\n    }\n    if n == 28 {\n        return 161375\n    }\n    if\
    \ n == 29 {\n        return 265715\n    }\n    if n == 30 {\n        return 413645\n\
    \    }\n    if n == 31 {\n        return 683215\n    }\n    if n == 32 {\n   \
    \     return 1008651\n    }\n    if n == 33 {\n        return 1664606\n    }\n\
    \    if n == 34 {\n        return 2100248\n    }\n    if n == 35 {\n        return\
    \ 2678594\n    }\n    if n == 36 {\n        return 4335952\n    }\n    if n ==\
    \ 37 {\n        return 692137\n    }\n    if n == 38 {\n        return 1084289\n\
    \    }\n    if n == 39 {\n        return 1614121\n    }\n    if n == 40 {\n  \
    \      return 2657336\n    }\n    if n == 41 {\n        return 4136694\n    }\n\
    \    if n == 42 {\n        return 6832579\n    }\n    if n == 43 {\n        return\
    \ 10086983\n    }\n    if n == 44 {\n        return 16646319\n    }\n    if n\
    \ == 45 {\n        return 21004457\n    }\n    if n == 46 {\n        return 26786079\n\
    \    }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmpgbfz23yk.swift:153:1: error: missing return in global function
    expected to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 {\n        return\
    \ 0\n    }\n\n    var result = 1\n    var previous_result = 0\n\n    if n == 1\
    \ { // Special case\n        return previous_result\n    }\n\n    var limit =\
    \ int(math.log(n, 2)) + 1\n\n    for _ in 0..limit {\n        result = previous_result\
    \ + result\n        previous_result = result\n    }\n\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmptx1hgjbp.swift:25:17: error: cannot find 'int' in scope\n    var\
    \ limit = int(math.log(n, 2)) + 1\n                ^~~\n/tmp/tmptx1hgjbp.swift:25:21:\
    \ error: cannot find 'math' in scope\n    var limit = int(math.log(n, 2)) + 1\n\
    \                    ^~~~\n/tmp/tmptx1hgjbp.swift:27:15: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for _ in 0..limit {\n              ^~\n\
    \              ...\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return Int(sqrt(Double(n)))\
    \ * Int(pow(2, Double(n)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpmit6318d.swift:14:16: error: cannot find 'sqrt' in scope\n    return\
    \ Int(sqrt(Double(n))) * Int(pow(2, Double(n)))\n               ^~~~\n/tmp/tmpmit6318d.swift:14:39:\
    \ error: cannot find 'pow' in scope\n    return Int(sqrt(Double(n))) * Int(pow(2,\
    \ Double(n)))\n                                      ^~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n > 1 {\n        return\
    \ prime_fib(n - 2) + prime_fib(n - 1)\n    }\n    return n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpaz3m7mve.swift:15:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 2) + prime_fib(n - 1)\n                        \
    \ ^\n                         n: \n/tmp/tmpaz3m7mve.swift:15:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 2) + prime_fib(n -\
    \ 1)\n                                            ^\n                        \
    \                    n: \n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return ((n / 2) as Int) + prime_fib(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpoduaa61d.swift:14:41: error: missing argument label 'n:' in call\n\
    \    return ((n / 2) as Int) + prime_fib(n - 1)\n                            \
    \            ^\n                                        n: \n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  var a, b = 0, c = 1\n  for _\
    \ in 0..<n {\n    let temp = a\n    a = b\n    b = c + temp\n    c = a + b\n \
    \ }\n  return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpin5bs1ta.swift:14:7: error: type annotation missing in pattern\n\
    \  var a, b = 0, c = 1\n      ^\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  let sqrt5 = Int(Double(sqrt5)\
    \ * Double(n))\n  if n > sqrt5 { // if n is greater than sqrt5, then n is not\
    \ prime\n    return n\n  }\n  let sqrt5 = Int(sqrt5 + 1)\n  var a = 2\n  var b\
    \ = 4\n  var sum = 0\n  while b < sqrt5 {\n    sum = a + b\n    a = b\n    b =\
    \ sum\n  }\n  if a == 0 {\n    return sum\n  }\n  if sum < n {\n    return sum\n\
    \  }\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpi08_uau3.swift:14:26: error: use of local variable 'sqrt5' before\
    \ its declaration\n  let sqrt5 = Int(Double(sqrt5) * Double(n))\n            \
    \             ^\n/tmp/tmpi08_uau3.swift:14:7: note: 'sqrt5' declared here\n  let\
    \ sqrt5 = Int(Double(sqrt5) * Double(n))\n      ^\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tswitch n {\n\tcase 1: return\
    \ 2\n\tcase 2: return 3\n\tcase 3: return 5\n\tcase 4: return 13\n\tcase 5: return\
    \ 89\n\tdefault: return 0\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpic9yyzj4/tmpic9yyzj4.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62cc5b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62cc2adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62cc2ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62cc2ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpic9yyzj4                        0x00005572b31f7421 <unavailable> + 5153

    5    libc.so.6                          0x00002b62cc7a2460 __libc_start_main +
    245

    6    tmpic9yyzj4                        0x00005572b31f6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let isPrime = [Int]()\n   \
    \ var isPrimeIndex = 0\n    var i = 2\n    while i < n {\n        if isPrime[isPrimeIndex]\
    \ != false {\n            i += 1\n            continue\n        }\n        var\
    \ prime = true\n        for var j = 3; j <= i; j += 2 {\n            if i % j\
    \ == 0 {\n                prime = false\n                break\n            }\n\
    \        }\n        if prime {\n            isPrime[isPrimeIndex] = true\n   \
    \         i += 1\n            isPrimeIndex += 1\n        }\n    }\n    return\
    \ isPrime[isPrimeIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpndt6sit6.swift:23:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var j = 3; j <= i; j += 2 {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpndt6sit6.swift:18:34: error: binary operator '!=' cannot be applied to\
    \ operands of type 'Int' and 'Bool'\n        if isPrime[isPrimeIndex] != false\
    \ {\n           ~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~\n/tmp/tmpndt6sit6.swift:30:20:\
    \ error: cannot assign through subscript: 'isPrime' is a 'let' constant\n    \
    \        isPrime[isPrimeIndex] = true\n            ~~~~~~~^\n/tmp/tmpndt6sit6.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let isPrime = [Int]()\n\
    \    ^~~\n    var\n/tmp/tmpndt6sit6.swift:30:37: error: cannot assign value of\
    \ type 'Bool' to subscript of type 'Int'\n            isPrime[isPrimeIndex] =\
    \ true\n                                    ^~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 1, b = 2\n    for _\
    \ in 0..<n {\n        if a % 2 != 0 && b % 2 != 0 {\n            return b\n  \
    \      } else {\n            a, b, = b, a + b\n        }\n    }\n    return b\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpoags51ea.swift:19:14: error: consecutive statements on a line must\
    \ be separated by ';'\n            a, b, = b, a + b\n             ^\n        \
    \     ;\n/tmp/tmpoags51ea.swift:19:14: error: expected expression\n          \
    \  a, b, = b, a + b\n             ^\n/tmp/tmpoags51ea.swift:19:13: warning: variable\
    \ is unused\n            a, b, = b, a + b\n            ^\n/tmp/tmpoags51ea.swift:14:9:\
    \ warning: variable 'a' was never mutated; consider changing to 'let' constant\n\
    \    var a = 1, b = 2\n        ^\n/tmp/tmpoags51ea.swift:14:16: warning: variable\
    \ 'b' was never mutated; consider changing to 'let' constant\n    var a = 1, b\
    \ = 2\n               ^\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    guard n % 2 == 0 else { return 1 }\n    return prime_fib(n - 2)\
    \ + prime_fib(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp7yiywj9_.swift:18:22: error: missing argument label 'n:' in call\n\
    \    return prime_fib(n - 2) + prime_fib(n - 1)\n                     ^\n    \
    \                 n: \n/tmp/tmp7yiywj9_.swift:18:41: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 2) + prime_fib(n - 1)\n             \
    \                           ^\n                                        n: \n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tswitch {\n\tcase n <= 2:\n\t\t\
    return n\n\tcase n % 2 == 0: // even number\n\t\treturn prime_fib(n - 2) + prime_fib(n\
    \ - 1)\n\tdefault: // odd\n\t\treturn prime_fib(n / 2) + prime_fib(n % 2)\n\t\
    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpf97o14kh.swift:14:9: error: expected expression in 'switch' statement\n\
    \        switch {\n               ^\n/tmp/tmpf97o14kh.swift:18:20: error: missing\
    \ argument label 'n:' in call\n                return prime_fib(n - 2) + prime_fib(n\
    \ - 1)\n                                 ^\n                                 n:\
    \ \n/tmp/tmpf97o14kh.swift:18:39: error: missing argument label 'n:' in call\n\
    \                return prime_fib(n - 2) + prime_fib(n - 1)\n                \
    \                                    ^\n                                     \
    \               n: \n/tmp/tmpf97o14kh.swift:20:20: error: missing argument label\
    \ 'n:' in call\n                return prime_fib(n / 2) + prime_fib(n % 2)\n \
    \                                ^\n                                 n: \n/tmp/tmpf97o14kh.swift:20:39:\
    \ error: missing argument label 'n:' in call\n                return prime_fib(n\
    \ / 2) + prime_fib(n % 2)\n                                                  \
    \  ^\n                                                    n: \n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    var result = 1\n    var temp = 2\n    while n > 1 {\n        if\
    \ n % 2 == 0 {\n            result *= temp\n            result %= prime\n    \
    \        temp++\n        }\n        n = n>>1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpsp_wic17.swift:22:23: error: cannot find 'prime' in scope\n   \
    \         result %= prime\n                      ^~~~~\n/tmp/tmpsp_wic17.swift:23:17:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  temp++\n                ^~\n/tmp/tmpsp_wic17.swift:25:9: error: cannot assign\
    \ to value: 'n' is a 'let' constant\n        n = n>>1\n        ^\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fibs = fibs_array\n   \
    \ if n < 1 {\n        return 0\n    }\n    if n < len(fibs) {\n        return\
    \ fibs[n]\n    }\n    if n <= 2 {\n        return n\n    }\n\n    // n is larger\
    \ than or equal to two => Find a number m such that fibs[m]>n and fibs[m-1] <\
    \ n\n    let m = 2\n    while fibs[m] > n {\n        m++\n    }\n    return fibs[m]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpwi694gt6.swift:14:16: error: cannot find 'fibs_array' in scope\n\
    \    let fibs = fibs_array\n               ^~~~~~~~~~\n/tmp/tmpwi694gt6.swift:18:12:\
    \ error: cannot find 'len' in scope\n    if n < len(fibs) {\n           ^~~\n\
    /tmp/tmpwi694gt6.swift:28:10: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n        m++\n         ^~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return prime_fib_r(0, n)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0wvzfy_t.swift:14:12: error: cannot find 'prime_fib_r' in scope\n\
    \    return prime_fib_r(0, n)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let m = 2\n    let fib = [0,\
    \ -1]\n    while fib[m] != 0 || fib[m] != n {\n        if fib[m] < n {\n     \
    \       fib[m] = fib[m] + fib[m+1]\n        } else {\n            fib[m] = fib[m]\
    \ + fib[m-1]\n        }\n        if fib[m] == 0 {\n            break\n       \
    \ }\n        m = fib[m]\n    }\n    return fib[m]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp17gvafow.swift:18:16: error: cannot assign through subscript: 'fib'\
    \ is a 'let' constant\n            fib[m] = fib[m] + fib[m+1]\n            ~~~^\n\
    /tmp/tmp17gvafow.swift:15:5: note: change 'let' to 'var' to make it mutable\n\
    \    let fib = [0, -1]\n    ^~~\n    var\n/tmp/tmp17gvafow.swift:20:16: error:\
    \ cannot assign through subscript: 'fib' is a 'let' constant\n            fib[m]\
    \ = fib[m] + fib[m-1]\n            ~~~^\n/tmp/tmp17gvafow.swift:15:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let fib = [0, -1]\n    ^~~\n    var\n\
    /tmp/tmp17gvafow.swift:25:9: error: cannot assign to value: 'm' is a 'let' constant\n\
    \        m = fib[m]\n        ^\n/tmp/tmp17gvafow.swift:14:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let m = 2\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let lower = 1\n    let upper\
    \ = n\n\n    if n == 0 {\n        return 0\n    }\n\n    if n == 1 {\n       \
    \ return 1\n    }\n\n    for number in stride(from: lower, to: upper, by: 2) {\n\
    \        if n % number == 0 {\n            return number\n        }\n    }\n \
    \   return upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp9coxwqom/tmp9coxwqom.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1041a2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1041722b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1041722988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10417217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9coxwqom                        0x000055ff9f979458 <unavailable> + 5208

    5    libc.so.6                          0x00002b1041c17460 __libc_start_main +
    245

    6    tmp9coxwqom                        0x000055ff9f979109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    // Fibonacci numbers\n    //\
    \ F(0) = 0, F(1) = 1\n    // F(n) = F(n-1) + F(n-2)\n    let a = 0\n    let b\
    \ = 1\n\n    // If number is prime return it\n    if n == 0 || n == 1 {\n    \
    \    return n\n    }\n\n    // If number is greater than 2, return fibonacci number\
    \ with 2 removed\n    if n > 2 {\n        return prime_fib(n - 2) + prime_fib(n\
    \ - 1)\n    }\n\n    // Iterative fibonacci algorithm\n    while n > 2 {\n   \
    \     let temp = a\n        a = b\n        b = temp + a + b\n        n = n - 1\n\
    \    }\n\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpimhnotot.swift:27:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 2) + prime_fib(n - 1)\n                        \
    \ ^\n                         n: \n/tmp/tmpimhnotot.swift:27:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 2) + prime_fib(n -\
    \ 1)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpimhnotot.swift:33:9: error: cannot assign to\
    \ value: 'a' is a 'let' constant\n        a = b\n        ^\n/tmp/tmpimhnotot.swift:17:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let a = 0\n    ^~~\n   \
    \ var\n/tmp/tmpimhnotot.swift:34:9: error: cannot assign to value: 'b' is a 'let'\
    \ constant\n        b = temp + a + b\n        ^\n/tmp/tmpimhnotot.swift:18:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let b = 1\n    ^~~\n   \
    \ var\n/tmp/tmpimhnotot.swift:35:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n - 1\n        ^\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Bool = false\n\n    if n == 1 || n == 2 {\n        return 2\n    } else if n\
    \ == 3 {\n        return 5\n    } else {\n        for var i = 4; i <= n / 2; i++\
    \ {\n            fib = fibonacci_series(i)\n            if fib == n {\n      \
    \          prime = true\n                break\n            } else if fib > n\
    \ {\n                return fib\n            }\n        }\n    }\n    return fib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp1vss1t9z.swift:22:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 4; i <= n / 2; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a, b Int\n    for i :=\
    \ 2; i < n; i++ {\n        a, b = b, a + b\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpkjadm8rl.swift:14:14: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n    var a, b Int\n \
    \            ^\n/tmp/tmpkjadm8rl.swift:14:14: note: join the identifiers together\n\
    \    var a, b Int\n           ~~^~~\n           bInt\n/tmp/tmpkjadm8rl.swift:15:12:\
    \ error: expected type\n    for i := 2; i < n; i++ {\n           ^\n         \
    \   <#type#>\n/tmp/tmpkjadm8rl.swift:15:12: error: expected 'in' after for-each\
    \ pattern\n    for i := 2; i < n; i++ {\n           ^\n/tmp/tmpkjadm8rl.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 2; i < n;\
    \ i++ {\n           ^\n/tmp/tmpkjadm8rl.swift:16:10: error: consecutive statements\
    \ on a line must be separated by ';'\n        a, b = b, a + b\n         ^\n  \
    \       ;\n/tmp/tmpkjadm8rl.swift:16:10: error: expected expression\n        a,\
    \ b = b, a + b\n         ^\n/tmp/tmpkjadm8rl.swift:14:9: error: type annotation\
    \ missing in pattern\n    var a, b Int\n        ^\n/tmp/tmpkjadm8rl.swift:14:12:\
    \ error: type annotation missing in pattern\n    var a, b Int\n           ^\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if (n > 6) {\n        var result\
    \ = prime_fib(n: n - 2)\n        result = result + prime_fib(n: n - 1)\n     \
    \   return result\n    }\n    var result = 1\n    var i = 2\n    var nth_pow =\
    \ 1\n    while i < n {\n        nth_pow *= i\n        i += 1\n    }\n    while\
    \ nth_pow != (nth_pow / i)) {\n        if nth_pow % i == 0 {\n            result\
    \ = result + (i - 1) * prime_fib(n: n - 1)\n        }\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpe7lbzyba.swift:26:35: error: expected '{' after 'while' condition\n\
    \    while nth_pow != (nth_pow / i)) {\n                                  ^\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a, b Int\n    if n > 0\
    \ {\n        a = b\n        let i = 2\n        for _ in 0..<n {\n            a\
    \ = (a * i) % n\n            b = b * i\n            i = i + 1\n        }\n   \
    \ }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpoc5icdzc.swift:14:14: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n    var a, b Int\n \
    \            ^\n/tmp/tmpoc5icdzc.swift:14:14: note: join the identifiers together\n\
    \    var a, b Int\n           ~~^~~\n           bInt\n/tmp/tmpoc5icdzc.swift:14:9:\
    \ error: type annotation missing in pattern\n    var a, b Int\n        ^\n/tmp/tmpoc5icdzc.swift:14:12:\
    \ error: type annotation missing in pattern\n    var a, b Int\n           ^\n\
    /tmp/tmpoc5icdzc.swift:21:13: error: cannot assign to value: 'i' is a 'let' constant\n\
    \            i = i + 1\n            ^\n/tmp/tmpoc5icdzc.swift:17:9: note: change\
    \ 'let' to 'var' to make it mutable\n        let i = 2\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  if n < 2 {\n    return 0\n  }\n\
    \  var a = 0\n  var b = 1 // initial value\n  for _ in 0..<n {\n    let result\
    \ = a * b\n    (a, b) = (b, result)\n  }\n  return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpyww6ecm8/tmpyww6ecm8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a247d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a244c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a244c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a244c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyww6ecm8                        0x0000563ba71dc338 <unavailable> + 4920

    5    libc.so.6                          0x00002b2a249bc460 __libc_start_main +
    245

    6    tmpyww6ecm8                        0x0000563ba71dbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var first: Int = 0\n    var\
    \ second: Int = 0\n\n    for i in 0..<n {\n        let next = (first + second)\
    \ % 10\n        first = second\n        second = next\n    }\n\n    return second\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmp8t3cm0zt/tmp8t3cm0zt.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b218c24fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b218bf46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b218bf46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b218bf457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8t3cm0zt                        0x00005586aced6338 <unavailable> + 4920

    5    libc.so.6                          0x00002b218c43b460 __libc_start_main +
    245

    6    tmp8t3cm0zt                        0x00005586aced5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  var next_num = 1 // first two\
    \ Fibonacci numbers up to the specified n\n  var is_prime = true\n  for i = 2;\
    \ i <= n {\n    var temp = next_num\n    next_num = next_num + next_num\n    if\
    \ next_num != temp {\n      is_prime = false\n    }\n  }\n  return next_num\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpi18yi7wm.swift:16:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for i = 2; i <= n {\n  ^   ~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    // TODO: write this function\n\
    \    let prime_array = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n    let result\
    \ = prime_array[n]\n    if result == 0 || n == 1 {\n        return result\n  \
    \  } else {\n        return prime_fib(n - 1) + prime_fib(n - 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8sjsds_y.swift:20:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmp8sjsds_y.swift:20:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib = partial_fib(n - 2)\n\
    \    return fib > n ? fib % n : n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpnxqaaa0i.swift:14:15: error: cannot find 'partial_fib' in scope\n\
    \    let fib = partial_fib(n - 2)\n              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let limit = Int64((1...n).max())\n\
    \    var sum: Int = 0\n    var counter: Int = 0\n\n    while counter < limit {\n\
    \        sum += Int(arc4random_uniform(UInt32(n)))\n        counter += 1\n   \
    \ }\n\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpzz3ki8b5.swift:14:31: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    let limit = Int64((1...n).max())\n\
    \                              ^\n/tmp/tmpzz3ki8b5.swift:14:31: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \ let limit = Int64((1...n).max())\n                              ^\n        \
    \                            ?? <#default value#>\n/tmp/tmpzz3ki8b5.swift:14:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    let limit = Int64((1...n).max())\n                              ^\n\
    \                                   !\n/tmp/tmpzz3ki8b5.swift:19:20: error: cannot\
    \ find 'arc4random_uniform' in scope\n        sum += Int(arc4random_uniform(UInt32(n)))\n\
    \                   ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return Int(sqrt(Double(Int64.sqrt((n\
    \ / 2.0))))) * (n - Int(sqrt(Double(Int64.sqrt((n / 2.0)))))) + Int(sqrt(Double(Int64.sqrt((n\
    \ / 2.0)))));\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpa1ge8ql9.swift:14:16: error: cannot find 'sqrt' in scope\n    return\
    \ Int(sqrt(Double(Int64.sqrt((n / 2.0))))) * (n - Int(sqrt(Double(Int64.sqrt((n\
    \ / 2.0)))))) + Int(sqrt(Double(Int64.sqrt((n / 2.0)))));\n               ^~~~\n\
    /tmp/tmpa1ge8ql9.swift:14:64: error: cannot find 'sqrt' in scope\n    return Int(sqrt(Double(Int64.sqrt((n\
    \ / 2.0))))) * (n - Int(sqrt(Double(Int64.sqrt((n / 2.0)))))) + Int(sqrt(Double(Int64.sqrt((n\
    \ / 2.0)))));\n                                                              \
    \ ^~~~\n/tmp/tmpa1ge8ql9.swift:14:108: error: cannot find 'sqrt' in scope\n  \
    \  return Int(sqrt(Double(Int64.sqrt((n / 2.0))))) * (n - Int(sqrt(Double(Int64.sqrt((n\
    \ / 2.0)))))) + Int(sqrt(Double(Int64.sqrt((n / 2.0)))));\n                  \
    \                                                                            \
    \             ^~~~\n/tmp/tmpa1ge8ql9.swift:14:12: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n    return Int(sqrt(Double(Int64.sqrt((n / 2.0)))))\
    \ * (n - Int(sqrt(Double(Int64.sqrt((n / 2.0)))))) + Int(sqrt(Double(Int64.sqrt((n\
    \ / 2.0)))));\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014086
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return fib(n, n)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpptwaic8z.swift:14:12: error: cannot find 'fib' in scope\n    return\
    \ fib(n, n)\n           ^~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  if n == 0 || n == 1 { return\
    \ n }\n  if n == 2 { return 3 }\n  return prime_fib(n - 1) + prime_fib(n - 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpyw7qyb77.swift:16:20: error: missing argument label 'n:' in call\n\
    \  return prime_fib(n - 1) + prime_fib(n - 2)\n                   ^\n        \
    \           n: \n/tmp/tmpyw7qyb77.swift:16:39: error: missing argument label 'n:'\
    \ in call\n  return prime_fib(n - 1) + prime_fib(n - 2)\n                    \
    \                  ^\n                                      n: \n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 2 {\n        return\
    \ n\n    }\n    let a = fib(n - 1)\n    let b = fib(n - 2)\n    if a > b {\n \
    \       return a\n    } else {\n        return b\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8byonjzo.swift:17:13: error: cannot find 'fib' in scope\n    let\
    \ a = fib(n - 1)\n            ^~~\n/tmp/tmp8byonjzo.swift:18:13: error: cannot\
    \ find 'fib' in scope\n    let b = fib(n - 2)\n            ^~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tprecondition(n > 0, \"n must\
    \ be positive\")\n\tprecondition(n >= 2, \"n must be >= 2\")\n\tif n == 2 || n\
    \ == 1 {\n\t\treturn n\n\t}\n\tresult := 1\n\tx := 1\n\ty := 2\n\tfor i < n {\n\
    \t\tresult := result + x\n\t\tx := x + y\n\t\ty := 2 * y\n\t}\n\treturn result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpipje4iib.swift:19:8: error: consecutive statements on a line must\
    \ be separated by ';'\n        result := 1\n              ^\n              ;\n\
    /tmp/tmpipje4iib.swift:19:9: error: expected expression\n        result := 1\n\
    \               ^\n/tmp/tmpipje4iib.swift:22:8: error: expected 'in' after for-each\
    \ pattern\n        for i < n {\n              ^\n/tmp/tmpipje4iib.swift:22:8:\
    \ error: unary operator cannot be separated from its operand\n        for i <\
    \ n {\n              ^~\n               \n/tmp/tmpipje4iib.swift:23:9: error:\
    \ consecutive statements on a line must be separated by ';'\n                result\
    \ := result + x\n                      ^\n                      ;\n/tmp/tmpipje4iib.swift:23:10:\
    \ error: expected expression\n                result := result + x\n         \
    \              ^\n/tmp/tmpipje4iib.swift:19:2: error: cannot find 'result' in\
    \ scope\n        result := 1\n        ^~~~~~\n/tmp/tmpipje4iib.swift:22:8: error:\
    \ '<' is not a prefix unary operator\n        for i < n {\n              ^\n/tmp/tmpipje4iib.swift:27:9:\
    \ error: cannot find 'result' in scope\n        return result\n              \
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 1\n    var prime:\
    \ Bool = true\n    var prime2: Int = 1\n\n    for i in 2..<n {\n        if prime2\
    \ {\n            if i % 2 != 0 {\n                fib = fib + prime2\n       \
    \         prime = false\n            } else {\n                prime2 = prime2\
    \ + prime2\n            }\n        } else {\n            prime2 = fib + fib\n\
    \            fib = prime2\n            prime = true\n        }\n    }\n\n    return\
    \ fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpfl_qz11v.swift:19:12: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n        if prime2 {\n           ^\n           (   \
    \   != 0)\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  if n <= 1 {\n    return n\n \
    \ }\n\n  // O(sqrt(n))\n  if n <= 3 {\n    return n\n  }\n\n  if n > 3 {\n   \
    \ return prime_fib(n - 2) + prime_fib(n - 3)\n  }\n\n  var nextFib = prime_fib(n\
    \ - 1)\n  var nextPrime = nextFib + 1\n\n  // O(sqrt(n))\n  for nextFib != 1 {\n\
    \    var newPrime = nextFib + 1\n    if newPrime % nextPrime != 0 {\n      nextPrime\
    \ = newPrime\n      nextFib = nextFib + 1\n    }\n  }\n  return nextPrime\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpje5arciv.swift:31:15: error: expected 'in' after for-each pattern\n\
    \  for nextFib != 1 {\n              ^\n/tmp/tmpje5arciv.swift:31:15: error: unary\
    \ operator cannot be separated from its operand\n  for nextFib != 1 {\n      \
    \        ^ ~\n                \n/tmp/tmpje5arciv.swift:24:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 2) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmpje5arciv.swift:24:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n/tmp/tmpje5arciv.swift:27:27: error: missing argument label\
    \ 'n:' in call\n  var nextFib = prime_fib(n - 1)\n                          ^\n\
    \                          n: \n/tmp/tmpje5arciv.swift:31:15: error: '!=' is not\
    \ a prefix unary operator\n  for nextFib != 1 {\n              ^\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let numbers = [2, 3]\n    if\
    \ n >= numbers.count {\n        return n - (numbers[n - 2] as! Int)\n    }\n \
    \   numbers[n] = numbers[n - 2] as! Int\n    if n == 1 {\n        return 2\n \
    \   }\n    let fib = numbers[n - 1] as! Int\n    if fib + numbers[n - 2] < n {\n\
    \        return fib + numbers[n - 2]\n    }\n    return prime_fib(n - 1)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp4f7v0wcj.swift:16:36: warning: forced cast of 'Int' to same type\
    \ has no effect\n        return n - (numbers[n - 2] as! Int)\n               \
    \                    ^~~~~~~\n                                   \n/tmp/tmp4f7v0wcj.swift:18:12:\
    \ error: cannot assign through subscript: 'numbers' is a 'let' constant\n    numbers[n]\
    \ = numbers[n - 2] as! Int\n    ~~~~~~~^\n/tmp/tmp4f7v0wcj.swift:14:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let numbers = [2, 3]\n    ^~~\n    var\n\
    /tmp/tmp4f7v0wcj.swift:18:33: warning: forced cast of 'Int' to same type has no\
    \ effect\n    numbers[n] = numbers[n - 2] as! Int\n                          \
    \      ^~~~~~~\n                                \n/tmp/tmp4f7v0wcj.swift:22:30:\
    \ warning: forced cast of 'Int' to same type has no effect\n    let fib = numbers[n\
    \ - 1] as! Int\n                             ^~~~~~~\n                       \
    \      \n/tmp/tmp4f7v0wcj.swift:26:22: error: missing argument label 'n:' in call\n\
    \    return prime_fib(n - 1)\n                     ^\n                     n:\
    \ \n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tif n < 0 {\n\t\treturn 0\n\t\
    }\n\tif n <= 1 {\n\t\treturn 1\n\t}\n\treturn prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpq_931oxb.swift:20:19: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpq_931oxb.swift:20:38: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n      \
    \  return 1\n    }\n    if n % 2 == 1 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n    }\n    if n % 5 == 0 {\n        return prime_fib(n - 5) + prime_fib(n\
    \ - 4)\n    }\n    if n % 7 == 0 {\n        return prime_fib(n - 7) + prime_fib(n\
    \ - 6)\n    }\n    if n % 11 == 0 {\n        return prime_fib(n - 11) + prime_fib(n\
    \ - 10)\n    }\n    if n % 13 == 0 {\n        return prime_fib(n - 13) + prime_fib(n\
    \ - 12)\n    }\n    return prime_fib(n - 15) + prime_fib(n - 14) + prime_fib(n\
    \ - 15)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp5a625_zo.swift:24:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmp5a625_zo.swift:24:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmp5a625_zo.swift:27:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 2) + prime_fib(n - 3)\n   \
    \                      ^\n                         n: \n/tmp/tmp5a625_zo.swift:27:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 2)\
    \ + prime_fib(n - 3)\n                                            ^\n        \
    \                                    n: \n/tmp/tmp5a625_zo.swift:30:26: error:\
    \ missing argument label 'n:' in call\n        return prime_fib(n - 5) + prime_fib(n\
    \ - 4)\n                         ^\n                         n: \n/tmp/tmp5a625_zo.swift:30:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 5)\
    \ + prime_fib(n - 4)\n                                            ^\n        \
    \                                    n: \n/tmp/tmp5a625_zo.swift:33:26: error:\
    \ missing argument label 'n:' in call\n        return prime_fib(n - 7) + prime_fib(n\
    \ - 6)\n                         ^\n                         n: \n/tmp/tmp5a625_zo.swift:33:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 7)\
    \ + prime_fib(n - 6)\n                                            ^\n        \
    \                                    n: \n/tmp/tmp5a625_zo.swift:36:26: error:\
    \ missing argument label 'n:' in call\n        return prime_fib(n - 11) + prime_fib(n\
    \ - 10)\n                         ^\n                         n: \n/tmp/tmp5a625_zo.swift:36:46:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 11)\
    \ + prime_fib(n - 10)\n                                             ^\n      \
    \                                       n: \n/tmp/tmp5a625_zo.swift:39:26: error:\
    \ missing argumen"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return ((Fibonacci(n) *\n \
    \            Int(Double(n)) > Int64(Prime(Double(n)))))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpfwltsjyh.swift:14:14: error: cannot find 'Fibonacci' in scope\n\
    \    return ((Fibonacci(n) *\n             ^~~~~~~~~\n/tmp/tmpfwltsjyh.swift:15:37:\
    \ error: cannot find 'Prime' in scope\n             Int(Double(n)) > Int64(Prime(Double(n)))))\n\
    \                                    ^~~~~\n/tmp/tmpfwltsjyh.swift:15:29: error:\
    \ cannot convert return expression of type 'Bool' to return type 'Int'\n     \
    \        Int(Double(n)) > Int64(Prime(Double(n)))))\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014074
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    switch n {\n    case 1:\n \
    \       return 2\n    case 2:\n        return 3\n    default:\n        var result:\
    \ Int = 1\n        var prev_result: Int = 0\n        for i in 1 ..< n {\n    \
    \        let prev_result = result\n            result = prev_result + prev_result\n\
    \        }\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmps07v4bw0/tmps07v4bw0.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9dbad3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9dbaa32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9dbaa32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9dbaa317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps07v4bw0                        0x000055bf0bad242e <unavailable> + 5166

    5    libc.so.6                          0x00002b9dbaf27460 __libc_start_main +
    245

    6    tmps07v4bw0                        0x000055bf0bad1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\treturn prime_fib2(n + 1)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpfzoo0cc4.swift:14:9: error: cannot find 'prime_fib2' in scope\n\
    \        return prime_fib2(n + 1)\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tassert(n >= 0 && n <= 100, \"\
    n must be between 0 and 100\")\n\treturn prime_fib_rec(n - 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp_czdbqgw.swift:15:9: error: cannot find 'prime_fib_rec' in scope\n\
    \        return prime_fib_rec(n - 2)\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  func fib(count: Int) -> Int {\n\
    \    if (count >= 2) { return count }\n    return fib(count - 1) + fib(count -\
    \ 2)\n  }\n  return fib(n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpbj10r6t3.swift:16:16: error: missing argument label 'count:' in\
    \ call\n    return fib(count - 1) + fib(count - 2)\n               ^\n       \
    \        count: \n/tmp/tmpbj10r6t3.swift:16:33: error: missing argument label\
    \ 'count:' in call\n    return fib(count - 1) + fib(count - 2)\n             \
    \                   ^\n                                count: \n/tmp/tmpbj10r6t3.swift:18:14:\
    \ error: missing argument label 'count:' in call\n  return fib(n - 2)\n      \
    \       ^\n             count: \n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 5\n\
    \    var c = 2\n    var d = 3\n    var e = 2\n    var f = 3\n    var g = 5\n\n\
    \    while true {\n        var m = (a * b) % c\n        if m == 0 {\n        \
    \    if a != c {\n                e = e\n                a = c\n            }\n\
    \            if b != c {\n                f = f\n                b = c\n     \
    \       }\n            if b == c {\n                g = (a + b) % c\n        \
    \        if g == 0 {\n                    return g\n                }\n      \
    \          c = g\n            }\n            continue\n        }\n        var\
    \ j = (d * e) % c\n        var k = (d * f) % c\n        if j == k {\n        \
    \    if j == 0 {\n                if m == 0 {\n                    return m\n\
    \                } else {\n                    g = (m + e) % c\n             \
    \       if g == 0 {\n                        return g\n                    }\n\
    \                    d = g\n                }\n                continue\n    \
    \        }\n            if k != 0 {\n                e = e\n                d\
    \ = k\n            }\n            if j == 0 {\n                if m == 0 {\n \
    \                   return m\n                } else {\n                    g\
    \ = (m + f) % c\n                    if g == 0 {\n                        return\
    \ g\n                    }\n                    d = g\n                }\n   \
    \             continue\n            }\n            if k != 0 {\n             \
    \   f = f\n                d = k\n            }\n            if j == 0 {\n   \
    \             if m == 0 {\n                    return m\n                } else\
    \ {\n                    g = (m + e) % c\n                    if g == 0 {\n  \
    \                      return g\n                    }\n                    d\
    \ = g\n                }\n                continue\n            }\n          \
    \  if k != 0 {\n                e = e\n                d = k\n            }\n\
    \            if j == 0 {\n                if m == 0 {\n                    return\
    \ m\n                } else {\n                    g = (m + f) % c\n         \
    \           if g == 0 {\n                        return g\n                  \
    \  }\n                    d = g\n                }\n                continue\n\
    \            }\n            if k != 0 {\n                f = f\n             \
    \   d = k\n            }\n            if j == 0 {\n                if m == 0 {\n\
    \                    return m\n                } else {\n                    g\
    \ = (m + e) % c\n                    if g == 0 {\n                        return\
    \ g\n                    }\n                    d = g\n                }\n   \
    \             continue\n            }\n            if k != 0 {\n             \
    \   e = e\n                d = k\n            }\n            if j == 0 {\n   \
    \             if m == 0 {\n                    return m\n                } else\
    \ {\n                    g = (m + f) % c\n                    if g == 0 {\n  \
    \                      return g\n                    }\n                    d\
    \ = g\n                }\n                continue\n            }\n          \
    \  if k != 0 {\n                f = f\n                d = k\n            }\n\
    \            if j == 0 {\n                if m == 0 {\n                    return\
    \ m\n                } else {\n                    g = (m + e) % c\n         \
    \           if g == 0 {\n                        return g\n                  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpap9_5oz0.swift:173:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpap9_5oz0.swift:141:23: note: to match this opening '{'\n            if\
    \ j == 0 {\n                      ^\n/tmp/tmpap9_5oz0.swift:173:38: error: expected\
    \ '}' at end of brace statement\nassert(prime_fib(n: 10) == 433494437)\n     \
    \                                ^\n/tmp/tmpap9_5oz0.swift:44:19: note: to match\
    \ this opening '{'\n        if j == k {\n                  ^\n/tmp/tmpap9_5oz0.swift:173:38:\
    \ error: expected '}' at end of brace statement\nassert(prime_fib(n: 10) == 433494437)\n\
    \                                     ^\n/tmp/tmpap9_5oz0.swift:22:16: note: to\
    \ match this opening '{'\n    while true {\n               ^\n/tmp/tmpap9_5oz0.swift:173:38:\
    \ error: expected '}' at end of brace statement\nassert(prime_fib(n: 10) == 433494437)\n\
    \                                     ^\n/tmp/tmpap9_5oz0.swift:13:31: note: to\
    \ match this opening '{'\nfunc prime_fib(n: Int) -> Int {\n                  \
    \            ^\n/tmp/tmpap9_5oz0.swift:26:19: error: assigning a variable to itself\n\
    \                e = e\n                ~ ^ ~\n/tmp/tmpap9_5oz0.swift:30:19: error:\
    \ assigning a variable to itself\n                f = f\n                ~ ^ ~\n\
    /tmp/tmpap9_5oz0.swift:58:19: error: assigning a variable to itself\n        \
    \        e = e\n                ~ ^ ~\n/tmp/tmpap9_5oz0.swift:74:19: error: assigning\
    \ a variable to itself\n                f = f\n                ~ ^ ~\n/tmp/tmpap9_5oz0.swift:90:19:\
    \ error: assigning a variable to itself\n                e = e\n             \
    \   ~ ^ ~\n/tmp/tmpap9_5oz0.swift:106:19: error: assigning a variable to itself\n\
    \                f = f\n                ~ ^ ~\n/tmp/tmpap9_5oz0.swift:122:19:\
    \ error: assigning a variable to itself\n                e = e\n             \
    \   ~ ^ ~\n/tmp/tmpap9_5oz0.swift:138:19: error: assigning a variable to itself\n\
    \                f = f\n                ~ ^ ~\n/tmp/tmpap9_5oz0.swift:152:6: error:\
    \ operator functions can only be declared at global or in type "
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tswitch n {\n\tcase 1:\n\t\treturn\
    \ 2\n\tcase 2:\n\t\treturn 3\n\tcase 3:\n\t\treturn 5\n\tcase 4:\n\t\treturn 13\n\
    \tcase 5:\n\t\treturn 89\n\tdefault:\n\t\tvar a = 1\n\t\tvar b = 2\n\t\ti := 0\n\
    \t\tfor i < n {\n\t\t\ta = b\n\t\t\tb = a + b\n\t\t\ti++\n\t\t}\n\t\treturn a\n\
    \t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpbqr649k5.swift:28:4: error: consecutive statements on a line must\
    \ be separated by ';'\n                i := 0\n                 ^\n          \
    \       ;\n/tmp/tmpbqr649k5.swift:28:5: error: expected expression\n         \
    \       i := 0\n                  ^\n/tmp/tmpbqr649k5.swift:29:9: error: expected\
    \ 'in' after for-each pattern\n                for i < n {\n                 \
    \     ^\n/tmp/tmpbqr649k5.swift:29:9: error: unary operator cannot be separated\
    \ from its operand\n                for i < n {\n                      ^~\n  \
    \                     \n/tmp/tmpbqr649k5.swift:28:3: error: cannot find 'i' in\
    \ scope\n                i := 0\n                ^\n/tmp/tmpbqr649k5.swift:29:9:\
    \ error: '<' is not a prefix unary operator\n                for i < n {\n   \
    \                   ^\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  var fib_sum: Int = 0, i: Int\n\
    \n  for i = 2; i < n; i++ {\n    fib_sum += i\n  }\n\n  if n <= 2 {\n    return\
    \ fib_sum\n  }\n\n  for i = 2; i < n; i++ {\n    if fib_sum%i == 0 {\n      return\
    \ fib_sum\n    }\n  }\n\n  return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0ccq1i11.swift:16:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmp0ccq1i11.swift:24:3:\
    \ error: C-style for statement has been removed in Swift 3\n  for i = 2; i < n;\
    \ i++ {\n  ^   ~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tvar n1: Int = 1\n\tvar n2: Int\
    \ = 2\n\tvar n: Int\n\tvar k: Int\n\tvar prime: Int\n\tvar fib: Int\n\n\tprime\
    \ = n1 + n2\n\tfib = 1\n\n\tfor ; n < prime; n++ {\n\t\tk = n\n\t\twhile (n%k\
    \ == 0) n /= k\n\t\tif n != 1 {\n\t\t\tfib = fib + n\n\t\t}\n\t\tprime = n1 +\
    \ n2\n\t\tif fib > 100 {\n\t\t\tbreak\n\t\t}\n\t}\n\tif n == 1 {\n\t\tprime =\
    \ n\n\t\tfib = 1\n\t}\n\treturn prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmprxju9z8l.swift:24:2: error: C-style for statement has been removed\
    \ in Swift 3\n        for ; n < prime; n++ {\n        ^   ~~~~~~~~~~~~~~~~\n/tmp/tmprxju9z8l.swift:26:20:\
    \ error: expected '{' after 'while' condition\n                while (n%k == 0)\
    \ n /= k\n                                 ^\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let limit = Int(pow(2 * n +\
    \ 1, 0.5))\n    return Int(ceil(limit * sqrt(Double(n))))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp7_1xsmg_.swift:14:21: error: cannot find 'pow' in scope\n    let\
    \ limit = Int(pow(2 * n + 1, 0.5))\n                    ^~~\n/tmp/tmp7_1xsmg_.swift:15:16:\
    \ error: cannot find 'ceil' in scope\n    return Int(ceil(limit * sqrt(Double(n))))\n\
    \               ^~~~\n/tmp/tmp7_1xsmg_.swift:15:29: error: cannot find 'sqrt'\
    \ in scope\n    return Int(ceil(limit * sqrt(Double(n))))\n                  \
    \          ^~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let result = 2\n    var result2\
    \ = 2\n\n    for i in 1..<n {\n        if result != result2 {\n            result2\
    \ = result\n            result = result2 + result2\n        }\n    }\n\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpcd4uv1ap.swift:20:13: error: cannot assign to value: 'result' is\
    \ a 'let' constant\n            result = result2 + result2\n            ^~~~~~\n\
    /tmp/tmpcd4uv1ap.swift:14:5: note: change 'let' to 'var' to make it mutable\n\
    \    let result = 2\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return sieve[n]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpf5btx6qx.swift:14:12: error: cannot find 'sieve' in scope\n   \
    \ return sieve[n]\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 1\n    var b = 1\n\
    \    var nextPrimeFib = 2\n\n    if n > 2 {\n        for i in 0 ... n {\n    \
    \        if nextPrimeFib > n {\n                return nextPrimeFib\n        \
    \    }\n\n            var nextFib: Int\n\n            if i % 2 == 0 {\n      \
    \          nextFib = (b * nextPrimeFib + a) % n\n            } else {\n      \
    \          nextFib = (b * nextPrimeFib + a) % n\n            }\n\n           \
    \ nextPrimeFib = (nextFib + b) % n\n            b = nextFib\n\n            a =\
    \ nextFib\n        }\n    } else {\n        return n\n    }\n\n    return nextPrimeFib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpg8fkocyx/tmpg8fkocyx.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac903d4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac903a44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac903a44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac903a437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8fkocyx                        0x00005575ac873338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac903f39460 __libc_start_main +
    245

    6    tmpg8fkocyx                        0x00005575ac872fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014074
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    }\n    var prime: Int = 1\n    var primes: Array<Int> = []\n    for i\
    \ : Int in 2...(n-2) {\n        if primes.contains(i) {\n            continue\n\
    \        }\n        var candidate: Int = prime + i\n        if primes.contains(candidate)\
    \ {\n            continue\n        }\n        primes.append(candidate)\n     \
    \   if candidate % 2 == 0 {\n            continue\n        }\n        prime +=\
    \ i\n    }\n    return primes[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpv0ix4ukf/tmpv0ix4ukf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e27abec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e277b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e277b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e277b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0ix4ukf                        0x0000562d00731518 <unavailable> + 5400

    5    libc.so.6                          0x00002b7e27caa460 __libc_start_main +
    245

    6    tmpv0ix4ukf                        0x0000562d007311c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a, b, i, primes, count\
    \ = 2\n    primes = [2]\n    primes[0] = 2\n    primes[1] = 2\n    for i = 3;\
    \ i <= n; i++ {\n        if primes[count] == i {\n            count++\n      \
    \      primes.append(i)\n        } else {\n            a = primes[count]\n   \
    \         b = primes[count - 1]\n            while b < i {\n                b\
    \ = primes[b]\n            }\n            primes[count] = i\n            primes[count\
    \ - 1] = a\n        }\n    }\n    return primes[count-1]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmphpo2thhw.swift:18:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 3; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~\n/tmp/tmphpo2thhw.swift:14:9:\
    \ error: type annotation missing in pattern\n    var a, b, i, primes, count =\
    \ 2\n        ^\n/tmp/tmphpo2thhw.swift:14:12: error: type annotation missing in\
    \ pattern\n    var a, b, i, primes, count = 2\n           ^\n/tmp/tmphpo2thhw.swift:14:15:\
    \ error: type annotation missing in pattern\n    var a, b, i, primes, count =\
    \ 2\n              ^\n/tmp/tmphpo2thhw.swift:14:18: error: type annotation missing\
    \ in pattern\n    var a, b, i, primes, count = 2\n                 ^\n"
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  var a = 2\n  var b = 1\n  var\
    \ n2: Int\n  for n2 = n - 1; n2 > 0; n2-- {\n    var c = a + b\n    a = b\n  \
    \  b = c\n  }\n  return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpm_kfwqvz.swift:17:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for n2 = n - 1; n2 > 0; n2-- {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fibs = Array<Int>(repeating:\
    \ 0, count: n + 1)\n    let first = 0\n    let second = 1\n    for i in 0 ..<\
    \ n {\n        fibs[i] = (first + second) % n\n        first = (second + first)\
    \ % n\n        second = fibs[i]\n    }\n    return fibs[n]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpfig19qbm.swift:18:13: error: cannot assign through subscript: 'fibs'\
    \ is a 'let' constant\n        fibs[i] = (first + second) % n\n        ~~~~^\n\
    /tmp/tmpfig19qbm.swift:14:5: note: change 'let' to 'var' to make it mutable\n\
    \    let fibs = Array<Int>(repeating: 0, count: n + 1)\n    ^~~\n    var\n/tmp/tmpfig19qbm.swift:19:9:\
    \ error: cannot assign to value: 'first' is a 'let' constant\n        first =\
    \ (second + first) % n\n        ^~~~~\n/tmp/tmpfig19qbm.swift:15:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let first = 0\n    ^~~\n    var\n/tmp/tmpfig19qbm.swift:20:9:\
    \ error: cannot assign to value: 'second' is a 'let' constant\n        second\
    \ = fibs[i]\n        ^~~~~~\n/tmp/tmpfig19qbm.swift:16:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let second = 1\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return prime_fib_lazy(n)._value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0imd8_fb.swift:14:12: error: cannot find 'prime_fib_lazy' in scope\n\
    \    return prime_fib_lazy(n)._value\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  return check_fib_number(n).prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp6rzlzsrd.swift:14:10: error: cannot find 'check_fib_number' in\
    \ scope\n  return check_fib_number(n).prime\n         ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014074
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n\n    // Fill up the result with Fibonacci numbers, starting\
    \ with 1\n    var fib: [[Int]] = [[1,1]]\n    for _ in 1...n {\n        let a\
    \ = fib[fib.count-1][1..<2].reduce(0) { $0 + $1 }\n        let b = fib[fib.count-2][1..<2].reduce(0)\
    \ { $0 + $1 }\n        fib.append([a+b, a+b])\n    }\n\n    return fib[fib.count-1][1..<2].reduce(0,\
    \ +) // + is Swift operator for Int.+\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpz5i9zm9b/tmpz5i9zm9b.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b491914ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4918e45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4918e45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4918e447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz5i9zm9b                        0x0000556852306648 <unavailable> + 5704

    5    libc.so.6                          0x00002b491933a460 __libc_start_main +
    245

    6    tmpz5i9zm9b                        0x00005568523062f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 0\n\n    var limit\
    \ = (2 ... n)\n    guard limit != 0 else { return 0 }\n\n    for n in limit {\n\
    \        let prevResult = result\n        if n % 2 == 0 { result -= 2 }\n\n  \
    \      if n > 1 { result += prevResult }\n        if result > n * (n / 2) { break\
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpbscb8ua7.swift:17:17: error: binary operator '!=' cannot be applied\
    \ to operands of type 'ClosedRange<Int>' and 'Int'\n    guard limit != 0 else\
    \ { return 0 }\n          ~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 0\n    \n    for\
    \ _ in 0..<n {\n        let a = 2\n        let b = 4\n        \n        let fib_number\
    \ = (a * b)\n        \n        if fib_number > 1 {\n            let r = sqrt(fib_number)\n\
    \            if r <= 1 {\n                result = a\n                break\n\
    \            }\n            \n            if r == fib_number {\n             \
    \   result = a\n                break\n            }\n            \n         \
    \   if r == sqrt(fib_number + 1) {\n                result = b\n             \
    \   break\n            }\n            \n            if r == fib_number + 1 {\n\
    \                result = b\n                break\n            }\n        }\n\
    \        \n        a += 2\n        b += 4\n    }\n    \n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpb1blh_45.swift:23:21: error: cannot find 'sqrt' in scope\n    \
    \        let r = sqrt(fib_number)\n                    ^~~~\n/tmp/tmpb1blh_45.swift:34:21:\
    \ error: cannot find 'sqrt' in scope\n            if r == sqrt(fib_number + 1)\
    \ {\n                    ^~~~\n/tmp/tmpb1blh_45.swift:45:11: error: left side\
    \ of mutating operator isn't mutable: 'a' is a 'let' constant\n        a += 2\n\
    \        ~ ^\n/tmp/tmpb1blh_45.swift:17:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let a = 2\n        ^~~\n        var\n/tmp/tmpb1blh_45.swift:46:11:\
    \ error: left side of mutating operator isn't mutable: 'b' is a 'let' constant\n\
    \        b += 4\n        ~ ^\n/tmp/tmpb1blh_45.swift:18:9: note: change 'let'\
    \ to 'var' to make it mutable\n        let b = 4\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tif n <= 1 {\n\t\treturn 1\n\t\
    } else if n <= 2 {\n\t\treturn 2\n\t} else if n%2 == 0 {\n\t\treturn prime_fib(n\
    \ - 2) + prime_fib(n - 1)\n\t} else {\n\t\treturn prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpduanptlg.swift:19:20: error: missing argument label 'n:' in call\n\
    \                return prime_fib(n - 2) + prime_fib(n - 1)\n                \
    \                 ^\n                                 n: \n/tmp/tmpduanptlg.swift:19:39:\
    \ error: missing argument label 'n:' in call\n                return prime_fib(n\
    \ - 2) + prime_fib(n - 1)\n                                                  \
    \  ^\n                                                    n: \n/tmp/tmpduanptlg.swift:21:20:\
    \ error: missing argument label 'n:' in call\n                return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n                                 ^\n              \
    \                   n: \n/tmp/tmpduanptlg.swift:21:39: error: missing argument\
    \ label 'n:' in call\n                return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                                    ^\n                \
    \                                    n: \n"
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tif n < 2 {\n\t\treturn 1\n\t\
    }\n\tif n == 2 {\n\t\treturn 2\n\t}\n\tif n == 3 {\n\t\treturn 5\n\t}\n\tif n\
    \ == 4 {\n\t\treturn 13\n\t}\n\tif n == 5 {\n\t\treturn 89\n\t}\n\t\n\tlet mut\
    \ i = 2\n\tlet mut f = fibonacci(n)\n\twhile i < n {\n\t\tif f % i == 0 {\n\t\t\
    \treturn f\n\t\t}\n\t\ti = i + 2\n\t\tf = fibonacci(i) + fibonacci(i+1)\n\t}\n\
    \treturn f\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpwcqbgb9p.swift:30:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i =\
    \ 2\n                ^\n/tmp/tmpwcqbgb9p.swift:30:10: note: join the identifiers\
    \ together\n        let mut i = 2\n            ~~~~^\n            muti\n/tmp/tmpwcqbgb9p.swift:30:10:\
    \ note: join the identifiers together with camel-case\n        let mut i = 2\n\
    \            ~~~~^\n            mutI\n/tmp/tmpwcqbgb9p.swift:31:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut f = fibonacci(n)\n                ^\n/tmp/tmpwcqbgb9p.swift:31:10:\
    \ note: join the identifiers together\n        let mut f = fibonacci(n)\n    \
    \        ~~~~^\n            mutf\n/tmp/tmpwcqbgb9p.swift:31:10: note: join the\
    \ identifiers together with camel-case\n        let mut f = fibonacci(n)\n   \
    \         ~~~~^\n            mutF\n/tmp/tmpwcqbgb9p.swift:31:14: error: cannot\
    \ find 'fibonacci' in scope\n        let mut f = fibonacci(n)\n              \
    \      ^~~~~~~~~\n/tmp/tmpwcqbgb9p.swift:32:8: error: cannot find 'i' in scope\n\
    \        while i < n {\n              ^\n/tmp/tmpwcqbgb9p.swift:33:6: error: cannot\
    \ find 'f' in scope\n                if f % i == 0 {\n                   ^\n/tmp/tmpwcqbgb9p.swift:33:10:\
    \ error: cannot find 'i' in scope\n                if f % i == 0 {\n         \
    \              ^\n/tmp/tmpwcqbgb9p.swift:34:11: error: cannot find 'f' in scope\n\
    \                        return f\n                               ^\n/tmp/tmpwcqbgb9p.swift:36:3:\
    \ error: cannot find 'i' in scope\n                i = i + 2\n               \
    \ ^\n/tmp/tmpwcqbgb9p.swift:36:7: error: cannot find 'i' in scope\n          \
    \      i = i + 2\n                    ^\n/tmp/tmpwcqbgb9p.swift:37:3: error: cannot\
    \ find 'f' in scope\n                f = fibonacci(i) + fibonacci(i+1)\n     \
    \           ^\n/tmp/tmpwcqbgb9p.swift:37:7: error: cannot find 'fibonacci' in\
    \ scope\n                f = fibonacci(i) + fibonacci(i+1)\n                 \
    \   ^~~~~~~~~\n/tmp/tmpwcqbgb9p.swift:37:17: error: cannot find 'i' in scope\n\
    \    "
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n < 7 {\n        return prime_fib(n * 3) + prime_fib(n * 5\
    \ + 1)\n    }\n    if n < 11 {\n        return prime_fib(n * 3) + prime_fib(n\
    \ * 5 + 2)\n    }\n    if n < 18 {\n        return prime_fib(n * 3) + prime_fib(n\
    \ * 5 + 3)\n    }\n    if n < 28 {\n        return prime_fib(n * 3) + prime_fib(n\
    \ * 5 + 4)\n    }\n    if n < 38 {\n        return prime_fib(n * 3) + prime_fib(n\
    \ * 5 + 5)\n    }\n    if n < 56 {\n        return prime_fib(n * 3) + prime_fib(n\
    \ * 5 + 6)\n    }\n    return prime_fib(n * 5 + 7)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmprwshwk4e.swift:18:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n * 3) + prime_fib(n * 5 + 1)\n                    \
    \     ^\n                         n: \n/tmp/tmprwshwk4e.swift:18:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n * 3) + prime_fib(n *\
    \ 5 + 1)\n                                            ^\n                    \
    \                        n: \n/tmp/tmprwshwk4e.swift:21:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n * 3) + prime_fib(n * 5 + 2)\n\
    \                         ^\n                         n: \n/tmp/tmprwshwk4e.swift:21:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n * 3)\
    \ + prime_fib(n * 5 + 2)\n                                            ^\n    \
    \                                        n: \n/tmp/tmprwshwk4e.swift:24:26: error:\
    \ missing argument label 'n:' in call\n        return prime_fib(n * 3) + prime_fib(n\
    \ * 5 + 3)\n                         ^\n                         n: \n/tmp/tmprwshwk4e.swift:24:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n * 3)\
    \ + prime_fib(n * 5 + 3)\n                                            ^\n    \
    \                                        n: \n/tmp/tmprwshwk4e.swift:27:26: error:\
    \ missing argument label 'n:' in call\n        return prime_fib(n * 3) + prime_fib(n\
    \ * 5 + 4)\n                         ^\n                         n: \n/tmp/tmprwshwk4e.swift:27:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n * 3)\
    \ + prime_fib(n * 5 + 4)\n                                            ^\n    \
    \                                        n: \n/tmp/tmprwshwk4e.swift:30:26: error:\
    \ missing argument label 'n:' in call\n        return prime_fib(n * 3) + prime_fib(n\
    \ * 5 + 5)\n                         ^\n                         n: \n/tmp/tmprwshwk4e.swift:30:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n * 3)\
    \ + prime_fib(n * 5 + 5)\n                                            ^\n    \
    \                                        n: \n/tmp/tmprwshwk4e.s"
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Bool = false\n    for _ in 0..<n {\n        fib = fib_seq(fib + 1)\n       \
    \ prime = is_prime(fib)\n    }\n    return fib + (prime ? 1 : 0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpf0f3zujb.swift:17:15: error: cannot find 'fib_seq' in scope\n \
    \       fib = fib_seq(fib + 1)\n              ^~~~~~~\n/tmp/tmpf0f3zujb.swift:18:17:\
    \ error: cannot find 'is_prime' in scope\n        prime = is_prime(fib)\n    \
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\tguard n > 1 else {\n\t\tpreconditionFailure(\"\
    n must be positive\")\n\t}\n\n\tvar a = 0\n\tvar b = 1\n\tlet sum = a + b\n\t\
    var c = sum + b\n\tvar d = sum + c\n\tvar result = 0\n\n\twhile c != 0 {\n\t\t\
    guard c == sum else {\n\t\t\tbreak\n\t\t}\n\t\tc = d\n\t\td = a + b\n\t\ta = b\n\
    \t\tb = d\n\t\tsum = c\n\t\tresult += b\n\t}\n\n\treturn result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpjbwedbr5.swift:33:3: error: cannot assign to value: 'sum' is a\
    \ 'let' constant\n                sum = c\n                ^~~\n/tmp/tmpjbwedbr5.swift:20:2:\
    \ note: change 'let' to 'var' to make it mutable\n        let sum = a + b\n  \
    \      ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    guard n >= 1 && n <= math.pow(10,\
    \ 9) else {\n        return -1\n    }\n\n    let primes = (0..<n).reduce(into:\
    \ [Int](), {$0 + $1})\n    let fibs = (0..<n).reduce(into: [Int](), {$0 + $1 })\n\
    \n    for primeIndex in primes.indices {\n        fibs[primeIndex] += primes[primeIndex\
    \ + 1]\n    }\n\n    return fibs[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpy62bubzq.swift:14:26: error: cannot find 'math' in scope\n    guard\
    \ n >= 1 && n <= math.pow(10, 9) else {\n                         ^~~~\n/tmp/tmpy62bubzq.swift:18:52:\
    \ error: binary operator '+' cannot be applied to operands of type '[Int]' and\
    \ 'Int'\n    let primes = (0..<n).reduce(into: [Int](), {$0 + $1})\n         \
    \                                       ~~ ^ ~~\n/tmp/tmpy62bubzq.swift:18:52:\
    \ note: overloads for '+' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    let primes = (0..<n).reduce(into: [Int](), {$0 + $1})\n    \
    \                                               ^\n/tmp/tmpy62bubzq.swift:19:50:\
    \ error: binary operator '+' cannot be applied to operands of type '[Int]' and\
    \ 'Int'\n    let fibs = (0..<n).reduce(into: [Int](), {$0 + $1 })\n          \
    \                                    ~~ ^ ~~\n/tmp/tmpy62bubzq.swift:19:50: note:\
    \ overloads for '+' exist with these partially matching parameter lists: (Int,\
    \ Int)\n    let fibs = (0..<n).reduce(into: [Int](), {$0 + $1 })\n           \
    \                                      ^\n"
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\treturn (1 + sqrt(5)) / 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp6awwfg3e.swift:14:14: error: cannot find 'sqrt' in scope\n    \
    \    return (1 + sqrt(5)) / 2\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660014074
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib_numbers = [1]\n   \
    \ \n    for index in 1...n {\n        fib_numbers.append(fib_numbers[-2] + fib_numbers[-3])\
    \ // Add 2 to the last two Fibonacci numbers\n    }\n    \n    return fib_numbers[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afd3527ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd34f75561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afd34f75286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afd34f7513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afd34f74bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afd34d74e83 <unavailable> + 188035

    6    tmpj3maa1xl                        0x000055a3c93a2b04 <unavailable> + 6916

    7    tmpj3maa1xl                        0x000055a3c93a248b <unavailable> + 5259

    8    libc.so.6                          0x00002afd3546a460 __libc_start_main +
    245

    9    tmpj3maa1xl                        0x000055a3c93a21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014074
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\treturn ((n+2)/2) + 1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmp1r6bd28g/tmp1r6bd28g.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9af11b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9af0eaeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9af0eae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9af0ead7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1r6bd28g                        0x000055f1bf45133e <unavailable> + 4926

    5    libc.so.6                          0x00002b9af13a3460 __libc_start_main +
    245

    6    tmp1r6bd28g                        0x000055f1bf450ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  let result = ((2..<n).reduce(0,\
    \ { $0 + $1 }))\n  guard result % 2 == 1 else { return result }\n  guard n > 2\
    \ else { return n }\n  return prime_fib(n - 1) + prime_fib(n - 2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp1svlncfv.swift:17:20: error: missing argument label 'n:' in call\n\
    \  return prime_fib(n - 1) + prime_fib(n - 2)\n                   ^\n        \
    \           n: \n/tmp/tmp1svlncfv.swift:17:39: error: missing argument label 'n:'\
    \ in call\n  return prime_fib(n - 1) + prime_fib(n - 2)\n                    \
    \                  ^\n                                      n: \n"
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let a = 2\n    let b = 5\n\
    \    return fdiv(fibonacci(a), fmul(b, fibonacci(a)))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp4tfu728b.swift:16:12: error: cannot find 'fdiv' in scope\n    return\
    \ fdiv(fibonacci(a), fmul(b, fibonacci(a)))\n           ^~~~\n/tmp/tmp4tfu728b.swift:16:17:\
    \ error: cannot find 'fibonacci' in scope\n    return fdiv(fibonacci(a), fmul(b,\
    \ fibonacci(a)))\n                ^~~~~~~~~\n/tmp/tmp4tfu728b.swift:16:31: error:\
    \ cannot find 'fmul' in scope\n    return fdiv(fibonacci(a), fmul(b, fibonacci(a)))\n\
    \                              ^~~~\n/tmp/tmp4tfu728b.swift:16:39: error: cannot\
    \ find 'fibonacci' in scope\n    return fdiv(fibonacci(a), fmul(b, fibonacci(a)))\n\
    \                                      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n\treturn prime_fib_impl(&n, n)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpi3py1bq8.swift:14:9: error: cannot find 'prime_fib_impl' in scope\n\
    \        return prime_fib_impl(&n, n)\n               ^~~~~~~~~~~~~~\n/tmp/tmpi3py1bq8.swift:14:24:\
    \ error: cannot pass immutable value as inout argument: 'n' is a 'let' constant\n\
    \        return prime_fib_impl(&n, n)\n                              ^~\n"
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    return __prime_fib__(n, &__prime_fib_cache_)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpkl0zwoid.swift:14:12: error: cannot find '__prime_fib__' in scope\n\
    \    return __prime_fib__(n, &__prime_fib_cache_)\n           ^~~~~~~~~~~~~\n\
    /tmp/tmpkl0zwoid.swift:14:30: error: cannot find '__prime_fib_cache_' in scope\n\
    \    return __prime_fib__(n, &__prime_fib_cache_)\n                          \
    \   ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n  var a = 2\n  var b = 1\n  var\
    \ prime = 1\n  for var i = 2; i < n && !prime; i++ {\n    prime = (a + b) % i\
    \ == 0\n    a = b\n    b = i\n  }\n  return prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpwpi5vzod.swift:17:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n && !prime; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014074
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a: Int = 0\n    var b:\
    \ Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    \n\
    \    if (n <= 2) {\n        return n\n    }\n    \n    for _ in 0...n {\n    \
    \    a = 1\n        b = 0\n        c = 0\n        d = 0\n        e = 0\n     \
    \   \n        for _ in 0...n {\n            c = a + b\n            d = b\n   \
    \         e = a\n            a = c\n            b = d\n        }\n        \n \
    \       if a != 1 {\n            return e\n        }\n    }\n    \n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpij_549c8/tmpij_549c8.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29ddf6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29ddc61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29ddc61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29ddc607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpij_549c8                        0x0000560e7fd76338 <unavailable> + 4920

    5    libc.so.6                          0x00002b29de156460 __libc_start_main +
    245

    6    tmpij_549c8                        0x0000560e7fd75fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014074
