language: swift
name: HumanEval_114_minSubArraySum
results:
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = Int()\n    var leftIndex = 0\n    var rightIndex\
    \ = nums.count\n    guard rightIndex > 0 else { return 0 }\n\n    while leftIndex\
    \ < rightIndex {\n        sum = nums[leftIndex] + nums[rightIndex] + sum\n   \
    \     guard sum > 0 else { return 0 }\n        leftIndex += 1\n        rightIndex\
    \ -= 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a27ca4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a2799b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9a2799b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9a2799b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9a2799abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9a2779ae83 <unavailable> + 188035

    6    tmp7zqvth9k                        0x000055a63b552e11 <unavailable> + 7697

    7    tmp7zqvth9k                        0x000055a63b55234c <unavailable> + 4940

    8    libc.so.6                          0x00002b9a27e90460 __libc_start_main +
    245

    9    tmp7zqvth9k                        0x000055a63b552019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  if nums.isEmpty {\n    return 0\n  }\n\n  let min = nums[0]\n\
    \  var sum = nums[0]\n  for num in nums {\n    if num > min {\n      sum += min\n\
    \    }\n    sum += num\n    min = max(min, num)\n  }\n  return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp_fe7rtnw.swift:21:5: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n    min = max(min, num)\n    ^~~\n/tmp/tmp_fe7rtnw.swift:14:3:\
    \ note: change 'let' to 'var' to make it mutable\n  let min = nums[0]\n  ^~~\n\
    \  var\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    return minSubArraySum(nums, 0, nums.count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp380rv1h0.swift:10:26: error: extra arguments at positions #2, #3\
    \ in call\n    return minSubArraySum(nums, 0, nums.count)\n                  \
    \       ^\n/tmp/tmp380rv1h0.swift:9:6: note: 'minSubArraySum(nums:)' declared\
    \ here\nfunc minSubArraySum(nums: [Int]) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.min\n    for num in nums {\n        let\
    \ sum = num + nums[nums.index {$0 >= num}]\n        if sum < minSum {\n      \
    \      minSum = sum\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmppyrcrz6n.swift:12:35: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n        let sum = num + nums[nums.index {$0 >= num}]\n        \
    \                          ^\n/tmp/tmppyrcrz6n.swift:12:35: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        let\
    \ sum = num + nums[nums.index {$0 >= num}]\n                                 \
    \ ^\n                                                    ?? <#default value#>\n\
    /tmp/tmppyrcrz6n.swift:12:35: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        let sum = num + nums[nums.index\
    \ {$0 >= num}]\n                                  ^\n                        \
    \                           !\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min: Int? = nil\n    for number in nums {\n       \
    \ guard let currentMin = min?.min() else { min = Int(number); continue }\n   \
    \     min = min(currentMin, Int(number))\n    }\n    return min!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpta2n36i5.swift:12:35: error: static member 'min' cannot be used\
    \ on instance of type 'Int'\n        guard let currentMin = min?.min() else {\
    \ min = Int(number); continue }\n                               ~~~^\n       \
    \                        Int\n/tmp/tmpta2n36i5.swift:12:37: error: cannot call\
    \ value of non-function type 'Int'\n        guard let currentMin = min?.min()\
    \ else { min = Int(number); continue }\n                                    ^\
    \  ~~\n                                       \n/tmp/tmpta2n36i5.swift:13:15:\
    \ error: cannot call value of non-function type 'Int?'\n        min = min(currentMin,\
    \ Int(number))\n              ^\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for i in 0..<nums.count {\n        for\
    \ j in 0..<i {\n            sum += nums[j] + nums[j+i]\n        }\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0395ef0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0395be7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0395be7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0395be713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0395be6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b03959e6e83 <unavailable> + 188035

    6    tmpp54vgxh7                        0x000055d4634861bd <unavailable> + 8637

    7    tmpp54vgxh7                        0x000055d4634854dc <unavailable> + 5340

    8    libc.so.6                          0x00002b03960dc460 __libc_start_main +
    245

    9    tmpp54vgxh7                        0x000055d4634851a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // This approach iterates through the input array once\n\
    \    var sum: Int = 0\n    for number in nums {\n        sum += number\n    }\n\
    \    \n    // This approach iterates through the input array twice\n    var minSum:\
    \ Int = sum\n    for number in nums {\n        minSum -= number\n    }\n    \n\
    \    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp62gdhla_/tmp62gdhla_.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6747c74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b674796bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b674796b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b674796a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp62gdhla_                        0x000055879012248a <unavailable> + 5258

    5    libc.so.6                          0x00002b6747e60460 __libc_start_main +
    245

    6    tmp62gdhla_                        0x00005587901220d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var result: Int = 0\n    for num in nums {\n        result\
    \ += num\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmplxzdt1_t/tmplxzdt1_t.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeba1b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeba182fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeba182f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeba182e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplxzdt1_t                        0x000055be2aa9448a <unavailable> + 5258

    5    libc.so.6                          0x00002aeba1d24460 __libc_start_main +
    245

    6    tmplxzdt1_t                        0x000055be2aa940d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for index in 1..<nums.count {\n\
    \        if nums[index] < nums[index-1] {\n            min = nums[index] - nums[index-1]\n\
    \        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpd6hxc_0z/tmpd6hxc_0z.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadce38ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadce085b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadce085988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadce0847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6hxc_0z                        0x0000560cd68fd55a <unavailable> + 5466

    5    libc.so.6                          0x00002aadce57a460 __libc_start_main +
    245

    6    tmpd6hxc_0z                        0x0000560cd68fd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for n in nums {\n        if n <\
    \ min {\n            min = n\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpz5nozp7f/tmpz5nozp7f.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e73d2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e73a26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e73a26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e73a257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz5nozp7f                        0x000055df978c259f <unavailable> + 5535

    5    libc.so.6                          0x00002b7e73f1b460 __libc_start_main +
    245

    6    tmpz5nozp7f                        0x000055df978c2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var result = 0\n    for num in nums {\n        result =\
    \ result + num\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvhxsjuei/tmpvhxsjuei.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5819dbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5819ab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5819ab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5819ab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvhxsjuei                        0x000055630a5fa48a <unavailable> + 5258

    5    libc.so.6                          0x00002b5819fa8460 __libc_start_main +
    245

    6    tmpvhxsjuei                        0x000055630a5fa0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // TODO: check overflow\n    if nums.isEmpty { return 0\
    \ }\n    var minSoFar = nums[0]\n    for n in nums.dropFirst() {\n        guard\
    \ n > minSoFar else {\n            // The current number is the min so far.\n\
    \            // So just add the current number\n            // to minSoFar and\
    \ move on to the next number\n            minSoFar += n\n            continue\n\
    \        }\n        // current number is not the min so far.\n        // So check\
    \ if its a sub array or not\n        if n == minSubArraySum(nums.suffix(from:\
    \ 0)) { return n }\n    }\n    return minSoFar\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpd434uhoo.swift:23:32: error: missing argument label 'nums:' in\
    \ call\n        if n == minSubArraySum(nums.suffix(from: 0)) { return n }\n  \
    \                             ^\n                               nums: \n/tmp/tmpd434uhoo.swift:23:37:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n        if n == minSubArraySum(nums.suffix(from: 0)) { return n }\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // write your code in JavaScript (Node.js 8.9.4)\n    if\
    \ nums == nil || nums.isEmpty() {\n        return -1\n    }\n    var min = Int.min\n\
    \    var result = Int.max\n    for index in 0..<nums.count {\n        let subArray\
    \ = Array(nums[index..<index+1])\n        let min = subArray.min { (a,b) -> Bool\
    \ in\n            return a + b < min\n        }\n        let max = subArray.max\
    \ { (a,b) -> Bool in\n            return a + b > max\n        }\n        if min\
    \ > result {\n            result = min\n        }\n        if max < result {\n\
    \            result = max\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpmcqdhe_o.swift:11:28: error: cannot call value of non-function\
    \ type 'Bool'\n    if nums == nil || nums.isEmpty() {\n                      \
    \     ^      ~~\n                                  \n/tmp/tmpmcqdhe_o.swift:22:28:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \            return a + b > max\n                           ^\n/tmp/tmpmcqdhe_o.swift:22:28:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            return a + b > max\n                           ^\n      \
    \                         ?? <#default value#>\n/tmp/tmpmcqdhe_o.swift:22:28:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            return a + b > max\n                           ^\n      \
    \                        !\n/tmp/tmpmcqdhe_o.swift:24:12: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n        if min > result\
    \ {\n           ^\n/tmp/tmpmcqdhe_o.swift:24:12: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n        if min > result\
    \ {\n           ^\n               ?? <#default value#>\n/tmp/tmpmcqdhe_o.swift:24:12:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if min > result {\n           ^\n              !\n/tmp/tmpmcqdhe_o.swift:25:22:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \            result = min\n                     ^\n/tmp/tmpmcqdhe_o.swift:25:22:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result = min\n                     ^\n                  \
    \       ?? <#default value#>\n/tmp/tmpmcqdhe_o.swift:25:22: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    result = min\n                     ^\n                        !\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n\n    var result\
    \ = nums[0]\n    for num in nums.dropFirst() {\n        result = max(result, num\
    \ + result)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpunu7ig7k/tmpunu7ig7k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0b273cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0b2433b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0b2433988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0b24327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunu7ig7k                        0x0000556bcde256ba <unavailable> + 5818

    5    libc.so.6                          0x00002ab0b2928460 __libc_start_main +
    245

    6    tmpunu7ig7k                        0x0000556bcde25309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else {\n        return 0\n    }\n\
    \    var min = nums[0]\n    for num in nums.dropFirst() {\n        min = min(min\
    \ + num, num)\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpywt64f54.swift:15:15: error: cannot call value of non-function\
    \ type 'Int'\n        min = min(min + num, num)\n              ^\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  guard let maxSum = maxSum(nums: nums) else {\n    return\
    \ 0\n  }\n\n  for num in nums {\n    let newSum = maxSum - num\n    if newSum\
    \ < 0 {\n      return 0\n    }\n    if newSum < minSum {\n      minSum = newSum\n\
    \    }\n  }\n\n  return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpnjdu8nl5.swift:10:22: error: cannot find 'maxSum' in scope\n  guard\
    \ let maxSum = maxSum(nums: nums) else {\n                     ^~~~~~\n/tmp/tmpnjdu8nl5.swift:19:17:\
    \ error: cannot find 'minSum' in scope\n    if newSum < minSum {\n           \
    \     ^~~~~~\n/tmp/tmpnjdu8nl5.swift:20:7: error: cannot find 'minSum' in scope\n\
    \      minSum = newSum\n      ^~~~~~\n/tmp/tmpnjdu8nl5.swift:24:10: error: cannot\
    \ find 'minSum' in scope\n  return minSum\n         ^~~~~~\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    return subArraySum(nums, nums.count).min()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp838z82ul.swift:10:12: error: cannot find 'subArraySum' in scope\n\
    \    return subArraySum(nums, nums.count).min()\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty {\n        return 0\n    }\n    var min\
    \ = nums[0]\n    for x in nums[1..] {\n        if x >= min {\n            min\
    \ = x\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7allsoub.swift:14:20: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for x in nums[1..] {\n                   ^~\n     \
    \              ...\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let numsArray = nums.sorted()\n    let sum = numsArray.reduce(0.0,\
    \ +)\n    let min = numsArray[0]\n    for i in 0..<numsArray.count {\n       \
    \ if numsArray[i] - min > 0 {\n            sum += min\n        }\n        min\
    \ = min(numsArray[i + 1], min)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp5dx1yzbu.swift:11:37: error: cannot convert value of type '(Double)\
    \ -> Double' to expected argument type '(Double, Int) throws -> Double'\n    let\
    \ sum = numsArray.reduce(0.0, +)\n                                    ^\n/tmp/tmp5dx1yzbu.swift:17:9:\
    \ error: cannot assign to value: 'min' is a 'let' constant\n        min = min(numsArray[i\
    \ + 1], min)\n        ^~~\n/tmp/tmp5dx1yzbu.swift:12:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let min = numsArray[0]\n    ^~~\n    var\n/tmp/tmp5dx1yzbu.swift:17:15:\
    \ error: cannot call value of non-function type 'Int'\n        min = min(numsArray[i\
    \ + 1], min)\n              ^\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    return minSubArraySum(nums, nums.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpryrqxe74.swift:10:38: error: extra argument in call\n    return\
    \ minSubArraySum(nums, nums.count)\n                         ~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  if nums.isEmpty() {\n    return 0\n  }\n\n  var low = nums[0]\n\
    \  var high = nums[0]\n  for x in nums {\n    low = min(low, x)\n    high = max(high,\
    \ x)\n  }\n\n  var sum = 0\n  for x in\n    stride(from: low, to: high, by: 1)\
    \ {\n    sum += x\n  }\n\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpbby0n2so.swift:10:11: error: cannot call value of non-function\
    \ type 'Bool'\n  if nums.isEmpty() {\n          ^      ~~\n                 \n"
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    return minSubArraySum(nums, nums.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpryrqxe74.swift:10:38: error: extra argument in call\n    return\
    \ minSubArraySum(nums, nums.count)\n                         ~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // Sort the array of numbers so that the smallest number\
    \ is the first.\n    let sortedNums = nums.sorted()\n    // The subarrays of the\
    \ array will have the following indexes:\n    // [start index, end index) of the\
    \ smallest sub-array (the largest is at the\n    // last index).\n    var subarrays\
    \ = [Int]()\n    var min = sortedNums[0]\n    for index in 1..<nums.count {\n\
    \        // Check if the sum of the current number and the previous number is\
    \ greater\n        // than the smallest subarray. If so, update the subarray and\
    \ update the min\n        // number.\n        let currentSum = sortedNums[index]\
    \ + sortedNums[index - 1]\n        if currentSum > min {\n            subarrays.append(min)\n\
    \            min = currentSum\n        } else {\n            // If the current\
    \ number and the previous number are equal, add it to\n            // the subarray.\n\
    \            subarrays.append(currentSum)\n        }\n    }\n    // Return the\
    \ sum of the smallest subarray.\n    return subarrays.reduce(0, +)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp0jrnp_pd/tmp0jrnp_pd.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abaa282dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abaa2524b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abaa2524988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abaa25237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0jrnp_pd                        0x0000556e0473971a <unavailable> + 5914

    5    libc.so.6                          0x00002abaa2a19460 __libc_start_main +
    245

    6    tmp0jrnp_pd                        0x0000556e04739369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    return binarySearch(nums, 0, nums.count-1, 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpv30k2cuo.swift:10:12: error: cannot find 'binarySearch' in scope\n\
    \    return binarySearch(nums, 0, nums.count-1, 0)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.isEmpty == false else {\n        return 0\n\
    \    }\n    var minSum = nums[0]\n    for val in nums {\n        for i = 1...val\
    \ {\n            minSum -= i\n        }\n        if minSum < 0 {\n           \
    \ minSum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp_2yr6o3n.swift:15:15: error: expected 'in' after for-each pattern\n\
    \        for i = 1...val {\n              ^\n/tmp/tmp_2yr6o3n.swift:15:15: error:\
    \ expected Sequence expression for for-each loop\n        for i = 1...val {\n\
    \              ^\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  var result: Int = 0\n  for i in 0 ..< nums.count {\n    let\
    \ start = max(i, 0)\n    let end = min(i + 1, nums.count)\n    for j in start\
    \ ..< end {\n      result += nums[j] - nums[i - j]\n    }\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp178t3rji/tmp178t3rji.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacf2cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacf29f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacf29f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacf29ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp178t3rji                        0x000055d04043963a <unavailable> + 5690

    5    libc.so.6                          0x00002aacf2ee5460 __libc_start_main +
    245

    6    tmp178t3rji                        0x000055d040439289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let n = nums.count\n    let m = Int(pow(Double(n), Double(2)))\n\
    \    let dp = [Int](n) { Int(pow(2, Double($0)) / m) }\n\n    for _ in 0..<n {\n\
    \        for _ in 0..<m {\n            if nums.filter({$0 > 0}).count > 0 {\n\
    \                if dp[n - 1] + nums.filter({$0 > 0}).min() <= dp[n] {\n     \
    \               dp[n - 1] = nums.filter({$0 > 0}).min()\n                }\n \
    \           }\n        }\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpervhmxfo.swift:11:17: error: cannot find 'pow' in scope\n    let\
    \ m = Int(pow(Double(n), Double(2)))\n                ^~~\n/tmp/tmpervhmxfo.swift:12:29:\
    \ error: cannot find 'pow' in scope\n    let dp = [Int](n) { Int(pow(2, Double($0))\
    \ / m) }\n                            ^~~\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty {\n        return 0\n    }\n    var minSum\
    \ = nums[0]\n    for num in nums {\n        if num < minSum {\n            minSum\
    \ = num\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpf3bibzwz/tmpf3bibzwz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92915f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92912eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92912ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92912e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf3bibzwz                        0x000055cf281885ef <unavailable> + 5615

    5    libc.so.6                          0x00002b92917df460 __libc_start_main +
    245

    6    tmpf3bibzwz                        0x000055cf28188179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // base case\n    if nums.isEmpty {\n        return 0\n\
    \    }\n    // get the lowest element\n    var lowest = nums[0]\n    // get all\
    \ the elements starting from lowest and end at 0\n    for i in 1..<nums.count\
    \ {\n        if nums[i] < lowest {\n            lowest = nums[i]\n        }\n\
    \    }\n    // the lowest sum sub-array\n    var minSum = Int64(0)\n    // get\
    \ the index where lowest is located\n    var index = -1\n    // iterate over the\
    \ array from lowest to 0\n    for i in lowest..<0 {\n        minSum = minSum +\
    \ nums[i]\n        index = i\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpy6dv16rs.swift:28:31: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Int64'\n        minSum = minSum + nums[i]\n     \
    \                         ^\n                          Int64( )\n/tmp/tmpy6dv16rs.swift:31:12:\
    \ error: cannot convert return expression of type 'Int64' to return type 'Int'\n\
    \    return minSum\n           ^~~~~~\n           Int(  )\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    for num in nums.reversed() {\n        sum -= num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp3qx_n6e4/tmp3qx_n6e4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c9495ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c94655b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c94655988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c946547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qx_n6e4                        0x000055c70cc5e68a <unavailable> + 5770

    5    libc.so.6                          0x00002b5c94b4a460 __libc_start_main +
    245

    6    tmp3qx_n6e4                        0x000055c70cc5e2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let maxSum = nums.max()\n    var minSum = -Int(maxSum)\n\
    \    for num in nums.reversed() {\n        let diff = num - maxSum\n        if\
    \ diff > 0 {\n            if minSum > diff {\n                minSum = diff\n\
    \            }\n        } else {\n            if minSum < 0 {\n              \
    \  minSum = -minSum\n            }\n        }\n        maxSum -= num\n    }\n\
    \    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp4pughb4n.swift:11:23: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    var minSum = -Int(maxSum)\n     \
    \                 ^\n/tmp/tmp4pughb4n.swift:11:23: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n    var minSum = -Int(maxSum)\n\
    \                      ^\n                             ?? <#default value#>\n\
    /tmp/tmp4pughb4n.swift:11:23: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    var minSum = -Int(maxSum)\n      \
    \                ^\n                            !\n/tmp/tmp4pughb4n.swift:13:26:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        let diff = num - maxSum\n                         ^\n/tmp/tmp4pughb4n.swift:13:26:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let diff = num - maxSum\n                         ^\n       \
    \                  (      ?? <#default value#>)\n/tmp/tmp4pughb4n.swift:13:26:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        let diff = num - maxSum\n                         ^\n       \
    \                        !\n/tmp/tmp4pughb4n.swift:23:9: error: cannot convert\
    \ value of type 'Int?' to expected argument type 'Int'\n        maxSum -= num\n\
    \        ^\n              !\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    return minSubArraySumHelper(nums, nums.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpchnueq0a.swift:10:12: error: cannot find 'minSubArraySumHelper'\
    \ in scope\n    return minSubArraySumHelper(nums, nums.count)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minimum\
    \ = nums[0]\n    var maximum = nums[0]\n    for i in 1..<nums.count {\n      \
    \  var smallerSum = nums[i]\n        for j in 0..<i - 1 {\n            smallerSum\
    \ -= nums[j]\n        }\n        minimum = min(minimum, smallerSum)\n        maximum\
    \ = max(maximum, smallerSum)\n    }\n    return maximum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpj_4n92i7/tmpj_4n92i7.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2d8021c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2d7d18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2d7d18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2d7d177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj_4n92i7                        0x000056406c3e263a <unavailable> + 5690

    5    libc.so.6                          0x00002ac2d820d460 __libc_start_main +
    245

    6    tmpj_4n92i7                        0x000056406c3e2289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty { return 0 }\n    var minSum = nums[0]\n\
    \    for num in nums.dropFirst() {\n        minSum = minSum + num\n    }\n   \
    \ return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp1k2ifmi2/tmp1k2ifmi2.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1440501c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14401f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14401f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14401f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1k2ifmi2                        0x0000561ba835262a <unavailable> + 5674

    5    libc.so.6                          0x00002b14406ed460 __libc_start_main +
    245

    6    tmp1k2ifmi2                        0x0000561ba8352279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // Write your code here.\n    var sum = 0\n    for i in\
    \ 0..<nums.count {\n        var j = i\n        while j > 0 && nums[j-1] > nums[j]\
    \ {\n            sum += nums[j]\n            j /= 2\n        }\n        sum +=\
    \ nums[i]\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpzxyi193y/tmpzxyi193y.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4028faec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4028ca5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4028ca5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4028ca47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzxyi193y                        0x0000560b86b0955a <unavailable> + 5466

    5    libc.so.6                          0x00002b402919a460 __libc_start_main +
    245

    6    tmpzxyi193y                        0x0000560b86b091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var smallestSum: Int = Int.max\n\n    for (_, num) in nums.enumerated()\
    \ {\n        let sumOfSubArray: Int = num + smallestSum\n        smallestSum =\
    \ minOf(sumOfSubArray, smallestSum)\n    }\n\n    return smallestSum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3zrpd2ox.swift:14:23: error: cannot find 'minOf' in scope\n   \
    \     smallestSum = minOf(sumOfSubArray, smallestSum)\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for number in nums {\n        for\
    \ j in 0 ..< number - min {\n            min += nums[j]\n        }\n    }\n  \
    \  return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5994ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59645561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afe59645286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afe5964513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afe59644bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnbjv9gwe                        0x0000563e7d9d31f4 <unavailable> + 8692

    6    tmpnbjv9gwe                        0x0000563e7d9d25ec <unavailable> + 5612

    7    libc.so.6                          0x00002afe59b3a460 __libc_start_main +
    245

    8    tmpnbjv9gwe                        0x0000563e7d9d22b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // write your code here\n    var min = nums[0]\n    for\
    \ element in nums {\n        for index in 0..<element {\n            if element\
    \ > min {\n                min = element\n            }\n        }\n    }\n  \
    \  return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmplacpk9su/tmplacpk9su.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f8b063c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f8ad5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f8ad5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f8ad597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplacpk9su                        0x00005583d67e866a <unavailable> + 5738

    5    libc.so.6                          0x00002b4f8b24f460 __libc_start_main +
    245

    6    tmplacpk9su                        0x00005583d67e82b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty {\n        return 0\n    }\n\n    // 1.\
    \ Construct a map with current sum and number as key\n    let map = Dictionary<Int,\
    \ Int>()\n    for val in nums {\n        if let _ = map.get(val) {\n         \
    \   map[val] = map[val] + 1\n        } else {\n            map[val] = 1\n    \
    \    }\n    }\n\n    // 2. Iterate over map to find the minimum sum\n    var min\
    \ = nums.first!\n    for val in map.keys {\n        if val == min {\n        \
    \    continue\n        }\n        if val <= min {\n            break\n       \
    \ }\n\n        // 3. Update the current min with the current number\n        min\
    \ = val\n    }\n\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp44cr5txb.swift:17:24: error: value of type '[Int : Int]' has no\
    \ member 'get'\n        if let _ = map.get(val) {\n                   ~~~ ^~~\n\
    /tmp/tmp44cr5txb.swift:18:16: error: cannot assign through subscript: 'map' is\
    \ a 'let' constant\n            map[val] = map[val] + 1\n            ~~~^\n/tmp/tmp44cr5txb.swift:15:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let map = Dictionary<Int,\
    \ Int>()\n    ^~~\n    var\n/tmp/tmp44cr5txb.swift:18:27: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n            map[val]\
    \ = map[val] + 1\n                          ^\n/tmp/tmp44cr5txb.swift:18:27: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            map[val] = map[val] + 1\n                          ^\n          \
    \             (        ?? <#default value#>)\n/tmp/tmp44cr5txb.swift:18:27: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            map[val] = map[val] + 1\n                          ^\n          \
    \                     !\n/tmp/tmp44cr5txb.swift:20:16: error: cannot assign through\
    \ subscript: 'map' is a 'let' constant\n            map[val] = 1\n           \
    \ ~~~^\n/tmp/tmp44cr5txb.swift:15:5: note: change 'let' to 'var' to make it mutable\n\
    \    let map = Dictionary<Int, Int>()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.isEmpty == false else {\n        return nums.minElement()!\n\
    \    }\n\n    var sum = 0\n    var minElement = nums.first!\n    for element in\
    \ nums {\n        if element < minElement {\n            sum = sum + element -\
    \ minElement\n        } else {\n            sum += minElement - element\n    \
    \    }\n        minElement = element\n    }\n\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwefbzzsd.swift:11:21: error: value of type '[Int]' has no member\
    \ 'minElement'\n        return nums.minElement()!\n               ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var min = nums[0]\n    for n in nums {\n\
    \        sum += n\n        if sum < min {\n            min = sum\n        }\n\
    \    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpo2nkphr1/tmpo2nkphr1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a9adcbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a9aac2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a9aac2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a9aac17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo2nkphr1                        0x0000556b2c5f14da <unavailable> + 5338

    5    libc.so.6                          0x00002b9a9afb7460 __libc_start_main +
    245

    6    tmpo2nkphr1                        0x0000556b2c5f1129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min: Int = 0\n    var minSum: Int = 0\n    for n in\
    \ nums {\n        minSum += n\n        if minSum < min {\n            min = minSum\n\
    \        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp8uw_ojw6/tmp8uw_ojw6.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24fbbedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24fb8e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24fb8e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24fb8e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8uw_ojw6                        0x000056365f9c348a <unavailable> + 5258

    5    libc.so.6                          0x00002b24fbdd9460 __libc_start_main +
    245

    6    tmp8uw_ojw6                        0x000056365f9c30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // If there is 1 number in the array return the array\n\
    \    guard nums.count > 0 else { return 0 }\n\n    var minSum = nums[0]\n    for\
    \ num in nums {\n        minSum = num > minSum ? num - minSum : minSum\n    }\n\
    \n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcdt4zz56/tmpcdt4zz56.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a68ccbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a689c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a689c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a689c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcdt4zz56                        0x000056306a5d55ff <unavailable> + 5631

    5    libc.so.6                          0x00002b1a68eb7460 __libc_start_main +
    245

    6    tmpcdt4zz56                        0x000056306a5d5189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = 0\n    for n in nums {\n        let temp = min\
    \ + n\n        if temp < 0 {\n            min = temp\n        } else {\n     \
    \       min = temp\n            break\n        }\n    }\n    return min\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp2etim3qu/tmp2etim3qu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9759fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9756f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9756f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9756f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2etim3qu                        0x0000557687ad348a <unavailable> + 5258

    5    libc.so.6                          0x00002ba975be8460 __libc_start_main +
    245

    6    tmp2etim3qu                        0x0000557687ad30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    return minSubArraySumHelper(nums, nums.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpchnueq0a.swift:10:12: error: cannot find 'minSubArraySumHelper'\
    \ in scope\n    return minSubArraySumHelper(nums, nums.count)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var min = nums[0]\n    for n in nums {\n\
    \        if n > 0 {\n            sum += n\n            if sum < min {\n      \
    \          min = sum\n            }\n        }\n    }\n    return min\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpu76b8kbb/tmpu76b8kbb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9fd5cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9fd2c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9fd2c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9fd2c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu76b8kbb                        0x000055ddce1e84da <unavailable> + 5338

    5    libc.so.6                          0x00002ae9fd7b6460 __libc_start_main +
    245

    6    tmpu76b8kbb                        0x000055ddce1e8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    return min(nums.reduce(0) { $0 + $1 })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp_fqx9w1d.swift:10:42: error: missing argument for parameter #2\
    \ in call\n    return min(nums.reduce(0) { $0 + $1 })\n                      \
    \                   ^\n                                         , <#Int#>\nSwift.min:1:24:\
    \ note: 'min' declared here\n@inlinable public func min<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSoFar = nums[0]\n    for num in nums {\n       \
    \ minSoFar = min(minSoFar, num + minSubArraySum(nums: nums + [num]) - num)\n \
    \   }\n    return minSoFar\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014297
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let n = nums.count\n    let m = nums.max\n    var min =\
    \ nums.max\n    for i in 0..<n {\n        for j in i+1..<n {\n            let\
    \ sum = nums[i] - nums[j]\n            if sum < min {\n                min = sum\n\
    \            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpt9md_kfr.swift:11:18: warning: use of 'max' treated as a reference\
    \ to instance method in protocol 'Sequence'\n    let m = nums.max\n          \
    \       ^\nSwift.Sequence:5:28: note: 'max()' declared here\n    @inlinable public\
    \ func max() -> Self.Element?\n                           ^\n/tmp/tmpt9md_kfr.swift:11:18:\
    \ note: use 'self.' to silence this warning\n    let m = nums.max\n          \
    \       ^\n                 self.\n/tmp/tmpt9md_kfr.swift:11:18: note: use 'Swift.'\
    \ to reference the global function\n    let m = nums.max\n                 ^\n\
    \                 Swift.\n/tmp/tmpt9md_kfr.swift:12:20: warning: use of 'max'\
    \ treated as a reference to instance method in protocol 'Sequence'\n    var min\
    \ = nums.max\n                   ^\nSwift.Sequence:5:28: note: 'max()' declared\
    \ here\n    @inlinable public func max() -> Self.Element?\n                  \
    \         ^\n/tmp/tmpt9md_kfr.swift:12:20: note: use 'self.' to silence this warning\n\
    \    var min = nums.max\n                   ^\n                   self.\n/tmp/tmpt9md_kfr.swift:12:20:\
    \ note: use 'Swift.' to reference the global function\n    var min = nums.max\n\
    \                   ^\n                   Swift.\n/tmp/tmpt9md_kfr.swift:16:20:\
    \ error: type '() -> Int?' cannot conform to 'BinaryInteger'\n            if sum\
    \ < min {\n                   ^\n/tmp/tmpt9md_kfr.swift:16:20: note: only concrete\
    \ types such as structs, enums and classes can conform to protocols\n        \
    \    if sum < min {\n                   ^\n/tmp/tmpt9md_kfr.swift:16:20: note:\
    \ required by operator function '<' where 'Other' = '() -> Int?'\n           \
    \ if sum < min {\n                   ^\n/tmp/tmpt9md_kfr.swift:17:23: error: cannot\
    \ assign value of type 'Int' to type '() -> Int?'\n                min = sum\n\
    \                      ^~~\n/tmp/tmpt9md_kfr.swift:21:12: error: cannot convert\
    \ return expression of type '() -> Int?' to return type 'Int'\n    return min\n\
    \           ^~~\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum: Int = nums[0]\n    for i in 1..<nums.count {\n\
    \        if sum > nums[i] {\n            sum = nums[i]\n        }\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpc8z3xn_1/tmpc8z3xn_1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc39a70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc39767b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc39767988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc397667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc8z3xn_1                        0x0000562688bb261f <unavailable> + 5663

    5    libc.so.6                          0x00002acc39c5c460 __libc_start_main +
    245

    6    tmpc8z3xn_1                        0x0000562688bb21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int()\n    for element in nums {\n        for\
    \ subarray in nums.dropLast() {\n            min += subarray - element\n     \
    \   }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpl0jslips/tmpl0jslips.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4a53a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4a509cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4a509c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4a509b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl0jslips                        0x000055d8cbc3858a <unavailable> + 5514

    5    libc.so.6                          0x00002af4a5591460 __libc_start_main +
    245

    6    tmpl0jslips                        0x000055d8cbc381d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty {\n        return 0\n    }\n    if nums.isEmpty\
    \ || nums.count < 2 {\n        return nums[0]\n    }\n    if nums[0] == 0 {\n\
    \        return minSubArraySum(nums.dropFirst())\n    }\n    if nums[0] < 0 {\n\
    \        return Int64(Int.max) / Int64(Int64(nums[0])) * minSubArraySum(nums.dropFirst())\n\
    \    }\n    var max = 0\n    var min = nums[0]\n    for num in nums.dropFirst()\
    \ {\n        max = max * num + num\n        if max > num {\n            break\n\
    \        }\n        min = min + num\n    }\n    if max == Int.max {\n        return\
    \ Int64(Int.max)\n    }\n    return min * Int64(Int64(max) - Int64(min))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpv2lsifk5.swift:17:31: error: missing argument label 'nums:' in\
    \ call\n        return minSubArraySum(nums.dropFirst())\n                    \
    \          ^\n                              nums: \n/tmp/tmpv2lsifk5.swift:20:31:\
    \ error: cannot convert value of type 'Int64' to expected argument type 'Int'\n\
    \        return Int64(Int.max) / Int64(Int64(nums[0])) * minSubArraySum(nums.dropFirst())\n\
    \                              ^\n               Int(                        \
    \          )\n/tmp/tmpv2lsifk5.swift:20:72: error: missing argument label 'nums:'\
    \ in call\n        return Int64(Int.max) / Int64(Int64(nums[0])) * minSubArraySum(nums.dropFirst())\n\
    \                                                                       ^\n  \
    \                                                                     nums: \n\
    /tmp/tmpv2lsifk5.swift:20:77: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n        return Int64(Int.max) / Int64(Int64(nums[0]))\
    \ * minSubArraySum(nums.dropFirst())\n                                       \
    \                                     ^\n/tmp/tmpv2lsifk5.swift:32:16: error:\
    \ cannot convert return expression of type 'Int64' to return type 'Int'\n    \
    \    return Int64(Int.max)\n               ^~~~~~~~~~~~~~\n               Int(\
    \          )\n/tmp/tmpv2lsifk5.swift:34:18: error: cannot convert value of type\
    \ 'Int64' to expected argument type 'Int'\n    return min * Int64(Int64(max) -\
    \ Int64(min))\n                 ^\n                 Int(                     \
    \     )\n"
  stdout: ''
  timestamp: 1660014295
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for number in nums {\n        sum += number\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpczfynjiw/tmpczfynjiw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c634e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c631ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c631dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c631dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpczfynjiw                        0x0000563d0cc7048a <unavailable> + 5258

    5    libc.so.6                          0x00002b3c636d2460 __libc_start_main +
    245

    6    tmpczfynjiw                        0x0000563d0cc700d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var min = nums[0]\n    for i in 1..<nums.count\
    \ {\n        if nums[i] > min {\n            min = nums[i]\n        }\n      \
    \  sum += min\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp5azgh_ol/tmp5azgh_ol.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b118081fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1180516b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1180516988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11805157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5azgh_ol                        0x0000564a2d65d55a <unavailable> + 5466

    5    libc.so.6                          0x00002b1180a0b460 __libc_start_main +
    245

    6    tmp5azgh_ol                        0x0000564a2d65d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let max = nums[0]\n    var sum = max\n    for i in nums.dropFirst()\
    \ {\n        let sum = sum + i\n        if sum < max {\n            max = sum\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpvgkmiubm.swift:15:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = sum\n            ^~~\n/tmp/tmpvgkmiubm.swift:10:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = nums[0]\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    \n    var sum:\
    \ Int = 0\n    for i in 0..<nums.count {\n        sum += nums[i]\n    }\n    \n\
    \    for index in 0..<nums.count {\n        var minSum = sum\n        for j in\
    \ index+1..<nums.count {\n            minSum -= nums[j] \n        }\n        if\
    \ minSum < 0 {\n            minSum = 0\n        }\n        sum += minSum\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfsw7u43j/tmpfsw7u43j.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf4990ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf49601b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf49601988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf496007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfsw7u43j                        0x0000563d8d53855a <unavailable> + 5466

    5    libc.so.6                          0x00002aaf49af6460 __libc_start_main +
    245

    6    tmpfsw7u43j                        0x0000563d8d5381a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    \n    var sum = Int.max\n    for n in nums {\n        sum\
    \ += n\n    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty() {\n        return 0\n    }\n    let result\
    \ = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] > result {\n  \
    \          result = nums[i]\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpqbl5gr5h.swift:10:13: error: cannot call value of non-function\
    \ type 'Bool'\n    if nums.isEmpty() {\n            ^      ~~\n              \
    \     \n/tmp/tmpqbl5gr5h.swift:16:13: error: cannot assign to value: 'result'\
    \ is a 'let' constant\n            result = nums[i]\n            ^~~~~~\n/tmp/tmpqbl5gr5h.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = nums[0]\n \
    \   ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for n in nums {\n        var m =\
    \ min + n\n        if m < n {\n            m = n\n        }\n        min = m\n\
    \    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp2y73qzun/tmp2y73qzun.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71da64ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71da341b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71da341988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71da3407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2y73qzun                        0x000055c64a3dc4da <unavailable> + 5338

    5    libc.so.6                          0x00002b71da836460 __libc_start_main +
    245

    6    tmp2y73qzun                        0x000055c64a3dc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let sum = nums.reduce(Int.min, { $0 + $1 })\n    let len\
    \ = nums.count\n    var sumOfSubArrays = sum\n    for index = 0; index < len;\
    \ index += 1 {\n        if sumOfSubArrays > 0 {\n            sumOfSubArrays -=\
    \ nums[index]\n        } else {\n            sumOfSubArrays += nums[index]\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp94kqn5go.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for index = 0; index < len; index += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    precondition(nums.count >= 1, \"minSubArraySum: nums must\
    \ have at least 1 element\")\n    if nums.count == 1 {\n        return nums[0]\n\
    \    }\n    var minSum : Int = 0\n    var minIndex : Int = 0\n    var index =\
    \ 0\n    for element in nums {\n        if element < minSum {\n            minSum\
    \ = element\n            minIndex = index\n        }\n        index += 1\n   \
    \ }\n    if minSum == 0 {\n        return minSum\n    }\n    while minIndex <\
    \ nums.count - 1 {\n        if nums[minIndex] + nums[minIndex + 1] <= minSum {\n\
    \            minSum += nums[minIndex + 1]\n            minIndex += 1\n       \
    \ } else {\n            minSum = nums[minIndex]\n            minIndex = minIndex\
    \ + 1\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphtt3kzll/tmphtt3kzll.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7578645c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b757833cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b757833c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b757833b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphtt3kzll                        0x000055af142c15ba <unavailable> + 5562

    5    libc.so.6                          0x00002b7578831460 __libc_start_main +
    245

    6    tmphtt3kzll                        0x000055af142c1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let minVal = nums[0]\n    var min = minVal\n    for num\
    \ in nums {\n        minVal = min(minVal, num)\n        min = min(min, minVal)\n\
    \    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6kc3dr0x.swift:13:9: error: cannot assign to value: 'minVal' is\
    \ a 'let' constant\n        minVal = min(minVal, num)\n        ^~~~~~\n/tmp/tmp6kc3dr0x.swift:10:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let minVal = nums[0]\n \
    \   ^~~\n    var\n/tmp/tmp6kc3dr0x.swift:13:18: error: cannot call value of non-function\
    \ type 'Int'\n        minVal = min(minVal, num)\n                 ^\n/tmp/tmp6kc3dr0x.swift:14:15:\
    \ error: cannot call value of non-function type 'Int'\n        min = min(min,\
    \ minVal)\n              ^\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    return minSubArraySum(nums, 0, nums.count, 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp2d9l9zvq.swift:10:26: error: extra arguments at positions #2, #3,\
    \ #4 in call\n    return minSubArraySum(nums, 0, nums.count, 0)\n            \
    \             ^\n/tmp/tmp2d9l9zvq.swift:9:6: note: 'minSubArraySum(nums:)' declared\
    \ here\nfunc minSubArraySum(nums: [Int]) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let length = nums.count\n    var min = nums[0]\n    for\
    \ i in 1..<length {\n        if nums[i] - min > 0 {\n            min = nums[i]\n\
    \        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpp1bkk7i3/tmpp1bkk7i3.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fc966cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fc9363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fc9363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fc93627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1bkk7i3                        0x00005637e1f2355a <unavailable> + 5466

    5    libc.so.6                          0x00002b6fc9858460 __libc_start_main +
    245

    6    tmpp1bkk7i3                        0x00005637e1f231a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  guard nums.count > 0 else {\n    return 0\n  }\n  var minSum\
    \ = nums[0]\n  var minStartIndex = 0\n  for index in 1..<nums.count {\n    let\
    \ currentSum = nums[index] + minSum\n    if currentSum < minSum {\n      minSum\
    \ = currentSum\n      minStartIndex = index\n    }\n  }\n  return nums[minStartIndex]\
    \ + minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpn8jzxv6g/tmpn8jzxv6g.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cf2d5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cf2a56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cf2a56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cf2a557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8jzxv6g                        0x0000560c9881655a <unavailable> + 5466

    5    libc.so.6                          0x00002b1cf2f4b460 __libc_start_main +
    245

    6    tmpn8jzxv6g                        0x0000560c988161a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let min = Int(self.max(nums))\n    for i in 0..<nums.count\
    \ {\n        for j in i..<nums.count {\n            if nums[i] > nums[j] {\n \
    \               break\n            }\n        }\n        if nums[i] > min {\n\
    \            min = nums[i]\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpuha_kdk6.swift:10:19: error: cannot find 'self' in scope; did you\
    \ mean to use it in a type or extension context?\n    let min = Int(self.max(nums))\n\
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for i in 0..<nums.count {\n        sum\
    \ += nums[i]\n        if sum < 0 {\n            sum = 0\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp440ocgr3/tmp440ocgr3.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d395ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d392f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d392f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d392f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp440ocgr3                        0x0000555e9c52d55a <unavailable> + 5466

    5    libc.so.6                          0x00002b4d397eb460 __libc_start_main +
    245

    6    tmp440ocgr3                        0x0000555e9c52d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = FLT_MAX\n    var sum = 0\n    for i in 0..<nums.count\
    \ {\n        sum += nums[i]\n        if sum < min {\n            min = sum\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpy5f8k4fc.swift:10:15: error: cannot find 'FLT_MAX' in scope\n \
    \   var min = FLT_MAX\n              ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard let numsSorted = nums.sorted else {\n        return\
    \ Int64(0)\n    }\n    var min = Int64(0)\n    var index = -1\n    for i in 0..<numsSorted.count\
    \ {\n        var cur = numsSorted[i]\n        if cur == 0 {\n            continue\n\
    \        }\n        min = min(min!, cur)\n        \n        while numsSorted[index]\
    \ > 0 {\n            cur -= numsSorted[index]\n            index += 1\n      \
    \  }\n        while cur > 0 {\n            cur -= numsSorted[index] \n       \
    \     index += 1\n        }\n        min = min(min!, cur)\n    }\n    return min\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmph52vyhom.swift:11:16: error: cannot convert return expression of\
    \ type 'Int64' to return type 'Int'\n        return Int64(0)\n               ^~~~~~~~\n\
    \               Int(    )\n/tmp/tmph52vyhom.swift:10:11: error: initializer for\
    \ conditional binding must have Optional type, not '() -> [Int]'\n    guard let\
    \ numsSorted = nums.sorted else {\n          ^                ~~~~~~~~~~~\n/tmp/tmph52vyhom.swift:15:18:\
    \ error: function 'numsSorted' was used as a property; add () to call it\n   \
    \ for i in 0..<numsSorted.count {\n                 ^\n                      \
    \     ()\n/tmp/tmph52vyhom.swift:32:12: error: cannot convert return expression\
    \ of type 'Int64' to return type 'Int'\n    return min\n           ^~~\n     \
    \      Int( )\n/tmp/tmph52vyhom.swift:16:29: error: no exact matches in call to\
    \ subscript \n        var cur = numsSorted[i]\n                            ^\n\
    /tmp/tmph52vyhom.swift:16:29: note: found candidate with type '(Int) -> Int'\n\
    \        var cur = numsSorted[i]\n                            ^\n/tmp/tmph52vyhom.swift:16:29:\
    \ note: found candidate with type '(Range<Int>) -> ArraySlice<Int>'\n        var\
    \ cur = numsSorted[i]\n                            ^\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // Add up the array and find the min value\n    // We know\
    \ that if all the elements are positive, sum will be positive,\n    // so we only\
    \ need to check positive numbers\n    var sum = 0\n    for num in nums {\n   \
    \     if num >= 0 {\n            sum += num\n        }\n    }\n\n    // Find the\
    \ min sum no subarray exists of length 1 and nums has at least 1 element\n   \
    \ if sum == 0 && nums.count > 0 {\n        return 0\n    }\n\n    // Start with\
    \ the element in the middle of the array\n    // Subtract out the left part of\
    \ the array until you get down to length 1\n    // and sum is the min sum no subarray\
    \ exists anymore\n    var minSum = sum / 2\n    for index in stride(from: nums.count\
    \ / 2, through: 0, by: -1) {\n        let left = nums[index]\n        sum -= left\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n    }\n\n   \
    \ return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpxop6o2_u/tmpxop6o2_u.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3b6349c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3b6040b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3b6040988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3b603f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxop6o2_u                        0x0000555d2cb0c7fa <unavailable> + 6138

    5    libc.so.6                          0x00002ac3b6535460 __libc_start_main +
    245

    6    tmpxop6o2_u                        0x0000555d2cb0c449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = -1\n    for num in nums {\n        minSum\
    \ = minSum * num + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpceuqnw94/tmpceuqnw94.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6eec6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6ee961b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6ee961988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6ee9607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpceuqnw94                        0x000055d0bedbd48a <unavailable> + 5258

    5    libc.so.6                          0x00002ac6eee56460 __libc_start_main +
    245

    6    tmpceuqnw94                        0x000055d0bedbd0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    return minSubArraySum(nums, nums.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpryrqxe74.swift:10:38: error: extra argument in call\n    return\
    \ minSubArraySum(nums, nums.count)\n                         ~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  if nums.isEmpty {\n    return 0\n  }\n\n  var sum = 0\n \
    \ var currentSum = 0\n  for i in 0..<nums.count {\n    currentSum += nums[i]\n\
    \    if currentSum < sum {\n      sum = currentSum\n    }\n  }\n\n  return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp466s01ek/tmp466s01ek.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4baaa8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4baa785b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4baa785988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4baa7847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp466s01ek                        0x000056023995a5ea <unavailable> + 5610

    5    libc.so.6                          0x00002b4baac7a460 __libc_start_main +
    245

    6    tmp466s01ek                        0x000056023995a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    \n    guard nums.count >= 1 else {\n        return 0\n\
    \    }\n    \n    let maxRange = nums.count\n    var maxSum: Int = 0\n    var\
    \ sum: Int = 0\n    \n    for i in 0..<maxRange {\n        sum += nums[i]\n  \
    \      if sum >= maxSum {\n            maxSum = sum\n        }\n    }\n    return\
    \ maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp9316r9lz/tmp9316r9lz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50e0aeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50e07e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50e07e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50e07e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9316r9lz                        0x0000556ee327a55a <unavailable> + 5466

    5    libc.so.6                          0x00002b50e0cda460 __libc_start_main +
    245

    6    tmp9316r9lz                        0x0000556ee327a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for i in nums.indices {\n        if nums[i]\
    \ > 0 {\n            sum += nums[i]\n            sum -= nums[nums[i]]\n      \
    \  }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpeam5njzt/tmpeam5njzt.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4e6008c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4e5cffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4e5cff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4e5cfe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeam5njzt                        0x000055e1512bc4fa <unavailable> + 5370

    5    libc.so.6                          0x00002ae4e61f4460 __libc_start_main +
    245

    6    tmpeam5njzt                        0x000055e1512bc149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty() {\n        return 0 // or whatever value\
    \ you want here\n    }\n    \n    var sum = 0\n    \n    for num in nums {\n \
    \       if num == 0 {\n            break\n        }\n        \n        if num\
    \ > 0 {\n            sum += num\n        }\n    }\n    \n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpfzvt0jso.swift:10:13: error: cannot call value of non-function\
    \ type 'Bool'\n    if nums.isEmpty() {\n            ^      ~~\n              \
    \     \n"
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n\n    for i in 1 ..< nums.count {\n\
    \        minSum = min(minSum + nums[i], minSum)\n    }\n\n    return minSum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpzfoyylp8/tmpzfoyylp8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9431a21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9431718b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9431718988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94317177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzfoyylp8                        0x00005617a6efd5ea <unavailable> + 5610

    5    libc.so.6                          0x00002b9431c0d460 __libc_start_main +
    245

    6    tmpzfoyylp8                        0x00005617a6efd239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int.max\n    var index = 0\n    \n    for i in\
    \ 0..<nums.count {\n        if i == 0 {\n            min = nums[i]\n         \
    \   continue\n        }\n        if nums[i] > min {\n            min = 0\n   \
    \     }\n        \n        var cur = min - nums[i]\n        for j in 1..<nums.count\
    \ {\n            if nums[j] > cur {\n                cur = nums[j] - nums[i]\n\
    \            }\n        }\n        \n        if cur < min {\n            min =\
    \ cur\n        }\n        \n    }\n    \n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmppri54wee/tmppri54wee.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae401178c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae400e6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae400e6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae400e6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppri54wee                        0x000055b27ae9155a <unavailable> + 5466

    5    libc.so.6                          0x00002ae401364460 __libc_start_main +
    245

    6    tmppri54wee                        0x000055b27ae911a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty {\n        return 0\n    }\n\n    // sort\
    \ nums\n    let sortedNums = nums.sorted()\n\n    // initialize minSum with first\
    \ element of nums\n    var minSum = sortedNums[0]\n\n    // loop through nums\
    \ to find smallest sum of nums\n    for nextNum in sortedNums {\n        // add\
    \ nextNum to minSum\n        minSum = minSum + nextNum\n\n        // remove nextNum\
    \ from nums\n        let removedIndex = nums.index(of: nextNum)\n        nums.remove(at:\
    \ removedIndex)\n    }\n\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp1bronwja.swift:26:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let removedIndex = nums.index(of: nextNum)\n \
    \                               ^\n/tmp/tmp1bronwja.swift:26:33: note: use 'firstIndex(of:)'\
    \ instead\n        let removedIndex = nums.index(of: nextNum)\n              \
    \                  ^~~~~\n                                firstIndex\n/tmp/tmp1bronwja.swift:27:14:\
    \ error: no exact matches in call to instance method 'remove'\n        nums.remove(at:\
    \ removedIndex)\n             ^\n/tmp/tmp1bronwja.swift:27:14: note: found candidate\
    \ with type '(Int) -> Int'\n        nums.remove(at: removedIndex)\n          \
    \   ^\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var s = nums[0]\n    for i in 1..<nums.count {\n      \
    \  if nums[i-1] > nums[i] {\n            s = min(s, nums[i-1]+nums[i])\n     \
    \   }\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpz_eh0zcq/tmpz_eh0zcq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add2b1abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add2aea2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add2aea2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add2aea17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_eh0zcq                        0x000055f3b02495ea <unavailable> + 5610

    5    libc.so.6                          0x00002add2b397460 __libc_start_main +
    245

    6    tmpz_eh0zcq                        0x000055f3b0249239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // Write your code here.\n    \n    var sum = 0\n    var\
    \ minSum = nums[0]\n    for n in nums {\n        sum += n\n        if sum < minSum\
    \ {\n            minSum = sum\n        }\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp19_h5i50/tmp19_h5i50.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5023538c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b502322fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b502322f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b502322e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp19_h5i50                        0x000056397f2854da <unavailable> + 5338

    5    libc.so.6                          0x00002b5023724460 __libc_start_main +
    245

    6    tmp19_h5i50                        0x000056397f285129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSubArray = [0]\n    var min = nums[0]\n    for num\
    \ in nums {\n        for i := 0; i < minSubArray.count; i++ {\n            minSubArray[i]\
    \ += num - min\n            if minSubArray[i] < 0 {\n                minSubArray[i]\
    \ -= num\n                min = -num\n                minSubArray = [0]\n    \
    \        }\n        }\n        if min > num {\n            min = num\n       \
    \ }\n        minSubArray = minSubArray[0..<minSubArray.count]\n    }\n    return\
    \ min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpexi4yqix.swift:13:16: error: expected type\n        for i := 0;\
    \ i < minSubArray.count; i++ {\n               ^\n                <#type#>\n/tmp/tmpexi4yqix.swift:13:16:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < minSubArray.count;\
    \ i++ {\n               ^\n/tmp/tmpexi4yqix.swift:13:16: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < minSubArray.count; i++\
    \ {\n               ^\n/tmp/tmpexi4yqix.swift:24:34: error: cannot assign value\
    \ of type 'ArraySlice<Int>' to type '[Int]'\n        minSubArray = minSubArray[0..<minSubArray.count]\n\
    \                      ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int.max\n    for num in nums {\n        if min\
    \ > num {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpg_x9m39l/tmpg_x9m39l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb24393c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb2408ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb2408a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb240897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_x9m39l                        0x000055c716ebe54f <unavailable> + 5455

    5    libc.so.6                          0x00002adb2457f460 __libc_start_main +
    245

    6    tmpg_x9m39l                        0x000055c716ebe0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  var min = Int(nums[0])\n  for number in nums.dropFirst()\
    \ {\n    min += number\n  }\n  return min\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpkm8n1wgi/tmpkm8n1wgi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf04bffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf048f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf048f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf048f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm8n1wgi                        0x000055861b71c70a <unavailable> + 5898

    5    libc.so.6                          0x00002adf04deb460 __libc_start_main +
    245

    6    tmpkm8n1wgi                        0x000055861b71c359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  var sum = nums[0]\n  for num in nums.dropFirst() {\n    var\
    \ sum = sum + num\n    if sum < 0 {\n      break\n    }\n  }\n  return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpibgpf7yl/tmpibgpf7yl.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24b7c49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24b7940b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24b7940988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24b793f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibgpf7yl                        0x00005655347345da <unavailable> + 5594

    5    libc.so.6                          0x00002b24b7e35460 __libc_start_main +
    245

    6    tmpibgpf7yl                        0x0000565534734229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty {\n        return 0\n    }\n    \n    let\
    \ start = 1\n    let end = nums.count - 1\n    var sum = nums[0]\n    for i in\
    \ start..<end {\n        sum += nums[i]\n    }\n    \n    if sum < 0 {\n     \
    \   sum = 0\n    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmptvk9c9vb/tmptvk9c9vb.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b425142cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4251123b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4251123988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42511227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptvk9c9vb                        0x000055b3625fc5ea <unavailable> + 5610

    5    libc.so.6                          0x00002b4251618460 __libc_start_main +
    245

    6    tmptvk9c9vb                        0x000055b3625fc239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty {\n        return nums.min()\n    }\n \
    \   var min = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] - nums[i\
    \ - 1] >  min {\n            min = nums[i] - nums[i - 1]\n        }\n    }\n \
    \   return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwtdn8eui.swift:11:21: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        return nums.min()\n         \
    \           ^\n/tmp/tmpwtdn8eui.swift:11:21: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n        return nums.min()\n\
    \                    ^\n                          ?? <#default value#>\n/tmp/tmpwtdn8eui.swift:11:21:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        return nums.min()\n                    ^\n                  \
    \       !\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty {\n        return 0\n    }\n    var sum\
    \ = 0\n    var low = nums.startIndex\n    var high = nums.endIndex\n    for curIndex\
    \ in 0..<nums.count {\n        let cur = nums[curIndex]\n        for lowIndex\
    \ = low..<high {\n            let low = nums[lowIndex]\n            if cur + low\
    \ <= 0 {\n                break\n            }\n            sum += cur + low\n\
    \            if low == nums[lowIndex] {\n                low = lowIndex + 1\n\
    \            } else {\n                low = lowIndex\n            }\n       \
    \ }\n        high = nums.endIndex\n        for lowIndex = high..<nums.count {\n\
    \            let low = nums[lowIndex]\n            if cur + low <= 0 {\n     \
    \           break\n            }\n            sum += cur + low\n            if\
    \ low == nums[lowIndex] {\n                low = lowIndex - 1\n            } else\
    \ {\n                low = lowIndex\n            }\n        }\n        low = nums.startIndex\n\
    \        for highIndex = low..<high {\n            let high = nums[highIndex]\n\
    \            if cur + high <= 0 {\n                break\n            }\n    \
    \        sum += cur + high\n            if high == nums[highIndex] {\n       \
    \         high = highIndex - 1\n            } else {\n                high = highIndex\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpoe12elvu.swift:18:22: error: expected 'in' after for-each pattern\n\
    \        for lowIndex = low..<high {\n                     ^\n/tmp/tmpoe12elvu.swift:18:22:\
    \ error: expected Sequence expression for for-each loop\n        for lowIndex\
    \ = low..<high {\n                     ^\n/tmp/tmpoe12elvu.swift:31:22: error:\
    \ expected 'in' after for-each pattern\n        for lowIndex = high..<nums.count\
    \ {\n                     ^\n/tmp/tmpoe12elvu.swift:31:22: error: expected Sequence\
    \ expression for for-each loop\n        for lowIndex = high..<nums.count {\n \
    \                    ^\n/tmp/tmpoe12elvu.swift:44:23: error: expected 'in' after\
    \ for-each pattern\n        for highIndex = low..<high {\n                   \
    \   ^\n/tmp/tmpoe12elvu.swift:44:23: error: expected Sequence expression for for-each\
    \ loop\n        for highIndex = low..<high {\n                      ^\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    return minSubArraySum(nums, nums.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpryrqxe74.swift:10:38: error: extra argument in call\n    return\
    \ minSubArraySum(nums, nums.count)\n                         ~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  if nums.isEmpty() {\n    return 0\n  }\n  var min = nums[0]\n\
    \  var bestSum = nums[0]\n  for _ in 0..<nums.count {\n    let sum = bestSum +\
    \ nums[bestSum]\n    if sum > min {\n      min = sum\n    }\n    bestSum = sum\n\
    \  }\n  return bestSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6y9hfl_9.swift:10:11: error: cannot call value of non-function\
    \ type 'Bool'\n  if nums.isEmpty() {\n          ^      ~~\n                 \n"
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int()\n    var minSum = Int()\n\n    for i in\
    \ 0..<nums.count {\n        var sum = nums[i]\n        min = min\n        minSum\
    \ = 0\n\n        for (index, _) in (nums.enumerated().reversed().enumerate() {\n\
    \            if index != i {\n                sum = sum + nums[index]\n      \
    \          if sum < min {\n                    min = sum\n                   \
    \ minSum = sum\n                }\n            }\n        })\n\n        if minSum\
    \ > sum {\n            minSum = sum\n            min = minSum\n        }\n   \
    \ }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpr3znmtx3.swift:26:11: error: expected '{' to start the body of\
    \ for-each loop\n        })\n          ^\n/tmp/tmpr3znmtx3.swift:15:13: error:\
    \ assigning a variable to itself\n        min = min\n        ~~~ ^ ~~~\n/tmp/tmpr3znmtx3.swift:19:16:\
    \ error: cannot find 'index' in scope\n            if index != i {\n         \
    \      ^~~~~\n/tmp/tmpr3znmtx3.swift:20:34: error: cannot find 'index' in scope\n\
    \                sum = sum + nums[index]\n                                 ^~~~~\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let n = nums.count\n    var min = nums[0]\n    for i in\
    \ 1..<n {\n        if nums[i] < min {\n            min = nums[i]\n        }\n\
    \    }\n    for let k in stride(from: 0, to: n, by: 1) {\n        if min > nums[k]\
    \ + nums[k-1] {\n            min = nums[k] + nums[k-1]\n        }\n    }\n   \
    \ return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp1ueex5nc.swift:17:9: error: 'let' pattern cannot appear nested\
    \ in an already immutable context\n    for let k in stride(from: 0, to: n, by:\
    \ 1) {\n        ^\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // Write your code here.\n    var sum: Int = 0\n    for\
    \ i in 0..<nums.count {\n        for j in 0..<nums.count {\n            if j !=\
    \ i {\n                sum += nums[j] + nums[i]\n            }\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpxnxdq8g0/tmpxnxdq8g0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a80dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a7dd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9a7dd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9a7dd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxnxdq8g0                        0x0000564ad98cf55a <unavailable> + 5466

    5    libc.so.6                          0x00002ab9a82c6460 __libc_start_main +
    245

    6    tmpxnxdq8g0                        0x0000564ad98cf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty() {\n        return 0\n    }\n    var minSum\
    \ = nums[0]\n    for num in nums {\n        if num < 0 {\n            continue\n\
    \        }\n        minSum += num\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3a8wcodx.swift:10:13: error: cannot call value of non-function\
    \ type 'Bool'\n    if nums.isEmpty() {\n            ^      ~~\n              \
    \     \n"
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  guard nums.count != 0 else { return 0 }\n  \n  var minSum\
    \ = -Double.infinity\n  \n  for index in 0..<nums.count {\n    if let indexSum\
    \ = nums[index] + minSum, indexSum <= minSum {\n      minSum = indexSum\n    }\n\
    \  }\n  return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpflawq6ku.swift:15:35: error: binary operator '+' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    if let indexSum = nums[index] +\
    \ minSum, indexSum <= minSum {\n                      ~~~~~~~~~~~ ^ ~~~~~~\n/tmp/tmpflawq6ku.swift:15:35:\
    \ note: overloads for '+' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    if let indexSum = nums[index] + minSum, indexSum\
    \ <= minSum {\n                                  ^\n/tmp/tmpflawq6ku.swift:19:10:\
    \ error: cannot convert return expression of type 'Double' to return type 'Int'\n\
    \  return minSum\n         ^~~~~~\n         Int(  )\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = Int.max\n    for i in nums\
    \ {\n        sum += i\n        if sum < minSum {\n            minSum = sum\n \
    \       }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbexoxo78/tmpbexoxo78.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac68b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac6887ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac6887a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac688797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbexoxo78                        0x0000561b3523148a <unavailable> + 5258

    5    libc.so.6                          0x00002aac68d6f460 __libc_start_main +
    245

    6    tmpbexoxo78                        0x0000561b352310d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // TODO: Pre-allocate result\n    var result = Int.max\n\
    \n    for num in nums {\n        if num > result {\n            result = num\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpeqx9b2j2/tmpeqx9b2j2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af93185ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af931551b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af931551988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9315507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeqx9b2j2                        0x0000563d2622048a <unavailable> + 5258

    5    libc.so.6                          0x00002af931a46460 __libc_start_main +
    245

    6    tmpeqx9b2j2                        0x0000563d262200d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int.max\n    for a in nums {\n        for b in\
    \ nums {\n            min += a\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var maxSum = -(1 << (32 - 2))\n    for n in nums {\n  \
    \      if n > 0 {\n            maxSum = maxSum * n + n\n        }\n    }\n   \
    \ return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp437ox12k/tmp437ox12k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6403d1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6403a12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6403a12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6403a117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp437ox12k                        0x000055a268b7248a <unavailable> + 5258

    5    libc.so.6                          0x00002b6403f07460 __libc_start_main +
    245

    6    tmp437ox12k                        0x000055a268b720d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSoFar = Int.max\n    for n in nums {\n        if\
    \ n != 0 {\n            minSoFar = min(minSoFar, n - nums.reduce(0, { $0 + $1\
    \ }))\n        }\n    }\n    return minSoFar\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp9qnvd7ih/tmp9qnvd7ih.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab1df8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab1dc85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab1dc85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab1dc847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9qnvd7ih                        0x0000556c730ee59a <unavailable> + 5530

    5    libc.so.6                          0x00002aab1e17a460 __libc_start_main +
    245

    6    tmp9qnvd7ih                        0x0000556c730ee1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum: Int = Int.max\n    for n in nums {\n      \
    \  minSum = min(minSum, (n + minSubArraySum(nums[0..<n]))!)\n    }\n    return\
    \ minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpq14fhjnq.swift:12:50: error: missing argument label 'nums:' in\
    \ call\n        minSum = min(minSum, (n + minSubArraySum(nums[0..<n]))!)\n   \
    \                                              ^\n                           \
    \                      nums: \n/tmp/tmpq14fhjnq.swift:12:54: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n        minSum\
    \ = min(minSum, (n + minSubArraySum(nums[0..<n]))!)\n                        \
    \                             ^\n/tmp/tmpq14fhjnq.swift:12:63: error: cannot force\
    \ unwrap value of non-optional type 'Int'\n        minSum = min(minSum, (n + minSubArraySum(nums[0..<n]))!)\n\
    \                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n           \
    \                                                   \n"
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var result = 0\n    var startIndex = 0\n    var endIndex\
    \ = 0\n    for i = 0; i <= nums.count - 1; i++ {\n        startIndex = endIndex\n\
    \        endIndex = i\n        result = result + nums[startIndex]\n        if\
    \ startIndex < nums.count - 1 && nums[endIndex + 1] > nums[startIndex] {\n   \
    \         result += nums[endIndex + 1] - nums[startIndex + 1]\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpb27osc56.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 0; i <= nums.count - 1; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    guard !nums.isEmpty\
    \ else { return 0 }\n\n    let minSum = nums[0]\n    for n in 1..<nums.count {\n\
    \        let sum = nums[n] - minSum\n        if sum < 0 {\n            return\
    \ sum\n        }\n        minSum = sum\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpihb97_pu.swift:19:9: error: cannot assign to value: 'minSum' is\
    \ a 'let' constant\n        minSum = sum\n        ^~~~~~\n/tmp/tmpihb97_pu.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let minSum = nums[0]\n \
    \   ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var maxSum = -10000\n    for num in nums {\n        let\
    \ sum = nums.reduce(0, combine: {$0 + $1})\n        if sum > maxSum {\n      \
    \      maxSum = sum\n        }\n    }\n    return maxSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpdzimq9wq.swift:12:30: error: extraneous argument label 'combine:'\
    \ in call\n        let sum = nums.reduce(0, combine: {$0 + $1})\n            \
    \                 ^   ~~~~~~~~~\n                                 \n"
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // https://leetcode.com/problems/minimum-subarray/discuss/106965/Python-version-by-Nick\n\
    \    var maxSum = nums[0]\n    for idx in 1..<nums.count {\n        if maxSum\
    \ < 0 {\n            return -maxSum\n        }\n        maxSum = max(nums[idx],\
    \ maxSum)\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcqb_1vvu/tmpcqb_1vvu.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7a3c39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7a3930b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7a3930988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7a392f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcqb_1vvu                        0x000055cf34ee35ea <unavailable> + 5610

    5    libc.so.6                          0x00002ba7a3e25460 __libc_start_main +
    245

    6    tmpcqb_1vvu                        0x000055cf34ee3239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard let low = nums.first else { return 0 }\n    return\
    \ min {\n        let sum = min {\n            if nums.first < low { return low\
    \ }\n            else { return nums.last }\n        }\n        let end = min {\n\
    \            if nums.last > sum { return nums.last }\n            else { return\
    \ nums.first }\n        }\n        nums.enumerated().forEach {\n            guard\
    \ let i = $0.offset else { return }\n            guard $0.value < sum else { return\
    \ }\n            sum += nums[i]\n        }\n        return sum\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwdfsufi6.swift:11:12: error: type '() -> Int' cannot conform to\
    \ 'Comparable'\n    return min {\n           ^\n/tmp/tmpwdfsufi6.swift:11:12:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n    return min {\n           ^\n/tmp/tmpwdfsufi6.swift:11:12: note:\
    \ required by global function 'min' where 'T' = '() -> Int'\n    return min {\n\
    \           ^\n/tmp/tmpwdfsufi6.swift:26:6: error: missing argument for parameter\
    \ #2 in call\n    }\n     ^\n      <#() -> Int#>\nSwift.min:1:24: note: 'min'\
    \ declared here\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T :\
    \ Comparable\n                       ^\n/tmp/tmpwdfsufi6.swift:11:12: error: function\
    \ produces expected type 'Int'; did you mean to call it with '()'?\n    return\
    \ min {\n           ^~~~~\n/tmp/tmpwdfsufi6.swift:15:10: error: missing argument\
    \ for parameter #2 in call\n        }\n         ^\n          <#() -> _#>\nSwift.min:1:24:\
    \ note: 'min' declared here\n@inlinable public func min<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmpwdfsufi6.swift:13:21:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \            if nums.first < low { return low }\n                    ^\n/tmp/tmpwdfsufi6.swift:13:21:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            if nums.first < low { return low }\n                    ^\n\
    \                          ?? <#default value#>\n/tmp/tmpwdfsufi6.swift:13:21:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            if nums.first < low { return low }\n                    ^\n\
    \                         !\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n\tguard nums.count > 0 else {\n\t\treturn 0\n\t}\n\tvar minSoFar:\
    \ Int = 0\n\tfor i in 0..<nums.count {\n\t\tlet currentSum = nums[i]\n\t\tvar\
    \ j = 0\n\t\tfor k in i..<nums.count {\n\t\t\tcurrentSum += nums[k]\n\t\t\tif\
    \ currentSum < minSoFar {\n\t\t\t\tminSoFar = currentSum\n\t\t\t}\n\t\t\tj +=\
    \ 1\n\t\t}\n\t}\n\treturn minSoFar\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpjopsfvfh.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'currentSum' is a 'let' constant\n                        currentSum\
    \ += nums[k]\n                        ~~~~~~~~~~ ^\n/tmp/tmpjopsfvfh.swift:15:3:\
    \ note: change 'let' to 'var' to make it mutable\n                let currentSum\
    \ = nums[i]\n                ^~~\n                var\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var result: Int = 0\n\n    for n in nums {\n        if\
    \ n > result {\n            result = n\n        }\n    }\n\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpt5vppgv4/tmpt5vppgv4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab15321bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab152f12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab152f12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab152f117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5vppgv4                        0x0000559ded35948a <unavailable> + 5258

    5    libc.so.6                          0x00002ab153407460 __libc_start_main +
    245

    6    tmpt5vppgv4                        0x0000559ded3590d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    return min(nums.filter { $0 > 0 }).reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp4uaydj91.swift:10:38: error: missing argument for parameter #2\
    \ in call\n    return min(nums.filter { $0 > 0 }).reduce(0, combine: +)\n    \
    \                                 ^\n                                     , <#[Int]#>\n\
    Swift.min:1:24: note: 'min' declared here\n@inlinable public func min<T>(_ x:\
    \ T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp4uaydj91.swift:10:12:\
    \ error: global function 'min' requires that '[Int]' conform to 'Comparable'\n\
    \    return min(nums.filter { $0 > 0 }).reduce(0, combine: +)\n           ^\n\
    Swift.min:1:24: note: where 'T' = '[Int]'\n@inlinable public func min<T>(_ x:\
    \ T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp4uaydj91.swift:10:46:\
    \ error: extraneous argument label 'combine:' in call\n    return min(nums.filter\
    \ { $0 > 0 }).reduce(0, combine: +)\n                                        \
    \     ^   ~~~~~~~~~\n                                                 \n"
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  var sum = 0\n  \n  for num in nums {\n    sum += num\n  }\n\
    \n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp8ko4t_6f/tmp8ko4t_6f.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33a38a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33a359db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33a359d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33a359c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ko4t_6f                        0x000055e9daa1b48a <unavailable> + 5258

    5    libc.so.6                          0x00002b33a3a92460 __libc_start_main +
    245

    6    tmp8ko4t_6f                        0x000055e9daa1b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count != 0 else {\n        return 0\n    }\n\
    \    var minimumSum = nums[0]\n    var index = 0\n    while index < nums.count\
    \ {\n        minimumSum = min(minimumSum + nums[index], nums[index + 1])\n   \
    \     index += 1\n    }\n    return minimumSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b23b065cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23b0353561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b23b0353286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b23b035313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b23b0352bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b23b0152e83 <unavailable> + 188035

    6    tmppgzksm_9                        0x00005636d73fcee6 <unavailable> + 7910

    7    tmppgzksm_9                        0x00005636d73fc3dc <unavailable> + 5084

    8    libc.so.6                          0x00002b23b0848460 __libc_start_main +
    245

    9    tmppgzksm_9                        0x00005636d73fc0a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else { return Int.min }\n    \n   \
    \ var min = Int.min\n    var minArray: Array<Int> = nums\n    \n    for i in 0..<min(nums.count,\
    \ minArray.count) {\n        var sum = minArray[i] + minArray[min(i, minArray.count\
    \ - 1)]\n        \n        min = min(min, sum)\n        minArray.remove(at: i)\n\
    \        \n        if i == minArray.count - 1 {\n            minArray.append(0)\n\
    \        }\n    }\n    \n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp_4o4i7a7.swift:15:18: error: cannot call value of non-function\
    \ type 'Int'\n    for i in 0..<min(nums.count, minArray.count) {\n           \
    \      ^\n/tmp/tmp_4o4i7a7.swift:16:42: error: cannot call value of non-function\
    \ type 'Int'\n        var sum = minArray[i] + minArray[min(i, minArray.count -\
    \ 1)]\n                                         ^\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    precondition(nums.count > 0, \"nums must have at least\
    \ 1 element\")\n    let numsLength = nums.count\n    if numsLength == 1 {\n  \
    \      return nums[0]\n    }\n    var min = nums[0]\n    for index in 1..<numsLength\
    \ {\n        for value in 1..<numsLength {\n            if value < index {\n \
    \               continue\n            }\n            min = min(value, min + nums[index\
    \ - 1])\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp2ukh_2mo.swift:21:19: error: cannot call value of non-function\
    \ type 'Int'\n            min = min(value, min + nums[index - 1])\n          \
    \        ^\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let sum = nums.reduce(0, combine: { $0 + $1 })\n    guard\
    \ sum != 0 else {\n        return 0\n    }\n    let minSubArray = nums.filter{$0\
    \ >= sum}.min()\n    return sum - minSubArray!\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp2mwjj0jf.swift:10:26: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = nums.reduce(0, combine: { $0 + $1 })\n              \
    \           ^   ~~~~~~~~~\n                             \n"
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  if nums.isEmpty { return 0 }\n  let leftSum = minSubArraySum(nums.prefix(2))\n\
    \  let rightSum = minSubArraySum(nums.suffix(2))\n  return min(leftSum, rightSum)\
    \ + min(nums[0], nums[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp_lwklc78.swift:11:32: error: missing argument label 'nums:' in\
    \ call\n  let leftSum = minSubArraySum(nums.prefix(2))\n                     \
    \          ^\n                               nums: \n/tmp/tmp_lwklc78.swift:12:33:\
    \ error: missing argument label 'nums:' in call\n  let rightSum = minSubArraySum(nums.suffix(2))\n\
    \                                ^\n                                nums: \n"
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for i in 1..<nums.count {\n \
    \       if nums[i-1] > nums[i] {\n            minSum = max(nums[i-1], minSum)\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmptqxo_u_d/tmptqxo_u_d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad69cd2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad699c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad699c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad699c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqxo_u_d                        0x000055bb6c74c5ea <unavailable> + 5610

    5    libc.so.6                          0x00002aad69ebe460 __libc_start_main +
    245

    6    tmptqxo_u_d                        0x000055bb6c74c239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = -Int.max\n\n    for i in 0 ..< nums.count\
    \ {\n        let sum = nums.reduce(0) { (sum, cur) -> Int in\n            return\
    \ sum + cur\n        }\n\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n    }\n\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbtzjwent/tmpbtzjwent.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d501a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d4fe97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d4fe97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d4fe967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtzjwent                        0x0000555cdd64b57a <unavailable> + 5498

    5    libc.so.6                          0x00002b2d5038c460 __libc_start_main +
    245

    6    tmpbtzjwent                        0x0000555cdd64b1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty {\n        return 0\n    }\n\n    let minSum\
    \ = nums[0]\n    var sum = 0\n\n    for x in 1..<nums.count {\n        if nums[x]\
    \ == nums[x-1] {\n            sum += x\n        } else {\n            sum = sum\
    \ + minSum\n        }\n    }\n\n    return sum + minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphxc6ixr3/tmphxc6ixr3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8eb1bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8eaeb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8eaeb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8eaeb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphxc6ixr3                        0x00005621376985ea <unavailable> + 5610

    5    libc.so.6                          0x00002ad8eb3aa460 __libc_start_main +
    245

    6    tmphxc6ixr3                        0x0000562137698239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    var sum = nums[0]\n    for n in\
    \ nums {\n        if n >= min {\n            sum += n\n        } else {\n    \
    \        min = n\n            sum = n\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpzo23h2xx/tmpzo23h2xx.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62b5410c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62b5107b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62b5107988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62b51067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzo23h2xx                        0x0000557e15b5f4da <unavailable> + 5338

    5    libc.so.6                          0x00002b62b55fc460 __libc_start_main +
    245

    6    tmpzo23h2xx                        0x0000557e15b5f129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let low = Int64(nums.min())\n    let high = Int64(nums.max)\n\
    \n    var sum = low\n\n    for num in nums where num < low || num > high {\n \
    \       let mid = low + high\n        sum = mid\n        if num < mid {\n    \
    \        low = mid\n        } else {\n            high = mid\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpndg_s2au.swift:10:26: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    let low = Int64(nums.min())\n   \
    \                      ^\n/tmp/tmpndg_s2au.swift:10:26: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n    let low = Int64(nums.min())\n\
    \                         ^\n                               ?? <#default value#>\n\
    /tmp/tmpndg_s2au.swift:10:26: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    let low = Int64(nums.min())\n    \
    \                     ^\n                              !\n/tmp/tmpndg_s2au.swift:11:16:\
    \ error: no exact matches in call to initializer \n    let high = Int64(nums.max)\n\
    \               ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that\
    \ '((Int, Int) throws -> Bool) throws -> Int?' conform to 'BinaryFloatingPoint'\
    \ (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public\
    \ init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\n\
    Swift.SignedInteger:2:23: note: candidate requires that '((Int, Int) throws ->\
    \ Bool) throws -> Int?' conform to 'BinaryInteger' (requirement specified as 'T'\
    \ : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n\
    \                      ^\nSwift.FixedWidthInteger:2:23: note: candidate requires\
    \ that '((Int, Int) throws -> Bool) throws -> Int?' conform to 'StringProtocol'\
    \ (requirement specified as 'S' : 'StringProtocol')\n    @inlinable public init?<S>(_\
    \ text: S, radix: Int = 10) where S : StringProtocol\n                      ^\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for i in 1 ..< nums.count {\n\
    \        minSum = minSum + nums[i]\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpae9qzaf_/tmpae9qzaf_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57df835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57df52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57df52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57df52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpae9qzaf_                        0x000055bca242c55a <unavailable> + 5466

    5    libc.so.6                          0x00002b57dfa21460 __libc_start_main +
    245

    6    tmpae9qzaf_                        0x000055bca242c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var sum = nums[0]\n\
    \    for element in nums {\n        sum += element\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpppcpxi4t/tmpppcpxi4t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba426e47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba426b3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba426b3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba426b3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpppcpxi4t                        0x0000564175c3653a <unavailable> + 5434

    5    libc.so.6                          0x00002ba427033460 __libc_start_main +
    245

    6    tmpppcpxi4t                        0x0000564175c36189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let numsLength  = nums.count\n    var sumOfMins = nums[0]\n\
    \    for i in 0..<(numsLength-1) {\n        if sumOfMins > nums[i] {\n       \
    \     sumOfMins = nums[i]\n        }\n    }\n    return sumOfMins\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmptc1b1myn/tmptc1b1myn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36d76bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36d73b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36d73b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36d73b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptc1b1myn                        0x0000564e57af361f <unavailable> + 5663

    5    libc.so.6                          0x00002b36d78a6460 __libc_start_main +
    245

    6    tmptc1b1myn                        0x0000564e57af31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    \n    var minSum = nums[0]\n    for n in 1..<nums.count\
    \ {\n        let s = minSum + nums[n]\n        minSum = s\n    }\n    return minSum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbphtgote/tmpbphtgote.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfbe73ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfbe435b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfbe435988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfbe4347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbphtgote                        0x0000557e6702f55a <unavailable> + 5466

    5    libc.so.6                          0x00002acfbe92a460 __libc_start_main +
    245

    6    tmpbphtgote                        0x0000557e6702f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = INFINITY\n    var max = 0\n    for num in nums\
    \ {\n        if num < min {\n            min = num\n        } else {\n       \
    \     max += num\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpva45y4xz.swift:10:15: error: cannot find 'INFINITY' in scope\n\
    \    var min = INFINITY\n              ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // We have a simple solution with O(n) time and O(n) space,\n\
    \    // but a better solution with better space is possible.\n\n    // Create\
    \ an array of size n and initialize to infinity.\n    // We could create a vector\
    \ of size n and initialize to infinity as well\n    // but this approach is easier\
    \ to understand.\n    var minSum = Int.max\n    var minSumIndex = 0\n    for i\
    \ in 0..<nums.count {\n        minSum = min (minSum, nums[i] + minSum)\n     \
    \   if minSum == nums[i] {\n            minSumIndex = i\n        }\n    }\n  \
    \  return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    return minSubArraySumImpl(nums, 0, nums.count - 1, 0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpw04aq7r0.swift:10:12: error: cannot find 'minSubArraySumImpl' in\
    \ scope\n    return minSubArraySumImpl(nums, 0, nums.count - 1, 0)\n         \
    \  ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n\n    var min =\
    \ nums[0]\n    for i in 1..<nums.count {\n        min = min(nums[i], min)\n  \
    \  }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpjkxgted3.swift:14:15: error: cannot call value of non-function\
    \ type 'Int'\n        min = min(nums[i], min)\n              ^\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty {\n        return Int.max\n    }\n    \n\
    \    var min = Int.max\n    var minSubArray = [0]\n    var minSubArraySum = 0\n\
    \    \n    for i in 0 ..< nums.count {\n        let sum = nums[i] + minSubArraySum\n\
    \        \n        if sum < min {\n            min = sum\n            minSubArray\
    \ = [i]\n            minSubArraySum = sum\n        } else if sum == min {\n  \
    \          minSubArray.append(i)\n            minSubArraySum += sum\n        }\n\
    \    }\n    \n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp_6hp837r/tmp_6hp837r.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba392f97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba392c8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba392c8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba392c8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_6hp837r                        0x000055b04b91263a <unavailable> + 5690

    5    libc.so.6                          0x00002ba393183460 __libc_start_main +
    245

    6    tmp_6hp837r                        0x000055b04b912289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  var minSum: Int = 0\n  for num in nums {\n    if num >= minSum\
    \ {\n      minSum = num\n    } else {\n      minSum = minSum + num\n    }\n  }\n\
    \  return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxk2cfe3/tmpyxk2cfe3.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41ca105c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41c9dfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41c9dfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41c9dfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxk2cfe3                        0x0000559076ae548a <unavailable> + 5258

    5    libc.so.6                          0x00002b41ca2f1460 __libc_start_main +
    245

    6    tmpyxk2cfe3                        0x0000559076ae50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // Write your code here\n    var sum = 0\n    for v in\
    \ nums {\n        sum = sum + v\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmprl_d94tw/tmprl_d94tw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b2ef4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b2ec46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b2ec46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b2ec457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprl_d94tw                        0x000055c30518e48a <unavailable> + 5258

    5    libc.so.6                          0x00002b6b2f13b460 __libc_start_main +
    245

    6    tmprl_d94tw                        0x000055c30518e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var min = nums[0]\n    for i in nums.indices\
    \ {\n        if i > 0 && nums[i] < nums[i-1] {\n            sum += nums[i]\n \
    \       } else {\n            if sum > min {\n                min = sum\n    \
    \        }\n            sum = 0\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbpma7sfo/tmpbpma7sfo.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20df4d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20df1d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20df1d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20df1cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbpma7sfo                        0x0000558ba958b4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b20df6c5460 __libc_start_main +
    245

    6    tmpbpma7sfo                        0x0000558ba958b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  if nums.isEmpty() {\n    return 0\n  }\n  guard nums.isEmpty\
    \ == false else {\n    return -1\n  }\n  guard nums.isEmpty == true else {\n \
    \   return -2\n  }\n  var minSoFar = nums[0]\n  for i in 1..<nums.count {\n  \
    \  let sum = nums[i] + nums[i - 1]\n    if sum < minSoFar {\n      minSoFar =\
    \ sum\n    }\n  }\n  return minSoFar\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp9ub6zahn.swift:10:11: error: cannot call value of non-function\
    \ type 'Bool'\n  if nums.isEmpty() {\n          ^      ~~\n                 \n"
  stdout: ''
  timestamp: 1660014292
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Double.infinity\n    for num in nums {\n    \
    \    var subArraySum = Double.infinity\n        for (i, element) in stride(from:\
    \ nums.startIndex, to: nums.endIndex, by: 1).enumerate() {\n            if nums[element]\
    \ > num {\n                subArraySum -= num\n            } else {\n        \
    \        subArraySum += num\n            }\n        }\n        min = min(min,\
    \ subArraySum)\n    }\n    return Int(min)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpq5xzsve5.swift:13:85: error: value of type 'StrideTo<Int>' has\
    \ no member 'enumerate'\n        for (i, element) in stride(from: nums.startIndex,\
    \ to: nums.endIndex, by: 1).enumerate() {\n                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n/tmp/tmpq5xzsve5.swift:20:15: error: cannot call value of non-function\
    \ type 'Double'\n        min = min(min, subArraySum)\n              ^\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int()\n    for num in nums {\n        if min\
    \ > num {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpst7uriql/tmpst7uriql.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c3372bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33422b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33422988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c334217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpst7uriql                        0x0000559b34c7c48a <unavailable> + 5258

    5    libc.so.6                          0x00002b2c33917460 __libc_start_main +
    245

    6    tmpst7uriql                        0x0000559b34c7c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    return subArraySum(nums, nums.count) - 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpyai5xedx.swift:10:12: error: cannot find 'subArraySum' in scope\n\
    \    return subArraySum(nums, nums.count) - 1\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // If there is only one element\n    if nums.count == 1\
    \ {\n        return nums[0]\n    }\n\n    // Initialize the min sum\n    var minSum\
    \ = nums[0]\n\n    // Start with the second element and subtract until there's\
    \ no more second element\n    for index in 1..<nums.count {\n        if nums[index-1]\
    \ > minSum {\n            minSum -= nums[index-1]\n        }\n    }\n\n    //\
    \ Return the min sum\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpo3cmhvhy/tmpo3cmhvhy.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a92f77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a92c6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a92c6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a92c6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3cmhvhy                        0x000055b0abf1d55a <unavailable> + 5466

    5    libc.so.6                          0x00002b9a93163460 __libc_start_main +
    245

    6    tmpo3cmhvhy                        0x000055b0abf1d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // sort nums\n    let sortedNums = nums.sort()\n    var\
    \ minSum = sortedNums[0]\n    for num in sortedNums {\n        if num < 0 {\n\
    \            minSum -= num\n        } else {\n            minSum -= minSum + num\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpxzhu23ez.swift:11:27: error: cannot use mutating member on immutable\
    \ value: 'nums' is a 'let' constant\n    let sortedNums = nums.sort()\n      \
    \               ~~~~ ^\n"
  stdout: ''
  timestamp: 1660014292
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // base case\n    if nums.isEmpty {\n        return 0\n\
    \    }\n\n    var minSum = 0\n\n    for i : Int in 1...nums.count {\n        var\
    \ maxSum = nums[0]\n        var sum = 0\n\n        for j : Int in 1...i {\n  \
    \          sum += nums[j]\n            maxSum = max(sum, maxSum)\n        }\n\n\
    \        if maxSum > minSum {\n            minSum = maxSum\n        }\n    }\n\
    \    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af36642ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af366125561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af366125286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af36612513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af366124bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af365f24e83 <unavailable> + 188035

    6    tmpoqqptrza                        0x0000556b8b47e348 <unavailable> + 9032

    7    tmpoqqptrza                        0x0000556b8b47d5fc <unavailable> + 5628

    8    libc.so.6                          0x00002af36661a460 __libc_start_main +
    245

    9    tmpoqqptrza                        0x0000556b8b47d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else {\n        return 0\n    }\n\n\
    \    let leftSum = nums[0]\n    var rightSum = nums[0]\n    for _ in 1..<nums.count\
    \ {\n        if leftSum > rightSum {\n            rightSum += nums[_]\n      \
    \  } else {\n            leftSum += nums[_]\n        }\n    }\n\n    if leftSum\
    \ == rightSum {\n        return 0\n    }\n    return leftSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp2usg1ajx.swift:18:30: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n            rightSum += nums[_]\n       \
    \                      ^\n/tmp/tmp2usg1ajx.swift:20:29: error: '_' can only appear\
    \ in a pattern or on the left side of an assignment\n            leftSum += nums[_]\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var result: Int = 0\n    var next: Int = 0\n    for a in\
    \ nums {\n        for b in nums {\n            if a == b {\n                continue\n\
    \            }\n            next = a + b\n            if next < result {\n   \
    \             result = next\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp1c51a_0p/tmp1c51a_0p.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af702821c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af702518b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af702518988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7025177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1c51a_0p                        0x0000558d9023248a <unavailable> + 5258

    5    libc.so.6                          0x00002af702a0d460 __libc_start_main +
    245

    6    tmp1c51a_0p                        0x0000558d902320d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum: Int = 0\n    for var i = 0; i < nums.count; i++\
    \ {\n        sum += nums[i]\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpxjgsjtr8.swift:11:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < nums.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minium = 0\n    var result = 0\n    for x in nums {\n\
    \        let y = x + minium\n        if y + result > minium {\n            result\
    \ = y + minium\n        }\n        minium = y\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp9l9_mfbm/tmp9l9_mfbm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ce3b77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ce386eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ce386e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ce386d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9l9_mfbm                        0x000055db09bdf48a <unavailable> + 5258

    5    libc.so.6                          0x00002b1ce3d63460 __libc_start_main +
    245

    6    tmp9l9_mfbm                        0x000055db09bdf0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // Find start and end index\n    let start = nums.startIndex\n\
    \    let end = nums.endIndex\n    var minSum: Int = 0\n\n    // Iterate over each\
    \ subarray\n    for i in start...end {\n        // If current element is negative,\
    \ increment the sum\n        if nums[i] < 0 {\n            minSum = nums[i] -\
    \ minSum\n        }\n        // Otherwise, the sum is 0\n        else {\n    \
    \        minSum = 0\n        }\n\n        // If sum is negative, we need to update\
    \ the minSum\n        if minSum < 0 {\n            minSum = nums[i]\n        }\n\
    \    }\n\n    // The minSum is now the last element of the array.\n    return\
    \ minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73c954c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73c64b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba73c64b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba73c64b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba73c64abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba73c44ae83 <unavailable> + 188035

    6    tmp0nmikrz4                        0x00005598c60710f4 <unavailable> + 8436

    7    tmp0nmikrz4                        0x00005598c607052c <unavailable> + 5420

    8    libc.so.6                          0x00002ba73cb40460 __libc_start_main +
    245

    9    tmp0nmikrz4                        0x00005598c60701f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    var index = [0]\n    for index\
    \ in 1..<nums.count {\n        minSum = nums[index] + minSum\n    }\n    return\
    \ minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpokbc8hpk/tmpokbc8hpk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96af06cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96aed63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96aed63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96aed627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpokbc8hpk                        0x0000563fe7dfe55a <unavailable> + 5466

    5    libc.so.6                          0x00002b96af258460 __libc_start_main +
    245

    6    tmpokbc8hpk                        0x0000563fe7dfe1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for _ in 1...nums.count {\n \
    \       minSum = minSum - nums[nums.index(minSum)] + nums[0]\n    }\n    return\
    \ minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpryf9u_k8.swift:12:37: error: no exact matches in call to instance\
    \ method 'index'\n        minSum = minSum - nums[nums.index(minSum)] + nums[0]\n\
    \                                    ^\nSwift.Array:7:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(after:)')\n    @inlinable public func\
    \ index(after i: Int) -> Int\n                           ^\nSwift.Array:9:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(before:)')\n\
    \    @inlinable public func index(before i: Int) -> Int\n                    \
    \       ^\nSwift.RandomAccessCollection:3:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(after:)')\n    @inlinable public func index(after\
    \ i: Self.Index) -> Self.Index\n                           ^\nSwift.RandomAccessCollection:4:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(before:)')\n\
    \    @inlinable public func index(before i: Self.Index) -> Self.Index\n      \
    \                     ^\n"
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let len = nums.count\n    var min = nums[0]\n    for i\
    \ in 0..<len {\n        for j in 0..<len {\n            min = min(i, j)\n    \
    \    }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp31z6x_t0.swift:14:19: error: cannot call value of non-function\
    \ type 'Int'\n            min = min(i, j)\n                  ^\n"
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for i in 1..<nums.count {\n \
    \       minSum = minSum + nums[i]\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpf81xijee/tmpf81xijee.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b7615bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b75e52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b75e52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b75e517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf81xijee                        0x000055865546255a <unavailable> + 5466

    5    libc.so.6                          0x00002b4b76347460 __libc_start_main +
    245

    6    tmpf81xijee                        0x00005586554621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    func recursiveMinSum(\n        sum: Int, subArray: [Int],\
    \ startIndex: Int) -> Int {\n            if startIndex == subArray.count {\n \
    \               return sum\n            }\n            let minimum = subArray[startIndex]\n\
    \            let rest = subArray[startIndex + 1]\n            return recursiveMinSum(minimum\
    \ + sum, rest, startIndex + 1)\n        }\n    return recursiveMinSum(0, nums,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp1a51cac3.swift:17:35: error: missing argument labels 'sum:subArray:startIndex:'\
    \ in call\n            return recursiveMinSum(minimum + sum, rest, startIndex\
    \ + 1)\n                                  ^\n                                \
    \   sum:           subArray:  startIndex: \n/tmp/tmp1a51cac3.swift:17:51: error:\
    \ cannot convert value of type 'Int' to expected argument type '[Int]'\n     \
    \       return recursiveMinSum(minimum + sum, rest, startIndex + 1)\n        \
    \                                          ^\n/tmp/tmp1a51cac3.swift:19:27: error:\
    \ missing argument labels 'sum:subArray:startIndex:' in call\n    return recursiveMinSum(0,\
    \ nums, 0)\n                          ^\n                           sum:  subArray:\
    \  startIndex: \n"
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let result = nums.reduce(0) { (result, num) -> Int in\n\
    \        let currentSum = result + num\n        if currentSum < result {\n   \
    \         result = currentSum\n        }\n        return result\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6o2ddujo.swift:13:13: error: cannot assign to value: 'result' is\
    \ a 'let' constant\n            result = currentSum\n            ^~~~~~\n"
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else {\n        return 0\n    }\n\
    \    let sum = nums.reduce(0) {\n        guard $1 < $0 else {\n            $0\n\
    \        }\n        else { $1 + $0 }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmppqaus9r4.swift:17:9: error: expected expression\n        else {\
    \ $1 + $0 }\n        ^\n/tmp/tmppqaus9r4.swift:15:13: warning: expression of type\
    \ 'Int' is unused\n            $0\n            ^~\n"
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty {\n        return 0\n    }\n    var sum\
    \ = 0\n    var min = nums[0]\n    for i in 1..<nums.count {\n        if sum >\
    \ sum + nums[i] {\n            sum = sum + nums[i]\n            min = nums[i]\n\
    \        } else if sum < sum + nums[i] {\n            sum = sum + nums[i]\n  \
    \          min = nums[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp2wkv6oql/tmp2wkv6oql.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b140defdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b140dbf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b140dbf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b140dbf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2wkv6oql                        0x0000563afee245ea <unavailable> + 5610

    5    libc.so.6                          0x00002b140e0e9460 __libc_start_main +
    245

    6    tmp2wkv6oql                        0x0000563afee24239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty() {\n        return 0\n    }\n\n    var\
    \ sum = nums.reduce(0, combine: +)\n    var leftSum = 0\n    for v in nums {\n\
    \        leftSum += v\n        sum += leftSum\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpd3ycc9l0.swift:10:13: error: cannot call value of non-function\
    \ type 'Bool'\n    if nums.isEmpty() {\n            ^      ~~\n              \
    \     \n/tmp/tmpd3ycc9l0.swift:14:26: error: extraneous argument label 'combine:'\
    \ in call\n    var sum = nums.reduce(0, combine: +)\n                        \
    \ ^   ~~~~~~~~~\n                             \n"
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // Write your code here.\n    let sum = 0\n    for num\
    \ in nums {\n        sum += num\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpi2z9pbzo.swift:13:13: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n        sum += num\n        ~~~ ^\n/tmp/tmpi2z9pbzo.swift:11:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let sum = 0\n    ^~~\n \
    \   var\n"
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else {\n        return 0\n    }\n\
    \    if nums.count == 1 {\n        return nums[0]\n    }\n    var max = nums[0]\n\
    \    for num in nums {\n        if max < num {\n            max = num\n      \
    \  }\n    }\n    let min = max\n    var sum = Int()\n    for num in nums {\n \
    \       if num < min {\n            sum += max\n            min = num\n      \
    \  }\n        else {\n            sum += num\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp055395xi.swift:27:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = num\n            ^~~\n/tmp/tmp055395xi.swift:22:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = max\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.isEmpty == false else { return Int.max }\n \
    \   guard let min = nums.first else { return Int.max }\n    return nums.reduce(min,\
    \ { min, num in min + num })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpy9wiwu65/tmpy9wiwu65.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94f7533c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94f722ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94f722a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94f72297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy9wiwu65                        0x0000555ca866048a <unavailable> + 5258

    5    libc.so.6                          0x00002b94f771f460 __libc_start_main +
    245

    6    tmpy9wiwu65                        0x0000555ca86600d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else {\n        return 0\n    }\n\
    \    guard nums.count == 1 || nums.count > 100 else {\n        return 0\n    }\n\
    \    guard let firstNum = nums.first else {\n        return 0\n    }\n    var\
    \ subSum = firstNum\n    for i in 1...nums.count {\n        if nums[i-1] > subSum\
    \ {\n            subSum = nums[i-1]\n        }\n    }\n    return subSum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcw0v5p98/tmpcw0v5p98.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4f2b2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4f2821b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4f2821988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4f28207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcw0v5p98                        0x00005571ec3785fa <unavailable> + 5626

    5    libc.so.6                          0x00002af4f2d16460 __libc_start_main +
    245

    6    tmpcw0v5p98                        0x00005571ec378249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for n in nums {\n        if n\
    \ == minSum {\n            continue\n        }\n        var subSum = minSum +\
    \ n\n        minSum = subSum\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpmch4uuc9/tmpmch4uuc9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10458f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10455ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10455eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10455ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmch4uuc9                        0x00005576f27ce4da <unavailable> + 5338

    5    libc.so.6                          0x00002b1045ae0460 __libc_start_main +
    245

    6    tmpmch4uuc9                        0x00005576f27ce129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  var min = Int.max\n  for num in nums {\n    min = min + num\n\
    \  }\n  return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else {\n        return 0\n    }\n \
    \   var minSum = nums[0]\n    for num in nums.dropFirst() {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpdhbowuka/tmpdhbowuka.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b05291c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b04f88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b04f88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b04f877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdhbowuka                        0x0000561600faf62a <unavailable> + 5674

    5    libc.so.6                          0x00002b8b0547d460 __libc_start_main +
    245

    6    tmpdhbowuka                        0x0000561600faf279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for i : Int in 1 ..< nums.count\
    \ {\n        minSum = i\n        for j : Int in 0 ..< i {\n            if (nums[j]\
    \ < minSum) {\n                minSum = nums[j]\n            }\n        }\n  \
    \  }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmptegx0fm9/tmptegx0fm9.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6825139c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6824e30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6824e30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6824e2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptegx0fm9                        0x000056490b23261f <unavailable> + 5663

    5    libc.so.6                          0x00002b6825325460 __libc_start_main +
    245

    6    tmptegx0fm9                        0x000056490b2321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty {\n        return 0\n    }\n    var sum\
    \ = nums[0]\n    for num in nums {\n        sum += num\n    }\n    if sum < 0\
    \ {\n        return sum\n    }\n    var minSum = sum\n    for num in nums {\n\
    \        sum /= num\n        if sum < 0 {\n            return sum\n        }\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n    }\n    return\
    \ minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuyf3se9g/tmpuyf3se9g.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00fa18ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f9e81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f9e81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f9e807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuyf3se9g                        0x0000555d5d2305ca <unavailable> + 5578

    5    libc.so.6                          0x00002b00fa376460 __libc_start_main +
    245

    6    tmpuyf3se9g                        0x0000555d5d230219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  guard !nums.isEmpty else { return 0 }\n  var sum = 0\n  var\
    \ n = nums.count\n  for number in nums {\n    sum += number\n    if sum < 0 {\n\
    \      sum = -sum\n      n -= 1\n    }\n  }\n  return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvmyi4jpe/tmpvmyi4jpe.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c66412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c66109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c66109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c661087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvmyi4jpe                        0x000055aa7e92453a <unavailable> + 5434

    5    libc.so.6                          0x00002b9c665fe460 __libc_start_main +
    245

    6    tmpvmyi4jpe                        0x000055aa7e924189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int64(Int.max)\n\n    for n in nums {\n     \
    \   let leftSum = 1 + n + (n - min) * Int64(nums.count - 1)\n        let rightSum\
    \ = 1 + n + n * Int64(nums.count)\n        if leftSum < min {\n            min\
    \ = leftSum\n        } else if rightSum < min {\n            min = rightSum\n\
    \        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpo4dcdz5n.swift:13:23: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        let leftSum = 1 + n + (n - min) * Int64(nums.count\
    \ - 1)\n                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo4dcdz5n.swift:14:36:\
    \ error: cannot convert value of type 'Int64' to expected argument type 'Int'\n\
    \        let rightSum = 1 + n + n * Int64(nums.count)\n                      \
    \             ^\n                                   Int(             )\n/tmp/tmpo4dcdz5n.swift:21:12:\
    \ error: cannot convert return expression of type 'Int64' to return type 'Int'\n\
    \    return min\n           ^~~\n           Int( )\n"
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  return minSubArraySumHelper(nums, 0, nums.count, 0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwoi4g2c5.swift:10:10: error: cannot find 'minSubArraySumHelper'\
    \ in scope\n  return minSubArraySumHelper(nums, 0, nums.count, 0)\n         ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  let min = nums[0]\n  var s = nums[0]\n  for n in nums {\n\
    \    s = s + n\n    if s < min {\n      min = s\n    }\n  }\n  return min\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp09m9ou1c.swift:15:7: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n      min = s\n      ^~~\n/tmp/tmp09m9ou1c.swift:10:3: note:\
    \ change 'let' to 'var' to make it mutable\n  let min = nums[0]\n  ^~~\n  var\n"
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minSum\
    \ = nums[0]\n    for i in 1..<nums.count {\n        if nums[i-1] > minSum {\n\
    \            minSum = nums[i-1]\n        }\n    }\n    return minSum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpso85o7ld/tmpso85o7ld.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad54cbcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad54c8c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad54c8c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad54c8c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpso85o7ld                        0x0000557cf943c55a <unavailable> + 5466

    5    libc.so.6                          0x00002ad54cdb6460 __libc_start_main +
    245

    6    tmpso85o7ld                        0x0000557cf943c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        if sum < min {\n            min = sum\n     \
    \   }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp8p9wvhni/tmp8p9wvhni.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9786b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9786861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9786861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97868607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8p9wvhni                        0x000055d8b67744da <unavailable> + 5338

    5    libc.so.6                          0x00002b9786d56460 __libc_start_main +
    245

    6    tmp8p9wvhni                        0x000055d8b6774129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty() {\n        return 0\n    }\n    \n  \
    \  var min = nums[0]\n    var sum = 0\n    \n    for i in 0 ..< nums.count {\n\
    \        sum += nums[i]\n        if sum < min {\n            min = sum\n     \
    \   }\n    }\n    \n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp8cfkhxg4.swift:10:13: error: cannot call value of non-function\
    \ type 'Bool'\n    if nums.isEmpty() {\n            ^      ~~\n              \
    \     \n"
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else {\n        return 0\n    }\n \
    \   var min = nums[0]\n    for n in nums {\n        guard n >= 0 else {\n    \
    \        return min // invalid case\n        }\n        if min > n {\n       \
    \     min = n\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpan9waaya/tmpan9waaya.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6cf4f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6cf1ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6cf1eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6cf1ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpan9waaya                        0x000055e38a4de5ef <unavailable> + 5615

    5    libc.so.6                          0x00002ba6cf6e0460 __libc_start_main +
    245

    6    tmpan9waaya                        0x000055e38a4de179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let subArrays = nums.reduce((results: [Int], num: Int)\
    \ -> [Int] {\n        var resultSubArrays = [Int]()\n        for subArraySubIndex\
    \ in 0..<nums.count {\n            let subArray = [nums[subArraySubIndex]]\n \
    \           resultSubArrays.append(subArray + results[subArraySubIndex])\n   \
    \     }\n        results.append(resultSubArrays)\n        return results\n   \
    \     }, [])\n\n    return subArrays.reduce(Int.min) {\n        min($0 + $1, $0\
    \ + $2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp8gciooxm.swift:10:69: error: expected ',' separator\n    let subArrays\
    \ = nums.reduce((results: [Int], num: Int) -> [Int] {\n                      \
    \                                              ^\n                           \
    \                                        ,\n/tmp/tmp8gciooxm.swift:14:47: error:\
    \ cannot find 'results' in scope\n            resultSubArrays.append(subArray\
    \ + results[subArraySubIndex])\n                                             \
    \ ^~~~~~~\n/tmp/tmp8gciooxm.swift:16:9: error: cannot find 'results' in scope\n\
    \        results.append(resultSubArrays)\n        ^~~~~~~\n/tmp/tmp8gciooxm.swift:17:16:\
    \ error: cannot find 'results' in scope\n        return results\n            \
    \   ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  let n = nums.count\n  if n < 1 {\n    return 0\n  }\n  let\
    \ dp = [Int](repeating: 0, count: n+1)\n  dp[0] = 1\n  for k in 1..<n {\n    dp[k]\
    \ = min(dp[k-1], dp[k] + nums[k])\n  }\n  return dp[n]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpp9ap_eyr.swift:15:5: error: cannot assign through subscript: 'dp'\
    \ is a 'let' constant\n  dp[0] = 1\n  ~~^\n/tmp/tmpp9ap_eyr.swift:14:3: note:\
    \ change 'let' to 'var' to make it mutable\n  let dp = [Int](repeating: 0, count:\
    \ n+1)\n  ^~~\n  var\n/tmp/tmpp9ap_eyr.swift:17:7: error: cannot assign through\
    \ subscript: 'dp' is a 'let' constant\n    dp[k] = min(dp[k-1], dp[k] + nums[k])\n\
    \    ~~^\n/tmp/tmpp9ap_eyr.swift:14:3: note: change 'let' to 'var' to make it\
    \ mutable\n  let dp = [Int](repeating: 0, count: n+1)\n  ^~~\n  var\n"
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty {\n        return Int(0)\n    }\n    var\
    \ min: Int = nums[0]\n    var minSum = nums[0]\n    var sum: Int = 0\n    for\
    \ idx in 1..<nums.count {\n        sum += nums[idx]\n        if sum < min {\n\
    \            min = sum\n            minSum = sum\n        } else if sum > minSum\
    \ {\n            minSum = sum\n        }\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfre3orop/tmpfre3orop.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b050191bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0501612b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0501612988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05016117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfre3orop                        0x00005588405145ea <unavailable> + 5610

    5    libc.so.6                          0x00002b0501b07460 __libc_start_main +
    245

    6    tmpfre3orop                        0x0000558840514239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for i in 1..<nums.count {\n    \
    \    min = min > nums[i] || min == 0 ? nums[i] : min\n    }\n    return min\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpe7n2c40i/tmpe7n2c40i.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02b0221c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02aff18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02aff18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02aff177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe7n2c40i                        0x000055bd959b461f <unavailable> + 5663

    5    libc.so.6                          0x00002b02b040d460 __libc_start_main +
    245

    6    tmpe7n2c40i                        0x000055bd959b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let sum = nums.reduce(0, combine: +)\n    let minSum =\
    \ sum\n    for i in 0..<nums.count {\n        sum += nums[i]\n        if sum <\
    \ minSum {\n            minSum = sum\n        }\n    }\n    return minSum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpq7xblt2w.swift:10:26: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = nums.reduce(0, combine: +)\n                        \
    \ ^   ~~~~~~~~~\n                             \n"
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty {\n        return 0\n    }\n    var minSum\
    \ = nums[0]\n    for i in 1..<nums.count {\n        minSum += nums[i]\n    }\n\
    \    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp74y426s0/tmp74y426s0.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b8fa3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b8f733b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b8f733988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b8f7327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp74y426s0                        0x000056488c6bf5ea <unavailable> + 5610

    5    libc.so.6                          0x00002b1b8fc28460 __libc_start_main +
    245

    6    tmp74y426s0                        0x000056488c6bf239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  if nums.isEmpty { return 0 }\n  let numsCount = nums.count\n\
    \  return nums.reduce(0, combine: minSubArraySum)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpp7hjpxjc.swift:12:15: error: no exact matches in call to instance\
    \ method 'reduce'\n  return nums.reduce(0, combine: minSubArraySum)\n        \
    \      ^\n/tmp/tmpp7hjpxjc.swift:12:15: note: candidate has partially matching\
    \ parameter list (Int, (Int, Int) throws -> Int)\n  return nums.reduce(0, combine:\
    \ minSubArraySum)\n              ^\n/tmp/tmpp7hjpxjc.swift:12:15: note: candidate\
    \ has partially matching parameter list (into: __owned Int, (inout Int, Int) throws\
    \ -> ())\n  return nums.reduce(0, combine: minSubArraySum)\n              ^\n"
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty { return 0 }\n    var minSum = nums[0]\n\
    \    for n in nums {\n        if minSum > n {\n            minSum = n - minSum\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpqrsowso2/tmpqrsowso2.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba276312c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba276009b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba276009988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2760087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqrsowso2                        0x000055889998552a <unavailable> + 5418

    5    libc.so.6                          0x00002ba2764fe460 __libc_start_main +
    245

    6    tmpqrsowso2                        0x0000558899985179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty {\n        return 0\n    }\n    var maxSum\
    \ = nums[0]\n    for num in nums {\n        if num > maxSum {\n            maxSum\
    \ = num\n        }\n    }\n    for num in nums {\n        if maxSum - num < 0\
    \ {\n            return maxSum\n        }\n        maxSum -= num\n    }\n    return\
    \ maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpxdkty32d/tmpxdkty32d.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01670f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0166df0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0166df0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0166def7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxdkty32d                        0x00005629a82ba52a <unavailable> + 5418

    5    libc.so.6                          0x00002b01672e5460 __libc_start_main +
    245

    6    tmpxdkty32d                        0x00005629a82ba179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for i in 1..<nums.count {\n    \
    \    if nums[i] < min {\n            min = nums[i]\n        }\n    }\n    return\
    \ min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvw2qhxdt/tmpvw2qhxdt.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf992c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf98fbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf98fbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf98fba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvw2qhxdt                        0x0000561b1406061f <unavailable> + 5663

    5    libc.so.6                          0x00002aaf994b0460 __libc_start_main +
    245

    6    tmpvw2qhxdt                        0x0000561b140601a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else {\n        return 0\n    }\n\n\
    \    let minSum = nums[0]\n    for i in 1..<nums.count {\n        minSum = minSum\
    \ + nums[i]\n    }\n\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp99gykmq4.swift:16:9: error: cannot assign to value: 'minSum' is\
    \ a 'let' constant\n        minSum = minSum + nums[i]\n        ^~~~~~\n/tmp/tmp99gykmq4.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let minSum = nums[0]\n \
    \   ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var ans = nums[0]\n    var minAns = nums[0]\n    for n\
    \ in nums {\n        if n < minAns {\n            minAns = n\n        }\n    \
    \    if n != 0 && minAns != 0 {\n            ans += minAns\n        }\n      \
    \  minAns = n\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcuvzfd1a/tmpcuvzfd1a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b185a547c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b185a23eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b185a23e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b185a23d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcuvzfd1a                        0x00005622be8d74da <unavailable> + 5338

    5    libc.so.6                          0x00002b185a733460 __libc_start_main +
    245

    6    tmpcuvzfd1a                        0x00005622be8d7129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    \n    if nums.isEmpty {\n        return math.infinity\n\
    \    }\n    \n    var sum: Int = 0\n    for i in 0..<nums.count {\n        sum\
    \ += nums[i]\n    }\n    \n    var minSum = sum\n    for i in 0..<nums.count {\n\
    \        sum -= nums[i]\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp9x_shv1m.swift:12:16: error: cannot find 'math' in scope\n    \
    \    return math.infinity\n               ^~~~\n"
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        if num > 0\
    \ {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp67f_jecf/tmp67f_jecf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9369db9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9369ab0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9369ab0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9369aaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp67f_jecf                        0x0000556d5961348a <unavailable> + 5258

    5    libc.so.6                          0x00002b9369fa5460 __libc_start_main +
    245

    6    tmp67f_jecf                        0x0000556d596130d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // base case\n    if nums.count == 0 {\n        return\
    \ nums[0]\n    }\n\n    // Find minimum sum between any two consecutive elements\
    \ in nums\n    // inclusive.\n    var sum: Int = nums[0]\n    for i in 1..<nums.count\
    \ {\n        sum = min(sum, nums[i])\n    }\n\n    // For each remaining element\
    \ in nums, sum up the minimum of those\n    // elements and the remaining sum.\n\
    \    var minSum = sum\n    for i in nums.count-1..<nums.count {\n        minSum\
    \ = min(minSum, nums[i]+sum)\n    }\n\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcvkx46sk/tmpcvkx46sk.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b342bf33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b342bc2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b342bc2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b342bc297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcvkx46sk                        0x000055b02bb15784 <unavailable> + 6020

    5    libc.so.6                          0x00002b342c11f460 __libc_start_main +
    245

    6    tmpcvkx46sk                        0x000055b02bb15239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.isEmpty else { return nums.reduce(0) - nums[0]\
    \ }\n    return min(nums.reduce(0), nums.reduce(0) {\n        guard $0 >= $1 else\
    \ {\n            return $0\n        }\n        return $1\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpa40dptt1.swift:10:51: error: missing argument for parameter #2\
    \ in call\n    guard nums.isEmpty else { return nums.reduce(0) - nums[0] }\n \
    \                                                 ^\n                        \
    \                          , <#(Int, Int) throws -> Int#>\nSwift.Sequence:2:28:\
    \ note: 'reduce' declared here\n    @inlinable public func reduce<Result>(_ initialResult:\
    \ Result, _ nextPartialResult: (_ partialResult: Result, Self.Element) throws\
    \ -> Result) rethrows -> Result\n                           ^\n/tmp/tmpa40dptt1.swift:11:29:\
    \ error: missing argument for parameter #2 in call\n    return min(nums.reduce(0),\
    \ nums.reduce(0) {\n                            ^\n                          \
    \  , <#(Int, Int) throws -> Int#>\nSwift.Sequence:2:28: note: 'reduce' declared\
    \ here\n    @inlinable public func reduce<Result>(_ initialResult: Result, _ nextPartialResult:\
    \ (_ partialResult: Result, Self.Element) throws -> Result) rethrows -> Result\n\
    \                           ^\n"
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    return nums.min().flatMap { sum in subArraySum(nums, nums.firstIndex(of:\
    \ $0), nums.firstIndex(of: $1) + 1, sum) }.reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7zpp9g9_.swift:10:78: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments; did you mean 'sum'?\n\
    \    return nums.min().flatMap { sum in subArraySum(nums, nums.firstIndex(of:\
    \ $0), nums.firstIndex(of: $1) + 1, sum) }.reduce(0, +)\n                    \
    \                                                         ^~\n               \
    \                                                              sum\n/tmp/tmp7zpp9g9_.swift:10:103:\
    \ error: anonymous closure arguments cannot be used inside a closure that has\
    \ explicit arguments\n    return nums.min().flatMap { sum in subArraySum(nums,\
    \ nums.firstIndex(of: $0), nums.firstIndex(of: $1) + 1, sum) }.reduce(0, +)\n\
    \                                                                            \
    \                          ^\n/tmp/tmp7zpp9g9_.swift:10:40: error: cannot find\
    \ 'subArraySum' in scope\n    return nums.min().flatMap { sum in subArraySum(nums,\
    \ nums.firstIndex(of: $0), nums.firstIndex(of: $1) + 1, sum) }.reduce(0, +)\n\
    \                                       ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014293
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let sum = nums.reduce(0, combine: +)\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpxtxx6_7a.swift:10:26: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = nums.reduce(0, combine: +)\n                        \
    \ ^   ~~~~~~~~~\n                             \n"
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for number in nums {\n        sum += number\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpczfynjiw/tmpczfynjiw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c634e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c631ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c631dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c631dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpczfynjiw                        0x0000563d0cc7048a <unavailable> + 5258

    5    libc.so.6                          0x00002b3c636d2460 __libc_start_main +
    245

    6    tmpczfynjiw                        0x0000563d0cc700d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014291
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  if nums.isEmpty {\n    return 0\n  }\n  var minSum = nums[0]\n\
    \  for num in nums[1..] {\n    minSum = min(minSum + num, num)\n  }\n  return\
    \ minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpprvxnyvq.swift:14:20: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n  for num in nums[1..] {\n                   ^~\n     \
    \              ...\n"
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.isEmpty { return 0 }\n    \n    var minSum: Int\
    \ = nums[0]\n    for i in 1..<nums.count {\n        minSum += nums[i]\n    }\n\
    \    \n    if minSum < 0 { return 0 }\n    \n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp9m4huxxl/tmp9m4huxxl.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac04cd14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac04ca0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac04ca0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac04ca0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9m4huxxl                        0x000055cf1637d5ea <unavailable> + 5610

    5    libc.so.6                          0x00002ac04cf00460 __libc_start_main +
    245

    6    tmp9m4huxxl                        0x000055cf1637d239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSoFar = nums[0]\n    for num in nums {\n       \
    \ var newMin = num\n        for (i, v) in nums.enumerated() {\n            if\
    \ i != i {\n                newMin += v\n            }\n        }\n        minSoFar\
    \ = min(minSoFar, newMin)\n    }\n    return minSoFar\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp61po30ml/tmp61po30ml.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32bb853c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32bb54ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32bb54a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32bb5497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61po30ml                        0x000055c4cb32984f <unavailable> + 6223

    5    libc.so.6                          0x00002b32bba3f460 __libc_start_main +
    245

    6    tmp61po30ml                        0x000055c4cb3293d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014293
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  if nums.isEmpty {\n    return 0\n  }\n  var min = nums[0]\n\
    \  for i in 1..<nums.count {\n    if min > nums[i] {\n      min = nums[i]\n  \
    \  }\n  }\n  return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpnwlat451/tmpnwlat451.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dc00a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dbfd98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dbfd98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dbfd977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnwlat451                        0x000055c67c6086af <unavailable> + 5807

    5    libc.so.6                          0x00002b2dc028d460 __libc_start_main +
    245

    6    tmpnwlat451                        0x000055c67c608239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014293
