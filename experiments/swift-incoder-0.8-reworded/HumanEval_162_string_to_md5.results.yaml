language: swift
name: HumanEval_162_string_to_md5
results:
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n\n \
    \   var md5: CInt = 0\n    var length: CInt = -1\n    var text: Unmanaged<AnyObject>?\n\
    \n    // use C API to compute the md5 hash\n    let status = Unmanaged.passUnretained(self).toOpaque().withMemoryRebound(to:\
    \ MD5Hash.self, capacity: 1) { (ptr: UnsafeRawPointer, size: Int) in\n       \
    \ length = ptr.assumingMemoryBound(to: CInt.self)\n        text = ptr.assumingMemoryBound(to:\
    \ Unmanaged<AnyObject>.self)\n    }\n\n    if status == noErr {\n        let buffer\
    \ = UnsafeMutablePointer<MD5Hash>.allocate(capacity: length)\n        defer {\n\
    \            buffer.deallocate()\n        }\n        defer {\n            MD5Hash.callStatic(\"\
    stringToMD5\", buffer, length, UnsafeMutablePointer<CChar>(text!), length).map(String.init)\n\
    \        }\n    }\n\n    return String(cString: buffer?.pointee.bytes.assumingMemoryBound(to:\
    \ CChar.self)!)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpem1s3cm1.swift:16:43: error: cannot find 'self' in scope; did you\
    \ mean to use it in a type or extension context?\n    let status = Unmanaged.passUnretained(self).toOpaque().withMemoryRebound(to:\
    \ MD5Hash.self, capacity: 1) { (ptr: UnsafeRawPointer, size: Int) in\n       \
    \                                   ^~~~\n/tmp/tmpem1s3cm1.swift:16:82: error:\
    \ cannot find 'MD5Hash' in scope\n    let status = Unmanaged.passUnretained(self).toOpaque().withMemoryRebound(to:\
    \ MD5Hash.self, capacity: 1) { (ptr: UnsafeRawPointer, size: Int) in\n       \
    \                                                                          ^~~~~~~\n\
    /tmp/tmpem1s3cm1.swift:16:49: error: generic parameter 'T' could not be inferred\n\
    \    let status = Unmanaged.passUnretained(self).toOpaque().withMemoryRebound(to:\
    \ MD5Hash.self, capacity: 1) { (ptr: UnsafeRawPointer, size: Int) in\n       \
    \                                         ^\nSwift.UnsafeMutableRawPointer:13:28:\
    \ note: in call to function 'withMemoryRebound(to:capacity:_:)'\n    @inlinable\
    \ public func withMemoryRebound<T, Result>(to type: T.Type, capacity count: Int,\
    \ _ body: (_ pointer: UnsafeMutablePointer<T>) throws -> Result) rethrows -> Result\n\
    \                           ^\n/tmp/tmpem1s3cm1.swift:16:111: error: contextual\
    \ closure type '(UnsafeMutablePointer<T>) throws -> ()' expects 1 argument, but\
    \ 2 were used in closure body\n    let status = Unmanaged.passUnretained(self).toOpaque().withMemoryRebound(to:\
    \ MD5Hash.self, capacity: 1) { (ptr: UnsafeRawPointer, size: Int) in\n       \
    \                                                                            \
    \                           ^\n/tmp/tmpem1s3cm1.swift:17:22: error: cannot assign\
    \ value of type 'UnsafePointer<CInt>' (aka 'UnsafePointer<Int32>') to type 'CInt'\
    \ (aka 'Int32')\n        length = ptr.assumingMemoryBound(to: CInt.self)\n   \
    \              ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpem1s3cm1.swift:21:18:\
    \ error: cannot find 'noErr' in scope\n    if status == noErr {\n            \
    \     ^~~~~\n/tmp/tmpem1s3cm1.swift:26:9: warning: 'defer' statement at"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let hasher = MD5.new()\n    hasher.update(text.data(using: String.Encoding.utf8))\n\
    \    guard let digest = hasher.finalize() else { return nil }\n    return String(digest.bytes).base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7am2c00k.swift:10:18: error: cannot find 'MD5' in scope\n    let\
    \ hasher = MD5.new()\n                 ^~~\n/tmp/tmp7am2c00k.swift:11:24: error:\
    \ value of type 'String' has no member 'data'\n    hasher.update(text.data(using:\
    \ String.Encoding.utf8))\n                  ~~~~ ^~~~\n/tmp/tmp7am2c00k.swift:11:43:\
    \ error: type 'String' has no member 'Encoding'\n    hasher.update(text.data(using:\
    \ String.Encoding.utf8))\n                                   ~~~~~~ ^~~~~~~~\n\
    /tmp/tmp7am2c00k.swift:13:33: error: reference to member 'base64EncodedString'\
    \ cannot be resolved without a contextual type\n    return String(digest.bytes).base64EncodedString()\n\
    \                                ^\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else { return nil }\n    return\
    \ md5(text.data(using: .utf8)!)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpsf_yyeev.swift:8:12: error: cannot find 'md5' in scope\n    return\
    \ md5(text.data(using: .utf8)!)\n           ^~~\n/tmp/tmpsf_yyeev.swift:8:21:\
    \ error: value of type 'String' has no member 'data'\n    return md5(text.data(using:\
    \ .utf8)!)\n               ~~~~ ^~~~\n/tmp/tmpsf_yyeev.swift:8:34: error: cannot\
    \ infer contextual base in reference to member 'utf8'\n    return md5(text.data(using:\
    \ .utf8)!)\n                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return text.md5()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9az1shcg.swift:7:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5()\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.characters.count < 1 {\n        return nil\n\
    \    }\n    let digest = MD5Hash(text.utf8)\n    return digest.digest.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpoaookflf.swift:7:13: error: 'characters' is unavailable: Please\
    \ use String directly\n    if text.characters.count < 1 {\n            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpoaookflf.swift:10:18:\
    \ error: cannot find 'MD5Hash' in scope\n    let digest = MD5Hash(text.utf8)\n\
    \                 ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ hasher := sha512.New()\n    hasher.Write([]byte(text))\n    return base64.StdEncoding.EncodeToString(hasher.Sum(nil))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp8736er7w.swift:10:11: error: consecutive statements on a line must\
    \ be separated by ';'\n    hasher := sha512.New()\n          ^\n          ;\n\
    /tmp/tmp8736er7w.swift:10:12: error: expected expression\n    hasher := sha512.New()\n\
    \           ^\n/tmp/tmp8736er7w.swift:10:5: error: cannot find 'hasher' in scope\n\
    \    hasher := sha512.New()\n    ^~~~~~\n/tmp/tmp8736er7w.swift:12:12: error:\
    \ cannot find 'base64' in scope\n    return base64.StdEncoding.EncodeToString(hasher.Sum(nil))\n\
    \           ^~~~~~\n/tmp/tmp8736er7w.swift:12:46: error: cannot find 'hasher'\
    \ in scope\n    return base64.StdEncoding.EncodeToString(hasher.Sum(nil))\n  \
    \                                           ^~~~~~\n/tmp/tmp8736er7w.swift:12:57:\
    \ error: 'nil' requires a contextual type\n    return base64.StdEncoding.EncodeToString(hasher.Sum(nil))\n\
    \                                                        ^\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.dataUsingEncoding(NSUTF8StringEncoding)\n    return NSMutableString(cString:\
    \ data!.base64EncodedStringWithOptions([]))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpki25brg7.swift:10:39: error: cannot find 'NSUTF8StringEncoding'\
    \ in scope\n    let data = text.dataUsingEncoding(NSUTF8StringEncoding)\n    \
    \                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpki25brg7.swift:10:21:\
    \ error: value of type 'String' has no member 'dataUsingEncoding'\n    let data\
    \ = text.dataUsingEncoding(NSUTF8StringEncoding)\n               ~~~~ ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpki25brg7.swift:11:12: error: cannot find 'NSMutableString' in scope\n\
    \    return NSMutableString(cString: data!.base64EncodedStringWithOptions([]))\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: .ascii)\n    let hash\
    \ = MD5(data)\n    return hash?.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp25_l3nsy.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .ascii)\n               ~~~~ ^~~~\n\
    /tmp/tmp25_l3nsy.swift:7:34: error: cannot infer contextual base in reference\
    \ to member 'ascii'\n    let data = text.data(using: .ascii)\n               \
    \                 ~^~~~~\n/tmp/tmp25_l3nsy.swift:8:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5(data)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    var md5 = MD5()\n    guard let data = text.data(using:\
    \ .utf8) else {\n        return nil\n    }\n    do {\n        try md5.update(data)\n\
    \    } catch {\n        return nil\n    }\n    return md5.digest().base64EncodedString(options:\
    \ [])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_to_md5(text: \"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmprjc16pe0.swift:7:15: error: cannot find 'MD5' in scope\n    var\
    \ md5 = MD5()\n              ^~~\n/tmp/tmprjc16pe0.swift:8:27: error: value of\
    \ type 'String' has no member 'data'\n    guard let data = text.data(using: .utf8)\
    \ else {\n                     ~~~~ ^~~~\n/tmp/tmprjc16pe0.swift:8:40: error:\
    \ cannot infer contextual base in reference to member 'utf8'\n    guard let data\
    \ = text.data(using: .utf8) else {\n                                      ~^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ return md5(string_to_bytes(text))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1u8g2v0j.swift:10:12: error: cannot find 'md5' in scope\n    return\
    \ md5(string_to_bytes(text))\n           ^~~\n/tmp/tmp1u8g2v0j.swift:10:16: error:\
    \ cannot find 'string_to_bytes' in scope\n    return md5(string_to_bytes(text))\n\
    \               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else { return nil }\n    var digest\
    \ = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5(text.utf8CString(),\
    \ CC_LONG(text.characters.count), &digest)\n    var digestString = \"\"\n    for\
    \ idx in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n        digestString = digestString\
    \ + String(format: \"%02x\", digest[idx])\n    }\n    return digestString\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpcoj4xtz_.swift:8:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcoj4xtz_.swift:9:5:\
    \ error: cannot find 'CC_MD5' in scope\n    CC_MD5(text.utf8CString(), CC_LONG(text.characters.count),\
    \ &digest)\n    ^~~~~~\n/tmp/tmpcoj4xtz_.swift:9:32: error: cannot find 'CC_LONG'\
    \ in scope\n    CC_MD5(text.utf8CString(), CC_LONG(text.characters.count), &digest)\n\
    \                               ^~~~~~~\n/tmp/tmpcoj4xtz_.swift:9:17: error: cannot\
    \ call value of non-function type 'ContiguousArray<CChar>' (aka 'ContiguousArray<Int8>')\n\
    \    CC_MD5(text.utf8CString(), CC_LONG(text.characters.count), &digest)\n   \
    \             ^          ~~\n                           \n/tmp/tmpcoj4xtz_.swift:11:24:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    for idx in 0..<Int(CC_MD5_DIGEST_LENGTH)\
    \ {\n                       ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text != \"\" else {\n        return nil\n  \
    \  }\n\n    var md5 = \"\"\n\n    for c in text {\n        guard let byte = UInt32(c),\
    \ byte <= 255 else {\n            return nil\n        }\n        md5 = md5 + \"\
    \\(byte)\"\n    }\n\n    var md5Bytes = Array<UInt8>(repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    guard let dataToHash = md5.data(using: String.Encoding.utf8) else {\n   \
    \     return nil\n    }\n    guard CC_MD5(dataToHash, CC_LONG(md5.utf8.count),\
    \ &md5Bytes) != CC_TRUE else {\n        return nil\n    }\n\n    return String(bytes:\
    \ md5Bytes, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1bp56e9d.swift:14:33: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        guard let byte = UInt32(c), byte\
    \ <= 255 else {\n                                ^\n/tmp/tmp1bp56e9d.swift:20:58:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var md5Bytes = Array<UInt8>(repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1bp56e9d.swift:21:32: error:\
    \ value of type 'String' has no member 'data'\n    guard let dataToHash = md5.data(using:\
    \ String.Encoding.utf8) else {\n                           ~~~ ^~~~\n/tmp/tmp1bp56e9d.swift:21:51:\
    \ error: type 'String' has no member 'Encoding'\n    guard let dataToHash = md5.data(using:\
    \ String.Encoding.utf8) else {\n                                           ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmp1bp56e9d.swift:24:11: error: cannot find 'CC_MD5' in scope\n\
    \    guard CC_MD5(dataToHash, CC_LONG(md5.utf8.count), &md5Bytes) != CC_TRUE else\
    \ {\n          ^~~~~~\n/tmp/tmp1bp56e9d.swift:24:30: error: cannot find 'CC_LONG'\
    \ in scope\n    guard CC_MD5(dataToHash, CC_LONG(md5.utf8.count), &md5Bytes) !=\
    \ CC_TRUE else {\n                             ^~~~~~~\n/tmp/tmp1bp56e9d.swift:24:69:\
    \ error: cannot find 'CC_TRUE' in scope\n    guard CC_MD5(dataToHash, CC_LONG(md5.utf8.count),\
    \ &md5Bytes) != CC_TRUE else {\n                                             \
    \                       ^~~~~~~\n/tmp/tmp1bp56e9d.swift:28:62: error: extra argument\
    \ 'encoding' in call\n    return String(bytes: md5Bytes, encoding: String.Encoding.utf8)\n\
    \                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp1bp56e9d.swift:28:53:\
    \ error: type 'String' has no member 'Encoding'\n    return String(bytes: md5Bytes,\
    \ encoding: String.Encoding.utf8)\n                                          \
    \   ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.characters.count > 0 else { return nil\
    \ }\n    guard let hashData = text.data(using: .utf8) else {\n        return nil\n\
    \    }\n    let result = md5(data: hashData, isHex: true)\n    return result.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpimx0qea5.swift:7:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    guard text.characters.count > 0 else { return nil }\n\
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpimx0qea5.swift:8:31: error: value of type 'String' has no member\
    \ 'data'\n    guard let hashData = text.data(using: .utf8) else {\n          \
    \               ~~~~ ^~~~\n/tmp/tmpimx0qea5.swift:8:44: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    guard let hashData = text.data(using:\
    \ .utf8) else {\n                                          ~^~~~\n/tmp/tmpimx0qea5.swift:11:18:\
    \ error: cannot find 'md5' in scope\n    let result = md5(data: hashData, isHex:\
    \ true)\n                 ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n\n \
    \   return MD5String(text: text)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp804zrhar.swift:11:12: error: cannot find 'MD5String' in scope\n\
    \    return MD5String(text: text)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    return String(data:\
    \ data, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2nf8bvpo.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp2nf8bvpo.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmp2nf8bvpo.swift:11:42: error:\
    \ extra argument 'encoding' in call\n    return String(data: data, encoding: .utf8)\n\
    \                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp2nf8bvpo.swift:11:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: data, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return string_to_sha1(text).map { $0.hex }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp_pj10b90.swift:7:12: error: cannot find 'string_to_sha1' in scope\n\
    \    return string_to_sha1(text).map { $0.hex }.joined()\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let md5 = text.md5()\n    return md5.base64EncodedString()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpi61sfxdh.swift:10:20: error: value of type 'String' has no member\
    \ 'md5'\n    let md5 = text.md5()\n              ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let md5 = MD5.new()\n    guard let utf8_text = text.data(using:\
    \ .utf8) else {\n        return nil\n    }\n    md5.update(bytes: utf8_text)\n\
    \    return String(data: md5.bytes, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpgwadcmb7.swift:7:15: error: cannot find 'MD5' in scope\n    let\
    \ md5 = MD5.new()\n              ^~~\n/tmp/tmpgwadcmb7.swift:8:32: error: value\
    \ of type 'String' has no member 'data'\n    guard let utf8_text = text.data(using:\
    \ .utf8) else {\n                          ~~~~ ^~~~\n/tmp/tmpgwadcmb7.swift:8:45:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    guard\
    \ let utf8_text = text.data(using: .utf8) else {\n                           \
    \                ~^~~~\n/tmp/tmpgwadcmb7.swift:12:47: error: extra argument 'encoding'\
    \ in call\n    return String(data: md5.bytes, encoding: .utf8)\n             \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpgwadcmb7.swift:12:47: error:\
    \ cannot infer contextual base in reference to member 'utf8'\n    return String(data:\
    \ md5.bytes, encoding: .utf8)\n                                             ~^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ return MD5String(text.utf8CString)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpj6ja7357.swift:10:12: error: cannot find 'MD5String' in scope\n\
    \    return MD5String(text.utf8CString)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let input = text.data(using: .utf8)\n    guard input?.count\
    \ > 0 else { return nil }\n    let hash = MD5.hash(input!)\n    return hash.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpwh7jzqsh.swift:7:22: error: value of type 'String' has no member\
    \ 'data'\n    let input = text.data(using: .utf8)\n                ~~~~ ^~~~\n\
    /tmp/tmpwh7jzqsh.swift:7:35: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let input = text.data(using: .utf8)\n                \
    \                 ~^~~~\n/tmp/tmpwh7jzqsh.swift:8:18: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n    guard input?.count\
    \ > 0 else { return nil }\n                 ^\n/tmp/tmpwh7jzqsh.swift:8:18: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \    guard input?.count > 0 else { return nil }\n                 ^\n        \
    \               ?? <#default value#>\n/tmp/tmpwh7jzqsh.swift:8:18: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    guard\
    \ input?.count > 0 else { return nil }\n                 ^\n          (      \
    \     )!\n/tmp/tmpwh7jzqsh.swift:9:16: error: cannot find 'MD5' in scope\n   \
    \ let hash = MD5.hash(input!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ return MD5Hash(text.utf8CString)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpq0n91ate.swift:10:12: error: cannot find 'MD5Hash' in scope\n \
    \   return MD5Hash(text.utf8CString)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let digest = md5()\n    if text == \"\" {\n      \
    \  return nil\n    }\n    digest.update(text.utf8CString)\n    return String(digest.digest())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpekuxow6k.swift:7:18: error: cannot find 'md5' in scope\n    let\
    \ digest = md5()\n                 ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n\n \
    \   let stringToMd5 = text.md5()\n    return stringToMd5\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp06gou85c.swift:11:28: error: value of type 'String' has no member\
    \ 'md5'\n    let stringToMd5 = text.md5()\n                      ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return text.md5()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9az1shcg.swift:7:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5()\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty { return nil }\n    return String(CC_MD5_DIGEST_LENGTH,\
    \ radix: 16, digest: CC_MD5( text as CChar* )) + String( 0, count: CC_MD5_DIGEST_LENGTH\
    \ )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(string_to_md5(text: \"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text: \"\") ==\
    \ nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp11hr9ifx.swift:8:81: error: expected ',' separator\n    return\
    \ String(CC_MD5_DIGEST_LENGTH, radix: 16, digest: CC_MD5( text as CChar* )) +\
    \ String( 0, count: CC_MD5_DIGEST_LENGTH )\n                                 \
    \                                               ^\n                          \
    \                                                      ,\n/tmp/tmp11hr9ifx.swift:8:81:\
    \ error: operator with postfix spacing cannot start a subexpression\n    return\
    \ String(CC_MD5_DIGEST_LENGTH, radix: 16, digest: CC_MD5( text as CChar* )) +\
    \ String( 0, count: CC_MD5_DIGEST_LENGTH )\n                                 \
    \                                               ^\n/tmp/tmp11hr9ifx.swift:8:83:\
    \ error: expected expression in list of expressions\n    return String(CC_MD5_DIGEST_LENGTH,\
    \ radix: 16, digest: CC_MD5( text as CChar* )) + String( 0, count: CC_MD5_DIGEST_LENGTH\
    \ )\n                                                                        \
    \          ^\n/tmp/tmp11hr9ifx.swift:8:19: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    return String(CC_MD5_DIGEST_LENGTH, radix: 16, digest: CC_MD5(\
    \ text as CChar* )) + String( 0, count: CC_MD5_DIGEST_LENGTH )\n             \
    \     ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp11hr9ifx.swift:8:60: error: cannot find 'CC_MD5'\
    \ in scope\n    return String(CC_MD5_DIGEST_LENGTH, radix: 16, digest: CC_MD5(\
    \ text as CChar* )) + String( 0, count: CC_MD5_DIGEST_LENGTH )\n             \
    \                                              ^~~~~~\n/tmp/tmp11hr9ifx.swift:8:106:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    return String(CC_MD5_DIGEST_LENGTH,\
    \ radix: 16, digest: CC_MD5( text as CChar* )) + String( 0, count: CC_MD5_DIGEST_LENGTH\
    \ )\n                                                                        \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp11hr9ifx.swift:8:88:\
    \ error: no exact matches in call to initializer \n    return String(CC_MD5_DIGEST_LENGTH,\
    \ radix: 16, digest: CC_MD5( text as CChar* )) + String( 0, count: CC_MD5_DIGEST_LENGTH\
    \ )\n                                                      "
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n\n \
    \   var md5Hex = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\n \
    \   CC_MD5(text.utf8, text.count, md5Hex)\n\n    let md5String = md5Hex.map {\
    \ String(format: \"%02x\", $0) }.joined()\n\n    return md5String\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpguuqs0rz.swift:11:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5Hex = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpguuqs0rz.swift:13:5:\
    \ error: cannot find 'CC_MD5' in scope\n    CC_MD5(text.utf8, text.count, md5Hex)\n\
    \    ^~~~~~\n/tmp/tmpguuqs0rz.swift:15:40: error: incorrect argument labels in\
    \ call (have 'format:_:', expected 'repeating:count:')\n    let md5String = md5Hex.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                                \
    \       ^~~~~~~\n                                        repeating       count:\
    \ \n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n\n \
    \   var md5 = MD5()\n    md5.update(text.data(using: String.Encoding.utf8))\n\
    \    let hashed = md5.finalize()\n    return hashed.base64EncodedString()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmplbwtofyj.swift:11:15: error: cannot find 'MD5' in scope\n    var\
    \ md5 = MD5()\n              ^~~\n/tmp/tmplbwtofyj.swift:12:21: error: value of\
    \ type 'String' has no member 'data'\n    md5.update(text.data(using: String.Encoding.utf8))\n\
    \               ~~~~ ^~~~\n/tmp/tmplbwtofyj.swift:12:40: error: type 'String'\
    \ has no member 'Encoding'\n    md5.update(text.data(using: String.Encoding.utf8))\n\
    \                                ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n\tguard !text.isEmpty else {\n\t\treturn nil\n\t}\n\t\
    let hash = MD5.hash((text as NSString).utf8) as String\n\treturn hash\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp60etfmw6.swift:10:13: error: cannot find 'MD5' in scope\n     \
    \   let hash = MD5.hash((text as NSString).utf8) as String\n                 \
    \  ^~~\n/tmp/tmp60etfmw6.swift:10:31: error: cannot find type 'NSString' in scope\n\
    \        let hash = MD5.hash((text as NSString).utf8) as String\n            \
    \                         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n\tlet hash : [UInt8] = [\n\t\t0xc7, 0x31, 0xa9, 0xc2,\
    \ 0x97, 0x15, 0x6b, 0x9d, 0xaa, 0xd9, 0x25, 0x4c,\n\t\t0x2b, 0xd4, 0xb9, 0x9a,\
    \ 0x67, 0xf1, 0x5f, 0x4b, 0x99, 0x7b, 0xe6, 0xa7,\n\t\t0xb3, 0xfb, 0x5f, 0xa9,\
    \ 0xf8, 0x62, 0x9a, 0x5b, 0x6b, 0xeb, 0xc6, 0xbd,\n\t\t0x4a, 0xaa, 0xb5, 0x8d,\
    \ 0x4c, 0x51, 0x33, 0x6c, 0x8d, 0xa8, 0xc6, 0x9c,\n\t\t0x33, 0xb4, 0x59, 0xf5,\
    \ 0x59, 0x5b, 0x4b, 0xf9, 0xe9, 0x99, 0x7b, 0x6a,\n\t\t0xc4, 0x9f, 0xbc, 0x6b,\
    \ 0xd4, 0x9b, 0x9c, 0x99, 0xc2, 0xa2, 0xf9, 0xe0,\n\t\t0x7f, 0xf1, 0xeb, 0xf2,\
    \ 0xe6, 0xf0, 0x4a, 0x6b, 0xec, 0xaa, 0x94, 0xf8,\n\t\t0x6a, 0x5d, 0xd4, 0x82,\
    \ 0xa1, 0x5b, 0xa7, 0xc2, 0xa3, 0x3b, 0x63, 0x9c,\n\t\t0xf8, 0xc2, 0x97, 0xf1,\
    \ 0xcb, 0xf1, 0x6f, 0x4a, 0xc1, 0xd5, 0x6a, 0x9b,\n\t\t0xeb, 0xf2, 0xeb, 0xa1,\
    \ 0x52, 0xa7, 0xc2, 0xa0, 0xf8, 0x6a, 0x6b, 0xe6,\n\t\t0x7c, 0xbc, 0xef, 0x2b,\
    \ 0xd4, 0xbd, 0xeb, 0x9b, 0x4c, 0xfa, 0xf4, 0xe0,\n\t\t0xa1, 0x73, 0x4a, 0x52,\
    \ 0xb0, 0x9b, 0xd4, 0x82, 0x81, 0x53, 0x33, 0x6c,\n\t\t0xb4, 0x82, 0xbc, 0xc5,\
    \ 0xf8, 0xd5, 0x4a, 0x5b, 0xa0, 0xf8, 0xca, 0x97,\n\t\t0xf1, 0xbd, 0xeb, 0xf2,\
    \ 0xeb, 0xa1, 0x73, 0x4a, 0x52, 0xa7, 0xc2, 0xa1,\n\t\t0xf8, 0x6a, 0x6b, 0xe6,\
    \ 0x3c, 0xd4, 0x82, 0xa1, 0x5b, 0xa7, 0xc2, 0xa0,\n\t\t0xf8, 0x\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpuoqym94l.swift:23:11: error: '\n' is not a valid hexadecimal digit\
    \ (0-9, A-F) in integer literal\n                0xf8, 0x\n                  \
    \      ^\n/tmp/tmpuoqym94l.swift:7:6: warning: immutable value 'hash' was never\
    \ used; consider replacing with '_' or removing it\n        let hash : [UInt8]\
    \ = [\n            ^~~~\n            _\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return text.md5()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9az1shcg.swift:7:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5()\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n\n \
    \   return MD5(text).string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmprqyaceff.swift:11:12: error: cannot find 'MD5' in scope\n    return\
    \ MD5(text).string\n           ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    var md5 = MD5()\n    if text == \"\" {\n        return\
    \ nil\n    }\n    md5.update(text.utf8)\n    return String(format: \"%08x\", md5.digest())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpvfqkh1dv.swift:7:15: error: cannot find 'MD5' in scope\n    var\
    \ md5 = MD5()\n              ^~~\n/tmp/tmpvfqkh1dv.swift:12:18: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return String(format: \"%08x\", md5.digest())\n                 ^~~~~~~\n \
    \                 repeating       count: \n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.trimmed() != \"\" else { return nil }\n\
    \    let data = self.md5(text.utf8)\n    return data.base64EncodedString()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpoownne2g.swift:7:16: error: value of type 'String' has no member\
    \ 'trimmed'\n    guard text.trimmed() != \"\" else { return nil }\n          ~~~~\
    \ ^~~~~~~\n/tmp/tmpoownne2g.swift:8:16: error: cannot find 'self' in scope; did\
    \ you mean to use it in a type or extension context?\n    let data = self.md5(text.utf8)\n\
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return md5.Calculate(text).String()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpdgyqk1uv.swift:7:12: error: cannot find 'md5' in scope\n    return\
    \ md5.Calculate(text).String()\n           ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return sha256(text: text, padding: .sha256_nopadding)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpw13hm380.swift:7:12: error: cannot find 'sha256' in scope\n   \
    \ return sha256(text: text, padding: .sha256_nopadding)\n           ^~~~~~\n/tmp/tmpw13hm380.swift:7:41:\
    \ error: cannot infer contextual base in reference to member 'sha256_nopadding'\n\
    \    return sha256(text: text, padding: .sha256_nopadding)\n                 \
    \                      ~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let hash = md5(text.data(using: String.Encoding.utf8))\n    return String(bytes:\
    \ hash.bytes, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxe18w8zv.swift:10:16: error: cannot find 'md5' in scope\n    let\
    \ hash = md5(text.data(using: String.Encoding.utf8))\n               ^~~\n/tmp/tmpxe18w8zv.swift:10:25:\
    \ error: value of type 'String' has no member 'data'\n    let hash = md5(text.data(using:\
    \ String.Encoding.utf8))\n                   ~~~~ ^~~~\n/tmp/tmpxe18w8zv.swift:10:44:\
    \ error: type 'String' has no member 'Encoding'\n    let hash = md5(text.data(using:\
    \ String.Encoding.utf8))\n                                    ~~~~~~ ^~~~~~~~\n\
    /tmp/tmpxe18w8zv.swift:11:49: error: extra argument 'encoding' in call\n    return\
    \ String(bytes: hash.bytes, encoding: .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpxe18w8zv.swift:11:49: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    return String(bytes: hash.bytes, encoding: .utf8)\n  \
    \                                             ~^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    var digest = digest.MD5()\n\n    if text.characters.count\
    \ == 0 {\n        return nil\n    }\n\n    digest.Write(text.utf8CString)\n\n\
    \    var md5String = NSMutableString(capacity: 16)\n    md5String.appendFormat(\"\
    %08x\", digest.Bytes())\n\n    return md5String\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2iy315gq.swift:7:18: error: use of local variable 'digest' before\
    \ its declaration\n    var digest = digest.MD5()\n                 ^\n/tmp/tmp2iy315gq.swift:7:9:\
    \ note: 'digest' declared here\n    var digest = digest.MD5()\n        ^\n/tmp/tmp2iy315gq.swift:9:13:\
    \ error: 'characters' is unavailable: Please use String directly\n    if text.characters.count\
    \ == 0 {\n            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2iy315gq.swift:15:21: error: cannot find 'NSMutableString' in scope\n\
    \    var md5String = NSMutableString(capacity: 16)\n                    ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n\n \
    \   let hasher = MD5.new()\n    hasher.update(text.data(using: .utf8)!)\n    return\
    \ String(data: hasher.result, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpc1l8kx5u.swift:11:18: error: cannot find 'MD5' in scope\n    let\
    \ hasher = MD5.new()\n                 ^~~\n/tmp/tmpc1l8kx5u.swift:12:24: error:\
    \ value of type 'String' has no member 'data'\n    hasher.update(text.data(using:\
    \ .utf8)!)\n                  ~~~~ ^~~~\n/tmp/tmpc1l8kx5u.swift:12:37: error:\
    \ cannot infer contextual base in reference to member 'utf8'\n    hasher.update(text.data(using:\
    \ .utf8)!)\n                                   ~^~~~\n/tmp/tmpc1l8kx5u.swift:13:51:\
    \ error: extra argument 'encoding' in call\n    return String(data: hasher.result,\
    \ encoding: .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpc1l8kx5u.swift:13:51: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    return String(data: hasher.result, encoding: .utf8)\n\
    \                                                 ~^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: -4
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: Exception
  stderr: 'tmpmlxr60z8/tmpmlxr60z8.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6d708fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6d6d86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6d6d86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6d6d857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmlxr60z8                        0x0000564632c444bc <unavailable> + 5308

    5    libc.so.6                          0x00002ab6d727b460 __libc_start_main +
    245

    6    tmpmlxr60z8                        0x0000564632c43f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text != \"\" else { return nil }\n    let data\
    \ = text.data(using: .utf8)!\n    let digest = md5(data: data)\n    return digest.map\
    \ { String(format: \"%016x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpxsvxdjzw.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpxsvxdjzw.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpxsvxdjzw.swift:9:18: error: cannot find 'md5'\
    \ in scope\n    let digest = md5(data: data)\n                 ^~~\n/tmp/tmpxsvxdjzw.swift:10:31:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digest.map { String(format: \"%016x\", $0) }.joined()\n          \
    \                    ^~~~~~~\n                               repeating       \
    \ count: \n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let hashData = text.data(using: .utf8)!\n    var hasher = MD5()\n    hasher.update(hashData)\n\
    \    return hasher.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpogqughqi.swift:10:25: error: value of type 'String' has no member\
    \ 'data'\n    let hashData = text.data(using: .utf8)!\n                   ~~~~\
    \ ^~~~\n/tmp/tmpogqughqi.swift:10:38: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let hashData = text.data(using: .utf8)!\n            \
    \                        ~^~~~\n/tmp/tmpogqughqi.swift:11:18: error: cannot find\
    \ 'MD5' in scope\n    var hasher = MD5()\n                 ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n\n \
    \   var md5sum = \"\"\n\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    guard let result = digest(data: data) else {\n        return nil\n    }\n\
    \n    let hex = digestToHex(digest: result)\n    md5sum += hex\n    return md5sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpr0mcei66.swift:13:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpr0mcei66.swift:13:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpr0mcei66.swift:14:24: error:\
    \ cannot find 'digest' in scope\n    guard let result = digest(data: data) else\
    \ {\n                       ^~~~~~\n/tmp/tmpr0mcei66.swift:18:15: error: cannot\
    \ find 'digestToHex' in scope\n    let hex = digestToHex(digest: result)\n   \
    \           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else { return nil }\n    var md5\
    \ = MD5()\n    md5.update(text.data(using: .utf8)!)\n    guard let result = md5.finish(),\
    \ let hexString = result.hexString() else { return nil }\n    return hexString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6_y67wwi.swift:8:15: error: cannot find 'MD5' in scope\n    var\
    \ md5 = MD5()\n              ^~~\n/tmp/tmp6_y67wwi.swift:9:21: error: value of\
    \ type 'String' has no member 'data'\n    md5.update(text.data(using: .utf8)!)\n\
    \               ~~~~ ^~~~\n/tmp/tmp6_y67wwi.swift:9:34: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    md5.update(text.data(using: .utf8)!)\n\
    \                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let bytes = text.utf8CString\n    var md5: Data =\
    \ Data(bytes: bytes, count: text.utf8.count)\n    let result = MD5Hash.computeHash(md5)\n\
    \    return String(data: result, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpp1vmdbi0.swift:8:14: error: cannot find type 'Data' in scope\n\
    \    var md5: Data = Data(bytes: bytes, count: text.utf8.count)\n            \
    \ ^~~~\n/tmp/tmpp1vmdbi0.swift:9:18: error: cannot find 'MD5Hash' in scope\n \
    \   let result = MD5Hash.computeHash(md5)\n                 ^~~~~~~\n/tmp/tmpp1vmdbi0.swift:10:44:\
    \ error: extra argument 'encoding' in call\n    return String(data: result, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpp1vmdbi0.swift:10:44:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: result, encoding: .utf8)\n                                    \
    \      ~^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    if let\
    \ data = text.data(using: String.Encoding.utf8) {\n        CC_MD5(data.bytes,\
    \ CC_LONG(data.count), &md5)\n    }\n    return NSData(bytes: md5, length: Int(CC_MD5_DIGEST_LENGTH)).base64EncodedStringWithOptions([])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7osecvwv.swift:10:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7osecvwv.swift:11:24:\
    \ error: value of type 'String' has no member 'data'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                  ~~~~ ^~~~\n/tmp/tmp7osecvwv.swift:11:43:\
    \ error: type 'String' has no member 'Encoding'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                                   ~~~~~~ ^~~~~~~~\n\
    /tmp/tmp7osecvwv.swift:12:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5(data.bytes,\
    \ CC_LONG(data.count), &md5)\n        ^~~~~~\n/tmp/tmp7osecvwv.swift:12:28: error:\
    \ cannot find 'CC_LONG' in scope\n        CC_MD5(data.bytes, CC_LONG(data.count),\
    \ &md5)\n                           ^~~~~~~\n/tmp/tmp7osecvwv.swift:14:12: error:\
    \ cannot find 'NSData' in scope\n    return NSData(bytes: md5, length: Int(CC_MD5_DIGEST_LENGTH)).base64EncodedStringWithOptions([])\n\
    \           ^~~~~~\n/tmp/tmp7osecvwv.swift:14:43: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    return NSData(bytes: md5, length: Int(CC_MD5_DIGEST_LENGTH)).base64EncodedStringWithOptions([])\n\
    \                                          ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let digest = MD5()\n    digest.update(text.utf8)\n    return String(data: digest.bytes,\
    \ encoding: .utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpang6t2en.swift:10:18: error: cannot find 'MD5' in scope\n    let\
    \ digest = MD5()\n                 ^~~\n/tmp/tmpang6t2en.swift:12:50: error: extra\
    \ argument 'encoding' in call\n    return String(data: digest.bytes, encoding:\
    \ .utf8) ?? nil\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpang6t2en.swift:12:50:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: digest.bytes, encoding: .utf8) ?? nil\n                       \
    \                         ~^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ var md5Text = text\n    // md5Text is the md5 hash text without '-' sign\n \
    \   md5Text = md5Text.characters.filter({ $0 != \"-\" }).joinWithSeparator(\"\"\
    ) + \"-\"\n    // Convert 'text' into 'bytes', then encode as 'base64'.\n    var\
    \ bytes = md5Text.data(using: String.Encoding.utf8)\n    let base64String = bytes.base64EncodedString()\n\
    \    return base64String\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmmcli3t9.swift:12:56: error: reference to member 'joinWithSeparator'\
    \ cannot be resolved without a contextual type\n    md5Text = md5Text.characters.filter({\
    \ $0 != \"-\" }).joinWithSeparator(\"\") + \"-\"\n                           \
    \                            ^\n/tmp/tmpmmcli3t9.swift:14:25: error: value of\
    \ type 'String' has no member 'data'\n    var bytes = md5Text.data(using: String.Encoding.utf8)\n\
    \                ~~~~~~~ ^~~~\n/tmp/tmpmmcli3t9.swift:14:44: error: type 'String'\
    \ has no member 'Encoding'\n    var bytes = md5Text.data(using: String.Encoding.utf8)\n\
    \                                    ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text != \"\" else { return nil }\n    let encodedMd5\
    \ = md5(text.utf8)\n    return String(data: encodedMd5, encoding: .utf8)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp52zpmeh_.swift:8:22: error: cannot find 'md5' in scope\n    let\
    \ encodedMd5 = md5(text.utf8)\n                     ^~~\n/tmp/tmp52zpmeh_.swift:9:48:\
    \ error: extra argument 'encoding' in call\n    return String(data: encodedMd5,\
    \ encoding: .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp52zpmeh_.swift:9:48:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: encodedMd5, encoding: .utf8)\n                                \
    \              ~^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text != \"\" else {\n        return nil\n  \
    \  }\n\n    let data = text.data(using: String.Encoding.utf8)!\n    var md5 =\
    \ Data()\n    MD5(data, &md5)\n    return md5.base64EncodedString()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpb8kh7sp4.swift:11:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpb8kh7sp4.swift:11:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpb8kh7sp4.swift:12:15: error:\
    \ cannot find 'Data' in scope\n    var md5 = Data()\n              ^~~~\n/tmp/tmpb8kh7sp4.swift:13:5:\
    \ error: cannot find 'MD5' in scope\n    MD5(data, &md5)\n    ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n\treturn SHA1.hash(text).lowercased()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpuy95l7_7.swift:7:9: error: cannot find 'SHA1' in scope\n      \
    \  return SHA1.hash(text).lowercased()\n               ^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    // TODO: handle nil input\n\n    // TODO: use native\
    \ hash function when available.\n    if let hash = MD5_HASH(text) {\n        return\
    \ String(hash).lowercased()\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpxdzk6aew.swift:10:19: error: cannot find 'MD5_HASH' in scope\n\
    \    if let hash = MD5_HASH(text) {\n                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let digest = text.md5()\n    if let digestStr = digest.stringValue\
    \ {\n        return digestStr\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpx13aqoa9.swift:7:23: error: value of type 'String' has no member\
    \ 'md5'\n    let digest = text.md5()\n                 ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var result: Array<UInt8> = Array<UInt8>(text.utf8)\n    return hex_md5(result)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpx96f4qoz.swift:11:12: error: cannot find 'hex_md5' in scope\n \
    \   return hex_md5(result)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text != \"\", let data = text.data(using: .utf8)\
    \ else { return nil }\n    guard let hash = digest(algorithm: .sha256, digestdata:\
    \ data) else { return nil }\n    return hash.base64EncodedString()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpiudlfvnz.swift:7:39: error: value of type 'String' has no member\
    \ 'data'\n    guard text != \"\", let data = text.data(using: .utf8) else { return\
    \ nil }\n                                 ~~~~ ^~~~\n/tmp/tmpiudlfvnz.swift:7:52:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    guard\
    \ text != \"\", let data = text.data(using: .utf8) else { return nil }\n     \
    \                                             ~^~~~\n/tmp/tmpiudlfvnz.swift:8:22:\
    \ error: cannot find 'digest' in scope\n    guard let hash = digest(algorithm:\
    \ .sha256, digestdata: data) else { return nil }\n                     ^~~~~~\n\
    /tmp/tmpiudlfvnz.swift:8:41: error: cannot infer contextual base in reference\
    \ to member 'sha256'\n    guard let hash = digest(algorithm: .sha256, digestdata:\
    \ data) else { return nil }\n                                       ~^~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n\n \
    \   var md5 = md5HashOfUnsafePointer(text.utf8)\n\n    guard let md5Hash = MD5(md5:\
    \ md5).digest.map { String(format: \"%02x\", $0) } else { return nil }\n\n   \
    \ return md5Hash\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplsqptgfj.swift:13:50: error: expected 'else' after 'guard' condition\n\
    \    guard let md5Hash = MD5(md5: md5).digest.map { String(format: \"%02x\", $0)\
    \ } else { return nil }\n                                                 ^\n\
    \                                                 else \n/tmp/tmplsqptgfj.swift:13:75:\
    \ error: anonymous closure argument not contained in a closure\n    guard let\
    \ md5Hash = MD5(md5: md5).digest.map { String(format: \"%02x\", $0) } else { return\
    \ nil }\n                                                                    \
    \      ^\n/tmp/tmplsqptgfj.swift:13:80: error: consecutive statements on a line\
    \ must be separated by ';'\n    guard let md5Hash = MD5(md5: md5).digest.map {\
    \ String(format: \"%02x\", $0) } else { return nil }\n                       \
    \                                                        ^\n                 \
    \                                                              ;\n/tmp/tmplsqptgfj.swift:13:81:\
    \ error: expected expression\n    guard let md5Hash = MD5(md5: md5).digest.map\
    \ { String(format: \"%02x\", $0) } else { return nil }\n                     \
    \                                                           ^\n/tmp/tmplsqptgfj.swift:11:15:\
    \ error: cannot find 'md5HashOfUnsafePointer' in scope\n    var md5 = md5HashOfUnsafePointer(text.utf8)\n\
    \              ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplsqptgfj.swift:13:25: error: cannot\
    \ find 'MD5' in scope\n    guard let md5Hash = MD5(md5: md5).digest.map { String(format:\
    \ \"%02x\", $0) } else { return nil }\n                        ^~~\n/tmp/tmplsqptgfj.swift:13:58:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    guard let md5Hash = MD5(md5: md5).digest.map { String(format: \"%02x\", $0)\
    \ } else { return nil }\n                                                    \
    \     ^~~~~~~\n                                                          repeating\
    \       count: \n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.characters.count > 0 {\n        let digest\
    \ = MD5().hash(text)\n        return NSString(format: \"%@\", digest).lowercaseString\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3g9o7cwe.swift:7:13: error: 'characters' is unavailable: Please\
    \ use String directly\n    if text.characters.count > 0 {\n            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp3g9o7cwe.swift:8:22:\
    \ error: cannot find 'MD5' in scope\n        let digest = MD5().hash(text)\n \
    \                    ^~~\n/tmp/tmp3g9o7cwe.swift:9:16: error: cannot find 'NSString'\
    \ in scope\n        return NSString(format: \"%@\", digest).lowercaseString\n\
    \               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    return String(bytes: Digest.md5(data).bytes, encoding: String.Encoding.ascii)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpujlz4nyo.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpujlz4nyo.swift:7:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpujlz4nyo.swift:8:26: error:\
    \ cannot find 'Digest' in scope\n    return String(bytes: Digest.md5(data).bytes,\
    \ encoding: String.Encoding.ascii)\n                         ^~~~~~\n/tmp/tmpujlz4nyo.swift:8:76:\
    \ error: extra argument 'encoding' in call\n    return String(bytes: Digest.md5(data).bytes,\
    \ encoding: String.Encoding.ascii)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpujlz4nyo.swift:8:67: error: type 'String' has no member 'Encoding'\n \
    \   return String(bytes: Digest.md5(data).bytes, encoding: String.Encoding.ascii)\n\
    \                                                           ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let md5Data = text.data(using: .utf8)\n    return\
    \ try? Data(bytes: md5Data!).md5().base64EncodedString()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9f6a_nzc.swift:7:24: error: value of type 'String' has no member\
    \ 'data'\n    let md5Data = text.data(using: .utf8)\n                  ~~~~ ^~~~\n\
    /tmp/tmp9f6a_nzc.swift:7:37: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let md5Data = text.data(using: .utf8)\n              \
    \                     ~^~~~\n/tmp/tmp9f6a_nzc.swift:8:17: error: cannot find 'Data'\
    \ in scope\n    return try? Data(bytes: md5Data!).md5().base64EncodedString()\n\
    \                ^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n\tif text == \"\" {\n\t\treturn nil\n\t}\n\n\thash :=\
    \ md5.New()\n\thash.Write([]byte(text))\n\thashed := hash.Sum(nil)\n\n\treturn\
    \ hashedHexString(hashed)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0islqnwc.swift:11:6: error: consecutive statements on a line must\
    \ be separated by ';'\n        hash := md5.New()\n            ^\n            ;\n\
    /tmp/tmp0islqnwc.swift:11:7: error: expected expression\n        hash := md5.New()\n\
    \             ^\n/tmp/tmp0islqnwc.swift:11:2: error: cannot find 'hash' in scope\n\
    \        hash := md5.New()\n        ^~~~\n/tmp/tmp0islqnwc.swift:15:9: error:\
    \ cannot find 'hashedHexString' in scope\n        return hashedHexString(hashed)\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmp0islqnwc.swift:15:25: error: cannot find\
    \ 'hashed' in scope\n        return hashedHexString(hashed)\n                \
    \               ^~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n\n \
    \   let result = md5(text: text)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpf22i8zvb.swift:11:18: error: cannot find 'md5' in scope\n    let\
    \ result = md5(text: text)\n                 ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return text.md5()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9az1shcg.swift:7:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5()\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: .utf8)\n    return String(md5(data:\
    \ data))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpc500bdqi.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpc500bdqi.swift:7:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpc500bdqi.swift:8:19:\
    \ error: cannot find 'md5' in scope\n    return String(md5(data: data))\n    \
    \              ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n\tlet hash = MD5()\n\thash.update(text.data(using: .utf8))\n\
    \treturn String(bytes: hash.digest(), encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpyrncw0er.swift:7:13: error: cannot find 'MD5' in scope\n      \
    \  let hash = MD5()\n                   ^~~\n/tmp/tmpyrncw0er.swift:8:19: error:\
    \ value of type 'String' has no member 'data'\n        hash.update(text.data(using:\
    \ .utf8))\n                    ~~~~ ^~~~\n/tmp/tmpyrncw0er.swift:8:32: error:\
    \ cannot infer contextual base in reference to member 'utf8'\n        hash.update(text.data(using:\
    \ .utf8))\n                                     ~^~~~\n/tmp/tmpyrncw0er.swift:9:49:\
    \ error: extra argument 'encoding' in call\n        return String(bytes: hash.digest(),\
    \ encoding: .utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpyrncw0er.swift:9:49: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n        return String(bytes: hash.digest(), encoding: .utf8)\n\
    \                                                      ~^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    // Create byte array of text.\n    var data: [UInt8]\
    \ = Array(text.utf8)\n    // Create MD5 hash.\n    let hash: [UInt8] = MD5.hash(data:\
    \ data)\n    // Convert to hexadecimal string.\n    let hashString = hash.hexString\n\
    \    return hashString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxggp8lv7.swift:10:25: error: cannot find 'MD5' in scope\n    let\
    \ hash: [UInt8] = MD5.hash(data: data)\n                        ^~~\n/tmp/tmpxggp8lv7.swift:12:27:\
    \ error: value of type '[UInt8]' has no member 'hexString'\n    let hashString\
    \ = hash.hexString\n                     ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    if let hash = MD5(data!.bytes, CInt(data.count)) {\n        return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil\n    }\n    return nil\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmppwnig731.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmppwnig731.swift:7:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmppwnig731.swift:8:19: error:\
    \ cannot find 'MD5' in scope\n    if let hash = MD5(data!.bytes, CInt(data.count))\
    \ {\n                  ^~~\n/tmp/tmppwnig731.swift:9:61: error: extra argument\
    \ 'encoding' in call\n        return String(data: hash, encoding: String.Encoding.utf8)\
    \ ?? nil\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmppwnig731.swift:9:52: error: type 'String' has no member 'Encoding'\n \
    \       return String(data: hash, encoding: String.Encoding.utf8) ?? nil\n   \
    \                                         ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return text.md5()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9az1shcg.swift:7:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5()\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    var md5Hex = hex.NewMD5()\n    md5Hex.Write(text.Bytes())\n\
    \    return md5Hex.String()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpy1rld6o5.swift:7:18: error: cannot find 'hex' in scope\n    var\
    \ md5Hex = hex.NewMD5()\n                 ^~~\n/tmp/tmpy1rld6o5.swift:8:23: error:\
    \ value of type 'String' has no member 'Bytes'\n    md5Hex.Write(text.Bytes())\n\
    \                 ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let hashed = Md5.hash(text)\n    return hashed.hexString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpcp0wliap.swift:10:18: error: cannot find 'Md5' in scope\n    let\
    \ hashed = Md5.hash(text)\n                 ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5String = MD5String(text)\n    if md5String == \"\" {\n        return\
    \ nil\n    }\n    return md5String\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpv3rugwao.swift:10:21: error: cannot find 'MD5String' in scope\n\
    \    var md5String = MD5String(text)\n                    ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let hexdigest = Digest.md5String(text)\n    return\
    \ hexdigest ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpv1libm0y.swift:7:21: error: cannot find 'Digest' in scope\n   \
    \ let hexdigest = Digest.md5String(text)\n                    ^~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    var md5 = MD5()\n    if text == \"\" {\n        return\
    \ nil\n    }\n    md5.update(text.utf8)\n    return String(bytes: md5.digest(),\
    \ encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgknaa8e8.swift:7:15: error: cannot find 'MD5' in scope\n    var\
    \ md5 = MD5()\n              ^~~\n/tmp/tmpgknaa8e8.swift:12:51: error: extra argument\
    \ 'encoding' in call\n    return String(bytes: md5.digest(), encoding: .utf8)\n\
    \                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpgknaa8e8.swift:12:51:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(bytes: md5.digest(), encoding: .utf8)\n                             \
    \                    ~^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text != \"\" else { return nil }\n    var md5:\
    \ String = md5ofData(text.data(using: .utf8)!)\n    if md5 == \"\" {\n       \
    \ return nil\n    }\n    return md5\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpm5huvoiz.swift:8:23: error: cannot find 'md5ofData' in scope\n\
    \    var md5: String = md5ofData(text.data(using: .utf8)!)\n                 \
    \     ^~~~~~~~~\n/tmp/tmpm5huvoiz.swift:8:38: error: value of type 'String' has\
    \ no member 'data'\n    var md5: String = md5ofData(text.data(using: .utf8)!)\n\
    \                                ~~~~ ^~~~\n/tmp/tmpm5huvoiz.swift:8:51: error:\
    \ cannot infer contextual base in reference to member 'utf8'\n    var md5: String\
    \ = md5ofData(text.data(using: .utf8)!)\n                                    \
    \             ~^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard let data = text.data(using: String.Encoding.utf8)\
    \ else {\n        return nil\n    }\n    return MD5.hash(data: data).digest().compactMap\
    \ { String(format: \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpbpc291wl.swift:7:27: error: value of type 'String' has no member\
    \ 'data'\n    guard let data = text.data(using: String.Encoding.utf8) else {\n\
    \                     ~~~~ ^~~~\n/tmp/tmpbpc291wl.swift:7:46: error: type 'String'\
    \ has no member 'Encoding'\n    guard let data = text.data(using: String.Encoding.utf8)\
    \ else {\n                                      ~~~~~~ ^~~~~~~~\n/tmp/tmpbpc291wl.swift:10:12:\
    \ error: cannot find 'MD5' in scope\n    return MD5.hash(data: data).digest().compactMap\
    \ { String(format: \"%02x\", $0) }.joined()\n           ^~~\n/tmp/tmpbpc291wl.swift:10:61:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return MD5.hash(data: data).digest().compactMap { String(format: \"%02x\"\
    , $0) }.joined()\n                                                           \
    \ ^~~~~~~\n                                                             repeating\
    \       count: \n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text != \"\" else {\n        return nil\n  \
    \  }\n    let hexBytes = text.data(using: .utf8)!\n    var digest = [UInt8](repeating:\
    \ 0, count: Int(CC_SHA256_DIGEST_LENGTH))\n    CC_SHA256(\n        UnsafeMutablePointer(digest.bytes),\n\
    \        UnsafeMutablePointer(UnsafeRawPointer(hexBytes)),\n        CC_LONG(hexBytes.count)\n\
    \    )\n    let hexString = digest.map { String(format: \"%02x\", $0) }.joined()\n\
    \    return hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpu26fodv8.swift:10:25: error: value of type 'String' has no member\
    \ 'data'\n    let hexBytes = text.data(using: .utf8)!\n                   ~~~~\
    \ ^~~~\n/tmp/tmpu26fodv8.swift:10:38: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let hexBytes = text.data(using: .utf8)!\n            \
    \                        ~^~~~\n/tmp/tmpu26fodv8.swift:11:51: error: cannot find\
    \ 'CC_SHA256_DIGEST_LENGTH' in scope\n    var digest = [UInt8](repeating: 0, count:\
    \ Int(CC_SHA256_DIGEST_LENGTH))\n                                            \
    \      ^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpu26fodv8.swift:12:5: error: cannot find\
    \ 'CC_SHA256' in scope\n    CC_SHA256(\n    ^~~~~~~~~\n/tmp/tmpu26fodv8.swift:15:9:\
    \ error: cannot find 'CC_LONG' in scope\n        CC_LONG(hexBytes.count)\n   \
    \     ^~~~~~~\n/tmp/tmpu26fodv8.swift:14:9: error: no exact matches in call to\
    \ initializer \n        UnsafeMutablePointer(UnsafeRawPointer(hexBytes)),\n  \
    \      ^\n/tmp/tmpu26fodv8.swift:14:9: note: found candidate with type '(UnsafeMutablePointer<_>)\
    \ -> UnsafeMutablePointer<_>'\n        UnsafeMutablePointer(UnsafeRawPointer(hexBytes)),\n\
    \        ^\n/tmp/tmpu26fodv8.swift:13:9: error: generic parameter 'Pointee' could\
    \ not be inferred\n        UnsafeMutablePointer(digest.bytes),\n        ^\n/tmp/tmpu26fodv8.swift:13:9:\
    \ note: explicitly specify the generic arguments to fix this issue\n        UnsafeMutablePointer(digest.bytes),\n\
    \        ^\n                            <Any>\n/tmp/tmpu26fodv8.swift:14:9: error:\
    \ generic parameter 'Pointee' could not be inferred\n        UnsafeMutablePointer(UnsafeRawPointer(hexBytes)),\n\
    \        ^\n/tmp/tmpu26fodv8.swift:14:9: note: explicitly specify the generic\
    \ arguments to fix this issue\n        UnsafeMutablePointer(UnsafeRawPointer(hexBytes)),\n\
    \        ^\n                            <Any>\n/tmp/tmpu26fodv8.swift:17:40: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let hexString = digest.map { String(format: \"%02x\", $0) }.joined()\n  \
    \                                     ^~~~~~~\n                           "
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5 = MD5()\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    let data: [UInt8] = text.utf8.map { utf8_to_bytes($0) }\n    guard let result\
    \ = CC_MD5(data, CC_LONG(data.count), &digest) else {\n        return nil\n  \
    \  }\n    return base64(digest)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp37lsaykx.swift:10:15: error: cannot find 'MD5' in scope\n    var\
    \ md5 = MD5()\n              ^~~\n/tmp/tmp37lsaykx.swift:11:51: error: cannot\
    \ find 'CC_MD5_DIGEST_LENGTH' in scope\n    var digest = [UInt8](repeating: 0,\
    \ count: Int(CC_MD5_DIGEST_LENGTH))\n                                        \
    \          ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp37lsaykx.swift:12:41: error: cannot find\
    \ 'utf8_to_bytes' in scope\n    let data: [UInt8] = text.utf8.map { utf8_to_bytes($0)\
    \ }\n                                        ^~~~~~~~~~~~~\n/tmp/tmp37lsaykx.swift:13:24:\
    \ error: cannot find 'CC_MD5' in scope\n    guard let result = CC_MD5(data, CC_LONG(data.count),\
    \ &digest) else {\n                       ^~~~~~\n/tmp/tmp37lsaykx.swift:13:37:\
    \ error: cannot find 'CC_LONG' in scope\n    guard let result = CC_MD5(data, CC_LONG(data.count),\
    \ &digest) else {\n                                    ^~~~~~~\n/tmp/tmp37lsaykx.swift:16:12:\
    \ error: cannot find 'base64' in scope\n    return base64(digest)\n          \
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n\tlet md5 = md5(text)\n\treturn md5.utf8String\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpu1s05263.swift:7:12: error: use of local variable 'md5' before\
    \ its declaration\n        let md5 = md5(text)\n                  ^\n/tmp/tmpu1s05263.swift:7:6:\
    \ note: 'md5' declared here\n        let md5 = md5(text)\n            ^\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n\tif text == \"\" {\n\t\treturn nil\n\t}\n\n\tvar result\
    \ [32]byte\n\tMD5Init(&result[0])\n\tMD5Update(&result[0], text.data(using: .utf8)!,\
    \ text.count)\n\tMD5Final(&result[0])\n\treturn String(data: result[0..<32], encoding:\
    \ .ascii)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpol6ms95k.swift:11:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        var result [32]byte\n                  ^\n    \
    \              ;\n/tmp/tmpol6ms95k.swift:11:17: error: consecutive statements\
    \ on a line must be separated by ';'\n        var result [32]byte\n          \
    \             ^\n                       ;\n/tmp/tmpol6ms95k.swift:11:6: error:\
    \ type annotation missing in pattern\n        var result [32]byte\n          \
    \  ^\n/tmp/tmpol6ms95k.swift:11:13: warning: expression of type '[Int]' is unused\n\
    \        var result [32]byte\n                   ^~~~\n/tmp/tmpol6ms95k.swift:11:17:\
    \ error: cannot find 'byte' in scope\n        var result [32]byte\n          \
    \             ^~~~\n/tmp/tmpol6ms95k.swift:12:2: error: cannot find 'MD5Init'\
    \ in scope\n        MD5Init(&result[0])\n        ^~~~~~~\n/tmp/tmpol6ms95k.swift:13:2:\
    \ error: cannot find 'MD5Update' in scope\n        MD5Update(&result[0], text.data(using:\
    \ .utf8)!, text.count)\n        ^~~~~~~~~\n/tmp/tmpol6ms95k.swift:13:29: error:\
    \ value of type 'String' has no member 'data'\n        MD5Update(&result[0], text.data(using:\
    \ .utf8)!, text.count)\n                              ~~~~ ^~~~\n/tmp/tmpol6ms95k.swift:13:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n        MD5Update(&result[0],\
    \ text.data(using: .utf8)!, text.count)\n                                    \
    \           ~^~~~\n/tmp/tmpol6ms95k.swift:14:2: error: cannot find 'MD5Final'\
    \ in scope\n        MD5Final(&result[0])\n        ^~~~~~~~\n/tmp/tmpol6ms95k.swift:15:49:\
    \ error: extra argument 'encoding' in call\n        return String(data: result[0..<32],\
    \ encoding: .ascii)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpol6ms95k.swift:15:49: error: cannot infer contextual base in reference\
    \ to member 'ascii'\n        return String(data: result[0..<32], encoding: .ascii)\n\
    \                                                      ~^~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5Hash = MD5.new()\n    md5Hash.update(text.utf8)\n    let result = md5Hash.finalize()\n\
    \    return String(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxetu06ki.swift:10:19: error: cannot find 'MD5' in scope\n    var\
    \ md5Hash = MD5.new()\n                  ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    let md5 = data.md5()\n    return String(bytes: md5, encoding: .utf8) ?? nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp05ghjdvb.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp05ghjdvb.swift:7:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmp05ghjdvb.swift:9:42: error:\
    \ extra argument 'encoding' in call\n    return String(bytes: md5, encoding: .utf8)\
    \ ?? nil\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp05ghjdvb.swift:9:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(bytes: md5, encoding: .utf8) ?? nil\n                               \
    \         ~^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text != \"\" else {\n        return nil\n  \
    \  }\n    let md5Buffer = text.data(using: .utf8)!\n    let md5 = MD5.hash(md5Buffer)\n\
    \    let hexString = md5.map { String(format: \"%02x\", $0) }.joined()\n    return\
    \ hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpodd7qbh9.swift:10:26: error: value of type 'String' has no member\
    \ 'data'\n    let md5Buffer = text.data(using: .utf8)!\n                    ~~~~\
    \ ^~~~\n/tmp/tmpodd7qbh9.swift:10:39: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let md5Buffer = text.data(using: .utf8)!\n           \
    \                          ~^~~~\n/tmp/tmpodd7qbh9.swift:11:15: error: cannot\
    \ find 'MD5' in scope\n    let md5 = MD5.hash(md5Buffer)\n              ^~~\n\
    /tmp/tmpodd7qbh9.swift:12:37: error: incorrect argument labels in call (have 'format:_:',\
    \ expected 'repeating:count:')\n    let hexString = md5.map { String(format: \"\
    %02x\", $0) }.joined()\n                                    ^~~~~~~\n        \
    \                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard let md5 = text.md5() else { return nil }\n \
    \   return md5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmptkf_bm7v.swift:7:26: error: value of type 'String' has no member\
    \ 'md5'\n    guard let md5 = text.md5() else { return nil }\n                \
    \    ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else { return nil }\n    let hashData\
    \ = text.data(using: String.Encoding.utf8)!\n    return MD5Hash(hashData)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpw6in4zmp.swift:8:25: error: value of type 'String' has no member\
    \ 'data'\n    let hashData = text.data(using: String.Encoding.utf8)!\n       \
    \            ~~~~ ^~~~\n/tmp/tmpw6in4zmp.swift:8:44: error: type 'String' has\
    \ no member 'Encoding'\n    let hashData = text.data(using: String.Encoding.utf8)!\n\
    \                                    ~~~~~~ ^~~~~~~~\n/tmp/tmpw6in4zmp.swift:9:12:\
    \ error: cannot find 'MD5Hash' in scope\n    return MD5Hash(hashData)\n      \
    \     ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5hex: [String] = []\n    for i in 0..<(text.characters.count / 4)*4 {\n\
    \        let s = text.substringWithRange(Range<String.Index>(start: i*4, end:\
    \ (i+1)*4))\n        md5hex.append(md5(s: s).lowercased().hex.lowercased())\n\
    \    }\n    return md5hex.join()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwl6brsd2.swift:11:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<(text.characters.count / 4)*4 {\n    \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpwl6brsd2.swift:12:22: error: value of type 'String' has no member\
    \ 'substringWithRange'\n        let s = text.substringWithRange(Range<String.Index>(start:\
    \ i*4, end: (i+1)*4))\n                ~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpwl6brsd2.swift:12:41:\
    \ error: referencing initializer 'init(_:)' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\n        let s = text.substringWithRange(Range<String.Index>(start:\
    \ i*4, end: (i+1)*4))\n                                        ^\nSwift.Range:1:11:\
    \ note: where 'Bound' = 'String.Index'\nextension Range where Bound : Strideable,\
    \ Bound.Stride : SignedInteger {\n          ^\n/tmp/tmpwl6brsd2.swift:12:83: error:\
    \ extra argument 'end' in call\n        let s = text.substringWithRange(Range<String.Index>(start:\
    \ i*4, end: (i+1)*4))\n                                                      \
    \     ~~~~~~~~~~~~~~~~~~~~~~~^~~\n/tmp/tmpwl6brsd2.swift:12:69: error: cannot\
    \ convert value of type 'Int' to expected argument type 'ClosedRange<String.Index>'\n\
    \        let s = text.substringWithRange(Range<String.Index>(start: i*4, end:\
    \ (i+1)*4))\n                                                                \
    \    ^\n/tmp/tmpwl6brsd2.swift:13:23: error: cannot find 'md5' in scope\n    \
    \    md5hex.append(md5(s: s).lowercased().hex.lowercased())\n                \
    \      ^~~\n/tmp/tmpwl6brsd2.swift:15:19: error: value of type '[String]' has\
    \ no member 'join'\n    return md5hex.join()\n           ~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let md5Data = text.data(using: String.Encoding.utf8,\
    \ allowLossyConversion: false)\n    return String.md5(md5)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp80daniq8.swift:7:24: error: value of type 'String' has no member\
    \ 'data'\n    let md5Data = text.data(using: String.Encoding.utf8, allowLossyConversion:\
    \ false)\n                  ~~~~ ^~~~\n/tmp/tmp80daniq8.swift:7:43: error: type\
    \ 'String' has no member 'Encoding'\n    let md5Data = text.data(using: String.Encoding.utf8,\
    \ allowLossyConversion: false)\n                                   ~~~~~~ ^~~~~~~~\n\
    /tmp/tmp80daniq8.swift:8:23: error: cannot find 'md5' in scope\n    return String.md5(md5)\n\
    \                      ^~~\n/tmp/tmp80daniq8.swift:8:19: error: type 'String'\
    \ has no member 'md5'\n    return String.md5(md5)\n           ~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let digestData = text.data(using: .utf8)!\n    let\
    \ digest = digestData.md5()\n    return digest.base64EncodedString(options: .lineLength64Characters)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpcd7a27y1.swift:7:27: error: value of type 'String' has no member\
    \ 'data'\n    let digestData = text.data(using: .utf8)!\n                    \
    \ ~~~~ ^~~~\n/tmp/tmpcd7a27y1.swift:7:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let digestData = text.data(using: .utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpcd7a27y1.swift:9:49: error:\
    \ cannot infer contextual base in reference to member 'lineLength64Characters'\n\
    \    return digest.base64EncodedString(options: .lineLength64Characters)\n   \
    \                                            ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text != \"\" else {\n        return nil\n  \
    \  }\n\n    let md5 = md5.init()\n    guard let data = text.data(using: String.Encoding.utf8)\
    \ else {\n        return nil\n    }\n    guard let hash = md5.hash(data: data)\
    \ else {\n        return nil\n    }\n    return hash.map { String(format: \"%016x\"\
    , $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3rj7qm6h.swift:11:15: error: use of local variable 'md5' before\
    \ its declaration\n    let md5 = md5.init()\n              ^\n/tmp/tmp3rj7qm6h.swift:11:9:\
    \ note: 'md5' declared here\n    let md5 = md5.init()\n        ^\n/tmp/tmp3rj7qm6h.swift:12:27:\
    \ error: value of type 'String' has no member 'data'\n    guard let data = text.data(using:\
    \ String.Encoding.utf8) else {\n                     ~~~~ ^~~~\n/tmp/tmp3rj7qm6h.swift:12:46:\
    \ error: type 'String' has no member 'Encoding'\n    guard let data = text.data(using:\
    \ String.Encoding.utf8) else {\n                                      ~~~~~~ ^~~~~~~~\n\
    /tmp/tmp3rj7qm6h.swift:18:29: error: incorrect argument labels in call (have 'format:_:',\
    \ expected 'repeating:count:')\n    return hash.map { String(format: \"%016x\"\
    , $0) }.joined()\n                            ^~~~~~~\n                      \
    \       repeating        count: \n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard let utf8 = text.utf8EncodedString() else {\n\
    \        return nil\n    }\n\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \n    _ = CC_MD5(utf8.bytes, CC_LONG(utf8.count), &md5)\n\n    var md5String =\
    \ \"\"\n\n    for i in 0..<CC_LONG(md5.count) {\n        md5String += String(format:\
    \ \"%02x\", md5[i])\n    }\n\n    return md5String\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpgmo1zbby.swift:7:27: error: value of type 'String' has no member\
    \ 'utf8EncodedString'\n    guard let utf8 = text.utf8EncodedString() else {\n\
    \                     ~~~~ ^~~~~~~~~~~~~~~~~\n/tmp/tmpgmo1zbby.swift:11:48: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \          ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgmo1zbby.swift:13:9: error: cannot find\
    \ 'CC_MD5' in scope\n    _ = CC_MD5(utf8.bytes, CC_LONG(utf8.count), &md5)\n \
    \       ^~~~~~\n/tmp/tmpgmo1zbby.swift:13:28: error: cannot find 'CC_LONG' in\
    \ scope\n    _ = CC_MD5(utf8.bytes, CC_LONG(utf8.count), &md5)\n             \
    \              ^~~~~~~\n/tmp/tmpgmo1zbby.swift:17:18: error: cannot find 'CC_LONG'\
    \ in scope\n    for i in 0..<CC_LONG(md5.count) {\n                 ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let utf8string = text.data(using: String.Encoding.utf8)\n\
    \    guard let hash = md5HashFromData(utf8string) else {\n        return nil\n\
    \    }\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0yvd9m6g.swift:7:27: error: value of type 'String' has no member\
    \ 'data'\n    let utf8string = text.data(using: String.Encoding.utf8)\n      \
    \               ~~~~ ^~~~\n/tmp/tmp0yvd9m6g.swift:7:46: error: type 'String' has\
    \ no member 'Encoding'\n    let utf8string = text.data(using: String.Encoding.utf8)\n\
    \                                      ~~~~~~ ^~~~~~~~\n/tmp/tmp0yvd9m6g.swift:8:22:\
    \ error: cannot find 'md5HashFromData' in scope\n    guard let hash = md5HashFromData(utf8string)\
    \ else {\n                     ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let md5hash = MD5.new()\n    md5hash.update(text._utf8)\n    return String(md5hash.digest())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1ojhyu29.swift:10:19: error: cannot find 'MD5' in scope\n    let\
    \ md5hash = MD5.new()\n                  ^~~\n/tmp/tmp1ojhyu29.swift:11:25: error:\
    \ value of type 'String' has no member '_utf8'\n    md5hash.update(text._utf8)\n\
    \                   ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text != \"\" || text != nil else {\n       \
    \ return nil\n    }\n\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n  \
    \  let result = CC_MD5(data.bytes, CC_LONG(data.count), &digest)\n\n    var result\
    \ = \"\"\n    for i in 0 ..< Int(CC_MD5_DIGEST_LENGTH) {\n        let byte = UInt8(digest[i])\n\
    \        result += \"0123456789abcdef\"[(byte & 0xF0) >> 4] + String(byte, radix:\
    \ 16) + \"0123456789abcdef\"[(byte & 0x0F)]\n    }\n\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmprqsz9kbn.swift:7:30: warning: comparing non-optional value of type\
    \ 'String' to 'nil' always returns true\n    guard text != \"\" || text != nil\
    \ else {\n                        ~~~~ ^  ~~~\n/tmp/tmprqsz9kbn.swift:11:21: error:\
    \ value of type 'String' has no member 'data'\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n               ~~~~ ^~~~\n/tmp/tmprqsz9kbn.swift:11:40:\
    \ error: type 'String' has no member 'Encoding'\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n                                ~~~~~~ ^~~~~~~~\n/tmp/tmprqsz9kbn.swift:12:51:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var digest = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \             ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmprqsz9kbn.swift:13:18: error: cannot\
    \ find 'CC_MD5' in scope\n    let result = CC_MD5(data.bytes, CC_LONG(data.count),\
    \ &digest)\n                 ^~~~~~\n/tmp/tmprqsz9kbn.swift:13:37: error: cannot\
    \ find 'CC_LONG' in scope\n    let result = CC_MD5(data.bytes, CC_LONG(data.count),\
    \ &digest)\n                                    ^~~~~~~\n/tmp/tmprqsz9kbn.swift:16:24:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    for i in 0 ..< Int(CC_MD5_DIGEST_LENGTH)\
    \ {\n                       ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard let data = text.data(using: .utf8) else { return\
    \ nil }\n    var digestData = Data(repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    _ = digestData.withUnsafeMutableBytes { digestBytes in\n        data.withUnsafeBytes\
    \ { dataBytes in\n            CC_MD5(dataBytes, CC_LONG(data.count), digestBytes)\n\
    \        }\n    }\n    return digestData.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpv27692q_.swift:7:27: error: value of type 'String' has no member\
    \ 'data'\n    guard let data = text.data(using: .utf8) else { return nil }\n \
    \                    ~~~~ ^~~~\n/tmp/tmpv27692q_.swift:7:40: error: cannot infer\
    \ contextual base in reference to member 'utf8'\n    guard let data = text.data(using:\
    \ .utf8) else { return nil }\n                                      ~^~~~\n/tmp/tmpv27692q_.swift:8:22:\
    \ error: cannot find 'Data' in scope\n    var digestData = Data(repeating: 0,\
    \ count: Int(CC_MD5_DIGEST_LENGTH))\n                     ^~~~\n/tmp/tmpv27692q_.swift:8:52:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var digestData = Data(repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \              ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv27692q_.swift:11:13: error: cannot\
    \ find 'CC_MD5' in scope\n            CC_MD5(dataBytes, CC_LONG(data.count), digestBytes)\n\
    \            ^~~~~~\n/tmp/tmpv27692q_.swift:11:31: error: cannot find 'CC_LONG'\
    \ in scope\n            CC_MD5(dataBytes, CC_LONG(data.count), digestBytes)\n\
    \                              ^~~~~~~\n/tmp/tmpv27692q_.swift:14:35: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return digestData.map { String(format: \"%02x\", $0) }.joined()\n         \
    \                         ^~~~~~~\n                                   repeating\
    \       count: \n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    var md5 = md5Init\n    md5.Data = text.utf8.map({\
    \ text in\n        let data: ByteArray<Array<UInt8>> = text.data(using: .utf8)!\n\
    \        return md5(data: data)\n    })\n    let hashData = md5()\n    let hashData\
    \ = hashData.bytes\n    md5Init = nil\n    let hashString = hashData.map { String(format:\
    \ \"%02x\", $0) }.joined()\n    return hashString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7jxch5p_.swift:7:15: error: cannot find 'md5Init' in scope\n  \
    \  var md5 = md5Init\n              ^~~~~~~\n/tmp/tmp7jxch5p_.swift:9:19: error:\
    \ cannot find type 'ByteArray' in scope\n        let data: ByteArray<Array<UInt8>>\
    \ = text.data(using: .utf8)!\n                  ^~~~~~~~~\n/tmp/tmp7jxch5p_.swift:8:14:\
    \ error: type of expression is ambiguous without more context\n    md5.Data =\
    \ text.utf8.map({ text in\n    ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7jxch5p_.swift:14:5:\
    \ error: cannot find 'md5Init' in scope\n    md5Init = nil\n    ^~~~~~~\n/tmp/tmp7jxch5p_.swift:15:43:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let hashString = hashData.map { String(format: \"%02x\", $0) }.joined()\n\
    \                                          ^~~~~~~\n                         \
    \                  repeating       count: \n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let hash = MD5()\n    hash.update(text)\n    return\
    \ hash.finish()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0n_66ktu.swift:7:16: error: cannot find 'MD5' in scope\n    let\
    \ hash = MD5()\n               ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let md5 = MD5()\n    md5.update(text.data(using: .utf8)!)\n    guard let data\
    \ = md5.output() else {\n        return nil\n    }\n    return String(data: data,\
    \ encoding: .utf8) ?? \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzeph3bv3.swift:10:15: error: cannot find 'MD5' in scope\n    let\
    \ md5 = MD5()\n              ^~~\n/tmp/tmpzeph3bv3.swift:11:21: error: value of\
    \ type 'String' has no member 'data'\n    md5.update(text.data(using: .utf8)!)\n\
    \               ~~~~ ^~~~\n/tmp/tmpzeph3bv3.swift:11:34: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    md5.update(text.data(using: .utf8)!)\n\
    \                                ~^~~~\n/tmp/tmpzeph3bv3.swift:15:42: error: extra\
    \ argument 'encoding' in call\n    return String(data: data, encoding: .utf8)\
    \ ?? \"\"\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpzeph3bv3.swift:15:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: data, encoding: .utf8) ?? \"\"\n                              \
    \          ~^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    let hashData = data.md5()\n    let hash = String(hashData)\n    return hash\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphmfa6ah6.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmphmfa6ah6.swift:7:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    // Return nil if 'text' is nil or empty\n    if text\
    \ == \"\" {\n        return nil\n    }\n\n    let input = [UInt8](text.utf8)\n\
    \    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\n   \
    \ if CC_MD5(input.count, &input) != CC_MD5_DIGEST_LENGTH {\n        return nil\n\
    \    }\n\n    if CC_MD5(input, &md5) != CC_MD5_DIGEST_LENGTH {\n        return\
    \ nil\n    }\n\n    return String(data: Data(bytes: md5), encoding: .utf8)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp22vswpio.swift:13:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp22vswpio.swift:15:8:\
    \ error: cannot find 'CC_MD5' in scope\n    if CC_MD5(input.count, &input) !=\
    \ CC_MD5_DIGEST_LENGTH {\n       ^~~~~~\n/tmp/tmp22vswpio.swift:15:39: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    if CC_MD5(input.count, &input)\
    \ != CC_MD5_DIGEST_LENGTH {\n                                      ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp22vswpio.swift:15:28: error: cannot pass immutable value as inout argument:\
    \ 'input' is a 'let' constant\n    if CC_MD5(input.count, &input) != CC_MD5_DIGEST_LENGTH\
    \ {\n                           ^~~~~~\n/tmp/tmp22vswpio.swift:12:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let input = [UInt8](text.utf8)\n    ^~~\n\
    \    var\n/tmp/tmp22vswpio.swift:19:8: error: cannot find 'CC_MD5' in scope\n\
    \    if CC_MD5(input, &md5) != CC_MD5_DIGEST_LENGTH {\n       ^~~~~~\n/tmp/tmp22vswpio.swift:19:31:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    if CC_MD5(input, &md5)\
    \ != CC_MD5_DIGEST_LENGTH {\n                              ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp22vswpio.swift:23:25: error: cannot find 'Data' in scope\n    return String(data:\
    \ Data(bytes: md5), encoding: .utf8)\n                        ^~~~\n/tmp/tmp22vswpio.swift:23:54:\
    \ error: extra argument 'encoding' in call\n    return String(data: Data(bytes:\
    \ md5), encoding: .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmp22vswpio.swift:23:54: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    return String(data: Data(bytes: md5), encoding: .utf8)\n\
    \                                                    ~^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n\n \
    \   var md5hex = [String]()\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\n\
    \    if CC_MD5(data, CC_LONG(text.utf8.count), &digest) == CC_MD5_SUCCESS {\n\
    \        for i in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n            md5hex.append(String(format:\
    \ \"%02x\", digest[i]))\n        }\n    }\n\n    return md5hex.joinWithSeparator(\"\
    \").lowercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpn7o5mmnd.swift:12:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpn7o5mmnd.swift:12:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpn7o5mmnd.swift:13:51: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var digest = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \             ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn7o5mmnd.swift:15:8: error: cannot\
    \ find 'CC_MD5' in scope\n    if CC_MD5(data, CC_LONG(text.utf8.count), &digest)\
    \ == CC_MD5_SUCCESS {\n       ^~~~~~\n/tmp/tmpn7o5mmnd.swift:15:21: error: cannot\
    \ find 'CC_LONG' in scope\n    if CC_MD5(data, CC_LONG(text.utf8.count), &digest)\
    \ == CC_MD5_SUCCESS {\n                    ^~~~~~~\n/tmp/tmpn7o5mmnd.swift:15:59:\
    \ error: cannot find 'CC_MD5_SUCCESS' in scope\n    if CC_MD5(data, CC_LONG(text.utf8.count),\
    \ &digest) == CC_MD5_SUCCESS {\n                                             \
    \             ^~~~~~~~~~~~~~\n/tmp/tmpn7o5mmnd.swift:16:26: error: cannot find\
    \ 'CC_MD5_DIGEST_LENGTH' in scope\n        for i in 0..<Int(CC_MD5_DIGEST_LENGTH)\
    \ {\n                         ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn7o5mmnd.swift:21:19:\
    \ error: value of type '[String]' has no member 'joinWithSeparator'\n    return\
    \ md5hex.joinWithSeparator(\"\").lowercased()\n           ~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return md5(stringToBytes(text))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpthj_psi_.swift:7:12: error: cannot find 'md5' in scope\n    return\
    \ md5(stringToBytes(text))\n           ^~~\n/tmp/tmpthj_psi_.swift:7:16: error:\
    \ cannot find 'stringToBytes' in scope\n    return md5(stringToBytes(text))\n\
    \               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return md5(string_to_bytes(text))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpol8m99l2.swift:7:12: error: cannot find 'md5' in scope\n    return\
    \ md5(string_to_bytes(text))\n           ^~~\n/tmp/tmpol8m99l2.swift:7:16: error:\
    \ cannot find 'string_to_bytes' in scope\n    return md5(string_to_bytes(text))\n\
    \               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard let input = text.data(using: String.Encoding.utf8)\
    \ else { return nil }\n    let md5 = MessageDigest.md5(input)\n    return String(data:\
    \ md5, encoding: String.Encoding.utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpq4mz30qo.swift:7:28: error: value of type 'String' has no member\
    \ 'data'\n    guard let input = text.data(using: String.Encoding.utf8) else {\
    \ return nil }\n                      ~~~~ ^~~~\n/tmp/tmpq4mz30qo.swift:7:47:\
    \ error: type 'String' has no member 'Encoding'\n    guard let input = text.data(using:\
    \ String.Encoding.utf8) else { return nil }\n                                \
    \       ~~~~~~ ^~~~~~~~\n/tmp/tmpq4mz30qo.swift:8:15: error: cannot find 'MessageDigest'\
    \ in scope\n    let md5 = MessageDigest.md5(input)\n              ^~~~~~~~~~~~~\n\
    /tmp/tmpq4mz30qo.swift:9:56: error: extra argument 'encoding' in call\n    return\
    \ String(data: md5, encoding: String.Encoding.utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpq4mz30qo.swift:9:47: error: type 'String' has no member 'Encoding'\n \
    \   return String(data: md5, encoding: String.Encoding.utf8)\n               \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n\treturn md5(string_to_utf8(text))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpz3uyao1z.swift:7:9: error: cannot find 'md5' in scope\n       \
    \ return md5(string_to_utf8(text))\n               ^~~\n/tmp/tmpz3uyao1z.swift:7:13:\
    \ error: cannot find 'string_to_utf8' in scope\n        return md5(string_to_utf8(text))\n\
    \                   ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let hashData = text.md5()\n    return hashData.base64EncodedStringWithOptions(.Encoding64CharacterLineLength)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpu8g4kl6d.swift:10:25: error: value of type 'String' has no member\
    \ 'md5'\n    let hashData = text.md5()\n                   ~~~~ ^~~\n/tmp/tmpu8g4kl6d.swift:11:53:\
    \ error: cannot infer contextual base in reference to member 'Encoding64CharacterLineLength'\n\
    \    return hashData.base64EncodedStringWithOptions(.Encoding64CharacterLineLength)\n\
    \                                                   ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let utf8bytes = [UInt8](text.utf8)\n    let hash =\
    \ MD5(utf8bytes)\n    return hash.hexString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphy5yd56p.swift:8:16: error: cannot find 'MD5' in scope\n    let\
    \ hash = MD5(utf8bytes)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5 = MD5()\n    md5.update(text.data(using: .utf8)!)\n    let result =\
    \ md5.result()\n    return result.base64EncodedString()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpkl14a3w3.swift:10:15: error: cannot find 'MD5' in scope\n    var\
    \ md5 = MD5()\n              ^~~\n/tmp/tmpkl14a3w3.swift:11:21: error: value of\
    \ type 'String' has no member 'data'\n    md5.update(text.data(using: .utf8)!)\n\
    \               ~~~~ ^~~~\n/tmp/tmpkl14a3w3.swift:11:34: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    md5.update(text.data(using: .utf8)!)\n\
    \                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: .utf8)\n    var digest\
    \ = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    if CC_MD5_Init(&digest)\
    \ != 0 {\n        return nil\n    }\n    if CC_MD5_Update(&digest, &data!, UInt32(data.count))\
    \ != 0 {\n        return nil\n    }\n    if CC_MD5_Final(&digest, &digest) !=\
    \ 0 {\n        return nil\n    }\n    let hexString = digest.map { String(format:\
    \ \"%02x\", $0) }.joined()\n    return hexString.lowercased()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpov9vk44c.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpov9vk44c.swift:7:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpov9vk44c.swift:8:51:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var digest = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \             ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpov9vk44c.swift:9:8: error: cannot\
    \ find 'CC_MD5_Init' in scope\n    if CC_MD5_Init(&digest) != 0 {\n       ^~~~~~~~~~~\n\
    /tmp/tmpov9vk44c.swift:12:8: error: cannot find 'CC_MD5_Update' in scope\n   \
    \ if CC_MD5_Update(&digest, &data!, UInt32(data.count)) != 0 {\n       ^~~~~~~~~~~~~\n\
    /tmp/tmpov9vk44c.swift:15:8: error: cannot find 'CC_MD5_Final' in scope\n    if\
    \ CC_MD5_Final(&digest, &digest) != 0 {\n       ^~~~~~~~~~~~\n/tmp/tmpov9vk44c.swift:18:40:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let hexString = digest.map { String(format: \"%02x\", $0) }.joined()\n  \
    \                                     ^~~~~~~\n                              \
    \          repeating       count: \n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let digest = MD5(string: text)\n    return String(digest.bytes)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp_3mc_0wc.swift:7:18: error: cannot find 'MD5' in scope\n    let\
    \ digest = MD5(string: text)\n                 ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ var md5sum = MD5Hash()\n    md5sum.update(text.data(using: String.Encoding.utf8))\n\
    \    return md5sum.digest().base64EncodedString()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmptia0m0tg.swift:10:18: error: cannot find 'MD5Hash' in scope\n \
    \   var md5sum = MD5Hash()\n                 ^~~~~~~\n/tmp/tmptia0m0tg.swift:11:24:\
    \ error: value of type 'String' has no member 'data'\n    md5sum.update(text.data(using:\
    \ String.Encoding.utf8))\n                  ~~~~ ^~~~\n/tmp/tmptia0m0tg.swift:11:43:\
    \ error: type 'String' has no member 'Encoding'\n    md5sum.update(text.data(using:\
    \ String.Encoding.utf8))\n                                   ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let textAsHex = text.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"%\")\n    guard let data = textAsHex.data(using: String.Encoding.utf8)\
    \ else { return nil }\n    return data.md5()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpkemubyge.swift:7:26: error: value of type 'String' has no member\
    \ 'stringByReplacingOccurrencesOfString'\n    let textAsHex = text.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"%\")\n                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkemubyge.swift:8:51: error: type 'String' has no member 'Encoding'\n \
    \   guard let data = textAsHex.data(using: String.Encoding.utf8) else { return\
    \ nil }\n                                           ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let hashed = md5(text.utf8CString)\n    if hashed.count\
    \ < 16 {\n        return nil\n    }\n    return String(hashed[..])\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpclayuq6c.swift:7:18: error: cannot find 'md5' in scope\n    let\
    \ hashed = md5(text.utf8CString)\n                 ^~~\n/tmp/tmpclayuq6c.swift:11:26:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n    return String(hashed[..])\n\
    \                         ^~\n                         ...\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    var md5 = md5()\n    if text == \"\" {\n        return\
    \ nil\n    }\n    md5.update_string(text)\n    return md5.result()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpanho2kpw.swift:7:15: error: use of local variable 'md5' before\
    \ its declaration\n    var md5 = md5()\n              ^\n/tmp/tmpanho2kpw.swift:7:9:\
    \ note: 'md5' declared here\n    var md5 = md5()\n        ^\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    var md5Hash = \"\"\n\n    guard let data = text.data(using:\
    \ String.Encoding.utf8) else {\n        return nil\n    }\n\n    guard let digestData\
    \ = data.md5() else {\n        return nil\n    }\n\n    md5Hash = String(data:\
    \ digestData, encoding: String.Encoding.utf8)!\n\n    return md5Hash\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6al7uz8m.swift:9:27: error: value of type 'String' has no member\
    \ 'data'\n    guard let data = text.data(using: String.Encoding.utf8) else {\n\
    \                     ~~~~ ^~~~\n/tmp/tmp6al7uz8m.swift:9:46: error: type 'String'\
    \ has no member 'Encoding'\n    guard let data = text.data(using: String.Encoding.utf8)\
    \ else {\n                                      ~~~~~~ ^~~~~~~~\n/tmp/tmp6al7uz8m.swift:17:66:\
    \ error: extra argument 'encoding' in call\n    md5Hash = String(data: digestData,\
    \ encoding: String.Encoding.utf8)!\n                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmp6al7uz8m.swift:17:57: error: type 'String' has no member 'Encoding'\n\
    \    md5Hash = String(data: digestData, encoding: String.Encoding.utf8)!\n   \
    \                                              ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n\n \
    \   var digest = MD5.New()\n    digest.Write([]byte(text))\n    return hex.EncodeToString(digest.Sum(nil))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp48pqtilc.swift:12:20: error: expected ',' separator\n    digest.Write([]byte(text))\n\
    \                   ^\n                   ,\n/tmp/tmp48pqtilc.swift:11:18: error:\
    \ cannot find 'MD5' in scope\n    var digest = MD5.New()\n                 ^~~\n\
    /tmp/tmp48pqtilc.swift:12:20: error: cannot find 'byte' in scope\n    digest.Write([]byte(text))\n\
    \                   ^~~~\n/tmp/tmp48pqtilc.swift:13:12: error: cannot find 'hex'\
    \ in scope\n    return hex.EncodeToString(digest.Sum(nil))\n           ^~~\n/tmp/tmp48pqtilc.swift:13:42:\
    \ error: 'nil' requires a contextual type\n    return hex.EncodeToString(digest.Sum(nil))\n\
    \                                         ^\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let hexdigest = md5(text.utf8)\n    return hexdigest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0rpty96p.swift:7:21: error: cannot find 'md5' in scope\n    let\
    \ hexdigest = md5(text.utf8)\n                    ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    let\
    \ data = text.data(using: .utf8)\n    if data != nil {\n        var length = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(data.bytes, CC_LONG(data.count),\
    \ &length) //\n        for i in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n            hash[i]\
    \ = UInt8(length[i])\n        }\n    }\n    return String(data: hash, encoding:\
    \ .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpcutapo0n.swift:10:49: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcutapo0n.swift:11:21:\
    \ error: value of type 'String' has no member 'data'\n    let data = text.data(using:\
    \ .utf8)\n               ~~~~ ^~~~\n/tmp/tmpcutapo0n.swift:11:34: error: cannot\
    \ infer contextual base in reference to member 'utf8'\n    let data = text.data(using:\
    \ .utf8)\n                                ~^~~~\n/tmp/tmpcutapo0n.swift:13:55:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var length = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcutapo0n.swift:14:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(data.bytes, CC_LONG(data.count), &length)\
    \ //\n        ^~~~~~\n/tmp/tmpcutapo0n.swift:14:28: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(data.bytes, CC_LONG(data.count), &length) //\n    \
    \                       ^~~~~~~\n/tmp/tmpcutapo0n.swift:15:26: error: cannot find\
    \ 'CC_MD5_DIGEST_LENGTH' in scope\n        for i in 0..<Int(CC_MD5_DIGEST_LENGTH)\
    \ {\n                         ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcutapo0n.swift:19:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: hash, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpcutapo0n.swift:19:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let hash = MD5()\n    hash.update(text.utf8)\n    return hash.final()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpipfuugwc.swift:10:16: error: cannot find 'MD5' in scope\n    let\
    \ hash = MD5()\n               ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let digest = md5(text: text).md5\n    return text.isEmpty\
    \ ? nil : digest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp8_4h8s2n.swift:7:18: error: cannot find 'md5' in scope\n    let\
    \ digest = md5(text: text).md5\n                 ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: .utf8)!\n    let hash\
    \ = md5(data: data)\n    return hash.base64EncodedString(options: .lineLength64Characters)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpppcdnoco.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpppcdnoco.swift:7:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpppcdnoco.swift:8:16: error: cannot find 'md5'\
    \ in scope\n    let hash = md5(data: data)\n               ^~~\n/tmp/tmpppcdnoco.swift:9:47:\
    \ error: cannot infer contextual base in reference to member 'lineLength64Characters'\n\
    \    return hash.base64EncodedString(options: .lineLength64Characters)\n     \
    \                                        ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return text.hashMD5()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpyme7ow5v.swift:7:17: error: value of type 'String' has no member\
    \ 'hashMD5'\n    return text.hashMD5()\n           ~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    if\
    \ CC_MD5(text.utf8CString, CC_LONG(text.utf16.count), &digest) == CC_MD5_DIGEST_LENGTH\
    \ {\n        return String(cString: digest)\n    }\n    return nil\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp3ze26cu0.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3ze26cu0.swift:11:8:\
    \ error: cannot find 'CC_MD5' in scope\n    if CC_MD5(text.utf8CString, CC_LONG(text.utf16.count),\
    \ &digest) == CC_MD5_DIGEST_LENGTH {\n       ^~~~~~\n/tmp/tmp3ze26cu0.swift:11:33:\
    \ error: cannot find 'CC_LONG' in scope\n    if CC_MD5(text.utf8CString, CC_LONG(text.utf16.count),\
    \ &digest) == CC_MD5_DIGEST_LENGTH {\n                                ^~~~~~~\n\
    /tmp/tmp3ze26cu0.swift:11:72: error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n\
    \    if CC_MD5(text.utf8CString, CC_LONG(text.utf16.count), &digest) == CC_MD5_DIGEST_LENGTH\
    \ {\n                                                                       ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.characters.count == 0 {\n        return nil\n\
    \    }\n    var md5 = Data()\n    var charBytes = [UInt8]()\n    let chars = text.utf8CString\n\
    \    for i in 0..<text.characters.count {\n        let c = chars[i]\n        charBytes.append(c)\n\
    \    }\n    _ = md5.append(charBytes)\n    let string = md5.hexString\n    return\
    \ string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpymgm3n7k.swift:7:13: error: 'characters' is unavailable: Please\
    \ use String directly\n    if text.characters.count == 0 {\n            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpymgm3n7k.swift:10:15:\
    \ error: cannot find 'Data' in scope\n    var md5 = Data()\n              ^~~~\n\
    /tmp/tmpymgm3n7k.swift:13:23: error: 'characters' is unavailable: Please use String\
    \ directly\n    for i in 0..<text.characters.count {\n                      ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpymgm3n7k.swift:15:26:\
    \ error: cannot convert value of type 'CChar' (aka 'Int8') to expected argument\
    \ type 'UInt8'\n        charBytes.append(c)\n                         ^\n    \
    \                     UInt8( )\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard let hash = text.data(using: .utf8)?.base64EncodedString()\
    \ else { return nil }\n    return String(format: \"%x\", hash)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp03v6djvl.swift:7:27: error: value of type 'String' has no member\
    \ 'data'\n    guard let hash = text.data(using: .utf8)?.base64EncodedString()\
    \ else { return nil }\n                     ~~~~ ^~~~\n/tmp/tmp03v6djvl.swift:7:40:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    guard\
    \ let hash = text.data(using: .utf8)?.base64EncodedString() else { return nil\
    \ }\n                                      ~^~~~\n/tmp/tmp03v6djvl.swift:8:18:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return String(format: \"%x\", hash)\n                 ^~~~~~~\n         \
    \         repeating     count: \n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.characters.count == 0 {\n        return nil\n\
    \    }\n    let data = text.data(using: String.Encoding.utf8)\n    if let hash\
    \ = data.md5() {\n        return String(data: hash, encoding: .utf8)\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpma6mvuv1.swift:7:13: error: 'characters' is unavailable: Please\
    \ use String directly\n    if text.characters.count == 0 {\n            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpma6mvuv1.swift:10:21:\
    \ error: value of type 'String' has no member 'data'\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n               ~~~~ ^~~~\n/tmp/tmpma6mvuv1.swift:10:40:\
    \ error: type 'String' has no member 'Encoding'\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n                                ~~~~~~ ^~~~~~~~\n/tmp/tmpma6mvuv1.swift:12:46:\
    \ error: extra argument 'encoding' in call\n        return String(data: hash,\
    \ encoding: .utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpma6mvuv1.swift:12:46:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n        return\
    \ String(data: hash, encoding: .utf8)\n                                      \
    \      ~^~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard let md5Data = text.data(using: .utf8)?.base64EncodedData(options:\
    \ []) else { return nil }\n    return String(data: md5Data, encoding: .utf8)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpa8j7wexb.swift:7:30: error: value of type 'String' has no member\
    \ 'data'\n    guard let md5Data = text.data(using: .utf8)?.base64EncodedData(options:\
    \ []) else { return nil }\n                        ~~~~ ^~~~\n/tmp/tmpa8j7wexb.swift:7:43:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    guard\
    \ let md5Data = text.data(using: .utf8)?.base64EncodedData(options: []) else {\
    \ return nil }\n                                         ~^~~~\n/tmp/tmpa8j7wexb.swift:8:45:\
    \ error: extra argument 'encoding' in call\n    return String(data: md5Data, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpa8j7wexb.swift:8:45:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: md5Data, encoding: .utf8)\n                                   \
    \        ~^~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard let data = text.data(using: .utf8) else {\n\
    \        return nil\n    }\n    guard let hash = data.md5() else {\n        return\
    \ nil\n    }\n    let hash = String(hash)\n    return hash\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1qimi7gy.swift:7:27: error: value of type 'String' has no member\
    \ 'data'\n    guard let data = text.data(using: .utf8) else {\n              \
    \       ~~~~ ^~~~\n/tmp/tmp1qimi7gy.swift:7:40: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    guard let data = text.data(using: .utf8)\
    \ else {\n                                      ~^~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    let ctx = CC_MD5_CTX.init()\n    var status: CC_LONG = 0\n    let len = (text\
    \ as NSString).lengthOfBytes(using: String.Encoding.utf8)\n    var buffer = [UInt8](repeating:\
    \ 0, count: Int(len))\n\n    if status != 0 {\n        return nil\n    }\n\n \
    \   status = CC_MD5_Init(ctx)\n    if status != 0 {\n        return nil\n    }\n\
    \n    status = CC_MD5_Update(ctx, (text as NSString).bytes, (text as NSString).length)\n\
    \    if status != 0 {\n        return nil\n    }\n\n    status = CC_MD5_Final(digest,\
    \ &ctx)\n    if status != 0 {\n        return nil\n    }\n\n    var md5Hash =\
    \ String(cString: digest)\n\n    return md5Hash\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp_0a5mlsc.swift:7:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_0a5mlsc.swift:8:15:\
    \ error: cannot find 'CC_MD5_CTX' in scope\n    let ctx = CC_MD5_CTX.init()\n\
    \              ^~~~~~~~~~\n/tmp/tmp_0a5mlsc.swift:9:17: error: cannot find type\
    \ 'CC_LONG' in scope\n    var status: CC_LONG = 0\n                ^~~~~~~\n/tmp/tmp_0a5mlsc.swift:10:24:\
    \ error: cannot find type 'NSString' in scope\n    let len = (text as NSString).lengthOfBytes(using:\
    \ String.Encoding.utf8)\n                       ^~~~~~~~\n/tmp/tmp_0a5mlsc.swift:10:34:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let len = (text\
    \ as NSString).lengthOfBytes(using: String.Encoding.utf8)\n              ~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmp_0a5mlsc.swift:10:62: error: type 'String' has no member\
    \ 'Encoding'\n    let len = (text as NSString).lengthOfBytes(using: String.Encoding.utf8)\n\
    \                                                      ~~~~~~ ^~~~~~~~\n/tmp/tmp_0a5mlsc.swift:17:14:\
    \ error: cannot find 'CC_MD5_Init' in scope\n    status = CC_MD5_Init(ctx)\n \
    \            ^~~~~~~~~~~\n/tmp/tmp_0a5mlsc.swift:22:14: error: cannot find 'CC_MD5_Update'\
    \ in scope\n    status = CC_MD5_Update(ctx, (text as NSString).bytes, (text as\
    \ NSString).length)\n             ^~~~~~~~~~~~~\n/tmp/tmp_0a5mlsc.swift:22:42:\
    \ error: cannot find type 'NSString' in scope\n    status = CC_MD5_Update(ctx,\
    \ (text as NSString).bytes, (text as NSString).length)\n                     \
    \                    ^~~~~~~~\n/tmp/tmp_0a5mlsc.swift:22:68: error: cannot find\
    \ type 'NSString' in scope\n    status = CC_MD5_Update(ctx, (text as NSString).bytes,\
    \ (text as NSString).length)\n                                               \
    \                    ^~~~~~~~\n/tmp/tmp_0a5mlsc.swift:22:52: error: value of type\
    \ 'String' has no member 'bytes'\n    status = CC_MD5_Update(ctx, (text as NSString).bytes,\
    \ (text as NSString).length)\n                                "
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.trim().isEmpty {\n        return nil\n   \
    \ }\n    \n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = CC_MD5(text.utf8CString, CC_LONG(text.utf16Count), &digest)\n \
    \   \n    return String(cString: digest)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpr92vqx5b.swift:7:13: error: value of type 'String' has no member\
    \ 'trim'\n    if text.trim().isEmpty {\n       ~~~~ ^~~~\n/tmp/tmpr92vqx5b.swift:11:51:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var digest = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \             ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpr92vqx5b.swift:13:9: error: cannot\
    \ find 'CC_MD5' in scope\n    _ = CC_MD5(text.utf8CString, CC_LONG(text.utf16Count),\
    \ &digest)\n        ^~~~~~\n/tmp/tmpr92vqx5b.swift:13:34: error: cannot find 'CC_LONG'\
    \ in scope\n    _ = CC_MD5(text.utf8CString, CC_LONG(text.utf16Count), &digest)\n\
    \                                 ^~~~~~~\n/tmp/tmpr92vqx5b.swift:13:47: error:\
    \ value of type 'String' has no member 'utf16Count'\n    _ = CC_MD5(text.utf8CString,\
    \ CC_LONG(text.utf16Count), &digest)\n                                       \
    \  ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return text.md5()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9az1shcg.swift:7:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5()\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return MD5Hash(text, true)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpnizcx__l.swift:7:12: error: cannot find 'MD5Hash' in scope\n  \
    \  return MD5Hash(text, true)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5Data = MD5_CTX()\n    var md5String = [UInt8](count: Int(MD5_DIGEST_LENGTH),\
    \ repeatedValue: 0)\n    var buffer = UnsafeMutablePointer<UInt8>(md5Data)\n \
    \   defer {\n        free(md5String)\n    }\n    guard let _ = text.data(using:\
    \ String.Encoding.utf8) else {\n        return nil\n    }\n    _ = text.utf8.withUnsafeMutableBytes({\
    \ buffer in\n        CC_MD5(self.bytes, buffer, UInt32(MD5_DIGEST_LENGTH))\n \
    \   })\n    return MD5String(data: md5Data)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kj780ky.swift:10:19: error: cannot find 'MD5_CTX' in scope\n \
    \   var md5Data = MD5_CTX()\n                  ^~~~~~~\n/tmp/tmp9kj780ky.swift:11:40:\
    \ error: cannot find 'MD5_DIGEST_LENGTH' in scope\n    var md5String = [UInt8](count:\
    \ Int(MD5_DIGEST_LENGTH), repeatedValue: 0)\n                                \
    \       ^~~~~~~~~~~~~~~~~\n/tmp/tmp9kj780ky.swift:11:21: error: no exact matches\
    \ in call to initializer \n    var md5String = [UInt8](count: Int(MD5_DIGEST_LENGTH),\
    \ repeatedValue: 0)\n                    ^\n/tmp/tmp9kj780ky.swift:11:21: note:\
    \ found candidate with type '(UInt8, Int) -> [UInt8]'\n    var md5String = [UInt8](count:\
    \ Int(MD5_DIGEST_LENGTH), repeatedValue: 0)\n                    ^\n/tmp/tmp9kj780ky.swift:14:9:\
    \ error: cannot find 'free' in scope\n        free(md5String)\n        ^~~~\n\
    /tmp/tmp9kj780ky.swift:16:24: error: value of type 'String' has no member 'data'\n\
    \    guard let _ = text.data(using: String.Encoding.utf8) else {\n           \
    \       ~~~~ ^~~~\n/tmp/tmp9kj780ky.swift:16:43: error: type 'String' has no member\
    \ 'Encoding'\n    guard let _ = text.data(using: String.Encoding.utf8) else {\n\
    \                                   ~~~~~~ ^~~~~~~~\n/tmp/tmp9kj780ky.swift:20:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(self.bytes, buffer, UInt32(MD5_DIGEST_LENGTH))\n\
    \        ^~~~~~\n/tmp/tmp9kj780ky.swift:20:16: error: cannot find 'self' in scope;\
    \ did you mean to use it in a type or extension context?\n        CC_MD5(self.bytes,\
    \ buffer, UInt32(MD5_DIGEST_LENGTH))\n               ^~~~\n/tmp/tmp9kj780ky.swift:20:43:\
    \ error: cannot find 'MD5_DIGEST_LENGTH' in scope\n        CC_MD5(self.bytes,\
    \ buffer, UInt32(MD5_DIGEST_LENGTH))\n                                       \
    \   ^~~~~~~~~~~~~~~~~\n/tmp/tmp9kj780ky.swift:22:12: error: cannot find 'MD5String'\
    \ in scope\n    return MD5String(data: md5Data)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let md5 = MD5.new()\n    md5.update(text.utf8)\n    let hexString = String(cString:\
    \ md5.digest())\n    let hexString = hexString.replacingOccurrences(of: \"\\n\"\
    , with: \"\")\n    return hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmplarbg7k2.swift:10:15: error: cannot find 'MD5' in scope\n    let\
    \ md5 = MD5.new()\n              ^~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let data = (text as NSString).data(using: String.Encoding.utf8)\n \
    \   let hash = MD5(data!.bytes)\n    let digest = String(data: hash, encoding:\
    \ String.Encoding.utf8)\n    return digest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpyx6yxaxm.swift:10:25: error: cannot find type 'NSString' in scope\n\
    \    let data = (text as NSString).data(using: String.Encoding.utf8)\n       \
    \                 ^~~~~~~~\n/tmp/tmpyx6yxaxm.swift:10:35: error: value of type\
    \ 'String' has no member 'data'\n    let data = (text as NSString).data(using:\
    \ String.Encoding.utf8)\n               ~~~~~~~~~~~~~~~~~~ ^~~~\n/tmp/tmpyx6yxaxm.swift:10:54:\
    \ error: type 'String' has no member 'Encoding'\n    let data = (text as NSString).data(using:\
    \ String.Encoding.utf8)\n                                              ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmpyx6yxaxm.swift:11:16: error: cannot find 'MD5' in scope\n\
    \    let hash = MD5(data!.bytes)\n               ^~~\n/tmp/tmpyx6yxaxm.swift:12:63:\
    \ error: extra argument 'encoding' in call\n    let digest = String(data: hash,\
    \ encoding: String.Encoding.utf8)\n                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpyx6yxaxm.swift:12:54: error: type 'String' has no member 'Encoding'\n\
    \    let digest = String(data: hash, encoding: String.Encoding.utf8)\n       \
    \                                       ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ return md5.ComputeString(text).HexString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp3dgdwl15.swift:10:12: error: cannot find 'md5' in scope\n    return\
    \ md5.ComputeString(text).HexString()\n           ^~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.characters.count == 0 {\n        return nil\n\
    \    }\n    let data = self.md5(data)\n    if let hash = data[\"md5\"].string,\n\
    \        let trimmedHash = hash.trimmingCharacters(in: .whitespacesAndNewlines),\n\
    \        let trimmedHashData = trimmedHash.data(using: String.Encoding.utf8) {\n\
    \        return trimmedHashData\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6cb49p5v.swift:7:13: error: 'characters' is unavailable: Please\
    \ use String directly\n    if text.characters.count == 0 {\n            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp6cb49p5v.swift:10:16:\
    \ error: cannot find 'self' in scope; did you mean to use it in a type or extension\
    \ context?\n    let data = self.md5(data)\n               ^~~~\n/tmp/tmp6cb49p5v.swift:10:25:\
    \ error: use of local variable 'data' before its declaration\n    let data = self.md5(data)\n\
    \                        ^\n/tmp/tmp6cb49p5v.swift:10:9: note: 'data' declared\
    \ here\n    let data = self.md5(data)\n        ^\n/tmp/tmp6cb49p5v.swift:12:56:\
    \ error: cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \        let trimmedHash = hash.trimmingCharacters(in: .whitespacesAndNewlines),\n\
    \                                                      ~^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6cb49p5v.swift:13:62: error: type 'String' has no member 'Encoding'\n\
    \        let trimmedHashData = trimmedHash.data(using: String.Encoding.utf8) {\n\
    \                                                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _\
    \ = text.utf8.withUnsafeBufferPointer { (buffer: UnsafeBufferPointer<UInt8>) in\n\
    \        CC_MD5(buffer.baseAddress, CC_LONG(buffer.count), digest)\n    }\n  \
    \  return String(cString: digest)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpy7p0jkzu.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy7p0jkzu.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(buffer.baseAddress, CC_LONG(buffer.count),\
    \ digest)\n        ^~~~~~\n/tmp/tmpy7p0jkzu.swift:12:36: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(buffer.baseAddress, CC_LONG(buffer.count), digest)\n\
    \                                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let utf8: NSString = text as NSString\n    return\
    \ md5.md5(utf8.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!).uppercaseString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpl6wpuou3.swift:7:15: error: cannot find type 'NSString' in scope\n\
    \    let utf8: NSString = text as NSString\n              ^~~~~~~~\n/tmp/tmpl6wpuou3.swift:8:12:\
    \ error: cannot find 'md5' in scope\n    return md5.md5(utf8.dataUsingEncoding(NSUTF8StringEncoding,\
    \ allowLossyConversion: false)!).uppercaseString\n           ^~~\n/tmp/tmpl6wpuou3.swift:8:43:\
    \ error: cannot find 'NSUTF8StringEncoding' in scope\n    return md5.md5(utf8.dataUsingEncoding(NSUTF8StringEncoding,\
    \ allowLossyConversion: false)!).uppercaseString\n                           \
    \               ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    guard let hash = MD5.hash(data!) else {\n        return nil\n    }\n    return\
    \ hash.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxmj0lqsm.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmpxmj0lqsm.swift:7:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmpxmj0lqsm.swift:8:22: error:\
    \ cannot find 'MD5' in scope\n    guard let hash = MD5.hash(data!) else {\n  \
    \                   ^~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    var md5 = \"\"\n    for c in text {\n        let value\
    \ = UInt32(c).littleEndian\n        md5 += String(format: \"%02x\", value)\n \
    \   }\n    return md5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmcvhl557.swift:9:21: error: no exact matches in call to initializer\
    \ \n        let value = UInt32(c).littleEndian\n                    ^\nSwift.UInt32:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.UInt32:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.UInt32:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.UInt32:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.UInt32:28:12: note: candidate expects value of\
    \ type 'Builtin.Int32' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int32)\n           ^\nSwift.UInt32:2:23: note: candidate expects value\
    \ of type 'Unicode.Scalar' for parameter #1 (got 'Character')\n    @inlinable\
    \ public init(_ v: Unicode.Scalar)\n                      ^\n/tmp/tmpmcvhl557.swift:10:22:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \        md5 += String(format: \"%02x\", value)\n                     ^~~~~~~\n\
    \                      repeating       count: \n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text != \"\" else { return nil }\n    guard\
    \ let digest = digest(text: text) else {\n        return nil\n    }\n    let hash\
    \ = MD5(digest: digest).hexString\n    return hash\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp49mr0t98.swift:8:24: error: cannot find 'digest' in scope\n   \
    \ guard let digest = digest(text: text) else {\n                       ^~~~~~\n\
    /tmp/tmp49mr0t98.swift:11:16: error: cannot find 'MD5' in scope\n    let hash\
    \ = MD5(digest: digest).hexString\n               ^~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return MD5Hash(text).md5()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpuk9wh6lg.swift:7:12: error: cannot find 'MD5Hash' in scope\n  \
    \  return MD5Hash(text).md5()\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else { return nil }\n    return\
    \ text.md5()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxmcidf99.swift:8:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5()\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = self.md5(text.data(using: .utf8)!)\n    let string = String(data:\
    \ data, encoding: .ascii)\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpvb2bs0am.swift:10:16: error: cannot find 'self' in scope; did you\
    \ mean to use it in a type or extension context?\n    let data = self.md5(text.data(using:\
    \ .utf8)!)\n               ^~~~\n/tmp/tmpvb2bs0am.swift:10:30: error: value of\
    \ type 'String' has no member 'data'\n    let data = self.md5(text.data(using:\
    \ .utf8)!)\n                        ~~~~ ^~~~\n/tmp/tmpvb2bs0am.swift:10:43: error:\
    \ cannot infer contextual base in reference to member 'utf8'\n    let data = self.md5(text.data(using:\
    \ .utf8)!)\n                                         ~^~~~\n/tmp/tmpvb2bs0am.swift:11:48:\
    \ error: extra argument 'encoding' in call\n    let string = String(data: data,\
    \ encoding: .ascii)\n                       ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n/tmp/tmpvb2bs0am.swift:11:48:\
    \ error: cannot infer contextual base in reference to member 'ascii'\n    let\
    \ string = String(data: data, encoding: .ascii)\n                            \
    \                  ~^~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text != \"\" else {\n        return nil\n  \
    \  }\n    let hashData = md5(text.utf8)\n    let hashString = String.fromCString(hashData)\n\
    \    return hashString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpygm4vsa3.swift:10:20: error: cannot find 'md5' in scope\n    let\
    \ hashData = md5(text.utf8)\n                   ^~~\n/tmp/tmpygm4vsa3.swift:11:29:\
    \ error: type 'String' has no member 'fromCString'\n    let hashString = String.fromCString(hashData)\n\
    \                     ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    // Convert the text to byte array and compute the\
    \ md5 hash value.\n    let data = text.data(using: String.Encoding.utf8)\n   \
    \ if let hash = MD5.hash(data!, as: String.Encoding.utf8) {\n        return hash.base64EncodedString()\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1rz05ux_.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp1rz05ux_.swift:8:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmp1rz05ux_.swift:9:19: error:\
    \ cannot find 'MD5' in scope\n    if let hash = MD5.hash(data!, as: String.Encoding.utf8)\
    \ {\n                  ^~~\n/tmp/tmp1rz05ux_.swift:9:46: error: type 'String'\
    \ has no member 'Encoding'\n    if let hash = MD5.hash(data!, as: String.Encoding.utf8)\
    \ {\n                                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return text.md5()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9az1shcg.swift:7:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5()\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013776
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n\n \
    \   let textBytes = text.data(using: .utf8)\n    guard let hash = MD5.hexdigest(digest:\
    \ textBytes) else {\n        return nil\n    }\n    return hash\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpoludgmlm.swift:11:26: error: value of type 'String' has no member\
    \ 'data'\n    let textBytes = text.data(using: .utf8)\n                    ~~~~\
    \ ^~~~\n/tmp/tmpoludgmlm.swift:11:39: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let textBytes = text.data(using: .utf8)\n            \
    \                         ~^~~~\n/tmp/tmpoludgmlm.swift:12:22: error: cannot find\
    \ 'MD5' in scope\n    guard let hash = MD5.hexdigest(digest: textBytes) else {\n\
    \                     ^~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n\tguard !text.isEmpty else { return nil }\n\tlet data\
    \ = text.data(using: String.Encoding.utf8)\n\tlet digest = data.md5()\n\treturn\
    \ digest.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1ie_hxwg.swift:8:18: error: value of type 'String' has no member\
    \ 'data'\n        let data = text.data(using: String.Encoding.utf8)\n        \
    \           ~~~~ ^~~~\n/tmp/tmp1ie_hxwg.swift:8:37: error: type 'String' has no\
    \ member 'Encoding'\n        let data = text.data(using: String.Encoding.utf8)\n\
    \                                    ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return MD5Hash(text)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0tih1vj9.swift:7:12: error: cannot find 'MD5Hash' in scope\n  \
    \  return MD5Hash(text)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let utf8Bytes = text.data(using: .utf8)!\n    let\
    \ hash = MD5(string: utf8Bytes)\n    return hash.hexString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpj43cjys6.swift:7:26: error: value of type 'String' has no member\
    \ 'data'\n    let utf8Bytes = text.data(using: .utf8)!\n                    ~~~~\
    \ ^~~~\n/tmp/tmpj43cjys6.swift:7:39: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let utf8Bytes = text.data(using: .utf8)!\n           \
    \                          ~^~~~\n/tmp/tmpj43cjys6.swift:8:16: error: cannot find\
    \ 'MD5' in scope\n    let hash = MD5(string: utf8Bytes)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n\n \
    \   let data = text.data(using: String.Encoding.utf8)!\n    let digest = data.md5()\n\
    \    return digest.base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp03xna03x.swift:11:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmp03xna03x.swift:11:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else { return nil }\n    let bytes\
    \ = text.data(using: .utf8)\n    let hash = MD5().md5(bytes, using: .utf8)\n \
    \   return String(data: hash!, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpm5w_79gf.swift:8:22: error: value of type 'String' has no member\
    \ 'data'\n    let bytes = text.data(using: .utf8)\n                ~~~~ ^~~~\n\
    /tmp/tmpm5w_79gf.swift:8:35: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let bytes = text.data(using: .utf8)\n                \
    \                 ~^~~~\n/tmp/tmpm5w_79gf.swift:9:16: error: cannot find 'MD5'\
    \ in scope\n    let hash = MD5().md5(bytes, using: .utf8)\n               ^~~\n\
    /tmp/tmpm5w_79gf.swift:9:41: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let hash = MD5().md5(bytes, using: .utf8)\n          \
    \                             ~^~~~\n/tmp/tmpm5w_79gf.swift:10:43: error: extra\
    \ argument 'encoding' in call\n    return String(data: hash!, encoding: .utf8)\n\
    \                 ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpm5w_79gf.swift:10:43:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hash!, encoding: .utf8)\n                                     \
    \    ~^~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let digest = MD5.init()\n    digest.update(text.data(using:\
    \ .utf8)!)\n    guard let hexdigest = digest.digest().hexString else { return\
    \ nil }\n    return hexdigest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwxlty6kj.swift:7:18: error: cannot find 'MD5' in scope\n    let\
    \ digest = MD5.init()\n                 ^~~\n/tmp/tmpwxlty6kj.swift:8:24: error:\
    \ value of type 'String' has no member 'data'\n    digest.update(text.data(using:\
    \ .utf8)!)\n                  ~~~~ ^~~~\n/tmp/tmpwxlty6kj.swift:8:37: error: cannot\
    \ infer contextual base in reference to member 'utf8'\n    digest.update(text.data(using:\
    \ .utf8)!)\n                                   ~^~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.characters.count == 0 {\n        return nil\n\
    \    }\n    var result: String = \"\"\n    for index in text.unicodeScalars {\n\
    \        let value = index.value\n        var value2 = value\n        var value3\
    \ = value2\n        value3 = (value3 << 10) + value2 // convert 2 bytes to 4 bytes\n\
    \        value3 = (value3 >> 8) + (value2 << 8) // shift 4 bytes\n        value3\
    \ = (value3 >> 8) + (value2 << 8) // shift 8 bytes\n        value3 = (value3 >>\
    \ 8) + (value2 << 8) // shift 8 bytes\n        value3 = (value3 >> 8) + (value2\
    \ << 8) // shift 8 bytes\n        value3 = (value3 >> 8) + (value2 << 8) // shift\
    \ 8 bytes\n        value3 = (value3 >> 8) + (value2 << 8) // shift 8 bytes\n \
    \       value3 = (value3 >> 8) + (value2 << 8) // shift 8 bytes\n        value3\
    \ = (value3 >> 8) + (value2 << 8) // shift 8 bytes\n        value3 = (value3 >>\
    \ 8) + (value2 << 8) // shift 8 bytes\n        value3 = (value3 >> 8) + (value2\
    \ << 8) // shift 8 bytes\n        value3 = (value3 >> 8) + (value2 << 8) // shift\
    \ 8 bytes\n        value3 = (value3 >> 8) + (value2 << 8) // shift 8 bytes\n \
    \       value3 = (value3 >> 8) + (value2 << 8) // shift 8 bytes\n        value3\
    \ = (value3 >> 8) + (value2 << 8) // shift 8 bytes\n        value3 = (value3 >>\
    \ 8) + (value2 << 8) // shift 8 bytes\n        value3 = (value3 >> 8) + (value2\
    \ << 8) // shift 8 bytes\n        value3 = (value3 >> 8) + (value2 << 8) // shift\
    \ 8 bytes\n        value3 = (value3 >> 8) + (value2 << 8) // shift 8 bytes\n \
    \       value3 = (value3 >> 8) + (value2 << 8) // shift 8 bytes\n        value3\
    \ = (value3 >> 8) + (value2 << 8) // shift 8 bytes\n        value3 = (value3 >>\
    \ 8) + (value2 << 8) // shift 8 bytes\n        value3 = (value3 >> 8) + (value2\
    \ << 8) // shift 8 bytes\n        value3 = (value3 >> 8) + (value2 << 8) // shift\
    \ 8 bytes\n        value3 = (value3 >> 8) + (value2 << 8) // shift 8 bytes\n \
    \       value3 = (value3 >> 8) + (value2 << 8) // shift 8 bytes\n        value3\
    \ = (value3 >> 8) + (value2 << 8) // shift 8 bytes\n        value3 = (value3 >>\
    \ 8) + (value2 << 8) // \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4yd_uni4.swift:61:78: error: expected '}' at end of brace statement\n\
    assert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )\n                                                                          \
    \   ^\n/tmp/tmp4yd_uni4.swift:6:45: note: to match this opening '{'\nfunc string_to_md5(text:\
    \ String) -> String? {\n                                            ^\n/tmp/tmp4yd_uni4.swift:7:13:\
    \ error: 'characters' is unavailable: Please use String directly\n    if text.characters.count\
    \ == 0 {\n            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp4yd_uni4.swift:46:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n/tmp/tmp4yd_uni4.swift:10:9: warning: variable 'result' was\
    \ never used; consider replacing with '_' or removing it\n    var result: String\
    \ = \"\"\n        ^~~~~~\n        _\n/tmp/tmp4yd_uni4.swift:13:13: warning: variable\
    \ 'value2' was never mutated; consider changing to 'let' constant\n        var\
    \ value2 = value\n        ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let md5 = MD5(data:\
    \ data)\n    return String(data: md5.bytes, encoding: String.Encoding.utf8)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpxwp_alo7.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpxwp_alo7.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n/tmp/tmpxwp_alo7.swift:11:15: error:\
    \ cannot find 'MD5' in scope\n    let md5 = MD5(data: data)\n              ^~~\n\
    /tmp/tmpxwp_alo7.swift:12:62: error: extra argument 'encoding' in call\n    return\
    \ String(data: md5.bytes, encoding: String.Encoding.utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpxwp_alo7.swift:12:53: error: type 'String' has no member 'Encoding'\n\
    \    return String(data: md5.bytes, encoding: String.Encoding.utf8)\n        \
    \                                     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.characters.count == 0 {\n        return nil\n\
    \    }\n\n    let hashedData = Md5.hash(with: text.utf8) ?? []\n\n    return hexStringFromData(hashedData)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpugxan2x0.swift:7:13: error: 'characters' is unavailable: Please\
    \ use String directly\n    if text.characters.count == 0 {\n            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpugxan2x0.swift:11:22:\
    \ error: cannot find 'Md5' in scope\n    let hashedData = Md5.hash(with: text.utf8)\
    \ ?? []\n                     ^~~\n/tmp/tmpugxan2x0.swift:13:12: error: cannot\
    \ find 'hexStringFromData' in scope\n    return hexStringFromData(hashedData)\n\
    \           ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: .utf8)\n    if data.count\
    \ == 0 {\n        return nil\n    }\n    let hash = MD5.hash(data!)\n    let hexString\
    \ = String(data: hash, encoding: .utf8)\n    return hexString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ktriypa.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp2ktriypa.swift:7:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp2ktriypa.swift:11:16:\
    \ error: cannot find 'MD5' in scope\n    let hash = MD5.hash(data!)\n        \
    \       ^~~\n/tmp/tmp2ktriypa.swift:12:51: error: extra argument 'encoding' in\
    \ call\n    let hexString = String(data: hash, encoding: .utf8)\n            \
    \              ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp2ktriypa.swift:12:51: error:\
    \ cannot infer contextual base in reference to member 'utf8'\n    let hexString\
    \ = String(data: hash, encoding: .utf8)\n                                    \
    \             ~^~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ \n    var md5: CString = CString()\n    MD5_CTX md5_ctx\n    MD5Init(&md5_ctx)\n\
    \    MD5Update(&md5_ctx, text.asCString(), text.count)\n    MD5Final(md5.mutableBytes,\
    \ &md5_ctx)\n    let hash = String(data: md5.bytes, encoding: .utf8)\n    return\
    \ hash\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_to_md5(text: \"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpt7lwsq0k.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    MD5_CTX md5_ctx\n           ^\n           ;\n/tmp/tmpt7lwsq0k.swift:11:14:\
    \ error: cannot find type 'CString' in scope\n    var md5: CString = CString()\n\
    \             ^~~~~~~\n/tmp/tmpt7lwsq0k.swift:12:5: error: cannot find 'MD5_CTX'\
    \ in scope\n    MD5_CTX md5_ctx\n    ^~~~~~~\n/tmp/tmpt7lwsq0k.swift:12:13: error:\
    \ cannot find 'md5_ctx' in scope\n    MD5_CTX md5_ctx\n            ^~~~~~~\n/tmp/tmpt7lwsq0k.swift:13:5:\
    \ error: cannot find 'MD5Init' in scope\n    MD5Init(&md5_ctx)\n    ^~~~~~~\n\
    /tmp/tmpt7lwsq0k.swift:13:14: error: cannot find 'md5_ctx' in scope\n    MD5Init(&md5_ctx)\n\
    \             ^~~~~~~\n/tmp/tmpt7lwsq0k.swift:14:5: error: cannot find 'MD5Update'\
    \ in scope\n    MD5Update(&md5_ctx, text.asCString(), text.count)\n    ^~~~~~~~~\n\
    /tmp/tmpt7lwsq0k.swift:14:16: error: cannot find 'md5_ctx' in scope\n    MD5Update(&md5_ctx,\
    \ text.asCString(), text.count)\n               ^~~~~~~\n/tmp/tmpt7lwsq0k.swift:14:30:\
    \ error: value of type 'String' has no member 'asCString'\n    MD5Update(&md5_ctx,\
    \ text.asCString(), text.count)\n                        ~~~~ ^~~~~~~~~\n/tmp/tmpt7lwsq0k.swift:15:5:\
    \ error: cannot find 'MD5Final' in scope\n    MD5Final(md5.mutableBytes, &md5_ctx)\n\
    \    ^~~~~~~~\n/tmp/tmpt7lwsq0k.swift:15:33: error: cannot find 'md5_ctx' in scope\n\
    \    MD5Final(md5.mutableBytes, &md5_ctx)\n                                ^~~~~~~\n\
    /tmp/tmpt7lwsq0k.swift:16:51: error: extra argument 'encoding' in call\n    let\
    \ hash = String(data: md5.bytes, encoding: .utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpt7lwsq0k.swift:16:51: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let hash = String(data: md5.bytes, encoding: .utf8)\n\
    \                                                 ~^~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.characters.count == 0 {\n        return nil\n\
    \    }\n    let data: Data = text.data(using: String.Encoding.utf8)!\n    let\
    \ hash = data.md5()\n    return hash.base64EncodedString()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpf2x31b_9.swift:7:13: error: 'characters' is unavailable: Please\
    \ use String directly\n    if text.characters.count == 0 {\n            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpf2x31b_9.swift:10:15:\
    \ error: cannot find type 'Data' in scope\n    let data: Data = text.data(using:\
    \ String.Encoding.utf8)!\n              ^~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    var md5 : String?\n    var text : Data = text.data(using:\
    \ String.Encoding.utf8) ?? Data()\n    var msg : [UInt8] = [0x5c, 0x65, 0x79,\
    \ 0x73, 0x74, 0x65, 0x6e, 0x74]\n    \n    text.enumerateBytes { (bytes, _, _)\
    \ in\n        msg.withUnsafeMutable() { msg = $0 }\n        let _ = Data(bytes:\
    \ msg, count: msg.count)\n        md5 = md5! + String(data: $0, encoding: String.Encoding.utf8)\n\
    \    }\n    \n    return md5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_5nirw91.swift:14:35: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments; did you mean 'bytes'?\n\
    \        md5 = md5! + String(data: $0, encoding: String.Encoding.utf8)\n     \
    \                             ^~\n                                  bytes\n/tmp/tmp_5nirw91.swift:8:16:\
    \ error: cannot find type 'Data' in scope\n    var text : Data = text.data(using:\
    \ String.Encoding.utf8) ?? Data()\n               ^~~~\n/tmp/tmp_5nirw91.swift:13:17:\
    \ error: cannot find 'Data' in scope\n        let _ = Data(bytes: msg, count:\
    \ msg.count)\n                ^~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let hexDigest = md5(text.utf8)\n    return hexDigest.map { \"%02x\".format($0)\
    \ }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6faiv4tv.swift:10:21: error: cannot find 'md5' in scope\n    let\
    \ hexDigest = md5(text.utf8)\n                    ^~~\n/tmp/tmp6faiv4tv.swift:11:35:\
    \ error: value of type 'String' has no member 'format'\n    return hexDigest.map\
    \ { \"%02x\".format($0) }.joined()\n                           ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    if let digest = data.md5() {\n        return String(data: data, encoding:\
    \ String.Encoding.utf8)\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp3mugj2h_.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp3mugj2h_.swift:7:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n/tmp/tmp3mugj2h_.swift:9:61: error:\
    \ extra argument 'encoding' in call\n        return String(data: data, encoding:\
    \ String.Encoding.utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmp3mugj2h_.swift:9:52: error: type 'String' has no member 'Encoding'\n \
    \       return String(data: data, encoding: String.Encoding.utf8)\n          \
    \                                  ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let md5 = MD5.new(text)\n    return md5.digest().map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjngasc0q.swift:7:15: error: cannot find 'MD5' in scope\n    let\
    \ md5 = MD5.new(text)\n              ^~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.characters.count < 1 {\n        return nil\n\
    \    }\n    let hash = md5(text.utf8CString)\n    return hash.hexString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpo_7et5dg.swift:7:13: error: 'characters' is unavailable: Please\
    \ use String directly\n    if text.characters.count < 1 {\n            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpo_7et5dg.swift:10:16:\
    \ error: cannot find 'md5' in scope\n    let hash = md5(text.utf8CString)\n  \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.characters.count == 0 {\n        return nil\n\
    \    }\n    let md5 = CryptoKitMD5.md5(text.utf8)\n    return base64.StdEncoding.encodeToString(md5.bytes)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp5437yeva.swift:7:13: error: 'characters' is unavailable: Please\
    \ use String directly\n    if text.characters.count == 0 {\n            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5437yeva.swift:10:15:\
    \ error: cannot find 'CryptoKitMD5' in scope\n    let md5 = CryptoKitMD5.md5(text.utf8)\n\
    \              ^~~~~~~~~~~~\n/tmp/tmp5437yeva.swift:11:12: error: cannot find\
    \ 'base64' in scope\n    return base64.StdEncoding.encodeToString(md5.bytes)\n\
    \           ^~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: String.Encoding.utf8)\
    \ ?? Data()\n    let hash = md5(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8) ?? nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2zbh7335.swift:7:58: error: cannot find 'Data' in scope\n    let\
    \ data = text.data(using: String.Encoding.utf8) ?? Data()\n                  \
    \                                       ^~~~\n/tmp/tmp2zbh7335.swift:7:21: error:\
    \ value of type 'String' has no member 'data'\n    let data = text.data(using:\
    \ String.Encoding.utf8) ?? Data()\n               ~~~~ ^~~~\n/tmp/tmp2zbh7335.swift:7:40:\
    \ error: type 'String' has no member 'Encoding'\n    let data = text.data(using:\
    \ String.Encoding.utf8) ?? Data()\n                                ~~~~~~ ^~~~~~~~\n\
    /tmp/tmp2zbh7335.swift:8:16: error: cannot find 'md5' in scope\n    let hash =\
    \ md5(data: data)\n               ^~~\n/tmp/tmp2zbh7335.swift:9:57: error: extra\
    \ argument 'encoding' in call\n    return String(data: hash, encoding: String.Encoding.utf8)\
    \ ?? nil\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp2zbh7335.swift:9:48:\
    \ error: type 'String' has no member 'Encoding'\n    return String(data: hash,\
    \ encoding: String.Encoding.utf8) ?? nil\n                                   \
    \     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: -4
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: Exception
  stderr: 'tmp6658aibg/tmp6658aibg.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af314639c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af314330b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af314330988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af31432f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6658aibg                        0x000056514035f4bc <unavailable> + 5308

    5    libc.so.6                          0x00002af314825460 __libc_start_main +
    245

    6    tmp6658aibg                        0x000056514035ef49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    return MD5String(text.utf8CString)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpayowiwcw.swift:10:12: error: cannot find 'MD5String' in scope\n\
    \    return MD5String(text.utf8CString)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return MD5(text).base64EncodedString()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp9lhc1682.swift:7:12: error: cannot find 'MD5' in scope\n    return\
    \ MD5(text).base64EncodedString()\n           ^~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    // This code was adapted from http://www.diveintoswift.com/get-md5-hash-of-string-using-swift\
    \ which was inspired by https://gist.github.com/JasonSowers/b84e32cae15c590fbd04\n\
    \    let length = text.count\n    guard length > 0 else { return nil }\n\n   \
    \ var buffer = [UInt8](repeating: 0, count: length)\n    let textAsData = text.data(using:\
    \ String.Encoding.utf8)!\n    let hashBytes = UnsafeMutablePointer<UInt8>.allocate(capacity:\
    \ length)\n    var hashData = Data(buffer: &hashBytes, count: length)\n    defer\
    \ {\n        hashData.deallocate()\n        hashBytes.deallocate()\n    }\n\n\
    \    let options: [String: AnyObject] = [\n        kSecDigestMD5: kCFBooleanTrue,\n\
    \        kSecDigestAttributeName: hashData\n    ]\n\n    let status = SecDigest(options:\
    \ options, message: textAsData, input: &buffer, bufferLength: length, output:\
    \ &hashData)\n\n    return status == errSecSuccess ? String(data: hashData, encoding:\
    \ String.Encoding.utf8) : nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7iwal7ml.swift:12:27: error: value of type 'String' has no member\
    \ 'data'\n    let textAsData = text.data(using: String.Encoding.utf8)!\n     \
    \                ~~~~ ^~~~\n/tmp/tmp7iwal7ml.swift:12:46: error: type 'String'\
    \ has no member 'Encoding'\n    let textAsData = text.data(using: String.Encoding.utf8)!\n\
    \                                      ~~~~~~ ^~~~~~~~\n/tmp/tmp7iwal7ml.swift:14:20:\
    \ error: cannot find 'Data' in scope\n    var hashData = Data(buffer: &hashBytes,\
    \ count: length)\n                   ^~~~\n/tmp/tmp7iwal7ml.swift:14:33: error:\
    \ cannot pass immutable value as inout argument: 'hashBytes' is a 'let' constant\n\
    \    var hashData = Data(buffer: &hashBytes, count: length)\n                \
    \                ^~~~~~~~~~\n/tmp/tmp7iwal7ml.swift:13:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let hashBytes = UnsafeMutablePointer<UInt8>.allocate(capacity:\
    \ length)\n    ^~~\n    var\n/tmp/tmp7iwal7ml.swift:21:9: error: cannot find 'kSecDigestMD5'\
    \ in scope\n        kSecDigestMD5: kCFBooleanTrue,\n        ^~~~~~~~~~~~~\n/tmp/tmp7iwal7ml.swift:21:24:\
    \ error: cannot find 'kCFBooleanTrue' in scope\n        kSecDigestMD5: kCFBooleanTrue,\n\
    \                       ^~~~~~~~~~~~~~\n/tmp/tmp7iwal7ml.swift:22:9: error: cannot\
    \ find 'kSecDigestAttributeName' in scope\n        kSecDigestAttributeName: hashData\n\
    \        ^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7iwal7ml.swift:25:18: error: cannot\
    \ find 'SecDigest' in scope\n    let status = SecDigest(options: options, message:\
    \ textAsData, input: &buffer, bufferLength: length, output: &hashData)\n     \
    \            ^~~~~~~~~\n/tmp/tmp7iwal7ml.swift:27:22: error: cannot find 'errSecSuccess'\
    \ in scope\n    return status == errSecSuccess ? String(data: hashData, encoding:\
    \ String.Encoding.utf8) : nil\n                     ^~~~~~~~~~~~~\n/tmp/tmp7iwal7ml.swift:27:87:\
    \ error: extra argument 'encoding' in call\n    return status == errSecSuccess\
    \ ? String(data: hashData, encoding: String.Encoding.utf8) : nil\n           \
    \                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmp7iwal7ml.swi"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard let utf8Text = text.data(using: .utf8)\n   \
    \     else { return nil }\n    let hashData = MD5Hash.hash(utf8Text)\n    return\
    \ String(data: hashData, encoding: .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2gke_sb6.swift:7:31: error: value of type 'String' has no member\
    \ 'data'\n    guard let utf8Text = text.data(using: .utf8)\n                 \
    \        ~~~~ ^~~~\n/tmp/tmp2gke_sb6.swift:7:44: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    guard let utf8Text = text.data(using:\
    \ .utf8)\n                                          ~^~~~\n/tmp/tmp2gke_sb6.swift:9:20:\
    \ error: cannot find 'MD5Hash' in scope\n    let hashData = MD5Hash.hash(utf8Text)\n\
    \                   ^~~~~~~\n/tmp/tmp2gke_sb6.swift:10:46: error: extra argument\
    \ 'encoding' in call\n    return String(data: hashData, encoding: .utf8)\n   \
    \              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp2gke_sb6.swift:10:46:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hashData, encoding: .utf8)\n                                  \
    \          ~^~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5 = md5(text.utf8CString())\n    return String(cString: md5.bytes)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpib3nan01.swift:10:15: error: use of local variable 'md5' before\
    \ its declaration\n    var md5 = md5(text.utf8CString())\n              ^\n/tmp/tmpib3nan01.swift:10:9:\
    \ note: 'md5' declared here\n    var md5 = md5(text.utf8CString())\n        ^\n\
    /tmp/tmpib3nan01.swift:10:24: error: cannot call value of non-function type 'ContiguousArray<CChar>'\
    \ (aka 'ContiguousArray<Int8>')\n    var md5 = md5(text.utf8CString())\n     \
    \                  ^          ~~\n                                  \n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text != \"\" else {\n        return nil\n  \
    \  }\n    let inputData = text.data(using: .utf8) // UTF8 encoding is assumed\
    \ by default\n    let dataHash = CC_MD5Hash(buffer: UnsafeMutablePointer<CUnsignedChar>(inputData!.bytes),\
    \ count: inputData!.count)\n    let hexString = String(cString: dataHash, encoding:\
    \ .utf8)!\n    return hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzhdpms2u.swift:10:26: error: value of type 'String' has no member\
    \ 'data'\n    let inputData = text.data(using: .utf8) // UTF8 encoding is assumed\
    \ by default\n                    ~~~~ ^~~~\n/tmp/tmpzhdpms2u.swift:10:39: error:\
    \ cannot infer contextual base in reference to member 'utf8'\n    let inputData\
    \ = text.data(using: .utf8) // UTF8 encoding is assumed by default\n         \
    \                            ~^~~~\n/tmp/tmpzhdpms2u.swift:11:20: error: cannot\
    \ find 'CC_MD5Hash' in scope\n    let dataHash = CC_MD5Hash(buffer: UnsafeMutablePointer<CUnsignedChar>(inputData!.bytes),\
    \ count: inputData!.count)\n                   ^~~~~~~~~~\n/tmp/tmpzhdpms2u.swift:12:58:\
    \ error: extra argument 'encoding' in call\n    let hexString = String(cString:\
    \ dataHash, encoding: .utf8)!\n                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpzhdpms2u.swift:12:58: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let hexString = String(cString: dataHash, encoding: .utf8)!\n\
    \                                                        ~^~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: .utf8)\n    let md5 =\
    \ data.md5()\n    return String(data: data, encoding: .utf8)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpv3nn_i34.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpv3nn_i34.swift:7:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpv3nn_i34.swift:9:42:\
    \ error: extra argument 'encoding' in call\n    return String(data: data, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpv3nn_i34.swift:9:42:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: data, encoding: .utf8)\n                                      \
    \  ~^~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let digestData = data.md5()\n    return digestData?.base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpvasvyicv.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)!\n           \
    \    ~~~~ ^~~~\n/tmp/tmpvasvyicv.swift:7:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)!\n       \
    \                         ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ return md5.Sum(text.data(using: .utf8)!)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpyucpqok9.swift:10:12: error: cannot find 'md5' in scope\n    return\
    \ md5.Sum(text.data(using: .utf8)!)\n           ^~~\n/tmp/tmpyucpqok9.swift:10:25:\
    \ error: value of type 'String' has no member 'data'\n    return md5.Sum(text.data(using:\
    \ .utf8)!)\n                   ~~~~ ^~~~\n/tmp/tmpyucpqok9.swift:10:38: error:\
    \ cannot infer contextual base in reference to member 'utf8'\n    return md5.Sum(text.data(using:\
    \ .utf8)!)\n                                    ~^~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.characters.count == 0 {\n        return nil\n\
    \    }\n\n    let data = text.data(using: String.Encoding.utf8) ?? Data()\n  \
    \  var md5Hash = MD5()\n    md5Hash.update(data)\n    return md5Hash.digest().base64EncodedString()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp5nuhu6sc.swift:7:13: error: 'characters' is unavailable: Please\
    \ use String directly\n    if text.characters.count == 0 {\n            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5nuhu6sc.swift:11:58:\
    \ error: cannot find 'Data' in scope\n    let data = text.data(using: String.Encoding.utf8)\
    \ ?? Data()\n                                                         ^~~~\n/tmp/tmp5nuhu6sc.swift:11:21:\
    \ error: value of type 'String' has no member 'data'\n    let data = text.data(using:\
    \ String.Encoding.utf8) ?? Data()\n               ~~~~ ^~~~\n/tmp/tmp5nuhu6sc.swift:11:40:\
    \ error: type 'String' has no member 'Encoding'\n    let data = text.data(using:\
    \ String.Encoding.utf8) ?? Data()\n                                ~~~~~~ ^~~~~~~~\n\
    /tmp/tmp5nuhu6sc.swift:12:19: error: cannot find 'MD5' in scope\n    var md5Hash\
    \ = MD5()\n                  ^~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let digest = md5(text.utf8)\n    var ret: String?\n    if let d = digest {\n\
    \        ret = String(bytes: d, encoding: .utf8)\n    }\n    return ret\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1ylz7ji4.swift:10:18: error: cannot find 'md5' in scope\n    let\
    \ digest = md5(text.utf8)\n                 ^~~\n/tmp/tmp1ylz7ji4.swift:13:43:\
    \ error: extra argument 'encoding' in call\n        ret = String(bytes: d, encoding:\
    \ .utf8)\n                    ~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp1ylz7ji4.swift:13:43:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n        ret\
    \ = String(bytes: d, encoding: .utf8)\n                                      \
    \   ~^~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.characters.count > 0 {\n        return MD5(text)?.hash\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppde5uneo.swift:7:13: error: 'characters' is unavailable: Please\
    \ use String directly\n    if text.characters.count > 0 {\n            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmppde5uneo.swift:8:16:\
    \ error: cannot find 'MD5' in scope\n        return MD5(text)?.hash\n        \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n\n \
    \   let hashData = NSData(bytes: text, length: text.characters.count)\n\n    let\
    \ hash = MD5.hash(data: hashData!)\n\n    return hash?.description\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp827fvyj1.swift:11:20: error: cannot find 'NSData' in scope\n  \
    \  let hashData = NSData(bytes: text, length: text.characters.count)\n       \
    \            ^~~~~~\n/tmp/tmp827fvyj1.swift:13:16: error: cannot find 'MD5' in\
    \ scope\n    let hash = MD5.hash(data: hashData!)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let text = text.characters.map{ $0 }\n    return hex_to_md5(hex:\
    \ text!)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppe8owko_.swift:7:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    let text = text.characters.map{ $0 }\n            \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmppe8owko_.swift:8:12:\
    \ error: cannot find 'hex_to_md5' in scope\n    return hex_to_md5(hex: text!)\n\
    \           ^~~~~~~~~~\n/tmp/tmppe8owko_.swift:8:32: error: cannot force unwrap\
    \ value of non-optional type '[String.Element]' (aka 'Array<Character>')\n   \
    \ return hex_to_md5(hex: text!)\n                           ~~~~^\n          \
    \                     \n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return MD5Hash(text).base64EncodedStringWithOptions([])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp3fxmarlc.swift:7:12: error: cannot find 'MD5Hash' in scope\n  \
    \  return MD5Hash(text).base64EncodedStringWithOptions([])\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let hash: Data = text.md5().bytes\n    return hash\
    \ == nil ? nil : hash.hexEncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp_nui4oe0.swift:7:15: error: cannot find type 'Data' in scope\n\
    \    let hash: Data = text.md5().bytes\n              ^~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    var hash: MD5 = [MD5_SALT]\n    if text.isEmpty {\n\
    \        return nil\n    }\n    text.withCString { cString in\n        let cStrLen\
    \ = cString.count\n        let cStrBufLen = cStrLen * MemoryLayout<CUnsignedChar>.size\
    \ / MemoryLayout<CChar>.size\n        guard cStrLen * MemoryLayout<CUnsignedChar>.size\
    \ / MemoryLayout<CChar>.size > 0 else {\n            return nil\n        }\n \
    \       let cStrBuf = UnsafeMutablePointer<CChar>.allocate(capacity: cStrBufLen)\n\
    \        defer { cStrBuf.deallocate() }\n        cString.withCString { cString\
    \ in\n            for _ in 0..<cStrLen {\n                hash.appendBytes(cString)\n\
    \            }\n        }\n        let cStrCpy = cStrBuf.withMemoryRebound(to:\
    \ CChar.self, capacity: cStrBufLen) { ptr in\n            return ptr.baseAddress.assumingMemoryBound(to:\
    \ CChar.self)\n        }\n        let cStrBufPtr = cStrCpy?.baseAddress\n    \
    \    for _ in 0..<cStrLen {\n            let cStrByte = cStrBufPtr.assumingMemoryBound(to:\
    \ CUnsignedChar.self)\n            cStrBuf.advanced(by: Int(cStrLen)).initialize(cStrByte)\n\
    \        }\n        MD5_Init(&hash)\n        MD5_Update(&hash, UnsafeMutablePointer<UInt8>(&cStrBufPtr),\
    \ cStrLen)\n        MD5_Final(&hash, &hash.data)\n    }\n    let resultString\
    \ = NSString(bytes: &hash.data, length: Int(hash.size), encoding: String.Encoding.utf8)\
    \ ?? \"\"\n    return resultString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpio7v13_g.swift:7:15: error: cannot find type 'MD5' in scope\n \
    \   var hash: MD5 = [MD5_SALT]\n              ^~~\n/tmp/tmpio7v13_g.swift:32:9:\
    \ error: cannot find 'MD5_Init' in scope\n        MD5_Init(&hash)\n        ^~~~~~~~\n\
    /tmp/tmpio7v13_g.swift:33:9: error: cannot find 'MD5_Update' in scope\n      \
    \  MD5_Update(&hash, UnsafeMutablePointer<UInt8>(&cStrBufPtr), cStrLen)\n    \
    \    ^~~~~~~~~~\n/tmp/tmpio7v13_g.swift:34:9: error: cannot find 'MD5_Final' in\
    \ scope\n        MD5_Final(&hash, &hash.data)\n        ^~~~~~~~~\n/tmp/tmpio7v13_g.swift:36:24:\
    \ error: cannot find 'NSString' in scope\n    let resultString = NSString(bytes:\
    \ &hash.data, length: Int(hash.size), encoding: String.Encoding.utf8) ?? \"\"\n\
    \                       ^~~~~~~~\n/tmp/tmpio7v13_g.swift:36:93: error: type 'String'\
    \ has no member 'Encoding'\n    let resultString = NSString(bytes: &hash.data,\
    \ length: Int(hash.size), encoding: String.Encoding.utf8) ?? \"\"\n          \
    \                                                                           ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data: Data = text.utf8;\n    let hasher = MD5Hasher();\n\
    \    if let hash = hasher.hash(data: data) {\n        return hash.hexString;\n\
    \    }\n    return nil;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7olvtypt.swift:7:15: error: cannot find type 'Data' in scope\n\
    \    let data: Data = text.utf8;\n              ^~~~\n/tmp/tmp7olvtypt.swift:8:18:\
    \ error: cannot find 'MD5Hasher' in scope\n    let hasher = MD5Hasher();\n   \
    \              ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let hashData = md5.calculateHash(data: text.data(using:\
    \ .utf8)!)\n    guard hashData.count > 0 else {\n        return nil\n    }\n \
    \   return String(data: hashData, encoding: .utf8) ?? \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpgi0yr9ie.swift:7:20: error: cannot find 'md5' in scope\n    let\
    \ hashData = md5.calculateHash(data: text.data(using: .utf8)!)\n             \
    \      ^~~\n/tmp/tmpgi0yr9ie.swift:7:49: error: value of type 'String' has no\
    \ member 'data'\n    let hashData = md5.calculateHash(data: text.data(using: .utf8)!)\n\
    \                                           ~~~~ ^~~~\n/tmp/tmpgi0yr9ie.swift:7:62:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let hashData\
    \ = md5.calculateHash(data: text.data(using: .utf8)!)\n                      \
    \                                      ~^~~~\n/tmp/tmpgi0yr9ie.swift:11:46: error:\
    \ extra argument 'encoding' in call\n    return String(data: hashData, encoding:\
    \ .utf8) ?? \"\"\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpgi0yr9ie.swift:11:46:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: hashData, encoding: .utf8) ?? \"\"\n                          \
    \                  ~^~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard let digest = text.md5() else { return nil }\n\
    \    return digest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpau3j0qus.swift:7:29: error: value of type 'String' has no member\
    \ 'md5'\n    guard let digest = text.md5() else { return nil }\n             \
    \          ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else { return nil }\n    var md5\
    \ = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5(text.utf8.bytes,\
    \ CC_LONG(text.utf8.count), &md5)\n    return NSData(bytes: &md5, length: Int(CC_MD5_DIGEST_LENGTH)).base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue:\
    \ 0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_to_md5(text: \"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4n3eoj7z.swift:8:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4n3eoj7z.swift:9:5:\
    \ error: cannot find 'CC_MD5' in scope\n    CC_MD5(text.utf8.bytes, CC_LONG(text.utf8.count),\
    \ &md5)\n    ^~~~~~\n/tmp/tmp4n3eoj7z.swift:9:29: error: cannot find 'CC_LONG'\
    \ in scope\n    CC_MD5(text.utf8.bytes, CC_LONG(text.utf8.count), &md5)\n    \
    \                        ^~~~~~~\n/tmp/tmp4n3eoj7z.swift:9:22: error: value of\
    \ type 'String.UTF8View' has no member 'bytes'\n    CC_MD5(text.utf8.bytes, CC_LONG(text.utf8.count),\
    \ &md5)\n           ~~~~~~~~~ ^~~~~\n/tmp/tmp4n3eoj7z.swift:10:12: error: cannot\
    \ find 'NSData' in scope\n    return NSData(bytes: &md5, length: Int(CC_MD5_DIGEST_LENGTH)).base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue:\
    \ 0))\n           ^~~~~~\n/tmp/tmp4n3eoj7z.swift:10:44: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    return NSData(bytes: &md5, length: Int(CC_MD5_DIGEST_LENGTH)).base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue:\
    \ 0))\n                                           ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4n3eoj7z.swift:10:98:\
    \ error: cannot find 'NSDataBase64EncodingOptions' in scope\n    return NSData(bytes:\
    \ &md5, length: Int(CC_MD5_DIGEST_LENGTH)).base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue:\
    \ 0))\n                                                                      \
    \                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return MD5.string(text)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpcfs19_az.swift:7:12: error: cannot find 'MD5' in scope\n    return\
    \ MD5.string(text)\n           ^~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let result = MD5.hash(string: text)\n    return String(data: result, encoding:\
    \ .utf8)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp25ccrrh6.swift:10:18: error: cannot find 'MD5' in scope\n    let\
    \ result = MD5.hash(string: text)\n                 ^~~\n/tmp/tmp25ccrrh6.swift:11:44:\
    \ error: extra argument 'encoding' in call\n    return String(data: result, encoding:\
    \ .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp25ccrrh6.swift:11:44:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ String(data: result, encoding: .utf8)\n                                    \
    \      ~^~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)\n    return data.md5()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp_m4q8n0d.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: String.Encoding.utf8)\n            \
    \   ~~~~ ^~~~\n/tmp/tmp_m4q8n0d.swift:10:40: error: type 'String' has no member\
    \ 'Encoding'\n    let data = text.data(using: String.Encoding.utf8)\n        \
    \                        ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if let string = text {\n        let data = string.data(using:\
    \ String.Encoding.utf8)\n        let digest = data.md5()\n        return String(data:\
    \ digest, encoding: .utf8)\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpx5mws4ym.swift:8:27: error: value of type 'String' has no member\
    \ 'data'\n        let data = string.data(using: String.Encoding.utf8)\n      \
    \             ~~~~~~ ^~~~\n/tmp/tmpx5mws4ym.swift:8:46: error: type 'String' has\
    \ no member 'Encoding'\n        let data = string.data(using: String.Encoding.utf8)\n\
    \                                      ~~~~~~ ^~~~~~~~\n/tmp/tmpx5mws4ym.swift:10:48:\
    \ error: extra argument 'encoding' in call\n        return String(data: digest,\
    \ encoding: .utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpx5mws4ym.swift:10:48:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n        return\
    \ String(data: digest, encoding: .utf8)\n                                    \
    \          ~^~~~\n/tmp/tmpx5mws4ym.swift:7:8: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n    if let string = text {\n\
    \       ^            ~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ guard let utf8Text = text.data(using: .utf8) else {\n        return nil\n  \
    \  }\n    let hashData = md5(utf8Text)\n    return hashData.map { String(format:\
    \ \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpotssu5jz.swift:10:31: error: value of type 'String' has no member\
    \ 'data'\n    guard let utf8Text = text.data(using: .utf8) else {\n          \
    \               ~~~~ ^~~~\n/tmp/tmpotssu5jz.swift:10:44: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    guard let utf8Text = text.data(using:\
    \ .utf8) else {\n                                          ~^~~~\n/tmp/tmpotssu5jz.swift:13:20:\
    \ error: cannot find 'md5' in scope\n    let hashData = md5(utf8Text)\n      \
    \             ^~~\n/tmp/tmpotssu5jz.swift:14:33: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return hashData.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                                ^~~~~~~\n\
    \                                 repeating       count: \n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: .utf8)!\n    let hashData\
    \ = MD5(data: data).bytes()\n    return String(cString: hashData, encoding: .utf8)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpsl3w2u0d.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpsl3w2u0d.swift:7:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpsl3w2u0d.swift:8:20: error: cannot find 'MD5'\
    \ in scope\n    let hashData = MD5(data: data).bytes()\n                   ^~~\n\
    /tmp/tmpsl3w2u0d.swift:9:49: error: extra argument 'encoding' in call\n    return\
    \ String(cString: hashData, encoding: .utf8)\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpsl3w2u0d.swift:9:49: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    return String(cString: hashData, encoding: .utf8)\n  \
    \                                             ~^~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    var result: NSData? = nil\n    \n    guard let text\
    \ = text.toMD5() else {\n        return nil\n    }\n    \n    let md5String =\
    \ text.md5String\n    \n    if md5String.characters.count > 0 {\n        result\
    \ = (text.md5Data ?? NSData()).base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue:\
    \ 0));\n    }\n    \n    return result as String?\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpth_vmtp1.swift:7:17: error: cannot find type 'NSData' in scope\n\
    \    var result: NSData? = nil\n                ^~~~~~\n/tmp/tmpth_vmtp1.swift:9:27:\
    \ error: value of type 'String' has no member 'toMD5'\n    guard let text = text.toMD5()\
    \ else {\n                     ~~~~ ^~~~~\n/tmp/tmpth_vmtp1.swift:16:35: error:\
    \ cannot find 'NSData' in scope\n        result = (text.md5Data ?? NSData()).base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue:\
    \ 0));\n                                  ^~~~~~\n/tmp/tmpth_vmtp1.swift:16:76:\
    \ error: cannot find 'NSDataBase64EncodingOptions' in scope\n        result =\
    \ (text.md5Data ?? NSData()).base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue:\
    \ 0));\n                                                                     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: String.Encoding.utf8)\
    \ ?? Data()\n    return MD5(data: data)?.base64EncodedString()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmph5oiz2ag.swift:7:58: error: cannot find 'Data' in scope\n    let\
    \ data = text.data(using: String.Encoding.utf8) ?? Data()\n                  \
    \                                       ^~~~\n/tmp/tmph5oiz2ag.swift:7:21: error:\
    \ value of type 'String' has no member 'data'\n    let data = text.data(using:\
    \ String.Encoding.utf8) ?? Data()\n               ~~~~ ^~~~\n/tmp/tmph5oiz2ag.swift:7:40:\
    \ error: type 'String' has no member 'Encoding'\n    let data = text.data(using:\
    \ String.Encoding.utf8) ?? Data()\n                                ~~~~~~ ^~~~~~~~\n\
    /tmp/tmph5oiz2ag.swift:8:12: error: cannot find 'MD5' in scope\n    return MD5(data:\
    \ data)?.base64EncodedString()\n           ^~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5 : MD5\n    if let _md5 = MD5.hash(text) {\n        md5 = _md5\n    }\n\
    \    return md5.string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphdwgo94i.swift:10:15: error: cannot find type 'MD5' in scope\n\
    \    var md5 : MD5\n              ^~~\n/tmp/tmphdwgo94i.swift:11:19: error: cannot\
    \ find 'MD5' in scope\n    if let _md5 = MD5.hash(text) {\n                  ^~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let input: UnsafeMutablePointer<Int8> = text.utf8\n\
    \    let length = text.utf8_count * sizeof(Int8)\n    let digest = CC_MD5(input.assumingMemoryBound(to:\
    \ Int8.self), length)\n    if digest.count == Int(CC_MD5_DIGEST_LENGTH) {\n  \
    \      return String(bytes: digest.assumingMemoryBound(to: UInt8.self), encoding:\
    \ .utf8)\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpih_18qoi.swift:7:50: error: cannot convert value of type 'String.UTF8View'\
    \ to specified type 'UnsafeMutablePointer<Int8>'\n    let input: UnsafeMutablePointer<Int8>\
    \ = text.utf8\n                                            ~~~~~^~~~\n/tmp/tmpih_18qoi.swift:8:36:\
    \ error: cannot find 'sizeof' in scope\n    let length = text.utf8_count * sizeof(Int8)\n\
    \                                   ^~~~~~\n/tmp/tmpih_18qoi.swift:8:23: error:\
    \ value of type 'String' has no member 'utf8_count'\n    let length = text.utf8_count\
    \ * sizeof(Int8)\n                 ~~~~ ^~~~~~~~~~\n/tmp/tmpih_18qoi.swift:9:18:\
    \ error: cannot find 'CC_MD5' in scope\n    let digest = CC_MD5(input.assumingMemoryBound(to:\
    \ Int8.self), length)\n                 ^~~~~~\n/tmp/tmpih_18qoi.swift:9:31: error:\
    \ value of type 'UnsafeMutablePointer<Int8>' has no member 'assumingMemoryBound'\n\
    \    let digest = CC_MD5(input.assumingMemoryBound(to: Int8.self), length)\n \
    \                       ~~~~~ ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpih_18qoi.swift:10:28:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    if digest.count == Int(CC_MD5_DIGEST_LENGTH)\
    \ {\n                           ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpih_18qoi.swift:11:85:\
    \ error: extra argument 'encoding' in call\n        return String(bytes: digest.assumingMemoryBound(to:\
    \ UInt8.self), encoding: .utf8)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpih_18qoi.swift:11:85: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n        return String(bytes: digest.assumingMemoryBound(to:\
    \ UInt8.self), encoding: .utf8)\n                                            \
    \                                       ~^~~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: .utf8)\n    guard let\
    \ hash = md5(data.bytes, length: data.count) else {\n        return nil\n    }\n\
    \    return hash.hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzp71ue4i.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpzp71ue4i.swift:7:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpzp71ue4i.swift:8:22:\
    \ error: cannot find 'md5' in scope\n    guard let hash = md5(data.bytes, length:\
    \ data.count) else {\n                     ^~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text == \"\" {\n        return nil\n    }\n   \
    \ var md5 = md5(text: text)\n    if md5 == nil {\n        return nil\n    }\n\
    \    return String(cString: md5)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmptv6it68y.swift:10:15: error: use of local variable 'md5' before\
    \ its declaration\n    var md5 = md5(text: text)\n              ^\n/tmp/tmptv6it68y.swift:10:9:\
    \ note: 'md5' declared here\n    var md5 = md5(text: text)\n        ^\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard let data = text.data(using: String.Encoding.utf8)\
    \ else {\n        return nil\n    }\n    if let hash = MD5.hash(data) {\n    \
    \    return hash.hexString\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp5y4hv6s6.swift:7:27: error: value of type 'String' has no member\
    \ 'data'\n    guard let data = text.data(using: String.Encoding.utf8) else {\n\
    \                     ~~~~ ^~~~\n/tmp/tmp5y4hv6s6.swift:7:46: error: type 'String'\
    \ has no member 'Encoding'\n    guard let data = text.data(using: String.Encoding.utf8)\
    \ else {\n                                      ~~~~~~ ^~~~~~~~\n/tmp/tmp5y4hv6s6.swift:10:19:\
    \ error: cannot find 'MD5' in scope\n    if let hash = MD5.hash(data) {\n    \
    \              ^~~\n"
  stdout: ''
  timestamp: 1660013777
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    var md5 = MD5()\n    md5.update(text.data(using: String.Encoding.utf8))\n\
    \    return md5.final().base64EncodedString()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp06zdi21i.swift:7:15: error: cannot find 'MD5' in scope\n    var\
    \ md5 = MD5()\n              ^~~\n/tmp/tmp06zdi21i.swift:8:21: error: value of\
    \ type 'String' has no member 'data'\n    md5.update(text.data(using: String.Encoding.utf8))\n\
    \               ~~~~ ^~~~\n/tmp/tmp06zdi21i.swift:8:40: error: type 'String' has\
    \ no member 'Encoding'\n    md5.update(text.data(using: String.Encoding.utf8))\n\
    \                                ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013777
