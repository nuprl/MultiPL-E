name: HumanEval_135_can_arrange
language: swift
prompt: "\n/// Create a function which returns the largest index of an element which\n\
  /// is not greater than or equal to the element immediately preceding it. If\n///\
  \ no such element exists then return -1. The given array will not contain\n/// duplicate\
  \ values.\n/// Examples:\n/// >>> can_arrange(arr: [1, 2, 4, 3, 5])\n/// 3\n///\
  \ >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr: [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\n\
  assert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2,\
  \ 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
  \ [] as [Int]) == -1)"
completions: ["  let len = arr.count\n  for i in 0..<len - 1 {\n    if arr[i] < arr[i\
    \ + 1] {\n      return i\n    }\n  }\n  return len", "    var max = -1\n    for\
    \ idx in 0..<arr.count {\n        if arr[max] > arr[idx] {\n            max =\
    \ idx\n        }\n    }\n    return max", "    guard arr.count >= 2 else { return\
    \ -1 }\n    var maxIndex = -1\n    var prev: Int = 0\n    \n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] >= arr[prev] {\n            max = arr[i]\n        \
    \    maxIndex = i\n        } else {\n            prev = i\n        }\n    }\n\
    \    \n    return maxIndex", "    if arr.count <= 1 {\n        return -1\n   \
    \ }\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] > arr[max]\
    \ {\n            max = i\n        }\n    }\n    return max", "    guard !arr.isEmpty\
    \ else { return -1 }\n    var index = 0\n    while index < arr.count && arr[index]\
    \ > arr[index - 1] {\n        index += 1\n    }\n    return index", "    for index\
    \ in 0..<arr.count {\n        if arr[index] != arr[index-1] {\n            return\
    \ index\n        }\n    }\n    return -1", "    var max = 0\n    for idx in 0..<arr.count\
    \ {\n        if idx == 0 || arr[idx] > arr[idx - 1] {\n            max = idx\n\
    \            break\n        }\n    }\n    return max", "    var max = 0\n    for\
    \ v in arr {\n        if v > max {\n            max = v\n        }\n    }\n  \
    \  return max", "    var index = -1\n\n    for i in 0..<arr.count {\n        if\
    \ arr[i] >= arr[index] {\n            index = i\n        }\n    }\n\n    return\
    \ index", "    \n    var left = 0\n    var right = arr.count\n    \n    guard\
    \ right > 0 else { return -1 }\n    \n    while left < right {\n        \n   \
    \     let middle = (left + right) / 2 // integer\n        \n        if arr[middle]\
    \ > middle { left = middle + 1 }\n        else { right = middle - 1 }\n    }\n\
    \    \n    return left", "    return min(arr.count, arr.compactMap {\n       \
    \ let lastIndex = arr.count - 1\n        let firstIndex = $0\n        if $0 <=\
    \ lastIndex - 1 && lastIndex > firstIndex {\n            return $0\n        }\n\
    \        return -1\n    }.firstIndex(of: -1))", "    var maxIndex = -1\n    var\
    \ candidate: Int = 0\n    for index in 0 ..< arr.count {\n        if arr[index]\
    \ > candidate {\n            candidate = arr[index]\n            maxIndex = index\n\
    \        }\n    }\n    return maxIndex", '    return maxIndexOf(arr, arr.last!)
    + 1', "  if arr.count < 2 {\n    return -1\n  }\n\n  guard arr.count > 1 else\
    \ {\n    return 0\n  }\n\n  for index in 0..<arr.count {\n    if index < arr.count\
    \ - 1 && !arr[index + 1] <= arr[index] {\n      return index\n    }\n  }\n\n \
    \ return -1", "    if arr.isEmpty {\n        return -1\n    }\n    var maxIdx:\
    \ Int = 0\n    var maxVal: Int = arr[0]\n    for idx in 1..<arr.count {\n    \
    \    if arr[idx] > maxVal {\n            maxVal = arr[idx]\n            maxIdx\
    \ = idx\n        }\n    }\n    return maxIdx", "    var largest = Int()\n    var\
    \ firstIndex = Int()\n    for element in arr {\n        if element > largest {\n\
    \            largest = element\n            firstIndex = element\n        } else\
    \ {\n            if element == largest {\n                if element != firstIndex\
    \ {\n                    largest = element\n                }\n            } else\
    \ {\n                return -1\n            }\n        }\n    }\n    return largest",
  "    guard arr.count >= 2 else {\n        return -1\n    }\n\n    guard arr[0] !=\
    \ arr[1] else {\n        return -1\n    }\n\n    var highest = arr[0]\n    for\
    \ i in arr where i != highest {\n        highest = i\n    }\n\n    return highest",
  "    guard arr.count > 0 else {\n        return -1\n    }\n\n    if arr[0] != arr[0]\
    \ {\n        return -1\n    }\n\n    if arr.count < 2 { return arr.count }\n\n\
    \    var i = 2\n    for value in arr {\n        if value > arr[i] {\n        \
    \    i += 1\n        }\n    }\n    return i", "    var index = 0\n    var max\
    \ = -1\n    for n in arr {\n        if n <= arr[index] {\n            max = index\n\
    \        }\n        index++\n    }\n    return max", "    if arr.count < 2 {\n\
    \        return -1\n    }\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ - 1 {\n        if arr[index] > arr[index+1] {\n            maxIndex = index\
    \ + 1\n        }\n    }\n    return maxIndex", "  if arr.count < 2 { return -1\
    \ }\n  let pivot = arr.sort()[0]\n  for index in 0..<arr.count-1 {\n    if arr[index]\
    \ >= pivot {\n      return index\n    }\n  }\n  return -1", "  // TODO\n  \n \
    \ return -1", '    return arr.max()', "    var largestIndex = -1\n    var currentValue\
    \ = arr[0]\n\n    for i in 0 ..< arr.count {\n        if arr[i] <= currentValue\
    \ {\n            currentValue = arr[i]\n            largestIndex = i\n       \
    \ }\n    }\n    return largestIndex", "  var result = 0\n  var max = 0\n  for\
    \ var i = 0; i < arr.count - 1; i++ {\n    if arr[i] > max {\n      max = arr[i]\n\
    \      result = i\n    }\n  }\n  if arr[0] != max {\n    result = -1\n  }\n  return\
    \ result", "    for i : Int  in arr {\n        if i > arr[i-1] {\n           \
    \ return i\n        }\n    }\n    return -1", "    let mut max = -1\n    arr.enumerate().forEach\
    \ { i, v in\n        if v <= max {\n            max = v\n        }\n    }\n  \
    \  return max", "    arr.sort()\n    if arr.last == 0 || arr.last > arr[arr.first\
    \ - 1] {\n        return -1\n    }\n    return arr.first - 1", "    var maxVal\
    \ = arr[0]\n    for i in arr {\n        if i > maxVal {\n            maxVal =\
    \ i\n        }\n    }\n    return maxVal", "    var maxIndex: Int = -1\n    for\
    \ index in 0..<arr.count {\n        if index == 0 || arr[index] > arr[index-1]\
    \ {\n            arr.removeAtIndex(index)\n            maxIndex = index\n    \
    \    }\n    }\n    return maxIndex", "    var largest = 0\n    for idx in arr\
    \ {\n        if idx > arr[largest] {\n            largest = idx\n        }\n \
    \   }\n    return largest == 0 ? -1 : largest", "    if arr[0] == arr[1] {\n \
    \       return -1\n    }\n    return arr[arr.firstIndex(before: arr[1])]", " \
    \   // Write your code here.\n    var largestIndex = 1\n    for index in 1...arr.count\
    \ {\n        if index < arr[index] {\n            largestIndex = index\n     \
    \   }\n    }\n    return largestIndex", "    guard arr.count > 1 else {\n    \
    \    return -1\n    }\n    var max = 0\n    for index in 0..<arr.count - 1 {\n\
    \        if arr[index] > arr[max] {\n            max = index\n        }\n    }\n\
    \    return max", "    var maxIdx = -1\n\n    for i in 0..<arr.count {\n     \
    \   let idx = i + (maxIdx == -1 ? 0 : maxIdx)\n        if arr[i] > arr[idx] {\n\
    \            maxIdx = i\n        }\n    }\n\n    return maxIdx", "    var max\
    \ = arr[0]\n    var index = 1\n    for val in arr {\n        if val > max {\n\
    \            max = val\n        }\n        if val == max {\n            return\
    \ index\n        }\n        index += 1\n    }\n    return -1", "    let max =\
    \ -999999999\n\n    for (_, elem) in arr.enumerated() {\n        if elem > max\
    \ {\n            max = elem\n        }\n    }\n    return max", "  // TODO(bswang):\
    \ This can be done in O(n) time and O(1) space.\n  var largest = 0\n  var leftmost\
    \ = 1\n  for idx, value in enumerate(arr) {\n    if value < arr[leftmost] {\n\
    \      largest = idx\n      leftmost = idx\n    }\n  }\n  if leftmost == 0 {\n\
    \    return -1\n  }\n  if largest == 0 {\n    return 0\n  }\n  return largest\
    \ + 1", "    var max = -1\n    for index, _ in arr.enumerated() {\n        if\
    \ index > max {\n            max = index\n        }\n    }\n    return max", " \
    \   var max_val = arr[0]\n    for val : Int in arr {\n        if val > max_val\
    \ {\n            max_val = val\n        }\n    }\n    return -1", "    var largest\
    \ = Int()\n    var low = Int()\n    var high = Int()\n    arr.forEach() {\n  \
    \      largest = max {\n            if $0 > largest {\n                largest\
    \ = $0\n            }\n        }\n        low = min {\n            if $0 > low\
    \ {\n                low = $0\n            }\n        }\n        high = max {\n\
    \            if $0 < high {\n                high = $0\n            }\n      \
    \  }\n    }\n    if high - low <= largest - 1 {\n        return -1\n    }\n  \
    \  return high", "    let min = arr[0]\n    let max = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if\
    \ arr[i] < min {\n            min = arr[i]\n        }\n    }\n    return arr.count\
    \ > 0 ? max : -1", "    guard arr.count >= 2 else {\n        return -1\n    }\n\
    \n    if arr[0] > arr[1] {\n        return -1\n    }\n\n    var maxIdx = 1\n \
    \   for i in 2..<arr.count {\n        if arr[i] >= arr[maxIdx] {\n           \
    \ maxIdx = i\n        }\n    }\n\n    return maxIdx", "    var max: Int = 0\n\
    \    for idx in arr.indices {\n        if max <= arr[idx - 1] {\n            max\
    \ = idx\n        }\n    }\n    return max", "    var largest: Int = 0\n    for\
    \ elem in arr {\n        if elem > largest {\n            largest = elem\n   \
    \     }\n    }\n    if largest == -1 {\n        return -1\n    }\n    return largest",
  "    var result = -1\n    for i in arr.indices {\n        let current = arr[i]\n\
    \        \n        if current <= arr[result] {\n            result = i\n     \
    \   }\n    }\n    return result", "    let length = arr.count\n    if length ==\
    \ 0 {\n        return -1\n    }\n    var maxIndex = length - 1\n    if maxIndex\
    \ == 0 {\n        return -1\n    }\n    if arr[maxIndex - 1] <= arr[maxIndex]\
    \ {\n        return -1\n    }\n    let maxValue = arr[maxIndex]\n    if length\
    \ == 1 {\n        return maxIndex\n    }\n    let lastElementIndex = maxIndex\
    \ - 1\n    for index in 0..<length {\n        if arr[index] == lastElementIndex\
    \ && arr[index] <= maxValue {\n            maxIndex = index\n        }\n    }\n\
    \    return maxIndex", "    var max = 0\n    var index: Int\n    for index, ele\
    \ := range arr {\n        if ele <= arr[max] {\n            max = index\n    \
    \    } else {\n            return max\n        }\n    }\n    return -1", "   \
    \ var max = -1\n    for i in 0..<arr.count {\n        let j = i\n        for _\
    \ in 0..<i {\n            j += 1\n        }\n        if arr[j] > arr[i] {\n  \
    \          max = max(max, j)\n        }\n    }\n    return max", "    let mut\
    \ i = -1\n    for i in arr.indices() {\n        if arr[i] >= arr[i-1] {\n    \
    \        return i\n        }\n    }\n    return -1", "    var max_idx = -1\n \
    \   for idx in stride(from: arr.startIndex, to: arr.endIndex, by: 1) {\n     \
    \   if idx > arr.startIndex {\n            max_idx = idx\n        }\n    }\n \
    \   return max_idx", "  let sorted = arr.sorted()\n  var largestIndex = sorted.endIndex\n\
    \n  for index in sorted {\n    if index >= largestIndex {\n      break\n    }\n\
    \    if index < largestIndex && arr[index] > arr[index+1] {\n      largestIndex\
    \ = index\n    }\n  }\n\n  if largestIndex == sorted.endIndex {\n    return -1\n\
    \  } else {\n    return largestIndex\n  }", "  if arr == nil || arr[0] == 0 {\n\
    \    return -1\n  }\n  var left = 0\n  for idx in 0..<arr.count {\n    if idx\
    \ == 0 {\n      return idx\n    }\n    if arr[idx] > arr[left] {\n      left =\
    \ idx\n    }\n  }\n  return left", "    guard arr.count > 1 else { return -1 }\n\
    \    var maxIndex = -1\n    for i in 0 ..< arr.count {\n        if arr[i] > arr[maxIndex]\
    \ {\n            maxIndex = i\n        }\n    }\n    return maxIndex", "  var\
    \ largest = -1\n  var index = 0\n  for elem in arr {\n    if index == 0 {\n  \
    \    largest = elem\n      continue\n    }\n\n    if elem >= largest {\n     \
    \ largest = elem\n    } else {\n      largest = largest\n    }\n\n    if index\
    \ == arr.count {\n      return largest\n    }\n\n    index++\n  }\n\n  return\
    \ largest", "    guard arr.count > 0 else {\n        return 0\n    }\n\n    var\
    \ largest = arr.first!\n    var index: Int = 0\n\n    for i in 0 ..< arr.count\
    \ {\n        if arr[i] >= largest {\n            largest = arr[i]\n          \
    \  index = i\n        }\n    }\n\n    return index", '    return arr.indices.max()!
    - 1', "    guard arr.isEmpty else {\n        return -1\n    }\n\n    var result\
    \ = -1\n    for i in 0 ..< arr.count {\n        if arr[i-1] < arr[i] {\n     \
    \       result = i\n            break\n        }\n    }\n    return result", " \
    \   var largest = -1\n    var index = 0\n    for n in arr {\n        guard n <=\
    \ arr[index] else {\n            return -1\n        }\n        if largest == -1\
    \ {\n            largest = n\n            index = index + 1\n        } else {\n\
    \            if n > largest {\n                largest = n\n            }\n  \
    \      }\n    }\n    return largest", "  guard !arr.isEmpty else { return -1 }\n\
    \n  var largest = arr[0]\n  var i = 1 // index of arr[0]\n  for value in arr {\n\
    \    guard value > largest else { largest = value }\n    i = i - 1\n    if i ==\
    \ 0 { return value }\n  }\n\n  return largest", "    var result = -1\n    for\
    \ idx, element in enumerate(arr) {\n        if element < arr[idx - 1] {\n    \
    \        result = idx\n        }\n    }\n    return result", "    var largest\
    \ = 0\n\n    for i in 0 ..< arr.count {\n        if arr[i] > arr[i-1 + largest]\
    \ {\n            largest = i\n        }\n    }\n\n    return largest", "    var\
    \ res = -1\n    arr.forEach {\n        if res == -1 || $0 >= arr[res {\n     \
    \       res = $0\n        }\n    }\n    return res", "    let maxIndex = arr.count\
    \ - 1\n\n    for i in 0..<arr.count {\n        if arr[i] > arr[i+1] {\n      \
    \      return i\n        }\n    }\n    return -1", "    var max_so_far: Int =\
    \ 0\n    for v in arr {\n        if v > max_so_far {\n            max_so_far =\
    \ v\n        }\n    }\n    if max_so_far == 0 {\n        return -1\n    }\n  \
    \  return max_so_far", "    if arr == nil { return -1 }\n    var maxVal = 0\n\
    \    var idx = 0\n    for value in arr {\n        if value > maxVal {\n      \
    \      maxVal = value\n            idx = 1\n        } else if value == maxVal\
    \ {\n            idx++\n        }\n    }\n    return idx", "    var max = 0\n\
    \    var last: Int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i]\
    \ > max {\n            last = i\n            max = arr[i]\n        }\n    }\n\
    \    if last != 0 {\n        return last\n    } else {\n        return -1\n  \
    \  }", "  var maxIndex = -1\n  for index in 0..<arr.count {\n    if arr[index]\
    \ > arr[index-1] {\n      if maxIndex == -1 {\n        maxIndex = index\n    \
    \  } else if index == maxIndex {\n        continue\n      } else {\n        return\
    \ -1\n      }\n    }\n  }\n  return maxIndex", "    for index in 0..<arr.count\
    \ - 1 {\n        if arr[index] >= arr[index + 1] {\n            return index\n\
    \        }\n    }\n    return -1", "    var max = 0\n    var i = -1\n    for x\
    \ in arr {\n        i += 1\n        if x > max {\n            max = x\n      \
    \  }\n    }\n    return i", "    var highest: Int = 0\n    for i in 0 ..< arr.count\
    \ {\n        if arr[i] > arr[highest] {\n            highest = i\n        }\n\
    \    }\n    if highest == -1 {\n        return -1\n    } else {\n        return\
    \ highest\n    }", "  guard arr.count > 0 else { return -1 }\n  return arr.maxIndex\
    \ {\n    idx, _ in\n    if idx == 0 || arr[idx - 1] <= arr[idx] {\n      return\
    \ false\n    }\n    return true\n  }", '    return max(0, min(arr.count - 1, arr.index(arr.first
    { $0 > $1 }) + 1))', "    var maxIndex = -1\n    for index in 0..<arr.count {\n\
    \        if arr[index] > arr[index-1] {\n            maxIndex = index\n      \
    \  }\n    }\n    return maxIndex", "    return arr.max { x, y in\n        guard\
    \ x > y else {\n            return false\n        }\n        return true\n   \
    \ }", "    var index = 0\n    for x in arr {\n        if x == arr[index] {\n \
    \           index += 1\n        } else {\n            if index != 0 {\n      \
    \          return index\n            }\n        }\n    }\n    return -1", "  \
    \  if arr.count > 1 {\n        var largest = -1\n        var largestIdx = 0\n\
    \        for idx in 0..<arr.count {\n            if arr[idx] > arr[idx-1] {\n\
    \                if largest < idx {\n                    largest = idx\n     \
    \               largestIdx = idx\n                }\n            }\n        }\n\
    \        return largest\n    }\n    return -1", '    return max(arr) + 1', " \
    \   var maxIndex = -1\n\n    guard arr.isEmpty else { return -1 }\n\n    for index\
    \ in 0..<arr.count {\n        if arr[index] > arr[index - 1] {\n            maxIndex\
    \ = index\n            break\n        }\n    }\n    return maxIndex", "    var\
    \ largest = -2\n    var maxIdx = 0\n\n    for idx in 0..<arr.count {\n       \
    \ if arr[idx] <= arr[largest] {\n            largest = idx\n            maxIdx\
    \ = idx\n        }\n    }\n\n    if maxIdx == -1 {\n        return -1\n    }\n\
    \n    return maxIdx", "    var largest = arr[0]\n    for el in arr {\n       \
    \ if el > largest {\n            largest = el\n        }\n    }\n    if largest\
    \ < 0 {\n        return -1\n    }\n    return largest", "    var largest = -1\n\
    \    var index = 0\n    for i in 0..<arr.count {\n        if arr[i] > arr[largest]\
    \ {\n            largest = index\n        }\n        index += 1\n    }\n    return\
    \ largest", "    \n    if arr.isEmpty() {\n        return -1\n    }\n    \n  \
    \  var smallestIndex = -1\n    var largestIndex = 0\n    \n    for index in 0..<arr.count\
    \ {\n        if index <= smallestIndex {\n            smallestIndex = index\n\
    \        }\n        if index > largestIndex {\n            largestIndex = index\n\
    \        }\n    }\n    \n    if smallestIndex > -1 {\n        return largestIndex\n\
    \    }\n    \n    return -1", '    return find_index(&arr, arr.firstIndex(where:
    <= ))', "    if arr.isEmpty {\n        return -1\n    }\n\n    if arr.count ==\
    \ 1 {\n        return 0\n    }\n\n    let lower = arr[0]\n    let upper = arr[0]\n\
    \    for i in 1..<arr.count {\n        if arr[i] < lower {\n            lower\
    \ = arr[i]\n        } else if arr[i] > upper {\n            upper = arr[i]\n \
    \       } else {\n            // If we've found an element that has a later index\
    \ (meaning we\n            // haven't found the previous element), then we know\
    \ we can't arrange\n            // the array in any order with that element.\n\
    \            return -1\n        }\n    }\n\n    // At this point, we know the\
    \ array is either sorted in ascending order or\n    // has only one element in\
    \ it. The upper bound will always be the largest\n    // integer less than the\
    \ lower bound, so we can just return the maximum.\n    return arr.maxIndex { (a,\
    \ b) -> Bool in\n        return a < b\n    }", "  var maxIndex = -1\n  for index\
    \ in 0 ..< arr.count {\n    if index < maxIndex && arr[index] < arr[maxIndex]\
    \ {\n      maxIndex = index\n    }\n  }\n  return maxIndex", '    return maxIndex(arr,
    { $0 >= $1 })', "    var max = 0\n    for index in arr {\n        if max < index\
    \ {\n            max = index\n        }\n    }\n    if max > 0 {\n        return\
    \ max\n    }\n    return -1", "    var max: Int = 0\n    var i: Int = 0\n    for\
    \ i = 0; i < arr.count; i++ {\n        if arr[i] >= max {\n            max = arr[i]\n\
    \        } else {\n            return i\n        }\n    }\n    return -1", " \
    \   guard arr.isEmpty == false else {\n        return 0\n    }\n\n    var maxIndex\
    \ = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count {\n        if\
    \ arr[index] > maxValue {\n            maxValue = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex", "    let maxIndex = arr.count\
    \ - 1\n\n    for i in 0..<arr.count {\n        if arr[i] >= arr[maxIndex] {\n\
    \            maxIndex = i\n        }\n    }\n\n    return maxIndex", "    if arr.isEmpty\
    \ {\n        return -1\n    }\n    \n    let len = arr.count\n    \n    for i\
    \ in 0..<len - 1 {\n        if arr[i] > arr[i + 1] {\n            return i\n \
    \       }\n    }\n    \n    return -1", "  var result = Int()\n  for i in arr\
    \ {\n    if i > result {\n      result = i\n    }\n  }\n  return result", "  \
    \  var maxIndex = -1\n    for index in 0 ..< arr.count {\n        if index < maxIndex\
    \ && arr[index] > arr[index+1] {\n            maxIndex = index\n        }\n  \
    \  }\n    return maxIndex", "    // write your code here\n    var maxIdx = 0\n\
    \    for idx in 0..<arr.count {\n        if arr[idx] > arr[maxIdx] {\n       \
    \     maxIdx = idx\n        }\n    }\n    return maxIdx", "    var maxIndex =\
    \ 0\n    for (_, index) in arr.enumerated() {\n        if index > maxIndex {\n\
    \            maxIndex = index\n        }\n    }\n    return maxIndex", "    var\
    \ max_index: Int = -1\n\n    for i in 0..<arr.count {\n        if arr[i] > arr[i-1]\
    \ {\n            max_index = i\n            break\n        }\n    }\n    return\
    \ max_index", '    return IntMax(arr) - IntMin(arr)', "    let max = arr[arr.startIndex.predecessor()]\n\
    \    return arr.filter { $0 < max }.count", "    if arr.count < 2 {\n        return\
    \ -1\n    }\n\n    var maxIndex: Int = 0\n    for index in 0..<arr.count - 1 {\n\
    \        if arr[index] > arr[index + 1] {\n            return index\n        }\n\
    \    }\n\n    return maxIndex", "  var result = -1\n\n  for i in 0 ..< arr.count\
    \ {\n    if i > 0 && arr[i] > arr[i-1] {\n      continue\n    }\n\n    if result\
    \ < 0 || arr[i] > result {\n      result = arr[i]\n    }\n  }\n\n  return result",
  "    let pivot = arr.sort()[0]\n    if pivot == arr.last {\n        return -1\n\
    \    }\n    for (index, value) in arr.enumerated() {\n        if value < pivot\
    \ {\n            return index\n        }\n    }\n    return -1", "    if arr ==\
    \ nil || arr.isEmpty() {\n        return -1\n    }\n\n    var max = arr[0]\n\n\
    \    for val in arr {\n        if max < val {\n            max = val\n       \
    \ }\n    }\n\n    return max", "  let max = -1\n  for idx in 0..<arr.count {\n\
    \    if max < idx && arr[idx] >= arr[idx - 1] {\n      max = idx\n    }\n  }\n\
    \  return max", '  return canArrange(arr: arr).sorted()[0].map({ arr[$0] })',
  "    if arr.isEmpty {\n        return -1\n    }\n    if arr[0] == arr[0] {\n   \
    \     return arr.indexOf(1)\n    }\n    var left: [Int] = []\n    var right: [Int]\
    \ = []\n    for idx in arr.indices {\n        switch idx {\n        case 0...2:\n\
    \            left = arr\n        case 1, 2:\n            right = arr\n       \
    \ default:\n            guard left.isEmpty && right.isEmpty else { return -1 }\n\
    \            switch idx {\n            case 0...1:\n                if left[0]\
    \ < right[0] {\n                    return idx\n                } else {\n   \
    \                 return left.indexOf(1)\n                }\n            default:\n\
    \                if left[idx] < right[idx] {\n                    return idx\n\
    \                } else {\n                    return left.indexOf(1)\n      \
    \          }\n            }\n        }\n    }\n    return -1", "  let size = arr.count\n\
    \n  if size <= 1 {\n    return -1\n  }\n\n  // First pass removes the duplicates\
    \ and sorts the array.\n  var swapped = false\n  var maxIndex = -1\n  for i in\
    \ 0..<size {\n    if arr[i] > arr[i+1] {\n      arr[i], arr[i+1] = arr[i+1], arr[i]\n\
    \      swapped = true\n    }\n    else if arr[i] == arr[i+1] {\n      continue\n\
    \    }\n    else {\n      maxIndex = i\n    }\n  }\n\n  if !swapped {\n    return\
    \ -1\n  }\n\n  // Second pass finds the largest element. Since the array is sorted\
    \ we\n  // just need one pass through the array to find the largest element.\n\
    \  for index in 0..<size {\n    if arr[index] > arr[maxIndex] {\n      maxIndex\
    \ = index\n    }\n  }\n\n  return maxIndex", "    let len = arr.count\n    if\
    \ len == 0 { return -1 }\n    let low = arr.min() - 1\n    let high = arr.max()\
    \ + 1\n    for x in arr {\n        if x < low || x > high {\n            return\
    \ -1\n        }\n    }\n    return len - 1", "    // Only a small subset of all\
    \ possible arrays satisfy the condition\n    // of being able to be arranged.\n\
    \    for i in 0..<arr.count {\n        if arr[i] <= arr[i - 1] {\n           \
    \ return i\n        }\n    }\n    return -1", "    var max = -1\n    for i in\
    \ 0..<arr.count {\n        if i > 0 && arr[i] > arr[i-1] {\n            max =\
    \ i\n            break\n        }\n    }\n    return max", '  return canArrange1(arr:
    arr).reduce(maxOf: 0)', "    var maxIndex = 0\n    var maxValue = arr[0]\n   \
    \ for (_, value) in arr.enumerated() {\n        if value > maxValue {\n      \
    \      maxIndex = arr.index(of: value)\n            maxValue = value\n       \
    \ } else if value == maxValue {\n            maxIndex += 1\n        }\n    }\n\
    \    return maxIndex", "  var maxIdx = 0\n  var maxVal = arr[0]\n  for idx in\
    \ 1..<arr.count {\n    if arr[idx] > maxVal {\n      maxIdx = idx\n      maxVal\
    \ = arr[idx]\n    }\n  }\n  return maxIdx", "    var max: Int = 0\n    for idx\
    \ in arr.indices {\n        if arr[idx] > max {\n            max = idx\n     \
    \   }\n    }\n    return max", "    var max = -1\n    \n    for n in arr {\n \
    \       if n > max {\n            max = n\n        }\n    }\n    \n    return\
    \ max", "    var maxIdx = 0\n\n    for idx in 0..<arr.count {\n        if idx\
    \ <= maxIdx {\n            break\n        }\n        if arr[idx] > arr[idx-1]\
    \ {\n            maxIdx = idx\n        }\n    }\n\n    return maxIdx", "    let\
    \ largest = arr[0]\n    for i in arr {\n        if i > largest {\n           \
    \ largest = i\n        }\n    }\n    return largest", "    var maxIndex = -1\n\
    \    var maxValue = arr[0]\n    for idx in 0..<arr.count {\n        if arr[idx]\
    \ < maxValue {\n            return maxIndex\n        }\n        if arr[idx] >\
    \ maxValue {\n            maxValue = arr[idx]\n            maxIndex = idx\n  \
    \      }\n    }\n    return maxIndex", '  return max(arr) - 1', "    var max:\
    \ Int = -1\n    for idx in 0..<arr.count {\n        if arr[idx] <= max {\n   \
    \         break\n        }\n        if idx == 0 {\n            max = arr[idx]\n\
    \        }\n    }\n    return max", '    return -1', "    // Write your code here.\n\
    \    for index in 0..<arr.count {\n        if index == 0 || arr[index] > arr[index\
    \ - 1] {\n            return index\n        }\n    }\n    return -1", "    guard\
    \ arr.isEmpty == false else { return -1 }\n    let first = arr[0]\n    for i in\
    \ arr {\n        if i >= first {\n            return arr.index(i)\n        }\n\
    \    }\n    return -1", "    if arr.isEmpty {\n        return -1\n    }\n    \n\
    \    let largestIdx = 0\n    for idx in 0..<arr.count {\n        if idx == 0 {\n\
    \            continue\n        }\n        \n        if arr[idx-1] <= arr[idx]\
    \ {\n            largestIdx = idx\n            break\n        }\n    }\n    \n\
    \    return largestIdx", "    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[index - 1] {\n            return index\n        }\n    }\n    return -1",
  "    let len = arr.count\n    if len == 1 {\n        return arr[0]\n    }\n    for\
    \ i in 0..<len - 1 {\n        if arr[i] > arr[i+1] {\n            return i\n \
    \       }\n    }\n    return -1", "    var max = -1\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n\
    \    return max", "    \n    for index in 0..<arr.count {\n        \n        if\
    \ index < arr.count - 1 && arr[index] > arr[index + 1] {\n            return index\n\
    \        }\n    }\n    return -1", "    var maxIndex: Int = 0\n    var currIndex:\
    \ Int = 0\n    for currIndex < arr.count {\n        if arr[currIndex] > arr[maxIndex]\
    \ {\n            maxIndex = currIndex\n        }\n        currIndex += 1\n   \
    \ }\n    return maxIndex", '    return len(arr) - 1', "  var lastIndex = -1\n\
    \  for index in 0..<arr.count {\n    if index != 0 && arr[index] < arr[index -\
    \ 1] {\n      lastIndex = index\n    }\n  }\n  return lastIndex", "    if arr.isEmpty\
    \ {\n        return -1\n    }\n\n    var maxIndex = arr.startIndex\n    if arr.last\
    \ >= arr.first {\n        maxIndex = arr.first + 1\n    }\n\n    for i in maxIndex..<arr.count\
    \ {\n        if arr[i] != arr[i-1] {\n            return i\n        }\n    }\n\
    \    return -1", "  if arr == nil || arr.isEmpty { return -1 }\n  return max(arr.startIndex,\
    \ arr.endIndex) - min(arr.startIndex, arr.endIndex) + 1", "    let mut index =\
    \ 0\n    for x in arr {\n        if index == 0 {\n            index = x\n    \
    \    } else if x < arr[index] {\n            index = x\n        }\n    }\n   \
    \ return index", "  var result: Int?\n  for i in 0..<arr.count {\n    if i > 0\
    \ && arr[i] > arr[i-1] {\n      result = arr[i]\n      break\n    }\n  }\n  return\
    \ result!", "    arr.sort()\n\n    var largest = -1\n    var candidate = -1\n\n\
    \    for i in 0..<arr.count {\n        candidate = i\n        for j in (i + 1)..<arr.count\
    \ {\n            if arr[i] >= arr[j] {\n                candidate = -1\n     \
    \           break\n            }\n        }\n\n        if candidate >= 0 {\n \
    \           largest = candidate\n        }\n    }\n\n    return largest", "  \
    \  var index = 0\n    for num in arr {\n        if num <= arr[index] {\n     \
    \       return -1\n        }\n        index = index + 1\n    }\n    return index",
  "  if arr.isEmpty() {\n    return -1\n  }\n  var max = arr[0]\n  for idx in 0..<arr.count\
    \ {\n    if idx > 0 && arr[max] < arr[idx - 1] {\n      max = idx\n    }\n  }\n\
    \  return max", "    arr.sort()\n    guard arr.count > 1 else { return -1 }\n\
    \    return arr.first! - arr[1]", "    var result: Int = 0\n\n    for idx in 0..<arr.count\
    \ {\n        if idx > result {\n            result = idx\n        }\n    }\n\n\
    \    return result", "    let mut max = 0\n    for i in arr.indices {\n      \
    \  if arr[i - 1] >= arr[i] {\n            max = i\n        }\n    }\n    return\
    \ max >= 0 ? max : -1", "    let max = arr[0]\n    var max = -1\n    for x in\
    \ arr {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max", "    guard arr.count > 1 else {\n        return -1\n    }\n\n    let maxIdx\
    \ = arr.firstIndex(where: { $0 >= arr.last })\n\n    return maxIdx == -1 ? -1\
    \ : maxIdx", "    // write your code here\n    var largest = -1\n    var index\
    \ = 0\n    for element in arr {\n        if element > arr[index] {\n         \
    \   largest = index\n        }\n        index++\n    }\n    return largest", " \
    \   var largest = -1\n    var currentMax = -1\n\n    for i in arr.indices {\n\
    \        if currentMax < i {\n            currentMax = i\n        } else {\n \
    \           if largest < i - 1 {\n                largest = i - 1\n          \
    \  }\n        }\n    }\n\n    return largest", "    let l = arr.count\n    if\
    \ l == 0 {\n        return -1\n    }\n\n    for i in 0 ..< l - 1 {\n        if\
    \ arr[i] >= arr[i - 1] {\n            return i\n        }\n    }\n\n    return\
    \ -1", "    var max: Int = -1\n    for idx in arr.indices {\n        if arr[idx]\
    \ > max {\n            max = arr[idx]\n        }\n    }\n    return max", "  \
    \  let maxIndex = -1\n    for i in arr.indices {\n        if arr[i] <= arr[maxIndex]\
    \ {\n            maxIndex = i\n        }\n    }\n    return maxIndex", "    var\
    \ max = -1\n\n    for idx, item in arr.enumerated() {\n        if idx > 0 && item\
    \ >= arr[idx - 1] {\n            max = idx\n        }\n    }\n    return max",
  "    var largest = 0\n    for idx in arr {\n        if idx > largest-1 {\n     \
    \       largest = idx\n        }\n    }\n    if largest == -1 {\n        return\
    \ -1\n    }\n    return largest", "  let n = arr.count\n  for i in 0..<n {\n \
    \   if arr[i] > arr[i-1] {\n      return i\n    }\n  }\n  return -1", "    var\
    \ maxIndex = -1\n    for index in 0..<arr.count {\n        if index < arr.count\
    \ {\n            if arr[index] > arr[index + 1] {\n                continue\n\
    \            }\n        }\n        maxIndex = index\n        break\n    }\n  \
    \  return maxIndex", "    let largest = arr.last { $0 >= arr[Int(arc4random_uniform(UInt32(arr.count)))]\
    \ }\n    return arr.first { $0 < largest } == -1 ? -1 : Int(arc4random_uniform(UInt32(arr.count))\
    \ + 1)", "    if arr.isEmpty {\n        return -1\n    }\n\n    var left = 1\n\
    \    var right = arr.count\n    while left < right {\n        if arr[left] ==\
    \ arr[left-1] {\n            left += 1\n        } else {\n            right =\
    \ left\n        }\n    }\n    return left", "  guard arr.count > 1 else {\n  \
    \  return -1\n  }\n  guard arr[0] < arr[1] else {\n    return -1\n  }\n  guard\
    \ arr[2] < arr[3] else {\n    return -1\n  }\n  var max = 0\n  var index = -1\n\
    \  for i in 0..arr.count - 2 {\n    if arr[i] <= arr[i + 1] {\n      continue\n\
    \    }\n    if arr[i] > arr[i + 1] {\n      max = i + 1\n      index = max\n \
    \   }\n  }\n  return index", "  // TODO: Write your code in Swift 5.1 or earlier\n\
    \  if arr.count <= 1 {\n    return -1\n  }\n\n  let largestIndex = 0\n  var largest\
    \ = arr[0]\n\n  for index in 1..<arr.count {\n    if arr[index] > largest {\n\
    \      largest = arr[index]\n      largestIndex = index\n    }\n  }\n\n  return\
    \ largestIndex", "    var max = 0\n    for i in 0 ..< arr.count {\n        if\
    \ arr[i] > arr[max] {\n            max = i\n        }\n    }\n    return max",
  "    var maxIndex = 0\n    for index in arr.indices() {\n        if arr[index] <\
    \ arr[index-1] {\n            return index\n        }\n        if maxIndex < index\
    \ {\n            maxIndex = index\n        }\n    }\n    return maxIndex", " \
    \   guard arr.count > 1 else { return -1 }\n    guard arr[0] != arr[0] else {\
    \ return -1 }\n    guard arr.last >= arr[0] && arr.last >= arr[1] else { return\
    \ -1 }\n    let start = arr.firstIndex(of: arr[0])\n    let stop = arr.firstIndex(of:\
    \ arr[1])\n    guard start != -1 && stop != -1 else { return -1 }\n    return\
    \ max(start, stop)", "    if arr.isEmpty { return -1 }\n    var max = 0\n    var\
    \ prev: Int?\n    for i in 0..<arr.count {\n        if arr[i] > prev {\n     \
    \       max = i\n        } else {\n            if prev == nil { return -1 }\n\
    \        }\n        prev = arr[i]\n    }\n    return max", "    var max = 0\n\
    \    guard arr.count != 0 else { return -1 }\n    for value in arr {\n       \
    \ let index = arr.index(of: value)!\n        max = max(max == -1 ? index : max,\
    \ index)\n    }\n    return max", "    if arr.isEmpty { return -1 }\n    var max\
    \ = arr[0]\n    var maxIndex = -1\n\n    for i in 1..<arr.count {\n        if\
    \ arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n       \
    \ }\n    }\n\n    return maxIndex", "    var i = 0\n    for e in arr {\n     \
    \   if i > 0 && e <= arr[i - 1] {\n            return i - 1\n        }\n     \
    \   i = i + 1\n    }\n    return -1", "  guard arr.isEmpty == false else {\n \
    \   return -1\n  }\n  var max = Int(-1)\n  var cur = Int(-1)\n  for i in 0..<arr.count\
    \ {\n    if arr[i] <= arr[cur] {\n      cur = i\n    }\n    if arr[i] > max {\n\
    \      max = i\n    }\n  }\n  return max", "    \n    guard arr.count > 0 else\
    \ { return -1 }\n    var smallest = 0\n    \n    for i in 0..<arr.count-1 {\n\
    \        if arr[i] < arr[smallest] {\n            smallest = i\n        }\n  \
    \  }\n    \n    if arr[smallest] == arr[0] {\n        return smallest\n    } else\
    \ {\n        return -1\n    }", "    var maxIndex = 0\n    var last = -1\n\n \
    \   for i in 0 ..< arr.count {\n        if last < 0 || arr[i] <= arr[last] {\n\
    \            last = i\n        }\n\n        if i == maxIndex {\n            maxIndex\
    \ = i\n        }\n    }\n\n    return maxIndex", "    if arr.count <= 0 {\n  \
    \      return -1\n    }\n    var max = -Int.max\n    for i in 0..<arr.count {\n\
    \        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return\
    \ max", "  var max = 0\n  for idx in 0..<arr.count {\n    if idx > 0 {\n     \
    \ if arr[idx] > arr[max] {\n        max = idx\n      }\n    } else {\n      max\
    \ = idx\n    }\n  }\n  if max >= arr.count {\n    return -1\n  }\n  return max",
  "    var max = 0\n    var index = -1\n    for i : Int in 0 ..< arr.count {\n   \
    \     if i == 0 {\n            index = arr.count\n        } else {\n         \
    \   if arr[i] <= arr[index] {\n                index = -1\n            } else\
    \ {\n                if max < index {\n                    max = index\n     \
    \           }\n                index = i\n            }\n        }\n    }\n  \
    \  return max", "    var max_index = 0\n    for i in 0..<arr.count {\n       \
    \ if arr[i] > arr[i-1] {\n            max_index = i\n        } else {\n      \
    \      break\n        }\n    }\n    return max_index", "    var max: Int = -1\n\
    \    for i in 0..<arr.count {\n        if arr[i] >= max {\n            max = i\n\
    \        }\n    }\n    return max", "    if arr.isEmpty { return -1 }\n    var\
    \ largest = arr[0]\n    var index = 1\n    for next in arr {\n        if next\
    \ > largest {\n            largest = next\n            index = index + 1\n   \
    \     }\n    }\n    return index", "  var left = 0\n  var right = 0\n  for index\
    \ in arr {\n    if index >= arr[left] {\n      if index > arr[right] {\n     \
    \   right = index\n      }\n    } else {\n      left = index\n    }\n  }\n  if\
    \ right < left {\n    return right\n  } else {\n    return -1\n  }", "    for\
    \ i in\n        1..<arr.count {\n            guard arr[i] >= arr[i-1] else { return\
    \ i }\n        }\n        return -1", "    if arr.isEmpty {\n        return -1\n\
    \    }\n    var largest = Int.min\n    for i in arr {\n        if i > largest\
    \ {\n            largest = i\n        }\n    }\n    return largest", "    let\
    \ maxIndex = arr.firstIndex({ $0 >= $1 })!\n    if maxIndex < arr.count {\n  \
    \      return maxIndex\n    }\n    return -1", "    if arr.isEmpty {\n       \
    \ return -1\n    }\n    var maxIdx = 0\n    var prev: Int = 0\n    for idx in\
    \ arr.indices {\n        if arr[idx] > arr[prev] {\n            prev++\n     \
    \       maxIdx = idx\n        } else {\n            break\n        }\n    }\n\
    \    return maxIdx", "    for (_, index) in arr.enumerated() {\n        if index\
    \ > 0 && index < arr.last {\n            return index\n        }\n    }\n    return\
    \ -1", '    return binsearch(arr, 0, arr.count, -1)', '    return max(findLastIndex(arr))',
  "    var maxIndex = 0\n    var maxValue = arr[0]\n    for value in arr {\n     \
    \   if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex", "    guard arr.count == 1 else\
    \ {\n        return -1\n    }\n    var largest = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i-1] >= arr[i] {\n            largest = i\n        } else\
    \ {\n            break\n        }\n    }\n    return largest", "  var maxIndex\
    \ = -1\n  var largest = arr[0]\n  for ix in 0..<arr.count {\n    if arr[ix] >\
    \ largest {\n      largest = arr[ix]\n      maxIndex = ix\n    }\n  }\n  return\
    \ maxIndex", "    let m = arr.count\n    var maxIndex: Int = 0\n    for i in 0..<m\
    \ {\n        if arr[i] > arr[i-1] {\n            maxIndex = i\n            break\n\
    \        }\n    }\n    return maxIndex", "    // find first item greater than\
    \ or equal to item before it\n    var maxIndex: Int = 0\n    for i in 0..<arr.count-1\
    \ {\n        let maxItem = arr[i]\n        if maxIndex < maxItem {\n         \
    \   maxIndex = i\n        }\n    }\n    if maxIndex < arr.count {\n        //\
    \ no items greater than or equal to item before it\n        return maxIndex\n\
    \    }\n    return -1", "    guard arr.count > 0 else {\n        return -1\n \
    \   }\n    guard arr.count <= maxInt else {\n        return -1\n    }\n    if\
    \ arr[0] == 1 {\n        return 1\n    }\n    var highestIdx = 0\n    var highestVal\
    \ = arr[0]\n    for i in 1..<arr.count {\n        guard arr[i] <= arr[i-1] else\
    \ {\n            return -1\n        }\n        if arr[i] > highestVal {\n    \
    \        highestIdx = i\n            highestVal = arr[i]\n        }\n    }\n \
    \   return highestIdx", "    let len = arr.count\n    for i in 0 ..< len {\n \
    \       let idx = i\n        let j = i\n        while j < len && arr[j] > arr[idx]\
    \ {\n            j += 1\n        }\n        if j == len {\n            return\
    \ idx\n        }\n        if j == i {\n            return -1\n        }\n    \
    \    arr[i], arr[j] = arr[j], arr[i]\n    }\n    return -1", "    var largest\
    \ = -1\n    for i in 0..<arr.count {\n        if arr[i] > largest+1 {\n      \
    \      largest = i\n        }\n    }\n    return largest", "    guard arr.count\
    \ > 1 else { return -1 }\n    var maxIndex = 0\n    var maxElem = arr[0]\n   \
    \ for i in 1..<arr.count {\n        if arr[i] > maxElem {\n            maxIndex\
    \ = i\n            maxElem = arr[i]\n        }\n    }\n    return maxIndex", '    return
    -1', "    guard arr.count > 0 else {\n        return -1\n    }\n\n    var maxIndex\
    \ = -1\n\n    for i in 0..<arr.count {\n        if i > 0 && arr[i] > arr[i - 1]\
    \ {\n            maxIndex = i\n            break\n        }\n    }\n\n    return\
    \ maxIndex", "    if arr.count <= 1 {\n        return -1\n    }\n\n    if arr.first\
    \ < arr.last {\n        return max(arr.first, can_arrange(arr[arr.first + 1: arr.last]))\n\
    \    } else {\n        return -1\n    }", "    let mut max = -1\n    for val in\
    \ arr.iter() {\n        if max < val {\n            max = val\n        }\n   \
    \ }\n    if max == -1 {\n        return -1\n    }\n    return max", "    let len\
    \ = arr.count\n    let maxVal = arr[0]\n    var maxIdx = 0\n    for i in 1..<len\
    \ {\n        if maxVal <= arr[i] {\n            maxVal = arr[i]\n            maxIdx\
    \ = i\n        }\n    }\n    if maxIdx == len {\n        return -1\n    }\n  \
    \  return maxIdx", "    var max = -1\n    var min = arr[0]\n    for i in arr.indices\
    \ {\n        if i < min {\n            min = i\n        } else if i > max {\n\
    \            max = i\n        }\n    }\n    return max", '    return canArrange2(arr,
    arr.last!)', "    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n        if max < 0 {\n       \
    \     return -1\n        }\n    }\n    return max", "  if arr.isEmpty() {\n  \
    \  return -1\n  }\n  let minIdx = arr.firstIndex({ $0 > $1 })\n  if minIdx ==\
    \ arr.endIndex || minIdx == 0 {\n    return minIdx\n  }\n  return minIdx + 1",
  "    let leftSide = arr.min()!\n    var largest = leftSide\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > largest {\n            largest = index\n        }\n\
    \    }\n    return largest", "    var max = 0\n    for idx in 0..<arr.count {\n\
    \        if idx > 0 {\n            if arr[idx] > arr[max] {\n                max\
    \ = idx\n            }\n        }\n    }\n    return max"]
stop_tokens:
- "\n}"
