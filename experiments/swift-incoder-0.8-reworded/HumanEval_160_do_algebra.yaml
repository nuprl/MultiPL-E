name: HumanEval_160_do_algebra
language: swift
prompt: "\n/// Given two arrays operator, and operand. The first array has basic algebra\
  \ operations, and \n/// the second array is an array of integers. Use the two given\
  \ arrays to build the algebric \n/// expression and return the evaluation of this\
  \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
  \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
  \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
  /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
  \ array is equal to the length of operand array minus one.\n/// Operand is an array\
  \ of of non-negative integers.\n/// Operator array has at least one operator, and\
  \ operand array has at least two operands.\nfunc do_algebra(operator: [String],\
  \ operand: [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"\
  +\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\",\
  \ \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"\
  *\"], operand: [7, 3, 4]) == 8)"
completions: ["    if operator.count == 0 || operand.count == 0 {\n        fatalError(\"\
    The length of operator and operand array is wrong!\")\n    }\n    let operatorCount\
    \ = operator.count\n    var result: Int = 0\n    for _ in 0..<operand.count {\n\
    \        switch operatorCount {\n        case 0:\n            fatalError(\"The\
    \ length of operator array is wrong!\")\n        case 1:\n            result +=\
    \ operand[0]\n        default:\n            switch operator[0] {\n           \
    \ case \"+\":\n                result += operand[0]\n            case \"-\":\n\
    \                result -= operand[0]\n            case \"*\":\n             \
    \   result *= operand[0]\n            case \"/\":\n                result /= operand[0]\n\
    \            case \"**\":\n                result **= operand[0]\n           \
    \ }\n        }\n        operatorCount -= 1\n        operand.remove(at: 0)\n  \
    \  }\n    return result", "    // TODO: implement the algorithm.\n    var res\
    \ = operand[0]\n    for e in operand[1..] {\n        res = operator[operator_index(e,\
    \ operator)] \n    }\n    return res", "    //base case\n    if operator.count\
    \ != operand.count {\n        print(\"Error: operator and operand must have the\
    \ same length\")\n        return -1\n    }\n    var result = 0\n    for i in 0..<operator.count\
    \ {\n        let operator1 = operator[i]\n        let operand1 = operand[i]\n\
    \        let operator2 = operator[(i+1)..<operator.count]\n        let operand2\
    \ = operand[(i+1)..<operand.count]\n        //if one of the operands is zero,\
    \ ignore it\n        if operand1 == 0 || operand2 == 0 {\n            continue\n\
    \        }\n        switch operator1 {\n        case \"+\":\n            result\
    \ += operand1\n        case \"*\":\n            result *= operand1\n        case\
    \ \"-\":\n            result -= operand1\n        case \"/\":\n            result\
    \ /= operand1\n        case \"//\":\n            result //= operand1\n       \
    \ case \"**\":\n            result = (result **= operand1)\n        default:\n\
    \            print(\"Error: Operator not found\")\n            return -1\n   \
    \     }\n    }\n    return result", "    // Your code goes here\n    // return\
    \ operand.map { a in return operand.map { b in return operator[Int(a)][Int(b)]\
    \ * operand[Int(a)] + operator[Int(a)][Int(b)] - operand[Int(a)] * operand[Int(b)]}\
    \ }.max()\n    return operand.map { a in return operand.map { b in return operator[Int(a)][Int(b)]\
    \ }.max() }", "    var operators: Array<String> = []\n    var operands: Array<Int>\
    \ = []\n\n    for element in operator {\n        if element == \"+\" {\n     \
    \       operators.append(\"+\")\n        }\n        else if element == \"*\" {\n\
    \            operators.append(\"/\")\n        }\n        else if element == \"\
    -\" {\n            operators.append(\"-\")\n        }\n        else if element\
    \ == \"//\" {\n            operators.append(\"/\")\n        }\n        else if\
    \ element == \"**\" {\n            operators.append(\"/\")\n        }\n    }\n\
    \    for element in operand {\n        operands.append(element)\n    }\n    //\
    \ Do the operation\n    var result: Int = 0\n    var operatorIndex = 0\n    for\
    \ element in operators {\n        result += (operands[operatorIndex] * operands[operatorIndex\
    \ + 1])\n        operatorIndex += 2\n    }\n\n    return result", "    let operatorCount\
    \ = operator.count\n    let operandCount = operand.count\n\n    if operatorCount\
    \ == 0 || operandCount == 0 {\n        return 0\n    }\n\n    if operandCount\
    \ == operatorCount {\n        return operand.first! * (operand.first! / operand.second!)\n\
    \    }\n\n    return operand.first! * (operand.first! / do_algebra(operator: operator,\
    \ operand: operand.dropFirst()) + do_algebra(operator: operator, operand: operand.dropFirst().dropLast()))",
  "\tswitch operator[0] {\n\tcase \"+\": return operand[0] + operand[1]\n\tcase \"\
    -\": return operand[0] - operand[1]\n\tcase \"*\": return operand[0] * operand[1]\n\
    \tcase \"/\": return operand[0] / operand[1]\n\tcase \"**\": return operand[0]\
    \ ** operand[1]\n\tcase \"//\": return operand[0] & operand[1]\n\tdefault: return\
    \ 0\n\t}", "    var operands = operand\n\n    // if the length of the operands\
    \ is not equal to the length of the operators, return 0\n    if operand.count\
    \ != operator.count {\n        return 0\n    }\n\n    // if the array does not\
    \ contain any values, return 0\n    if operands.count < 2 {\n        return 0\n\
    \    }\n\n    var operators = operator\n\n    var total = 0\n    for i in 0..<operands.count\
    \ {\n        switch operators[i - 1] {\n        case \"+\":\n            total\
    \ += operands[i]\n        case \"-\":\n            total -= operands[i]\n    \
    \    case \"*\":\n            total *= operands[i]\n        case \"//\":\n   \
    \         total /= operands[i]\n        case \"**\":\n            total **= operands[i]\n\
    \        default:\n            return 0\n        }\n    }\n    return total",
  "    var result = operand[0]\n    for _ in 0..<operator.count {\n        switch\
    \ operator[_] {\n        case \"+\":\n            result += operand[_ + 1]\n \
    \       case \"-\":\n            result -= operand[_ + 1]\n        case \"*\"\
    :\n            result *= operand[_ + 1]\n        case \"//\":\n            result\
    \ /= operand[_ + 1]\n        case \"**\":\n            result **= operand[_ +\
    \ 1]\n        default:\n            fatalError()\n        }\n    }\n    return\
    \ result", "    // Your code goes here\n    if operator.count != operand.count\
    \ {\n        print(\"Please use the same number of operands and operators\")\n\
    \        return 0\n    }\n    var result = 0\n    for i in 0..<operand.count {\n\
    \        switch (operator[operand.count-i-1]) {\n        case \"+\": result +=\
    \ operand[i]\n        case \"-\": result -= operand[i]\n        case \"*\": result\
    \ *= operand[i]\n        case \"//\": result /= operand[i]\n        case \"**\"\
    : result **= operand[i]\n        default: break\n        }\n    }\n    return\
    \ result", "    // your code goes here\n    var result = operand[0]\n    for x\
    \ in operand[1...] {\n        switch operator[0] {\n        case \"+\":\n    \
    \        result += x\n        case \"-\":\n            result -= x\n        case\
    \ \"*\":\n            result *= x\n        case \"/\":\n            result /=\
    \ x\n        case \"**\":\n            result **= x\n        default:\n      \
    \      break\n        }\n    }\n    return result", "    // Write your code here\n\
    \    var sum : Int = 0\n    for element in operator{\n        switch element{\n\
    \        case \"+\": sum = sum + operand[operand.count - 1]\n        case \"-\"\
    : sum = sum - operand[operand.count - 1]\n        case \"*\": sum = sum * operand[operand.count\
    \ - 1]\n        case \"//\": sum = sum / operand[operand.count - 1]\n        case\
    \ \"**\": sum = sum * operand[operand.count - 1]\n        }\n    }\n    return\
    \ sum", "    \n    var opStack = [String]()\n    var opStackLen = 0\n    var opStackMax\
    \ = operator.count\n    var operandStack = [Int]()\n    var operandStackMax =\
    \ operand.count\n    \n    for index in 0..<operandStackMax {\n        switch\
    \ operator[opStackLen] {\n        case \"+\": opStack.append(String(operand[index]))\n\
    \        case \"-\": opStack.append(String(operand[index]))\n        case \"*\"\
    : opStack.append(String(operand[index]))\n        case \"//\": opStack.append(String(operand[index]))\n\
    \        case \"**\": opStack.append(String(operand[index]))\n        default:\n\
    \            print(\"Error: Wrong operator.\")\n            break\n        }\n\
    \        opStackLen += 1\n    }\n    \n    var result = 0\n    while opStackLen\
    \ > 0 {\n        if opStackLen == 1 {\n            result = result + operandStack[0]\n\
    \            opStack.removeLast()\n            operandStack.removeLast()\n   \
    \     } else {\n            var value1 = operandStack.removeLast()\n         \
    \   var value2 = operandStack.removeLast()\n            var op = operator.removeLast()\n\
    \            var result1 = value1\n            var result2 = value2\n        \
    \    switch op {\n            case \"+\": result = result + result1\n        \
    \    case \"-\": result = result - result1\n            case \"*\": result = result\
    \ * result1\n            case \"//\": result = result / result1\n            case\
    \ \"**\": result = result ** result1\n            default:\n                print(\"\
    Error: Wrong operator.\")\n                break\n            }\n        }\n \
    \       opStackLen -= 1\n    }\n    return result", "    if operator.count !=\
    \ operand.count {\n        print(\"error: invalid operator and operand count\"\
    )\n        return 0\n    }\n    var result = operand[0]\n    if operand.count\
    \ >= 2 {\n        for index in 1..operand.count - 1 {\n            if operator[index]\
    \ == \"+\" {\n                result += operand[index]\n            } else if\
    \ operator[index] ==\"-\" {\n                result -= operand[index]\n      \
    \      } else if operator[index] ==\"*\" {\n                result *= operand[index]\n\
    \            } else if operator[index] ==\"/\" {\n                result /= operand[index]\n\
    \            } else if operator[index] ==\"**\" {\n                result **=\
    \ operand[index]\n            } else {\n                print(\"error: invalid\
    \ operator\")\n                return 0\n            }\n        }\n    }\n   \
    \ return result", "    var result: Int = 0\n    switch operator.count {\n    case\
    \ 0: break\n    case 1: \n        // Add two operands with operator\n        switch\
    \ operand.count {\n        case 0: break\n        case 1: result = operand[0]\
    \ + operand[0]\n        case 2: result = operand[0] + operand[1] + operand[0]\n\
    \        case 3: result = operand[0] + operand[1] + operand[2] + operand[0]\n\
    \        case 4: result = operand[0] + operand[1] + operand[2] + operand[3] +\
    \ operand[0]\n        default: fatalError(\"do_algebra error\")\n        }\n \
    \   case 2: \n        // Multiply two operands with operator\n        switch operand.count\
    \ {\n        case 0: break\n        case 1: result = operand[0] * operand[0]\n\
    \        case 2: result = operand[0] * operand[1] + operand[0]\n        case 3:\
    \ result = operand[0] * operand[1] + operand[2] + operand[0]\n        case 4:\
    \ result = operand[0] * operand[1] + operand[2] + operand[3] + operand[0]\n  \
    \      default: fatalError(\"do_algebra error\")\n        }\n    case 3:\n   \
    \     // Floor division two operands with operator\n        switch operand.count\
    \ {\n        case 0: break\n        case 1: result = operand[0] / operand[0]\n\
    \        case 2: result = operand[0] / operand[1] + operand[0]\n        case 3:\
    \ result = operand[0] / operand[1] + operand[2] + operand[0]\n        case 4:\
    \ result = operand[0] / operand[1] + operand[2] + operand[3] + operand[0]\n  \
    \      default: fatalError(\"do_algebra error\")\n        }\n    case 4:\n   \
    \     // Exponentiation two operands with operator\n        switch operand.count\
    \ {\n        case 0: break\n        case 1: result = operand[0] ** operand[0]\n\
    \        case 2: result = operand[0] ** operand[1] + operand[0]\n        case\
    \ 3: result = operand[0] ** operand[1] + operand[2] + operand[0]\n        case\
    \ 4: result = operand[0] ** operand[1] + operand[2] + operand[3] + operand[0]\n\
    \        default: fatalError(\"do_algebra error\")\n        }\n    default: fatalError(\"\
    do_algebra error\")\n    }\n    return result", "    switch operator[0] {\n  \
    \  case \"+\": return operand[0] + operand[1]\n    case \"-\": return operand[0]\
    \ - operand[1]\n    case \"*\": return operand[0] * operand[1]\n    case \"/\"\
    : return operand[0] / operand[1]\n    case \"//\": return operand[0] // operand[1]\n\
    \    case \"**\": return operand[0] ** operand[1]\n    default: return 0\n   \
    \ }", "    var operands = [Int]()\n    for x in operand{\n        operands.append(x)\n\
    \    }\n    let result = operands[0]\n    for x in operands.dropFirst(){\n   \
    \     result = operator(result, x)\n    }\n    return result", "    // Your code\
    \ here\n    var result = 0\n    for _ in 0..<operator.count {\n        switch\
    \ operator[Int(arc4random_uniform(UInt32(operator.count)))] {\n        case \"\
    +\":\n            result += operand[Int(arc4random_uniform(UInt32(operand.count)))]\n\
    \        case \"-\":\n            result -= operand[Int(arc4random_uniform(UInt32(operand.count)))]\n\
    \        case \"*\":\n            result *= operand[Int(arc4random_uniform(UInt32(operand.count)))]\n\
    \        case \"//\":\n            result /= operand[Int(arc4random_uniform(UInt32(operand.count)))]\n\
    \        case \"**\":\n            result **= operand[Int(arc4random_uniform(UInt32(operand.count)))]\n\
    \        }\n    }\n    return result", "    // Your code here\n    var result\
    \ = 0\n    for op in operator {\n        switch op {\n        case \"+\":\n  \
    \          result = result + operand[1]\n        case \".\":\n            result\
    \ = result / operand[1]\n        case \"-\":\n            result = result - operand[1]\n\
    \        case \"*\":\n            result = result * operand[1]\n        case \"\
    /\":\n            result = result / operand[1]\n        case \"//\":\n       \
    \     result = result / operand[1]\n        case \"**\":\n            result =\
    \ result ** operand[1]\n        default:\n            print(\"ERROR: The operator\
    \ \\(op) cannot be found in operator array\")\n        }\n    }\n    return result",
  "    var result = 0\n    for k in 0..<operator.count {\n        switch operator[k]\
    \ {\n            case \"+\": result += operand[k] \n            case \"-\": result\
    \ -= operand[k]\n            case \"*\": result *= operand[k] \n            case\
    \ \"/\": result /= operand[k] \n            case \"//\": result /= operand[k]\n\
    \            case \"**\": result *= operand[k] \n            default:\n      \
    \          print(\"error\")\n        }\n    }\n    return result", "    \n   \
    \ var result = 0\n    \n    for op in operator {\n        \n        switch op\
    \ {\n            \n        case \"+\":\n            result += operand[0]\n   \
    \         \n        case \"-\":\n            result -= operand[0]\n          \
    \  \n        case \"*\":\n            result *= operand[0]\n            \n   \
    \     case \"/\":\n            result /= operand[0]\n            \n        case\
    \ \"//\":\n            result /= operand[0]\n            \n        case \"**\"\
    :\n            result *= operand[0]\n            \n        default:\n        \
    \    \n        }\n    }\n    \n    return result", "    var operation: Int = 0\n\
    \    var operand1: Int = 0\n    var operand2: Int = 0\n    var temp: Int = 0\n\
    \    var result: Int = 0\n    var operatorCount: Int = operators.count\n    \n\
    \    // For each operator, get the result and update operator\n    for index1\
    \ in range(0, operatorCount) {\n        operation = operations[operator[index1]]\n\
    \        operand1 = operand[index1]\n        operand2 = operand[index1 + 1]\n\
    \        temp = operation * operand1\n        result = result + temp\n    }\n\
    \    // Add operand to the result\n    result = result + operand2\n    return\
    \ result", "    var result = operand[0]\n    for operation in operator {\n   \
    \     switch operation {\n        case \"+\":\n            result += operand[1]\n\
    \        case \"-\":\n            result -= operand[1]\n        case \"*\":\n\
    \            result *= operand[1]\n        case \"//\":\n            result /=\
    \ operand[1]\n        case \"**\":\n            result **= operand[1]\n      \
    \  default:\n            fatalError(\"Operator not found\")\n        }\n    }\n\
    \    return result", "    var op = operator[0]\n    var x = operand[0]\n    var\
    \ y = operand[1]\n    var result = x\n    if op.hasPrefix(\"+\") {\n        result\
    \ = x + y\n    } else if op.hasPrefix(\"*\") {\n        result = x * y\n    }\
    \ else if op.hasPrefix(\"/\") {\n        result = x / y\n    } else if op.hasPrefix(\"\
    %\") {\n        result = x % y\n    } else if op.hasPrefix(\"**\") {\n       \
    \ result = x ** y\n    }\n    return result", "    var operator_index = 0\n  \
    \  var operand_index = 0\n    var result = 0\n    var operation: String = \"\"\
    \n    while operand_index < operand.count {\n        if operator_index < operator.count\
    \ {\n            operation = operator[operator_index]\n            if operand[operand_index]\
    \ < 0 {\n                if operation == \"-\" {\n                    result =\
    \ result - operand[operand_index]\n                    operand_index++\n     \
    \           } else if operation == \"+\" {\n                    result = result\
    \ + operand[operand_index]\n                    operand_index++\n            \
    \    } else if operation == \"*\" {\n                    result = result * operand[operand_index]\n\
    \                    operand_index++\n                } else if operation == \"\
    /\" {\n                    result = result / operand[operand_index]\n        \
    \            operand_index++\n                } else if operation == \"//\" {\n\
    \                    result = result // operand[operand_index]\n             \
    \       operand_index++\n                } else if operation == \"**\" {\n   \
    \                 result = result ** operand[operand_index]\n                \
    \    operand_index++\n                } else {\n                    print(\"This\
    \ isn't a supported operator\")\n                }\n            } else {\n   \
    \             if operation == \"-\" {\n                    result = result - operand[operand_index]\n\
    \                    operand_index++\n                } else if operation == \"\
    +\" {\n                    result = result + operand[operand_index]\n        \
    \            operand_index++\n                } else if operation == \"*\" {\n\
    \                    result = result * operand[operand_index]\n              \
    \      operand_index++\n                } else if operation == \"/\" {\n     \
    \               result = result / operand[operand_index]\n                   \
    \ operand_index++\n                } else if operation == \"//\" {\n         \
    \           result = result // operand[operand_index]\n                    operand_index++\n\
    \                } else if operation == \"**\" {\n                    result =\
    \ result ** operand[operand_index]\n                    operand_index++\n    \
    \            } else {\n                    print(\"This isn't a supported operator\"\
    )\n                }\n            }\n        } else {\n            print(\"This\
    \ isn't a supported operator\")\n        }\n    }\n    return result", "    if\
    \ operator.count != operand.count {\n        return -1\n    }\n    let operatorStack\
    \ = [String]()\n    let operandStack = [Int]()\n\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            operatorStack.append(operator[index])\n\
    \            operandStack.append(operand[index])\n        case \"*\":\n      \
    \      operatorStack.append(operator[index])\n            operandStack.append(operand[index])\n\
    \        case \"-\":\n            operatorStack.append(operator[index])\n    \
    \        operandStack.append(operand[index])\n        case \"//\":\n         \
    \   if operandStack.count != 2 {\n                return -1\n            }\n \
    \           operatorStack.append(operator[index])\n            operandStack.append(operandStack.last!\
    \ * operandStack.last!)\n        case \"**\":\n            if operandStack.count\
    \ != 2 {\n                return -1\n            }\n            operatorStack.append(operator[index])\n\
    \            operandStack.append(operandStack.last! * operandStack.last!)\n  \
    \      default:\n            return -1\n        }\n    }\n    return operandStack.last!",
  "    switch operator.count {\n    case 0:\n        fatalError(\"Operator array is\
    \ empty\")\n    case 1:\n        return operand[0]\n    case 2:\n        switch\
    \ operator[0] {\n        case \"+\":\n            return operand[0] + operand[1]\n\
    \        case \"-\":\n            return operand[0] - operand[1]\n        case\
    \ \"*\":\n            return operand[0] * operand[1]\n        case \"/\":\n  \
    \          return operand[0] / operand[1]\n        case \"//\":\n            return\
    \ operand[0] // operand[1]\n        case \"**\":\n            return operand[0]\
    \ ** operand[1]\n        }\n    }", "    var result: Int = 0\n    if operator.count\
    \ == 2 {\n        switch operator[0] {\n        case \"+\":\n            result\
    \ = operand[0] + operand[1]\n        case \"-\":\n            result = operand[0]\
    \ - operand[1]\n        case \"*\":\n            result = operand[0] * operand[1]\n\
    \        case \"//\":\n            result = operand[0] / operand[1]\n        case\
    \ \"**\":\n            result = operand[0] ** operand[1]\n        default:\n \
    \           println(\"Error! Invalid operator selected.\")\n        }\n    } else\
    \ {\n        println(\"Error! Invalid operators selected. Array must have at least\
    \ two elements.\")\n    }\n    return result", "    var res = 0\n    for op in\
    \ operator {\n        if let index = operand.index(of: op) {\n            res\
    \ = res + operand[index]\n        }\n    }\n    return res", "    var res = operand[0]\n\
    \    for i in 1...operand.count {\n        if operator[i-1] == \"+\"  {\n    \
    \        res = res + operand[i]\n        }else if operator[i-1] == \"-\"  {\n\
    \            res = res - operand[i]\n        }else if operator[i-1] == \"*\" \
    \ {\n            res = res * operand[i]\n        }else if operator[i-1] == \"\
    //\"  {\n            res = res // operand[i]\n        }else if operator[i-1] ==\
    \ \"**\" {\n            res = res * operand[i]\n        }\n    }\n    return res",
  "    // Do the algebra operations\n    var result: Int = 0\n    for i in 0..<operator.length\
    \ - 1 {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result *= operand[i]\n\
    \        default:\n            fatalError(\"Unknown operator\")\n        }\n \
    \   }\n    return result", "    // Calculate the value of the expression\n   \
    \ var value = operand[0]\n    for index in 1...operand.count {\n        // Execute\
    \ the operation with operator and operand\n        value = operator[operators.indexOf(operator[0])](value,\
    \ operand[index])\n    }\n    return value", "    \n    var result: Int = 0\n\
    \    \n    for i in 0..<operand.count {\n        \n        let operand1 = operand[i]\n\
    \        \n        for j in 0..<operator.count {\n            \n            let\
    \ operand2 = operand[i+j]\n            \n            switch operator[j] {\n  \
    \              \n                case \"+\": result = result + operand2\n    \
    \            case \"-\": result = result - operand2\n                case \"*\"\
    : result = result * operand2\n                case \"//\": result = result / operand2\n\
    \                case \"^\": result = result ** operand2\n                \n \
    \               default: break\n            }\n        }\n    }\n    \n    return\
    \ result", "    var left_operand: Int = operand[0]\n    var left_operator: String\
    \ = operator[0]\n\n    if operand.count == 2 {\n        left_operator = operator[1]\n\
    \        left_operand = operand[1]\n    }\n\n    var right_operand: Int = operand[1]\n\
    \    var right_operator: String = operator[1]\n\n    if operand.count == 3 {\n\
    \        right_operator = operator[2]\n        right_operand = operand[2]\n  \
    \  }\n\n    return left_operand * left_operator + right_operand * right_operator",
  "    var result: Int = 0\n    for i in 0..<operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i]\n        case \"-\"\
    :\n            result -= operand[i]\n        case \"*\":\n            result *=\
    \ operand[i]\n        case \"//\":\n            result /= operand[i]\n       \
    \ case \"**\":\n            result **= operand[i]\n        default:\n        \
    \    break\n        }\n    }\n    return result", "    if operator.count != operand.count\
    \ {\n        return -1\n    }\n    let operands = [operand]\n    var exp = 1\n\
    \    operator.forEach {\n        switch it {\n        case \"*\":\n          \
    \  operands[0].forEach{\n                exp = exp * $0\n            }\n     \
    \       break\n        case \"/\":\n            operands[0].forEach{\n       \
    \         exp = exp / $0\n            }\n            break\n        case \"+\"\
    :\n            operands[1].forEach{\n                exp = exp + $0\n        \
    \    }\n            break\n        case \"-\":\n            operands[1].forEach{\n\
    \                exp = exp - $0\n            }\n            break\n        case\
    \ \">\":\n            operands[0].forEach{\n                exp = exp > $0 ? exp\
    \ * $0 : exp\n            }\n            break\n        case \"<\":\n        \
    \    operands[0].forEach{\n                exp = exp < $0 ? exp * $0 : exp\n \
    \           }\n            break\n        case \"==\":\n            operands[0].forEach{\n\
    \                exp = exp == $0 ? exp * $0 : exp\n            }\n           \
    \ break\n        case \"!=\":\n            operands[0].forEach{\n            \
    \    exp = exp != $0 ? exp * $0 : exp\n            }\n            break\n    \
    \    case \"<=\":\n            operands[0].forEach{\n                exp = exp\
    \ <= $0 ? exp * $0 : exp\n            }\n            break\n        case \"<=\"\
    :\n            operands[0].forEach{\n                exp = exp >= $0 ? exp * $0\
    \ : exp\n            }\n            break\n        case \"%\":\n            operands[0].forEach{\n\
    \                exp = exp % $0 ? exp * $0 : exp\n            }\n            break\n\
    \        case \"^\":\n            operands[0].forEach{\n                exp =\
    \ exp ** $0 ? exp * $0 : exp\n            }\n            break\n        case \"\
    ~\":\n            operands[0].forEach{\n                exp = exp ~= $0 ? exp\
    \ * $0 : exp\n            }\n            break\n        default:\n           \
    \ print(\"Unexpected operator: \" + it)\n            break\n        }\n    }\n\
    \    return exp", "    // Initialize result to 0\n    var result = 0\n    \n \
    \   // Loop through both arrays in parallel\n    for operandIndex, operandValue\
    \ in operand.enumerated() {\n        // If the current operand value is bigger\
    \ than 0\n        if operandValue > 0 {\n            // For each operator, call\
    \ the function with the operator and the current operand value\n            switch\
    \ operatorIndex {\n                case 0: result += operandValue\n          \
    \      case 1: result -= operandValue\n                case 2: result *= operandValue\n\
    \                case 3: result //= operandValue // This is because a Floor division\
    \ operation always returns an integer\n                case 4: result /= operandValue\n\
    \                case 5: result **= operandValue\n            }\n        }\n \
    \   }\n    \n    return result", "    var result = 0\n    if operator.count >\
    \ 0 && operand.count > 1 {\n        operator.forEach { operator in\n         \
    \   operand.forEach { operand in\n                switch operator {\n        \
    \        case \"+\": result = result + operand\n                case \"-\": result\
    \ = result - operand\n                case \"*\": result = result * operand\n\
    \                case \"//\": result = result / operand\n                case\
    \ \"**\": result = result ** operand\n                default:\n             \
    \   }\n            }\n        }\n    }\n    return result", "    \n    if operator.count\
    \ < 1 || operand.count < 2 {\n        return -1\n    }\n    \n    var sum : Int\
    \ = 0\n    var count = 0\n    for _ in 0..<operand.count {\n        switch operator[0]\
    \ {\n            case \"+\":\n                sum += operand[count]\n        \
    \    case \"-\":\n                sum -= operand[count]\n            case \"*\"\
    :\n                sum *= operand[count]\n            case \"//\":\n         \
    \       sum /= operand[count]\n            case \"**\":\n                sum **=\
    \ operand[count]\n            default:\n                return -1\n        }\n\
    \        count += 1\n    }\n    return sum", "    let count = operand.count\n\
    \    \n    if count == 0 {\n        return 0\n    }\n    \n    let operators =\
    \ count\n    \n    var result = 0\n    \n    for index in 0..<operators {\n  \
    \      let operation = operator[index]\n        \n        if operation == \"+\"\
    \ {\n            result = result + operand[index]\n        }\n        else if\
    \ operation == \"-\" {\n            result = result - operand[index]\n       \
    \ }\n        else if operation == \"*\" {\n            result = result * operand[index]\n\
    \        }\n        else if operation == \"/\" {\n            result = result\
    \ / operand[index]\n        }\n        else if operation == \"//\" {\n       \
    \     result = result // operand[index]\n        }\n        else if operation\
    \ == \"**\" {\n            result = result ** operand[index]\n        }\n    }\n\
    \    \n    return result", "    var operations = \"\"\n    var result = Int(0)\n\
    \    for op in operator {\n        operations += \"\\(Int(op))*\"\n    }\n   \
    \ for n in operand {\n        let temp = operations.characters.split{$0 == \"\
    *\"}.count\n        let temp = operations.characters.split{$0 == \"/\"}.count\n\
    \        var operation = String(\"\")\n        if temp == 0 {\n            operation\
    \ = String(Int(n))\n        }\n        else if temp == 1 || temp == 2 {\n    \
    \        operation = String(Int(n)) + (operation == \"+\" ? \"-\" : \"+\")\n \
    \       }\n        else if temp == 3 || temp == 4 {\n            operation = String(Int(n))\
    \ + (operation == \"+\" ? \"*\" : \"/\")\n        }\n        else {\n        \
    \    operation = String(Int(n)) + (operation == \"+\" ? \"**\" : \"/\")\n    \
    \    }\n        if operation == \"/\" {\n            result = (result % Int(n))!\n\
    \        }\n        else {\n            switch operation {\n            case \"\
    **\":\n                result = Int(pow(Double(n), Double(result)))\n        \
    \    default:\n                result = Int(eval(operations, Double(n)))\n   \
    \         }\n        }\n    }\n    return result", "    // Get the operands' length\n\
    \    let operandLength = operand.count\n    \n    // Initialize result variable\
    \ and set its value to be zero \n    var result = operand[0]\n    \n    // Iterate\
    \ over the operators, and do their corresponding operations\n    for (index, operator)\
    \ in enumeratedArray(operators) {\n        // Get the current operator and operand\n\
    \        let currentOperator = operator\n        let currentOperand = operand[index\
    \ + 1]\n        \n        // Evaluate current operator and operand with current\
    \ result\n        switch currentOperator {\n        case \"+\": result = result\
    \ + currentOperand\n        case \"-\": result = result - currentOperand\n   \
    \     case \"*\": result = result * currentOperand\n        case \"//\": result\
    \ = result // currentOperand\n        case \"**\": result = result ** currentOperand\n\
    \        default: print(\"Error: Unknown operator!\")\n        }\n    }\n    \n\
    \    return result", '    return do_operation_on_array(operator, operand)', " \
    \   var result = 0\n    \n    for index in 0..<(operand.count - 1) {\n       \
    \ let left_operand = operand[index]\n        switch operator[index] {\n      \
    \      case \"+\":\n                result += left_operand\n            case \"\
    -\":\n                result -= left_operand\n            case \"*\":\n      \
    \          result *= left_operand\n            case \"/\":\n                result\
    \ /= left_operand\n            case \"^\":\n                result ^= left_operand\n\
    \            case \"**\":\n                result *= left_operand\n          \
    \  default:\n                break\n        }\n    }\n    return result", "  \
    \  if operator.count > 2 {\n        return -1\n    }\n\n    var result = 0\n\n\
    \    var operand_min = operand.min()\n\n    // Go through the array from left\
    \ to right\n    for index in 0..<operator.count {\n        let op = operator[index]\n\
    \        if op == \"-\" {\n            result = result - operand_min\n       \
    \ } else if op == \"+\" {\n            result = result + operand_min\n       \
    \ } else if op == \"*\" {\n            result = result * operand_min\n       \
    \ } else if op == \"//\" {\n            result = result // operand_min\n     \
    \   } else if op == \"**\" {\n            result = result ** operand_min\n   \
    \     }\n\n        operand_min += operand[index]\n    }\n\n    return result",
  "    var result: Int = 0\n    var i = 0\n    for _ in 0..<operator.count {\n   \
    \     switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"/\":\n            if operand[i]\
    \ == 0 {\n                return 0\n            } else {\n                result\
    \ /= operand[i]\n            }\n        case \"^\":\n            result **= operand[i]\n\
    \        default:\n            return -1\n        }\n        i += 1\n    }\n \
    \   return result", "    var result = 0\n    for i in 0..<operator.count {\n \
    \       let operator = operator[i]\n        switch operator {\n        case \"\
    +\":\n            result += operand[i]\n        case \"-\":\n            result\
    \ -= operand[i]\n        case \"*\":\n            result *= operand[i]\n     \
    \   case \"/\":\n            result /= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result *= operand[i]\n\
    \        default:\n            fatalError()\n        }\n    }\n    return result",
  "    var total: Int\n    for i in 0..<operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            total += operand[i]\n        case \"-\"\
    :\n            total -= operand[i]\n        case \"*\":\n            total *=\
    \ operand[i]\n        case \"//\":\n            total = total / operand[i]\n \
    \       case \"**\":\n            total *= operand[i]\n        }\n    }\n    return\
    \ total", "    switch operator[0] {\n    case \"+\": return operand[0] + operand[1]\n\
    \    case \"-\": return operand[0] - operand[1]\n    case \"*\": return operand[0]\
    \ * operand[1]\n    case \"//\": return operand[0] // operand[1]\n    case \"\
    **\": return operand[0] ** operand[1]\n    default:\n        return -1\n    }",
  "    var stack = [Int]()\n\n    for index in 0..<operand.count - 1 {\n        switch\
    \ operator[index] {\n        case \"+\":\n            stack.append(operand[index]\
    \ + stack[index - 1])\n        case \"-\":\n            stack.append(operand[index]\
    \ - stack[index - 1])\n        case \"*\":\n            stack.append(operand[index]\
    \ * stack[index - 1])\n        case \"/\":\n            stack.append(operand[index]\
    \ / stack[index - 1])\n        case \"**\":\n            stack.append(operand[index]\
    \ ** stack[index - 1])\n        default:\n            fatalError(\"Unrecognized\
    \ operator: \\(operator[index])\")\n        }\n    }\n\n    return stack[0]",
  "    assert(operator.count > 0)\n    assert(operand.count > 1)\n    assert(operator.count\
    \ >= operand.count - 1)\n    let length = operator.count - 1\n    var result =\
    \ operand[0]\n    for i in 1...length {\n        result += (operand[i-1] * operator[i])\n\
    \    }\n    return result", "    var result = 0\n    if operator.count >= operand.count\
    \ {\n        let operatorIndex = operator.index(of: operator[0])\n        let\
    \ operandIndex = operand.index(of: operand[0])\n        switch operatorIndex {\n\
    \        case -1:\n            result = operand[operandIndex-1] + operand[operandIndex+1]\n\
    \        case 0:\n            result = operand[operandIndex] * operand[operandIndex+1]\n\
    \        case 1:\n            result = operand[operandIndex] * operand[operandIndex+1]\n\
    \        case 2:\n            result = operand[operandIndex] - operand[operandIndex+1]\n\
    \        case 3:\n            result = operand[operandIndex] / operand[operandIndex+1]\n\
    \        case 4:\n            result = operand[operandIndex] % operand[operandIndex+1]\n\
    \        case 5:\n            result = operand[operandIndex] * operand[operandIndex]\n\
    \        default:\n            break\n        }\n    }\n    return result", " \
    \   var result = 0\n\n    for i in 0..<operand.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i]\n        case \"-\"\
    :\n            result -= operand[i]\n        case \"*\":\n            result *=\
    \ operand[i]\n        case \"//\":\n            result /= operand[i]\n       \
    \ case \"**\":\n            result **= operand[i]\n        default:\n        \
    \    print(\"The operator is not supported or misconfigured.\")\n        }\n \
    \   }\n\n    return result", "    var result: Int = 0\n    for (_, operation)\
    \ in zip(operand, operator) {\n        switch operation {\n        case \"+\"\
    : result = result + operand\n        case \"-\": result = result - operand\n \
    \       case \"*\": result = result * operand\n        case \"//\": result = result\
    \ // operand\n        case \"**\": result = result ** operand\n        default:\
    \ break\n        }\n    }\n    return result", "    switch operator[0] {\n   \
    \ case \"+\":\n        return operand[0] + operand[1]\n    case \"-\":\n     \
    \   return operand[0] - operand[1]\n    case \"*\":\n        return operand[0]\
    \ * operand[1]\n    case \"/\":\n        return operand[0] // operand[1]\n   \
    \ case \"**\":\n        return operand[0] ** operand[1]\n    }\n    return 0",
  "    var result : Int = 0\n    var i = 0\n    var j = 0\n    var operatorString\
    \ = \"\"\n    \n    // Add the first element to result to account for the operator\n\
    \    result += operand[0]\n\n    for i < operator.count {\n        // Check if\
    \ the operator string is not empty, since the first element will always be added\
    \ \n        // to the result.\n        if operatorString.isEmpty {\n         \
    \   // Add the current operator to the operator string and assign it to the result\
    \ to account for \n            // the operand.\n            operatorString = operator[i]\n\
    \            result += operand[j]\n            // Keep going until we hit the\
    \ length of the operand array.\n            while j < operand.count {\n      \
    \          // Add the current element to the result and increment the index\n\
    \                result += operand[j]\n                j += 1\n            }\n\
    \            // Stop adding elements since we've hit the length of the operand\
    \ array. \n            break\n        } else {\n            // Add an element\
    \ to the result to account for the next operator.\n            result += operand[j]\n\
    \            // Reset the operator string to be used with the next element\n \
    \           operatorString = \"\"\n            // Increment the index for the\
    \ next operator\n            j += 1\n        }\n    }\n    // Add the last element\
    \ to the result to account for the last operator\n    result += operand[j]\n \
    \   return result", "    \n    // If operand array is empty, return 0\n    if\
    \ operand.count == 0 {return 0}\n    \n    // For each operator, do the corresponding\
    \ operation\n    for index in 0..<operator.count {\n        // Get the current\
    \ operator and the operand\n        let operator = operator[index]\n        let\
    \ operand = operand.prefix(index + 1)\n        \n        // Perform the operation\n\
    \        switch operator {\n        \n        case \"+\": return operand + operand.prefix(1)\n\
    \        case \"-\": return operand - operand.prefix(1)\n        case \"*\": return\
    \ operand * operand.prefix(1)\n        case \"//\": return operand // operand.prefix(1)\n\
    \        case \"**\": return operand ** operand.prefix(1)\n        default: return\
    \ 0\n        }\n    }\n    return 0", "    var result = 0\n\n    // Basic algebraic\
    \ operations\n    for idx in 0..<operator.count {\n        switch operator[idx]\
    \ {\n        case \"+\": result += operand[idx]\n        case \"-\": result -=\
    \ operand[idx]\n        case \"*\": result *= operand[idx]\n        case \"//\"\
    : result /= operand[idx]\n        case \"**\": result **= operand[idx]\n     \
    \   default: fatalError(\"Invalid operator\")\n        }\n    }\n\n    return\
    \ result", "    switch operator.count {\n    case 0:\n        return operand[0]\n\
    \    case 1:\n        switch operator[0] {\n        case \"+\": return operand[0]\
    \ + operand[1]\n        case \"-\": return operand[0] - operand[1]\n        case\
    \ \"*\": return operand[0] * operand[1]\n        case \"//\": return operand[0]\
    \ / operand[1]\n        case \"**\": return operand[0] ** operand[1]\n       \
    \ default:\n            fatalError(\"unknown operator\")\n        }\n    case\
    \ 2:\n        switch operator[0] {\n        case \"+\": return operand[0] + do_algebra(operator:\
    \ operator, operand: operand[1:])\n        case \"-\": return operand[0] - do_algebra(operator:\
    \ operator, operand: operand[1:])\n        case \"*\": return operand[0] * do_algebra(operator:\
    \ operator, operand: operand[1:])\n        case \"//\": return operand[0] // do_algebra(operator:\
    \ operator, operand: operand[1:])\n        case \"**\": return operand[0] ** do_algebra(operator:\
    \ operator, operand: operand[1:])\n        default:\n            fatalError(\"\
    unknown operator\")\n        }\n    default:\n        fatalError(\"unknown operator\"\
    )\n    }", "    \n    if operator.count != operand.count - 1 {\n        print(\"\
    operator and operand count not equal\")\n        return 0\n    }\n    \n    var\
    \ res = 0\n    for i in 0..<operator.count {\n        let op = operator[i]\n \
    \       let a = operand[i..<operand.count]\n        \n        if op == \"+\"{\n\
    \            res = res + a[0] + a[1]\n        }\n        else if op == \"-\"{\n\
    \            res = res - a[0] + a[1]\n        }\n        else if op == \"*\"{\n\
    \            res = res * a[0] + a[1]\n        }\n        else if op == \"//\"\
    {\n            res = res / a[0] + a[1]\n        }\n        else if op == \"**\"\
    {\n            res = res ** a[0] + a[1]\n        }\n    }\n    return res", " \
    \ // If operand and operator are not the same length, throw an error.\n  if operator.count\
    \ != operand.count {\n    throw \"Different number of operands and operators\"\
    \n  }\n\n  // If the length of operator is not equal to length of operand, throw\
    \ an error.\n  if operator.count < 1 {\n    throw \"No operators\"\n  }\n\n  //\
    \ If there is a non-negative number in operand, throw an error.\n  if operand.contains\
    \ { !$0 < 0 } {\n    throw \"Negative number\"\n  }\n\n  // Set the result to\
    \ be the first operand.\n  var result = operand[0]\n\n  // Get the operators,\
    \ starting from the second operand and working to the first.\n  for var i in 1...operand.count\
    \ {\n    var operator = operator[i]\n\n    // If the operator is '+', add operand\
    \ i to the result.\n    if operator == \"+\" {\n      result += operand[i]\n \
    \   }\n\n    // If the operator is '-', subtract operand i from the result.\n\
    \    if operator == \"-\" {\n      result -= operand[i]\n    }\n\n    // If the\
    \ operator is '*', multiply operand i by the result.\n    if operator == \"*\"\
    \ {\n      result *= operand[i]\n    }\n\n    // If the operator is '/' divide\
    \ operand i by the result. If operand is zero, \n    // throw an error.\n    if\
    \ operator == \"/\" {\n      if operand[i] == 0 {\n        throw \"Division by\
    \ zero\"\n      }\n\n      result /= operand[i]\n    }\n\n    // If the operator\
    \ is '//', floor divide operand i by the result. If operand is zero, \n    //\
    \ throw an error.\n    if operator == \"//\" {\n      if operand[i] == 0 {\n \
    \       throw \"Floor division by zero\"\n      }\n\n      result /= operand[i]\n\
    \    }\n\n    // If the operator is '**', raise operand i to the exponent of the\
    \ result.\n    if operator == \"**\" {\n      result *= operand[i]\n    }\n  }\n\
    \n  // Return the result of the algebraic expression.\n  return result", '    return
    do_algebra_helper(operator, operand, 0, 0, 0)', "    var result = 0\n    for index\
    \ in 0..<operand.count - 1 {\n        let operation = operator[index]\n      \
    \  let value = operand[index]\n        switch operation {\n        case \"+\"\
    :\n            result += value\n        case \"-\":\n            result -= value\n\
    \        case \"*\":\n            result *= value\n        case \"/\":\n     \
    \       result /= value\n        case \"//\":\n            result //= value\n\
    \        case \"**\":\n            result**= value\n        default:\n       \
    \     print(\"Error: Invalid operation - \\(operation).\")\n            return\
    \ -1\n        }\n    }\n    return result", "    // Write your code here\n   \
    \ var sum = 0\n    operator.reverse()\n    operand.reverse()\n    var sum2 = 0\n\
    \    for i in 0..<(operand.count-1){\n        switch(operator[i]){\n        case\
    \ \"+\":\n            sum += operand[i]\n            break\n        case \"-\"\
    :\n            sum -= operand[i]\n            break\n        case \"*\":\n   \
    \         sum *= operand[i]\n            break\n        case \"//\":\n       \
    \     sum2 /= operand[i]\n            break\n        case \"**\":\n          \
    \  sum2 = pow(operand[i], operand[i])\n            break\n        default:\n \
    \           break\n        }\n    }\n    return sum", "    switch operator[0]\
    \ {\n    case \"+\":\n        var sum: Int = 0\n        for _ in 0..<operand.count\
    \ {\n            sum += operand[operand.count - 1]\n        }\n        return\
    \ sum\n    case \"-\":\n        var diff: Int = 0\n        for _ in 0..<operand.count\
    \ {\n            diff += operand[operand.count - 1] * -1\n        }\n        return\
    \ diff\n    case \"*\":\n        var product: Int = 0\n        for _ in 0..<operand.count\
    \ {\n            product += operand[operand.count - 1]\n        }\n        return\
    \ product\n    case \"//\":\n        var quotient: Int = 1\n        for _ in 0..<operand.count\
    \ {\n            quotient /= operand[operand.count - 1]\n        }\n        return\
    \ quotient\n    case \"**\":\n        var exp: Int = 1\n        for _ in 0..<operand.count\
    \ {\n            exp += 1\n        }\n        return exp\n    }\n    return 0",
  "    var sum = 0;\n    for index in 0..<operand.count {\n        let a = operand[index]\
    \ \n        let b = operator[operand.count - 1 - index];\n        let c = a +\
    \ b\n        sum += c;\n    }\n    return sum;", "    guard operator.count !=\
    \ operand.count else { return 0 }\n\n    var result = 0\n\n    var op = 0\n  \
    \  var n = 0\n    var opr = 0\n    var oprs = 0\n    var oprs2 = 0\n\n    while\
    \ op < operator.count {\n        let a = operand[op]\n        var b = 0\n\n  \
    \      guard operand[op] == a else { return 0 }\n\n        while opr < operand.count\
    \ {\n            n += 1\n            if operand[opr] == a {\n                b\
    \ += 1\n                opr += 1\n            }\n            else {\n        \
    \        break\n            }\n        }\n\n        if n == 1 {\n            result\
    \ += operand[opr] * operand[oprs]\n            n += 1\n        }\n\n        if\
    \ n == 2 { // If n == 2, then it's double addition\n            opr += 1\n   \
    \         result += operand[opr] * operand[oprs2]\n            n += 1\n      \
    \  }\n\n        if n == 3 { // If n == 3, then it's double subtraction\n     \
    \       oprs += opr\n            result += operand[oprs] * operand[oprs2]\n  \
    \          oprs -= 1\n            oprs2 += 1\n        }\n\n        if n == 4 {\
    \ // If n == 4, then it's double multiplication\n            oprs += opr\n   \
    \         oprs += opr\n            result += operand[oprs] * operand[oprs2]\n\
    \            oprs -= 1\n            oprs2 += 1\n        }\n\n        if n == 5\
    \ { // If n == 5. then it's double division\n            oprs += opr\n       \
    \     result += operand[oprs]\n            oprs -= 1\n        }\n\n        if\
    \ n == 6 { // If n == 6, then it's double exponentiation\n            oprs +=\
    \ opr\n            oprs += opr\n            result += operand[oprs]\n        \
    \    oprs -= 1\n        }\n\n        op += 1\n    }\n\n    return result", " \
    \   var result = 0\n\n    for index in 0..<operand.count {\n        var operandIndex\
    \ = index\n        var operatorIndex = 0\n        for _ in 0..<operator.count\
    \ {\n            switch operator[operatorIndex] {\n            case \"+\": result\
    \ += operand[operandIndex]\n            case \"-\": result -= operand[operandIndex]\n\
    \            case \"*\": result *= operand[operandIndex]\n            case \"\
    //\": result /= operand[operandIndex]\n            case \"**\": result **= operand[operandIndex]\n\
    \            default:\n                break\n            }\n            operandIndex++\n\
    \            operatorIndex++\n        }\n    }\n\n    return result", "    //\
    \ Write your code here\n    var res = operand[0]\n    for i in 1..<operand.count\
    \ {\n        var oper = operator[0]\n        for j in 0..<operator.count {\n \
    \           oper = oper+operator[j]\n        }\n        res += operand[i]*oper\n\
    \    }\n    return res", "    var result = 0\n    for idx in 0..<operator.count\
    \ {\n        let operation = operator[idx]\n        let operand1 = operand[idx\
    \ > 0 ? idx - 1 : idx]\n        let operand2 = operand[idx > 1 ? idx - 1 : idx]\n\
    \        switch (operation) {\n        case \"+\":\n            result += operand1\n\
    \        case \"-\":\n            result -= operand1\n        case \"*\":\n  \
    \          result *= operand1\n        case \"//\":\n            result /= operand1\n\
    \        case \"**\":\n            result = (operand1 ** operand2)\n        default:\n\
    \            fatalError(\"Unsupported operation\")\n        }\n    }\n    return\
    \ result", "    var operator_count = operator.count\n    var operand1 = operand.first!\n\
    \    var operand2 = operand.last!\n    \n    guard operator != nil && operand\
    \ != nil else {\n        return 0\n    }\n    \n    let (operator, operand) =\
    \ operator.first!, operand.first!\n    \n    if operator == nil { // No operator\
    \ given\n        return 0\n    }\n    \n    if operand == nil { // No operand\
    \ given\n        return 0\n    }\n    \n    let operator_index = operator.index\n\
    \    \n    if operator_index >= operand1.count { // operator is out of range \n\
    \        return 0\n    }\n    \n    if operator_index >= operand2.count { // operand\
    \ is out of range \n        return 0\n    }\n    \n    if operand1[operator_index]\
    \ < 0 { // operand is negative\n        return 0\n    }\n    \n    if operand2[operator_index]\
    \ < 0 { // operator is negative\n        return 0\n    }\n    \n    if operand1[operator_index]\
    \ == operand2[operator_index] { // same operands\n        return 0\n    }\n  \
    \  \n    if operator_index == operand1.count - 1 { // operand is last item\n \
    \       return operand1[operator_index] + do_algebra(operator: operator, operand:\
    \ operand1.dropFirst())\n    }\n    \n    if operator_index == operand2.count\
    \ - 1 { // operator is last item\n        return do_algebra(operator: operator,\
    \ operand: operand2.dropFirst()) + operand1[operator_index]\n    }\n    \n   \
    \ if operand1[operator_index] == operand2[operator_index] && operand1[operator_index]\
    \ > operand2[operator_index] { // commutative\n        return do_algebra(operator:\
    \ operator, operand: operand1) + do_algebra(operator: operator, operand: operand2)\n\
    \    }\n    \n    // non-commutative\n    if operand1[operator_index] > operand2[operator_index]\
    \ {\n        let temp = operand2\n        operand2 = operand1\n        operand1\
    \ = temp\n    }\n    \n    let operand11 = operand1.dropFirst()\n    let operand21\
    \ = operand2.dropFirst()\n    \n    if operator_index == 0 {\n        return do_algebra(operator:\
    \ operator, operand: operand1) + do_algebra(operator: operator, operand: operand21)\n\
    \    } else if operator_index == operand1.count - 1 {\n        return do_algebra(operator:\
    \ operator, operand: operand21) + do_algebra(operator: operator, operand: operand1)\n\
    \    } else {\n        return do_algebra(operator: operator, operand: operand1)\
    \ + do_algebra(operator: operator, operand: operand21) + do_algebra(operator:\
    \ operator, operand: operand2)\n    }", "    if operator.count != operand.count\
    \ - 1 {\n        fatalError(\"Invalid Input. Operator and Operand arrays have\
    \ different lengths.\")\n    }\n    var result: Int = 0\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    /\":\n            result = result / operand[i]\n        case \"**\":\n       \
    \     result = result ** operand[i]\n        default:\n            fatalError(\"\
    Invalid Input. Invalid operator.\")\n        }\n    }\n    return result", " \
    \   assert(operand.count >= 2)\n\n    var op: Int = 0\n    switch operator[0]\
    \ {\n    case \"+\":\n        op = operand[0] + operand[1]\n    case \"-\":\n\
    \        op = operand[0] - operand[1]\n    case \"*\":\n        op = operand[0]\
    \ * operand[1]\n    case \"/\":\n        op = operand[0] / operand[1]\n    case\
    \ \"%\":\n        op = operand[0] % operand[1]\n    case \"//\":\n        op =\
    \ operand[0] / operand[1]\n    case \"**\":\n        op = operand[0] ** operand[1]\n\
    \    default:\n        fatalError(\"unknown operator \\(operator[0])\")\n    }\n\
    \n    // For the last element of operand array\n    if operand.count > 1 {\n \
    \       op = op * operand.last!\n    }\n\n    return op", "    var sum = 0\n \
    \   for index in 0..<operator.count {\n        switch operator[index] {\n    \
    \    case \"+\": sum += operand[index]\n        case \"-\": sum -= operand[index]\n\
    \        case \"*\": sum *= operand[index]\n        case \"//\": sum /= operand[index]\n\
    \        case \"**\": sum *= operand[index]\n        }\n    }\n    return sum",
  "    \n    var result: Int = 0\n    \n    var i = 0\n    var j = operator.count\
    \ - 1\n    var k = 0\n    \n    while ((i < operand.count) && (j < operator.count))\
    \ {\n        \n        let leftOperand = operand[i]\n        let rightOperand\
    \ = operand[j]\n        \n        if (i < operator.count) {\n            \n  \
    \          let operator = operator[j]\n            \n            if ((leftOperand\
    \ == 0) && (operator == \"+\")) {\n                result = result + (rightOperand\
    \ + 0)\n                i++\n            } else if ((leftOperand == 0) && (operator\
    \ == \"-\")) {\n                result = result - (rightOperand + 0)\n       \
    \         i++\n            } else if ((leftOperand == 0) && (operator == \"*\"\
    )) {\n                result = result * (rightOperand + 0)\n                i++\n\
    \            } else if (((leftOperand > 0) || (leftOperand == 0) && (operator\
    \ == \"//\")) && (rightOperand == 0)) {\n                result = result / leftOperand\n\
    \                i++\n            } else if ((leftOperand > 0) && (rightOperand\
    \ > 0) && operator == \"**\") {\n                result = result * (rightOperand\
    \ + 0)\n                i++\n            } else {\n                result = result\
    \ * rightOperand\n                k++\n            }\n        }\n        \n  \
    \      else {\n            \n            if (((leftOperand > 0) && (rightOperand\
    \ > 0) && operator == \"**\") || (leftOperand < 0) && (rightOperand < 0) && (operator\
    \ == \"**\")) {\n                \n                result = result * (rightOperand\
    \ + 0)\n                k++\n            }\n            \n            if ((leftOperand\
    \ > 0) && operator == \"**\") {\n                result = result * leftOperand\n\
    \                i++\n            }\n            \n            if ((rightOperand\
    \ > 0) && operator == \"**\") {\n                result = result * rightOperand\n\
    \                j++\n            }\n            \n            if ((leftOperand\
    \ > 0) && (rightOperand > 0) && (operator == \"//\")) {\n                result\
    \ = result / leftOperand\n                i++\n                j++\n         \
    \   }\n        }\n    }\n    \n    return result", "    // write your code here\n\
    \    let operands = operand.count - 1\n    let operators = operator.count - 1\n\
    \    return operands[0]", "    var stack = [Int]()\n    var output = [Int]()\n\
    \    stack.insert(0)\n    output.insert(0)\n\n    for _ in 0..<operand.count-1\
    \ {\n        let op = operator[stack.count-1]\n        let operand1 = operand[stack.count-2]\n\
    \        let operand2 = operand[stack.count-1]\n        let operand3 = operand[stack.count]\n\
    \n        if op == \"+\"{\n            stack.append(operand1 + operand2)\n   \
    \     } else if op == \"-\"{\n            stack.append(operand1 - operand2)\n\
    \        } else if op == \"*\"{\n            stack.append(operand1 * operand2)\n\
    \        } else if op == \"//\"{\n            stack.append(operand2 // operand1)\n\
    \        } else if op == \"**\"{\n            stack.append(operand1 ** operand2)\n\
    \        }\n    }\n    return stack[0]", "    var result = 0\n    for index in\
    \ 0..<operator.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result = result + operand[index]\n        case \"-\":\n         \
    \   result = result - operand[index]\n        case \"*\":\n            result\
    \ = result * operand[index]\n        case \"//\":\n            result = result\
    \ / operand[index]\n        case \"**\":\n            result = result ** operand[index]\n\
    \        default:\n            fatalError(\"Error: Unsupported operator: \\(operator[index])\"\
    )\n        }\n    }\n    return result", "    \n    let result = operand[0]\n\
    \    if operator.count >= 2 {\n        for i in 1..<operator.count {\n       \
    \     if operator[i] == \"+\"{\n                result += operand[i]\n       \
    \     }else if operator[i] == \"-\"{\n                result -= operand[i]\n \
    \           }else if operator[i] == \"*\"{\n                result *= operand[i]\n\
    \            }else if operator[i] == \"//\"{\n                result /= operand[i]\n\
    \            }else if operator[i] == \"**\"{\n                result **= operand[i]\n\
    \            }\n        }\n    }\n    return Int(result)", "    var result = 0\n\
    \    var operator_index = 0\n    \n    while operator_index < operator.count {\n\
    \        switch operator[operator_index] {\n        case \"+\":\n            result\
    \ = result + operand[operator_index + 2]\n        case \"-\":\n            result\
    \ = result - operand[operator_index + 2]\n        case \"*\":\n            result\
    \ = result * operand[operator_index + 2]\n        case \"//\":\n            result\
    \ = result / operand[operator_index + 2]\n        case \"**\":\n            result\
    \ = result ** operand[operator_index + 2]\n        default:\n            assert(false,\
    \ \"Unknown operator: \\(operator[operator_index])\")\n        }\n        \n \
    \       operator_index += 1\n    }\n    \n    return result", "    var result\
    \ = 0\n    for _ in 0 ..< operator.count {\n        var operand1 = operand.first\n\
    \        var operand2 = operand.second\n        let oper = operator[operator.index(operand1,\
    \ operand2)]\n        if oper == \"+\"{\n            result += operand1\n    \
    \    }else if oper == \"-\"{\n            result -= operand1\n        }else if\
    \ oper == \"*\"{\n            result *= operand1\n        }else if oper == \"\
    //\"{\n            result /= operand1\n        }else if oper == \"**\"{\n    \
    \        result**=operand1\n        }\n    }\n    return result", "    var res\
    \ = 0\n\n    for operator in operator {\n        switch operator {\n        case\
    \ \"+\": res = res + operand[1] // ADD\n        case \"-\": res = res - operand[1]\
    \ // SUB\n        case \"*\": res = res * operand[1] // MUL\n        case \"//\"\
    : res = res / operand[1] // DIV\n        case \"**\": res = res ** operand[1]\
    \ // EXP\n        default: fatalError(\"Not supported operator\")\n        }\n\
    \        operand.remove(at: 1)\n    }\n\n    return res", "    var total: Int\
    \ = 0\n    if operator.count != operand.count {\n        print(\"Error! Operator\
    \ and operand must have the same length.\")\n        return -1\n    }\n    if\
    \ operator.count == 1 {\n        total = operand[0]\n    } else {\n        total\
    \ = operand[0] * operand[operator.count - 1]\n    }\n    for _ in 0..<operator.count\
    \ - 1 {\n        total += operand[operator.count - 1] * operator[operator.count\
    \ - 2]\n    }\n    return total", "    if operator.isEmpty || operand.isEmpty\
    \ {\n        return 0\n    }\n    \n    let len = operator.count - 1\n    var\
    \ result = 0\n    for i in 0 ..< len {\n        switch operator[i] {\n       \
    \ case \"+\":\n            result += operand[i]\n        case \"-\":\n       \
    \     result -= operand[i]\n        case \"*\":\n            result *= operand[i]\n\
    \        case \"//\":\n            result /= operand[i]\n        case \"^\":\n\
    \            result **= operand[i]\n        default:\n            break\n    \
    \    }\n    }\n    return result", "\tswitch operator.count {\n\tcase 0:\n\t\t\
    fatalError(\"Operator array must have at least one operator.\")\n\tcase 1:\n\t\
    \tswitch operand.count {\n\t\tcase 1:\n\t\t\treturn operand[0]\n\t\tcase 0:\n\t\
    \t\tfatalError(\"Operand array must have at least two operands.\")\n\t\t}\n\t\
    default:\n\t\tfatalError(\"Operator array must have no more than one operator.\"\
    )\n\t}\n\treturn 0", "    \n    var sum : Int = 0\n    var ops : [Int] = []\n\
    \    for i in 0..<operator.count {\n        sum += operand[i]\n        ops.append(operand[i])\n\
    \    }\n    \n    for j in 0..<operator.count {\n        var op : String = operator[j]\n\
    \        switch op {\n        case \"+\": sum = sum + ops[j];\n        case \"\
    -\": sum = sum - ops[j];\n        case \"*\": sum = sum * ops[j];\n        case\
    \ \"//\": sum = sum / ops[j];\n        case \"**\": sum = sum ** ops[j];\n   \
    \     }\n    }\n    \n    return sum", "\t\n\t// your code here\n\t\n\treturn\
    \ 0", "    var result = 0\n    \n    if operand.count < 2 {\n        fatalError(\"\
    Invalid operand array length\")\n    }\n    \n    if operator.count < 1 {\n  \
    \      fatalError(\"Invalid operator array length\")\n    }\n    \n    for _ in\
    \ 0..<operand.count {\n        switch operator[0] {\n        case \"+\":\n   \
    \         result += operand[0]\n        case \"-\":\n            result -= operand[0]\n\
    \        case \"*\":\n            result *= operand[0]\n        case \"/\":\n\
    \            if operand[0] != 0 {\n                result = result / operand[0]\n\
    \            } else {\n                fatalError(\"Division by 0\")\n       \
    \     }\n        case \"**\":\n            if operand[0] == 0 {\n            \
    \    fatalError(\"Division by 0\")\n            } else {\n                result\
    \ = result ** operand[0]\n            }\n        default:\n            fatalError(\"\
    Unknown operator\")\n        }\n    }\n    \n    return result", "    var result\
    \ = operand[0]\n    for idx in 0..<operand.count - 1 {\n        if operator[idx]\
    \ == \"\" {\n            result = result\n        } else {\n            switch\
    \ operator[idx] {\n            case \"+\": result = result + operand[idx+1]\n\
    \            case \"-\": result = result - operand[idx+1]\n            case \"\
    *\": result = result * operand[idx+1]\n            case \"//\": result = result\
    \ / operand[idx+1]\n            case \"**\": result = result ** operand[idx+1]\n\
    \            default: print(\"invalid operator in input: \\(operator[idx])\")\n\
    \            }\n        }\n    }\n    return result", "    switch operator.count\
    \ {\n    case 0:\n        return 0\n    case 1:\n        return operand[0] + do_algebra(operator:\
    \ operator, operand: operand[1..<operand.count])\n    case 2:\n        return\
    \ operand[0] + do_algebra(operator: operator, operand: operand[1..<operand.count])\
    \ - do_algebra(operator: operator, operand: operand[2..<operand.count])\n    case\
    \ 3:\n        return operand[0] + do_algebra(operator: operator, operand: operand[1..<operand.count])\
    \ - do_algebra(operator: operator, operand: operand[2..<operand.count]) - do_algebra(operator:\
    \ operator, operand: operand[3..<operand.count])\n    case 4:\n        return\
    \ operand[0] + do_algebra(operator: operator, operand: operand[1..<operand.count])\
    \ - do_algebra(operator: operator, operand: operand[2..<operand.count]) - do_algebra(operator:\
    \ operator, operand: operand[3..<operand.count]) - do_algebra(operator: operator,\
    \ operand: operand[4..<operand.count])\n    default:\n        return operand[0]\
    \ + do_algebra(operator: operator, operand: operand[1..<operand.count]) - do_algebra(operator:\
    \ operator, operand: operand[2..<operand.count]) - do_algebra(operator: operator,\
    \ operand: operand[3..<operand.count]) - do_algebra(operator: operator, operand:\
    \ operand[4..<operand.count]) - do_algebra(operator: operator, operand: operand[5..<operand.count])\n\
    \    }", "    var sum = 0;\n    for _ in 0..<operand.count {\n        let op =\
    \ operator[operand.count - 1 - _]\n        switch op {\n        case \"+\":\n\
    \            sum += operand[operand.count - 1 - _]\n        case \"*\":\n    \
    \        sum += operand[operand.count - 1 - _] * operand[operand.count - 1 - _]\n\
    \        case \"-\":\n            sum += operand[operand.count - 1 - _] - operand[operand.count\
    \ - 1 - _]\n        case \"//\":\n            sum += operand[operand.count - 1\
    \ - _] % operand[operand.count - 1 - _]\n        case \"^\":\n            sum\
    \ += operand[operand.count - 1 - _] ^ operand[operand.count - 1 - _]\n       \
    \ default:\n            print(\"Unknown operator: \\(op)\")\n        }\n    }\n\
    \    return sum", "    \n    if operator.count != operand.count {\n        print(\"\
    Error: Invalid operator array\")\n        return 0\n    }\n    \n    var result:\
    \ Int = 0\n    \n    var op_index = 0\n    var op: Int\n    var op_size: Int\n\
    \    \n    var op_index2 = 0\n    var op2: Int\n    var op2_size: Int\n    \n\
    \    var index = 0\n    \n    let mut arr = [Int]()\n    \n    for index in 0..operand.count\
    \ {\n        arr.insert(operand[index], index)\n    }\n    \n    for index in\
    \ 0..operator.count {\n        op_size = arr.count\n        \n        op2_size\
    \ = arr.reduce(0) { $0 + $1 }\n        \n        if op_size < op2_size {\n   \
    \         op = arr[index]\n            arr.insert(op, op_index + op_index2)\n\
    \        } else {\n            op2 = arr[index]\n            arr.insert(op2, op_index\
    \ + op_index2)\n            arr.insert(op, op_index + op_index2)\n        }\n\
    \        \n        op_index += op_size\n        op_index2 += op_size\n    }\n\
    \    \n    for index in 0..arr.count {\n        result += arr[index]\n    }\n\
    \    \n    return result", "    var result: Int = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ *= operand[index]\n        }\n    }\n    return result", '    return do_algebra(operator,
    operand, false)', "    if operator.count != operand.count {\n        print(\"\
    Error while doing algebra: Operands and operators array are not equal\")\n   \
    \ }\n\n    var result: Int = 0\n    for idx in 0..<operator.count {\n        switch\
    \ operator[idx] {\n        case \"+\":\n            result += operand[idx]\n \
    \       case \"-\":\n            result -= operand[idx]\n        case \"*\":\n\
    \            result *= operand[idx]\n        case \"//\":\n            result\
    \ /= operand[idx]\n        case \"**\":\n            result **= operand[idx]\n\
    \        default:\n            print(\"Error: invalid operator\")\n        }\n\
    \    }\n\n    return result", "    var result = 0\n    for index in 0..<operand.count-1\
    \ {\n        if index < operator.count-1 {\n            switch operator[index]\
    \ {\n            case \"+\":\n                result += operand[index]\n     \
    \       case \"-\":\n                result -= operand[index]\n            case\
    \ \"*\":\n                result *= operand[index]\n            case \"//\":\n\
    \                result = (operand[index] / operand[index+1]) * operand[index+1]\n\
    \            case \"**\":\n                result = pow(operand[index], operand[index+1])\n\
    \            }\n        } else {\n            switch operator[index] {\n     \
    \       case \"+\":\n                result += operand[index]\n            case\
    \ \"-\":\n                result -= operand[index]\n            case \"*\":\n\
    \                result *= operand[index]\n            case \"//\":\n        \
    \        result = (operand[index] / operand[index+1]) * operand[index+1]\n   \
    \         case \"**\":\n                result = pow(operand[index], operand[index+1])\n\
    \            default:\n                break\n            }\n        }\n    }\n\
    \    return result", "    var result: Int = 0\n    for i in 0..operand.count-1\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i]\n        case \"-\":\n            result -= operand[i]\n        case\
    \ \"*\":\n            result *= operand[i]\n        case \"/\":\n            if\
    \ operand[i] == 0 {\n                throw SyntaxError(\"Division by zero\")\n\
    \            }\n            result /= operand[i]\n        case \"**\":\n     \
    \       if operand[i] == 0 {\n                throw SyntaxError(\"Division by\
    \ zero\")\n            }\n            result **= operand[i]\n        default:\n\
    \            throw SyntaxError(\"Invalid operator\")\n        }\n    }\n    return\
    \ result", "    \n    // Initialize a variable to hold the result\n    var result\
    \ = operand[0]\n\n    // For each operator in the operator array\n    for _ in\
    \ 0 ..< operator.count {\n        switch operator[_] {\n            case \"+\"\
    :\n                result = result + operand[_ + 1]\n            case \"-\":\n\
    \                result = result - operand[_ + 1]\n            case \"*\":\n \
    \               result = result * operand[_ + 1]\n            case \"//\":\n \
    \               result = result // operand[_ + 1]\n            case \"**\":\n\
    \                result = result ** operand[_ + 1]\n            default:\n   \
    \             break\n        }\n    }\n\n    return result", "    assert(operand.count\
    \ >= 2)\n    let mut result = operand[0]\n    for op in operator {\n        switch\
    \ op {\n        case \"+\":\n            result += operand[1]\n        case \"\
    -\":\n            result -= operand[1]\n        case \"*\":\n            result\
    \ *= operand[1]\n        case \"//\":\n            result = result / operand[1]\n\
    \        case \"**\":\n            result = result ** operand[1]\n        }\n\
    \    }\n    return result", "    // init operand\n    var operands = [Int]()\n\
    \    for element in operand {\n        operands += [element]\n    }\n\n    //\
    \ init operator\n    var operators = [String]()\n    for element in operator {\n\
    \        operators += [element]\n    }\n\n    // init result\n    var result:\
    \ Int = 0\n    if operators.count == 1 {\n        // add operands\n        result\
    \ = operands[0]\n    }\n    else {\n        // multiply operands and add operands\n\
    \        for _ in 1...operators.count {\n            operands.append(operands[0])\n\
    \        }\n        for _ in 0..<operands.count {\n            result += operands[_]\n\
    \        }\n    }\n    return result", "    var result : Int = 0\n    \n    if\
    \ operator[0] == \"+\" {\n        result = operand[0] + operand[1]\n    }\n  \
    \  else if operator[0] == \"-\" {\n        result = operand[0] - operand[1]\n\
    \    }\n    else if operator[0] == \"*\" {\n        result = operand[0] * operand[1]\n\
    \    }\n    else if operator[0] == \"/\" {\n        result = operand[0] / operand[1]\n\
    \    }\n    else if operator[0] == \"//\" {\n        result = operand[0] // operand[1]\n\
    \    }\n    else if operator[0] == \"**\" {\n        result = operand[0] ** operand[1]\n\
    \    }\n    \n    return result", "    if operator.isEmpty{\n        return operand[0]\n\
    \    }\n\n    if operand.isEmpty{\n        return 0\n    }\n\n    if operator.isEmpty\
    \ || operand.isEmpty {\n        print(\"Error: Invalid Operation\")\n        return\
    \ 0\n    }\n    \n    if operator[0] != operator[1] {\n        print(\"Error:\
    \ Invalid Operation\")\n        return 0\n    }\n    \n    let operator = operator[0]\n\
    \    \n    var sum = 0\n    \n    for i in 1..<operand.count{\n        sum = operand[i-1]\
    \ + sum\n    }\n    \n    if operator == \"+\" {\n        return sum\n    }\n\
    \    \n    if operator == \"-\" {\n        return -sum\n    }\n    \n    if operator\
    \ == \"*\" {\n        return sum * operand[0]\n    }\n    \n    if operator ==\
    \ \"//\" {\n        return sum / operand[0]\n    }\n    \n    if operator == \"\
    **\" {\n        return pow(operand[0], operand[1])\n    }\n    \n    print(\"\
    Error: Invalid Operation\")\n    return 0", "    // Add all operands\n    var\
    \ result: Int = 0\n    for index in 0..<operand.count {\n        // Get operand\n\
    \        let operand: Int = operand[index]\n        switch operator[0] {\n   \
    \     case \"+\":\n            result += operand\n            break\n        case\
    \ \"-\":\n            result -= operand\n            break\n        case \"*\"\
    :\n            result *= operand\n            break\n        case \"//\":\n  \
    \          result /= operand\n            break\n        case \"**\":\n      \
    \      result *= operand\n            result /= operand\n            break\n \
    \       default:\n            print(\"Invalid operator string: \\(operator)\"\
    )\n        }\n    }\n    return result", "    \n    var result : Int = 0\n\n \
    \   for i in 0..<operand.count {\n        switch operator[i] {\n        case \"\
    +\":\n            result += operand[i]\n        case \"-\":\n            result\
    \ -= operand[i]\n        case \"*\":\n            result *= operand[i]\n     \
    \   case \"//\":\n            result /= operand[i]\n        case \"**\":\n   \
    \         result **= operand[i]\n        default:\n            print(\"Error:\
    \ Invalid operator!\")\n        }\n    }\n\n    return result", "    // write\
    \ your code here\n    var res = operand[0]\n    for j in 1...operand.count {\n\
    \        switch operator[0] {\n        case \"+\": res = res + operand[j]\n  \
    \      case \"-\": res = res - operand[j]\n        case \"*\": res = res * operand[j]\n\
    \        case \"//\": res = res // operand[j]\n        case \"**\": res = res\
    \ ** operand[j]\n        default: print(\"Invalid operator\")\n        }\n   \
    \ }\n    return res", "    var ops: [String] = []\n    var num: Int = 0\n    for\
    \ op in operator {\n        switch op {\n        case \"+\":\n            ops.append(\"\
    +\")\n        case \"-\":\n            ops.append(\"-\")\n        case \"*\":\n\
    \            ops.append(\"*\")\n        case \"/\":\n            ops.append(\"\
    /\")\n        case \"**\":\n            ops.append(\"**\")\n        default:\n\
    \            fatalError(\"unknown operator\")\n        }\n    }\n    for num in\
    \ operand[0..<operand.count-1] {\n        let op1 = ops[num]\n        var result:\
    \ Int = 0\n        for num2 in operand[num..<operand.count] {\n            let\
    \ op2 = ops[num2]\n            switch op1 {\n            case \"+\":\n       \
    \         result += num2\n            case \"-\":\n                result -= num2\n\
    \            case \"*\":\n                result *= num2\n            case \"\
    /\":\n                result /= num2\n            case \"**\":\n             \
    \   result **= num2\n            default:\n                fatalError(\"unknown\
    \ operator\")\n            }\n        }\n        return Int(result)\n    }\n \
    \   fatalError(\"bad equation\")", "    let operator1 = operator[0]\n    let operator2\
    \ = operator[1]\n    var result: Int = 0\n    for index in 0..<operand.count -\
    \ 1 {\n        if operand[index] == 0 {\n            break\n        }\n      \
    \  if operator1 == \"+\" {\n            result = result + operand[index]\n   \
    \     } else if operator1 == \"-\" {\n            result = result - operand[index]\n\
    \        } else if operator1 == \"*\" {\n            result = result * operand[index]\n\
    \        } else if operator1 == \"//\" {\n            result = result // operand[index]\n\
    \        } else if operator1 == \"**\" {\n            result = result ** operand[index]\n\
    \        } else {\n            break\n        }\n    }\n    return result", " \
    \   var operations = [String]()\n    var expression: Int = 0\n    var i = 0\n\
    \    \n    for _ in 0..<operator.reserveCapacity(operand.count-1) {\n        operations.append(operator.removeAtIndex(i))\n\
    \        expression += 1\n        i += 1\n    }\n    \n    for _ in 0..<operand.count-1\
    \ {\n        operations.append(operand.removeAtIndex(i))\n        expression *=\
    \ operand.removeAtIndex(i)\n        i += 1\n    }\n    \n    for _ in 0..<operator.reserveCapacity(operand.count-1)\
    \ {\n        operations.append(operator.removeAtIndex(i))\n        expression\
    \ += operand.removeAtIndex(i)\n        i += 1\n    }\n    \n    for _ in 0..<operand.count-1\
    \ {\n        operations.append(operand.removeAtIndex(i))\n        expression *=\
    \ operator.removeAtIndex(i)\n        i += 1\n    }\n    \n    for _ in 0..<operator.reserveCapacity(operand.count-1)\
    \ {\n        operations.append(operator.removeAtIndex(i))\n        expression\
    \ += operand.removeAtIndex(i)\n        i += 1\n    }\n    \n    return expression",
  "    var result = 0\n    for i in 0..<operator.count {\n        result += (operand[i]\
    \ * operand.count - 1)\n    }\n    if operator.count > 0 {\n        result *=\
    \ operand.first!\n    }\n    return result", "    if operand.count == 0 {\n  \
    \      return 0\n    }\n    var op: Int = 0\n    var op = operand[0]\n    var\
    \ result = operand[0]\n    for i in 1...operand.count {\n        if operator[0]\
    \ == \"+\" {\n            op = op + operand[i]\n        }\n        else if operator[0]\
    \ == \"-\" {\n            op = op - operand[i]\n        }\n        else if operator[0]\
    \ == \"*\" {\n            op = op * operand[i]\n        }\n        else if operator[0]\
    \ == \"//\" {\n            op = op / operand[i]\n        }\n        else if operator[0]\
    \ == \"**\" {\n            op = op ** operand[i]\n        }\n    }\n    return\
    \ result", "    switch operator[0] {\n    case \"+\":\n        return operand[0]\
    \ + operand[1]\n    case \"-\":\n        return operand[0] - operand[1]\n    case\
    \ \"*\":\n        return operand[0] * operand[1]\n    case \"//\":\n        return\
    \ operand[0] & operand[1]\n    case \"**\":\n        return operand[0] ** operand[1]\n\
    \    default:\n        print(\"Error: operator \\(operator[0]) is not supported\
    \ yet.\")\n    }", "    var operands = operand\n    for i in 0..<operator.count\
    \ {\n        operands = evaluate(operands, operator: operator[i])\n    }\n   \
    \ return operands[0]", "    var result = 0\n    var operatorLength = operator.count\n\
    \n    // check if length of operator and operand arrays are equal\n    if operatorLength\
    \ != operand.count {\n        print(\"Error: length of operator and operand arrays\
    \ is not equal\")\n        return -1\n    }\n\n    for index in 0..<operatorLength\
    \ {\n        // for each operator, do corresponding operation\n        // if the\
    \ operator is not found, then return the value of operand\n        if operator\
    \ == nil {\n            result = operand[index]\n        } else {\n          \
    \  // if the operator found, find its position in the operator array\n       \
    \     let operatorIndex = operator.index(of: operator![index])!\n            //\
    \ find the position where the given operand array starts\n            let startIndex\
    \ = operatorIndex - 1\n            // find where the given operand array ends\n\
    \            let endIndex = operand.count\n\n            // the result of the\
    \ operation\n            let resultIndex = index\n\n            // if the result\
    \ index is equal to the end index, then stop the loop\n            if resultIndex\
    \ == endIndex {\n                break\n            }\n\n            result =\
    \ result + operand[startIndex] * operand[resultIndex] + operand[endIndex]\n  \
    \      }\n    }\n    return result", "    var result: Int = 0\n    switch operator.count\
    \ {\n    case 0: return 0\n    case 1: \n        switch operator[0] {\n      \
    \  case \"+\": result += operand[0]\n        case \"-\": result -= operand[0]\n\
    \        case \"*\": result *= operand[0]\n        case \"//\": result /= operand[0]\n\
    \        case \"**\": result **= operand[0]\n        default:\n            return\
    \ 0\n        }\n    case 2: \n        switch operator[0] {\n        case \"+\"\
    : result += operand[0]\n        case \"-\": result -= operand[0]\n        case\
    \ \"*\": result *= operand[0]\n        case \"//\": result /= operand[0]\n   \
    \     default:\n            return 0\n        }\n        switch operator[1] {\n\
    \        case \"+\": result += operand[1]\n        case \"-\": result -= operand[1]\n\
    \        case \"*\": result *= operand[1]\n        case \"//\": result /= operand[1]\n\
    \        default:\n            return 0\n        }\n    default:\n        return\
    \ 0\n    }\n    return result", "    // TODO: Complete the solution here\n   \
    \ var result = 0\n    for index in 0..<operand.count {\n        switch (operator[index])\
    \ {\n        case \"+\":\n            result += operand[index]\n        case \"\
    -\":\n            result -= operand[index]\n        case \"*\":\n            result\
    \ *= operand[index]\n        case \"//\":\n            result /= operand[index]\n\
    \        case \"**\":\n            result = (result/operand[index])\n        }\n\
    \    }\n    return result", "    // Write your code here.\n    \n    if operand.count\
    \ < 2 {\n        return -1\n    }\n    \n    var operation = operator[0]\n   \
    \ \n    switch operation {\n    case \"+\":\n        var a = operand[0]\n    \
    \    var b = operand[1]\n        return a + b\n    case \"-\":\n        var a\
    \ = operand[0]\n        var b = operand[1]\n        return a - b\n    case \"\
    *\":\n        var a = operand[0]\n        var b = operand[1]\n        return a\
    \ * b\n    case \"//\":\n        var a = operand[0]\n        var b = operand[1]\n\
    \        return a / b\n    case \"**\":\n        var a = operand[0]\n        var\
    \ b = operand[1]\n        return a ** b\n    default:\n        return -1\n   \
    \ }", "    var algebic : Int = 0\n\n    for i in 0..<operand.count {\n       \
    \ let tmpOperand = operand[i]\n        var tmpOperandInt: Int\n        switch\
    \ operator[i] {\n            case \"+\": tmpOperandInt = tmpOperand + tmpOperandInt\n\
    \            case \"-\": tmpOperandInt = tmpOperand - tmpOperandInt\n        \
    \    case \"*\": tmpOperandInt = tmpOperand * tmpOperandInt\n            case\
    \ \"//\": tmpOperandInt = tmpOperand // tmpOperandInt\n            case \"**\"\
    : tmpOperandInt = tmpOperand ** tmpOperandInt\n            default:\n        \
    \        tmpOperandInt = tmpOperand\n        }\n        algebic += tmpOperandInt\n\
    \    }\n    return algebic", "    var result = 0\n    for idx in 0..<(operand.count\
    \ - 1) {\n        let operation = operator[idx]\n        switch operation {\n\
    \        case \"+\": result = result + operand[idx]\n        case \"-\": result\
    \ = result - operand[idx]\n        case \"*\": result = result * operand[idx]\n\
    \        case \"//\": result = result / operand[idx]\n        case \"**\": result\
    \ = result ** operand[idx]\n        default: fatalError()\n        }\n    }\n\
    \    return result", "    \n    // TODO: write your code here\n    \n    return\
    \ 0", "    var res = operand[0]\n    for i in 1..<operand.count {\n        var\
    \ operation = operator[i % operator.count]\n        if operation == \"+\" {\n\
    \            res += operand[i]\n        } else if operation == \"*\" {\n     \
    \       res *= operand[i]\n        } else if operation == \"-\" {\n          \
    \  res -= operand[i]\n        } else if operation == \"/\" {\n            res\
    \ //= operand[i]\n        } else if operation == \"//\" {\n            res %=\
    \ operand[i]\n        } else if operation == \"**\" {\n            res %= operand[i]\n\
    \        } else {\n            print(\"Invalid operator: \\(operation)\")\n  \
    \      }\n    }\n    return res", "    var total = 0\n    for i in 0..<(operand.count\
    \ - 1) {\n        switch operator[i] {\n        case \"+\":\n            total\
    \ = total + operand[i]\n        case \"-\":\n            total = total - operand[i]\n\
    \        case \"*\":\n            total = total * operand[i]\n        case \"\
    //\":\n            total = total / operand[i]\n        case \"**\":\n        \
    \    total = total ** operand[i]\n        default:\n            fatalError(\"\
    unknown operator\")\n        }\n    }\n    return total", "    var total = 0\n\
    \    for index in 0..<operand.count {\n        let val = operand[index]\n    \
    \    let opr = operator[index].lowercaseString\n        switch opr {\n       \
    \ case \"+\":\n            total = total + val\n        case \"-\":\n        \
    \    total = total - val\n        case \"*\":\n            total = total * val\n\
    \        case \"//\":\n            total = total / val\n        case \"^\":\n\
    \            total = total ** val\n        default:\n            print(\"unknown\
    \ operator: \\(operator[index])\")\n        }\n    }\n    return total", "   \
    \ var operand2 = operand\n    var result: Int = 0\n\n    for index in 0..<operand2.count\
    \ - 1 {\n        switch operator[index] {\n        case \"+\":\n            operand2[index]\
    \ += operand2[index + 1]\n            operand2[index + 1] = 0\n        case \"\
    -\":\n            operand2[index] -= operand2[index + 1]\n            operand2[index\
    \ + 1] = 0\n        case \"*\":\n            operand2[index] = operand2[index]\
    \ * operand2[index + 1]\n            operand2[index + 1] = 0\n        case \"\
    //\":\n            operand2[index] = operand2[index] % operand2[index + 1]\n \
    \           operand2[index + 1] = 0\n        case \"**\":\n            operand2[index]\
    \ = operand2[index] * operand2[index + 1]\n            operand2[index + 1] = 1\n\
    \        default:\n            break\n        }\n    }\n\n    for index in 0..<operand.count\
    \ - 1 {\n        result += operand2[index]\n    }\n\n    return result", "   \
    \ // Write code here\n    switch operator[0] {\n    case \"+\":\n        return\
    \ operand[0]+operand[1]\n    case \"-\":\n        return operand[0]-operand[1]\n\
    \    case \"*\":\n        return operand[0]*operand[1]\n    case \"//\":\n   \
    \     return operand[0]/operand[1]\n    case \"**\":\n        return operand[0]**operand[1]\n\
    \    default:\n        print(\"error: No such operator.\")\n        return -1\n\
    \    }", "    // Write your code here\n    // return 1\n    if operand.count ==\
    \ 0 {\n        return 0\n    }\n\n    if operator.count == 0 {\n        return\
    \ 0\n    }\n    \n    var result: Int = 0\n    \n    if operator.count != operand.count\
    \ {\n        return 0\n    }\n    \n    if operator[0] == \"-\" {\n        result\
    \ = (operand[0] + operand[1]) - operand[2]\n    } else if operator[0] == \"+\"\
    \ {\n        result = (operand[0] + operand[1]) + operand[2]\n    } else if operator[0]\
    \ == \"*\" {\n        result = (operand[0] * operand[1]) + operand[2]\n    } else\
    \ if operator[0] == \"/\" {\n        result = (operand[0] / operand[1]) + operand[2]\n\
    \    } else if operator[0] == \"//\" {\n        result = (operand[0] / operand[1])\
    \ + operand[2]\n    } else {\n        return 0\n    }\n    \n    return result",
  "    var result = 0\n    var leftOperand = 0\n    var rightOperand = 0\n    var\
    \ operatorCount = 0\n    \n    for operatorIndex in 0..<operator.count {\n   \
    \     let operator = operator[operatorIndex]\n        switch operator {\n    \
    \    case \"+\":\n            leftOperand = operand[operatorCount]\n         \
    \   rightOperand = operand[operatorCount+1]\n            result += leftOperand\
    \ + rightOperand\n            operatorCount += 2\n        case \"-\":\n      \
    \      leftOperand = operand[operatorCount]\n            rightOperand = operand[operatorCount+1]\n\
    \            result -= leftOperand - rightOperand\n            operatorCount +=\
    \ 2\n        case \"*\":\n            leftOperand = operand[operatorCount]\n \
    \           rightOperand = operand[operatorCount+1]\n            result *= leftOperand\
    \ * rightOperand\n            operatorCount += 2\n        case \"/\":\n      \
    \      leftOperand = operand[operatorCount]\n            rightOperand = operand[operatorCount+1]\n\
    \            result = leftOperand / rightOperand\n            operatorCount +=\
    \ 2\n        case \"**\":\n            leftOperand = operand[operatorCount]\n\
    \            rightOperand = operand[operatorCount+1]\n            result = leftOperand\
    \ ** rightOperand\n            operatorCount += 2\n        default:\n        \
    \    break\n        }\n    }\n    \n    return result", "    // Write your code\
    \ here.\n    var result = 0\n    switch operator[0] {\n    case \"+\":\n     \
    \   result = operand[0] + operand[1]\n    case \"-\":\n        result = operand[0]\
    \ - operand[1]\n    case \"*\":\n        result = operand[0] * operand[1]\n  \
    \  case \"//\":\n        result = operand[0] // operand[1]\n    case \"**\":\n\
    \        result = operand[0] ** operand[1]\n    }\n    return result", "    var\
    \ result = operand[0]\n    for index in 1..<operand.count {\n        switch operator[0]\
    \ {\n        case \"+\":\n            result += (operand[index])\n        case\
    \ \"-\":\n            result -= (operand[index])\n        case \"*\":\n      \
    \      result *= (operand[index])\n        case \"//\":\n            result /=\
    \ (operand[index])\n        case \"**\":\n            result **= (operand[index])\n\
    \        default:\n            print(\"Something went wrong\")\n        }\n  \
    \  }\n    return result", '    return do_arithmetic(operator, operand, true)',
  "    var oprs = operator\n    var noprs = operand\n    var ans: Int = noprs[0]\n\
    \    var i: Int = 0\n    while i < oprs.count && i < noprs.count {\n        if\
    \ oprs[i] == \"+\" {\n            ans += noprs[i]\n        }\n        else if\
    \ oprs[i] == \"-\" {\n            ans -= noprs[i]\n        }\n        else if\
    \ oprs[i] == \"*\" {\n            ans *= noprs[i]\n        }\n        else if\
    \ oprs[i] == \"//\" {\n            ans /= noprs[i]\n        }\n        else if\
    \ oprs[i] == \"**\" {\n            ans **= noprs[i]\n        }\n        i += 1\n\
    \    }\n    return ans", "    if operand.count < 2 { return 0 }\n    var stack\
    \ = [Int]()\n    stack.insert(operand[0], operand[0])\n    for i in 1 ..< operand.count\
    \ {\n        let newValue = stack.removeLast() + operator[stack.count - 1] * operand[i]\n\
    \        stack.insert(newValue, newValue)\n    }\n    return stack.removeLast()",
  "    var result: Int = 0\n    var index = 0\n    \n    while index < operator.count\
    \ && index < operand.count {\n        switch operator[index] {\n        case \"\
    +\":\n            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result = result / operand[index]\n        case\
    \ \"**\":\n            result = (result * operand[index])\n        }\n       \
    \ index += 1\n    }\n    return result", "    switch operator.count {\n    case\
    \ 0:\n        print(\"operator: operator array is empty!\")\n    case 1:\n   \
    \     // single operator\n        let op = operator[0]\n        switch op {\n\
    \        case \"+\":\n            return operand[0] + operand[1]\n        case\
    \ \"-\":\n            return operand[0] - operand[1]\n        case \"*\":\n  \
    \          return operand[0] * operand[1]\n        case \"//\":\n            return\
    \ operand[0] // operand[1]\n        case \"**\":\n            return operand[0]\
    \ ** operand[1]\n        default:\n            print(\"Invalid operator!\")\n\
    \        }\n    case 2:\n        // two operands\n        if operand[0] != 0 {\
    \ // operand is non-negative\n            let op = operator[0]\n            let\
    \ op = operand[0]\n            switch op {\n            case \"+\":\n        \
    \        return operand[0] + operand[1]\n            case \"-\":\n           \
    \     return operand[0] - operand[1]\n            case \"*\":\n              \
    \  return operand[0] * operand[1]\n            case \"//\":\n                return\
    \ operand[0] // operand[1]\n            case \"**\":\n                return operand[0]\
    \ ** operand[1]\n            default:\n                print(\"Invalid operator!\"\
    )\n            }\n        } else { // operand is 0\n            let op = operator[1]\n\
    \            switch op {\n            case \"+\":\n                return operand[0]\
    \ + operand[1]\n            case \"-\":\n                return operand[0] - operand[1]\n\
    \            case \"*\":\n                return operand[0] * operand[1]\n   \
    \         case \"//\":\n                return operand[0] // operand[1]\n    \
    \        case \"**\":\n                return operand[0] ** operand[1]\n     \
    \       default:\n                print(\"Invalid operator!\")\n            }\n\
    \        }\n    default:\n        print(\"Invalid operator!\")\n    }", '    //
    add code here', "    var op1 = operand[0]\n    var op2 = operand[1]\n    var op3\
    \ = operand[2]\n    var op4 = operand[3]\n    for op in operator {\n        if\
    \ op == \"+\" {\n            op1 += op2\n        }\n        if op == \"-\" {\n\
    \            op1 -= op2\n        }\n        if op == \"*\" {\n            op1\
    \ *= op2\n        }\n        if op == \"/\" {\n            op1 /= op2\n      \
    \  }\n        if op == \"%\" {\n            op1 %= op2\n        }\n        if\
    \ op == \"^\" {\n            op1 ^= op2\n        }\n        if op == \"==\" {\n\
    \            if op2 == 0 {\n                return 0\n            }\n        }\n\
    \        if op == \"<\" {\n            if op2 < 0 {\n                return -1\n\
    \            }\n        }\n        if op == \">\" {\n            if op2 > 0 {\n\
    \                return 1\n            }\n        }\n        if op == \"<=\" {\
    \ \n            if op2 > 0 {\n                return 1\n            }\n      \
    \  }\n        if op == \">=\" { \n            if op2 > 0 {\n                return\
    \ 1\n            }\n        }\n    }\n    return op1", "    \n    \n    let opArr\
    \ = operator\n    let opLength = opArr.count\n    let numArr = operand\n    let\
    \ numLength  = numArr.count\n    \n    if opLength < 1 || numLength < 2 {\n  \
    \      print(\"Invalid Expression: At least one operator and one number must be\
    \ specified.\")\n        return 0\n    }\n    \n    if numLength == 1 {\n    \
    \    return operand[0]\n    }\n    \n    if opArr.last == String(operator[0])\
    \ {\n        // The last operator in the operator array is the same as the operator\
    \ for the first operand.\n        return operand[0] + do_algebra(opArr[1..<opLength],\
    \ operand[1..<numLength])\n    }\n    \n    if opArr.last == \"+\" || opArr.last\
    \ == \"-\" || opArr.last == \"*\" || opArr.last == \"/\" {\n        // If the\
    \ last operator in the operator array is a basic algebra operation, then we can\
    \ evaluate the expression\n        \n        if numLength > opLength {\n     \
    \       print(\"Invalid Expression: Too many operands. \")\n            return\
    \ 0\n        }\n        \n        \n        let lastIndex = numLength - opLength\n\
    \        \n        if numLength == opLength + 1 {\n            // When only one\
    \ operand is given and that operand is a basic algebra operation, then \n    \
    \        // we can evaluate the expression\n            return operand[0] + do_algebra(opArr[1..<opLength],\
    \ operand[1..<lastIndex])\n        }\n        \n        \n        let leftOp =\
    \ operand[1..<lastIndex]\n        let rightOp = operand[lastIndex...<numLength]\n\
    \        \n        switch opArr.last {\n            case \"+\":\n            \
    \    return operand[0] + do_algebra(opArr[1..<opLength], leftOp) + do_algebra(opArr[opLength+1..<opArr.count],\
    \ rightOp)\n            case \"-\":\n                return operand[0] + do_algebra(opArr[1..<opLength],\
    \ leftOp) - do_algebra(opArr[opLength+1..<opArr.count], rightOp)\n           \
    \ case \"*\":\n                return operand[0] + do_algebra(opArr[1..<opLength],\
    \ leftOp) * do_algebra(opArr[opLength+1..<opArr.count], rightOp)\n           \
    \ case \"/\":\n                return operand[0] + do_algebra(opArr[1..<opLength],\
    \ leftOp) / do_algebra(opArr[opLength+1..<opArr.count], rightOp)\n           \
    \ default:\n                println(\"Invalid Expression: Can only use +,-,*,/\
    \ as operators.\")\n                return 0\n        }\n    }\n    ", "    var\
    \ result: Int = 0\n    for index in 0..<operand.count {\n        result = result\
    \ + operand[index] * operator[operand.count - 1 - index]\n    }\n    return result",
  "    switch operator.count {\n    case 0:\n        print(\"Operator is empty\")\n\
    \        return -1\n    case 1:\n        return operand[0] + do_algebra(operator:\
    \ operator, operand: operand[1..<operand.count])\n    default:\n        var sum:\
    \ Int = 0\n        for _ in 0..<operator.count {\n            sum += operand[operator.count\
    \ - 1] * do_algebra(operator: operator, operand: operand[0..<operand.count])\n\
    \        }\n        return sum\n    }", "    var result: Int = 0\n    var index\
    \ = 0\n\n    operator.repeatedArray().forEach { (operatorString) in\n        if\
    \ let index = operator.firstIndex(of: operatorString) {\n            let result\
    \ = operand[index] + operand[index+1]\n\n            result += do_algebra(operator:\
    \ operator, operand: [result])\n\n        } else {\n            print(\"ERROR:\
    \ Operator \\(operatorString) does not exist!\")\n        }\n    }\n    return\
    \ result", "    if operator.count != operand.count {\n        throw MyErrors.InvalidOperationError.init(format:\
    \ \"Invalid operation: \\(operator) \\(operand). The count of operand \\(operand.count)\
    \ must be equal to the count of operator \\(operator.count)\")\n    }\n    var\
    \ total = 1\n    \n    switch operator.first {\n    case \"+\":\n        total\
    \ = operand[0] + operand[1]\n    case \"-\":\n        total = operand[0] - operand[1]\n\
    \    case \"*\":\n        total = operand[0] * operand[1]\n    case \"/\":\n \
    \       if operand[1] != 0 {\n            total = operand[0] / operand[1]\n  \
    \      } else {\n            throw MyErrors.InvalidOperationError.init(format:\
    \ \"Cannot divide by zero. \\(operand[0])\")\n        }\n    case \"**\":\n  \
    \      total = operand[0] ** operand[1]\n    default:\n        throw MyErrors.InvalidOperationError.init(format:\
    \ \"Invalid operation: \\(operator)\")\n    }\n    return total", "    // Your\
    \ code here\n    // TODO: convert this line to Swift syntax\n    var result: Int\
    \ = 0\n    for i in 0..<operators.count{\n        var temp: Int = 0\n        switch\
    \ operators[i] {\n        case \"+\":\n            temp += operand[i]\n      \
    \  case \"-\":\n            temp -= operand[i]\n        case \"*\":\n        \
    \    temp *= operand[i]\n        case \"/\":\n            temp /= operand[i]\n\
    \        case \"//\":\n            temp /= operand[i]\n        case \"**\":\n\
    \            temp **= operand[i]\n        }\n        result = temp\n    }\n  \
    \  return result", "    var sum: Int = 0\n    for i in 0..<operand.count-1 {\n\
    \        sum += operand[i] * operator[i]\n    }\n    return sum", "    // TODO:\
    \ Complete the code\n    return 0", "    var result = operand[0]\n    for index\
    \ in 1...operand.count {\n        if operator[index] != '+' && operator[index]\
    \ != '-' && operator[index] != '*' && operator[index] != '/' && operator[index]\
    \ != '**' {\n            print(\"Error: Operator is not an operator\")\n     \
    \       return 0;\n        }\n        switch operator[index] {\n        case \"\
    +\":\n            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"/\":\n            if operand[index] == 0 {\n                print(\"\
    Error: Divide by zero\")\n                return 0;\n            }\n         \
    \   result = result / operand[index]\n        case \"**\":\n            if operand[index]\
    \ == 0 {\n                print(\"Error: Raise to zero\")\n                return\
    \ 0;\n            }\n            result **= operand[index]\n        default:\n\
    \            print(\"Error: Operator is not an operator\")\n            return\
    \ 0;\n        }\n    }\n    return result;", "    var result = 0\n    \n    for\
    \ i in 0..<operand.count {\n        var ops = \"\"\n        for _ in operator.reverse()\
    \ {\n            ops = ops + operator[0]\n        }\n        if operand[i] ==\
    \ 0 {\n            ops = ops + operator[0]\n        } else {\n            ops\
    \ = ops + operator[0] + \"(\" + operand[i].description + \")\"\n        }\n  \
    \      result += operand[i] * Int(evaluate(ops))\n    }\n    \n    return result",
  "    let stack = Array<Int>()\n    for x in operand.dropFirst() {\n        stack.append(x)\n\
    \    }\n    \n    for a in operator {\n        switch a {\n        case \"+\"\
    : stack.append(stack.pop() + stack.pop())\n        case \"-\": stack.append(stack.pop()\
    \ - stack.pop())\n        case \"*\": stack.append(stack.pop() * stack.pop())\n\
    \        case \"//\": stack.append(stack.pop() / stack.pop())\n        case \"\
    **\": stack.append(pow(stack.pop(), stack.pop()))\n        default: fatalError(\"\
    unknown operator\")\n        }\n    }\n    return stack[0]", "    var result :\
    \ Int = 0\n    for i in 0..<operator.count {\n        let operator = operator[i]\n\
    \        let operand1 = operand[i]\n        let operand2 = operand[i+1]\n    \
    \    switch operator {\n            case \"+\":\n                result += operand1\
    \ + operand2\n            case \"-\":\n                result -= operand1 - operand2\n\
    \            case \"*\":\n                result *= operand1 * operand2\n    \
    \        case \"/\":\n                result /= operand1 / operand2\n        \
    \    case \"**\":\n                result **= operand1\n            default:\n\
    \                break\n        }\n    }\n    return result", '    return do_algebra_helper(operator,
    operand, operator[operand.count-1])', "    var result: Int = 0\n    \n    for\
    \ index1 in 0..<operand.count {\n        for index2 in 0..<operator.count {\n\
    \            switch (operator[index2], operand[index1]) {\n            case (.,\
    \ let value):\n                result += value\n            case (+, let value):\n\
    \                result -= value\n            case (-, let value):\n         \
    \       result *= value\n            case (*, let value):\n                result\
    \ /= value\n            case (/, let value):\n                result %= value\n\
    \            case (^, let value):\n                result **= value\n        \
    \    default:\n                break\n            }\n        }\n    }\n    return\
    \ result", "\tswitch operator[0] {\n\tcase \"+\":\n\t\treturn operand[0] + operand[1]\n\
    \tcase \"-\":\n\t\treturn operand[0] - operand[1]\n\tcase \"*\":\n\t\treturn operand[0]\
    \ * operand[1]\n\tcase \"/\":\n\t\tif operand[1] == 0 {\n\t\t\treturn 0\n\t\t\
    }\n\t\treturn operand[0] / operand[1]\n\tcase \"**\":\n\t\treturn operand[0] *\
    \ operand[0]\n\t}\n\treturn 0", "    var num = 0\n    for idx in 0..<operator.count\
    \ {\n        switch operator[idx] {\n        case \"+\":\n            num += operand[idx]\n\
    \        case \"-\":\n            num -= operand[idx]\n        case \"*\":\n \
    \           num *= operand[idx]\n        case \"//\":\n            num -= operand[idx]\n\
    \            num -= operand[idx]\n        case \"**\":\n            num *= operand[idx]\n\
    \        }\n    }\n    return num", "    var total = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            total\
    \ += operand[index]\n        case \"-\":\n            total -= operand[index]\n\
    \        case \"*\":\n            total *= operand[index]\n        case \"//\"\
    :\n            total /= operand[index]\n        case \"**\":\n            total\
    \ *= operand[index]\n        default:\n            return -1\n        }\n    }\n\
    \    return total", "    var result = 0\n    for i in 0..<operator.count {\n \
    \       switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result", "    var result: Int = 0\n    var i = 0\n   \
    \ while i < operator.count && i < operand.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i]\n        case \"-\"\
    :\n            result -= operand[i]\n        case \"*\":\n            result *=\
    \ operand[i]\n        case \"//\":\n            result /= operand[i]\n       \
    \ case \"**\":\n            result **= operand[i]\n        default:\n        \
    \    fatalError(\"bad operator\")\n        }\n        i += 1\n    }\n    return\
    \ result", "    var result: Int = 0\n    var op1: Int = 0\n    var op2: Int =\
    \ 0\n    \n    for i in 0..<operator.count {\n        let op: Int = operand[i]\n\
    \        op1 = op1 * op\n        op2 = op2 * op\n        result = result + (op1\
    \ + op2)\n    }\n    \n    return result", "    var leftOperand = operand[0]\n\
    \    var rightOperand = operand[1]\n    var resultOperand = leftOperand\n    var\
    \ operatorIndex = 0\n    var leftOperator = operator[0]\n    var rightOperator\
    \ = operator[1]\n    switch operatorIndex {\n    case 0:\n        resultOperand\
    \ = leftOperand + rightOperand\n    case 1:\n        resultOperand = leftOperand\
    \ - rightOperand\n    case 2:\n        resultOperand = leftOperand * rightOperand\n\
    \    case 3:\n        resultOperand = leftOperand / rightOperand\n    case 4:\n\
    \        resultOperand = leftOperand / rightOperand ** rightOperand\n    case\
    \ 5:\n        resultOperand = leftOperand * rightOperand ** rightOperand\n   \
    \ default:\n        break\n    }\n    return resultOperand", "    switch operator[operator.count\
    \ - 1] {\n    case \"+\":\n        return operand[0]\n    case \"-\":\n      \
    \  return -operand[0]\n    case \"*\":\n        return operand[0] * operand[1]\n\
    \    case \"//\":\n        if operand[1] == 0 {\n            throw ErrorMessage(\"\
    Cannot divide by zero\")\n        }\n        return operand[0] / operand[1]\n\
    \    case \"**\":\n        if operand[1] == 0 {\n            throw ErrorMessage(\"\
    Cannot raise to zero\")\n        }\n        return operand[0] ** operand[1]\n\
    \    default:\n        throw ErrorMessage(\"Unknown operator\")\n    }", '    return
    operator.reduce(0, { $0 + operand[$0] * operand[$1] }) // Operator is the first
    argument', "    \n    var result = 0\n    \n    for i in 0..<operator.count {\n\
    \        let leftVal = operand[0..i]\n        let rightVal = operand[i+1..<operand.count]\n\
    \        \n        let leftOperand = operand[0..i]\n        let rightOperand =\
    \ operand[i+1..<operand.count]\n        \n        let left = do_calculate(leftOperand,\
    \ operator[i])\n        let right = do_calculate(rightOperand, operator[i])\n\
    \        \n        switch operator[i] {\n        case \"+\":\n            result\
    \ = result + left + right\n        case \"-\":\n            result = result -\
    \ left + right\n        case \"*\":\n            result = result * left + right\n\
    \        case \"/\":\n            if left == 0 {\n                throw(Errors.arithmeticError())\n\
    \            }\n            result = result / left + right\n        case \"^\"\
    :\n            if left == 0 {\n                throw(Errors.arithmeticError())\n\
    \            }\n            result = result ^ left + right\n        case \"**\"\
    :\n            result = result ** left + right\n        default:\n           \
    \ throw(Errors.arithmeticError())\n        }\n    }\n    \n    return result",
  "    var res: Int = 0\n    if operator.count > operand.count {\n        return res\n\
    \    } else {\n        for i1 = 0; i1 < operator.count - 1; i1++ {\n         \
    \   if operator[i1] == \"+\" {\n                res = res + operand[i1] + operand[i1\
    \ + 1]\n            } else {\n                res = res - operand[i1] * operand[i1\
    \ + 1]\n            }\n        }\n        return res / operand[operator.count\
    \ - 1]\n    }", "    var opCount = 0\n    var index = 0\n    var result = 0\n\
    \    for _ in 0..<operator.count {\n        if operand[index] == 0 {\n       \
    \     break\n        }\n        if operator[index] != \"+\" && operator[index]\
    \ != \"-\" && operator[index] != \"*\" && operator[index] != \"//\" && operator[index]\
    \ != \"**\" {\n            print(\"The operator is not supported!\")\n       \
    \     return\n        }\n        if operator[index] != \"**\" && operand[index]\
    \ != 0 {\n            result = result * operand[index]\n            opCount =\
    \ opCount + 1\n        } else {\n            result = result + operand[index]\n\
    \            opCount = opCount + 1\n        }\n        index = index + 1\n   \
    \ }\n    return result", "    let lengthOperator = operator.count\n    let lengthOperand\
    \ = operand.count\n    guard lengthOperand > 1 else {\n        return 0\n    }\n\
    \    guard lengthOperator > 1 else {\n        return 0\n    }\n    guard operand.count\
    \ != operator.count - 1 else {\n        return 0\n    }\n    guard operand.count\
    \ == (lengthOperand - 1) else {\n        return 0\n    }\n    var result = 0\n\
    \    for i in 0..<lengthOperand {\n        if operand[i] == 0 {\n            continue\n\
    \        }\n        var power = operand[i]\n        for j in 0..<lengthOperand\
    \ - 1 {\n            power = operator[j](power) * operand[j + 1]\n        }\n\
    \        result = result + power\n    }\n    return result", '    // Implement
    here', "    \n    let operator_length = operator.count\n    let operands_count\
    \ = operand.count\n    if operator_length <= 0 || operands_count < 2 {\n     \
    \   return 0\n    }\n    var res = operand[0]\n    for i in 1..<operands_count\
    \ {\n        res += operand[i] * operator[operator_length-1] + do_algebra(operator,\
    \ operand[i..<operands_count-1])\n    }\n    return res", "    if operator ==\
    \ nil {\n        return operand[0]\n    }\n    switch operator[0] {\n    case\
    \ \"+\": \n        return operand[0] + operand[1]\n    case \"-\": \n        return\
    \ operand[0] - operand[1]\n    case \"*\": \n        return operand[0] * operand[1]\n\
    \    case \"//\": \n        return operand[0] / operand[1]\n    case \"**\": \n\
    \        return operand[0] ** operand[1]\n    default:\n        return operand[0]\n\
    \    }", "    // add all operands to total\n    var total = 0\n    // loop through\
    \ the array\n    for var i = 0; i < operator.count - 1; i++ {\n        // get\
    \ current operator\n        let currentOperator = operator[i]\n        // get\
    \ current operand\n        let currentOperand = operand[i]\n        // get next\
    \ operator\n        let nextOperator = operator[i + 1]\n        // get next operand\n\
    \        let nextOperand = operand[i + 1]\n        // perform arithmetic operation\n\
    \        total = total * currentOperand + currentOperator * nextOperand\n    }\n\
    \    // perform final arithmetic operation\n    return total * operand[operator.count\
    \ - 1]", "    var ops: Int = 1\n    var operands: [Int] = operand\n    \n    for\
    \ op in operator {\n        let index = operator.index(of: op)\n        switch\
    \ op {\n        case \"+\":\n            ops *= operands[index]\n        case\
    \ \"-\":\n            ops /= operands[index]\n        case \"*\":\n          \
    \  ops %= operands[index]\n        case \"//\":\n            ops /= operands[index]\n\
    \        case \"**\":\n            ops *= operands[index]\n        }\n    }\n\
    \    return ops", "    var operators: String = \"\"\n    for i in 0..<operator.count\
    \ {\n        operators += \"\\(operator[i])\"\n    }\n    var num1 = operand[0]\n\
    \    var num2 = operand[1]\n    var result = 0\n    var operatorIndex = 0\n  \
    \  if operatorIndex == operator.count {\n        result = num1 + num2\n    } else\
    \ {\n        for i in 0..<operator.count {\n            result += num1 * operators[operatorIndex]\
    \ + num2\n            operatorIndex++\n        }\n    }\n    return result", " \
    \   assert(operator.count == operand.count-1)\n    var result = operand[0]\n \
    \   for op in operator {\n        switch op {\n        case \"+\": result = result\
    \ + operand[1]\n        case \"-\": result = result - operand[1]\n        case\
    \ \"*\": result = result * operand[1]\n        case \"//\": result = result /\
    \ operand[1]\n        case \"**\": result = result ** operand[1]\n        default:\n\
    \            fatalError(\"invalid operator in do_algebra\")\n        }\n     \
    \   \n    }\n    return result", "    var result = operand[0]\n    for op in operator\
    \ {\n        switch op {\n        case \"+\":\n            result += operand[1]\n\
    \        case \"-\":\n            result -= operand[1]\n        case \"*\":\n\
    \            result *= operand[1]\n        case \"//\":\n            result /=\
    \ operand[1]\n        case \"**\":\n            result **= operand[1]\n      \
    \  default:\n            break\n        }\n    }\n    return result", "    switch\
    \ operator.count {\n    case 0:\n        fatalError(\"The operator array is empty\"\
    )\n    case 1:\n        var result = 0\n        for i in 0..<operand.count {\n\
    \            switch operator[0] {\n            case \"+\": result = result + operand[i]\
    \ \n            case \"-\": result = result - operand[i] \n            case \"\
    *\": result = result * operand[i] \n            case \"/\": result = result /\
    \ operand[i] \n            case \"//\": result = result // operand[i] \n     \
    \       case \"**\": result = result ** operand[i] \n            }\n        }\n\
    \        return result \n    default:\n        fatalError(\"The operator array\
    \ has more than one operator\")\n    }", "    guard operatorCount >= operator.length,\
    \ operandCount >= operand.count - 1 else { return 0 }\n    \n    if operand.count\
    \ <= 1 {\n        return operand[0]\n    } else {\n        var result: Int = 0\n\
    \        \n        for _ in 0..operand.count - 1 {\n            switch operator[0]\
    \ {\n            case \"+\": result = result + operand[0] \n            case \"\
    -\": result = result - operand[0] \n            case \"*\": result = result *\
    \ operand[0] \n            case \"//\": result = result / operand[0] \n      \
    \      case \"**\": result = result ** operand[0] \n            default:\n   \
    \             print(\"ERROR!\")\n            }\n            operator = operator[1..]\n\
    \        }\n        return result\n    }", "    var result: Int = 0\n    for index\
    \ in 0..<operator.count {\n        switch operator[index] {\n        case \"+\"\
    : result = result + operand[index]\n        case \"*\": result = result * operand[index]\n\
    \        case \"-\": result = result - operand[index]\n        case \"//\": result\
    \ = result // operand[index]\n        case \"**\": result = result ** operand[index]\n\
    \        default: break\n        }\n    }\n    return result", "    guard operand.count\
    \ >= 2, operator.count >= 1 else {\n        fatalError(\"The size of operand and\
    \ operator arrays has to be at least 2\")\n    }\n    \n    var result = 0\n \
    \   var i = 0\n    \n    // Iterate through the operands\n    for value in operand\
    \ {\n        // Operates on the current operand\n        result = result*value\
    \ + operator[i%operator.count]*operand[i-1]\n        i = i + 1\n    }\n    \n\
    \    return result", "    var result: Int = 0\n    for i in 0..<operand.count\
    \ {\n        result += operand[i] * operator[i]\n    }\n    return result", "\t\
    let operandSize = operand.count\n\tif operandSize < 2 {\n\t\tfatalError(\"Invalid\
    \ number of operands\")\n\t}\n\tif operandSize > 3 {\n\t\tfatalError(\"Invalid\
    \ number of operands\")\n\t}\n\tswitch operandSize {\n\tcase 1:\n\t\treturn do_algebra_1(operator,\
    \ operand)\n\tcase 2:\n\t\treturn do_algebra_2(operator, operand)\n\tcase 3:\n\
    \t\treturn do_algebra_3(operator, operand)\n\tdefault:\n\t\treturn do_algebra_4(operator,\
    \ operand)\n\t}", "    \n    var a = operand[0]\n    var b = operand[1]\n    var\
    \ c = operand[2]\n\n    var operator_index = 0\n    var operand1_index = 0\n \
    \   var operand2_index = 0\n\n    while operator_index < operator.count {\n  \
    \      \n        switch operator[operator_index] {\n        \n        case \"\
    +\":\n            c = a + b\n            operand1[operand1_index] = c\n      \
    \  case \"-\":\n            c = a - b\n            operand1[operand1_index] =\
    \ c\n        case \"*\":\n            c = a * b\n            operand1[operand1_index]\
    \ = c\n        case \"/\":\n            if b != 0 {\n                c = a / b\n\
    \                operand1[operand1_index] = c\n            } else {\n        \
    \        c = a % b\n                operand1[operand1_index] = c\n           \
    \ }\n        case \"//\":\n            if b != 0 {\n                c = a / b\n\
    \                operand1[operand1_index] = c\n            } else {\n        \
    \        c = a % b\n                operand1[operand1_index] = c\n           \
    \ }\n        case \"**\":\n            c = a ** b\n            operand1[operand1_index]\
    \ = c\n        default:\n            \n            break\n        }\n        \n\
    \        operator_index += 1\n        operand1_index += 1\n        operand2_index\
    \ += 1\n        \n    }\n    \n    return operand1[operand1_index]", "    switch\
    \ operator.count {\n    case 0:\n        break\n    case 1:\n        return operand[0]\
    \ + operand[1]\n    case 2:\n        return operand[0] * operand[1]\n    case\
    \ 3:\n        return operand[0] / operand[1]\n    case 4:\n        return operand[0]\
    \ ** operand[1]\n    case 5:\n        return operand[0] < operand[1]\n    default:\n\
    \    }", "    // Write your code here\n    var result = 0\n    for _ in 0..<operand.count\
    \ {\n        var index = 0\n        for _ in 0..<operator.count {\n          \
    \  result += operand[index] * Int(operator[index])\n            index += 1\n \
    \       }\n    }\n    return result", "    // TODO: Add validation for the input\n\
    \    return operand[0] // use first operand and do an operation with the rest\
    \ of operands", "    // Your code here\n    var result = 0\n    for i in 0..<operand.count\
    \ {\n        if let index = operator.indexOf(operand[i], options: .caseInsensitive)\
    \ {\n            switch index {\n            case 0: result += (operand[i] + operand[i+1])\n\
    \            case 1: result -= (operand[i] + operand[i+1])\n            case 2:\
    \ result *= (operand[i] + operand[i+1])\n            case 3: result /= (operand[i]\
    \ + operand[i+1])\n            case 4: result %= (operand[i] + operand[i+1])\n\
    \            case 5: result /= operand[i]\n            case 6: result *= operand[i]\n\
    \            case 7: result -= operand[i]\n            case 8: result ^= operand[i]\n\
    \            case 9: result %= operand[i]\n            case 10: result &= operand[i]\n\
    \            case 11: result |= operand[i]\n            case 12: result &= ~operand[i]\n\
    \            case 13: result |= ~operand[i]\n            case 14: result >>= operand[i]\n\
    \            case 15: result <<= operand[i]\n            default: break\n    \
    \        }\n        }\n    }\n    return result", "    switch operator[0] {\n\
    \    case \"+\": return operand[0] + operand[1]\n    case \"-\": return operand[0]\
    \ - operand[1]\n    case \"*\": return operand[0] * operand[1]\n    case \"//\"\
    : return operand[0] // operand[1]\n    case \"**\": return operand[0] ** operand[1]\n\
    \    default:\n        fatalError(\"unsupported operator: \\(operator)\")\n  \
    \  }", "    let len = operator.count\n    if len != operand.count {\n        return\
    \ 0\n    }\n    var res: Int = 0\n    for index in 0..<len {\n        switch operator[index]\
    \ {\n        case \"+\":\n            res = res + operand[index]\n        case\
    \ \"-\":\n            res = res - operand[index]\n        case \"*\":\n      \
    \      res = res * operand[index]\n        case \"/\":\n            res = res\
    \ / operand[index]\n        case \"**\":\n            res = res * operand[index]\n\
    \        default:\n            return 0\n        }\n    }\n    return res", " \
    \   var i = 0\n    var sum = 0\n    for element in operator {\n        sum +=\
    \ operand[i] * Int(element)\n        i += 1\n    }\n    return sum", "    \n \
    \   var result = 0\n    \n    for index in range(0, operand.count) {\n       \
    \ \n        var firstOperand = operand[index]\n        var secondOperand = operand[index\
    \ + 1]\n        \n        for oper in operator {\n            \n            if\
    \ oper[0] == '+' || oper[0] == '-' {\n                result = result + firstOperand\n\
    \            } else if oper[0] == '*' || oper[0] == '/' {\n                result\
    \ = result * secondOperand\n            } else if oper[0] == '**' {\n        \
    \        result = result ** secondOperand\n            } else if oper[0] == '//'\
    \ {\n                result = result // secondOperand\n            }\n       \
    \ }\n        \n        firstOperand = nil\n        secondOperand = nil\n    }\n\
    \    \n    return result", "    var res = operand[0]\n    operand.removeFirst()\n\
    \    for op in operator {\n        switch op {\n        case \"+\": res += operand[0]\n\
    \        case \"-\": res -= operand[0]\n        case \"*\": res += operand[0]\
    \ * operand[0]\n        case \"//\": res /= operand[0]\n        case \"**\": res\
    \ *= operand[0]\n        default: fatalError()\n        }\n        operand.removeFirst()\n\
    \    }\n    return res", "    \n    if operator.isEmpty || operand.isEmpty {\n\
    \        return 0\n    }\n    \n    let operator_index = operator.indexOf(operator[0])\n\
    \    let operand1 = operand[operator_index].unwrapped\n    let operand2 = operand[(operator_index\
    \ + 1)..<operand.count].unwrapped\n    \n    let result: (Int, Int) = (operand1,\
    \ operand2)\n    \n    if operator_index == 0 {\n        \n        if operand1\
    \ == 0 {\n            if operand2 == 0 {\n                return 0\n         \
    \   }\n            else { return operand2 }\n        }\n        else { return\
    \ operand1 }\n    }\n    else if operator_index == 1 {\n        \n        if operand1\
    \ == 0 {\n            return -operand2\n        }\n        else { return operand1\
    \ }\n    }\n    else if operator_index == 2 {\n        \n        if operand2 ==\
    \ 0 {\n            return 0\n        }\n        else { return operand1 }\n   \
    \ }\n    else if operator_index == 3 {\n        \n        if operand1 == 0 {\n\
    \            return operand2\n        }\n        else { return operand1 }\n  \
    \  }\n    else {\n        if operand2 == 0 {\n            return -operand1\n \
    \       }\n        else { return operand1 }\n    }", "    var result = 0\n   \
    \ for _ in 0..<operand.count {\n        for _ in 0..<operator.count {\n      \
    \      result = result + (operand[operand.count - 1 - _] * operator[operator.count\
    \ - 1 - _])\n        }\n    }\n    return result", "\tlet numOfOperators = operator.count\n\
    \t\n\tguard let operatorString = operator[numOfOperators - 1],\n\t\tlet operandString\
    \ = operand[numOfOperators - 1],\n\t\tlet operandArray = operand.dropLast(1),\n\
    \t\tlet operatorArray = operator.dropLast(1) {\n\t\t\n\t\tlet operandIntArray\
    \ = operandArray.map({ Int($0) })\n\t\tlet operatorString = String(operatorString)\n\
    \t\tlet result: Int = 1\n\t\t\n\t\tswitch operatorString {\n\t\tcase \"+\":\n\t\
    \t\tresult = operandIntArray.map { $0 + $1 }.reduce(0, +)\n\t\tcase \"-\":\n\t\
    \t\tresult = operandIntArray.map { $0 - $1 }.reduce(0, -)\n\t\tcase \"*\":\n\t\
    \t\tresult = operandIntArray.map { $0 * $1 }.reduce(0, *)\n\t\tcase \"//\":\n\t\
    \t\tresult = operandIntArray.map { $0 // $1 }.reduce(0, +)\n\t\tcase \"**\":\n\
    \t\t\tresult = operandIntArray.map { $0 ** $1 }.reduce(0, *)\n\t\tdefault:\n\t\
    \t\tbreak\n\t\t}\n\t\t\n\t\treturn result\n\t}\n\t\n\treturn 0", '    return operand[0]
    * operator[0] + operand[1] * operator[1] + operand[2] * operator[2] + operand[3]
    * operator[3] + operand[4] * operator[4]', "    \n    // We use map to apply a\
    \ binary function between two arrays element-wise.\n    return operator.map {\
    \ binary in\n        return binary_eval(binary, operand)\n    }.sum()", "    var\
    \ result: Int = 0\n    var i = 0;\n    for operator in operator {\n        result\
    \ = result + (operand[i] ?? 0) * operatorMap[operator]!\n        i = i + 1\n \
    \   }\n    return result + operand[i - 1]", "    if operator.isEmpty || operand.isEmpty\
    \ {\n        return 0\n    }\n    var stack: [Int] = []\n    var result = 0\n\
    \    for index in 0..<operator.count {\n        switch operator[index] {\n   \
    \     case \"+\": stack.append(operand[index] + stack[index])\n        case \"\
    *\": stack.append(operand[index] * stack[index])\n        case \"-\": stack.append(operand[index]\
    \ - stack[index])\n        case \"//\": stack.append(operand[index] // stack[index])\n\
    \        case \"**\": stack.append(operand[index] ** stack[index])\n        default:\
    \ break\n        }\n    }\n    result = stack[0]\n    return result", "    \n\
    \    // create variables\n    var add = operand[0]\n    var sub = operand[1]\n\
    \    var mul = operand[2]\n    var floorDiv = operand[3]\n    var exp = operand[4]\n\
    \    var ans = operand[0]\n    \n    // perform the calculation\n    for var i\
    \ = 0; i < operator.count; i++ {\n        switch operator[i] {\n        case \"\
    +\":\n            ans = add + operand[i + 1]\n        case \"-\":\n          \
    \  ans = sub - operand[i + 1]\n        case \"*\":\n            ans = mul * operand[i\
    \ + 1]\n        case \"//\":\n            ans = floorDiv // operand[i + 1]\n \
    \       case \"**\":\n            ans = exp * operand[i + 1]\n        }\n    }\n\
    \    return ans", "    if operator.count != operand.count {\n        print(\"\
    ERROR: operator\\(operator) and operand\\(operand) should be of equal size\")\n\
    \        return -1\n    }\n    if operator.count < 1 || operand.count < 2 {\n\
    \        print(\"ERROR: operator\\(operator) and operand\\(operand) should be\
    \ at least of length 2\")\n        return -1\n    }\n    var opCount: Int = 0\n\
    \    var result = 0\n    for i in 0..<operator.count {\n        if operator[i]\
    \ == \"+\" {\n            opCount += 1\n        }\n    }\n    for i in 0..<operand.count\
    \ {\n        let operand1 = operand[i] - 1\n        var operator1 = 0\n      \
    \  for j in 0..<opCount {\n            if opCount == 1 {\n                operator1\
    \ = operator[0]\n            } else if opCount == 2 {\n                operator1\
    \ = operator[0]\n            } else {\n                operator1 = operator[j]\n\
    \            }\n        }\n        let operand2 = operand[i + 1] - 1\n       \
    \ if operand1 < operand2 {\n            result = result + operand1 * operator1\n\
    \        } else {\n            result = result - operand2 * operator1\n      \
    \  }\n    }\n    return Int(result)", "    guard operator.count >= operand.count\
    \ - 1 else {\n        return -1\n    }\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        guard operand.count > index else {\n            return -1\n     \
    \   }\n        let operation = operator[index]\n        let operand1 = operand[index]\n\
    \        let operand2 = operand[index + 1]\n        switch operation {\n     \
    \   case \"+\":\n            result = result + operand1\n        case \"-\":\n\
    \            result = result - operand1\n        case \"*\":\n            result\
    \ = result * operand1\n        case \"//\":\n            result = result / operand1\n\
    \        case \"**\":\n            result = result ** operand1\n        default:\n\
    \            return -1\n        }\n    }\n    return result", "    var stack =\
    \ [Int]()\n    var result = operand[0]\n    var i = 1 // index starts from 1\n\
    \    \n    while i < operator.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result = result + operand[i]\n        case \"-\":\n    \
    \        result = result - operand[i]\n        case \"*\":\n            result\
    \ = result * operand[i]\n        case \"//\":\n            result = result / operand[i]\n\
    \        case \"**\":\n            result = result ** operand[i]\n        default:\n\
    \            fatalError()\n        }\n        stack.append(result)\n        i\
    \ = i + 1\n    }\n    \n    return stack[0]", "    var operators = operator[0]\n\
    \    var operands = operand[0]\n\n    for var i = 0; i < operands.count - 1; i++\
    \ {\n        for var j = 0; j < operators.count; j++ {\n            switch operators[j]\
    \ {\n            case \"+\":\n                operands[i] += operands[i + 1]\n\
    \                break\n            case \"-\":\n                operands[i] -=\
    \ operands[i + 1]\n                break\n            case \"*\":\n          \
    \      operands[i] *= operands[i + 1]\n                break\n            case\
    \ \"/\":\n                operands[i] /= operands[i + 1]\n                break\n\
    \            case \"**\":\n                operands[i] *= operands[i + 1]\n  \
    \              operands[i] = operands[i] * operands[i + 1]\n                break\n\
    \            default:\n                break\n            }\n        }\n    }\n\
    \    return operands[0]", "    var opr = [String]()\n    var opra = [Int]()\n\
    \    var n = 0; // counter of operator\n\n    for idx in 0..<operand.count {\n\
    \        opr += operator\n        opra += operand[idx]\n    }\n    if opr.count\
    \ < 1 {\n        return 0\n    }\n    switch opr.count {\n    case 1...2:\n  \
    \      return opra[0]\n    case 2...3:\n        return opra[0] * opra[1]\n   \
    \ case 3...4:\n        return opra[0] * opra[1] * opra[2]\n    case 4...5:\n \
    \       return opra[0] * opra[1] * opra[2] * opra[3]\n    case 5...6:\n      \
    \  return opra[0] * opra[1] * opra[2] * opra[3] * opra[4]\n    case 6...7:\n \
    \       return opra[0] * opra[1] * opra[2] * opra[3] * opra[4] * opra[5]\n   \
    \ default:\n        return 0\n    }", "    \n    // If the length of operator\
    \ array is equal to the length of operand array minus one, then we have\n    //\
    \ all the basic and useful operators to build the algebraic expression with two\
    \ given arrays of operands.\n    if operator.count == operand.count - 1 {\n  \
    \      \n        // Iterate over the length of array operator and operand\n  \
    \      for i in 0..<operator.count {\n            \n            // If the operator\
    \ at the given index equals \"+\", then perform the addition.\n            if\
    \ operator[i] == \"+\" {\n                \n                // Create a new variable\
    \ with the result of the addition.\n                var result: Int = 0\n    \
    \            \n                // Iterate over the length of operand and add the\
    \ result to the result of the addition.\n                for j in 0..<operand.count\
    \ {\n                    result += operand[j]\n                }\n           \
    \     return result\n                \n            } else if operator[i] == \"\
    -\" {\n                \n                // Create a new variable with the result\
    \ of the subtraction.\n                var result: Int = 0\n                \n\
    \                // Iterate over the length of operand and subtract the result\
    \ to the result of the subtraction.\n                for j in 0..<operand.count\
    \ {\n                    result -= operand[j]\n                }\n           \
    \     return result\n                \n            } else if operator[i] == \"\
    *\" {\n                \n                // Create a new variable with the result\
    \ of the multiplication.\n                var result: Int = 0\n              \
    \  \n                // Iterate over the length of operand and multiply the result\
    \ with the operand at the given index.\n                for j in 0..<operand.count\
    \ {\n                    result *= operand[j]\n                }\n           \
    \     return result\n                \n            } else if operator[i] == \"\
    /\" {\n                \n                // Create a new variable with the result\
    \ of the floor division.\n                var result: Int = 0\n              \
    \  \n                // Iterate over the length of operand and floor the result\
    \ with the operand at the given index.\n                for j in 0..<operand.count\
    \ {\n                    result /= operand[j]\n                }\n           \
    \     return result\n                \n            } else if operator[i] == \"\
    //\" {\n                \n                // Create a new variable with the result\
    \ of the floor division.\n                var result: Int = 0\n              \
    \  \n                // Iterate over the length of operand and floor the result\
    \ with the operand at the given index.\n                for j in 0..<operand.count\
    \ {\n                    result /= operand[j]\n                }\n           \
    \     return result\n                \n            } else if operator[i] == \"\
    **\" {\n                \n                // Create a new variable with the result\
    \ of the exponentiation.\n                var result: Int = 0\n              \
    \  \n                // Iterate over the length of operand and multiply the result\
    \ with the operand at the given index.\n                for j in 0..<operand.count\
    \ {\n                    result *= operand[j]\n                }\n           \
    \     return result\n                \n            }\n        }\n    }\n    \n\
    \    // If an algebraic expression is not possible, return nil.\n    return nil"]
stop_tokens:
- "\n}"
