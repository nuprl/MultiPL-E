language: swift
name: HumanEval_102_choose_num
results:
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // Return number that is in\
    \ the range [x, y] inclusive.\n    if x < y {\n        return (x+y) / 2.0\n  \
    \  } else {\n        return (x-y) / 2.0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpu316m70t.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        return (x+y) / 2.0\n              \
    \         ^\n                       Int( )\n/tmp/tmpu316m70t.swift:15:24: error:\
    \ cannot convert value of type 'Double' to expected argument type 'Int'\n    \
    \    return (x-y) / 2.0\n                       ^\n                       Int(\
    \ )\n"
  stdout: ''
  timestamp: 1659979060
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if (x < y) { return -1 }\n\
    \    if (x == y) { return x }\n    while x <= y {\n        if ((x % 2) == 0) {\
    \ x = x + 1 }\n        else { x = x - 1 }\n    }\n    return x\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpiou3isst.swift:14:29: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        if ((x % 2) == 0) { x = x + 1 }\n                        \
    \    ^\n/tmp/tmpiou3isst.swift:15:16: error: cannot assign to value: 'x' is a\
    \ 'let' constant\n        else { x = x - 1 }\n               ^\n"
  stdout: ''
  timestamp: 1659979060
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return Int(arc4random() %\
    \ (UInt32)(y - x + 1)) + x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpy084kakz.swift:11:16: error: cannot find 'arc4random' in scope\n\
    \    return Int(arc4random() % (UInt32)(y - x + 1)) + x\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979060
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var xEven = x * x\n    var\
    \ yEven = y * y\n    var xGreaterY: Int = xEven - yEven\n    if xGreaterY > 0\
    \ {\n        return x + xGreaterY - 1\n    } else {\n        return x - yEven\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpt7u2p3ai/tmpt7u2p3ai.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd13c79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd13970b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd13970988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd1396f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt7u2p3ai                        0x000055911c7501bd <unavailable> + 4541

    5    libc.so.6                          0x00002abd13e65460 __libc_start_main +
    245

    6    tmpt7u2p3ai                        0x000055911c74fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979060
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var low: Int\n    var high:\
    \ Int\n    \n    if x < y {\n        low = x \n        high = y\n    } else {\n\
    \        low = y\n        high = x\n    }\n    \n    if low % 2 == 0 && high %\
    \ 2 == 0 {\n        \n        if low < high {\n            return low\n      \
    \  } else {\n            return high\n        }\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp4qjfssv3/tmp4qjfssv3.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81996bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81993b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81993b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81993b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4qjfssv3                        0x000055e024ff024d <unavailable> + 4685

    5    libc.so.6                          0x00002b81998ab460 __libc_start_main +
    245

    6    tmp4qjfssv3                        0x000055e024fefef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979060
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        let tmp\
    \ = x\n        x = y\n        y = tmp\n    }\n    for i in 0..<min(Int(y) - Int(x),\
    \ Int(x) - Int(y) + 1) {\n        if isEven(i) {\n            return i\n     \
    \   }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmptvk3iot_.swift:13:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = y\n        ^\n/tmp/tmptvk3iot_.swift:14:9: error: cannot\
    \ assign to value: 'y' is a 'let' constant\n        y = tmp\n        ^\n/tmp/tmptvk3iot_.swift:17:12:\
    \ error: cannot find 'isEven' in scope\n        if isEven(i) {\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659979060
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let mut v = x;\n    while\
    \ v < y && v & 1 != 0 {\n        v <<= 1;\n    }\n    if v > y {\n        return\
    \ -1;\n    }\n    return v;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp9foxyyh0.swift:11:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut v = x;\n\
    \            ^\n/tmp/tmp9foxyyh0.swift:11:13: note: join the identifiers together\n\
    \    let mut v = x;\n        ~~~~^\n        mutv\n/tmp/tmp9foxyyh0.swift:11:13:\
    \ note: join the identifiers together with camel-case\n    let mut v = x;\n  \
    \      ~~~~^\n        mutV\n/tmp/tmp9foxyyh0.swift:12:11: error: cannot find 'v'\
    \ in scope\n    while v < y && v & 1 != 0 {\n          ^\n/tmp/tmp9foxyyh0.swift:12:20:\
    \ error: cannot find 'v' in scope\n    while v < y && v & 1 != 0 {\n         \
    \          ^\n/tmp/tmp9foxyyh0.swift:13:9: error: cannot find 'v' in scope\n \
    \       v <<= 1;\n        ^\n/tmp/tmp9foxyyh0.swift:13:11: error: type of expression\
    \ is ambiguous without more context\n        v <<= 1;\n        ~~^~~~~\n/tmp/tmp9foxyyh0.swift:15:8:\
    \ error: cannot find 'v' in scope\n    if v > y {\n       ^\n/tmp/tmp9foxyyh0.swift:18:12:\
    \ error: cannot find 'v' in scope\n    return v;\n           ^\n"
  stdout: ''
  timestamp: 1659979060
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var min = x\n    var max =\
    \ y\n    var result = -1\n    \n    while min <= max {\n        if min % 2 ==\
    \ 0 && max % 2 == 1 {\n            result = min\n            break\n        }\n\
    \        \n        min = min * 2 + 1\n        max = max * 2 + 1\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp2o33mliy/tmp2o33mliy.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcab551c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcab248b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcab248988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcab2477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2o33mliy                        0x000055adbe0b124d <unavailable> + 4685

    5    libc.so.6                          0x00002adcab73d460 __libc_start_main +
    245

    6    tmp2o33mliy                        0x000055adbe0b0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979060
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    guard x > 0 && y > 0 else\
    \ {\n        print(\"error: choose_num called with invalid arguments\")\n    \
    \    return -1\n    }\n\n    if x <= y {\n        var x = Int(x)\n        var\
    \ y = Int(y)\n        while x < y {\n            if x % 2 == 0 {\n           \
    \     y -= 1\n            } else {\n                x += 1\n            }\n  \
    \      }\n        return y\n    } else {\n        var x = Int(x)\n        var\
    \ y = Int(y)\n        while x > y {\n            if x % 2 == 0 {\n           \
    \     x -= 1\n            } else {\n                y += 1\n            }\n  \
    \      }\n        return x\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpw31vp0j0/tmpw31vp0j0.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab718d00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7189f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7189f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7189f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw31vp0j0                        0x0000556e3b7a85fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab718eec460 __libc_start_main +
    245

    6    tmpw31vp0j0                        0x0000556e3b7a82a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979060
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        var temp\
    \ = x\n        x = y\n        y = temp\n    }\n\n    if x < y {\n        var temp\
    \ = x\n        x = y\n        y = temp\n    }\n\n    var max = 0\n    for num\
    \ in 0...y {\n        if x % 2 == 0 {\n            if num > max {\n          \
    \      max = num\n            }\n        } else {\n            if num >= max {\n\
    \                max = num\n            }\n        }\n        x /= 2\n    }\n\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpj4o7puxs.swift:13:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = y\n        ^\n/tmp/tmpj4o7puxs.swift:14:9: error: cannot\
    \ assign to value: 'y' is a 'let' constant\n        y = temp\n        ^\n/tmp/tmpj4o7puxs.swift:19:9:\
    \ error: cannot assign to value: 'x' is a 'let' constant\n        x = y\n    \
    \    ^\n/tmp/tmpj4o7puxs.swift:20:9: error: cannot assign to value: 'y' is a 'let'\
    \ constant\n        y = temp\n        ^\n/tmp/tmpj4o7puxs.swift:34:11: error:\
    \ left side of mutating operator isn't mutable: 'x' is a 'let' constant\n    \
    \    x /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979060
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var max_num = x\n    if y\
    \ > max_num {\n        max_num = y\n    }\n\n    for i in stride(from: x, to:\
    \ y, by: 2) {\n        if i % 2 == 0 {\n            return i\n        }\n    }\n\
    \n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpbv_eoy4f/tmpbv_eoy4f.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae56dfd8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae56dccfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae56dccf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae56dcce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbv_eoy4f                        0x000056286223e45d <unavailable> + 5213

    5    libc.so.6                          0x00002ae56e1c4460 __libc_start_main +
    245

    6    tmpbv_eoy4f                        0x000056286223e109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659979060
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x >= y {\n        return\
    \ -1\n    }\n    \n    var x_even: Int = x % 2 == 0\n    var y_even: Int = y %\
    \ 2 == 0\n    if x_even && y_even {\n        var max_even: Int = -1\n        var\
    \ x_even: Int\n        var y_even: Int\n        \n        while x_even || y_even\
    \ {\n            if x_even {\n                x_even = x // x is odd\n       \
    \         y_even = y // y is odd\n            } else {\n                x_even\
    \ = y // x is odd\n                y_even = x // y is odd\n            }\n   \
    \         if x_even > max_even {\n                max_even = x_even\n        \
    \    }\n            if y_even > max_even {\n                max_even = y_even\n\
    \            }\n        }\n        return max_even\n    }\n    \n    if x > y\
    \ {\n        return y\n    }\n    return x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpwk86iao8.swift:15:29: error: cannot convert value of type 'Bool'\
    \ to specified type 'Int'\n    var x_even: Int = x % 2 == 0\n                \
    \      ~~~~~~^~~~\n/tmp/tmpwk86iao8.swift:16:29: error: cannot convert value of\
    \ type 'Bool' to specified type 'Int'\n    var y_even: Int = y % 2 == 0\n    \
    \                  ~~~~~~^~~~\n/tmp/tmpwk86iao8.swift:17:8: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n    if x_even && y_even\
    \ {\n       ^\n       (      != 0)\n/tmp/tmpwk86iao8.swift:17:18: error: type\
    \ 'Int' cannot be used as a boolean; test for '!= 0' instead\n    if x_even &&\
    \ y_even {\n                 ^\n                 (      != 0)\n/tmp/tmpwk86iao8.swift:22:15:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \     while x_even || y_even {\n              ^\n              (      != 0)\n\
    /tmp/tmpwk86iao8.swift:22:25: error: type 'Int' cannot be used as a boolean; test\
    \ for '!= 0' instead\n        while x_even || y_even {\n                     \
    \   ^\n                        (      != 0)\n/tmp/tmpwk86iao8.swift:23:16: error:\
    \ type 'Int' cannot be used as a boolean; test for '!= 0' instead\n          \
    \  if x_even {\n               ^\n               (      != 0)\n"
  stdout: ''
  timestamp: 1659979060
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    switch {\n    case x <= y\
    \ && x >= 0 && (x - y) % 2 == 0 :\n        return x // Found a number\n    case\
    \ x > y :\n        return -1\n    default:\n        return -1 // No number in\
    \ range\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmperfeq_8m.swift:11:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n"
  stdout: ''
  timestamp: 1659979060
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x >= y || x < 0 {\n   \
    \     return -1\n    }\n    \n    if y == x {\n        return 0\n    }\n\n   \
    \ func choose(first: Int, second: Int) -> (Int, Int) {\n        if second < first\
    \ {\n            return (first, second)\n        }\n        return (second, first)\n\
    \    }\n\n    var first = choose_num(x - 1, y)\n    if first == -1 { return -1\
    \ }\n\n    var second = choose_num(x, y - 1)\n    if second == -1 { return -1\
    \ }\n\n    if second < first { return -1 }\n\n    return (first! + second!) /\
    \ 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp7rxo_jbw.swift:26:27: error: missing argument labels 'x:y:' in\
    \ call\n    var first = choose_num(x - 1, y)\n                          ^\n  \
    \                         x:     y: \n/tmp/tmp7rxo_jbw.swift:29:28: error: missing\
    \ argument labels 'x:y:' in call\n    var second = choose_num(x, y - 1)\n    \
    \                       ^\n                            x: y: \n"
  stdout: ''
  timestamp: 1659979060
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var num = y\n    for y in\
    \ 0..<x {\n        if num % 2 != 0 {\n            break\n        }\n        num\
    \ += y\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp924g7m71/tmp924g7m71.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fa7af8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fa77efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fa77ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fa77ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp924g7m71                        0x000055a46ed5833d <unavailable> + 4925

    5    libc.so.6                          0x00002b7fa7ce4460 __libc_start_main +
    245

    6    tmp924g7m71                        0x000055a46ed57fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979060
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n  \n  // x cannot be larger than\
    \ y\n  if x < y { return -1\n  }\n  \n  // x cannot be smaller than y\n  if x\
    \ > y { return -1\n  }\n  \n  // x must be in the range [y, y]\n  if x <= y {\
    \ return x\n  }\n  \n  // x must be in the range [0, y-1]\n  if x < 0 { return\
    \ -1\n  }\n  \n  // x must be in the range [0, y-1]\n  if x > y { return -1\n\
    \  }\n  \n  // x must be in the range [y, y-1]\n  for i in 0..<y {\n    if x%i\
    \ == 0 {\n      return -1\n    }\n  }\n  \n  return x // x is even\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmprokfzrzw/tmprokfzrzw.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b903a237c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9039f2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9039f2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9039f2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprokfzrzw                        0x00005618d420933d <unavailable> + 4925

    5    libc.so.6                          0x00002b903a423460 __libc_start_main +
    245

    6    tmprokfzrzw                        0x00005618d4208fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979060
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n\
    \    var result: Int = 0\n    var x: Int = 0\n    while x <= y {\n        x =\
    \ x * 2\n        if x % 2 == 0 {\n            result = x\n        }\n    }\n \
    \   if x > y {\n        return result\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpbl9nbnn0.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659979060
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let even = x % 2 == 0 && y\
    \ % 2 == 0\n    let odd = x % 2 != 0 && y % 2 != 0\n\n    if even {\n        if\
    \ odd { return -1}\n        return y\n    } else if odd {\n        return -1\n\
    \    }\n    return x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphe9bx6ku/tmphe9bx6ku.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a2ef45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a2ec3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a2ec3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a2ec3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphe9bx6ku                        0x000055bca469a24d <unavailable> + 4685

    5    libc.so.6                          0x00002b1a2f131460 __libc_start_main +
    245

    6    tmphe9bx6ku                        0x000055bca4699ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979060
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x == y {\n        return\
    \ x\n    }\n    if x > y {\n        return choose_num(y, x)\n    }\n    if x ==\
    \ 0 {\n        return -1\n    }\n    if y % 2 == 0 {\n        return y\n    }\n\
    \    let m = (y + x) / 2\n    if m % 2 == 0 {\n        return m\n    } else {\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpft2w8llr.swift:15:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659979060
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var largest = Int()\n    if\
    \ x > y {\n        largest = y\n    } else {\n        largest = x\n    }\n   \
    \ for num in 1...largest-1 {\n        if is_even(Int64(num)) {\n            if\
    \ x == y {\n                return num\n            } else {\n               \
    \ largest = num\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpyg8wuu09.swift:18:12: error: cannot find 'is_even' in scope\n \
    \       if is_even(Int64(num)) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979060
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var even: Int?\n\n    for\
    \ i in 1..<y {\n        if let v = i {\n            if v % 2 == 0 {\n        \
    \        if let p = v.truncatingRemainder(dividingBy: 2) {\n                 \
    \   if !even?.truncatingRemainder(dividingBy: 2)?.truncatingRemainder(dividingBy:\
    \ 2) ?? 0 {\n                        if v > p && (v > x - y) || v < x && (v <\
    \ y - y) {\n                            even = v\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n\n\
    \    guard even != nil else { return -1 }\n\n    return even!\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpy6bqdknb.swift:16:30: error: value of type 'Int' has no member\
    \ 'truncatingRemainder'\n                if let p = v.truncatingRemainder(dividingBy:\
    \ 2) {\n                           ~ ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpy6bqdknb.swift:17:67:\
    \ error: value of optional type 'Bool?' must be unwrapped to a value of type 'Bool'\n\
    \                    if !even?.truncatingRemainder(dividingBy: 2)?.truncatingRemainder(dividingBy:\
    \ 2) ?? 0 {\n                                                                \
    \  ^\n/tmp/tmpy6bqdknb.swift:17:67: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n                    if !even?.truncatingRemainder(dividingBy:\
    \ 2)?.truncatingRemainder(dividingBy: 2) ?? 0 {\n                            \
    \                                      ^\n                        (          \
    \                                                                  ?? <#default\
    \ value#>)\n/tmp/tmpy6bqdknb.swift:17:67: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n                    if !even?.truncatingRemainder(dividingBy:\
    \ 2)?.truncatingRemainder(dividingBy: 2) ?? 0 {\n                            \
    \                                      ^\n                        (          \
    \                                                                 )!\n/tmp/tmpy6bqdknb.swift:17:31:\
    \ error: value of type 'Int' has no member 'truncatingRemainder'\n           \
    \         if !even?.truncatingRemainder(dividingBy: 2)?.truncatingRemainder(dividingBy:\
    \ 2) ?? 0 {\n                        ~~~~~ ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpy6bqdknb.swift:17:105:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \                 if !even?.truncatingRemainder(dividingBy: 2)?.truncatingRemainder(dividingBy:\
    \ 2) ?? 0 {\n                                                                \
    \                                        ^\n                                 \
    \                                                                       ( != 0)\n\
    /tmp/tmpy6bqdknb.swift:14:12: error: initializer for conditional"
  stdout: ''
  timestamp: 1659979060
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n  if x > y { return -1 }\n  var\
    \ result = -1\n  for n in 0..<(x - y + 1) {\n    result += 2 * n\n    if result\
    \ > y {\n      return result\n    }\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b65ac62fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65ac326561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65ac326286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65ac32613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65ac325bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpg0jukv9y                        0x000055dea10b0835 <unavailable> + 6197

    6    tmpg0jukv9y                        0x000055dea10b02d0 <unavailable> + 4816

    7    libc.so.6                          0x00002b65ac81b460 __libc_start_main +
    245

    8    tmpg0jukv9y                        0x000055dea10affe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979060
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\t\n\t// If there's no such number\n\
    \tif x < y {\n\t\treturn -1\n\t} else if x == y {\n\t\treturn x\n\t} else if x\
    \ == 0 || y == 0 {\n\t\treturn 0\n\t} else {\n\t\t\n\t\tvar a : Int = 0\n\t\t\n\
    \t\tfor _ in 0 ..< y {\n\t\t\ta += 1\n\t\t}\n\t\t\n\t\tfor _ in 0 ..< x {\n\t\t\
    \ta -= 1\n\t\t}\n\t\t\n\t\treturn a\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp4x_gprix/tmp4x_gprix.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d9287c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d8f7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d8f7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d8f7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4x_gprix                        0x0000562107dff33d <unavailable> + 4925

    5    libc.so.6                          0x00002b92d9473460 __libc_start_main +
    245

    6    tmp4x_gprix                        0x0000562107dfefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979060
- exit_code: -1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    assert(x >= 0, \"x should\
    \ be non-negative\")\n    assert(y >= 0, \"y should be non-negative\")\n    \n\
    \    var result = -1\n    \n    if x <= 0 {\n        result = y\n    } else {\n\
    \        result = x\n    }\n    \n    let max_num = x + y - 1\n    if max_num\
    \ / 2 != max_num {\n        var num_start = max_num / 2\n        var num_end =\
    \ max_num / 2 + 1\n        while num_start <= num_end {\n            if num_start\
    \ % 2 == 0 && num_end % 2 == 0 {\n                if num_start > num_end {\n \
    \                   num_start -= 1\n                }\n                if num_end\
    \ > num_start {\n                    num_end -= 1\n                }\n       \
    \         let left_num_start = 2 * num_start + 1\n                let right_num_end\
    \ = 2 * num_end + 1\n                if left_num_start <= right_num_end {\n  \
    \                  if left_num_start > right_num_end {\n                     \
    \   num_start += 2\n                    } else {\n                        num_end\
    \ += 2\n                    }\n                }\n            }\n            num_start\
    \ += 1\n            num_end += 1\n        }\n        \n        if num_start ==\
    \ num_end {\n            result = num_start\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979066
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x == y {\n        return\
    \ -1\n    }\n    if x > y {\n        let temp = x\n        x = y\n        y =\
    \ temp\n    }\n    for i in stride(from: x, to: y, by: 2) {\n        if x % i\
    \ == 0 && y % i == 0 {\n            return i\n        }\n    }\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpbxvhglux.swift:16:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = y\n        ^\n/tmp/tmpbxvhglux.swift:17:9: error: cannot\
    \ assign to value: 'y' is a 'let' constant\n        y = temp\n        ^\n"
  stdout: ''
  timestamp: 1659979060
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        if x\
    \ % 2 == 0 && y % 2 == 0 {\n            return x\n        }\n        return y\n\
    \    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpa02lju45/tmpa02lju45.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fce6dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fce3d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fce3d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fce3d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa02lju45                        0x0000555dba66124d <unavailable> + 4685

    5    libc.so.6                          0x00002b7fce8ca460 __libc_start_main +
    245

    6    tmpa02lju45                        0x0000555dba660ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var num: Int = 0\n\n    for\
    \ i in 0 ..< y.toInt()! {\n        if i < (x % 2) == 0 {\n            if i % 2\
    \ == 0 {\n                num = i\n                break\n            }\n    \
    \    } else {\n            if i == (x % 2) {\n                num = i\n      \
    \          break\n            }\n        }\n    }\n    return num\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp11qfdpnl.swift:13:22: error: value of type 'Int' has no member\
    \ 'toInt'\n    for i in 0 ..< y.toInt()! {\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979060
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n\n    var smallest: Int = x\n    var largest: Int =\
    \ y\n    var mid: Int\n\n    while smallest != largest {\n        mid = (smallest\
    \ + largest) / 2\n\n        if mid % 2 == 0 {\n            if mid < smallest {\n\
    \                smallest = mid\n            } else {\n                largest\
    \ = mid\n            }\n        } else {\n            if mid > largest {\n   \
    \             smallest = mid\n            } else {\n                largest =\
    \ mid\n            }\n        }\n    }\n\n    return smallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpljf1luf7.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659979060
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x >= y {\n        let x_even\
    \ = x - y % x\n        let x_odd = y - x_even\n        return x_even + x_odd\n\
    \    }\n    if x <= y {\n        let x_even = x - y % x\n        let x_odd = x_even\
    \ - x\n        return x_even + x_odd\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp74rbxvud/tmp74rbxvud.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b849e3adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b849e0a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b849e0a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b849e0a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp74rbxvud                        0x0000563bd14c024d <unavailable> + 4685

    5    libc.so.6                          0x00002b849e599460 __libc_start_main +
    245

    6    tmp74rbxvud                        0x0000563bd14bfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return Int(ceil(sqrt(pow(x,\
    \ 2.0) + pow(y, 2.0))) / 2.0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpx2jjn4u3.swift:11:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sqrt(pow(x, 2.0) + pow(y, 2.0))) / 2.0)\n               ^~~~\n/tmp/tmpx2jjn4u3.swift:11:21:\
    \ error: cannot find 'sqrt' in scope\n    return Int(ceil(sqrt(pow(x, 2.0) + pow(y,\
    \ 2.0))) / 2.0)\n                    ^~~~\n/tmp/tmpx2jjn4u3.swift:11:26: error:\
    \ cannot find 'pow' in scope\n    return Int(ceil(sqrt(pow(x, 2.0) + pow(y, 2.0)))\
    \ / 2.0)\n                         ^~~\n/tmp/tmpx2jjn4u3.swift:11:40: error: cannot\
    \ find 'pow' in scope\n    return Int(ceil(sqrt(pow(x, 2.0) + pow(y, 2.0))) /\
    \ 2.0)\n                                       ^~~\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    \n    var x: Int = x - 1;\n\
    \    var y: Int = y - 1;\n    \n    while y >= x {\n        let m: Int = x * y\
    \ + (x - y) - x;\n        if m % 2 == 0 { \n            x = x + 1; \n        }\
    \ else { \n            y = y - 1;\n        }\n    }\n    \n    return x;\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpewr78nkn/tmpewr78nkn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b665d76bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b665d462b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b665d462988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b665d4617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewr78nkn                        0x000056214f84724d <unavailable> + 4685

    5    libc.so.6                          0x00002b665d957460 __libc_start_main +
    245

    6    tmpewr78nkn                        0x000056214f846ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    } else if x < y {\n        return (x+y-1)/2\n    } else {\n        var\
    \ m = (x+y)/2\n        for n in 0 ..< y {\n            if n % 2 == 0 {\n     \
    \           m = m*n\n            }\n        }\n        return m\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp2hc6hcy2/tmp2hc6hcy2.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e17ae2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e177d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e177d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e177d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hc6hcy2                        0x000055bb7cf3033d <unavailable> + 4925

    5    libc.so.6                          0x00002b0e17cce460 __libc_start_main +
    245

    6    tmp2hc6hcy2                        0x000055bb7cf2ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let mut x = x.clamped_to(y:\
    \ y)\n    let mut y = y.clamped_to(y: x)\n    while x >= y {\n        let mut\
    \ j = x\n        x = y\n        y = j\n    }\n    x\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmprto6ayts.swift:11:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut x = x.clamped_to(y:\
    \ y)\n            ^\n/tmp/tmprto6ayts.swift:11:13: note: join the identifiers\
    \ together\n    let mut x = x.clamped_to(y: y)\n        ~~~~^\n        mutx\n\
    /tmp/tmprto6ayts.swift:11:13: note: join the identifiers together with camel-case\n\
    \    let mut x = x.clamped_to(y: y)\n        ~~~~^\n        mutX\n/tmp/tmprto6ayts.swift:12:13:\
    \ error: found an unexpected second identifier in constant declaration; is there\
    \ an accidental break?\n    let mut y = y.clamped_to(y: x)\n            ^\n/tmp/tmprto6ayts.swift:12:13:\
    \ note: join the identifiers together\n    let mut y = y.clamped_to(y: x)\n  \
    \      ~~~~^\n        muty\n/tmp/tmprto6ayts.swift:12:13: note: join the identifiers\
    \ together with camel-case\n    let mut y = y.clamped_to(y: x)\n        ~~~~^\n\
    \        mutY\n/tmp/tmprto6ayts.swift:14:17: error: found an unexpected second\
    \ identifier in constant declaration; is there an accidental break?\n        let\
    \ mut j = x\n                ^\n/tmp/tmprto6ayts.swift:14:17: note: join the identifiers\
    \ together\n        let mut j = x\n            ~~~~^\n            mutj\n/tmp/tmprto6ayts.swift:14:17:\
    \ note: join the identifiers together with camel-case\n        let mut j = x\n\
    \            ~~~~^\n            mutJ\n/tmp/tmprto6ayts.swift:11:19: error: value\
    \ of type 'Int' has no member 'clamped_to'\n    let mut x = x.clamped_to(y: y)\n\
    \                ~ ^~~~~~~~~~\n/tmp/tmprto6ayts.swift:12:19: error: value of type\
    \ 'Int' has no member 'clamped_to'\n    let mut y = y.clamped_to(y: x)\n     \
    \           ~ ^~~~~~~~~~\n/tmp/tmprto6ayts.swift:15:9: error: cannot assign to\
    \ value: 'x' is a 'let' constant\n        x = y\n        ^\n/tmp/tmprto6ayts.swift:16:13:\
    \ error: cannot find 'j' in scope\n        y = j\n            ^\n/tmp/tmprto6ayts.swift:16:9:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        y = j\n    \
    \    ^\n/tmp/tmprto6ayts.swift:18:5: warning: expression of type 'Int' is unused\n\
    \    x\n    ^\n"
  stdout: ''
  timestamp: 1659979060
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // use binary search\n   \
    \ let mid = Int(Double(x + y) / 2)\n    \n    if x == mid || y == mid {\n    \
    \    return mid\n    }\n    \n    guard x < mid else { return -1 }\n    \n   \
    \ guard x > y else { return -1 }\n    \n    if x == mid + 1 {\n        return\
    \ mid\n    }\n    \n    if y == mid + 1 {\n        return mid\n    }\n    \n \
    \   if x <= mid {\n        return choose_num(mid, y)\n    }\n    \n    if y <=\
    \ mid {\n        return choose_num(x, mid)\n    }\n    \n    return -1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp60pugpmu.swift:31:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(mid, y)\n                         ^\n      \
    \                    x:   y: \n/tmp/tmp60pugpmu.swift:35:26: error: missing argument\
    \ labels 'x:y:' in call\n        return choose_num(x, mid)\n                 \
    \        ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tif x > y {\n\t\treturn -1\n\t\
    }\n\n\tvar result = x\n\n\tfor {\n\t\tvar remainder = result % y\n\t\tif remainder\
    \ == 0 {\n\t\t\tbreak\n\t\t}\n\n\t\tresult = y\n\t\ty /= 2\n\t}\n\n\tif y == 0\
    \ {\n\t\tresult = 1\n\t}\n\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpuzi08gh1.swift:17:6: error: expected pattern\n        for {\n \
    \           ^\n/tmp/tmpuzi08gh1.swift:17:6: error: expected Sequence expression\
    \ for for-each loop\n        for {\n            ^\n"
  stdout: ''
  timestamp: 1659979060
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        let xMin\
    \ = y - 1\n        let xMax = x + 1\n        let yMin = xMin - 1\n        let\
    \ yMax = xMax + 1\n        if xMax < yMin {\n            return -1\n        }\n\
    \        return (xMin + xMax) / 2\n    } else if y < x {\n        let xMin = x\
    \ - 1\n        let xMax = x + 1\n        let yMin = xMin - 1\n        let yMax\
    \ = xMax + 1\n        if yMax < xMin {\n            return -1\n        }\n   \
    \     return (yMin + yMax) / 2\n    } else {\n        return x\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpdqvpdj0p/tmpdqvpdj0p.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade300d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade2fdc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade2fdc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade2fdc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdqvpdj0p                        0x00005565370ac24d <unavailable> + 4685

    5    libc.so.6                          0x00002ade302bc460 __libc_start_main +
    245

    6    tmpdqvpdj0p                        0x00005565370abef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    switch x {\n    case x < y:\n\
    \        return -1\n    default:\n        switch y {\n        case x < y:\n  \
    \          return -1\n        case x == y:\n            return x\n        default:\n\
    \            // x > y\n            return (x + (y - x)) / 2\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp4ixnovw_.swift:12:12: error: expression pattern of type 'Bool'\
    \ cannot match values of type 'Int'\n    case x < y:\n         ~~^~~\n/tmp/tmp4ixnovw_.swift:16:16:\
    \ error: expression pattern of type 'Bool' cannot match values of type 'Int'\n\
    \        case x < y:\n             ~~^~~\n/tmp/tmp4ixnovw_.swift:18:16: error:\
    \ expression pattern of type 'Bool' cannot match values of type 'Int'\n      \
    \  case x == y:\n             ~~^~~~\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ find_max_even_bigger_than(x, y)\n    }\n    return find_max_even_smaller_than(x,\
    \ y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpserbmmrl.swift:12:16: error: cannot find 'find_max_even_bigger_than'\
    \ in scope\n        return find_max_even_bigger_than(x, y)\n               ^~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpserbmmrl.swift:14:12: error: cannot find 'find_max_even_smaller_than'\
    \ in scope\n    return find_max_even_smaller_than(x, y)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var ans = -1\n    if x > y\
    \ {\n        ans = x\n        x, y = y, x\n    }\n    if x % 2 == 0 {\n      \
    \  ans = x / 2\n    }\n    if y == 0 {\n        return x\n    }\n    \n    //\
    \ Now x is even\n    \n    if x != 1 {\n        ans = ans / 2\n        \n    \
    \    // Now that x is even, y is odd\n        \n        if y % 2 == 1 {\n    \
    \        y = y + 1\n        } else {\n            y = (y + 1) / 2\n        }\n\
    \        \n        // Repeat until y is not even\n        \n    }\n    \n    return\
    \ ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpgoyousw4.swift:14:10: error: consecutive statements on a line must\
    \ be separated by ';'\n        x, y = y, x\n         ^\n         ;\n/tmp/tmpgoyousw4.swift:14:10:\
    \ error: expected expression\n        x, y = y, x\n         ^\n/tmp/tmpgoyousw4.swift:14:9:\
    \ warning: expression of type 'Int' is unused\n        x, y = y, x\n        ^\n\
    /tmp/tmpgoyousw4.swift:31:13: error: cannot assign to value: 'y' is a 'let' constant\n\
    \            y = y + 1\n            ^\n/tmp/tmpgoyousw4.swift:33:13: error: cannot\
    \ assign to value: 'y' is a 'let' constant\n            y = (y + 1) / 2\n    \
    \        ^\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // Your code here\n    var\
    \ x = x - 1\n    var y = y - 1\n    while x >= y {\n        if x % 2 == 0 {\n\
    \            x = x / 2\n        } else {\n            x = x * 3 + 1\n        }\n\
    \    }\n    while x < y {\n        if x % 2 == 0 {\n            x = x / 2\n  \
    \      } else {\n            x = x * 3 + 1\n        }\n    }\n    return x\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp2k9vgrtd/tmp2k9vgrtd.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a57b9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a57896b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a57896988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a578957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2k9vgrtd                        0x0000563a13a3b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b2a57d8b460 __libc_start_main +
    245

    6    tmp2k9vgrtd                        0x0000563a13a3aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        if x %\
    \ 2 == 0 {\n            return x\n        } else {\n            return y\n   \
    \     }\n    } else {\n        if y % 2 == 0 {\n            return y\n       \
    \ } else {\n            return x\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpm0w1_3tx/tmpm0w1_3tx.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7148ff3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7148ceab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7148cea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7148ce97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm0w1_3tx                        0x000056163eeef24d <unavailable> + 4685

    5    libc.so.6                          0x00002b71491df460 __libc_start_main +
    245

    6    tmpm0w1_3tx                        0x000056163eeeeef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return ((x + y) / 2) / 2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmplp8u0z2w/tmplp8u0z2w.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb5d4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb5d1efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb5d1ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb5d1ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplp8u0z2w                        0x0000559a89c9d24d <unavailable> + 4685

    5    libc.so.6                          0x00002abb5d6e4460 __libc_start_main +
    245

    6    tmplp8u0z2w                        0x0000559a89c9cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: -1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= 0 || y <= 0 { return\
    \ -1 }\n    var result = Int()\n    var low = Int(x)\n    var high = Int(y)\n\
    \    while (low < high) {\n        var mid = Int(low)\n        if mid % 2 != 0\
    \ {\n            mid = (mid + 1) * -1\n        }\n        if mid < high {\n  \
    \          low = mid\n        } else {\n            high = mid\n        }\n  \
    \      result = min(low, high, result)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979066
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    guard x > y else {\n     \
    \   return -1\n    }\n    \n    var min_num = Int(x)\n    if y == min_num {\n\
    \        return -1\n    }\n    \n    for num in stride(from: min_num, through:\
    \ y, by: 2) {\n        if num % 2 != 0 {\n            min_num = num\n        \
    \    break\n        }\n    }\n    \n    return min_num\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpcx1xn0re/tmpcx1xn0re.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac77ea94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac77e78bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac77e78b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac77e78a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcx1xn0re                        0x000055950768e5ad <unavailable> + 5549

    5    libc.so.6                          0x00002ac77ec80460 __libc_start_main +
    245

    6    tmpcx1xn0re                        0x000055950768e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        x, y =\
    \ y, x\n    }\n    var result = Int()\n    for _ in 0..<(x+y-1)/2 {\n        let\
    \ number = ((x + y) / 2) * 2 - 1\n        if number % 2 == 0 {\n            result\
    \ = number\n        }\n        y -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpvy85cgwp.swift:12:10: error: consecutive statements on a line must\
    \ be separated by ';'\n        x, y = y, x\n         ^\n         ;\n/tmp/tmpvy85cgwp.swift:12:10:\
    \ error: expected expression\n        x, y = y, x\n         ^\n/tmp/tmpvy85cgwp.swift:12:9:\
    \ warning: expression of type 'Int' is unused\n        x, y = y, x\n        ^\n\
    /tmp/tmpvy85cgwp.swift:20:11: error: left side of mutating operator isn't mutable:\
    \ 'y' is a 'let' constant\n        y -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        if x >\
    \ y {\n            return x\n        }\n        return y\n    }\n    if x == y\
    \ {\n        return -1\n    }\n    if x < y {\n        return -1\n    }\n    return\
    \ (x+y)/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmplo6fsrxk/tmplo6fsrxk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdc51fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdc4ef4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdc4ef4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdc4ef37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplo6fsrxk                        0x0000557ef2c7b24d <unavailable> + 4685

    5    libc.so.6                          0x00002afdc53e9460 __libc_start_main +
    245

    6    tmplo6fsrxk                        0x0000557ef2c7aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y)\
    \ = (y, x)\n    }\n    if x == y {\n        return -1\n    }\n    var result:\
    \ Int\n    if x % 2 == 0 && y % 2 == 0 {\n        result = (x + y) >> 1\n    }\
    \ else {\n        result = -1\n    }\n    while result > x {\n        result =\
    \ result >> 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpa88nqnl6.swift:12:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpa88nqnl6.swift:12:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var max_even = 0\n    \n \
    \   guard x >= 0 && x <= y else {\n        return -1\n    }\n    \n    for number\
    \ in stride(from: x, through: y, by: 2) {\n        if number % 2 == 0 {\n    \
    \        if number > max_even {\n                max_even = number\n         \
    \   }\n        }\n    }\n    \n    return max_even\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpdp348kin/tmpdp348kin.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15b54cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15b51c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15b51c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15b51c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdp348kin                        0x000055980923e57f <unavailable> + 5503

    5    libc.so.6                          0x00002b15b56b7460 __libc_start_main +
    245

    6    tmpdp348kin                        0x000055980923e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let limit = Int(pow(2, Int(log10(y))\
    \ - Int(log10(x)) + 1))\n    var result: Int = 0\n    \n    for _ in 1...limit\
    \ {\n        let even = pow(2, result)\n        if even <= x && even <= y {\n\
    \            result = result + 1\n        }\n    }\n    \n    if result == 0 {\n\
    \        return -1\n    } else {\n        return result\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpczpc90xm.swift:11:21: error: cannot find 'pow' in scope\n    let\
    \ limit = Int(pow(2, Int(log10(y)) - Int(log10(x)) + 1))\n                   \
    \ ^~~\n/tmp/tmpczpc90xm.swift:11:32: error: cannot find 'log10' in scope\n   \
    \ let limit = Int(pow(2, Int(log10(y)) - Int(log10(x)) + 1))\n               \
    \                ^~~~~\n/tmp/tmpczpc90xm.swift:11:48: error: cannot find 'log10'\
    \ in scope\n    let limit = Int(pow(2, Int(log10(y)) - Int(log10(x)) + 1))\n \
    \                                              ^~~~~\n/tmp/tmpczpc90xm.swift:15:20:\
    \ error: cannot find 'pow' in scope\n        let even = pow(2, result)\n     \
    \              ^~~\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var maxEven = Int64(y)\n \
    \   if x > y {\n        var temp = Int64(x)\n        temp = temp * -1\n      \
    \  maxEven = temp\n    }\n    var num = 1\n    for num in 1...Int(maxEven) {\n\
    \        if num % 2 == 0 && num > maxEven {\n            maxEven = num\n     \
    \   }\n    }\n    if maxEven != Int.max {\n        return maxEven\n    } else\
    \ {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpq5u0h2sm.swift:20:23: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n            maxEven = num\n                      ^~~\n    \
    \                  Int64( )\n/tmp/tmpq5u0h2sm.swift:24:16: error: cannot convert\
    \ return expression of type 'Int64' to return type 'Int'\n        return maxEven\n\
    \               ^~~~~~~\n               Int(   )\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var biggest\
    \ = 0\n    for num in 0..<((x - y)...) {\n        biggest = num\n        for num\
    \ in (x - 1)..<y {\n            if ((num & 1) == 0) {\n                if ((biggest\
    \ & 1) == 0) {\n                    biggest = biggest >> 1\n                }\n\
    \                else {\n                    if ((biggest & 1) == 1) {\n     \
    \                   biggest = (biggest >> 1) ^ num\n                    }\n  \
    \              }\n            }\n        }\n    }\n    if biggest > -1 {\n   \
    \     result = biggest\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpjjqjff54.swift:13:28: error: cannot convert value of type 'PartialRangeFrom<Int>'\
    \ to expected argument type 'Int'\n    for num in 0..<((x - y)...) {\n       \
    \                    ^\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tlet xLow = x & -x\n\tlet yLow\
    \ = y & -x\n\tif xLow == 0 || yLow == 0 {\n\t\treturn -1\n\t}\n\tlet xHigh = x\
    \ & y\n\tlet yHigh = y & x\n\tif xHigh == 0 {\n\t\treturn yLow\n\t}\n\treturn\
    \ xHigh\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmppodsfc3c/tmppodsfc3c.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b692e6c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b692e3b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b692e3b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b692e3b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppodsfc3c                        0x0000562d830581bd <unavailable> + 4541

    5    libc.so.6                          0x00002b692e8ae460 __libc_start_main +
    245

    6    tmppodsfc3c                        0x0000562d83057e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var i = x\n    var j = y\n\
    \    var max = 0\n\n    for _ in 1...y {\n        let z = min(i, j) + 2\n    \
    \    if z == i {\n            max = i\n        }\n\n        if z > i {\n     \
    \       max = z\n        }\n\n        if max > j {\n            break\n      \
    \  }\n\n        i = z\n        j += 1\n    }\n\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpvrdqgfwd/tmpvrdqgfwd.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5ec225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5ebf1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5ebf1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5ebf1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvrdqgfwd                        0x000055de76c593cd <unavailable> + 5069

    5    libc.so.6                          0x00002ad5ec411460 __libc_start_main +
    245

    6    tmpvrdqgfwd                        0x000055de76c59079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tlet upper = y + (y - x) / 2\n\
    \tif upper >= x {\n\t\treturn -1\n\t}\n\tvar result = x\n\tfor i = x + 1; i <\
    \ upper; i += 2 {\n\t\tif is_even(i) {\n\t\t\tif is_odd(i) {\n\t\t\t\treturn i\n\
    \t\t\t}\n\t\t} else {\n\t\t\tif is_even(i) {\n\t\t\t\treturn -1\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp5rs0qese.swift:16:2: error: C-style for statement has been removed\
    \ in Swift 3\n        for i = x + 1; i < upper; i += 2 {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    for n in 0..<x {\n        if n&1 == 0 {\n     \
    \       return n\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmxg1ycnf.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    \n    // x = y\n    if x == y {\n        return\
    \ 0\n    }\n    \n    // x is even\n    if x % 2 == 0 {\n        return x + y\n\
    \    }\n    \n    // y is even\n    if y % 2 == 0 {\n        return x + y\n  \
    \  }\n    \n    // x is odd and y is odd\n    return x + y\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmppg2jk8m2.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    \n    if x < y {\n       \
    \ return -1\n    }\n    var biggestEvenNum = y\n    var firstNum = x + (y / 2)\n\
    \    while firstNum <= y && biggestEvenNum > firstNum {\n        biggestEvenNum\
    \ = biggestEvenNum + firstNum\n        firstNum = firstNum + y\n    }\n    return\
    \ biggestEvenNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp6jc8x7p4/tmp6jc8x7p4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e082bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e07fb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e07fb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e07fb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6jc8x7p4                        0x000055ce81c8b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b2e084ab460 __libc_start_main +
    245

    6    tmp6jc8x7p4                        0x000055ce81c8aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    guard x > 0 && y > 0 else\
    \ {\n        return -1\n    }\n\n    var result = x\n    var diff = y - x\n  \
    \  \n    if diff > 0 {\n        result = x + diff\n    }\n    \n    while result\
    \ > y {\n        result -= 2\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpi9avk5u1/tmpi9avk5u1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e708efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e705e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e705e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e705e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9avk5u1                        0x0000561a899ac1bd <unavailable> + 4541

    5    libc.so.6                          0x00002b8e70adb460 __libc_start_main +
    245

    6    tmpi9avk5u1                        0x0000561a899abe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    func is_even(_ n: Int) ->\
    \ Bool {\n        return n % 2 == 0\n    }\n    var result: Int = 0\n    for i\
    \ in 0..<(y-x+1) {\n        if !is_even(i) {\n            continue\n        }\n\
    \        if ((i + x) % 2) == 0 {\n            result = max(result, i)\n      \
    \  }\n    }\n    if result == -1 {\n        return -1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpvg2osy9u/tmpvg2osy9u.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7825745c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b782543cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b782543c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b782543b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvg2osy9u                        0x00005651d8ef93cd <unavailable> + 5069

    5    libc.so.6                          0x00002b7825931460 __libc_start_main +
    245

    6    tmpvg2osy9u                        0x00005651d8ef9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var sum = 0\n    \n    if\
    \ x == y {\n        return -1\n    }\n\n    while x > 0 {\n        sum += x %\
    \ 2\n        x /= 2\n    }\n    while y > 0 {\n        sum += y % 2\n        y\
    \ /= 2\n    }\n    \n    if sum >= 2 {\n        sum += 2\n    }\n\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp5w56dncr.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n        x /= 2\n        ~ ^\n/tmp/tmp5w56dncr.swift:23:11:\
    \ error: left side of mutating operator isn't mutable: 'y' is a 'let' constant\n\
    \        y /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var min = x\n    if y > x\
    \ {\n        min = y\n    }\n    var max = x\n    if min > y {\n        max =\
    \ y\n    }\n    while min <= max {\n        if min % 2 == 0 {\n            min\
    \ = min + 1\n        } else {\n            if max % 2 == 0 {\n               \
    \ max = max + 1\n            } else {\n                min = min + 1\n       \
    \         max = max + 1\n            }\n        }\n    }\n    if min > y {\n \
    \       max = y\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp6dmicwq2/tmp6dmicwq2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1663bfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16638f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16638f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16638f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6dmicwq2                        0x0000555e7bc1a24d <unavailable> + 4685

    5    libc.so.6                          0x00002b1663de8460 __libc_start_main +
    245

    6    tmp6dmicwq2                        0x0000555e7bc19ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tif x < y {\n\t\tif x == 0 {\n\
    \t\t\treturn y\n\t\t}\n\t\treturn choose_num(x, y - 1)\n\t}\n\tif y == 0 {\n\t\
    \treturn x\n\t}\n\treturn choose_num(x - 1, y)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpq49gfhe3.swift:15:20: error: missing argument labels 'x:y:' in\
    \ call\n                return choose_num(x, y - 1)\n                        \
    \         ^\n                                  x: y: \n/tmp/tmpq49gfhe3.swift:20:19:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x -\
    \ 1, y)\n                         ^\n                          x:     y: \n"
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    guard x < y else { return\
    \ -1 }\n    var evenMax = x\n    var oddMax = y\n    while evenMax != 0 && oddMax\
    \ != 0 {\n        guard evenMax % 2 == 0 && oddMax % 2 == 1 else {\n         \
    \   return evenMax\n        }\n        evenMax /= 2\n        oddMax /= 2\n   \
    \ }\n    return evenMax\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp4i91w1sg/tmp4i91w1sg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b215dbaac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b215d8a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b215d8a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b215d8a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4i91w1sg                        0x0000563e3c66124d <unavailable> + 4685

    5    libc.so.6                          0x00002b215dd96460 __libc_start_main +
    245

    6    tmp4i91w1sg                        0x0000563e3c660ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tif x > y {\n\t\tvar temp = x\n\
    \t\tx = y\n\t\ty = temp\n\t}\n\tvar result: Int\n\tif x % 2 == 0 && y % 2 == 0\
    \ {\n\t\tresult = x - y + 1\n\t} else if x % 2 == 0 {\n\t\tresult = x\n\t} else\
    \ if y % 2 == 0 {\n\t\tresult = y\n\t} else {\n\t\tresult = -1\n\t}\n\treturn\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpcd2y8l2z.swift:13:3: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n                x = y\n                ^\n/tmp/tmpcd2y8l2z.swift:14:3:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n                y =\
    \ temp\n                ^\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return (x - y) / 2 + y\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpe_md37ov/tmpe_md37ov.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade1de4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade1db41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade1db41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade1db407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe_md37ov                        0x000055ee6e5382cd <unavailable> + 4813

    5    libc.so.6                          0x00002ade1e036460 __libc_start_main +
    245

    6    tmpe_md37ov                        0x000055ee6e537ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        let mid\
    \ = x + Int(y/2)\n        if isEven(mid) {\n            return mid\n        }\n\
    \        else {\n            if mid > x {\n                return -1\n       \
    \     }\n            else {\n                return choose_num(x, mid)\n     \
    \       }\n        }\n    }\n    else {\n        let mid = y + Int(x/2)\n    \
    \    if isEven(mid) {\n            return mid\n        }\n        else {\n   \
    \         if mid > y {\n                return -1\n            }\n           \
    \ else {\n                return choose_num(mid , y)\n            }\n        }\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpamvets7z.swift:13:12: error: cannot find 'isEven' in scope\n  \
    \      if isEven(mid) {\n           ^~~~~~\n/tmp/tmpamvets7z.swift:21:34: error:\
    \ missing argument labels 'x:y:' in call\n                return choose_num(x,\
    \ mid)\n                                 ^\n                                 \
    \ x: y: \n/tmp/tmpamvets7z.swift:27:12: error: cannot find 'isEven' in scope\n\
    \        if isEven(mid) {\n           ^~~~~~\n/tmp/tmpamvets7z.swift:35:34: error:\
    \ missing argument labels 'x:y:' in call\n                return choose_num(mid\
    \ , y)\n                                 ^\n                                 \
    \ x:    y: \n"
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var answer = -1\n    var smaller_one\
    \ = UInt32(x)\n    var larger_one = UInt32(y)\n    var remainder = UInt32(1)\n\
    \    var temp: UInt32\n\n    while smaller != larger_one {\n        if smaller\
    \ > larger_one {\n            smaller_one += remainder\n            temp -= remainder\n\
    \            smaller = smaller_one\n            remainder = temp\n        } else\
    \ {\n            larger_one += remainder\n            temp -= remainder\n    \
    \        larger_one = larger_one\n            remainder = temp\n        }\n\n\
    \        if smaller_one % 2 == 0 && larger_one % 2 == 0 {\n            if smaller_one\
    \ < larger_one {\n                answer = smaller_one\n            } else {\n\
    \                answer = larger_one\n            }\n            break\n     \
    \   }\n\n        if smaller_one % 2 == 0 && larger_one % 2 != 0 {\n          \
    \  larger_one -= 1\n            smaller_one -= 1\n        } else if smaller_one\
    \ % 2 != 0 && larger_one % 2 == 0 {\n            smaller_one -= 1\n        } else\
    \ if smaller_one % 2 != 0 && larger_one % 2 != 0 {\n            smaller_one -=\
    \ 1\n            larger_one -= 1\n        }\n    }\n\n    return answer\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmptngfr89a.swift:17:11: error: cannot find 'smaller' in scope\n \
    \   while smaller != larger_one {\n          ^~~~~~~\n/tmp/tmptngfr89a.swift:18:12:\
    \ error: cannot find 'smaller' in scope\n        if smaller > larger_one {\n \
    \          ^~~~~~~\n/tmp/tmptngfr89a.swift:21:13: error: cannot find 'smaller'\
    \ in scope\n            smaller = smaller_one\n            ^~~~~~~\n/tmp/tmptngfr89a.swift:26:24:\
    \ error: assigning a variable to itself\n            larger_one = larger_one\n\
    \            ~~~~~~~~~~ ^ ~~~~~~~~~~\n/tmp/tmptngfr89a.swift:32:26: error: cannot\
    \ assign value of type 'UInt32' to type 'Int'\n                answer = smaller_one\n\
    \                         ^~~~~~~~~~~\n                         Int(       )\n\
    /tmp/tmptngfr89a.swift:34:26: error: cannot assign value of type 'UInt32' to type\
    \ 'Int'\n                answer = larger_one\n                         ^~~~~~~~~~\n\
    \                         Int(      )\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        var z\
    \ = x\n        var w = y\n    } else {\n        var z = y\n        var w = x\n\
    \    }\n\n    for z != w {\n        if z%2 == 0 && w % 2 == 0 {\n            return\
    \ z\n        }\n        w += z\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp8zw_m350.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for z != w {\n          ^\n/tmp/tmp8zw_m350.swift:19:11: error: unary operator\
    \ cannot be separated from its operand\n    for z != w {\n          ^ ~\n    \
    \        \n/tmp/tmp8zw_m350.swift:19:11: error: '!=' is not a prefix unary operator\n\
    \    for z != w {\n          ^\n/tmp/tmp8zw_m350.swift:19:14: error: cannot find\
    \ 'w' in scope\n    for z != w {\n             ^\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        if x %\
    \ 2 == 0 && y % 2 == 0 {\n            return x\n        } else {\n           \
    \ return y\n        }\n    } else {\n        if x % 2 == 0 && y % 2 == 1 {\n \
    \           return x\n        } else {\n            return y\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmph6e716qu/tmph6e716qu.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ce750dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ce7204b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ce7204988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ce72037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6e716qu                        0x00005639641af24d <unavailable> + 4685

    5    libc.so.6                          0x00002b3ce76f9460 __libc_start_main +
    245

    6    tmph6e716qu                        0x00005639641aeef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tif x < y {\n\t\treturn -1\n\t\
    }\n\t\n\t// TODO: use binary search on sorted array\n\t\n\t// find the greatest\
    \ odd number between x and y\n\t\n\treturn -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpzr8y_2e2/tmpzr8y_2e2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96f995ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96f9655b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96f9655988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96f96547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzr8y_2e2                        0x000055e8e8b131bd <unavailable> + 4541

    5    libc.so.6                          0x00002b96f9b4a460 __libc_start_main +
    245

    6    tmpzr8y_2e2                        0x000055e8e8b12e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    \n    let limit = min(max(x,\
    \ y), max(x, y)+1)\n    let start = 2\n    var x = start\n    while x >= limit\
    \ {\n        let remainder = x % 2\n        if remainder == 0 {\n            if\
    \ x == start {\n                return -1\n            } else {\n            \
    \    return x\n            }\n        }\n        x = (x * 3) + 1\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp8mbks93f/tmp8mbks93f.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04c47b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04c44a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04c44a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04c44a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8mbks93f                        0x00005572db3da33d <unavailable> + 4925

    5    libc.so.6                          0x00002b04c499d460 __libc_start_main +
    245

    6    tmp8mbks93f                        0x00005572db3d9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n  if y > x {\n    return -1\n\
    \  }\n\n  var num: Int = 0\n  while num < x || num > y {\n    if num > y {\n \
    \     num += y % num\n    } else {\n      num += x % num\n    }\n  }\n\n  return\
    \ num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpzx2rkjpt/tmpzx2rkjpt.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57cf727c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57cf41eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57cf41e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57cf41d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzx2rkjpt                        0x000056006186e24d <unavailable> + 4685

    5    libc.so.6                          0x00002b57cf913460 __libc_start_main +
    245

    6    tmpzx2rkjpt                        0x000056006186def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let xMax = x + (y - x + 1)\
    \ % 2\n    if x == xMax {\n        return xMax\n    }\n    return -1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmplkbd0vsc/tmplkbd0vsc.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b331810cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3317e03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3317e03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3317e027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplkbd0vsc                        0x0000561709eb924d <unavailable> + 4685

    5    libc.so.6                          0x00002b33182f8460 __libc_start_main +
    245

    6    tmplkbd0vsc                        0x0000561709eb8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for _\
    \ in 0..<5 {\n        if x <= result && y <= result {\n            return -1\n\
    \        }\n        if y > result {\n            if x % 2 == 0 {\n           \
    \     return result // even number\n            }\n            if x % 2 == 1 {\n\
    \                return y // odd number\n            }\n            return -1\n\
    \        }\n        if x > result {\n            if x % 2 == 1 {\n           \
    \     return result // even number\n            }\n            if x % 2 == 0 {\n\
    \                return y // odd number\n            }\n            return -1\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpjzxcsd8l/tmpjzxcsd8l.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cd434cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cd4043b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cd4043988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cd40427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjzxcsd8l                        0x000055f68d31a33d <unavailable> + 4925

    5    libc.so.6                          0x00002b9cd4538460 __libc_start_main +
    245

    6    tmpjzxcsd8l                        0x000055f68d319fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var even = false\n    var\
    \ min = 0\n    var max = x - 1\n    var sum = 0\n    while min <= max {\n    \
    \    sum += (min + max) / 2\n        if even {\n            if sum >= y {\n  \
    \              return sum\n            } else if sum < y {\n                even\
    \ = false\n                max = min + 1\n            } else {\n             \
    \   even = true\n                min = max + 1\n            }\n        } else\
    \ {\n            if sum >= y {\n                return sum\n            } else\
    \ if sum < y {\n                even = true\n                min = max + 1\n \
    \           } else {\n                even = false\n                max = min\
    \ + 1\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpv7dp2344/tmpv7dp2344.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab063749c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab063440b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab063440988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab06343f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv7dp2344                        0x0000560556c9924d <unavailable> + 4685

    5    libc.so.6                          0x00002ab063935460 __libc_start_main +
    245

    6    tmpv7dp2344                        0x0000560556c98ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    \n    // We use the fact that x and y are both positive.\n  \
    \  let remainder = x % y\n    if remainder == 0 {\n        return y\n    } else\
    \ {\n        return y\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpenq078xy/tmpenq078xy.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab79e2e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab79dfdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab79dfdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab79dfde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpenq078xy                        0x000056475f56624d <unavailable> + 4685

    5    libc.so.6                          0x00002ab79e4d4460 __libc_start_main +
    245

    6    tmpenq078xy                        0x000056475f565ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let xEven = x % 2 == 0\n \
    \   let yEven = y % 2 == 0\n    \n    if xEven && !yEven {\n        return x \n\
    \    } else if yEven && !xEven {\n        return y\n    } else {\n        if x\
    \ <= y {\n            \n            // x is smaller than y\n            let xDiv\
    \ = x / (2 * 2)\n            let yDiv = y / (2 * 2)\n            \n          \
    \  \n            // x is even and y is even\n            if xDiv * yDiv == x {\n\
    \                return x\n            } else if yDiv * xDiv == x {\n        \
    \        return y\n            } else {\n                return x \n         \
    \   }\n            \n        } else {\n            \n            // x is larger\
    \ than y\n            let xDiv = x / (2 * 2)\n            let yDiv = y / (2 *\
    \ 2)\n            \n            \n            // y is even and x is even\n   \
    \         if xDiv * yDiv == x {\n                return y\n            } else\
    \ if yDiv * xDiv == x {\n                return x\n            } else {\n    \
    \            return y\n            }\n            \n        }\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpb4e3tdyv/tmpb4e3tdyv.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b150e2a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b150df99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b150df99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b150df987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4e3tdyv                        0x0000556da1c5524d <unavailable> + 4685

    5    libc.so.6                          0x00002b150e48e460 __libc_start_main +
    245

    6    tmpb4e3tdyv                        0x0000556da1c54ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    guard x > 0 else {\n     \
    \   return -1\n    }\n    guard y > 0 else {\n        return -1\n    }\n    let\
    \ mid = Int(round(x / 2))\n    if mid == x {\n        return -1\n    } else if\
    \ mid == y {\n        return mid\n    } else if mid * 2 > x && y != 0 {\n    \
    \    return choose_num(mid, y - 1)\n    } else if mid * 2 < x && y != 0 {\n  \
    \      return choose_num(mid, y + 1)\n    } else {\n        return mid\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpa8b7p42n.swift:17:19: error: cannot find 'round' in scope\n   \
    \ let mid = Int(round(x / 2))\n                  ^~~~~\n/tmp/tmpa8b7p42n.swift:23:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(mid,\
    \ y - 1)\n                         ^\n                          x:   y: \n/tmp/tmpa8b7p42n.swift:25:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(mid,\
    \ y + 1)\n                         ^\n                          x:   y: \n"
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var even = x / 2\n    if x\
    \ % 2 == 0 {\n        even += y\n    }\n\n    var result: Int\n    if even > y\
    \ {\n        result = even\n    } else {\n        result = y\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmplizz5puo/tmplizz5puo.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf71e7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf71b71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf71b71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf71b707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplizz5puo                        0x000055d1e064c24d <unavailable> + 4685

    5    libc.so.6                          0x00002aaf72066460 __libc_start_main +
    245

    6    tmplizz5puo                        0x000055d1e064bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return (x < y ? x : y) - x\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpt621lsgr/tmpt621lsgr.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b309811ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3097e15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3097e15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3097e147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt621lsgr                        0x000056232e0ed1bd <unavailable> + 4541

    5    libc.so.6                          0x00002b309830a460 __libc_start_main +
    245

    6    tmpt621lsgr                        0x000056232e0ece69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x >= y {\n        return\
    \ -1\n    }\n    var biggest = y\n    for num in stride(from: x, through: y, by:\
    \ 2) {\n        if num%2 != 0 && num > biggest%2 {\n            biggest = num\n\
    \        }\n    }\n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpsifq0irg/tmpsifq0irg.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6384660c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6384357b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6384357988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63843567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsifq0irg                        0x000055b146d9947d <unavailable> + 5245

    5    libc.so.6                          0x00002b638484c460 __libc_start_main +
    245

    6    tmpsifq0irg                        0x000055b146d99129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let result = Int(ceil(Double(x)\
    \ / Double(y)))\n    let lastY = Int(ceil(Double(y) / Double(x)))\n    if result\
    \ == lastY {\n        return -1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpridiieir.swift:11:22: error: cannot find 'ceil' in scope\n    let\
    \ result = Int(ceil(Double(x) / Double(y)))\n                     ^~~~\n/tmp/tmpridiieir.swift:12:21:\
    \ error: cannot find 'ceil' in scope\n    let lastY = Int(ceil(Double(y) / Double(x)))\n\
    \                    ^~~~\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        let temp\
    \ = x\n        x = y\n        y = temp\n    }\n    \n    var max_num = -1\n  \
    \  \n    var x_remainder = x\n    var y_remainder = y\n    \n    while x_remainder\
    \ >= y_remainder {\n        \n        let divisor = x_remainder % y_remainder\n\
    \        \n        if divisor == 0 {\n            \n            max_num = x_remainder\
    \ + y_remainder\n            break\n        }\n        \n        if divisor >\
    \ 0 {\n            \n            x_remainder = x_remainder / divisor\n       \
    \ }\n        else {\n            \n            y_remainder = y_remainder / divisor\n\
    \        }\n    }\n    \n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpiacylyrs.swift:13:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = y\n        ^\n/tmp/tmpiacylyrs.swift:14:9: error: cannot\
    \ assign to value: 'y' is a 'let' constant\n        y = temp\n        ^\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // 1. Find all the even numbers\
    \ between x and y inclusive\n    let evensX = findEvens(x: x, y: y)\n    let evensY\
    \ = findEvens(x: y, y: x)\n\n    // 2. Find the biggest even number among these\
    \ two\n    return max(evensX, evensY) \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpq1cerivt.swift:12:18: error: cannot find 'findEvens' in scope\n\
    \    let evensX = findEvens(x: x, y: y)\n                 ^~~~~~~~~\n/tmp/tmpq1cerivt.swift:13:18:\
    \ error: cannot find 'findEvens' in scope\n    let evensY = findEvens(x: y, y:\
    \ x)\n                 ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        swap(x,\
    \ y)\n    }\n    var max_even = -1\n    for d in 2 ... x {\n        if (x % d\
    \ == 0) && (y % d == 0) {\n            let max_even = Int(x / d)\n           \
    \ if max_even > max_even {\n                max_even = max_even\n            }\n\
    \        }\n    }\n    return max_even\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpdx5ykq02.swift:12:9: error: cannot pass immutable value as inout\
    \ argument: 'x' is a 'let' constant\n        swap(x, y)\n        ^    ~\n/tmp/tmpdx5ykq02.swift:19:17:\
    \ error: cannot assign to value: 'max_even' is a 'let' constant\n            \
    \    max_even = max_even\n                ^~~~~~~~\n/tmp/tmpdx5ykq02.swift:17:13:\
    \ note: change 'let' to 'var' to make it mutable\n            let max_even = Int(x\
    \ / d)\n            ^~~\n            var\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    \n    guard x < y else { return\
    \ -1 }\n    guard x > y else { return -1 }\n    \n    var even = Int()\n    var\
    \ odd  = Int()\n    \n    func isEven (n: Int) -> Bool {\n        return n % 2\
    \ == 0\n    }\n    \n    for i in 1..<(y - x + 1) {\n        if isEven(i) {\n\
    \            even = i + x\n        } else {\n            odd  = i + x\n      \
    \  }\n    }\n    \n    return even > odd ? even : odd\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpgt59sa53.swift:23:19: error: missing argument label 'n:' in call\n\
    \        if isEven(i) {\n                  ^\n                  n: \n"
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in  x ..< y {\n        if isEven(i) {\n            result = i\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp_jk8xa3m.swift:13:12: error: cannot find 'isEven' in scope\n  \
    \      if isEven(i) {\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // Check to see if the first\
    \ number is greater than the second number\n    if x >= y {\n        return -1\n\
    \    }\n    \n    // If the first number is less than the second number, then\n\
    \    // the biggest even integer is the lower number.\n    if x < y {\n      \
    \  return y\n    }\n    \n    // Otherwise, if the first number is greater than\
    \ the second number, \n    // then the biggest even integer is the higher number.\n\
    \    return x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp2eb2o8q5/tmp2eb2o8q5.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae68293dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae682634b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae682634988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6826337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2eb2o8q5                        0x0000562892e341bd <unavailable> + 4541

    5    libc.so.6                          0x00002ae682b29460 __libc_start_main +
    245

    6    tmp2eb2o8q5                        0x0000562892e33e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let z = x ^ y\n    if z >\
    \ 0 {\n        if z&1 == 0 {\n            return x\n        } else {\n       \
    \     return y\n        }\n    } else {\n        if z & 1 == 0 {\n           \
    \ return y\n        } else {\n            return x\n        }\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpnx6h239l/tmpnx6h239l.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2a3b11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2a3808b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2a3808988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2a38077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnx6h239l                        0x000055556df751bd <unavailable> + 4541

    5    libc.so.6                          0x00002ae2a3cfd460 __libc_start_main +
    245

    6    tmpnx6h239l                        0x000055556df74e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var m = 1\n    var n = y\n\
    \    while x <= n {\n        m *= 2\n        n = m / 2\n    }\n    return n\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpbum3797m/tmpbum3797m.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09b2b66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09b285db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09b285d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09b285c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbum3797m                        0x00005566b65fb24d <unavailable> + 4685

    5    libc.so.6                          0x00002b09b2d52460 __libc_start_main +
    245

    6    tmpbum3797m                        0x00005566b65faef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n  if x > y {\n    swap(&x, &y)\n\
    \  }\n  var result = Int64(-1)\n  var i = Int64(y)\n  while i >= x {\n    if i\
    \ & 1 == 0 {\n      result = i\n      break\n    }\n    i /= 2\n  }\n  return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpr6a36c1i.swift:12:10: error: cannot pass immutable value as inout\
    \ argument: 'x' is a 'let' constant\n    swap(&x, &y)\n         ^~\n/tmp/tmpr6a36c1i.swift:12:14:\
    \ error: cannot pass immutable value as inout argument: 'y' is a 'let' constant\n\
    \    swap(&x, &y)\n             ^~\n/tmp/tmpr6a36c1i.swift:23:10: error: cannot\
    \ convert return expression of type 'Int64' to return type 'Int'\n  return result\n\
    \         ^~~~~~\n         Int(  )\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    \n    if x == y {\n      \
    \  return -1\n    }\n    if x % 2 != 0 || y % 2 != 0 {\n        return -1\n  \
    \  }\n    \n    let max = (x + y - 1) / 2\n    let min = x + y\n    \n    for\
    \ _ in 0 ..< max {\n        if min % 2 == 0 {\n            return min / 2\n  \
    \      }\n        min = min / 2\n    }\n    \n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpcsbb3e20.swift:26:9: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n        min = min / 2\n        ^~~\n/tmp/tmpcsbb3e20.swift:20:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = x + y\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Add your code\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: '/tmp/tmpxzb6jrsv.swift:12:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x == y {\n        return\
    \ x\n    }\n    if x > y {\n        if x % 2 == 0 {\n            return choose_num(y,\
    \ x)\n        } else {\n            return choose_num(y, x + 1)\n        }\n \
    \   }\n    if y % 2 == 0 {\n        return y\n    } else {\n        return choose_num(y\
    \ + 1, x)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpivya41d8.swift:16:30: error: missing argument labels 'x:y:' in\
    \ call\n            return choose_num(y, x)\n                             ^\n\
    \                              x: y: \n/tmp/tmpivya41d8.swift:18:30: error: missing\
    \ argument labels 'x:y:' in call\n            return choose_num(y, x + 1)\n  \
    \                           ^\n                              x: y: \n/tmp/tmpivya41d8.swift:24:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(y +\
    \ 1, x)\n                         ^\n                          x:     y: \n"
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tlet biggest = x + y\n\tlet evens\
    \ = (x + y) / 2\n\n\tif ((biggest % 2) == 0) || ((evens % 2) == 0) {\n\t\treturn\
    \ evens\n\t} else {\n\t\treturn -1\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpnm8hifn9/tmpnm8hifn9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74f3e34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74f3b2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74f3b2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74f3b2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnm8hifn9                        0x000055a14776c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b74f4020460 __libc_start_main +
    245

    6    tmpnm8hifn9                        0x000055a14776bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = 0\n    for number\
    \ in 2...y {\n        if number > x {\n            return -1\n        }\n    \
    \    for _ in 2...number {\n            if ((x % number) == 0) {\n           \
    \     return number\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp_0w909id/tmp_0w909id.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66ce857c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66ce54eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66ce54e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66ce54d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0w909id                        0x000055615680f33d <unavailable> + 4925

    5    libc.so.6                          0x00002b66cea43460 __libc_start_main +
    245

    6    tmp_0w909id                        0x000055615680efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let start = max(x, y)\n  \
    \  let end = min(x, y)\n    var num: Int?\n    if start < end {\n        var counter:\
    \ Int = 0\n        while (counter < end) {\n            let value = start + counter\n\
    \            if value%2 == 0 {\n                if num == nil {\n            \
    \        num = value\n                } else {\n                    num = max(value,\
    \ num)!\n                }\n                counter += 1\n            }\n    \
    \    }\n    } else {\n        num = 1\n    }\n    return num!\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp_w1hmelm.swift:22:38: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n                    num = max(value,\
    \ num)!\n                                     ^\n/tmp/tmp_w1hmelm.swift:22:38:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                    num = max(value, num)!\n                        \
    \             ^\n                                         ?? <#default value#>\n\
    /tmp/tmp_w1hmelm.swift:22:38: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n                    num = max(value, num)!\n\
    \                                     ^\n                                    \
    \    !\n/tmp/tmp_w1hmelm.swift:22:42: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n                    num = max(value, num)!\n                   \
    \       ~~~~~~~~~~~~~~~^\n                                         \n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    guard x < y, x != 0 || y <\
    \ x else {\n        return -1\n    }\n    guard x > y, y > x else {\n        return\
    \ x\n    }\n    var max: Int\n    var min = y\n    min = min > x ? x : min\n \
    \   max = max > y ? y : max\n    while min < max {\n        let middle = min +\
    \ ((max - min) / 2)\n        if middle % 2 == 0 {\n            min = middle +\
    \ 1\n        } else {\n            max = middle\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpd7wk92fm.swift:20:11: error: variable 'max' used before being initialized\n\
    \    max = max > y ? y : max\n          ^\n/tmp/tmpd7wk92fm.swift:17:9: note:\
    \ variable defined here\n    var max: Int\n        ^\n/tmp/tmpd7wk92fm.swift:20:25:\
    \ error: variable 'max' used before being initialized\n    max = max > y ? y :\
    \ max\n                        ^\n/tmp/tmpd7wk92fm.swift:17:9: note: variable\
    \ defined here\n    var max: Int\n        ^\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    \n    // If x or y are negative,\
    \ then return -1.\n    if x < 0 || y < 0 {\n        return -1\n    }\n\n    //\
    \ Start from largest number in the range.\n    var largest = y\n\n    // Iterate\
    \ from large to small.\n    for i in x ..< y {\n        // If i is even, then\
    \ the biggest even number is i/2.\n        // Otherwise the biggest even number\
    \ is 3*i+1.\n        if i % 2 == 0 {\n            largest = i/2\n        } else\
    \ {\n            largest = 3*i+1\n        }\n\n        // Break once we've found\
    \ a number that is in the range.\n        if largest > x {\n            break\n\
    \        }\n    }\n\n    // Return found number.\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpj22f3iwe/tmpj22f3iwe.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9767f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9764edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9764ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9764ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj22f3iwe                        0x000055e06515033d <unavailable> + 4925

    5    libc.so.6                          0x00002af9769e2460 __libc_start_main +
    245

    6    tmpj22f3iwe                        0x000055e06514ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var biggest = 0\n    \n  \
    \  for n in 0..<(x-y) {\n        if ((n - x) % 2 != 0 || (y - n) % 2 != 0) {\n\
    \            biggest = n * 2 > biggest ? n * 2 : biggest\n        }\n    }\n \
    \   \n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f5dc01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f5d8f8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3f5d8f8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3f5d8f813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3f5d8f7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp0crlsj2f                        0x000055f62893f7f9 <unavailable> + 6137

    6    tmp0crlsj2f                        0x000055f62893f2d0 <unavailable> + 4816

    7    libc.so.6                          0x00002b3f5dded460 __libc_start_main +
    245

    8    tmp0crlsj2f                        0x000055f62893efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    \n    if x >= y {\n      \
    \  return -1\n    }\n\n    if x <= 2 {\n        return -1\n    }\n\n    if x <=\
    \ x {\n        return x\n    }\n\n    if x <= y {\n        return y\n    }\n\n\
    \    var even = 1\n    var odd = 0\n\n    for i in x ..< y {\n        if i % 2\
    \ == 0 {\n            even = even + 1\n        } else {\n            odd = odd\
    \ + 1 \n        }\n    }\n\n    if even == x {\n        return even\n    }\n\n\
    \    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpe55yy24a/tmpe55yy24a.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b101037dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1010074b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1010074988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10100737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe55yy24a                        0x0000561c557af33d <unavailable> + 4925

    5    libc.so.6                          0x00002b1010569460 __libc_start_main +
    245

    6    tmpe55yy24a                        0x0000561c557aefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        // The\
    \ second value must be larger than the first one\n        return -1\n    }\n \
    \   \n    var low: Int\n    var high: Int\n    \n    if x % 2 == 0 {\n       \
    \ low = x\n        high = y\n    } else {\n        low = y\n        high = x\n\
    \    }\n    \n    var next: Int\n    var index: Int\n    var current: Int\n  \
    \  \n    if low < high {\n        next = (low + high) / 2\n        index = next\
    \ - 1\n        current = low\n        \n        while next > 0 {\n           \
    \ if next % 2 == 0 {\n                if current == next {\n                 \
    \   return current\n                }\n                \n                current\
    \ = next\n                next /= 2\n            } else {\n                next\
    \ /= 2\n            }\n        }\n    }\n    \n    if current == next {\n    \
    \    return current\n    }\n    \n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpczmn4hlu.swift:28:9: warning: variable 'index' was written to,\
    \ but never read\n    var index: Int\n        ^\n/tmp/tmpczmn4hlu.swift:50:19:\
    \ error: variable 'next' used before being initialized\n    if current == next\
    \ {\n                  ^\n/tmp/tmpczmn4hlu.swift:27:9: note: variable defined\
    \ here\n    var next: Int\n        ^\n/tmp/tmpczmn4hlu.swift:50:8: error: variable\
    \ 'current' used before being initialized\n    if current == next {\n       ^\n\
    /tmp/tmpczmn4hlu.swift:29:9: note: variable defined here\n    var current: Int\n\
    \        ^\n/tmp/tmpczmn4hlu.swift:51:16: error: variable 'current' used before\
    \ being initialized\n        return current\n               ^\n/tmp/tmpczmn4hlu.swift:29:9:\
    \ note: variable defined here\n    var current: Int\n        ^\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result: Int\n    for i\
    \ in 0..<min(Int(x), Int(y)) {\n        if (x-i)*(y-i)>0 { break }\n        result\
    \ = i-(x+y)/2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpo4cuvn43.swift:16:12: error: variable 'result' used before being\
    \ initialized\n    return result\n           ^\n/tmp/tmpo4cuvn43.swift:11:9: note:\
    \ variable defined here\n    var result: Int\n        ^\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: implement this\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp3az0x_dj/tmp3az0x_dj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2326e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2323ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2323dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2323dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3az0x_dj                        0x000055a07d7f91bd <unavailable> + 4541

    5    libc.so.6                          0x00002ae2328d2460 __libc_start_main +
    245

    6    tmp3az0x_dj                        0x000055a07d7f8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var max: Int\n    var min:\
    \ Int\n\n    if x > y {\n        max = x\n        min = y\n    } else {\n    \
    \    max = y\n        min = x\n    }\n    if min % 2 == 0 {\n        // Even min\n\
    \        return max\n    }\n    if max % 2 == 0 {\n        // Even max\n     \
    \   return min\n    }\n    // Odd min or max\n    var maxEven: Int = max / 2\n\
    \    var minEven: Int = min / 2\n    var ret: Int = -1\n\n    while maxEven >\
    \ min {\n        if maxEven % 2 == 0 {\n            if minEven % 2 == 0 {\n  \
    \              return maxEven\n            } else if minEven % 2 != 0 {\n    \
    \            return maxEven + min\n            }\n        } else if maxEven %\
    \ 2 != 0 {\n            if minEven % 2 == 0 {\n                return maxEven\
    \ + min\n            }\n        }\n        maxEven /= 2\n        minEven /= 2\n\
    \    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmprrvarl0m/tmprrvarl0m.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b314d51fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b314d216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b314d216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b314d2157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprrvarl0m                        0x0000559fe016424d <unavailable> + 4685

    5    libc.so.6                          0x00002b314d70b460 __libc_start_main +
    245

    6    tmprrvarl0m                        0x0000559fe0163ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\t\n\tlet range = (min(y, x) -\
    \ max(x, y) + 1)\n\t\n\tfor _ in 0 ..< range / 2 {\n\t\tif ((x % 2) == 0 && (y\
    \ % 2) == 0) {\n\t\t\treturn x\n\t\t}\n\t\t\n\t\tif ((x % 2) == 0 && (y % 2) !=\
    \ 0) {\n\t\t\treturn y\n\t\t}\n\t\t\n\t\tif ((x % 2) != 0 && (y % 2) == 0) {\n\
    \t\t\treturn y\n\t\t}\n\t\t\n\t\tif ((x % 2) != 0 && (y % 2) != 0) {\n\t\t\treturn\
    \ x\n\t\t}\n\t}\n\t\n\treturn -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ea2768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ea245f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6ea245f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6ea245f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6ea245ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmphnlfbozb                        0x0000564f31c00a24 <unavailable> + 6692

    6    tmphnlfbozb                        0x0000564f31c003c0 <unavailable> + 5056

    7    libc.so.6                          0x00002b6ea2954460 __libc_start_main +
    245

    8    tmphnlfbozb                        0x0000564f31c000d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var lower = x\n    var upper\
    \ = y\n    var largest: Int?\n\n    // special case when X is the lower bound\n\
    \    if x == y {\n        return -1\n    }\n\n    // special case when X is the\
    \ upper bound\n    if x == x {\n        return -1\n    }\n\n    // special case\
    \ when Y is the lower bound\n    if y == y {\n        return -1\n    }\n\n   \
    \ // special case when Y is the upper bound\n    if y == x {\n        return -1\n\
    \    }\n\n    if x <= y {\n        lower = x\n        upper = y\n    }\n\n   \
    \ if x <= x {\n        upper = x\n    }\n\n    while lower < upper {\n       \
    \ let mid = lower + ((upper - lower) / 2)\n        \n        if mid % 2 == 0 {\n\
    \            if mid > largest! {\n                largest = mid\n            }\n\
    \        } else {\n            if mid < largest {\n                largest = mid\n\
    \            }\n        }\n\n        if mid == x {\n            upper = mid\n\
    \        } else {\n            lower = mid + 1\n        }\n    }\n    \n    if\
    \ largest == -1 {\n        return -1\n    }\n    \n    return largest!\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpfuf44550.swift:52:22: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            if mid < largest {\n    \
    \                 ^\n/tmp/tmpfuf44550.swift:52:22: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n            if mid\
    \ < largest {\n                     ^\n                             ?? <#default\
    \ value#>\n/tmp/tmpfuf44550.swift:52:22: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n            if mid < largest\
    \ {\n                     ^\n                            !\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < 0 || y < 0 {\n    \
    \    return -1\n    }\n    \n    var x = Int64(x - 1)\n    var y = Int64(y - 1)\n\
    \    \n    while x > y {\n        x -= Int64(1)\n        y += Int64(1)\n    }\n\
    \    \n    return Int64(x / y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpwi1zsqa2.swift:23:12: error: cannot convert return expression of\
    \ type 'Int64' to return type 'Int'\n    return Int64(x / y)\n           ^~~~~~~~~~~~\n\
    \           Int(        )\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let max_num = max(min(x, y),\
    \ min(y, x))\n    let min_num = min(x, y)\n    for i in stride(from: min_num,\
    \ to: max_num, by: 2) {\n        if i % 2 == 0 {\n            return i\n     \
    \   }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpvp0mms8x/tmpvp0mms8x.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b601cb73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b601c86ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b601c86a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b601c8697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvp0mms8x                        0x0000555daa09753d <unavailable> + 5437

    5    libc.so.6                          0x00002b601cd5f460 __libc_start_main +
    245

    6    tmpvp0mms8x                        0x0000555daa0971e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var maxValue = -1\n    for\
    \ var i = x; i < y; i++ {\n        if i % 2 == 0 {\n            maxValue = i\n\
    \        }\n    }\n    return maxValue\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpzxlgo6nk.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = x; i < y; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ y\n    } else if x > y {\n        return x\n    } else {\n        if x % 2 ==\
    \ 0 {\n            return y\n        } else {\n            return x\n        }\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp51tbkxc5/tmp51tbkxc5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a29dcec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a29ac5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a29ac5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a29ac47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp51tbkxc5                        0x000055e2b8df824d <unavailable> + 4685

    5    libc.so.6                          0x00002b0a29fba460 __libc_start_main +
    245

    6    tmp51tbkxc5                        0x000055e2b8df7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    \n    // The code below is\
    \ the same as below\n    // return min(x, y) // For Swift >= 2.0\n    \n    //\
    \ The following code is the same as\n    // return min(x._Int, y._Int) // For\
    \ Swift < 2.0\n    \n    // The following code is equivalent to\n    // return\
    \ x._Int...y._Int // For Swift < 2.0\n    \n    // The following code is the same\
    \ as\n    // return min(x._Int, y._Int) // For Swift < 2.0\n    \n    // The following\
    \ code is equivalent to\n    // return min(x._Int, y._Int) // For Swift < 2.0\n\
    \    \n    // The following code is equivalent to\n    // return min(x._Int, y._Int)\
    \ // For Swift < 2.0\n    \n    // The following code is equivalent to\n    //\
    \ return min(x._Int, y._Int) // For Swift < 2.0\n    \n    // The following code\
    \ is equivalent to\n    // return min(x._Int, y._Int) // For Swift < 2.0\n   \
    \ \n    // The following code is equivalent to\n    // return min(x._Int, y._Int)\
    \ // For Swift < 2.0\n    \n    // The following code is equivalent to\n    //\
    \ return min(x._Int, y._Int) // For Swift < 2.0\n    \n    // The following code\
    \ is equivalent to\n    // return min(x._Int, y._Int) // For Swift < 2.0\n   \
    \ \n    // The following code is equivalent to\n    // return min(x._Int, y._Int)\
    \ // For Swift < 2.0\n    \n    // The following code is equivalent to\n    //\
    \ return min(x._Int, y._Int) // For Swift < 2.0\n    \n    // The following code\
    \ is equivalent to\n    // return min(x._Int, y._Int) // For Swift < 2.0\n   \
    \ \n    // The following code is equivalent to\n    // return min(x._Int, y._Int)\
    \ // For Swift < 2.0\n    \n    // The following code is equivalent to\n    //\
    \ return min(x._Int, y._Int) // For Swift < 2.0\n    \n    // The following code\
    \ is equivalent to\n    // return min(x._Int, y._Int) // For Swift < 2.0\n   \
    \ \n    // The following code is equivalent to\n    // return min(x._Int, y._Int)\
    \ // For Swift < 2.0\n    \n    // The following code is equivalent to\n    //\
    \ return min(x._Int, y._Int) // For Swift < 2.0\n    \n    // The following code\
    \ is equivalent to\n    // return min(x._Int, y._Int) // \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: '/tmp/tmpff7fvmb2.swift:71:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let limit = min(x, y)\n  \
    \  for num in 0 ..< limit {\n        if ((num + 1) & 1) == 0 {\n            return\
    \ num\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp9u73b2wy/tmp9u73b2wy.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3c615ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3c5e55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3c5e55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3c5e547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9u73b2wy                        0x000055ed05fb13cd <unavailable> + 5069

    5    libc.so.6                          0x00002af3c634a460 __libc_start_main +
    245

    6    tmp9u73b2wy                        0x000055ed05fb1079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // your code here\n    if\
    \ x < 0 || y < 0 {\n        return -1\n    }\n    \n    var result = -1\n    if\
    \ x > y {\n        for i in 0..x {\n            if i % 2 == 0 {\n            \
    \    result = i\n                break\n            }\n        }\n    } else {\n\
    \        for i in 0..y {\n            if i % 2 == 0 {\n                result\
    \ = i\n                break\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpgc3svyvb.swift:18:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for i in 0..x {\n                  ^~\n       \
    \           ...\n/tmp/tmpgc3svyvb.swift:25:19: error: cannot find operator '..'\
    \ in scope; did you mean '...'?\n        for i in 0..y {\n                  ^~\n\
    \                  ...\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in stride(from: x, through: y, by: 2) {\n        if ((result | i) != result)\
    \ {\n            result = result | i\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp4sjwiuqq/tmp4sjwiuqq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29782bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2977fb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2977fb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2977fb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4sjwiuqq                        0x000055e7f15563ed <unavailable> + 5101

    5    libc.so.6                          0x00002b29784a6460 __libc_start_main +
    245

    6    tmp4sjwiuqq                        0x000055e7f1556099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        var t\
    \ = x\n        x = y\n        y = t\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 && y % 2 == 0 {\n        var n = x * 2 + y\n       \
    \ if n >= x {\n            n /= 2\n        } else {\n            n = n - x\n \
    \       }\n        if n >= y {\n            n /= 2\n        } else {\n       \
    \     n = n - y\n        }\n        return Int(n)\n    }\n    var m = Int(x) /\
    \ 2\n    if m > y {\n        var t = x\n        x = y\n        y = t\n    }\n\
    \    if m == y {\n        return m\n    }\n    if m % 2 == 0 && y % 2 == 0 {\n\
    \        var n = m / 2 + y\n        if n >= x {\n            n /= 2\n        }\
    \ else {\n            n = n - x\n        }\n        if n >= y {\n            n\
    \ /= 2\n        } else {\n            n = n - y\n        }\n        return Int(n)\n\
    \    }\n    var n = Int(x) / 2\n    if n > y {\n        var t = x\n        x =\
    \ y\n        y = t\n    }\n    if n >= y {\n        var n = x - y\n        if\
    \ n >= x {\n            n /= 2\n        } else {\n            n = n - x\n    \
    \    }\n        return Int(n)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp__uviwqs.swift:13:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = y\n        ^\n/tmp/tmp__uviwqs.swift:14:9: error: cannot\
    \ assign to value: 'y' is a 'let' constant\n        y = t\n        ^\n/tmp/tmp__uviwqs.swift:36:9:\
    \ error: cannot assign to value: 'x' is a 'let' constant\n        x = y\n    \
    \    ^\n/tmp/tmp__uviwqs.swift:37:9: error: cannot assign to value: 'y' is a 'let'\
    \ constant\n        y = t\n        ^\n/tmp/tmp__uviwqs.swift:59:9: error: cannot\
    \ assign to value: 'x' is a 'let' constant\n        x = y\n        ^\n/tmp/tmp__uviwqs.swift:60:9:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        y = t\n    \
    \    ^\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tlet biggest = max(x: y, y: x)\n\
    \t\n\tfor i in 0..<biggest/2 {\n\t\tif isprime(x+i) && isprime(y-i) {\n\t\t\t\
    return i+x\n\t\t}\n\t}\n\t\n\treturn -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmprn5pqo1t.swift:11:19: error: extraneous argument labels 'x:y:'\
    \ in call\n        let biggest = max(x: y, y: x)\n                         ^~~~\
    \   ~~~\n                                \n"
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var res: Int = -1\n\n    for\
    \ i in 0..<(x-y) {\n        if ((i * y) % 2 == 0) {\n            res = i\n   \
    \         break\n        }\n    }\n\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b94acd10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94aca07561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b94aca07286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b94aca0713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b94aca06bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpf1cvfjt2                        0x000055a25e5e47f9 <unavailable> + 6137

    6    tmpf1cvfjt2                        0x000055a25e5e42d0 <unavailable> + 4816

    7    libc.so.6                          0x00002b94acefc460 __libc_start_main +
    245

    8    tmpf1cvfjt2                        0x000055a25e5e3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var low\
    \ = x\n    var high = y\n    while low < high {\n        if ((low % 2) == 0) {\n\
    \            if ((high % 2) != 0) {\n                low++\n            } else\
    \ {\n                high--\n            }\n        } else {\n            if ((high\
    \ % 2) == 0) {\n                low++\n            } else {\n                high--\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpvkw5i7mx.swift:17:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                low++\n                   ^~\n/tmp/tmpvkw5i7mx.swift:19:21:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \      high--\n                    ^~\n/tmp/tmpvkw5i7mx.swift:23:20: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n                low++\n \
    \                  ^~\n/tmp/tmpvkw5i7mx.swift:25:21: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n                high--\n              \
    \      ^~\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var min_x = abs(x) // absolute\
    \ value of x\n    var min_y = abs(y) // absolute value of y\n    var max_x = Int32(min_x\
    \ + 1) // +1 because we want the even number\n    var max_y = Int32(min_y + 1)\
    \ // +1 because we want the even number\n\n    if max_x > max_y { // biggest number\
    \ above the other two numbers is the biggest even number\n        max_x = max_y\
    \ - 1\n    }\n\n    if min_x > min_y { // if the smallest number above the other\
    \ two numbers is bigger than the smallest even number, then we\n        min_y\
    \ = min_x - 1\n    }\n\n    var result = Int32(min_x + min_y) // compute the sum\n\
    \    if min_x == max_x { // if x equals y, then result is even\n        result\
    \ = -1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpzwmcvrst.swift:28:12: error: cannot convert return expression of\
    \ type 'Int32' to return type 'Int'\n    return result\n           ^~~~~~\n  \
    \         Int(  )\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let max = (x - y) + 1\n  \
    \  if max % 2 == 0 {\n        return max / 2\n    } else {\n        return max\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpowi1ufd2/tmpowi1ufd2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac92d64ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac92d345b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac92d345988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac92d3447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpowi1ufd2                        0x0000558c4369724d <unavailable> + 4685

    5    libc.so.6                          0x00002ac92d83a460 __libc_start_main +
    245

    6    tmpowi1ufd2                        0x0000558c43696ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // check base case\n    if\
    \ x >= y {\n        return -1\n    }\n\n    // check even case\n    if x <= y\
    \ {\n        return x \n    }\n\n    // check odd case\n    let even = Int(x /\
    \ 2)\n    let odd = Int(x % 2)\n\n    if even * 2 == x {\n        return even\n\
    \    }\n\n    return odd > y ? odd : y\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp6u9m_c61/tmp6u9m_c61.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cf9352c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cf9049b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cf9049988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cf90487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6u9m_c61                        0x00005650898c237d <unavailable> + 4989

    5    libc.so.6                          0x00002b6cf953e460 __libc_start_main +
    245

    6    tmp6u9m_c61                        0x00005650898c2029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        // x is\
    \ less than y, so we can go left\n        if x > 0 {\n            // x is more\
    \ than 0, so we need to choose the biggest even number \n            // greater\
    \ than x, which is x.\n            if x % 2 != 0 {\n                return x\n\
    \            }\n        } else {\n            // x is 0, so we need to choose\
    \ the biggest even number greater than 0\n            if x % 2 == 0 {\n      \
    \          return x\n            }\n        }\n    } else {\n        // y is less\
    \ than x, so we can go right\n        if y > 0 {\n            // y is more than\
    \ 0, so we need to choose the biggest even number \n            // greater than\
    \ y, which is y.\n            if y % 2 != 0 {\n                return y\n    \
    \        }\n        } else {\n            // y is 0, so we need to choose the\
    \ biggest even number greater than 0\n            if y % 2 == 0 {\n          \
    \      return y\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpqo2uj0vh/tmpqo2uj0vh.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b571a8bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b571a5b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b571a5b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b571a5b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqo2uj0vh                        0x000056022cf8e24d <unavailable> + 4685

    5    libc.so.6                          0x00002b571aaa7460 __libc_start_main +
    245

    6    tmpqo2uj0vh                        0x000056022cf8def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // x should be smaller than\
    \ y so that x % 2 != 0\n    if x < y {\n        (x, y) = (y, x)\n    }\n    \n\
    \    // x should be the biggest even number that is smaller than y\n    var biggest_even:\
    \ Int\n    for num in 0..<x {\n        if num & 1 == 0 && num > y {\n        \
    \    biggest_even = num\n        }\n    }\n\n    // biggest_even should < x so\
    \ that biggest_even % 2 == 0\n    if biggest_even < x {\n        biggest_even\
    \ = x\n    }\n    \n    // x should be the biggest odd number that is smaller\
    \ than y\n    for num in 0..<x {\n        if num & 1 == 1 && num > y {\n     \
    \       biggest_even = num\n        }\n    }\n\n    // biggest_even should < x\
    \ so that biggest_even % 2 == 1\n    if biggest_even < x {\n        biggest_even\
    \ = x\n    }\n    \n    return biggest_even\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpe8pf13wr.swift:13:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpe8pf13wr.swift:13:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x == y {\n        return\
    \ -1\n    }\n    if x > y {\n        var temp = x\n        x = y\n        y =\
    \ temp\n    }\n    if x%2 == 0 {\n        return x + choose_num(x+1, y)\n    }\n\
    \    else {\n        return x + choose_num(x, y+1)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpfhtu7skh.swift:16:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = y\n        ^\n/tmp/tmpfhtu7skh.swift:17:9: error: cannot\
    \ assign to value: 'y' is a 'let' constant\n        y = temp\n        ^\n/tmp/tmpfhtu7skh.swift:20:30:\
    \ error: missing argument labels 'x:y:' in call\n        return x + choose_num(x+1,\
    \ y)\n                             ^\n                              x:   y: \n\
    /tmp/tmpfhtu7skh.swift:23:30: error: missing argument labels 'x:y:' in call\n\
    \        return x + choose_num(x, y+1)\n                             ^\n     \
    \                         x: y: \n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tlet max_range: Int\n\tlet range:\
    \ Int\n\t\n\tmax_range = max(x, y) - (max(x, y) % (x - y + 1))\n\trange = x -\
    \ y\n\t\n\tfor i in 1..<max_range {\n\t\tif i % (x - y + 1) == 0 {\n\t\t\treturn\
    \ i\n\t\t}\n\t\t\n\t\tif range <= i {\n\t\t\treturn -1\n\t\t}\n\t\t\n\t\trange\
    \ = range - i\n\t}\n\t\n\treturn -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpqg3nph4i.swift:26:9: error: immutable value 'range' may only be\
    \ initialized once\n                range = range - i\n                      ^\n\
    /tmp/tmpqg3nph4i.swift:12:2: note: change 'let' to 'var' to make it mutable\n\
    \        let range: Int\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if (x < 0 || y < 0 || x >\
    \ y || y == 0) {\n        return -1\n    }\n\n    var x: UInt32 = UInt32(x)\n\
    \    var y: UInt32 = UInt32(y)\n    \n    var max_even: UInt32 = 0\n\n    while\
    \ x < y {\n        if x % 2 == 0 {\n            max_even = UInt32(max_even) +\
    \ UInt32(x)\n        }\n\n        x += 1\n    }\n\n    return UInt32(max_even)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp1t3h_7rr.swift:28:12: error: cannot convert return expression of\
    \ type 'UInt32' to return type 'Int'\n    return UInt32(max_even)\n          \
    \ ^~~~~~~~~~~~~~~~\n           Int(            )\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= 0 || y <= 0 {\n  \
    \      return -1\n    }\n    var even = y\n    if even % 2 == 0 {\n        even\
    \ = even - 1\n    }\n    var biggest = x + 1\n    if even > biggest {\n      \
    \  biggest = even\n    }\n    while even > 0 {\n        biggest = even + (biggest\
    \ * 2)\n        even = biggest % even\n    }\n    return biggest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpxh8_azto/tmpxh8_azto.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e0cc1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e0c915b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e0c915988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e0c9147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxh8_azto                        0x0000555e9940724d <unavailable> + 4685

    5    libc.so.6                          0x00002b2e0ce0a460 __libc_start_main +
    245

    6    tmpxh8_azto                        0x0000555e99406ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if (x % 2 == 0 && y % 2 ==\
    \ 0) || (x < y && y % 2 == 0) {\n        return x\n    }\n    return -1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphlsrt4l6/tmphlsrt4l6.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8ab78bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8ab482b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8ab482988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8ab4817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphlsrt4l6                        0x000056158963824d <unavailable> + 4685

    5    libc.so.6                          0x00002af8ab977460 __libc_start_main +
    245

    6    tmphlsrt4l6                        0x0000561589637ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO (maybe): replace this\
    \ with binary search\n    var biggest_even = 1\n    var biggest_odd = x\n    while\
    \ biggest_even < biggest_odd && biggest_even < y {\n        if biggest_even %\
    \ 2 == 0 {\n            biggest_even = biggest_even + 1\n        } else {\n  \
    \          biggest_even = biggest_even + 1\n        }\n    }\n\n    while biggest_odd\
    \ < biggest_even && biggest_odd < y {\n        if biggest_odd % 2 == 0 {\n   \
    \         biggest_odd = biggest_odd + 2\n        } else {\n            biggest_odd\
    \ = biggest_odd + 3\n        }\n    }\n    if biggest_even >= biggest_odd {\n\
    \        return biggest_even\n    } else {\n        return biggest_odd\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpmr9q_004/tmpmr9q_004.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11937e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11934dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11934da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11934d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmr9q_004                        0x000056529f56c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b11939cf460 __libc_start_main +
    245

    6    tmpmr9q_004                        0x000056529f56bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        let mid\
    \ = (x + y) / 2\n        if mid % 2 == 0 {\n            return mid\n        }\
    \ else {\n            return choose_num(mid, y)\n        }\n    } else {\n   \
    \     let mid = (x + y) / 2\n        if mid % 2 == 0 {\n            return choose_num(x,\
    \ mid)\n        } else {\n            return mid\n        }\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpdxby9ifd.swift:16:30: error: missing argument labels 'x:y:' in\
    \ call\n            return choose_num(mid, y)\n                             ^\n\
    \                              x:   y: \n/tmp/tmpdxby9ifd.swift:21:30: error:\
    \ missing argument labels 'x:y:' in call\n            return choose_num(x, mid)\n\
    \                             ^\n                              x: y: \n"
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return min(x, y)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpcyihcdi9/tmpcyihcdi9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4e23dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4e20d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4e20d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4e20d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcyihcdi9                        0x000055e99d5a124d <unavailable> + 4685

    5    libc.so.6                          0x00002ac4e25ca460 __libc_start_main +
    245

    6    tmpcyihcdi9                        0x000055e99d5a0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var a: Int\n    if x > y {\n\
    \        a = y\n    } else {\n        a = x\n    }\n    while a > 1 {\n      \
    \  a /= 2\n        if a % 2 == 0 {\n            return a\n        }\n    }\n \
    \   return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpqb_m55gk/tmpqb_m55gk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31b4262c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31b3f59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31b3f59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31b3f587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqb_m55gk                        0x000055e2a389324d <unavailable> + 4685

    5    libc.so.6                          0x00002b31b444e460 __libc_start_main +
    245

    6    tmpqb_m55gk                        0x000055e2a3892ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return (x + (y - x) / 2) &\
    \ (y - x + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp2ym0hipp/tmp2ym0hipp.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93d1f27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93d1c1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93d1c1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93d1c1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ym0hipp                        0x0000562f73fd924d <unavailable> + 4685

    5    libc.so.6                          0x00002b93d2113460 __libc_start_main +
    245

    6    tmp2ym0hipp                        0x0000562f73fd8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    \n    var a: Int = Int(floor((x\
    \ - y) / 2))\n    \n    while a == x || a == y {\n        a += 1\n    }\n    \n\
    \    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpideyqusi.swift:12:22: error: cannot find 'floor' in scope\n   \
    \ var a: Int = Int(floor((x - y) / 2))\n                     ^~~~~\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    \n    func gcd(a: Int, b:\
    \ Int) -> Int {\n        return b == 0 ? a : gcd(b, a % b)\n    }\n    \n    return\
    \ gcd(x, y) > 0 ? y : -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpn1zu9uev.swift:13:32: error: missing argument labels 'a:b:' in\
    \ call\n        return b == 0 ? a : gcd(b, a % b)\n                          \
    \     ^\n                                a: b: \n/tmp/tmpn1zu9uev.swift:16:15:\
    \ error: missing argument labels 'a:b:' in call\n    return gcd(x, y) > 0 ? y\
    \ : -1\n              ^\n               a: b: \n"
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var x = Int(x)\n    var y\
    \ = Int(y)\n    if x >= y {\n        (x, y) = (y, x)\n    }\n    \n    var even\
    \ = 1\n    var high = 1\n    while even <= y {\n        if x % 2 == 0 {\n    \
    \        x /= 2\n            even += 2\n        } else {\n            x /= 2\n\
    \            even *= 2\n        }\n        high = even * high\n    }\n    \n \
    \   if x >= y {\n        (x, y) = (y, x)\n    }\n    \n    return high\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp75kp1ce2/tmp75kp1ce2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab3c3c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab3c0c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab3c0c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab3c0bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75kp1ce2                        0x000055e377d8637d <unavailable> + 4989

    5    libc.so.6                          0x00002aab3c5b5460 __libc_start_main +
    245

    6    tmp75kp1ce2                        0x000055e377d86029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    \n    var min = x\n    var\
    \ max = y\n    \n    for _ in 0 ..< 2 {\n        min = max\n        \n       \
    \ var tmp: Int = -1\n        \n        for _ in 0 ..< x {\n            tmp = min\
    \ + (2 * max - min) / 2\n            if tmp % 2 == 0 {\n                min =\
    \ tmp\n            }\n        }\n        \n        for _ in 0 ..< y {\n      \
    \      tmp = max - (2 * max - min) / 2\n            if tmp % 2 == 0 {\n      \
    \          max = tmp\n            }\n        }\n    }\n    \n    return min\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpjzpb96yd/tmpjzpb96yd.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd2532c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd2229b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd2229988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd22287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjzpb96yd                        0x000055f6e91473bd <unavailable> + 5053

    5    libc.so.6                          0x00002aebd271e460 __libc_start_main +
    245

    6    tmpjzpb96yd                        0x000055f6e9146fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x == y { return x }\n \
    \   if x <= y {\n        var smaller, larger, result: Int\n        smaller = x\
    \ \n        larger = y\n        result = smaller\n        while larger - smaller\
    \ >= 2 {\n            if larger % smaller == 0 {\n                larger = smaller\
    \ * larger\n            } else {\n                smaller = smaller + 1 \n   \
    \         }\n        }\n        return larger\n    } else {\n        var smaller,\
    \ larger, result: Int\n        smaller = y \n        larger = x\n        result\
    \ = smaller\n        while larger - smaller >= 2 {\n            if smaller % larger\
    \ == 0 {\n                larger = smaller * larger\n            } else {\n  \
    \              smaller = smaller + 1 \n            }\n        }\n        return\
    \ larger\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpjof2tj6b/tmpjof2tj6b.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7238274c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7237f6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7237f6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7237f6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjof2tj6b                        0x000055636e7cc24d <unavailable> + 4685

    5    libc.so.6                          0x00002b7238460460 __libc_start_main +
    245

    6    tmpjof2tj6b                        0x000055636e7cbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var\
    \ n: Int = 0\n    for n in (x...y) {\n        if even > 0 || n % 2 != 0 {\n  \
    \          even = even + n\n        }\n        if even > x {\n            break\n\
    \        }\n    }\n    return even == x ? n : -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpuxq4aqp9/tmpuxq4aqp9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0b8a51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0b8748b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0b8748988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0b87477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuxq4aqp9                        0x000055ff7941e33d <unavailable> + 4925

    5    libc.so.6                          0x00002ab0b8c3d460 __libc_start_main +
    245

    6    tmpuxq4aqp9                        0x000055ff7941dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tif x <= y {\n\t\treturn choose_num_small(x,\
    \ y)\n\t}\n\treturn choose_num_large(x, y)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpkhawm9bx.swift:12:10: error: cannot find 'choose_num_small' in\
    \ scope\n                return choose_num_small(x, y)\n                     \
    \  ^~~~~~~~~~~~~~~~\n/tmp/tmpkhawm9bx.swift:14:9: error: cannot find 'choose_num_large'\
    \ in scope\n        return choose_num_large(x, y)\n               ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    guard x < y else { return\
    \ -1 }\n    guard x > 0 && y > 0 else {\n        return -1\n    }\n\n    // If\
    \ both x and y are positive\n    if x >= y {\n        // Divide x by 2 and check\
    \ if it's even\n        let even = (x / 2) * 2\n        return even % 2 == 0 ?\
    \ even : -1\n    }\n\n    // If y is a power of 2\n    if y != 1 && y != Int.max\
    \ / 2 {\n        // Divide y by 2 and check if it's even\n        let even = (y\
    \ / 2) * 2\n        return even % 2 == 0 ? even : -1\n    }\n\n    // If both\
    \ x and y are power of 2\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpdhi0i3_q/tmpdhi0i3_q.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d8e7c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d8e4bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d8e4bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d8e4bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdhi0i3_q                        0x0000556df39bf5de <unavailable> + 5598

    5    libc.so.6                          0x00002b0d8e9b1460 __libc_start_main +
    245

    6    tmpdhi0i3_q                        0x0000556df39beef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < 0 || y < 0 {\n    \
    \    return -1\n    }\n    if x >= y {\n        return -1\n    }\n    var ans\
    \ = x\n    for var i = 1; i < y; i++ {\n        if ((ans % 2) == 0) {\n      \
    \      ans /= 2\n        } else {\n            return ans\n        }\n    }\n\
    \    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp5dc50qwe.swift:18:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 1; i < y; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    guard (x > 0 && y > 0) else\
    \ { return -1 }\n    return Int(ceil(log(abs((x * y) - Int64(x * y)), 2))) + 1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpoecrkusc.swift:12:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(log(abs((x * y) - Int64(x * y)), 2))) + 1\n               ^~~~\n/tmp/tmpoecrkusc.swift:12:21:\
    \ error: cannot find 'log' in scope\n    return Int(ceil(log(abs((x * y) - Int64(x\
    \ * y)), 2))) + 1\n                    ^~~\n/tmp/tmpoecrkusc.swift:12:37: error:\
    \ binary operator '-' cannot be applied to operands of type 'Int' and 'Int64'\n\
    \    return Int(ceil(log(abs((x * y) - Int64(x * y)), 2))) + 1\n             \
    \               ~~~~~~~ ^ ~~~~~~~~~~~~\n/tmp/tmpoecrkusc.swift:12:37: note: overloads\
    \ for '-' exist with these partially matching parameter lists: (Int, Int), (Int64,\
    \ Int64)\n    return Int(ceil(log(abs((x * y) - Int64(x * y)), 2))) + 1\n    \
    \                                ^\n"
  stdout: ''
  timestamp: 1659979068
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tif x != Int.max && y != Int.max\
    \ {\n\t\tif x > y {\n\t\t\tif y % 2 == 0 {\n\t\t\t\treturn x\n\t\t\t} else {\n\
    \t\t\t\treturn y\n\t\t\t}\n\t\t} else if x < y {\n\t\t\tif x % 2 == 0 {\n\t\t\t\
    \treturn y\n\t\t\t} else {\n\t\t\t\treturn x\n\t\t\t}\n\t\t} else {\n\t\t\tif\
    \ x % 2 == 0 {\n\t\t\t\treturn y\n\t\t\t} else {\n\t\t\t\treturn x\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmplbh06zdx/tmplbh06zdx.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a19c31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a19928b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a19928988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a199277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplbh06zdx                        0x00005598a724a24d <unavailable> + 4685

    5    libc.so.6                          0x00002b8a19e1d460 __libc_start_main +
    245

    6    tmplbh06zdx                        0x00005598a7249ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    var num = x\n    if x > y {\n        num = y\n    }\n    for\
    \ i in 2..(num / 2) {\n        if num % i == 0 {\n            return i\n     \
    \   }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp329bbiw7.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 2..(num / 2) {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tvar ans = -1\n\n\t// Check whether\
    \ there's any even number\n\t// between x and y\n\tfor i := x - 1; i < y; i++\
    \ {\n\t\tif i % 2 == 0 {\n\t\t\tans = i\n\t\t\tbreak\n\t\t}\n\t}\n\t\n\t// If\
    \ there's no even number, return -1\n\tif ans == -1 {\n\t\treturn -1\n\t}\n\n\t\
    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpncb8h6jw.swift:15:9: error: expected type\n        for i := x -\
    \ 1; i < y; i++ {\n               ^\n                <#type#>\n/tmp/tmpncb8h6jw.swift:15:9:\
    \ error: expected 'in' after for-each pattern\n        for i := x - 1; i < y;\
    \ i++ {\n               ^\n/tmp/tmpncb8h6jw.swift:15:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := x - 1; i < y; i++ {\n       \
    \        ^\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return Int(ceil(x/2.0) * 2.0)\
    \ + Int(ceil(y/2.0) * 2.0) % 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpxaw0m9oz.swift:11:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(x/2.0) * 2.0) + Int(ceil(y/2.0) * 2.0) % 2\n               ^~~~\n/tmp/tmpxaw0m9oz.swift:11:41:\
    \ error: cannot find 'ceil' in scope\n    return Int(ceil(x/2.0) * 2.0) + Int(ceil(y/2.0)\
    \ * 2.0) % 2\n                                        ^~~~\n/tmp/tmpxaw0m9oz.swift:11:47:\
    \ error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n\
    \    return Int(ceil(x/2.0) * 2.0) + Int(ceil(y/2.0) * 2.0) % 2\n            \
    \                                 ~^~~~\n/tmp/tmpxaw0m9oz.swift:11:47: note: overloads\
    \ for '/' exist with these partially matching parameter lists: (Double, Double),\
    \ (Duration, Double), (Int, Int)\n    return Int(ceil(x/2.0) * 2.0) + Int(ceil(y/2.0)\
    \ * 2.0) % 2\n                                              ^\n/tmp/tmpxaw0m9oz.swift:11:22:\
    \ error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n\
    \    return Int(ceil(x/2.0) * 2.0) + Int(ceil(y/2.0) * 2.0) % 2\n            \
    \        ~^~~~\n/tmp/tmpxaw0m9oz.swift:11:22: note: overloads for '/' exist with\
    \ these partially matching parameter lists: (Double, Double), (Duration, Double),\
    \ (Int, Int)\n    return Int(ceil(x/2.0) * 2.0) + Int(ceil(y/2.0) * 2.0) % 2\n\
    \                     ^\n"
  stdout: ''
  timestamp: 1659979078
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    guard x > y else {\n     \
    \   return -1\n    }\n    var ans = x\n    for number in stride(from: x, to: y,\
    \ by: 2) {\n        if number % 2 == 0 {\n            ans = number\n        }\n\
    \    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp133tgfqx/tmp133tgfqx.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefc5ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefc589ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefc589a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefc58997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp133tgfqx                        0x000056468339645d <unavailable> + 5213

    5    libc.so.6                          0x00002aefc5d8f460 __libc_start_main +
    245

    6    tmp133tgfqx                        0x0000564683396109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // Write code here\n    var\
    \ even = 0\n    var odd = 0\n    while even + odd != x {\n        if ((x - even)\
    \ * (x - even) + 2 * (y - odd) * (y - odd) > (x - odd) * (x - odd) + 2 * (y -\
    \ even) * (y - even))\n        {\n            even++\n        }\n        else\n\
    \        {\n            odd++\n        }\n    }\n    return even\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmppyovr98s.swift:17:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            even++\n                ^~\n/tmp/tmppyovr98s.swift:21:16:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  odd++\n               ^~\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var evenNums = Set<Int>()\n    for i in 0..<Int(x/2) {\n    \
    \    if x % 2 == 0 && y % 2 == 0 && x < y {\n            evenNums.insert(Int(i)\
    \ * Int(i)! + Int(i)*Int(y/2)!)\n        }\n    }\n    if evenNums.contains(Int(y))\
    \ {\n        return Int(y)\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpz1n2_nab.swift:17:13: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n            evenNums.insert(Int(i) * Int(i)! + Int(i)*Int(y/2)!)\n\
    \            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979087
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= 0 || y <= 0 { return\
    \ -1 }\n    if x >= y { return -1 }\n    var z: Int = 0\n    var a = 0\n    var\
    \ b = 0\n    for _ in 0..<(x-y) { a += 1; b += 1; z += (a+b+2)%4 }\n    if z ==\
    \ 0 { return -1 }\n    return z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b99936a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9993397561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9993397286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b999339713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9993396bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr7n5za74                        0x00005621423fd897 <unavailable> + 6295

    6    tmpr7n5za74                        0x00005621423fd2d0 <unavailable> + 4816

    7    libc.so.6                          0x00002b999388c460 __libc_start_main +
    245

    8    tmpr7n5za74                        0x00005621423fcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    for i in x ..< y {\n     \
    \   if (i % 2) == 0 {\n            return i\n        }\n    }\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpij8x9fu6/tmpij8x9fu6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba57ed3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba57ea35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba57ea35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba57ea347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpij8x9fu6                        0x000055bbac65a33d <unavailable> + 4925

    5    libc.so.6                          0x00002ba57ef2a460 __libc_start_main +
    245

    6    tmpij8x9fu6                        0x000055bbac659fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return Int((x * y) / 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp_cllvjtd/tmp_cllvjtd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaa39e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaa36ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaa36dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaa36dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cllvjtd                        0x00005628ce5ed37d <unavailable> + 4989

    5    libc.so.6                          0x00002adaa3bd2460 __libc_start_main +
    245

    6    tmp_cllvjtd                        0x00005628ce5ed029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let result = Int((x - y) /\
    \ 2)\n    if result >= y {\n        return -1\n    } else if result <= x {\n \
    \       return -1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpyds3gxpk/tmpyds3gxpk.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51ee827c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51ee51eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51ee51e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51ee51d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyds3gxpk                        0x00005628db8ab37d <unavailable> + 4989

    5    libc.so.6                          0x00002b51eea13460 __libc_start_main +
    245

    6    tmpyds3gxpk                        0x00005628db8ab029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    for i in 0..<abs(y - x) {\n\
    \        if x != 0 {\n            let mid = (x + y) / 2;\n            guard x\
    \ > mid && y > mid else {\n                continue;\n            }\n        \
    \    if x > mid && y > mid {\n                let result = choose_num(mid, y);\n\
    \                if result != -1 {\n                    return result;\n     \
    \           }\n            }\n            if x < mid && y > mid {\n          \
    \      let result = choose_num(x, mid);\n                if result != -1 {\n \
    \                   return result;\n                }\n            }\n       \
    \ } else {\n            return -1;\n        }\n    }\n    return x;\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpnx3qwg6_.swift:18:40: error: missing argument labels 'x:y:' in\
    \ call\n                let result = choose_num(mid, y);\n                   \
    \                    ^\n                                        x:   y: \n/tmp/tmpnx3qwg6_.swift:24:40:\
    \ error: missing argument labels 'x:y:' in call\n                let result =\
    \ choose_num(x, mid);\n                                       ^\n            \
    \                            x: y: \n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        let min\
    \ = x\n        let max = y\n    } else {\n        let min = y\n        let max\
    \ = x\n    }\n\n    if min % 2 == 0 && max % 2 == 1 {\n        return min / 2\n\
    \    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp0bdvm8ar.swift:19:8: error: generic parameter 'T' could not be\
    \ inferred\n    if min % 2 == 0 && max % 2 == 1 {\n       ^\nSwift.min:1:24: note:\
    \ in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmp0bdvm8ar.swift:19:28:\
    \ error: binary operator '%' cannot be applied to operands of type '(_, _) ->\
    \ _' and 'Int'\n    if min % 2 == 0 && max % 2 == 1 {\n                      \
    \ ~~~ ^ ~\n/tmp/tmp0bdvm8ar.swift:19:28: note: overloads for '%' exist with these\
    \ partially matching parameter lists: (Int, Int)\n    if min % 2 == 0 && max %\
    \ 2 == 1 {\n                           ^\n/tmp/tmp0bdvm8ar.swift:19:12: error:\
    \ binary operator '%' cannot be applied to operands of type '(_, _) -> _' and\
    \ 'Int'\n    if min % 2 == 0 && max % 2 == 1 {\n       ~~~ ^ ~\n/tmp/tmp0bdvm8ar.swift:19:12:\
    \ note: overloads for '%' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    if min % 2 == 0 && max % 2 == 1 {\n           ^\n/tmp/tmp0bdvm8ar.swift:19:24:\
    \ error: generic parameter 'T' could not be inferred\n    if min % 2 == 0 && max\
    \ % 2 == 1 {\n                       ^\nSwift.max:1:24: note: in call to function\
    \ 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n\
    \                       ^\n/tmp/tmp0bdvm8ar.swift:20:20: error: binary operator\
    \ '/' cannot be applied to operands of type '(_, _) -> _' and 'Int'\n        return\
    \ min / 2\n               ~~~ ^ ~\n/tmp/tmp0bdvm8ar.swift:20:20: note: overloads\
    \ for '/' exist with these partially matching parameter lists: (Int, Int)\n  \
    \      return min / 2\n                   ^\n/tmp/tmp0bdvm8ar.swift:20:16: error:\
    \ generic parameter 'T' could not be inferred\n        return min / 2\n      \
    \         ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let smallest = x < y ? x :\
    \ y\n    let largest = x > y ? x : y\n    while true {\n        if smallest %\
    \ 2 == 0 {\n            return smallest\n        }\n        if largest % 2 ==\
    \ 0 {\n            return largest\n        }\n        smallest += 2\n        largest\
    \ += 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp_ksmhi4t.swift:20:18: error: left side of mutating operator isn't\
    \ mutable: 'smallest' is a 'let' constant\n        smallest += 2\n        ~~~~~~~~\
    \ ^\n/tmp/tmp_ksmhi4t.swift:11:5: note: change 'let' to 'var' to make it mutable\n\
    \    let smallest = x < y ? x : y\n    ^~~\n    var\n/tmp/tmp_ksmhi4t.swift:21:17:\
    \ error: left side of mutating operator isn't mutable: 'largest' is a 'let' constant\n\
    \        largest += 2\n        ~~~~~~~ ^\n/tmp/tmp_ksmhi4t.swift:12:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let largest = x > y ? x : y\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\t\n\tguard x > y else {\n\t\t\
    return -1\n\t}\n\t\n\t\n\tlet num = (x + y) / 2\n\t\n\t\n\tguard num > 0 && num\
    \ <= y else {\n\t\treturn -1\n\t}\n\t\n\treturn num\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp74qjcszy/tmp74qjcszy.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4dcdb02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dcd7f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dcd7f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dcd7f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp74qjcszy                        0x000055920a11b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b4dcdcee460 __libc_start_main +
    245

    6    tmp74qjcszy                        0x000055920a11aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        var temp\
    \ = x\n        x = y\n        y = temp\n    }\n\n    for _ in 0 ..< y {\n    \
    \    if x % 2 == 0 {\n            return x\n        }\n        x /= 2\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpo19mylox.swift:13:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = y\n        ^\n/tmp/tmpo19mylox.swift:14:9: error: cannot\
    \ assign to value: 'y' is a 'let' constant\n        y = temp\n        ^\n/tmp/tmpo19mylox.swift:21:11:\
    \ error: left side of mutating operator isn't mutable: 'x' is a 'let' constant\n\
    \        x /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    \n    var even = y % 2 ==\
    \ 0\n    if even {\n        if y > x {\n            return -1\n        }\n   \
    \ }\n    \n    var max_num = y\n    \n    // We start from the last odd number\
    \ (y) and iterate until we get a \n    // number between x and the next odd number\
    \ (y+1)\n    for i in (y + 1) ... y {\n        if i % 2 == 0 {\n            continue\n\
    \        }\n        \n        if x >= i {\n            if even {\n           \
    \     return -1\n            } else {\n                return i\n            }\n\
    \        } else {\n            max_num = i\n            even = !even\n       \
    \ }\n    }\n    \n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002afcb6344c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcb603b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afcb603b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afcb603b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afcb603abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp1u6xqxfh                        0x000055a137b968f1 <unavailable> + 6385

    6    tmp1u6xqxfh                        0x000055a137b962d0 <unavailable> + 4816

    7    libc.so.6                          0x00002afcb6530460 __libc_start_main +
    245

    8    tmp1u6xqxfh                        0x000055a137b95fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    \n    // TODO: return -1\n\
    \    if x > y {\n        guard x <= y else {\n            return 0\n        }\n\
    \        let low = y\n        let high = x\n        for n in stride(from: low,\
    \ to: high, by: 1) {\n            if n % 2 != 0 {\n                return n\n\
    \            }\n        }\n        return -1\n    } else {\n        guard x >=\
    \ y else {\n            return 0\n        }\n        let low = x\n        let\
    \ high = y\n        for n in stride(from: low, to: high, by: 1) {\n          \
    \  if n % 2 != 0 {\n                return n\n            }\n        }\n     \
    \   return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpvz_7pezs/tmpvz_7pezs.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6119737c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b611942eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b611942e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b611942d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvz_7pezs                        0x000055c1b7e3d45d <unavailable> + 5213

    5    libc.so.6                          0x00002b6119923460 __libc_start_main +
    245

    6    tmpvz_7pezs                        0x000055c1b7e3d109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        swap_num(x,\
    \ y)\n    }\n    var result = Int(0)\n    var remainder = Int(0)\n    for _ in\
    \ 0..((y - x) / 2) {\n        remainder = remainder + 2\n        if remainder\
    \ > x {\n            return -1\n        }\n        result = result + 2\n    }\n\
    \    if result == 0 {\n        return 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpkku_uemo.swift:12:9: error: cannot find 'swap_num' in scope\n \
    \       swap_num(x, y)\n        ^~~~~~~~\n/tmp/tmpkku_uemo.swift:16:15: error:\
    \ cannot find operator '..' in scope; did you mean '...'?\n    for _ in 0..((y\
    \ - x) / 2) {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n\n    for i in 1..<(y-x) {\n        if x%i == 0 && i%2 == 0 {\n \
    \           return i\n        }\n    }\n\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpztca2xzs/tmpztca2xzs.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1a78e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1a75dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1a75da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1a75d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpztca2xzs                        0x000055c49f76a33d <unavailable> + 4925

    5    libc.so.6                          0x00002af1a7acf460 __libc_start_main +
    245

    6    tmpztca2xzs                        0x000055c49f769fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    for let i in  stride(from:\
    \ x, to: y, by: 2) {\n        let num = i / 2\n        if num % 2 == 0 {\n   \
    \         return num\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpxa6feghy.swift:11:9: error: 'let' pattern cannot appear nested\
    \ in an already immutable context\n    for let i in  stride(from: x, to: y, by:\
    \ 2) {\n        ^\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var biggest = y\n    if x\
    \ <= y {\n        while x > y {\n            biggest--\n            if biggest\
    \ < x {\n                break\n            }\n            x--\n        }\n  \
    \  } else {\n        while x < y {\n            biggest++\n            if biggest\
    \ > y {\n                break\n            }\n            x++\n        }\n  \
    \  }\n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpdxpnv4ti.swift:14:20: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n            biggest--\n                   ^~\n/tmp/tmpdxpnv4ti.swift:18:14:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  x--\n             ^~\n/tmp/tmpdxpnv4ti.swift:22:20: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            biggest++\n               \
    \    ^~\n/tmp/tmpdxpnv4ti.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            x++\n             ^~\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // x is greater than y\n \
    \   if x > y {\n        return -1\n    }\n\n    // x is smaller than y\n    if\
    \ x < y {\n        return -1\n    }\n\n    // x and y are both even\n    if x\
    \ == y {\n        return -1\n    }\n\n    // x is even\n    if x % 2 == 0 {\n\
    \        return x + 1\n    }\n\n    // y is even\n    if y % 2 == 0 {\n      \
    \  return y + 1\n    }\n\n    // x and y are odd\n    let div = x % y\n    if\
    \ div == 0 {\n        return x + 1\n    }\n    return y + 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpn2m_kx5u/tmpn2m_kx5u.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00c62eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00c5fe1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00c5fe1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00c5fe07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn2m_kx5u                        0x000055e4017e024d <unavailable> + 4685

    5    libc.so.6                          0x00002b00c64d6460 __libc_start_main +
    245

    6    tmpn2m_kx5u                        0x000055e4017dfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // Initialize max to largest\
    \ positive number that can be \n    // represented by an Int.\n    let max = Int(IntMax)\n\
    \n    // Initialize result to -1\n    var result = -1\n\n    // Initialize x to\
    \ y if x <= y\n    if (x <= y) {\n        max = x\n    }\n\n    // Initialize\
    \ x to y if x > y\n    if x > y {\n        max = y\n    }\n\n    // Loop from\
    \ min to max to find an even number\n    for num in min..max {\n        // Return\
    \ num if even\n        if num % 2 == 0 {\n            result = num\n         \
    \   break\n        }\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp9462k596.swift:13:19: error: cannot find 'IntMax' in scope\n  \
    \  let max = Int(IntMax)\n                  ^~~~~~\n/tmp/tmp9462k596.swift:29:19:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n    for num\
    \ in min..max {\n                  ^~\n                  ...\n/tmp/tmp9462k596.swift:29:16:\
    \ error: generic parameter 'T' could not be inferred\n    for num in min..max\
    \ {\n               ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable\
    \ public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        guard\
    \ x > 0 else { return -1 }\n        return -1\n    }\n    let min = (x < y ? x\
    \ : y)\n    let max = ((x > y ? x : y) - min)\n    return (min + (max-min) / 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmprz95azk5/tmprz95azk5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3f0947c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3f063eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3f063e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3f063d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprz95azk5                        0x000055a1cc9ad24d <unavailable> + 4685

    5    libc.so.6                          0x00002ad3f0b33460 __libc_start_main +
    245

    6    tmprz95azk5                        0x000055a1cc9acef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    \n    // Make sure x and y\
    \ are positive\n    if x < 0 || y < 0 {\n        return -1\n    }\n    \n    //\
    \ Find the smallest number that is greater than or equal to x and \n    // less\
    \ than or equal to y\n    let result = x + 1\n    \n    // If x is bigger than\
    \ y, then we should return the smallest number \n    // that is greater than or\
    \ equal to x\n    if x > y {\n        result = x\n    }\n    \n    // If y is\
    \ bigger than x, then we should return the smallest number \n    // that is less\
    \ than or equal to y\n    if y > x {\n        result = y\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmppwle01yc.swift:24:9: error: cannot assign to value: 'result' is\
    \ a 'let' constant\n        result = x\n        ^~~~~~\n/tmp/tmppwle01yc.swift:19:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = x + 1\n   \
    \ ^~~\n    var\n/tmp/tmppwle01yc.swift:30:9: error: cannot assign to value: 'result'\
    \ is a 'let' constant\n        result = y\n        ^~~~~~\n/tmp/tmppwle01yc.swift:19:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = x + 1\n   \
    \ ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        let tmp\
    \ = x\n        x = y\n        y = tmp\n    }\n\n    if x == 0 || y == 0 {\n  \
    \      return -1\n    }\n\n    var evenNums = [Int]()\n    var oddNums = [Int]()\n\
    \n    for n in stride(from: x, through: y, by: 2) {\n        if n % 2 == 0 {\n\
    \            evenNums.append(n)\n        } else {\n            oddNums.append(n)\n\
    \        }\n    }\n\n    if evenNums.isEmpty && oddNums.isEmpty {\n        return\
    \ 0\n    }\n\n    if evenNums.isEmpty {\n        return -1\n    }\n\n    if oddNums.isEmpty\
    \ {\n        return -1\n    }\n\n    if evenNums.first! > oddNums.first! {\n \
    \       return evenNums.first!\n    }\n\n    return oddNums.first!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp1ipgh50z.swift:13:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = y\n        ^\n/tmp/tmp1ipgh50z.swift:14:9: error: cannot\
    \ assign to value: 'y' is a 'let' constant\n        y = tmp\n        ^\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var smallestNum = y // y is\
    \ the smallest\n    var biggestNum = x // x is the biggest\n\n    if x <= y {\n\
    \        // x is smaller than y, so swap them\n        let temp = x\n        x\
    \ = y\n        y = temp\n    }\n\n    while (biggestNum - smallestNum > 1) {\n\
    \        // Divide the biggest number by the smallest one and see if the quotient\n\
    \        // is even or odd.\n        let quotient = biggestNum / smallestNum\n\
    \        if quotient % 2 == 0 {\n            // quotient is even, so swap the\
    \ numbers and try the other half\n            biggestNum = biggestNum % smallestNum\n\
    \            smallestNum = smallestNum % biggestNum\n        } else {\n      \
    \      // quotient is odd, so swap the numbers and try the other half\n      \
    \      smallestNum = smallestNum % biggestNum\n            biggestNum = biggestNum\
    \ % smallestNum\n        }\n    }\n\n    return biggestNum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpe3ilg8oe.swift:17:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = y\n        ^\n/tmp/tmpe3ilg8oe.swift:18:9: error: cannot\
    \ assign to value: 'y' is a 'let' constant\n        y = temp\n        ^\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result: Int = 0\n    while\
    \ x < y {\n        if (x&1 == 0 && y&1 != 0) || x&1 == 1 && y&1 == 0 {\n     \
    \       return -1\n        }\n        x += 1\n        y -= 1\n        result =\
    \ x\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpdhk0lgwc.swift:16:11: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n        x += 1\n        ~ ^\n/tmp/tmpdhk0lgwc.swift:17:11:\
    \ error: left side of mutating operator isn't mutable: 'y' is a 'let' constant\n\
    \        y -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return max(min(x + 1, y),\
    \ min(x - 1, y))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpc16p12hg/tmpc16p12hg.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8083dabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8083aa2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8083aa2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8083aa17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc16p12hg                        0x0000561b96bfc29d <unavailable> + 4765

    5    libc.so.6                          0x00002b8083f97460 __libc_start_main +
    245

    6    tmpc16p12hg                        0x0000561b96bfbf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var max: Int = 0\n    var\
    \ min: Int = 0\n    for i in\n        0..<min(y, x) {\n            var m: Int\n\
    \            if i == 0 || i == min(y, x) {\n                m = i\n          \
    \  } else {\n                m = i + 1 // \"i + 1\" because we cannot get max\
    \ number in range\n            }\n            if m > max {\n                max\
    \ = m\n            }\n        }\n    \n    for i in\n        0..<max(y, x) {\n\
    \            var m: Int\n            if i == 0 || i == max(y, x) {\n         \
    \       m = i\n            } else {\n                m = i - 1 // \"i - 1\" because\
    \ we cannot get min number in range\n            }\n            if m < min {\n\
    \                min = m\n            }\n        }\n    \n    return max * min\
    \ / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpzpkme7if.swift:14:13: error: cannot call value of non-function\
    \ type 'Int'\n        0..<min(y, x) {\n            ^\n/tmp/tmpzpkme7if.swift:27:13:\
    \ error: cannot call value of non-function type 'Int'\n        0..<max(y, x) {\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tlet min = x > y ? x : y\n\t\
    let max = x > y ? y : x\n\tfor i in min...max {\n\t\tif i % 2 == 0 {\n\t\t\treturn\
    \ i\n\t\t}\n\t}\n\treturn -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abe87488c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe8717f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abe8717f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abe8717f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abe8717ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpb94x9mfj                        0x000055956c45386e <unavailable> + 6254

    6    tmpb94x9mfj                        0x000055956c4532d0 <unavailable> + 4816

    7    libc.so.6                          0x00002abe87674460 __libc_start_main +
    245

    8    tmpb94x9mfj                        0x000055956c452fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n  if x < y {\n    return -1\n\
    \  }\n  \n  if x == y {\n    return x\n  }\n  \n  if x % 2 == 0 {\n    return\
    \ (x + y)/2\n  }\n  \n  if y % 2 == 0 {\n    return (y + x)/2\n  }\n  \n  return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpef1khkqq/tmpef1khkqq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af97d3eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af97d0e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af97d0e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af97d0e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpef1khkqq                        0x0000559c8262424d <unavailable> + 4685

    5    libc.so.6                          0x00002af97d5da460 __libc_start_main +
    245

    6    tmpef1khkqq                        0x0000559c82623ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    \n    let even = 0\n    let\
    \ odd = 1\n    \n    if y >= x {\n        if x % 2 == 0 {\n            return\
    \ x\n        } else {\n            let result = x + (y - x) / 2 * odd + x\n  \
    \          if result >= y {\n                return x\n            } else if result\
    \ <= y {\n                return result\n            } else {\n              \
    \  return -1\n            }\n        }\n    } else {\n        if y % 2 == 0 {\n\
    \            return y\n        } else {\n            let result = x + (y - x)\
    \ / 2 * even + y\n            if result >= x {\n                return y\n   \
    \         } else if result <= x {\n                return result\n           \
    \ } else {\n                return -1\n            }\n        }\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp8odluzom/tmp8odluzom.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af799bd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7998ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7998ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7998cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8odluzom                        0x000055c77a76224d <unavailable> + 4685

    5    libc.so.6                          0x00002af799dc3460 __libc_start_main +
    245

    6    tmp8odluzom                        0x000055c77a761ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Make this more efficient\n\
    \    if x > y {\n        if x % 2 == 0 {\n            return x\n        } else\
    \ {\n            return y\n        }\n    } else if x < y {\n        if y % 2\
    \ == 0 {\n            return y\n        } else {\n            return x\n     \
    \   }\n    }\n\n    var max = 1\n    for num in 1..1000 {\n        if num % 2\
    \ == 0 {\n            if num > max {\n                max = num\n            }\n\
    \        }\n    }\n\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp5_66rkoe.swift:27:17: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for num in 1..1000 {\n                ^~\n        \
    \        ...\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let evens = Array(1...x).filter{\
    \ $0 % 2 }\n    guard evens.count > 0 else { return -1 }\n    let index = evens.index{$0\
    \ >= y}\n    return evens[index] >= y ? evens[index] : -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpugerf80m.swift:11:41: error: cannot convert value of type 'Int'\
    \ to closure result type 'Bool'\n    let evens = Array(1...x).filter{ $0 % 2 }\n\
    \                                     ~~~^~~\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tif x >= y {\n\t\treturn -1\n\
    \t}\n\n\tlet m = (x + y) >> 1\n\t\n\tif x % 2 == 0 {\n\t\tif m % 2 == 0 {\n\t\t\
    \treturn x\n\t\t} else {\n\t\t\treturn m\n\t\t}\n\t} else {\n\t\tif m % 2 == 1\
    \ {\n\t\t\treturn y\n\t\t} else {\n\t\t\treturn m\n\t\t}\n\t}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpzsguhsa7/tmpzsguhsa7.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4925617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b492530eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b492530e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b492530d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzsguhsa7                        0x00005588d5e2a24d <unavailable> + 4685

    5    libc.so.6                          0x00002b4925803460 __libc_start_main +
    245

    6    tmpzsguhsa7                        0x00005588d5e29ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if (x > y) || (x == y) ||\
    \ (x < 0)\n    {\n        return -1\n    }\n    if (x <= 0) || (y == 0) || (x\
    \ > y)\n    {\n        return -1\n    }\n    for var i = x - 1; i < y + 1; i++\
    \ {\n        if (i % 2 == 0) return i\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmphlyubbf7.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = x - 1; i < y + 1; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmphlyubbf7.swift:20:25: error: expected '{' after 'if' condition\n     \
    \   if (i % 2 == 0) return i\n                        ^\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // Write your code here\n\
    \    if x > y {\n        var temp: Int = x\n        x = y\n        y = temp\n\
    \    }\n    var temp: Int = x - y\n    var result: Int = -1\n    var remainder:\
    \ Int = temp\n    while remainder != 0 {\n        result++\n        remainder\
    \ = remainder % 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpswfvr5de.swift:14:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = y\n        ^\n/tmp/tmpswfvr5de.swift:15:9: error: cannot\
    \ assign to value: 'y' is a 'let' constant\n        y = temp\n        ^\n/tmp/tmpswfvr5de.swift:21:15:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        result++\n\
    \              ^~\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        let temp\
    \ = x\n        x = y\n        y = temp\n    }\n    if x % 2 != 0 {\n        let\
    \ temp = x\n        x = y\n        y = temp\n    }\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x - 1\n    }\n    for a in 1...x\
    \ {\n        if y % a == 0 {\n            return a - x\n        }\n    }\n   \
    \ return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpvgs6kz8c.swift:13:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = y\n        ^\n/tmp/tmpvgs6kz8c.swift:14:9: error: cannot\
    \ assign to value: 'y' is a 'let' constant\n        y = temp\n        ^\n/tmp/tmpvgs6kz8c.swift:18:9:\
    \ error: cannot assign to value: 'x' is a 'let' constant\n        x = y\n    \
    \    ^\n/tmp/tmpvgs6kz8c.swift:19:9: error: cannot assign to value: 'y' is a 'let'\
    \ constant\n        y = temp\n        ^\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x >= y {\n        var m\
    \ = x\n        x = y\n        y = m\n    }\n    for n in 0..<Int(sqrt(Double(x)+Double(y))+1)\
    \ {\n        var m = (x*(x+1))/2\n        if x <= y {\n            if m > Double(y)\
    \ {\n                m = Double(y) - 1\n            } else {\n               \
    \ m = Double(y) + 1 - m\n            }\n        }\n        if (m+Double(n))/2\
    \ > y {\n            break\n        }\n    }\n    if m == 0.0 {\n        m = -1\n\
    \    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmperex55b9.swift:13:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = y\n        ^\n/tmp/tmperex55b9.swift:14:9: error: cannot\
    \ assign to value: 'y' is a 'let' constant\n        y = m\n        ^\n/tmp/tmperex55b9.swift:16:22:\
    \ error: cannot find 'sqrt' in scope\n    for n in 0..<Int(sqrt(Double(x)+Double(y))+1)\
    \ {\n                     ^~~~\n/tmp/tmperex55b9.swift:29:8: error: cannot find\
    \ 'm' in scope\n    if m == 0.0 {\n       ^\n/tmp/tmperex55b9.swift:30:9: error:\
    \ cannot find 'm' in scope\n        m = -1\n        ^\n/tmp/tmperex55b9.swift:32:12:\
    \ error: cannot find 'm' in scope\n    return m\n           ^\n"
  stdout: ''
  timestamp: 1659979065
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let smaller = max(x, y)\n\
    \    let greater = min(x, y)\n\n    // If they're equal, return the smaller one\n\
    \    if smaller == greater {\n        return smaller\n    }\n\n    // If x is\
    \ greater, return x if it's evenly divisible by 2, else the smaller number\n \
    \   if x >= greater {\n        return x % 2 == 0 ? x : smaller\n    }\n\n    //\
    \ If y is greater, return y if it's evenly divisible by 2, else the smaller number\n\
    \    if y >= greater {\n        return y % 2 == 0 ? y : smaller\n    }\n\n   \
    \ // If they're both even or both odd, return the smaller of them\n    return\
    \ smaller\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp1un_cy2h/tmp1un_cy2h.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ac6eacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ac6ba3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ac6ba3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ac6ba27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1un_cy2h                        0x00005638223ca33d <unavailable> + 4925

    5    libc.so.6                          0x00002b8ac7098460 __libc_start_main +
    245

    6    tmp1un_cy2h                        0x00005638223c9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var smallest = x\n    var\
    \ largest = y\n    if smallest < largest {\n        for _ in 1...(largest - smallest\
    \ + 1) {\n            if smallest % 2 == 0 {\n                return smallest\n\
    \            }\n            smallest += 2\n        }\n        return -1\n    }\n\
    \    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpnx2kubuw/tmpnx2kubuw.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc60388c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc6007fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc6007f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc6007e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnx2kubuw                        0x000055b77de5133d <unavailable> + 4925

    5    libc.so.6                          0x00002acc60574460 __libc_start_main +
    245

    6    tmpnx2kubuw                        0x000055b77de50fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let x = x - 1\n    let y =\
    \ y - 1\n    if (x < y) {\n        var x: Int = 1\n        var y: Int = 0\n  \
    \      var z: Int = 0\n        \n        while x != 0 {\n            x -= 1\n\
    \            if x == y {\n                z = x\n                break\n     \
    \       }\n            y += 1\n        }\n        return z\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpmwag77p3/tmpmwag77p3.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7161374c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b716106bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b716106b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b716106a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmwag77p3                        0x0000562a0397a1bd <unavailable> + 4541

    5    libc.so.6                          0x00002b7161560460 __libc_start_main +
    245

    6    tmpmwag77p3                        0x0000562a03979e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n\n    guard\
    \ (x != 0 && y != 0) else {\n        return result\n    }\n\n    if x > y {\n\
    \        var tmp = x\n        x = y\n        y = tmp\n    }\n\n    let (maxX,\
    \ maxY) = make_ranges(x: x, y: y)\n    let maxI = maxX.count\n    let maxJ = maxY.count\n\
    \n    let evenCount = maxI.filter({ $0 % 2 == 0 }).count\n    let oddCount = maxJ.filter({\
    \ $0 % 2 == 1 }).count\n\n    if (evenCount == 0 && oddCount == 0) || (evenCount\
    \ > 0 && oddCount == 0) {\n        result = -1\n    } else {\n        var maxEven\
    \ = maxI.maxElement()!\n        var maxOdd = maxJ.maxElement()!\n\n        if\
    \ maxEven > maxOdd {\n            maxEven = maxOdd\n            maxOdd = maxEven\n\
    \        }\n\n        let divisor = maxEven + (maxEven - maxOdd)\n        result\
    \ = (maxEven + maxOdd - 1) / divisor\n    }\n\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmphottit0l.swift:19:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = y\n        ^\n/tmp/tmphottit0l.swift:20:9: error: cannot\
    \ assign to value: 'y' is a 'let' constant\n        y = tmp\n        ^\n/tmp/tmphottit0l.swift:23:24:\
    \ error: cannot find 'make_ranges' in scope\n    let (maxX, maxY) = make_ranges(x:\
    \ x, y: y)\n                       ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    \n    let nums = Array<Int>()\n\
    \    \n    // fill array with numbers\n    for i in 0 ..< y {\n        nums.append(i)\n\
    \    }\n    for i in 0 ..< (y - x) {\n        nums.append(x + i)\n    }\n    for\
    \ i in 0 ..< (y + x - y) {\n        nums.append(x - i)\n    }\n    \n    // sort\
    \ by ascending order then find biggest number\n    let result = nums.sorted(by:\
    \ <)\n        .enumerated()\n        .filter { case (i, n) where n % 2 == 0 }\n\
    \        .max(by: { $0.1 + $1.0 })\n    \n    // return -1 if there is no such\
    \ number\n    return result == nil ? -1 : result!.value\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp8ymg0ecc.swift:28:19: error: expected identifier in enum 'case'\
    \ declaration\n        .filter { case (i, n) where n % 2 == 0 }\n            \
    \      ^\n/tmp/tmp8ymg0ecc.swift:28:19: error: 'case' label can only appear inside\
    \ a 'switch' statement\n        .filter { case (i, n) where n % 2 == 0 }\n   \
    \               ^\n/tmp/tmp8ymg0ecc.swift:16:14: error: cannot use mutating member\
    \ on immutable value: 'nums' is a 'let' constant\n        nums.append(i)\n   \
    \     ~~~~ ^\n/tmp/tmp8ymg0ecc.swift:12:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let nums = Array<Int>()\n    ^~~\n    var\n/tmp/tmp8ymg0ecc.swift:19:14:\
    \ error: cannot use mutating member on immutable value: 'nums' is a 'let' constant\n\
    \        nums.append(x + i)\n        ~~~~ ^\n/tmp/tmp8ymg0ecc.swift:12:5: note:\
    \ change 'let' to 'var' to make it mutable\n    let nums = Array<Int>()\n    ^~~\n\
    \    var\n/tmp/tmp8ymg0ecc.swift:22:14: error: cannot use mutating member on immutable\
    \ value: 'nums' is a 'let' constant\n        nums.append(x - i)\n        ~~~~\
    \ ^\n/tmp/tmp8ymg0ecc.swift:12:5: note: change 'let' to 'var' to make it mutable\n\
    \    let nums = Array<Int>()\n    ^~~\n    var\n/tmp/tmp8ymg0ecc.swift:28:17:\
    \ error: contextual type for closure argument list expects 1 argument, which cannot\
    \ be implicitly ignored\n        .filter { case (i, n) where n % 2 == 0 }\n  \
    \              ^\n                  _ in\n/tmp/tmp8ymg0ecc.swift:28:17: error:\
    \ cannot convert value of type '()' to closure result type 'Bool'\n        .filter\
    \ { case (i, n) where n % 2 == 0 }\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp8ymg0ecc.swift:29:25: error: cannot convert value of type 'Int' to closure\
    \ result type 'Bool'\n        .max(by: { $0.1 + $1.0 })\n                   ~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x == 0 || y == 0 || x >\
    \ y {\n        return -1\n    }\n    \n    var even = 0\n    var odd = 0\n   \
    \ \n    while even + odd < x {\n        even += 2\n        odd += 2\n    }\n \
    \   \n    if even > x {\n        return even\n    } else {\n        return odd\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpayna6mm6/tmpayna6mm6.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20a4086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20a3d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20a3d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20a3d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayna6mm6                        0x000055e76117a1bd <unavailable> + 4541

    5    libc.so.6                          0x00002b20a4272460 __libc_start_main +
    245

    6    tmpayna6mm6                        0x000055e761179e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var biggest = UInt()\n   \
    \ for num in stride(from: x, to: y, by: 1) {\n        if BigInt((num + 1) & 1)\
    \ == BigInt((num + 1) >> 1) {\n            biggest = num\n        }\n    }\n \
    \   return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp5d_t9ibr.swift:13:12: error: cannot find 'BigInt' in scope\n  \
    \      if BigInt((num + 1) & 1) == BigInt((num + 1) >> 1) {\n           ^~~~~~\n\
    /tmp/tmp5d_t9ibr.swift:13:37: error: cannot find 'BigInt' in scope\n        if\
    \ BigInt((num + 1) & 1) == BigInt((num + 1) >> 1) {\n                        \
    \            ^~~~~~\n/tmp/tmp5d_t9ibr.swift:14:23: error: cannot assign value\
    \ of type 'Int' to type 'UInt'\n            biggest = num\n                  \
    \    ^~~\n                      UInt( )\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return x | y >> 1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp45cv9mpr/tmp45cv9mpr.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20cfff7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20cfceeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20cfcee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20cfced7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp45cv9mpr                        0x0000557edea491bd <unavailable> + 4541

    5    libc.so.6                          0x00002b20d01e3460 __libc_start_main +
    245

    6    tmp45cv9mpr                        0x0000557edea48e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    guard x >= 0 && x <= y &&\
    \ y >= 0 else { return -1 }\n    if x == y { return x }\n    if x < y { return\
    \ x + 1 }\n    if x <= y { return x - 1 }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpycelxm01/tmpycelxm01.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add9e83ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add9e531b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add9e531988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add9e5307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpycelxm01                        0x0000557d03f351bd <unavailable> + 4541

    5    libc.so.6                          0x00002add9ea26460 __libc_start_main +
    245

    6    tmpycelxm01                        0x0000557d03f34e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x == y {\n        return\
    \ x\n    }\n    var x: Int\n    var y: Int\n    if x < y {\n        x = y\n  \
    \      y = x\n    } else {\n        x = x\n        y = y\n    }\n    var t: Int\n\
    \    var d: Int\n    for t = x; t < y; t += 2 {\n        d = (t * t) % MOD\n \
    \       if d == 0 {\n            break\n        }\n    }\n    return t\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpnp20ojzk.swift:25:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for t = x; t < y; t += 2 {\n    ^   ~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnp20ojzk.swift:20:11:\
    \ error: assigning a variable to itself\n        x = x\n        ~ ^ ~\n/tmp/tmpnp20ojzk.swift:21:11:\
    \ error: assigning a variable to itself\n        y = y\n        ~ ^ ~\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x >= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    var num = 0\n    var\
    \ num2 = 0\n    \n    if x <= 10 {\n        for num in 0...x {\n            if\
    \ num & 1 == 1 {\n                num2 = num + y\n                break\n    \
    \        }\n        }\n    }\n    \n    else if x >= 11 {\n        for num in\
    \ 1...x {\n            if num & 1 == 1 {\n                num2 = num + y\n   \
    \             break\n            }\n        }\n    }\n    \n    return num2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpfy8vdzjg/tmpfy8vdzjg.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41423a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4142097b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4142097988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41420967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfy8vdzjg                        0x0000558eca07533d <unavailable> + 4925

    5    libc.so.6                          0x00002b414258c460 __libc_start_main +
    245

    6    tmpfy8vdzjg                        0x0000558eca074fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let max = (x < y) ? x : y\n\
    \    if max % 2 == 0 {\n        return max / 2\n    } else {\n        let left\
    \ = (x % 2 == 0) ? x : y\n        let right = (y % 2 == 0) ? y : x\n        if\
    \ left == right {\n            return -1\n        }\n        return choose_num(left,\
    \ right)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpvn_wpi8l.swift:20:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(left, right)\n                         ^\n \
    \                         x:    y: \n"
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var x = abs(x), y = abs(y)\n\
    \    var min = Int(max(x, y))\n    var max = Int(min(min+2, y))\n    var mid =\
    \ Int(min(min+2, max))\n    while (mid < min+2 && mid < max+2) {\n        if ((mid*mid)\
    \ == x) return mid\n        else if ((mid*mid) == y) return mid\n        mid =\
    \ mid+1\n    }\n    if mid == min {\n        if mid == max+1 {\n            if\
    \ mid == y-1{ return y-1 }\n            else { return -1 }\n        }\n      \
    \  return mid\n    }\n    if mid == max+1 {\n        if mid == y-1{ return -1\
    \ }\n        else { return mid }\n    }\n    if mid == max+2 {\n        if mid\
    \ == x-1{ return mid }\n        else { return mid }\n    }\n    if mid == max+3\
    \ {\n        if mid == x-1{ return x-1}\n        else { return mid }\n    }\n\
    \    if mid == max+4 {\n        if mid == x-1{ return max+1}\n        else { return\
    \ mid }\n    }\n    if mid == max+5 {\n        if mid == x-1{ return x-1}\n  \
    \      else { return min+1 }\n    }\n    if mid == max+6 {\n        if mid ==\
    \ x-1{ return x-1}\n        else { return max+1 }\n    }\n    if mid == max+7\
    \ {\n        if mid == x-1{ return max+1}\n        else { return max+1 }\n   \
    \ }\n    if mid == max+8 {\n        if mid == x-1{ return max+1}\n        else\
    \ { return min+1 }\n    }\n    if mid == max+9 {\n        if mid == x-1{ return\
    \ max+1}\n        else { return max+1 }\n    }\n    if mid == max+10 {\n     \
    \   if mid == x-1{ return max+1}\n        else { return max+1 }\n    }\n    if\
    \ mid == max+11 {\n        if mid == x-1{ return max+1}\n        else { return\
    \ max+1 }\n    }\n    if mid == max+12 {\n        if mid == x-1{ return max+1}\n\
    \        else { return max+1 }\n    }\n    if mid == max+13 {\n        if mid\
    \ == x-1{ return max+1}\n        else { return max+1 }\n    }\n    if mid == max+14\
    \ {\n        if mid == x-1{ return max+1}\n        else { return max+1 }\n   \
    \ }\n    if mid == max+15 {\n        if mid == x-1{ return max+1}\n        else\
    \ { return max+1 }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp98hikgm7.swift:16:29: error: expected '{' after 'if' condition\n\
    \        if ((mid*mid) == x) return mid\n                            ^\n/tmp/tmp98hikgm7.swift:17:34:\
    \ error: expected '{' after 'if' condition\n        else if ((mid*mid) == y) return\
    \ mid\n                                 ^\n/tmp/tmp98hikgm7.swift:13:19: error:\
    \ cannot call value of non-function type 'Int'\n    var max = Int(min(min+2, y))\n\
    \                  ^\n/tmp/tmp98hikgm7.swift:14:19: error: cannot call value of\
    \ non-function type 'Int'\n    var mid = Int(min(min+2, max))\n              \
    \    ^\n/tmp/tmp98hikgm7.swift:16:23: error: binary operator '==' cannot be applied\
    \ to operands of type 'Duration' and 'Int'\n        if ((mid*mid) == x) return\
    \ mid\n            ~~~~~~~~~ ^  ~\n/tmp/tmp98hikgm7.swift:16:23: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Duration, Duration),\
    \ (Int, Int)\n        if ((mid*mid) == x) return mid\n                      ^\n\
    /tmp/tmp98hikgm7.swift:17:28: error: binary operator '==' cannot be applied to\
    \ operands of type 'Duration' and 'Int'\n        else if ((mid*mid) == y) return\
    \ mid\n                 ~~~~~~~~~ ^  ~\n/tmp/tmp98hikgm7.swift:17:28: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Duration, Duration),\
    \ (Int, Int)\n        else if ((mid*mid) == y) return mid\n                  \
    \         ^\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    var max_int = x\n    for var i = 2; i < y; i++\
    \ {\n        if max_int % i == 0 {\n            max_int = max_int / i\n      \
    \  } else {\n            break\n        }\n    }\n    if max_int == x {\n    \
    \    return -1\n    }\n    return max_int\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpde7hsz4s.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < y; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpde7hsz4s.swift:12:26: error: missing argument labels 'x:y:' in call\n\
    \        return choose_num(y, x)\n                         ^\n               \
    \           x: y: \n"
  stdout: ''
  timestamp: 1659979063
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n  guard x < y else {\n    return\
    \ -1\n  }\n\n  guard x > y else {\n    return -1\n  }\n\n  var small = y\n  var\
    \ big = x\n\n  // If the number we are searching is in the range, then we'll try\
    \ to find \n  // the biggest even number in the range\n  while (big - small >\
    \ 1) {\n    if is_even(big) {\n      big += 2\n    } else {\n      big -= 1\n\
    \    }\n  }\n\n  return big\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmn5b8vwy.swift:25:8: error: cannot find 'is_even' in scope\n  \
    \  if is_even(big) {\n       ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979063
