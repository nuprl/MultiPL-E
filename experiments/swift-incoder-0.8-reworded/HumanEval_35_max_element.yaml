name: HumanEval_35_max_element
language: swift
prompt: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1, 2,\
  \ 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
  /// 123\nfunc max_element(l: [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
  \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
completions: ["    if l.isEmpty() {\n        fatalError(\"Cannot compute max of an\
    \ empty array\")\n    }\n    var max : Int? = nil\n    for val in l {\n      \
    \  if max == nil || val > max {\n            max = val\n        }\n    }\n   \
    \ if max == nil {\n        return 0\n    }\n    return max!", "\tswitch l.count\
    \ {\n\tcase 0:\n\t\treturn -1\n\tcase 1:\n\t\treturn l[0]\n\tdefault:\n\t\tmaxValue\
    \ := l[0]\n\t\tfor _, v := range l[1:] {\n\t\t\tif v > maxValue {\n\t\t\t\tmaxValue\
    \ = v\n\t\t\t}\n\t\t}\n\t\treturn maxValue\n\t}", "  let max = l.max()\n  if max\
    \ < 0 {\n    return 0\n  }\n  return max", "    let maxValue = l.max()\n    let\
    \ maxIndex: Int = l.index(of: maxValue)\n    return maxIndex == -1 ? maxValue\
    \ : l[maxIndex]", "    l.sort()\n    return l[0]", '  return max_element_index(l,
    index_max_index)', "  let length = l.count\n  if length == 0 {\n    return 0\n\
    \  }\n  var max = l.min\n  for element in l {\n    if element > max {\n      max\
    \ = element\n    }\n  }\n  return max", "    l.sort()\n    return l[l.count-1]",
  '    return l.maxElement()', "    let res = l.max()\n    if res == l {\n       \
    \ return l[0]\n    }\n    return res", '  return l.maxElement()', "    let r =\
    \ l.max()\n    if r > 0 {\n        return r\n    }\n    return Int64(0)", '    return
    l.max()', '    return l.max()', "    let (min, max) = min_max(l)\n    return min\
    \ < 0 ? min : max", "    var max: Int = 0\n    var i: Int = 0\n\n    for e in\
    \ l {\n        if e > max {\n            max = e\n        }\n    }\n\n    return\
    \ max", "    if l.isEmpty() {\n        return 0\n    }\n    let h = l.minElement()\n\
    \    guard let i = l.indexOf(h, offsetBy: 1) else {\n        return h\n    }\n\
    \    guard let v = l[i], v > h else {\n        return h\n    }\n    return v",
  "    if l == nil {\n        return 0\n    }\n    var m = l[0]\n    for v in l[1..]\
    \ {\n        if v > m {\n            m = v\n        }\n    }\n    return m", " \
    \   let min = l[0]\n    for i in l.indices {\n        if l[i] < min {\n      \
    \      min = l[i]\n        }\n    }\n    return min", "\tlet count = l.count\n\
    \tif count == 0 {\n\t\treturn 0\n\t} else if count == 1 {\n\t\treturn l[0]\n\t\
    }\n\n\t// Find the index of the highest positive element\n\tvar maxIndex = count\
    \ - 1\n\tfor i : Int in 0 ..< count {\n\t\tif l[i] > 0 {\n\t\t\tmaxIndex = i\n\
    \t\t\tbreak\n\t\t}\n\t}\n\n\t// Compute sum of the highest positive elements\n\
    \tvar sum = 0\n\tfor i : Int in 0 ..< count {\n\t\tif i != maxIndex {\n\t\t\t\
    sum += l[i]\n\t\t}\n\t}\n\n\t// If negative elements are found, decrement sum\
    \ and set maxIndex to highest non-negative element\n\tfor i : Int in 0 ..< count\
    \ {\n\t\tif l[i] < 0 {\n\t\t\tsum -= l[i]\n\t\t\tif sum < 0 {\n\t\t\t\tsum = 0\n\
    \t\t\t\tmaxIndex = i\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn l[maxIndex]",
  "    var max: Int = 0\n    for i in l.indices {\n        if l[i] > max {\n     \
    \       max = l[i]\n        }\n    }\n    return max", "    if l == nil || len(l)\
    \ == 0 {\n        return 0\n    }\n    max := l[0]\n    for _, v := range l[1:]\
    \ {\n        if v > max {\n            max = v\n        }\n    }\n    return max",
  "\tl.sort()\n\treturn l[0]", '    return l.max()', "  var i = 0\n  var result =\
    \ Int()\n  for num in l {\n    if num > result {\n      result = num\n      i\
    \ = num\n    }\n  }\n  return i", '    return max_element_(l, IntMax)', "    let\
    \ maxElement = l.max()\n    return maxElement", "    var max = 0\n    for el in\
    \ l {\n        if el > max {\n            max = el\n        }\n    }\n    return\
    \ max", '  return reduce(0, l, { $0 < $1 })', "  if l == nil { return 0 }\n  if\
    \ l.count < 1 { return 0 }\n  var maxIndex: Int = 0\n  for index in 0..<l.count\
    \ {\n    if l[index] > l[maxIndex] {\n      maxIndex = index\n    }\n  }\n  return\
    \ l[maxIndex]", '  return max_element_index(l, 0)', "    if l == nil { return\
    \ 0 }\n    if l.count < 1 { return 0 }\n\n    var max = l[0]\n    for x in l {\n\
    \        if x > max {\n            max = x\n        }\n    }\n    return max",
  '    return max(l)', "    var maxIndex = -1\n    for index in 0..<l.count {\n  \
    \      if l[index] > l[maxIndex] {\n            maxIndex = index\n        }\n\
    \    }\n    return l[maxIndex]", '  return l.max()', '    return l.max()', '  return
    l.max()', "    if l.count < 1 {\n        return -1\n    }\n\n    l.sort()\n  \
    \  if l[0] == 0 {\n        return l[0]\n    }\n\n    return l[0] > l[1] ? l[0]\
    \ : l[1]", "    if l == nil || l.count == 0 {\n        return 0\n    }\n    return\
    \ max(l[0], l[l.count - 1])", "    guard l.isEmpty == false else { return -1 }\n\
    \    var max: Int = 0\n    for element in l {\n        if element > max {\n  \
    \          max = element\n        }\n    }\n    return max", "    l.sort()\n \
    \   return l[l.count - 1]", "    var max = l[0]\n    for i in 1..<l.count {\n\
    \        if l[i] > max {\n            max = l[i]\n        }\n    }\n    return\
    \ max", '    return max_element_with_index(l: l, index: 0)', "    var max = l[0]\n\
    \    for x in l {\n        if x < max {\n            max = x\n        }\n    }\n\
    \    return max", '    return l.max()', '  return maxElement(l)', "    var max\
    \ = Int(0)\n    for x in l {\n        if x > max {\n            max = x\n    \
    \    }\n    }\n    return max", "  var max = l[0]\n  for val in l {\n    if val\
    \ > max {\n      max = val\n    }\n  }\n  return max", "  if l == nil { return\
    \ 0 }\n  var max : Int = l[0]\n  for e in l{\n    if e > max {\n      max = e\n\
    \    }\n  }\n  return max", "    let max: Int = l[0]\n    for v in l {\n     \
    \   if v > max {\n            max = v\n        }\n    }\n    return max", "  \
    \  var max = l[0]\n    for i in 1..<l.count {\n        if l[i] > max {\n     \
    \       max = l[i]\n        }\n    }\n    return max", "    l.sort()\n    return\
    \ l[l.count - 1]", '    return max_element_impl(_native_typed_data.NativeArrayOf(l.baseAddress!),
    l.count)', '    return max(l)', "    var maxElement = l[0]\n    for i in 1..<l.count\
    \ {\n        if l[i] > maxElement {\n            maxElement = l[i]\n        }\n\
    \    }\n    return maxElement", "    if l.isEmpty {\n        return 0\n    }\n\
    \    var max = l.first!\n    for e in l {\n        if e > max {\n            max\
    \ = e\n        }\n    }\n    return max", "\tmin_max {\n\t\treturn l[0]\n\t}",
  "    switch l.count {\n    case 0:\n        return 0\n    case 1:\n        return\
    \ l[0]\n    }\n\n    var max : Int = 0\n    for idx in 0..<l.count {\n       \
    \ if idx > 0 && l[idx] > max {\n            max = l[idx]\n        }\n    }\n\n\
    \    return max", "    let n = l.count\n    for i in 0..<n {\n        if l[i]\
    \ > l[i+1] {\n            return l[i]\n        }\n    }\n    return l[0]", '  return
    min_element(l: l).0', '    return maxElement(l, 0)', "  var maxVal = l[0]\n  for\
    \ i in 1..<l.count {\n    if l[i] > maxVal {\n      maxVal = l[i]\n    }\n  }\n\
    \  return maxVal", '    return max_element_(l, l.count)', "    let max = Int(l[0])\n\
    \    for i in 1 ..< l.count {\n        if max < Int(l[i]) {\n            max =\
    \ Int(l[i])\n        }\n    }\n    return max", "    l.sort()\n    return l[l.count\
    \ - 1]", "    let mut max = l[0]\n    for el in l {\n        if el > max {\n \
    \           max = el\n        }\n    }\n    return max", "    var maxVal: Int\
    \ = 0\n    var maxIndex: Int = 0\n    for idx in 0 ..< l.count {\n        if maxVal\
    \ == 0 {\n            maxVal = l[idx]\n            maxIndex = idx\n        } else\
    \ {\n            if l[idx] > maxVal {\n                maxVal = l[idx]\n     \
    \           maxIndex = idx\n            }\n        }\n    }\n    return maxIndex",
  "\treturn max(l)", "    var max: Int = 0\n    for i in l {\n        if i > max {\n\
    \            max = i\n        }\n    }\n    return max", '    return max(l)',
  "    let maxValue = l[0]\n    for i in 1..<l.count {\n        if l[i] > maxValue\
    \ {\n            maxValue = l[i]\n        }\n    }\n    return maxValue", "  \
    \  var max = l[0]\n    for x in l {\n        if x > max {\n            max = x\n\
    \        }\n    }\n    return max", '    return max(l)', "    var maxVal = Int64(0)\n\
    \    for e in l {\n        if e > maxVal {\n            maxVal = e\n        }\n\
    \    }\n    return Int(maxVal)", "    let result = Int64(0)\n    for el in l {\n\
    \        result = max(result, el)\n    }\n    return result", "    \n    var max:\
    \ Int\n    var maxIndex: Int = 0\n    \n    for i in 0 ..< l.count {\n       \
    \ if max < l[i] {\n            max = l[i]\n            maxIndex = i\n        }\n\
    \    }\n    \n    return maxIndex", "    \n    let n = l.count\n    if n < 1 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    \n\
    \    var max = l[0]\n    for i in 1..<n {\n        if l[i] > max {\n         \
    \   max = l[i]\n        }\n    }\n    return max", "    l.sort()\n    return l[0]",
  "    var max = l[0]\n    for value in l {\n        if value > max {\n          \
    \  max = value\n        }\n    }\n    return max", '    return l.max()', '    return
    max(l)', "    var max = l[0]\n    for i in l.reverse() {\n        if i > max {\n\
    \            max = i\n        }\n    }\n    return max", '    return max_element_impl(l,
    0)', '    return max(l)', "    let min = min(l)\n    return max(l.filter { $0\
    \ > min })[0]", "    var maxElem = l[0]\n    for i in 1 ..< l.count {\n      \
    \  if l[i] > maxElem {\n            maxElem = l[i]\n        }\n    }\n    return\
    \ maxElem", "    var max = -math.infinity\n    for el in l {\n        if el >\
    \ max {\n            max = el\n        }\n    }\n    return max", '    return
    max(l)', "    if l.isEmpty() {\n        return 0\n    }\n    var max = l[0]\n\
    \    for x in l {\n        if x > max {\n            max = x\n        }\n    }\n\
    \    return max", "    var max = l[0]\n    for i in 1..<l.count {\n        if\
    \ l[i] > max {\n            max = l[i]\n        }\n    }\n    return max", " \
    \   var max = l[0]\n    for i in 1 ..< l.count {\n        if l[i] > max {\n  \
    \          max = l[i]\n        }\n    }\n    return max", "    if l.count == 0\
    \ {\n        return 0\n    }\n    var maxIdx = 0\n    var maxVal = l[0]\n    for\
    \ idx in 0..<l.count {\n        if maxVal < l[idx] {\n            maxVal = l[idx]\n\
    \            maxIdx = idx\n        }\n    }\n    return maxIdx", "    l.sort()\n\
    \    return l[0]", '  return max_element_generic(l, Int)', "    if l == nil {\n\
    \        return -1\n    }\n    \n    var max = l[0]\n    for i in 1 ..< l.count\
    \ {\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    return\
    \ max", "    var max = l[0]\n    for x in l {\n        if x > max {\n        \
    \    max = x\n        }\n    }\n    return max", "    var max = l[0]\n    for\
    \ v in l {\n        if v > max {\n            max = v\n        }\n    }\n    return\
    \ max", "    var max: Int?\n    for elem in l {\n        if max == nil || elem\
    \ > max {\n            max = elem\n        }\n    }\n    return max!", '    return
    max(l, comparing: <)', "    var res = l[0]\n    for &x in l {\n        if x <\
    \ res {\n            res = x\n        }\n    }\n    return res", '  return max(l)',
  '    return min_element(l).max(maxIndex(l))', "  var max = 0\n  for idx, v in l.enumerated()\
    \ {\n    if v > max {\n      max = v\n    }\n  }\n  return max", "    if l ==\
    \ nil {\n        return 0\n    }\n    var maxIndex = -1\n    var maxVal = l.min()\n\
    \    for index in 0 ..< l.count {\n        if l[index] > maxVal {\n          \
    \  maxIndex = index\n            maxVal = l[index]\n        }\n    }\n    return\
    \ maxVal", "    l.sort()\n    return l[0]", "\treturn max(l)", '    return max_element_with_index(l:
    l, index_key: identity)', "    if l.isEmpty() {\n        return 0\n    }\n   \
    \ var max = l[0]\n    for el in l {\n        if el > max {\n            max =\
    \ el\n        }\n    }\n    return max", "    l.sort()\n    return l[l.count -\
    \ 1]", "    let l = l.sorted()\n    if l.count == 0 {\n        return 0\n    }\n\
    \    var max = l[0]\n    for i in 1 ..< l.count {\n        if l[i] > max {\n \
    \           max = l[i]\n        }\n    }\n    return max", '    return l.max()',
  "    l.sort()\n    return l[l.endIndex - l]", "    l.sort()\n    return l[l.count\
    \ - 1]", '    return max_element_impl(l)', "    var max = l[0]\n    for i in 1..<l.count\
    \ {\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    return\
    \ max", '    return max(l: l)', "\tlet maxIndex = l.index(l.startIndex, offsetBy:\
    \ 0)\n\tif maxIndex == l.endIndex {\n\t\treturn 0\n\t}\n\treturn l[maxIndex]",
  "    var min: Int = 0\n    var max: Int = 0\n    for x in l {\n        if x < min\
    \ {\n            min = x\n        }\n        if x > max {\n            max = x\n\
    \        }\n    }\n    return max", "    var max = l[0]\n    for i in 1..<l.count\
    \ {\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    return\
    \ max", '    return l[0]', "    var max = l[0]\n    for i in 1..l.count {\n  \
    \      if l[i] > max {\n            max = l[i]\n        }\n    }\n    return max",
  "\tif l.count > 0 {\n\t\treturn max(l[0], l[1])\n\t}\n\treturn 0", '    return maxElement(l,
    compare: >)', "  maxElement := l[0]\n  for i := 1; i < len(l); i++ {\n    if l[i]\
    \ > maxElement {\n      maxElement = l[i]\n    }\n  }\n  return maxElement", '    return
    max(l)', "\treturn l.maxElement()", "    l.sort()\n    return l[len(l)-1]", "\t\
    max := l[0]\n\tfor _, x := range l {\n\t\tif x > max {\n\t\t\tmax = x\n\t\t}\n\
    \t}\n\treturn max", '    return l.maxElement()', "\tlet sorted = l.sorted()\n\t\
    var max = Int64(sorted[0])\n\tfor i in sorted {\n\t\tif i > max {\n\t\t\tmax =\
    \ i\n\t\t}\n\t}\n\treturn Int(max)", '    return l.max()', '    return l.max(by:
    max)', "\treturn l.max()", "    let n = l.count\n    var largest = 0\n    for\
    \ i in 0..<n {\n        if l[i] > largest {\n            largest = l[i]\n    \
    \    }\n    }\n    return largest", '    return l[l.indices().maxElement()]',
  '    return l.reduce(0){ max($0, $1) }', '  return reduceMax(l, max)', "    let\
    \ maxIndex = l.count\n    for i in 0 ..< maxIndex {\n        if l[i] > l[maxIndex]\
    \ {\n            maxIndex = i\n        }\n    }\n    return maxIndex", "    if\
    \ l == nil || len(l) == 0 {\n        return 0\n    }\n    if l[0] > l[1] { return\
    \ l[0] }\n    if l[0] > l[2] { return l[0] }\n    for _, b := range l[2:] {\n\
    \        if b > l[1] { break }\n        if b > l[2] { break }\n    }\n    return\
    \ l[1]", '    return l.reduce(0, {$1>$2})', "    if l.isEmpty() {\n        return\
    \ -1\n    }\n\n    var largest = l[0]\n    for v in l {\n        if v > largest\
    \ {\n            largest = v\n        }\n    }\n    return largest", "    if l\
    \ == nil {\n        return -1\n    }\n    max := l[0]\n    for _,el in l.enumerated()\
    \ {\n        if el > max {\n            max = el\n        }\n    }\n    return\
    \ max", '    return l.sorted(by: { $0 > $1 }).last!', '    return max(l.count())',
  '  return l.max()', "  var maxValue = l[0]\n  for val in l {\n    if val > maxValue\
    \ {\n      maxValue = val\n    }\n  }\n  return maxValue", '    return l.max()',
  '    return max_element_impl(l)', "\tl.sort()\n\treturn l[0]", "    var max = l[0]\n\
    \    for x in l {\n        if x < max {\n            max = x\n        }\n    }\n\
    \    return max", "    if l.count > 0 {\n        return l[0]\n    }\n    return\
    \ -1", "    let n = l.count\n    guard n > 0 else { return 0 }\n    let largest\
    \ = l[0]\n    for i in 1..<n {\n        if l[i] > largest {\n            largest\
    \ = l[i]\n        }\n    }\n    return largest", "\tif l == nil || l.Length <\
    \ 1 {\n\t\treturn 0\n\t}\n\n\treturn l[0]", '    return l.reduce(0)(&max)', "\t\
    if l == nil {\n\t\treturn 0\n\t}\n\n\tvar maxNum Int = 0\n\tvar i Int = 0\n\t\
    _ = i\n\tfor ; i < len(l); i++ {\n\t\tif l[i] > maxNum {\n\t\t\tmaxNum = l[i]\n\
    \t\t}\n\t}\n\treturn maxNum", "    var max = Int64.min\n    for element in l {\n\
    \        if element > max {\n            max = element\n        }\n    }\n   \
    \ return max", "\tvar max : Int?\n\n\tfor i, v := range l {\n\t\tif i == 0 {\n\
    \t\t\tmax = v\n\t\t\tcontinue\n\t\t}\n\n\t\tif v > max {\n\t\t\tmax = v\n\t\t\
    }\n\t}\n\n\tif max != nil {\n\t\treturn max!\n\t}\n\n\treturn 0", '    return
    l.max() ?? Int.max', '    return l.max()', "    var largest = l[0]\n    for el\
    \ in l {\n        if el > largest {\n            largest = el\n        }\n   \
    \ }\n    return largest", "    var max: Int = 0\n    var max = l[0]\n\n    for\
    \ element in l {\n        if element > max {\n            max = element\n    \
    \    }\n    }\n    return max", '    return max_element_impl(l, 0)', '    return
    max_elementImpl(l)', "    var max = 0\n    for x in l {\n        if max < x {\n\
    \            max = x\n        }\n    }\n    return max", "    var max = 0\n  \
    \  for i : Int in l {\n        if i > max {\n            max = i\n        }\n\
    \    }\n    return max", '  return l[l.count - 1]', "    if l == nil { return\
    \ 0 }\n    \n    l.sort()\n    \n    if l.isEmpty() {\n        return 0\n    }\n\
    \    \n    return l[0]", "    if l == nil || l.count == 0 {\n        return 0\n\
    \    }\n    var max = l[0]\n    for v in l {\n        if v > max {\n         \
    \   max = v\n        }\n    }\n    return max", "    var max = l[0]\n    for i\
    \ in l.indices {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max", '    return l.max()', "    var max = 0\n    var maxIndex\
    \ = 0\n    for i in l.indices {\n        let v = l[i]\n        if v > max {\n\
    \            max = v\n            maxIndex = i\n        }\n    }\n    return maxIndex",
  '    return max(l.startIndex, l.endIndex)', "    l.sort()\n    return l[l.count\
    \ - 1]", "    let max = l[0]\n    for i in l {\n        if i > max {\n       \
    \     max = i\n        }\n    }\n    return max", "    var max = l.min()\n   \
    \ for el in l {\n        if el > max {\n            max = el\n        }\n    }\n\
    \    return max", '    return max(l)', "    if l == nil {\n        return -1\n\
    \    }\n    var result = Int64(0)\n    var max = Int64(0)\n    for _, v := range\
    \ l {\n        if v > max {\n            max = v\n            result = Int64(0)\n\
    \        }\n        result = max(result, v)\n    }\n    return result", "    let\
    \ count = l.count\n    if count == 0 {\n        return 0\n    }\n    if count\
    \ < 1 {\n        return l[0]\n    }\n    if count < 2 {\n        return l[0]\n\
    \    }\n    if count == 2 {\n        if l[0] < l[1] {\n            return l[0]\n\
    \        }\n        return l[1]\n    }\n    var max = l[0]\n    for i in 0..<count-1\
    \ {\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    return\
    \ max", '    return l.max_element { $0 }', "    l.sort()\n    return l[l.endIndex\
    \ - 1]", "    var max = l[0]\n    for i in 1 ..< l.count {\n        if max < l[i]\
    \ {\n            max = l[i]\n        }\n    }\n    return max", "    var maxVal\
    \ = -Int.max\n    for i in l {\n        if i > maxVal {\n            maxVal =\
    \ i\n        }\n    }\n    return maxVal", "  var max = Double(Int.max) // Initialized\
    \ to -Int, since Int < Double\n  var maxIndex = 0\n  for idx in 0..<l.count {\n\
    \    if l[idx] > max {\n      max = l[idx]\n      maxIndex = idx\n    }\n  }\n\
    \  return maxIndex", "    let max = l.max()\n    if max < l.first() {\n      \
    \  return l.first()\n    }\n    return max", '    return max(l)', "    var maxVal\
    \ : Int = 0\n\n    for x in l {\n        if x > maxVal {\n            maxVal =\
    \ x\n        }\n    }\n\n    return maxVal", "    var max: Int = 0\n    for element\
    \ in l {\n        if element > max {\n            max = element\n        }\n \
    \   }\n    return max", "    var max = l[0]\n    for i in 1 ..< l.count {\n  \
    \      if l[i] > max {\n            max = l[i]\n        }\n    }\n    return max",
  "\tvar max = l[0]\n\tfor i := 1; i < len(l); i++ {\n\t\tif l[i] > max {\n\t\t\t\
    max = l[i]\n\t\t}\n\t}\n\treturn max", "    let len = l.count\n    if len == 0\
    \ {\n        return 0\n    }\n    if len == 1 {\n        return l[0]\n    }\n\n\
    \    var max = 0\n    var maxIndex = 0\n    for i in 0..<len {\n        if l[i]\
    \ > max {\n            max = l[i]\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex", "\tif l == nil { return }\n\n\tmax := l[0]\n\n\tfor _,\
    \ e := range l {\n\t\tif e > max {\n\t\t\tmax = e\n\t\t}\n\t}\n\n\treturn max",
  '    return max(l)', '    return l.maxElement()', "    var result = Int64(0)\n \
    \   for i in l {\n        if result < i {\n            result = i\n        }\n\
    \    }\n    return result", "    let length = l.count\n    let res = Int64(0)\n\
    \    for i in 0..<length {\n        if l[i] > res {\n            res = l[i]\n\
    \        }\n    }\n    return res", "\tlet max: Int = 0\n\tfor element in l {\n\
    \t\tif element > max {\n\t\t\tmax = element\n\t\t}\n\t}\n\treturn max", "    l.sort()\n\
    \    return l[l.count-1]", "\tvar max : Int = 0\n\tfor _, ele : Int in\n\t\tl.sort()\
    \ { max <= $0 }\n\treturn max", "    let max = l.max()\n    return max == l.last\
    \ ? 0 : max", "    var max = 0\n    for num in l {\n        if num > max {\n \
    \           max = num\n        }\n    }\n    return max"]
stop_tokens:
- "\n}"
