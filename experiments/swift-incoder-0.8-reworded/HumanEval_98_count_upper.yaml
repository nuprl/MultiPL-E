name: HumanEval_98_count_upper
language: swift
prompt: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
  /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
  \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
  \ String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
  \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
  \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\")\
  \ == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
completions: ["    var count = 0\n    for index in s.characters.indices {\n      \
    \  if s.isUpper(index) {\n            count += 1\n        }\n    }\n    return\
    \ count", "    if s == \"\" {\n        return 0\n    }\n    if let chars = s.unicodeScalars\
    \ {\n        let start = chars.startIndex\n        if let upper = unicodeScalars.range(of:\
    \ \"\\u{0000}\\u{0400}-\\u{0500}\\u{0510}-\\u{0519}\\u{1D00}-\\u{1D7F}\") {\n\
    \            let end = upper.upperBound\n            return s.distance(from: start,\
    \ to: end) / 2\n        }\n    }\n    return 0", '    return count_upper(s, s.characters.start)',
  "    var count = 0\n    for index in s.indices(of: CharacterSet.uppercaseLetters)\
    \ {\n        if index % 2 == 0 {\n            count += 1\n        }\n    }\n \
    \   return count", "    var count = 0\n    for index in 0..<s.characters.count\
    \ {\n        if CharacterSet(s.characters[index]).isUppercase() {\n          \
    \  count += 1\n        } else if CharacterSet(s.characters[index]).isUppercase()\
    \ && index%2 == 0 {\n            count += 2\n        } else if CharacterSet(s.characters[index]).isUppercase()\
    \ && index%2 == 1 {\n            count += 2\n        }\n    }\n    return count",
  "    var count = 0\n    for c in s {\n        if c.isUpper() {\n            if c.isUpper()\
    \ && count%2 == 0 {\n                count += 1\n            }\n            count\
    \ = 0\n        } else {\n            count += 1\n        }\n    }\n    return\
    \ count", "\tvar n = 0\n\tfor _, c := range s {\n\t\tif isUpper(c) && evenInd(c,\
    \ i) {\n\t\t\tn++\n\t\t}\n\t}\n\treturn n", "    vowels := countUpper\n    if\
    \ vowels == nil {\n        vowels = make(map[rune]int)\n        for i := runeA;\
    \ i <= runeZ; i++ {\n            vowels[i] = 0\n        }\n    }\n    return vowels[s[startIndexOfVowels()]]",
  "    return s.characters.filter { $0 >= 'A' && $0 <= 'Z' && $0 % 2 == 0 }.count",
  "    if let vowels = vowels {\n        for (i, c) in s.characters.enumerated() {\n\
    \            if vowels.contains(c) {\n                if i % 2 == 0 {\n      \
    \              return 1 + count_upper(s.substringFromIndex(i + 1))\n         \
    \       }\n            }\n        }\n    }\n    return 0", "    if s.isEmpty {\
    \ return 0 }\n\n    var upperCount = 0\n    for index in 0..<s.count {\n     \
    \   if s[index].isUpper() {\n            upperCount += 1\n            if index\
    \ % 2 == 0 {\n                upperCount += 1\n            }\n        }\n    }\n\
    \    return upperCount", '    return s.unicodeScalars.filter({ $0.isUppercase
    }).filter({ $0.isEvenIndex }).count', "    let mut i: Int = 0\n    for c in s.chars()\
    \ {\n        if c >= 'A' && c <= 'Z' {\n            if i % 2 == 0 { i += 1 }\n\
    \        } else {\n            i += 0\n        }\n    }\n    return i", '    return
    count_of_vowels(s, is_vowel)', "    if let s = String(s) {\n        return s.count{\
    \ $0.unicodeScalars.isUppercase }\n    } else {\n        return 0\n    }", " \
    \   var n = s.length\n    for i := 0; i < n; i++ {\n        var ch = s[i]\n  \
    \      if ch >= 'A' && ch <= 'Z' {\n            var code = ch - 'A'\n        \
    \    if code % 2 == 1 {\n                n--\n            }\n        }\n    }\n\
    \    return n", "\tlet vowels = \"AEIOUaeiou\".characters\n\tvar count = 1\n\t\
    for c in s.characters {\n\t\tif vowels.contains(c) && c % 2 == 0 {\n\t\t\tcount\
    \ += 1\n\t\t}\n\t}\n\treturn count", "    let vowels = \"AEIOUaeiou\"\n    return\
    \ s.characters.filter({ vowels.contains($0) }).filter({ $0 % 2 == 1}).count",
  "    var result = 0\n    \n    for (_, character) in s.enumerated() {\n        if\
    \ character == \"a\" {\n            result++\n        }\n        else if character\
    \ == \"A\" {\n            result++\n        }\n        else if character == \"\
    e\" {\n            result++\n        }\n        else if character == \"E\" {\n\
    \            result++\n        }\n        else if character == \"i\" {\n     \
    \       result++\n        }\n        else if character == \"I\" {\n          \
    \  result++\n        }\n        else if character == \"o\" {\n            result++\n\
    \        }\n        else if character == \"O\" {\n            result++\n     \
    \   }\n        else if character == \"u\" {\n            result++\n        }\n\
    \        else if character == \"U\" {\n            result++\n        }\n    }\n\
    \    \n    return result", "    s switch {\n    case \"aBCdEf\".contains(\"A\"\
    ..\"Z\") => 1\n    case \"abcdefg\".contains(\"A\"..\"Z\") => 0\n    case \"dBBE\"\
    .contains(\"B\"..\"E\") => 0\n    case \"dBBE\".contains(\"B\"..\"E\") => 0\n\
    \    case \"dBBE\".contains(\"B\"..\"E\") => 0\n    case \"dBBE\".contains(\"\
    B\"..\"E\") => 0\n    case \"dBBE\".contains(\"B\"..\"E\") => 0\n    case \"dBBE\"\
    .contains(\"B\"..\"E\") => 0\n    case \"dBBE\".contains(\"B\"..\"E\") => 0\n\
    \    case \"dBBE\".contains(\"B\"..\"E\") => 0\n    case \"dBBE\".contains(\"\
    B\"..\"E\") => 0\n    case \"dBBE\".contains(\"B\"..\"E\") => 0\n    case \"dBBE\"\
    .contains(\"B\"..\"E\") => 0\n    case \"dBBE\".contains(\"B\"..\"E\") => 0\n\
    \    case \"dBBE\".contains(\"B\"..\"E\") => 0\n    case \"dBBE\".contains(\"\
    B\"..\"E\") => 0\n    case \"dBBE\".contains(\"B\"..\"E\") => 0\n    case \"dBBE\"\
    .contains(\"B\"..\"E\") => 0\n    case \"dBBE\".contains(\"B\"..\"E\") => 0\n\
    \    case \"dBBE\".contains(\"B\"..\"E\") => 0\n    case \"dBBE\".contains(\"\
    B\"..\"E\") => 0\n    case \"dBBE\".contains(\"B\"..\"E\") => 0\n    case \"dBBE\"\
    .contains(\"B\"..\"E\") => 0\n    case \"dBBE\".contains(\"B\"..\"E\") => 0\n\
    \    case \"dBBE\".contains(\"B\"..\"E\") => 0\n    case \"dBBE\".contains(\"\
    B\"..\"E\") => 0\n    case \"dBBE\".contains(\"B\"..\"E\") => 0\n    case \"dBBE\"\
    .contains(\"B\"..\"E\") => 0\n    case \"dBBE\".contains(\"B\"..\"E\") => 0\n\
    \    case \"dBBE\".contains(\"B\"..\"E", "\ts := strings.ToLower(s)\n\tvar result\
    \ int\n\tfor i := 0; i < len(s); i += 2 {\n\t\tif s[i] == 'A' && s[i+1] == 'E'\
    \ {\n\t\t\tresult += 2\n\t\t}\n\t}\n\treturn result", "    var result = 1\n  \
    \  s[0..<s.count] // skip empty strings\n    for i in 0..<s.count {\n        if\
    \ s[i] == 'a' || s[i] == 'A' {\n            continue\n        }\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            result++\n        }\n    }\n    return\
    \ result", "    let vowels = \"aeiouAEIOU\"\n    var result = 1\n    for index\
    \ in s.characters {\n        if index < 0 || index >= s.characters.count {\n \
    \           continue\n        }\n        if vowels.characters[index % vowels.characters.count]\
    \ == 97 {\n            result++\n        }\n    }\n    return result", '    return
    s.unicodeScalars.filter({ $0.value >= UnicodeScalar(UnicodeScalar(0x41)) }).count',
  "    var result : Int = 0\n    for i in 0..<s.count {\n        switch s[i] {\n \
    \       case Character(\"a\"):\n            if i != 0 {\n                result\
    \ += 1\n            }\n        case Character(\"A\"):\n            if i != 0 {\n\
    \                result += 1\n            }\n        case Character(\"b\"):\n\
    \            if i != 1 {\n                result += 1\n            }\n       \
    \ case Character(\"B\"):\n            if i != 1 {\n                result += 1\n\
    \            }\n        case Character(\"c\"):\n            if i != 2 {\n    \
    \            result += 1\n            }\n        case Character(\"C\"):\n    \
    \        if i != 2 {\n                result += 1\n            }\n        case\
    \ Character(\"d\"):\n            if i != 3 {\n                result += 1\n  \
    \          }\n        case Character(\"D\"):\n            if i != 3 {\n      \
    \          result += 1\n            }\n        case Character(\"e\"):\n      \
    \      if i != 4 {\n                result += 1\n            }\n        case Character(\"\
    E\"):\n            if i != 4 {\n                result += 1\n            }\n \
    \       case Character(\"f\"):\n            if i != 5 {\n                result\
    \ += 1\n            }\n        case Character(\"F\"):\n            if i != 5 {\n\
    \                result += 1\n            }\n        default:\n            assert(false)\n\
    \        }\n    }\n    return result", "    var result = 0\n\n    // Iterate over\
    \ s.\n    for idx in 0..<s.count {\n        if idx % 2 == 0 {\n            //\
    \ If index is even, check if character is uppercase vowel.\n            if s[idx]\
    \ >= 'a' && s[idx] <= 'z' {\n                result += 1\n            }\n    \
    \    }\n    }\n\n    return result", "    var count = 0\n    for c in s.characters\
    \ {\n        guard c >= 'A' && c <= 'Z' else {\n            return count\n   \
    \     }\n        if isUpper(c) {\n            count += 1\n        }\n    }\n \
    \   return count", '    return count_upper_inner(s.unicodeScalars, s.utf16Count,
    s.count)', "    var count = 0\n    for idx: Int = 0 to s.count {\n        guard\
    \ s[idx] >= 'a' && s[idx] <= 'z' else {\n            return 0\n        }\n   \
    \     if idx % 2 == 0 {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for idx in stride(from: 0, to: s.count, by:\
    \ 2) {\n        if s[idx] == 'A' && s[idx+1] == 'A' {\n            count += 1\n\
    \        } else if s[idx] == 'a' && s[idx+1] == 'a' {\n            count += 1\n\
    \        } else if s[idx] == 'a' && s[idx+1] == 'A' {\n            count += 1\n\
    \        } else if s[idx] == 'A' && s[idx+1] == 'a' {\n            count += 1\n\
    \        }\n    }\n    return count", "    var count = 0\n    for idx in s.indices(in:\
    \ s.startIndex) {\n        if idx % 2 == 0 {\n            if s[idx] >= 'a' &&\
    \ s[idx] <= 'z' {\n                count += 1\n            }\n        }\n    }\n\
    \    return count", "  var vowelIndex = 0\n  var count = 0\n\n  for ch in s {\n\
    \    if let _ = ch.unicodeScalars.first {\n      vowelIndex += 1\n      if vowelIndex\
    \ % 2 == 0 {\n        count += 1\n      }\n    }\n  }\n  return count", "    var\
    \ count = 0\n    for idx in 0..<s.characters.count {\n        if s.characters[idx].isUpper()\
    \ {\n            if idx%2 == 0 {\n                count += 1\n            }\n\
    \        }\n    }\n    return count", "    var count = 0\n    for i in s.characters.indices\
    \ {\n        let c = s[i]\n        if c == 'A' || c == 'a' {\n            count\
    \ += 1\n        }\n    }\n    return count", "  return s.filter { Character.isUpper($0.characterAtIndex(Int($0.offsetByAncestor(from:\
    \ s)!))) }\n    .count", "    let counts = count_vowels(s)\n    var uppercase_count:\
    \ Int = 0\n    for i in 0..<s.count {\n        if counts[i] % 2 == 1 {\n     \
    \       uppercase_count += 1\n        }\n    }\n    return uppercase_count", " \
    \   var count = 0\n    for idx in 0..<s.characters.count {\n        if idx % 2\
    \ == 0 {\n            if s.characters[idx].isUpper() {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count", "    let result =\
    \ Int()\n    let start = s.startIndex\n    let end = s.endIndex\n    for index\
    \ in start..<end {\n        let char = String(s[index])\n        if Char.uppercaseLetters.contains(char)\
    \ {\n            result += 1\n        }\n    }\n    return result", "    var vowels\
    \ = Set(\"AEIOU\")\n    for index, c in enumerate(s) {\n        if index%2 ==\
    \ 0 && vowels.contains(c) {\n            vowels.remove(c)\n        }\n    }\n\
    \    return vowels.count", "    // O(n) time complexity using recursion\n    var\
    \ result = 0.0\n    for index := 0; index < len(s); index += 1 {\n        if s[index]\
    \ == 'a' || s[index] == 'e' || s[index] == 'i' || s[index] == 'o' || s[index]\
    \ == 'u' {\n            result += 1.0\n        }\n    }\n    return result", " \
    \   c := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            c++\n   \
    \     }\n    }\n    return c", "    var count = 0\n    for c in s {\n        if\
    \ c == c.upper() {\n            if c.isUpper() && count%2 == 0 {\n           \
    \     count += 1\n            }\n        }\n    }\n    return count", '    return
    s.rangeOfString(upper, options: .RegularExpressionSearch).location == .NotFound
    ? 0 : s.rangeOfString(upper, options: .RegularExpressionSearch).location - s.startIndex',
  "\tvar c = 0\n\tfor i, r := range s {\n\t\tif r >= 'A' && r <= 'Z' {\n\t\t\tc +=\
    \ 1\n\t\t}\n\t\tif i % 2 == 0 && r >= 'a' && r <= 'z' {\n\t\t\tc += 1\n\t\t}\n\
    \t}\n\treturn c", "    guard s.isEmpty else {\n        return 0\n    }\n\n   \
    \ var count = 0\n\n    for index, _ in s.enumerated() {\n        if s[index].isUppercase\
    \ {\n            count += 1\n        }\n    }\n\n    return count", "    if let\
    \ s = s.data(using: .utf8), let _ = try? s.unicodeScalars.filter({ $0.isUppercase\
    \ }).filter({ $0.isOdd }).count {\n        return Int64(s.unicodeScalars.filter({\
    \ $0.isUppercase }).filter({ $0.isOdd }).count) / 2\n    }\n    return 0", "\t\
    let len = s.characters.count\n\tif len < 1 {\n\t\treturn 0\n\t}\n\tlet evens =\
    \ len % 2 == 0\n\tvar count = 0\n\tfor i <- 0 ..< len {\n\t\tswitch s[i] {\n\t\
    \tcase 'A':\n\t\tcase 'E':\n\t\t\tcount = count + 1\n\t\tcase 'U':\n\t\t\tif evens\
    \ {\n\t\t\t\tcount = count + 1\n\t\t\t}\n\t\tdefault:\n\t\t\tbreak\n\t\t}\n\t\
    }\n\treturn count", "    let count = s.unicodeScalars.filter({ $0.isUppercase\
    \ && $0.isInverted }).count\n    return count % 2 == 0 ? count / 2 : count", " \
    \   letters := make([]rune, unicode.MaxValue)\n    if unicode.IsUpper(unicode.ReplacementChar,\
    \ s) {\n        for _, r := range s {\n            if !unicode.IsUpper(r, unicode.ReplacementChar)\
    \ {\n                letters[unicode.ToLower(r)] = r\n            }\n        }\n\
    \    }\n    count := 0\n    for _, r := range s {\n        if letters[r] != '@'\
    \ {\n            count++\n        }\n    }\n    return count", "    let length\
    \ = s.length\n    for i in s.characters.indices?.dropFirst() {\n        if i %\
    \ 2 == 0 && s[i] == s.lowercased() {\n            return Int64(s[i])\n       \
    \ }\n    }\n    return 0", "    var count : Int = 0\n    \n    for index in 0..<s.count\
    \ {\n        let character = s[index].uppercaseString.count\n        if character\
    \ % 2 == 1 {\n            count += character\n        }\n    }\n    return count",
  "    var count = 0\n    s_.repeated() {\n        switch self[Int($0)] {\n      \
    \  case 0:\n        default: break\n        case 1:\n            count += 1\n\
    \        case 2:\n            count += 2\n        case 3:\n            count +=\
    \ 3\n        case 4:\n            count += 4\n        case 5:\n            count\
    \ += 5\n        case 6:\n            count += 6\n        case 7:\n           \
    \ count += 7\n        case 8:\n            count += 8\n        case 9:\n     \
    \       count += 9\n        case 10:\n            count += 10\n        case 11:\n\
    \            count += 11\n        case 12:\n            count += 12\n        case\
    \ 13:\n            count += 13\n        case 14:\n            count += 14\n  \
    \      case 15:\n            count += 15\n        case 16:\n            count\
    \ += 16\n        case 17:\n            count += 17\n        case 18:\n       \
    \     count += 18\n        case 19:\n            count += 19\n        case 20:\n\
    \            count += 20\n        case 21:\n            count += 21\n        case\
    \ 22:\n            count += 22\n        case 23:\n            count += 23\n  \
    \      case 24:\n            count += 24\n        case 25:\n            count\
    \ += 25\n        case 26:\n            count += 26\n        case 27:\n       \
    \     count += 27\n        case 28:\n            count += 28\n        case 29:\n\
    \            count += 29\n        case 30:\n            count += 30\n        case\
    \ 31:\n            count += 31\n        case 32:\n            count += 32\n  \
    \      case 33:\n            count += 33\n        case 34:\n            count\
    \ += 34\n        case 35:\n            count += 35\n        case 36:\n       \
    \     count += 36\n        case 37:\n            count += 37\n        case 38:\n\
    \            count += 38\n        case 39:\n            count += 39\n        case\
    \ 40:\n            count += 40\n        case 41:\n            count += 41\n  \
    \      case 42:\n            count += 42\n        case 43:\n            count\
    \ += 43\n        case 44:\n            count += 44\n        case 45:\n       \
    \     count += 45\n        case 46:\n            count += 46\n        case 47:\n\
    \            count += 47\n        case 48:\n            count += 48\n        case\
    \ 49:\n            count += 49\n        case 50:\n            count += 50\n  \
    \      case 51:\n            count += 51\n        case 52:\n            count\
    \ += 52\n        case 53:\n            count += 53\n        case 54:\n       \
    \     count += 54\n        case 55:\n            count += 55\n        case 56:\n\
    \            count += 56\n        case 57:\n            count += 57\n", "    return\
    \ s.unicodeScalars.filter { $0.value >= 0 }\n        .filter{$0.value == 0x41\
    \ }\n        .count", "\tvar n = 0\n\tfor _, c := range s {\n\t\tif c == 'A' ||\
    \ c == 'a' {\n\t\t\tn++\n\t\t}\n\t}\n\treturn n", "    if s == \"\" {\n      \
    \  return 0\n    }\n    let n = s.characters\n    var i = 0\n    while i < n {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            i += count_vowels(s, &i+1)\n\
    \        }\n        i += 1\n    }\n    return i", "    var result = Int(0)\n \
    \   for i in 0..<s.count {\n        if s[i] == 'A' || s[i] == 'a' {\n        \
    \    if i + 2 < s.count && s[i+1] == 'B' && s[i+2] == 'B' {\n                result\
    \ += Int(1)\n            }\n        }\n    }\n    return result", "\tvar count\
    \ : Int = 0\n\tfor index in 0..<s.count {\n\t\tif s[index] >= 'a' && s[index]\
    \ <= 'z' {\n\t\t\tif s[index] == 'z' && count > 0 {\n\t\t\t\tbreak\n\t\t\t}\n\t\
    \t\tcount += 1\n\t\t}\n\t}\n\treturn count", "    if s.isEmpty {\n        return\
    \ 0\n    }\n\n    var upper = 0\n    var pos = 0\n    repeat {\n        if s[pos]\
    \ >= 'a' && s[pos] <= 'z' {\n            if pos == 0 {\n                upper\
    \ += 1\n            }\n        }\n        pos = pos + 1\n    } while pos < s.count\
    \ && s[pos] >= 'a' && s[pos] <= 'z'\n\n    return upper", "    chars := s.characters\n\
    \n    var n = 0\n    var inVowel = false\n    for i in 0 ..< s.characters.count\
    \ {\n        if chars[i] == 'A' || chars[i] == 'a' {\n            if !inVowel\
    \ {\n                inVowel = true\n                n += 1\n            }\n \
    \       } else {\n            if inVowel {\n                inVowel = false\n\
    \            }\n        }\n    }\n    return n", '    return s.isUpper(s.startIndex)
    ? s.count() : 0;', "    // Only use a single for loop.\n    var count = 0\n  \
    \  var isUpper = true\n    for x in s.characters {\n        if x == x.uppercaseValue\
    \ {\n            count += 1\n        } else if isUpper {\n            count =\
    \ 0\n            isUpper = false\n        }\n    }\n    return count", "    var\
    \ count = 0\n    var prev: Character?\n    for x in s.characters {\n        if\
    \ Character.isUpper(x) && (!prev || CharacterInfo.isVowel(x, prev!)) {\n     \
    \       count += 1\n        }\n        prev = &x\n    }\n    return count", " \
    \   let sLower = String(cString: s).lowercased()\n    var count = 0\n    for i\
    \ in 0..<sLower.characters.count {\n        if sLower[i] == sLower[i].toUpper()\
    \ {\n            count += 1\n        }\n    }\n    return count", '    return
    s.countUp(s.startIndex, s.endIndex, true)', "    let sArr = s.characters\n   \
    \ var evenIndex = 0\n    let upperVowelCount = 0\n    var char: unichar\n\n  \
    \  for char in sArr {\n        if char == unichar(uppercase + 1) {\n         \
    \   evenIndex++\n        } else {\n            if evenIndex % 2 == 0 {\n     \
    \           upperVowelCount++\n            }\n            evenIndex = 0\n    \
    \    }\n    }\n    return upperVowelCount", "\treturn count_upto_indexed(s.lowercased(),\
    \ \"aeiou\", 0)", '    return s.countUpTo(s.endIndex, options: .anchored)', " \
    \   // TODO: Optimize using SIMD if supported.\n    if s.isEmpty {\n        return\
    \ 0\n    }\n    let mut vowels = 0\n    let len = s.count\n    for i in 0..len-1\
    \ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U' {\n            vowels += 1\n        }\n    }\n    return vowels", " \
    \   let vowels = \"aeiouAEIOU\"\n    return s.unicodeScalars.filter({ $0.value\
    \ > 64 && vowels.contains(String($0.value)) }).count { $0.value % 2 == 1 }", " \
    \   let vowels = \"aeiou\"\n    let chars = s.characters\n    var i = 0\n    while\
    \ i < s.count {\n        if chars[i] == vowels.first {\n            i += 2\n \
    \           continue\n        }\n        return chars[i] == vowels.last\n    }\n\
    \    return s.count", "    scanUpper { _ in\n        guard let i = Int($0.index),\
    \ s.utf16.count > i else { return 0 }\n        let upper = s.utf16[i] >= 0x41\
    \ && s.utf16[i] <= 0x5A\n        guard upper else { return 0 }\n        guard\
    \ s.utf16[(i + 1) % s.utf16.count] == 0x5A else { return 0 }\n        return 1\
    \ + count_upper(s.substringWithRange(i..<(i + 2)))\n    }", "    if s == \"\"\
    \ {\n        return 0\n    }\n    let (count, _) = s.characters.enumerate()\n\
    \                .map { UnicodeScalar($0).isUppercase() }\n                .partition(true)\n\
    \                .map { $0 == true }\n                .map { $0.count }\n    return\
    \ count", "    var count = 0\n    for i := 0; i < len(s); i++ {\n        switch\
    \ s[i] {\n        case 'A':\n        case 'E':\n        case 'I':\n        case\
    \ 'O':\n        case 'U':\n            count += 1\n        default:\n        \
    \    break\n        }\n    }\n    return count", "    var count = 1\n    for index1\
    \ in indices(s) {\n        if s[index1] == 'A' || s[index1] == 'E' || s[index1]\
    \ == 'I' || s[index1] == 'O' ||\n            s[index1] == 'U' || s[index1] ==\
    \ 'a' || s[index1] == 'e' || s[index1] == 'i' ||\n            s[index1] == 'o'\
    \ || s[index1] == 'u' {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var i = 0\n    for c in s.unicodeScalars {\n        if c == 0x4E\
    \ { i += 1 }\n    }\n    return i", "    return s.isEmpty ? 0 : 1\n        + s.filter\
    \ { $0.isUppercase }.count { $0 % 2 == 1 }", "    return count_up(s.chars().filter({\
    \ $0 >= 'a' && $0 <= 'z' })).map { $0 }", "    if s.isEmpty { return 0 }\n   \
    \ var uppers = 0\n    var i = 0\n    while i < s.count {\n        guard s[i] ==\
    \ 'A' || s[i] == 'a' || s[i] == 'E' || s[i] == 'e' || s[i] == 'I' || s[i] == 'i'\
    \ || s[i] == 'O' || s[i] == 'o' || s[i] == 'U' || s[i] == 'u' else {\n       \
    \     i += 1 // Not an uppercase vowel\n            continue\n        }\n    \
    \    uppers += 1\n        i += 1 // Increment index to next uppercase vowel\n\
    \    }\n    return uppers", "    var n = 0\n    if s == \"\" {\n        return\
    \ 0\n    }\n    for c in s.characters {\n        if isUppercase(c) {\n       \
    \     if isEvenIndex(c) {\n                n += 1\n            }\n        }\n\
    \    }\n    return n", "    var count = 0\n    for c in s {\n        guard case\
    \ let .UpperLetter(c, index) = c else {\n            preconditionFailure()\n \
    \       }\n        if index % 2 == 0 {\n            count = count + 1\n      \
    \  }\n    }\n    return count", "    var count = 0\n\n    for idx in indices(s)\
    \ {\n        guard s[idx].isUppercase() else { continue }\n        count += Int(idx)\
    \ % 2 == 0\n    }\n\n    return count", "    \n    if let s = s {\n        var\
    \ counter = 1\n        for c in s.characters {\n            if isUppercase(Int(c))\
    \ {\n                counter += 1\n            }\n        }\n        return counter\n\
    \    }\n    return 0", "    guard s.isEmpty == false else { return 0 }\n    guard\
    \ s.count > 0 else { return 0 }\n    var n = 0\n    var prev = 0\n    for _, b\
    \ in s.enumerated() {\n        if b == 'a' {\n            if prev % 2 != 0 {\n\
    \                n += 1\n            }\n        } else if b == 'e' {\n       \
    \     if prev % 2 == 0 {\n                n += 1\n            }\n        } else\
    \ if b == 'i' {\n            if prev % 2 == 0 {\n                n += 1\n    \
    \        }\n        } else if b == 'o' {\n            if prev % 2 != 0 {\n   \
    \             n += 1\n            }\n        } else if b == 'u' {\n          \
    \  if prev % 2 == 0 {\n                n += 1\n            }\n        } else if\
    \ b == 'A' {\n            if prev % 2 != 0 {\n                n += 1\n       \
    \     }\n        } else if b == 'E' {\n            if prev % 2 == 0 {\n      \
    \          n += 1\n            }\n        } else if b == 'I' {\n            if\
    \ prev % 2 == 0 {\n                n += 1\n            }\n        } else if b\
    \ == 'O' {\n            if prev % 2 != 0 {\n                n += 1\n         \
    \   }\n        } else if b == 'U' {\n            if prev % 2 == 0 {\n        \
    \        n += 1\n            }\n        }\n        prev = b\n    }\n    return\
    \ n", "    var count = 0\n    for c in s {\n        if c.isUpper() {\n       \
    \     count += 1\n        }\n        if c.isUpper() && c != s.firstUpper() {\n\
    \            count -= 1\n        }\n    }\n    return count", "    \n    let count\
    \ = s.characters.reduce(0) { accumulator, character in\n        accumulator +\
    \ (character >= 'A' && character <= 'Z' ? 0 : 1)\n    }\n    \n    return count",
  "\tlet a = s.characters\n\tlet l = a.count\n\tvar vowels = 0\n\tvar even = false\n\
    \tfor n in 0 ..< l {\n\t\tlet c = a[n]\n\t\tswitch c {\n\t\tcase \"A\":\n\t\t\t\
    if even {\n\t\t\t\tvowels += 1\n\t\t\t}\n\t\tcase \"E\":\n\t\t\tif even {\n\t\t\
    \t\tvowels += 1\n\t\t\t}\n\t\tcase \"I\":\n\t\t\tif even {\n\t\t\t\tvowels +=\
    \ 1\n\t\t\t}\n\t\tcase \"O\":\n\t\t\tif even {\n\t\t\t\tvowels += 1\n\t\t\t}\n\
    \t\tcase \"U\":\n\t\t\tif even {\n\t\t\t\tvowels += 1\n\t\t\t}\n\t\tdefault:\n\
    \t\t\teven = !even\n\t\t}\n\t}\n\treturn vowels", '    return s.characters.reduce(0,
    combine: {$0 + $1.unicodeScalars.filter({ $0.isUppercase }).count })', "    let\
    \ vowels = \"AEIOUaeiou\"\n    var count = 0\n    for c in s {\n        if vowels.contains(String.fromCString(c))\
    \ {\n            count += 1\n        }\n    }\n    return count", "    let len\
    \ = s.count\n    if len <= 0 {\n        return 0\n    }\n    var i = 0\n    var\
    \ evens = len / 2\n    var even = 0\n    for _ in 0..<evens {\n        if s[i]\
    \ >= 'A' && s[i] <= 'Z' {\n            even += 1\n        }\n        i += 2\n\
    \    }\n    return even", "    if s.isEmpty {\n        return 0\n    }\n    var\
    \ result = 1\n    for c in s.characters.dropFirst() {\n        if c == c.uppercased()\
    \ {\n            result += 1\n        } else if c.isUpper() {\n            break\n\
    \        }\n    }\n    return result", "    \n    let vowels = \"AEIOUaeiou\"\n\
    \    \n    let letters = map(s) { Character($0) }\n    \n    var count = 0\n \
    \   \n    letters.forEach { letter in\n        if vowels.contains(letter) {\n\
    \            count += 1\n        }\n    }\n    \n    return count", "    var result\
    \ = 0\n    for idx in range(len(s) - 1, -1, -1) {\n        if s[idx].isUpper()\
    \ {\n            result += 1\n            if idx % 2 == 0 {\n                result\
    \ += count_upper(s[idx+1:])\n            }\n        }\n    }\n    return result",
  "    var count = 0\n    for c in s {\n        if isUpper(c) {\n            count\
    \ += 1\n        }\n    }\n    return count", '    return count_letters(s, is_vowel)',
  '    return count(s, upperCaseLetter)', "    if s.isEmpty {\n        return 0\n\
    \    }\n    var count = 0\n    for idx in 0..<s.count {\n        guard s.startIndex.successor().advancedBy(idx).uppercased()\
    \ else {\n            continue // not an uppercase character\n        }\n    \
    \    count += 1\n    }\n    return count", "    var count = 0\n    for c in s.characters\
    \ {\n        if c.isUpper() {\n            if isEven(c.index) {\n            \
    \    count += 1\n            }\n        }\n    }\n    return count", "    guard\
    \ s.starts(with: \"aBCdEf\") else { return 0 }\n    var cnt = 0\n    for index\
    \ in stride(from: 0, to: s.characters.count, by: 2) {\n        guard s.characters.element(at:\
    \ index).isUppercase,\n              s.characters.element(at: index).isLowercase\
    \ else {\n            return cnt\n        }\n        cnt += 1\n    }\n    return\
    \ cnt", "    // https://swift.org/blog/swift-evolution-part-3-tuples/\n    return\
    \ (s.characters\n        .enumerate()\n        .map { i, char in\n           \
    \ if i % 2 == 0 {\n                let index = upperIndex(of: char)\n        \
    \        if index > -1 {\n                    return index\n                }\n\
    \            }\n            return nil\n        }\n        .compactMap { $0 }\n\
    \        .count())", "    let mut n = 0\n    for i in s.indices(s.startIndex..<s.endIndex)\
    \ {\n        if s[i..<i+1].isUpper() {\n            n += 1\n        }\n    }\n\
    \    return n", "    \n    var countUpper = 0\n    \n    for i in 0 ..< s.count\
    \ {\n        \n        let chart = s[i]\n        \n        if !chart.isUppercase\
    \ {\n            countUpper += 1\n        }\n    }\n    \n    return countUpper",
  "\tlet len = s.count\n\tlet cap = s.unicodeScalars.filter {\n\t\t$0.value > UnicodeScalar(\"\
    A\") && ($0.value < UnicodeScalar(\"Z\"))\n\t}.count\n\treturn len - cap", '    return
    count_chars(s, isUpper)', "    guard\n        s.startsWith(\"a\") || s.startsWith(\"\
    A\"),\n        let uppercaseLetters = map(s.unicodeScalars.filter({ $0.value >\
    \ 0x41 }), { $0.value })\n    else {\n        return 0\n    }\n    let count =\
    \ _countEvenIndices(uppercaseLetters)\n    if let firstLetter = uppercaseLetters.first\
    \ {\n        if count > 0 && firstLetter.value > 0x41 {\n            count +=\
    \ 1\n        }\n    }\n    return count", "    var count = 0\n\n    for i := 0;\
    \ i < len(s); i += 2 {\n        if s[i] == 'A' && s[i+1] == 'A' {\n          \
    \  count += 1\n        }\n    }\n\n    return count", "    return count_sub_str_indexes(\n\
    \        s, count_sub_str_predicate(SubStrPredicate(startIndex: 0, endIndex: s.count,\
    \ isUpperCase: true), s.startIndex))", "    let evens = s[0..<s.count/4] // even\
    \ indices\n    let vowels = \"AEIOU\".map({ $0.unicodeScalars.first!.value })\
    \ //vowels\n    let uppers = evens.filter({ vowels.contains($0) }) // uppers\n\
    \    return uppers.count", "    var even = false\n    var count = 0\n    for c\
    \ in s.characters {\n        if c.isUpper() {\n            count += 1\n      \
    \  } else {\n            if even {\n                count += 1\n            }\n\
    \            even = !even\n        }\n    }\n    return count", "    func isVowel(x:\
    \ UInt8) -> Bool {\n        let xc = UnicodeScalar(x)\n        return xc.isUppercase()\
    \ && xc.value != UnicodeScalar.Other\n    }\n    var count = 0\n    for i in 0..<s.count\
    \ {\n        if !isVowel(UInt8(i)) {\n            continue\n        }\n      \
    \  if s.startIndex + i%2 == 0 {\n            count += 1\n        }\n    }\n  \
    \  return count", '    return count_chars(s, is_upper, is_even)', "    var count\
    \ = 0\n    for c in s {\n        if let idx = c.unicodeScalars.first {\n     \
    \       switch idx.value {\n            case 0x3042:\n            case 0x3043:\n\
    \                count += 1\n            default:\n                break\n   \
    \         }\n        } else {\n            break\n        }\n    }\n    return\
    \ count", "    var result : Int = 0\n    for i in 0..<s.count {\n        if s[i]\
    \ >= 'a' && s[i] <= 'z' {\n            result += 1\n        } else if s[i] > 'a'\
    \ && s[i] <= 'z' {\n            result -= 1\n        }\n    }\n    return result",
  "    var count = 0\n    for x in s {\n        if x == 'A' || x == 'a' {\n      \
    \      count += 1\n        } else if x == 'B' || x == 'b' {\n            count\
    \ += 1\n        } else if x == 'C' || x == 'c' {\n            count += 1\n   \
    \     } else if x == 'D' || x == 'd' {\n            count += 1\n        } else\
    \ if x == 'E' || x == 'e' {\n            count += 1\n        } else if x == 'F'\
    \ || x == 'f' {\n            count += 1\n        } else if x == 'G' || x == 'g'\
    \ {\n            count += 1\n        } else if x == 'H' || x == 'h' {\n      \
    \      count += 1\n        } else if x == 'I' || x == 'i' {\n            count\
    \ += 1\n        } else if x == 'J' || x == 'j' {\n            count += 1\n   \
    \     } else if x == 'K' || x == 'k' {\n            count += 1\n        } else\
    \ if x == 'L' || x == 'l' {\n            count += 1\n        } else if x == 'M'\
    \ || x == 'm' {\n            count += 1\n        } else if x == 'N' || x == 'n'\
    \ {\n            count += 1\n        } else if x == 'O' || x == 'o' {\n      \
    \      count += 1\n        } else if x == 'P' || x == 'p' {\n            count\
    \ += 1\n        } else if x == 'Q' || x == 'q' {\n            count += 1\n   \
    \     } else if x == 'R' || x == 'r' {\n            count += 1\n        } else\
    \ if x == 'S' || x == 's' {\n            count += 1\n        } else if x == 'T'\
    \ || x == 't' {\n            count += 1\n        } else if x == 'U' || x == 'u'\
    \ {\n            count += 1\n        } else if x == 'V' || x == 'v' {\n      \
    \      count += 1\n        } else if x == 'W' || x == 'w' {\n            count\
    \ += 1\n        } else if x == 'X' || x == 'x' {\n            count += 1\n   \
    \     } else if x == 'Y' || x == 'y' {\n            count += 1\n        } else\
    \ if x == 'Z' || x == 'z' {\n            count += 1\n        } else if x == 'a'\
    \ || x == 'A' {\n            count += 1\n        } else if x == 'b' || x == 'B'\
    \ {\n            count += 1\n        } else if x == 'c' || x == 'C' {\n      \
    \      count += 1\n        } else if x == 'd' || x == 'D' {\n            count\
    \ += 1\n        } else if x == 'e' || x == 'E' {\n            count += 1\n   \
    \     } else if x == 'f' || x == 'F' {\n            count += 1\n        } else\
    \ if x == 'g' || x == 'G' {\n            count += 1\n        } else if x == 'h'\
    \ || x == 'H' {\n", "    var count = 0\n    var isUppercase = false\n    for index,\
    \ _ := range s {\n        if index % 2 == 0 {\n            if s[index] == s[index].upper()\
    \ {\n                count++\n            }\n        } else {\n            isUppercase\
    \ = true\n        }\n    }\n    if !isUppercase {\n        return 0\n    }\n \
    \   return count", '    return s.scan("[aeiouAEIOU]".toRegex()).filter { $0.index
    == $0.upperBound}.count', "    // Count all uppercase letters.\n    var upperCaseCount\
    \ = 0\n\n    // Iterate over odd indices.\n    for i in 0..<s.characters.count\
    \ {\n        let character = s[i] // get the character at this index\n       \
    \ if Character(character).isUppercase {\n            upperCaseCount += 1 // count\
    \ that character\n        }\n\n        // Handle the even indices.\n        if\
    \ i % 2 == 0 {\n            upperCaseCount += 1 // count that character\n    \
    \    }\n    }\n\n    return upperCaseCount", "    guard s.count > 0 else {\n \
    \       return 0\n    }\n\n    var evenIndex = 0\n    var vowelCount = 0\n   \
    \ for letter in s {\n        guard letter >= 'A' && letter <= 'Z' else {\n   \
    \         return vowelCount\n        }\n\n        if letter == 'a' || letter ==\
    \ 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            vowelCount\
    \ += 1\n        }\n        if letter % 2 == 0 {\n            evenIndex += 1\n\
    \        }\n    }\n\n    if evenIndex % 2 == 0 {\n        return vowelCount\n\
    \    }\n\n    return 0", "    if let len = s.characters.count {\n        var count\
    \ = 0\n        for idx in 0..<len {\n            let c = s[idx] as UnicodeScalar\n\
    \            if c == c.uppercase && idx % 2 == 0 {\n                count += 1\n\
    \            }\n        }\n        return count\n    }\n    return 0", "    guard\
    \ len(s) >= 2 else { return 0 }\n    var count = 0\n    for c in s {\n       \
    \ if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for i :=\
    \ 0; i < len(s); i++ {\n        if s[i] == unicode.ToUpper(s[i]) {\n         \
    \   if i % 2 == 0 {\n                count += 1\n            }\n        }\n  \
    \  }\n    return count", "\treturn count_upper_indices(s, 0)", "\tvar i uint =\
    \ 0\n\tfor i := 0; i < len(s); i++ {\n\t\tif s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n\t\t\tcontinue\n\t\t}\n\t\tbreak\n\t\
    }\n\treturn i + 1", "    var n = 0\n    for x in s.characters {\n        guard\
    \ x > 'a' && x < 'z' else {\n            continue\n        }\n\n        guard\
    \ x >= 'a' && x <= 'z' else {\n            continue\n        }\n        n = n\
    \ + (x - 'a') * (x - 'a') > 1\n    }\n    return n", "    var i = 0\n    for c\
    \ in s {\n        if c == c[0] && c == 'A' || c == 'a' {\n            i += 1\n\
    \        }\n    }\n    return i", "\treturn count_upper_internal(s.characters)\
    \ + count_upper_internal(s.characters) + count_upper_internal(s.characters) +\
    \ count_upper_internal(s.characters) + count_upper_internal(s.characters)", " \
    \   var counter = s.count\n    repeat {\n        let index = s.index(after: s.startIndex,\
    \ offsetBy: 2)\n        let char = s[index]\n        guard char.isUppercase else\
    \ { break }\n        counter -= 1\n    } while true\n    return counter", "  \
    \  var counter = 0\n    s.characters\n        .enumerate()\n        .forEach {\
    \ index, char in in\n            if char.isUpper() {\n                counter\
    \ += 1\n            } else if index%2 == 0 && char.isUpper() {\n             \
    \   counter += 1\n            }\n        }\n    return counter", "\treturn s.searchString(upperCaseString,\
    \ options: .CaseInsensitive) != nil ? 1\n\t\t: s.searchString(upperCaseString)\
    \ != nil ? 0\n\t\t: 0", "    var total = 0\n    for i : Int in stride(from: s.characters.startIndex,\
    \ to: s.endIndex, by: 2) {\n        if s[i] == \"A\" {\n            total += 1\n\
    \        } else if s[i] == \"E\" {\n            total += 1\n        } else if\
    \ s[i] == \"I\" {\n            total += 1\n        } else if s[i] == \"O\" {\n\
    \            total += 1\n        } else if s[i] == \"U\" {\n            total\
    \ += 1\n        } else if s[i] == \"a\" {\n            total += 1\n        } else\
    \ if s[i] == \"e\" {\n            total += 1\n        } else if s[i] == \"i\"\
    \ {\n            total += 1\n        } else if s[i] == \"o\" {\n            total\
    \ += 1\n        } else if s[i] == \"u\" {\n            total += 1\n        }\n\
    \    }\n    return total", "    var n = count_upper_i(s.utf8)\n    if n >= len(s)\
    \ {\n        n = len(s)\n    }\n    return n", "    var count = 0\n    for c in\
    \ s {\n        if (\"AEIOU\".contains(String(c))) {\n            count += 1\n\
    \        }\n    }\n    return count", "    func count(index: Int) -> Int {\n \
    \       let char = s.character(at: index)\n        switch (char) {\n        case\
    \ .upper, .lower:\n            return 0\n        default:\n            return\
    \ 1\n        }\n    }\n    return s.enumerated().reduce(0) { $0 + count($1) +\
    \ count($2) }", "\tlet a = s.characters\n\tlet p = a.startIndex\n\n\tvar c = 0\n\
    \tfor i in 0..<s.characters.count {\n\t\tif s[i] == s.characters[p] {\n\t\t\t\
    c++\n\t\t\tp++\n\t\t}\n\t}\n\n\treturn c", "    guard s.utf8.count % 2 == 0 else\
    \ {\n        return 0\n    }\n\n    var upper = 0\n    for i in 0 ..< s.utf8.count\
    \ {\n        guard s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u' else {\n            return 0\n        }\n\n        if i % 2 == 0\
    \ {\n            upper += 1\n        }\n    }\n\n    return upper", "    var n\
    \ = s.length\n    var even = 0\n    for _ in 0..<n {\n        switch s[_] {\n\
    \        case \"A\",\"E\",\"I\",\"O\",\"U\": even++\n        default: break\n\
    \        }\n    }\n    return even", '    return count_upper_func(s, "")', " \
    \   vowels_count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            vowels_count++\n\
    \        }\n    }\n    return vowels_count", "    var count = 1\n    for i in\
    \ s.characters {\n        guard i != s.lowercaseString else { return 0 }\n   \
    \     if i.isUppercase {\n            count += 1\n        } else if i.isUppercase\
    \ && count > 1 {\n            return 0\n        }\n    }\n    return count", " \
    \   var result = 1\n    for i in\n        0 ..< s.characters.count,\n        let\
    \ c = s.characters[i]\n        if c == c.uppercaseValue {\n            result++\n\
    \        }\n        guard i % 2 == 0 else {\n            break\n        }\n  \
    \  return result", "    var result = 0\n    for idx in 0..<s.count {\n       \
    \ if s.isUpper { result += 1 }\n        idx += 2\n    }\n    return result", " \
    \   if isUpper(s, true) {\n        return s.countUpToIndex {\n            if $0\
    \ % 2 == 0 { return true }\n            else { return false }\n        }\n   \
    \ } else {\n        return 0\n    }", "    // precondition(s.isLower)\n\n    let\
    \ mut count = 0\n\n    for c in s.characters {\n        if c.isUpper() {\n   \
    \         count = count + 1\n            if c.isUpper() {\n                count\
    \ = count + 1\n            }\n        }\n    }\n\n    return count", "    // The\
    \ array is unsorted, so sort in place.\n    var vowels: [Int] = []\n    for c\
    \ in s.characters {\n        switch c {\n        case 'a':\n            vowels.append(0)\n\
    \        case 'e':\n            vowels.append(1)\n        case 'i':\n        \
    \    vowels.append(2)\n        case 'o':\n            vowels.append(3)\n     \
    \   case 'u':\n            vowels.append(4)\n        default:\n            return\
    \ 0\n        }\n    }\n    vowels.sort()\n    var count = 0\n    var pos = 0\n\
    \    for ix in 0..<vowels.count {\n        count += vowels[ix] == 2 ? 1 : 0\n\
    \        pos += vowels[ix] == 2 ? 1 : 0\n        if pos == 2 {\n            break\n\
    \        }\n    }\n    return count", "\treturn s.split(\"\").reduce(0) {\n\t\t\
    acc, _, _ in\n\t\tacc + Int(s[Int(arc4random_uniform(UInt32(s.characters.count)))])\
    \ == c ? 1 : 0\n\t}", "    var count = 0\n    var lastIndex = s.startIndex\n \
    \   var ch: String\n\n    while lastIndex != s.endIndex {\n        ch = s[lastIndex]\n\
    \        if ch >= 'a' && ch <= 'z' {\n            count += 1\n        }\n    \
    \    lastIndex++\n    }\n    return count", '    return count_up_to(s.count, s.characters.filter({
    $0.isUppercase() })).filter({ $0.isOdd }).count', "    var count = 0\n    for\
    \ idx in indices(s, 2) {\n        if s[idx].isUpper() {\n            count +=\
    \ 1\n        }\n    }\n    return count", "    var i = 0\n    while i < s.count\
    \ && s[i] == s[i] {\n        i += 1\n    }\n    if i < s.count {\n        let\
    \ j = i + 1\n        while j < s.count && s[j] == s[j] {\n            j += 1\n\
    \        }\n        if i < j {\n            i += j - i\n        }\n    }\n   \
    \ return i", "    var result : Int = 0\n    s.forEach { char in\n        if char\
    \ == \"A\" || char == \"a\" {\n            result += 1\n        }\n    }\n   \
    \ return result", "    var count = 0\n    for idx in 0 ..< s.count {\n       \
    \ if idx % 2 == 0 && s[idx].unicodeScalars.isUppercase {\n            count +=\
    \ 1\n        }\n    }\n    return count", "    \n    // Your code here\n    \n\
    \    return 0", "    var result = Int(0)\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            result += Int(1)\n     \
    \   }\n    }\n    return result", "    if s == \"\" {\n        return 0\n    }\n\
    \    var count = 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n            count += 1\n        }\n    }\n    return count",
  "    var result = 0..<len(s)\n    for index in 0..<len(s) {\n        var isUpper\
    \ = false\n        switch s[index] {\n        case 'a':\n        case 'e':\n \
    \       case 'i':\n        case 'o':\n        case 'u':\n        case 'A':\n \
    \       case 'E':\n        case 'I':\n        case 'O':\n        case 'U':\n \
    \           isUpper = true\n        default:\n            isUpper = false\n  \
    \      }\n        if index&1 == 0 && !isUpper {\n            result[index] = result[index]\
    \ + 1\n        }\n    }\n    return result", "    \n    \n    let vowels = \"\
    aeiou\"\n    \n    \n    \n    var count = 0\n    \n    \n    for index in 0..<s.count\
    \ {\n        \n        if s[index].isUpper() {\n            \n            \n \
    \           \n            \n            if index%2==0 {\n                \n  \
    \              \n                \n                for vowelIndex in 0..<vowels.count\
    \ {\n                    \n                    \n                    \n      \
    \              if vowels[vowelIndex] == s[index] {\n                        \n\
    \                        \n                        count += 1\n              \
    \          break\n                    }\n                    \n              \
    \  }\n                \n            }\n            \n            \n          \
    \  \n            else {\n                \n                \n                \n\
    \                for vowelIndex in 0..<vowels.count {\n                    \n\
    \                    \n                    \n                    if vowels[vowelIndex]\
    \ == s[index] {\n                        \n                        \n        \
    \                count += 1\n                        break\n                 \
    \   }\n                    \n                }\n                \n           \
    \ }\n        }\n        \n        \n    }\n    \n    \n    \n    return count",
  "    var result = 1\n    for i in 0..<s.count {\n        if s[i] >= 'A' && s[i]\
    \ <= 'Z' {\n            if s[i] == 'Z' || s[i] == 'z' {\n                result\
    \ -= 1\n            }\n        } else if s[i] >= 'a' && s[i] <= 'z' {\n      \
    \      result += 1\n        }\n    }\n    return result", "    vowels.iter() {\n\
    \        if s[$0] > 'Z' { vowels[$0] = 0 }\n    }\n    var counter = 0\n    for\
    \ c in s.chars() {\n        vowels[c] &^= 1\n        vowels[c - 'A'] &^= 1\n \
    \       vowels[c - 'a'] &^= 1\n    }\n    vowels.iter() {\n        counter +=\
    \ 1 &^ 1\n    }\n    return counter", "    var i = 0\n    for c in s {\n     \
    \   if (c == 'A' || c == 'a') {\n            i += 1\n        }\n    }\n    return\
    \ i", "    var count: Int = 0\n    for c in s {\n        guard c >= 'A' && c <=\
    \ 'Z' else {\n            continue\n        }\n        guard c % 2 == 0 else {\n\
    \            continue\n        }\n        guard c <= 'E' else {\n            continue\n\
    \        }\n        count += 1\n    }\n    return count", "    var count = 0\n\
    \    for index in 0..<s.count {\n        if s[index].unicodeScalars.isUppercase\
    \ {\n            count += 1\n            if index%2 == 0 {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count", '    return count(s,
    isVowel, isUpper, 0)', "    guard\n        let index = s.index(after: s.startIndex,\
    \ offsetBy: 2)\n        else {\n            return 0\n    }\n    \n    let characters\
    \ = s.characters\n    \n    var count = 0\n    for (_, element) in characters.enumerated()\
    \ {\n        if CharacterSet.uppercaseLetters.contains(element) {\n          \
    \  count += 1\n        }\n    }\n    \n    return count", "    var count = 0\n\
    \    for index, _ in\n        Zip2(self.s.characters.count, s.characters.count,\
    \ combine: +)\n            .enumerated() {\n        let isEvenIndex = index %\
    \ 2 == 0\n        let isUpper = self.s[index] == self.s[index].uppercased()\n\
    \        if isEvenIndex && isUpper {\n            count += 1\n        }\n    }\n\
    \    return count", "    func isUpper(x: String) -> Bool {\n        x.isUpper\n\
    \    }\n    return s.countWhere(isUpper)", "\tswitch {\n\tcase s == \"\": // 0\
    \ uppercase characters\n\t\treturn 0\n\tcase s[startIndex] == 'Z':\n\t\treturn\
    \ 0\n\tcase s[startIndex] == 'z':\n\t\treturn 0\n\tcase s[startIndex] == 'A':\n\
    \t\treturn 1\n\tcase s[startIndex] == 'a':\n\t\treturn 1\n\tdefault:\n\t\tswitch\
    \ {\n\t\tcase s[startIndex] == 'B':\n\t\t\treturn 1\n\t\tcase s[startIndex] ==\
    \ 'b':\n\t\t\treturn 1\n\t\tcase s[startIndex] == 'C':\n\t\t\treturn 2\n\t\tcase\
    \ s[startIndex] == 'c':\n\t\t\treturn 2\n\t\tcase s[startIndex] == 'D':\n\t\t\t\
    return 3\n\t\tcase s[startIndex] == 'd':\n\t\t\treturn 3\n\t\tcase s[startIndex]\
    \ == 'E':\n\t\t\treturn 4\n\t\tcase s[startIndex] == 'e':\n\t\t\treturn 4\n\t\t\
    case s[startIndex] == 'F':\n\t\t\treturn 5\n\t\tcase s[startIndex] == 'f':\n\t\
    \t\treturn 5\n\t\tcase s[startIndex] == 'G':\n\t\t\treturn 6\n\t\tcase s[startIndex]\
    \ == 'g':\n\t\t\treturn 6\n\t\tcase s[startIndex] == 'H':\n\t\t\treturn 7\n\t\t\
    case s[startIndex] == 'h':\n\t\t\treturn 7\n\t\tcase s[startIndex] == 'I':\n\t\
    \t\treturn 8\n\t\tcase s[startIndex] == 'i':\n\t\t\treturn 8\n\t\tcase s[startIndex]\
    \ == 'J':\n\t\t\treturn 9\n\t\tcase s[startIndex] == 'j':\n\t\t\treturn 9\n\t\t\
    case s[startIndex] == 'K':\n\t\t\treturn 10\n\t\tcase s[startIndex] == 'k':\n\t\
    \t\treturn 10\n\t\tcase s[startIndex] == 'L':\n\t\t\treturn 11\n\t\tcase s[startIndex]\
    \ == 'l':\n\t\t\treturn 11\n\t\tcase s[startIndex] == 'M':\n\t\t\treturn 12\n\t\
    \tcase s[startIndex] == 'm':\n\t\t\treturn 12\n\t\tcase s[startIndex] == 'N':\n\
    \t\t\treturn 13\n\t\tcase s[startIndex] == 'n':\n\t\t\treturn 13\n\t\tcase s[startIndex]\
    \ == 'O':\n\t\t\treturn 14\n\t\tcase s[startIndex] == 'o':\n\t\t\treturn 14\n\t\
    \tcase s[startIndex] == 'P':\n\t\t\treturn 15\n\t\tcase s[startIndex] == 'p':\n\
    \t\t\treturn 15\n\t\tcase s[startIndex] == 'Q':\n\t\t\treturn 16\n\t\tcase s[startIndex]\
    \ == 'q':\n\t\t\treturn 16\n\t\tcase s[startIndex] == 'R':\n\t\t\treturn 17\n\t\
    \tcase s[startIndex] == 'r':\n\t\t\treturn 17\n\t\tcase s[startIndex] == 'S':\n\
    \t\t\treturn 18\n\t\tcase s[startIndex] == 's':\n\t\t\treturn 18\n\t\tcase s[startIndex]\
    \ == 'T':\n\t\t\treturn 19\n\t\tcase s[startIndex] == 't':\n\t\t\treturn 19\n\t\
    \tcase s[startIndex] == 'U':\n\t\t\treturn 20\n\t\tcase s[startIndex] == 'u':\n\
    \t\t\treturn 20\n\t\tcase ", "\tguard !s.isEmpty else { return 0 }\n\tlet chars\
    \ = Array(s)\n\tvar count = 0\n\tfor c in chars {\n\t\tguard c >= \"A\" && c <=\
    \ \"Z\" else { continue }\n\t\tcount += UInt32(c - \"A\") + 1\n\t}\n\treturn count",
  "    let len = s.length\n    let vowels = \"aeiouAEIOU\".utf8\n\n    let vowelIndex\
    \ = 0\n    var count = 0\n\n    for _ in 0..<len - 1 {\n        let idx = s.unicodeScalars[vowelIndex].value\
    \ - 'a'.value\n        let ch = String(s.unicodeScalars[vowelIndex + 1].value)\n\
    \        if vowels[idx].contains(ch) {\n            count += 1\n        }\n  \
    \      vowelIndex += 2\n    }\n\n    return count", "    var count = 0\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] == 'A' || s[i] == 'a' {\n       \
    \     count += 1\n        } else if s[i] == 'B' || s[i] == 'b' {\n           \
    \ count += 1\n        } else if s[i] == 'C' || s[i] == 'c' {\n            count\
    \ += 1\n        } else if s[i] == 'D' || s[i] == 'd' {\n            count += 1\n\
    \        } else if s[i] == 'E' || s[i] == 'e' {\n            count += 1\n    \
    \    } else if s[i] == 'F' || s[i] == 'f' {\n            count += 1\n        }\
    \ else if s[i] == 'G' || s[i] == 'g' {\n            count += 1\n        }\n  \
    \  }\n    return count", '  return s.countUpTo(s.endIndex, inRange: 0..<s.utf16.count)/2',
  "    var result = 0\n    for c in s.characters {\n        if isUpper(c) && isEven(c\
    \ - 'a') {\n            result += 1\n        }\n    }\n    return result", '    return
    s.searchString(uppercaseVowels, options: .CaseInsensitive) != nil ? s.distance(s.startIndex,
    to: s.startIndex.advanced(by: s.searchString(uppercaseVowels, options: .CaseInsensitive)!))
    : 0', "    if s == \"\" {\n        return 0\n    }\n\n    var evenIndexes = [Int]()\n\
    \    var total = 0\n\n    for i in 0..<s.count {\n        let index = s[i] - 'a'\n\
    \        if index % 2 != 0 {\n            evenIndexes.append(index)\n        }\n\
    \    }\n\n    for i in 0..<evenIndexes.count {\n        total += Int(s[evenIndexes[i]])\
    \ - 'A' + 1\n    }\n\n    return total", "\tlet vowels = vowel_map.map[s].filter(isVowel).map(toLower)\n\
    \tlet evens = vowels.filter(isEven).count\n\treturn evens", "    var count = 1\n\
    \    for c in s {\n        if isUpper(c) {\n            count += 1\n        }\n\
    \    }\n    return count", '    return s.characters.reduce(0) { $0 + $1.isUppercase()
    ? 1 : 0 }', "    \n    let vowels = \"aeiouAEIOU\"\n    \n    let vowelCount =\
    \ s.characters.filter {\n        let c = $0\n        return vowels.contains(c)\n\
    \    }.count\n    \n    if vowelCount % 2 == 0 {\n        return 0\n    } else\
    \ {\n        return 1\n    }", "    var count = 0\n    for c in s.characters {\n\
    \        guard isUpper(c) else {\n            continue // skip non-letters\n \
    \       }\n        if isEven(c - 'a') {\n            count += 1\n        }\n \
    \   }\n    return count", "\treturn count_upper_indexed(s: s, startIndex: 0, endIndex:\
    \ s.count-1)", "    guard s.isEmpty == false else {\n        return 0\n    }\n\
    \    var count = 0\n    \n    for i in 0..<s.characters.count {\n        if s[i]\
    \ == s[s.characters.count - 1] && s[i] == s.characters.first! {\n            count\
    \ += 1\n        }\n    }\n    return count", "  result := 0\n  for i := 0; i <\
    \ len(s); i += 2 {\n    if s[i] == 'A' || s[i] == 'a' {\n      result += s[i+1]\
    \ != 'A' && s[i+1] != 'a'\n    }\n  }\n  return result", "\t\n\tlet letterCount\
    \ = s.characters.reduce(0) { (res, c) in\n\t\t\n\t\tif let _ = c.unicodeScalars.filter({\
    \ $0.isUpperCase }).first {\n\t\t\tres += 1\n\t\t}\n\t\t\n\t\treturn res\n\t}\n\
    \t\n\treturn letterCount / 2", "    guard s.characters.count >= 1 else { return\
    \ 0 }\n    var count = 0\n    for index in stride(from: 0, to: s.characters.count,\
    \ by: 2) {\n        guard s[index].isUppercase else { return count }\n       \
    \ count += 1\n    }\n    return count", "\treturn count_upper_impl(s, s.utf16)",
  '    countUpper.countUpper.countUpper.countUpper.countUpper.countUpper.countUpper.countUpper.countUpper.countUpper.countUpper.countUpper.countUpper.countUpper(s.utf8)',
  "  var count = 0\n  for index in 0..<s.characters.count {\n    if s[index].isUpper()\
    \ && index % 2 == 0 {\n      count += 1\n    }\n  }\n  return count", "    var\
    \ count = 0\n    for index in 0..<s.count {\n        guard s[index].isUppercase\
    \ else { continue }\n        if index%2 == 0 { count += 1; continue }\n      \
    \  count += 1\n    }\n    return count", '    return s.filter { $0 <= "z" && $0
    > "a" }.count', "    var count = 0\n    for idx in 0..<s.characters.count {\n\
    \        if idx % 2 == 0 { //even index\n            if let c = s.characters[idx]\
    \ as? Character where c.isUppercase {\n                count += 1\n          \
    \  }\n        }\n    }\n    return count", "    var result = 0\n    for index,\
    \ character in s.unicodeScalars.enumerated() {\n        if character > 0xFF {\n\
    \            return -1\n        }\n        if character <= 0x00 && character ==\
    \ 0x20 {\n            result++\n        }\n        if character <= 0x5F && character\
    \ == 0x5F && !(index % 2 == 0) {\n            result++\n        }\n    }\n   \
    \ return result", "    var n = s.count\n    for i in 0 ..< n {\n        if s[i]\
    \ == s[i][0] {\n            n -= 1\n        }\n        if s[i] == s[i+1] && s[i]\
    \ != 'a' && s[i+1] != 'A' {\n            n -= 1\n        }\n        if s[i] ==\
    \ 'a' || s[i] == 'A' {\n            n -= 1\n        }\n    }\n    return n", " \
    \   if s.isEmpty {\n        return 0\n    }\n\n    var upperCount = 0\n    var\
    \ currentChar = s[0]\n    for c in s.dropFirst() {\n        if c == currentChar\
    \ {\n            upperCount += 1\n        } else {\n            break\n      \
    \  }\n        currentChar = c\n    }\n\n    return upperCount", "\tlet alphabet\
    \ = UnicodeScalars.uppercase\n\tvar count = 0\n\tvar i : Int = 0\n\tfor c in self.indices(s)\
    \ {\n\t\tif c.unicodeScalars.contains(&alphabet) {\n\t\t\tcount = count + 1\n\t\
    \t}\n\t\ti = i + 1\n\t\tif i >= self.length {\n\t\t\treturn count\n\t\t}\n\t}\n\
    \treturn count", "    return s.reduce(0) { acc, _ in\n        switch acc {\n \
    \       case 0:\n            return 1\n        case 1:\n            switch s.characters[Int(acc.2)]\
    \ {\n            case ('a', 'A'):\n                return 1\n            case\
    \ ('b', 'B'):\n                return 2\n            case ('c', 'C'):\n      \
    \          return 3\n            case ('d', 'D'):\n                return 4\n\
    \            case ('e', 'E'):\n                return 5\n            case ('f',\
    \ 'F'):\n                return 6\n            case ('g', 'G'):\n            \
    \    return 7\n            case ('h', 'H'):\n                return 8\n      \
    \      case ('i', 'I'):\n                return 9\n            case ('j', 'J'):\n\
    \                return 10\n            case ('k', 'K'):\n                return\
    \ 11\n            case ('l', 'L'):\n                return 12\n            case\
    \ ('m', 'M'):\n                return 13\n            case ('n', 'N'):\n     \
    \           return 14\n            case ('o', 'O'):\n                return 15\n\
    \            case ('p', 'P'):\n                return 16\n            case ('q',\
    \ 'Q'):\n                return 17\n            case ('r', 'R'):\n           \
    \     return 18\n            case ('s', 'S'):\n                return 19\n   \
    \         case ('t', 'T'):\n                return 20\n            case ('u',\
    \ 'U'):\n                return 21\n            case ('v', 'V'):\n           \
    \     return 22\n            case ('w', 'W'):\n                return 23\n   \
    \         case ('x', 'X'):\n                return 24\n            case ('y',\
    \ 'Y'):\n                return 25\n            case ('z', 'Z'):\n           \
    \     return 26\n            default:\n                return acc\n          \
    \  }\n        }\n    }", "    var i: Int = 0\n    for c in s.characters {\n  \
    \      if c.isUpper() && c.isOdd() {\n            i += 1\n        }\n    }\n \
    \   return i", "    var i = 0\n    for c in s {\n        if c == 'A' || c == 'a'\
    \ {\n            i += 2\n        } else if c == 'E' || c == 'e' {\n          \
    \  i += 2\n        } else if c == 'I' || c == 'i' {\n            i += 1\n    \
    \    } else if c == 'O' || c == 'o' {\n            i += 1\n        } else if c\
    \ == 'U' || c == 'u' {\n            i += 1\n        }\n    }\n    return i", " \
    \   if s.isEmpty {\n        return 0\n    }\n    let mut upper = 0\n    for &c\
    \ in s.chars().filter(|&c| *c >= 'A' && *c <= 'Z') {\n        *c -= 'A' as u8\n\
    \        if *c > 0 {\n            upper += 1\n        }\n    }\n    return upper",
  "    let vowels = \"AEIOUaeiouAEIOU\"\n    let count1 = s.characters.count\n   \
    \ let count2 = s.uppercased().characters.count\n    return count1 - count2 + vowels.characters.count",
  '    return countSubstrings(s, upperCase, 2)', "    guard s.characters.count > 0\
    \ else {\n        return 0\n    }\n    var count = 0\n    for c in s.characters\
    \ {\n        if c == c.uppercase {\n            count += Int(c.isUppercase())\n\
    \        } else if !c.isUppercase() {\n            return count\n        }\n \
    \   }\n    return count", "\tvar cnt : Int = 0\n\tfor i in s.indices {\n\t\tswitch\
    \ s[i] {\n\t\tcase 'A' : cnt++ ; break\n\t\tcase 'E' : cnt++ ; break\n\t\tcase\
    \ 'I' : cnt++ ; break\n\t\tcase 'O' : cnt++ ; break\n\t\tcase 'U' : cnt++ ; break\n\
    \t\t}\n\t}\n\treturn cnt"]
stop_tokens:
- "\n}"
