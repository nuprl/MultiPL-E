language: swift
name: HumanEval_26_remove_duplicates
results:
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var seen = [Int]()\n    var result = [Int]()\n    for number in numbers\
    \ {\n        if let index = seen.index(of: number) {\n            result.append(numbers[index])\n\
    \        } else {\n            result.append(number)\n            seen.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpklv5f3mw/tmpklv5f3mw.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f88de9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f88ae0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f88ae0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f88adf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpklv5f3mw                        0x00005613183688f1 <unavailable> + 6385

    5    libc.so.6                          0x00002b9f88fd5460 __libc_start_main +
    245

    6    tmpklv5f3mw                        0x00005613183682a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if result.contains(number)\
    \ {\n            continue\n        } else {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpsoenk2az/tmpsoenk2az.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af70a492c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af70a189b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af70a189988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af70a1887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsoenk2az                        0x000055c749138891 <unavailable> + 6289

    5    libc.so.6                          0x00002af70a67e460 __libc_start_main +
    245

    6    tmpsoenk2az                        0x000055c749138249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var uniques = [Int]()\n  for number in numbers {\n    if !uniques.contains(number)\
    \ {\n      uniques.append(number)\n    }\n  }\n  return uniques\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp9h7j4f_1/tmp9h7j4f_1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64e1f49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64e1c40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64e1c40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64e1c3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9h7j4f_1                        0x00005556328a8891 <unavailable> + 6289

    5    libc.so.6                          0x00002b64e2135460 __libc_start_main +
    245

    6    tmp9h7j4f_1                        0x00005556328a8249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var result = [Int]()\n  for number in numbers {\n    if !result.contains(number)\
    \ {\n      result.append(number)\n    }\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpp87htysf/tmpp87htysf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f950f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f94deab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f94dea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f94de97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp87htysf                        0x00005611ccaad891 <unavailable> + 6289

    5    libc.so.6                          0x00002b4f952df460 __libc_start_main +
    245

    6    tmpp87htysf                        0x00005611ccaad249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    guard numbers.count > 0 else { return [] }\n    var newNumbers: [Int]\
    \ = []\n    let currentValue = numbers[0]\n    for number in numbers {\n     \
    \   if number == currentValue {\n            newNumbers.append(number)\n     \
    \   }\n        else {\n            newNumbers.append(currentValue)\n         \
    \   newNumbers.append(number)\n        }\n    }\n    return newNumbers\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpwpmyj9pw/tmpwpmyj9pw.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b886cdc3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b886cabab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b886caba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b886cab97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpmyj9pw                        0x00005603f547071d <unavailable> + 5917

    5    libc.so.6                          0x00002b886cfaf460 __libc_start_main +
    245

    6    tmpwpmyj9pw                        0x00005603f5470239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var seen = [Int]()\n    for number in numbers {\n        if seen.contains(number)\
    \ {\n            seen.remove(number)\n        } else {\n            seen.insert(number)\n\
    \        }\n    }\n    return seen\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpwj10obac.swift:10:18: error: no exact matches in call to instance\
    \ method 'remove'\n            seen.remove(number)\n                 ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n/tmp/tmpwj10obac.swift:12:31: error: missing argument\
    \ for parameter 'at' in call\n            seen.insert(number)\n              \
    \                ^\n                              , at: <#Int#>\nSwift.Array:11:37:\
    \ note: 'insert(_:at:)' declared here\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var seen: Set<Int> = []\n    return numbers.filter {\n        if !seen.contains($0)\
    \ {\n            seen.insert($0)\n            return true\n        }\n       \
    \ return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpk7rv6_52/tmpk7rv6_52.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1c0ad1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1c07c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1c07c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1c07c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk7rv6_52                        0x00005628ede68841 <unavailable> + 6209

    5    libc.so.6                          0x00002af1c0cbd460 __libc_start_main +
    245

    6    tmpk7rv6_52                        0x00005628ede681f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if result.contains(number)\
    \ {\n            continue\n        } else {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpsz0kh9wd/tmpsz0kh9wd.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9e05cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9e02c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9e02c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9e02c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsz0kh9wd                        0x0000564b38f17841 <unavailable> + 6209

    5    libc.so.6                          0x00002af9e07b9460 __libc_start_main +
    245

    6    tmpsz0kh9wd                        0x0000564b38f171f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var seen = [Int]()\n    for number in numbers {\n        if seen.contains(number)\
    \ {\n            seen.remove(number)\n        } else {\n            seen.insert(number)\n\
    \        }\n    }\n    return seen\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpwj10obac.swift:10:18: error: no exact matches in call to instance\
    \ method 'remove'\n            seen.remove(number)\n                 ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n/tmp/tmpwj10obac.swift:12:31: error: missing argument\
    \ for parameter 'at' in call\n            seen.insert(number)\n              \
    \                ^\n                              , at: <#Int#>\nSwift.Array:11:37:\
    \ note: 'insert(_:at:)' declared here\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let counts = numbers.reduce([Int](), combine: { (counts, num) -> [Int]\
    \ in\n        if let count = counts[num] {\n            counts[num] = count +\
    \ 1\n        } else {\n            counts[num] = 1\n        }\n        return\
    \ counts\n    })\n    \n    let result = numbers.filter() { counts[$0] == 1 }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp1s5c9fd2.swift:7:32: error: extraneous argument label 'combine:'\
    \ in call\n    let counts = numbers.reduce([Int](), combine: { (counts, num) ->\
    \ [Int] in\n                               ^         ~~~~~~~~~\n             \
    \                            \n/tmp/tmp1s5c9fd2.swift:9:19: error: cannot assign\
    \ through subscript: 'counts' is a 'let' constant\n            counts[num] = count\
    \ + 1\n            ~~~~~~^\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpldswxq9m.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var set = Set<Int>()\n    var result: [Int] = []\n    for n in numbers\
    \ {\n        if !set.contains(n) {\n            result.append(n)\n           \
    \ set.insert(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp6vgwlpue/tmp6vgwlpue.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b023c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b020bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b020bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b020ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vgwlpue                        0x0000557603b16931 <unavailable> + 6449

    5    libc.so.6                          0x00002b1b025b0460 __libc_start_main +
    245

    6    tmp6vgwlpue                        0x0000557603b162e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques: [Int] = []\n    var count: Int = 0\n    for number in numbers\
    \ {\n        if uniques.contains(number) {\n            count += 1\n        }\
    \ else {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpgatkbnwl/tmpgatkbnwl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8811015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8810d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8810d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8810d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgatkbnwl                        0x00005624b180e841 <unavailable> + 6209

    5    libc.so.6                          0x00002b8811201460 __libc_start_main +
    245

    6    tmpgatkbnwl                        0x00005624b180e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp6vc21ax5/tmp6vc21ax5.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a0e310c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a0e007b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a0e007988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a0e0067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vc21ax5                        0x000055e8a3d28891 <unavailable> + 6289

    5    libc.so.6                          0x00002b6a0e4fc460 __libc_start_main +
    245

    6    tmp6vc21ax5                        0x000055e8a3d28249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var index = 0\n    for element in numbers {\n\
    \        guard index < result.count else { return [] }\n        if result[element]\
    \ == nil || element == result[element] {\n            result[index] = element\n\
    \            index += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp1zism_yt/tmp1zism_yt.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7727b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7727861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7727861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77278607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zism_yt                        0x000056434d7bf76d <unavailable> + 5997

    5    libc.so.6                          0x00002b7727d56460 __libc_start_main +
    245

    6    tmp1zism_yt                        0x000056434d7bf289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueSet = [Int]()\n    for i in numbers {\n        if !uniqueSet.contains(i)\
    \ {\n            uniqueSet.append(i)\n        }\n    }\n    return uniqueSet\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpc7y9_q59/tmpc7y9_q59.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae85b917c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae85b60eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae85b60e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae85b60d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7y9_q59                        0x000055a027e69891 <unavailable> + 6289

    5    libc.so.6                          0x00002ae85bb03460 __libc_start_main +
    245

    6    tmpc7y9_q59                        0x000055a027e69249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique: Set<Int> = []\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpy4tnrogp.swift:10:20: error: value of type 'Set<Int>' has no member\
    \ 'append'\n            unique.append(number)\n            ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return numbers.filter{ numbers in\n        numbers.filter{ number in\
    \ numbers.filter { number != numbers }.count }\n            .count == 1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxl15b20s.swift:8:17: error: value of type 'Int' has no member 'filter'\n\
    \        numbers.filter{ number in numbers.filter { number != numbers }.count\
    \ }\n        ~~~~~~~ ^~~~~~\n/tmp/tmpxl15b20s.swift:8:43: error: value of type\
    \ 'Int' has no member 'filter'\n        numbers.filter{ number in numbers.filter\
    \ { number != numbers }.count }\n                                  ~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var set = Set<Int>()\n    for x in numbers\
    \ {\n        if !set.add(x) {\n            result.append(x)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp81hmja9h.swift:10:17: error: value of type 'Set<Int>' has no member\
    \ 'add'\n        if !set.add(x) {\n            ~~~ ^~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    var noDups = [Int]()\n    for num in numbers\
    \ {\n        if !uniques.contains(num) {\n            uniques.append(num)\n  \
    \      } else {\n            noDups.append(num)\n        }\n    }\n    return\
    \ noDups\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpr7uyu9s9/tmpr7uyu9s9.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c698dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c695d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c695d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c695d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr7uyu9s9                        0x00005608e968f72d <unavailable> + 5933

    5    libc.so.6                          0x00002b0c69ac6460 __libc_start_main +
    245

    6    tmpr7uyu9s9                        0x00005608e968f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if result.contains(number)\
    \ {\n            continue\n        }\n        result.append(number)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp1azg5472/tmp1azg5472.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69c0059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69bfd50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69bfd50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69bfd4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1azg5472                        0x000055d705998891 <unavailable> + 6289

    5    libc.so.6                          0x00002b69c0245460 __libc_start_main +
    245

    6    tmp1azg5472                        0x000055d705998249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpsrfgo7xs.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueSet = Set<Int>()\n    var uniqueArray = [Int]()\n    var arrayCount\
    \ = numbers.count\n\n    for number in numbers {\n        if !uniqueSet.contains(number)\
    \ {\n            uniqueSet.add(number)\n            uniqueArray.append(number)\n\
    \        }\n    }\n\n    uniqueArray.removeDuplicates()\n\n    return uniqueArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpq2lhr6mn.swift:13:23: error: value of type 'Set<Int>' has no member\
    \ 'add'\n            uniqueSet.add(number)\n            ~~~~~~~~~ ^~~\n/tmp/tmpq2lhr6mn.swift:18:17:\
    \ error: value of type '[Int]' has no member 'removeDuplicates'\n    uniqueArray.removeDuplicates()\n\
    \    ~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = numbers.sort()\n    for value in result {\n        var remove\
    \ = false\n        for index in 0..<result.count {\n            if result[index]\
    \ == value {\n                remove = true\n                break\n         \
    \   }\n        }\n        if remove {\n            result.removeAtIndex(0)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpq6yktkj9.swift:7:26: error: cannot use mutating member on immutable\
    \ value: 'numbers' is a 'let' constant\n    var result = numbers.sort()\n    \
    \             ~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var output = [Int]()\n    var lastNumber: Int = numbers[0]\n    for number\
    \ in numbers {\n        if number != lastNumber {\n            output.append(lastNumber)\n\
    \        }\n        lastNumber = number\n    }\n    return output\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aeffd32bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeffd022561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeffd022286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeffd02213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeffd021bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aeffce21e83 <unavailable> + 188035

    6    tmpo4m3lghn                        0x000055eaff15590f <unavailable> + 6415

    7    tmpo4m3lghn                        0x000055eaff15552d <unavailable> + 5421

    8    libc.so.6                          0x00002aeffd517460 __libc_start_main +
    245

    9    tmpo4m3lghn                        0x000055eaff155239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for n in numbers {\n        if uniques.contains(n)\
    \ {\n            continue\n        }\n        uniques.append(n)\n    }\n    return\
    \ uniques\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpsgj4xcjq/tmpsgj4xcjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b582275ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5822455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5822455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58224547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsgj4xcjq                        0x000055dc476d3891 <unavailable> + 6289

    5    libc.so.6                          0x00002b582294a460 __libc_start_main +
    245

    6    tmpsgj4xcjq                        0x000055dc476d3249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    \n    guard numbers.count > 0 else { return [] }\n    var output = [Int]()\n\
    \    \n    for number in numbers {\n        if !contains(output, number) {\n \
    \           output.append(number)\n        }\n    }\n    \n    return output\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp5cgu42_b.swift:12:13: error: cannot find 'contains' in scope\n\
    \        if !contains(output, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let dict = numbers.reduce([Int:Int]()){\n        var dict = dictionary[$1]\n\
    \        if dict == nil {\n            dict[$1.0] = true\n        } else {\n \
    \           dict[$1.0] += 1\n        }\n        return dict\n    }\n\n    var\
    \ result = [Int]()\n    for i in 0..<dict.count {\n        if dict[i] == 1 {\n\
    \            result.append(i)\n        }\n    }\n\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpb5htsljm.swift:8:20: error: cannot find 'dictionary' in scope\n\
    \        var dict = dictionary[$1]\n                   ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var result = [Int]()\n  numbers.forEach() { value in\n    if !result.contains(value)\
    \ { result.append(value) }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp8nfgz6jm/tmp8nfgz6jm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2ec026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2ebd1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2ebd1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2ebd1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8nfgz6jm                        0x000055c7d5bb6791 <unavailable> + 6033

    5    libc.so.6                          0x00002ba2ec212460 __libc_start_main +
    245

    6    tmp8nfgz6jm                        0x000055c7d5bb6149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpqpuxywrp.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmposti5ddx.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = Array(repeating: 0, count: numbers.count)\n\n    var numIndex\
    \ = 0\n    for number in numbers {\n        guard numIndex < numbers.count else\
    \ { return result }\n\n        if number != result[numIndex] {\n            result[numIndex]\
    \ = number\n            numIndex += 1\n        }\n    }\n\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpnabnlgdd/tmpnabnlgdd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fc5511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fc5208b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fc5208988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fc52077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnabnlgdd                        0x000055f3d53fe8f1 <unavailable> + 6385

    5    libc.so.6                          0x00002b4fc56fd460 __libc_start_main +
    245

    6    tmpnabnlgdd                        0x000055f3d53fe2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var result = [Int]()\n  \n  for number in numbers {\n    if !contains(result,\
    \ number) {\n      result.append(number)\n    }\n  }\n  \n  return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp6xb_p_jw.swift:10:9: error: cannot find 'contains' in scope\n \
    \   if !contains(result, number) {\n        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n\n    var filteredNumbers\
    \ = [Int]()\n\n    for i in 0..<numbers.count {\n        if filteredNumbers.contains(numbers[i])\
    \ {\n            continue\n        } else {\n            filteredNumbers.append(numbers[i])\n\
    \        }\n    }\n\n    return filteredNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp0cshj5k2/tmp0cshj5k2.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33f2669c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33f2360b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33f2360988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33f235f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0cshj5k2                        0x000056439bdeb9f1 <unavailable> + 6641

    5    libc.so.6                          0x00002b33f2855460 __libc_start_main +
    245

    6    tmp0cshj5k2                        0x000056439bdeb3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var seen: Set<Int> = []\n    var result = [Int]()\n    for number in\
    \ numbers {\n        if seen.contains(number) {\n            continue\n      \
    \  } else {\n            seen.insert(number)\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpyah0jnty/tmpyah0jnty.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad42e06dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad42dd64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad42dd64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad42dd637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyah0jnty                        0x000056304001c991 <unavailable> + 6545

    5    libc.so.6                          0x00002ad42e259460 __libc_start_main +
    245

    6    tmpyah0jnty                        0x000056304001c349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    \n    var result = [Int]()\n    \n    for number in numbers {\n     \
    \   if result.contains(number) {\n            continue\n        }\n        \n\
    \        result.append(number)\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpcmwxdd1g/tmpcmwxdd1g.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae167ee4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae167bdbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae167bdb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae167bda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcmwxdd1g                        0x000055fe377d6891 <unavailable> + 6289

    5    libc.so.6                          0x00002ae1680d0460 __libc_start_main +
    245

    6    tmpcmwxdd1g                        0x000055fe377d6249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if result.contains(number)\
    \ {\n            continue\n        }\n        result.append(number)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp1azg5472/tmp1azg5472.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69c0059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69bfd50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69bfd50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69bfd4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1azg5472                        0x000055d705998891 <unavailable> + 6289

    5    libc.so.6                          0x00002b69c0245460 __libc_start_main +
    245

    6    tmp1azg5472                        0x000055d705998249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var new_numbers = [Int]()\n    for i in 0..<numbers.count {\n       \
    \ if !new_numbers.contains(numbers[i]) {\n            new_numbers.append(numbers[i])\n\
    \        }\n    }\n    return new_numbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpbnx3m153/tmpbnx3m153.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd2092fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd20626b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd20626988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd206257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbnx3m153                        0x000056356bc4a961 <unavailable> + 6497

    5    libc.so.6                          0x00002afd20b1b460 __libc_start_main +
    245

    6    tmpbnx3m153                        0x000056356bc4a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for element in numbers {\n        if !contains(&result,\
    \ element) {\n            result.append(element)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpqg3ftt0p.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, element) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    // First pass: collect unique elements\n    var uniquified: [Int] = []\n\
    \    for number in numbers {\n        if !uniquified.contains(number) {\n    \
    \        uniquified.append(number)\n        }\n    }\n\n    // Second pass: remove\
    \ those elements we've collected from input\n    var output = [Int]()\n    for\
    \ number in numbers {\n        if uniquified.contains(number) {\n            output.append(number)\n\
    \            uniquified.remove(number)\n        }\n    }\n\n    return output\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpk2mnaz0n.swift:20:24: error: no exact matches in call to instance\
    \ method 'remove'\n            uniquified.remove(number)\n                   \
    \    ^\nSwift.Array:10:37: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(at:)')\n    @inlinable public mutating func remove(at index: Int)\
    \ -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    numbers.removeAll({ $0 == $1 })\n    return numbers\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpmidpgwfg.swift:7:13: error: no exact matches in call to instance\
    \ method 'removeAll'\n    numbers.removeAll({ $0 == $1 })\n            ^\n/tmp/tmpmidpgwfg.swift:7:13:\
    \ note: found candidate with type '((Int) throws -> Bool) throws -> ()'\n    numbers.removeAll({\
    \ $0 == $1 })\n            ^\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result: [Int]\
    \ = []\n    var seen = [Int]()\n    for num in numbers {\n        if !seen.contains(num)\
    \ {\n            seen.insert(num)\n            result.append(num)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpu256ghx2.swift:14:28: error: missing argument for parameter 'at'\
    \ in call\n            seen.insert(num)\n                           ^\n      \
    \                     , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)'\
    \ declared here\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for element in numbers {\n        if unique.contains(element)\
    \ {\n            continue\n        }\n        unique.append(element)\n    }\n\
    \    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp6x8c4cnq/tmp6x8c4cnq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70f4a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70f474db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70f474d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70f474c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6x8c4cnq                        0x000055e3c9d27891 <unavailable> + 6289

    5    libc.so.6                          0x00002b70f4c42460 __libc_start_main +
    245

    6    tmp6x8c4cnq                        0x000055e3c9d27249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var count: [Int] = [0]\n    for number in numbers {\n        let index\
    \ = count[number]\n        count[number] = index + 1\n    }\n    var result: [Int]\
    \ = []\n    for number in numbers {\n        if count[number] == 1 {\n       \
    \     result.append(number)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b88690cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8868dc2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8868dc2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8868dc213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8868dc1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8868bc1e83 <unavailable> + 188035

    6    tmpd7es6xcd                        0x000055a7585efa30 <unavailable> + 6704

    7    tmpd7es6xcd                        0x000055a7585ef635 <unavailable> + 5685

    8    libc.so.6                          0x00002b88692b7460 __libc_start_main +
    245

    9    tmpd7es6xcd                        0x000055a7585ef239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for n in numbers {\n        if !contains(&result,\
    \ n) {\n            result.append(n)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxujc7mc9.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, n) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let newSet = Set<Int>()\n    var seenNumbers = [Int]()\n    for number\
    \ in numbers {\n        seenNumbers.contains(number) ? newSet.remove(number) :\
    \ newSet.insert(number)\n    }\n    return newSet.map { $0 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmppulczp65.swift:10:47: error: result values in '? :' expression\
    \ have mismatching types 'Int?' and '(inserted: Bool, memberAfterInsert: Int)'\n\
    \        seenNumbers.contains(number) ? newSet.remove(number) : newSet.insert(number)\n\
    \                                       ~~~~~~~^~~~~~~~~~~~~~\n/tmp/tmppulczp65.swift:10:47:\
    \ error: cannot use mutating member on immutable value: 'newSet' is a 'let' constant\n\
    \        seenNumbers.contains(number) ? newSet.remove(number) : newSet.insert(number)\n\
    \                                       ~~~~~~ ^\n/tmp/tmppulczp65.swift:7:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let newSet = Set<Int>()\n\
    \    ^~~\n    var\n/tmp/tmppulczp65.swift:10:71: error: cannot use mutating member\
    \ on immutable value: 'newSet' is a 'let' constant\n        seenNumbers.contains(number)\
    \ ? newSet.remove(number) : newSet.insert(number)\n                          \
    \                                     ~~~~~~ ^\n/tmp/tmppulczp65.swift:7:5: note:\
    \ change 'let' to 'var' to make it mutable\n    let newSet = Set<Int>()\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique: [Int] = []\n    for number in numbers {\n        if unique.contains(number)\
    \ {\n            continue\n        } else {\n            unique.append(number)\n\
    \        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkm2f8h_r/tmpkm2f8h_r.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62ae784c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62ae47bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62ae47b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62ae47a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm2f8h_r                        0x00005647bb8e9841 <unavailable> + 6209

    5    libc.so.6                          0x00002b62ae970460 __libc_start_main +
    245

    6    tmpkm2f8h_r                        0x00005647bb8e91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var count = [Int]()\n    for number in numbers {\n        if count.contains(number)\
    \ {\n            continue\n        }\n        count += 1\n    }\n    return numbers.filter\
    \ {count[$0] == 0}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp6yfgykek.swift:12:18: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Array<Int>'\n        count += 1\n               \
    \  ^\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var seen = [Int]()\n    return numbers.filter { number in\n        if\
    \ seen[number] != nil {\n            return false\n        }\n        seen[number]\
    \ = true\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxhl5u8up.swift:12:24: error: cannot assign value of type 'Bool'\
    \ to subscript of type 'Int'\n        seen[number] = true\n                  \
    \     ^~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var set = Set<Int>()\n    for number in numbers {\n        if set.contains(number)\
    \ {\n            continue\n        }\n        set.insert(number)\n    }\n    return\
    \ Array(set)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpm322xu5g/tmpm322xu5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6950f00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6950bf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6950bf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6950bf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm322xu5g                        0x000055b55530d81d <unavailable> + 6173

    5    libc.so.6                          0x00002b69510ec460 __libc_start_main +
    245

    6    tmpm322xu5g                        0x000055b55530d339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    var result = [Int]()\n\n    for number in\
    \ numbers {\n        if seen.contains(number) {\n            continue\n      \
    \  }\n\n        seen.insert(number)\n        result.append(number)\n    }\n\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpgnycfw_1/tmpgnycfw_1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f6ededc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f6eae4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f6eae4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f6eae37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgnycfw_1                        0x0000561a9004b981 <unavailable> + 6529

    5    libc.so.6                          0x00002b2f6efd9460 __libc_start_main +
    245

    6    tmpgnycfw_1                        0x0000561a9004b339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if uniques.contains(number)\
    \ {\n            continue\n        } else {\n            uniques.append(number)\n\
    \        }\n    }\n    return uniques\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp2lg14i76/tmp2lg14i76.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a9a280c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a99f77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a99f77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a99f767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2lg14i76                        0x0000563b1cf4d891 <unavailable> + 6289

    5    libc.so.6                          0x00002b1a9a46c460 __libc_start_main +
    245

    6    tmp2lg14i76                        0x0000563b1cf4d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n\n    for num in numbers {\n        if result.contains(num)\
    \ {\n            continue\n        }\n        result.append(num)\n    }\n\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpay8lyjrg/tmpay8lyjrg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad07a5bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad07a2b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad07a2b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad07a2b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpay8lyjrg                        0x00005564dce9e891 <unavailable> + 6289

    5    libc.so.6                          0x00002ad07a7a7460 __libc_start_main +
    245

    6    tmpay8lyjrg                        0x00005564dce9e249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var set = Set<Int>()\n    for i in numbers\
    \ {\n        if !set.contains(i) {\n            set.insert(i)\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp8zw3k5z2/tmp8zw3k5z2.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47737e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47734dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47734da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47734d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw3k5z2                        0x000056097240c981 <unavailable> + 6529

    5    libc.so.6                          0x00002b47739cf460 __libc_start_main +
    245

    6    tmp8zw3k5z2                        0x000056097240c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for num in numbers {\n        if !contains(&result,\
    \ num) {\n            result.append(num)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpemwuhnn0.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, num) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for n in numbers {\n        if !contains(result,\
    \ n) {\n            result.append(n)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpp4b8t5v8.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, n) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    func remove(_ numbers: [Int], _ index: Int) -> Int {\n        guard index\
    \ >= numbers.count else { return numbers[index] }\n        let duplicate: Bool\n\
    \        if index < numbers.count - 1 {\n            duplicate = numbers[index]\
    \ == numbers[index + 1]\n        } else {\n            duplicate = false\n   \
    \     }\n        if duplicate {\n            return remove(_ numbers: numbers,\
    \ index + 1)\n        }\n        return numbers[index]\n    }\n    return remove(_\
    \ numbers: numbers, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpmtiwcb0u.swift:16:29: error: expected ',' separator\n         \
    \   return remove(_ numbers: numbers, index + 1)\n                           \
    \ ^\n                           ,\n/tmp/tmpmtiwcb0u.swift:20:21: error: expected\
    \ ',' separator\n    return remove(_ numbers: numbers, 0)\n                  \
    \  ^\n                   ,\n/tmp/tmpmtiwcb0u.swift:16:27: error: '_' can only\
    \ appear in a pattern or on the left side of an assignment\n            return\
    \ remove(_ numbers: numbers, index + 1)\n                          ^\n/tmp/tmpmtiwcb0u.swift:20:19:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \    return remove(_ numbers: numbers, 0)\n                  ^\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if result.contains(number)\
    \ {\n            continue\n        }\n        result.append(number)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp1azg5472/tmp1azg5472.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69c0059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69bfd50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69bfd50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69bfd4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1azg5472                        0x000055d705998891 <unavailable> + 6289

    5    libc.so.6                          0x00002b69c0245460 __libc_start_main +
    245

    6    tmp1azg5472                        0x000055d705998249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return numbers.reduce([]) { (memo, number) -> [Int] in\n        let index\
    \ = memo.firstIndex(of: number)\n        if index == nil {\n            memo.append(number)\n\
    \        }\n        else {\n            memo.remove(at: index!)\n        }\n \
    \       return memo\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpz5j7cgj1.swift:10:18: error: cannot use mutating member on immutable\
    \ value: 'memo' is a 'let' constant\n            memo.append(number)\n       \
    \     ~~~~ ^\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let seen = Set<Int>()\n    var result = [Int]()\n\n    for number in\
    \ numbers {\n        if seen.contains(number) {\n            continue\n      \
    \  }\n\n        seen.insert(number)\n        result.append(number)\n    }\n\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpa0ahj09p.swift:15:14: error: cannot use mutating member on immutable\
    \ value: 'seen' is a 'let' constant\n        seen.insert(number)\n        ~~~~\
    \ ^\n/tmp/tmpa0ahj09p.swift:7:5: note: change 'let' to 'var' to make it mutable\n\
    \    let seen = Set<Int>()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    var seen: [Int: [Int]] = [:]\n    for number\
    \ in numbers {\n        seen[number] = nil\n    }\n    for number in numbers {\n\
    \        if seen[number] == nil {\n            result.append(number)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpbs3xc9ps/tmpbs3xc9ps.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ed4b3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ed4833b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ed4833988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ed48327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbs3xc9ps                        0x0000555cdbf87921 <unavailable> + 6433

    5    libc.so.6                          0x00002b3ed4d28460 __libc_start_main +
    245

    6    tmpbs3xc9ps                        0x0000555cdbf872d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var output = [Int]()\n    for (i, value) in numbers.enumerated() {\n\
    \        if i != numbers.lastIndexOf(value) {\n            output.append(value)\n\
    \        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp4vxdm_eu.swift:9:25: error: value of type '[Int]' has no member\
    \ 'lastIndexOf'\n        if i != numbers.lastIndexOf(value) {\n              \
    \  ~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var output: [Int] = []\n  var index: Int = 0\n  for i in 0..<numbers.count\
    \ {\n    if index == numbers.count {\n      break\n    }\n    if numbers[index]\
    \ == numbers[i] {\n      continue\n    }\n    output.append(numbers[index])\n\
    \    index = index + 1\n  }\n  return output\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpcgj94_8b/tmpcgj94_8b.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15970a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1596da0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1596da0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1596d9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgj94_8b                        0x00005612825e873d <unavailable> + 5949

    5    libc.so.6                          0x00002b1597295460 __libc_start_main +
    245

    6    tmpcgj94_8b                        0x00005612825e8259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    \n    for i in numbers {\n        if !contains(&result,\
    \ i) {\n            result.append(i)\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpl5a24q7y.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(&result, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var distinctSet = Set<Int>()\n  for number in numbers {\n    if !distinctSet.contains(number)\
    \ {\n      distinctSet.insert(number)\n    }\n  }\n  return Array(distinctSet)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpopfcoelb/tmpopfcoelb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98a25b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98a22aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98a22ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98a22ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopfcoelb                        0x000055ab4a1f281d <unavailable> + 6173

    5    libc.so.6                          0x00002b98a27a3460 __libc_start_main +
    245

    6    tmpopfcoelb                        0x000055ab4a1f2339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var numbers = numbers\n    var newnumbers = [Int]()\n    for number in\
    \ numbers {\n        if !newnumbers.contains(number) {\n            newnumbers.append(number)\n\
    \        }\n    }\n    return newnumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpzuqho2ub/tmpzuqho2ub.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31e4011c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31e3d08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31e3d08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31e3d077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzuqho2ub                        0x00005639c853f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b31e41fd460 __libc_start_main +
    245

    6    tmpzuqho2ub                        0x00005639c853f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = numbers\n    for number in numbers {\n        if result.contains(number)\
    \ {\n            result.remove(number)\n        } else {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp28onkb8a.swift:10:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(number)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    \n    for i in 0..<numbers.count {\n    \
    \    let first = numbers.firstIndex{$0 == numbers[i]}!\n        \n        if numbers.count\
    \ == 1 || numbers.index(first) == i {\n            result.append(numbers[i])\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp08jq27sn.swift:12:42: error: no exact matches in call to instance\
    \ method 'index'\n        if numbers.count == 1 || numbers.index(first) == i {\n\
    \                                         ^\nSwift.Array:7:28: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(after:)')\n    @inlinable public\
    \ func index(after i: Int) -> Int\n                           ^\nSwift.Array:9:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(before:)')\n\
    \    @inlinable public func index(before i: Int) -> Int\n                    \
    \       ^\nSwift.RandomAccessCollection:3:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(after:)')\n    @inlinable public func index(after\
    \ i: Self.Index) -> Self.Index\n                           ^\nSwift.RandomAccessCollection:4:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(before:)')\n\
    \    @inlinable public func index(before i: Self.Index) -> Self.Index\n      \
    \                     ^\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var newArray: [Int] = []\n    for element in numbers {\n        if !contains(newArray,\
    \ element) {\n            newArray.append(element)\n        }\n    }\n    return\
    \ newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpiqpsvpki.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(newArray, element) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmps7ilo_s0/tmps7ilo_s0.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69d2926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69d261db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69d261d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69d261c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps7ilo_s0                        0x000056386a3e1891 <unavailable> + 6289

    5    libc.so.6                          0x00002b69d2b12460 __libc_start_main +
    245

    6    tmps7ilo_s0                        0x000056386a3e1249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for element in numbers {\n        if !contains(&result,\
    \ element) {\n            result.append(element)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpqg3ftt0p.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, element) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = numbers.reduce([]) { (a, e) in\n        if !a.contains(e)\
    \ {\n            a.append(e)\n        }\n        return a\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpess40syh.swift:8:24: error: missing argument label 'where:' in\
    \ call\n        if !a.contains(e) {\n                       ^\n              \
    \         where: \n/tmp/tmpess40syh.swift:8:24: error: cannot convert value of\
    \ type 'Int' to expected argument type '(Any) throws -> Bool'\n        if !a.contains(e)\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var numbers_count = UInt64(0)\n    for number in numbers {\n        let\
    \ number_int = Int(number)\n        if let number_count = numbers_count[number_int]\
    \ {\n            numbers_count[number_int]++\n        } else {\n            numbers_count[number_int]\
    \ = 1\n        }\n    }\n    var numbers = [Int]()\n    for i in 0..<numbers_count.count\
    \ {\n        if numbers_count[i] > 1 {\n            numbers.append(i)\n      \
    \      numbers_count[i] = 0\n        }\n    }\n    return numbers\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbibkl5qd.swift:10:44: error: value of type 'UInt64' has no subscripts\n\
    \        if let number_count = numbers_count[number_int] {\n                 \
    \             ~~~~~~~~~~~~~^\n/tmp/tmpbibkl5qd.swift:11:38: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            numbers_count[number_int]++\n\
    \                                     ^~\n/tmp/tmpbibkl5qd.swift:11:26: error:\
    \ value of type 'UInt64' has no subscripts\n            numbers_count[number_int]++\n\
    \            ~~~~~~~~~~~~~^\n/tmp/tmpbibkl5qd.swift:13:26: error: value of type\
    \ 'UInt64' has no subscripts\n            numbers_count[number_int] = 1\n    \
    \        ~~~~~~~~~~~~~^\n/tmp/tmpbibkl5qd.swift:17:32: error: value of type 'UInt64'\
    \ has no member 'count'\n    for i in 0..<numbers_count.count {\n            \
    \     ~~~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueness: [Int] = numbers.map { $0 }\n    var unique: [Int] = []\n\
    \    var remaining: [Int] = []\n    for number in uniqueness {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        } else {\n            remaining.append(number)\n\
    \        }\n    }\n    return remaining\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpyeu78hh6/tmpyeu78hh6.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee17762c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee17459b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee17459988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee174587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyeu78hh6                        0x0000557db17e974d <unavailable> + 5965

    5    libc.so.6                          0x00002aee1794e460 __libc_start_main +
    245

    6    tmpyeu78hh6                        0x0000557db17e9269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpldswxq9m.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var newSet = [Int]()\n    for number in numbers {\n        if !contains(newSet,\
    \ number) {\n            newSet.append(number)\n        }\n    }\n    return newSet\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp1xdfqcnb.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(newSet, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n\n    for number in numbers {\n        if unique.contains(number)\
    \ {\n            removeAtIndex(unique, unique.firstIndex(of: number))\n      \
    \  } else {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpon0q6uh7.swift:11:13: error: cannot find 'removeAtIndex' in scope\n\
    \            removeAtIndex(unique, unique.firstIndex(of: number))\n          \
    \  ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = Array(repeating: 0, count: numbers.count)\n    for i in\
    \ 0 ..< numbers.count {\n        if result[i] != numbers[i] {\n            result[i]\
    \ = numbers[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpev_r6hey/tmpev_r6hey.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31af54fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31af246b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31af246988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31af2457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpev_r6hey                        0x00005623cc449911 <unavailable> + 6417

    5    libc.so.6                          0x00002b31af73b460 __libc_start_main +
    245

    6    tmpev_r6hey                        0x00005623cc4492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return numbers.reduce([]) { $0.contains($1) ? $0 : $0 += [$1] }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp2ol70_46.swift:7:59: error: left side of mutating operator isn't\
    \ mutable: result of conditional operator '? :' is never mutable\n    return numbers.reduce([])\
    \ { $0.contains($1) ? $0 : $0 += [$1] }\n                                    \
    \            ~    ~    ^\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var output = [Int]()\n    var seen = [Int]()\n    for element in numbers\
    \ {\n        if seen.contains(element) {\n            continue\n        }\n  \
    \      seen.append(element)\n        output.append(element)\n    }\n    return\
    \ output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmppghbdzhv/tmppghbdzhv.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0efbdf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0efbae8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0efbae8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0efbae77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppghbdzhv                        0x000056464ccf4891 <unavailable> + 6289

    5    libc.so.6                          0x00002b0efbfdd460 __libc_start_main +
    245

    6    tmppghbdzhv                        0x000056464ccf4249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpqpuxywrp.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return filter_map(numbers.sorted(by: >), <)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp9e5v75oy.swift:7:12: error: cannot find 'filter_map' in scope\n\
    \    return filter_map(numbers.sorted(by: >), <)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    // TODO: implement this\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmprjp6yt5o/tmprjp6yt5o.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add36e97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add36b8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add36b8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add36b8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprjp6yt5o                        0x0000556b9be5a4ad <unavailable> + 5293

    5    libc.so.6                          0x00002add37083460 __libc_start_main +
    245

    6    tmprjp6yt5o                        0x0000556b9be59fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = Set<Int>()\n    for num in numbers {\n        guard !result.contains(num)\
    \ else {\n            continue\n        }\n        result.append(num)\n    }\n\
    \    return Array(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp4cvt7o0t.swift:12:16: error: value of type 'Set<Int>' has no member\
    \ 'append'\n        result.append(num)\n        ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var index = 0\n    var numberSet = Set(numbers)\n    var result: [Int]\
    \ = []\n    for i in 0..<numbers.count {\n        if !numberSet.contains(numbers[i])\
    \ {\n            result.append(numbers[index])\n            index += 1\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmph3ku79ve/tmph3ku79ve.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af533bcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5338c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5338c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5338c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph3ku79ve                        0x000056157889e83d <unavailable> + 6205

    5    libc.so.6                          0x00002af533db9460 __libc_start_main +
    245

    6    tmph3ku79ve                        0x000056157889e359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp59dm6mqm/tmp59dm6mqm.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cfc93dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cfc634b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cfc634988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cfc6337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59dm6mqm                        0x000055a03f4b2891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2cfcb29460 __libc_start_main +
    245

    6    tmp59dm6mqm                        0x000055a03f4b2249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var result: [Int] = []\n  var seen = Set<Int>()\n  for num in numbers {\n\
    \    if !seen.contains(num) {\n      seen.insert(num)\n      result.append(num)\n\
    \    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp03fk4eov/tmp03fk4eov.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b329c7fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b329c4f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b329c4f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b329c4f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp03fk4eov                        0x0000558085522931 <unavailable> + 6449

    5    libc.so.6                          0x00002b329c9e6460 __libc_start_main +
    245

    6    tmp03fk4eov                        0x00005580855222e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    var seen = Set<Int>()\n    for number in\
    \ numbers {\n        if !seen.contains(number) {\n            seen.insert(number)\n\
    \            result.append(number)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpqcvz11cf/tmpqcvz11cf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfda5b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfda2adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfda2ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfda2ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcvz11cf                        0x0000558b490cc931 <unavailable> + 6449

    5    libc.so.6                          0x00002acfda7a2460 __libc_start_main +
    245

    6    tmpqcvz11cf                        0x0000558b490cc2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var output = [Int]()\n    for number in numbers {\n        if !contains(&output,\
    \ number) {\n            output.append(number)\n        }\n    }\n    return output\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpijl4g7f6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&output, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var output = [Int]()\n\n    for i in numbers {\n        if !output.contains(i)\
    \ {\n            output.append(i)\n        }\n    }\n\n    return output\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpn0pq_nlk/tmpn0pq_nlk.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae465d4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae465a42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae465a42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae465a417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0pq_nlk                        0x000055804d75d891 <unavailable> + 6289

    5    libc.so.6                          0x00002ae465f37460 __libc_start_main +
    245

    6    tmpn0pq_nlk                        0x000055804d75d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var removed = [Int]()\n    for number in numbers {\n        if !contains(removed,\
    \ number) {\n            removed.append(number)\n        }\n    }\n    return\
    \ removed\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpsmyr4kv0.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(removed, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if result.contains(number)\
    \ {\n            continue\n        }\n        result.insert(number)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphprbaro_.swift:12:29: error: missing argument for parameter 'at'\
    \ in call\n        result.insert(number)\n                            ^\n    \
    \                        , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)'\
    \ declared here\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var numberSet = NSCountedSet()\n    \n    for number in numbers {\n \
    \       guard let count = numberSet[number] else { numberSet[number] = 1; continue\
    \ }\n        numberSet[number] = count + 1\n    }\n    \n    var result: [Int]\
    \ = []\n    for number in numberSet {\n        if number > 1 {\n            result.append(number)\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpev5arssk.swift:7:21: error: cannot find 'NSCountedSet' in scope\n\
    \    var numberSet = NSCountedSet()\n                    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique: [Int] = Array(numbers)\n    for var i = 0; i < numbers.count;\
    \ i++ {\n        for var j = i + 1; j < numbers.count; j++ {\n            if numbers[j]\
    \ == numbers[i] {\n                unique.remove(at: j)\n                i -=\
    \ 1\n            }\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp4sp27hp_.swift:8:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < numbers.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4sp27hp_.swift:9:9: error: C-style for statement has been removed in Swift\
    \ 3\n        for var j = i + 1; j < numbers.count; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpsrfgo7xs.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return numbers.reduce(into: [], {$0[$0] += $1})\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpj4wge920.swift:7:41: error: cannot convert value of type '[Int]'\
    \ to expected argument type 'Int'\n    return numbers.reduce(into: [], {$0[$0]\
    \ += $1})\n                                        ^\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = Array(0..<numbers.count).map { i in numbers[i] }\n    var\
    \ i = numbers.count\n    while i >= 1 {\n        if result[i-1] == result[i] {\n\
    \            result.removeAtIndex(i-1)\n            i -= 1\n        } else {\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpuav7q3fq.swift:11:20: error: value of type '[Int]' has no member\
    \ 'removeAtIndex'\n            result.removeAtIndex(i-1)\n            ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques: [Int] = []\n    for number in numbers {\n        if uniques.contains(number)\
    \ {\n            continue\n        }\n        uniques.append(number)\n    }\n\
    \    return uniques\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpu5lhdgxk/tmpu5lhdgxk.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5a7fb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5a7cacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5a7cac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5a7cab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu5lhdgxk                        0x00005617fb008841 <unavailable> + 6209

    5    libc.so.6                          0x00002ba5a81a1460 __libc_start_main +
    245

    6    tmpu5lhdgxk                        0x00005617fb0081f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var seen = [Int]()\n    var output = [Int]()\n\n    for i in numbers\
    \ {\n        if !contains(seen, i) {\n            seen.append(i)\n           \
    \ output.append(i)\n        }\n    }\n\n    return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpgolp7al1.swift:11:13: error: cannot find 'contains' in scope\n\
    \        if !contains(seen, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    if numbers.count == 0 {\n        return numbers\n    }\n    var unique\
    \ = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmplmzczayx/tmplmzczayx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b7c0abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b7bda2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b7bda2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b7bda17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplmzczayx                        0x000055d59b2268f1 <unavailable> + 6385

    5    libc.so.6                          0x00002b9b7c297460 __libc_start_main +
    245

    6    tmplmzczayx                        0x000055d59b2262a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    \n    var uniqueNumbers = [Int]()\n    \n    for number in numbers {\n\
    \        if !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp0up14_fn/tmp0up14_fn.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af63bda5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af63ba9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af63ba9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af63ba9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0up14_fn                        0x00005600cc11a891 <unavailable> + 6289

    5    libc.so.6                          0x00002af63bf91460 __libc_start_main +
    245

    6    tmp0up14_fn                        0x00005600cc11a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var nums = numbers\n    var indices = [Int]()\n    for i in 0..<nums.count\
    \ {\n        if indices.contains(nums[i]) {\n            nums.remove(at: i)\n\
    \        } else {\n            indices.append(nums[i])\n        }\n    }\n   \
    \ return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adae2234c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adae1f2b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adae1f2b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adae1f2b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adae1f2abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adae1d2ae83 <unavailable> + 188035

    6    tmp1g8k69u6                        0x00005626360d1b87 <unavailable> + 7047

    7    tmp1g8k69u6                        0x00005626360d18b7 <unavailable> + 6327

    8    libc.so.6                          0x00002adae2420460 __libc_start_main +
    245

    9    tmp1g8k69u6                        0x00005626360d1369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return numbers.reduce(into: [Int]()) { (result, value) in result.append(value)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(remove_duplicates(numbers: []\
    \ as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) ==\
    \ [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1,\
    \ 4, 5])"
  status: Exception
  stderr: 'tmpfpc5elsj/tmpfpc5elsj.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeaa1a26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeaa171db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeaa171d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeaa171c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpc5elsj                        0x000055bde83d0741 <unavailable> + 5953

    5    libc.so.6                          0x00002aeaa1c12460 __libc_start_main +
    245

    6    tmpfpc5elsj                        0x000055bde83d00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = numbers[0]\n    for number in numbers {\n        if number\
    \ != result {\n            result = number\n        }\n    }\n    return result\
    \ + numbers[numbers.count-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp_v2z40zm.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return result + numbers[numbers.count-1]\n\
    \           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var new_list = [Int]()\n    var index = 0\n    for _ in numbers {\n \
    \       if new_list.contains(numbers[index]) {\n            continue\n       \
    \ } else {\n            new_list.append(numbers[index])\n        }\n    }\n  \
    \  return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp6fdnqdmp/tmp6fdnqdmp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ccfbdfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ccf8d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ccf8d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ccf8d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6fdnqdmp                        0x0000564f8d60a78d <unavailable> + 6029

    5    libc.so.6                          0x00002b2ccfdcb460 __libc_start_main +
    245

    6    tmp6fdnqdmp                        0x0000564f8d60a2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var numbers_sorted = numbers.sorted()\n    var result = [Int]()\n   \
    \ for i in 0..<(numbers_sorted.count - 1) {\n        if numbers_sorted[i] == numbers_sorted[i\
    \ + 1] {\n            numbers_sorted.removeAtIndex(i)\n        } else {\n    \
    \        result.append(numbers_sorted[i])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp6wpx3a38.swift:11:28: error: value of type '[Int]' has no member\
    \ 'removeAtIndex'\n            numbers_sorted.removeAtIndex(i)\n            ~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for n in numbers {\n        if !contains(result,\
    \ n) {\n            result.append(n)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmplyodubfs.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, n) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp6vc21ax5/tmp6vc21ax5.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a0e310c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a0e007b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a0e007988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a0e0067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vc21ax5                        0x000055e8a3d28891 <unavailable> + 6289

    5    libc.so.6                          0x00002b6a0e4fc460 __libc_start_main +
    245

    6    tmp6vc21ax5                        0x000055e8a3d28249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var result = numbers[:]\n  var lookup = [Int: Int]()\n  for number in numbers\
    \ {\n    lookup[number] = number\n  }\n  for number in numbers {\n    if lookup[number]\
    \ == nil {\n      continue\n    }\n    let newNumber = lookup[number]\n    let\
    \ index = numbers.index(of: number)\n    switch numbers.count {\n    case 0...1:\n\
    \      result[index] = newNumber\n    case 2...:\n      result[index] = newNumber\n\
    \      result[index + 1] = newNumber\n    default:\n      result[index] = newNumber\n\
    \      result[index + 1] = newNumber\n      result[index + 2] = newNumber\n  \
    \    result[index + 3] = newNumber\n    }\n    lookup[newNumber] = nil\n  }\n\
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmph8d13gb9.swift:7:24: error: expected expression in list of expressions\n\
    \  var result = numbers[:]\n                       ^\n/tmp/tmph8d13gb9.swift:7:25:\
    \ error: missing argument for parameter #1 in call\n  var result = numbers[:]\n\
    \                        ^\n                        <#Int#>\nSwift.Array:16:23:\
    \ note: 'subscript(_:)' declared here\n    @inlinable public subscript(index:\
    \ Int) -> Element { get set }\n                      ^\n/tmp/tmph8d13gb9.swift:17:25:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n    let index\
    \ = numbers.index(of: number)\n                        ^\n/tmp/tmph8d13gb9.swift:17:25:\
    \ note: use 'firstIndex(of:)' instead\n    let index = numbers.index(of: number)\n\
    \                        ^~~~~\n                        firstIndex\n/tmp/tmph8d13gb9.swift:23:14:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n      result[index\
    \ + 1] = newNumber\n             ^\n/tmp/tmph8d13gb9.swift:23:14: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \   result[index + 1] = newNumber\n             ^\n             (     ?? <#default\
    \ value#>)\n/tmp/tmph8d13gb9.swift:23:14: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n      result[index + 1] = newNumber\n\
    \             ^\n                  !\n/tmp/tmph8d13gb9.swift:26:14: error: value\
    \ of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped\
    \ to a value of type 'Array<Int>.Index' (aka 'Int')\n      result[index + 1] =\
    \ newNumber\n             ^\n/tmp/tmph8d13gb9.swift:26:14: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n      result[index\
    \ + 1] = newNumber\n             ^\n             (     ?? <#default value#>)\n\
    /tmp/tmph8d13gb9.swift:26:14: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n      result[index + 1] = newNumber\n\
    \             ^\n                  !\n/tmp/tmph8d13gb9.swift:27:14: error: value "
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    // Write your code here\n    return numbers.filter { $0.isMember == false\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(remove_duplicates(numbers: []\
    \ as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) ==\
    \ [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1,\
    \ 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpf8we3aew.swift:8:32: error: value of type 'Int' has no member 'isMember'\n\
    \    return numbers.filter { $0.isMember == false }\n                        \
    \    ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp6vc21ax5/tmp6vc21ax5.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a0e310c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a0e007b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a0e007988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a0e0067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vc21ax5                        0x000055e8a3d28891 <unavailable> + 6289

    5    libc.so.6                          0x00002b6a0e4fc460 __libc_start_main +
    245

    6    tmp6vc21ax5                        0x000055e8a3d28249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for i in numbers {\n        if !contains(unique,\
    \ i) {\n            unique.append(i)\n        }\n    }\n    return unique\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpk8v8s8el.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique: [Int] = []\n\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n\n    return\
    \ unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp8mu82o8c.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    numbers.sort()\n    var unique = [Int]()\n    for number in numbers {\n\
    \        if !unique.contains(number) {\n            unique.append(number)\n  \
    \      }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp2_5a3vlx.swift:7:13: error: cannot use mutating member on immutable\
    \ value: 'numbers' is a 'let' constant\n    numbers.sort()\n    ~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmps7ilo_s0/tmps7ilo_s0.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69d2926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69d261db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69d261d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69d261c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps7ilo_s0                        0x000056386a3e1891 <unavailable> + 6289

    5    libc.so.6                          0x00002b69d2b12460 __libc_start_main +
    245

    6    tmps7ilo_s0                        0x000056386a3e1249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    \n    var result = [Int]()\n    var numberSet = Set<Int>()\n    for element\
    \ in numbers {\n        if !numberSet.contains(element) {\n            result.append(element)\n\
    \            numberSet.add(element)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp72avwu9j.swift:13:23: error: value of type 'Set<Int>' has no member\
    \ 'add'\n            numberSet.add(element)\n            ~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpqpuxywrp.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var numbers_copy = numbers\n    var indices_to_remove: [Int] = []\n\n\
    \    var i = 0\n    while i < numbers_copy.count {\n        if numbers.count ==\
    \ 1 {\n            break\n        }\n\n        if numbers_copy[i] == numbers_copy[i\
    \ + 1] {\n            i += 1\n            continue\n        }\n\n        if let\
    \ index = numbers_copy.index(of: numbers_copy[i]) {\n            indices_to_remove.append(index)\n\
    \            numbers_copy.remove(at: index)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n\n    if indices_to_remove.count == 0 {\n        return\
    \ numbers\n    }\n\n    var new_numbers = numbers.filter {\n        !indices_to_remove.contains($0)\n\
    \    }\n\n    return new_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adeed9fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adeed6f3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adeed6f3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adeed6f313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adeed6f2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adeed4f2e83 <unavailable> + 188035

    6    tmpurssj4hv                        0x00005644f7f00abd <unavailable> + 6845

    7    tmpurssj4hv                        0x00005644f7f00705 <unavailable> + 5893

    8    libc.so.6                          0x00002adeedbe8460 __libc_start_main +
    245

    9    tmpurssj4hv                        0x00005644f7f00309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpsrfgo7xs.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    numbers.sort()\n    var result = [Int]()\n    var last: Int?\n    for\
    \ i in 0..<numbers.count {\n        if i == 0 || numbers[i] != numbers[i - 1]\
    \ {\n            result.append(numbers[i])\n            last = numbers[i]\n  \
    \      }\n    }\n    if let last = last {\n        result.append(last)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphyuevuci.swift:7:13: error: cannot use mutating member on immutable\
    \ value: 'numbers' is a 'let' constant\n    numbers.sort()\n    ~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = Set<Int>()\n    for number in numbers {\n       \
    \ if !uniqueNumbers.contains(number) {\n            uniqueNumbers.insert(number)\n\
    \        }\n    }\n    return uniqueNumbers.sorted().map { number in\n       \
    \ return number\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpn5hoxope/tmpn5hoxope.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad907606c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9072fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9072fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9072fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn5hoxope                        0x000055d62ba6ca21 <unavailable> + 6689

    5    libc.so.6                          0x00002ad9077f2460 __libc_start_main +
    245

    6    tmpn5hoxope                        0x000055d62ba6c3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = numbers.filter() {\n        if let found = numbers.index(of:\
    \ $0) {\n            numbers.remove(at: found)\n            return true\n    \
    \    }\n        return false\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpnmdbiefu.swift:9:21: error: cannot use mutating member on immutable\
    \ value: 'numbers' is a 'let' constant\n            numbers.remove(at: found)\n\
    \            ~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return numbers.reduce((numbers, number) -> [Int] {\n        var mutableNumbers\
    \ = numbers\n        var mutableIndex = 0\n        while mutableIndex < mutableNumbers.count\
    \ {\n            if number == mutableNumbers[mutableIndex] {\n               \
    \ mutableNumbers.remove(at: mutableIndex)\n            } else {\n            \
    \    mutableIndex += 1\n            }\n        }\n        return mutableNumbers\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpvf8r69nq.swift:7:54: error: expected ',' separator\n    return\
    \ numbers.reduce((numbers, number) -> [Int] {\n                              \
    \                       ^\n                                                  \
    \  ,\n/tmp/tmpvf8r69nq.swift:7:37: error: cannot find 'number' in scope\n    return\
    \ numbers.reduce((numbers, number) -> [Int] {\n                              \
    \      ^~~~~~\n/tmp/tmpvf8r69nq.swift:7:27: error: expected type before '->'\n\
    \    return numbers.reduce((numbers, number) -> [Int] {\n                    \
    \      ^\n/tmp/tmpvf8r69nq.swift:11:16: error: cannot find 'number' in scope\n\
    \            if number == mutableNumbers[mutableIndex] {\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    // O(n) - Linear time\n    var uniqueNumbers = [Int]()\n    for i in\
    \ numbers {\n        if !uniqueNumbers.contains(i) {\n            uniqueNumbers.append(i)\n\
    \        }\n    }\n\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp3abwv_t2/tmp3abwv_t2.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4e13ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4e10e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4e10e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4e10e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3abwv_t2                        0x00005642947b8891 <unavailable> + 6289

    5    libc.so.6                          0x00002af4e15d7460 __libc_start_main +
    245

    6    tmp3abwv_t2                        0x00005642947b8249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var numberSet: [Int] = Array(numbers)\n  return remove_duplicates1(numberSet)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp2gxsz5hq.swift:8:10: error: cannot find 'remove_duplicates1' in\
    \ scope\n  return remove_duplicates1(numberSet)\n         ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp6vc21ax5/tmp6vc21ax5.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a0e310c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a0e007b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a0e007988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a0e0067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vc21ax5                        0x000055e8a3d28891 <unavailable> + 6289

    5    libc.so.6                          0x00002b6a0e4fc460 __libc_start_main +
    245

    6    tmp6vc21ax5                        0x000055e8a3d28249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for n in\
    \ numbers {\n        if seen[n] == true {\n            continue\n        }\n \
    \       result.append(n)\n        seen[n] = true\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmprubgcqku/tmprubgcqku.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b23bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b238a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b238a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b238a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprubgcqku                        0x0000561e5f5e0961 <unavailable> + 6497

    5    libc.so.6                          0x00002b5b23d9c460 __libc_start_main +
    245

    6    tmprubgcqku                        0x0000561e5f5e0319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var newNumbers: [Int] = []\n    for number in numbers {\n        if !newNumbers.contains(number)\
    \ {\n            newNumbers.append(number)\n        }\n    }\n    return newNumbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp4h0y3kqn/tmp4h0y3kqn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c43e4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c43b41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c43b41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c43b407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4h0y3kqn                        0x000055a6d1aab841 <unavailable> + 6209

    5    libc.so.6                          0x00002b1c44036460 __libc_start_main +
    245

    6    tmp4h0y3kqn                        0x000055a6d1aab1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return remove_duplicates_with_index_array(numbers, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpjj3u2roo.swift:7:12: error: cannot find 'remove_duplicates_with_index_array'\
    \ in scope\n    return remove_duplicates_with_index_array(numbers, 0)\n      \
    \     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var output = [Int]()\n\n    for number in numbers {\n        if !contains(output,\
    \ number) {\n            output.append(number)\n        }\n    }\n\n    return\
    \ output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpsikr_j1d.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(output, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var numberSet = Set<Int>()\n    for number in numbers {\n        if !numberSet.contains(number)\
    \ {\n            numberSet.insert(number)\n        }\n    }\n    return Array(numberSet)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp947ddgb9/tmp947ddgb9.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae21297dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae212674b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae212674988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2126737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp947ddgb9                        0x0000558d4c3fa81d <unavailable> + 6173

    5    libc.so.6                          0x00002ae212b69460 __libc_start_main +
    245

    6    tmp947ddgb9                        0x0000558d4c3fa339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var output: [Int] = []\n    for number in numbers {\n        if !contains(output,\
    \ number) {\n            output.append(number)\n        }\n    }\n    return output\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpyn9zgstr.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(output, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpsrfgo7xs.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    var output = [Int]()\n\n    for n in numbers\
    \ {\n        if !unique.contains(n) {\n            unique.append(n)\n        }\
    \ else {\n            output.removeAll({ $0 == n })\n        }\n    }\n\n    return\
    \ output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp21hg8rl9.swift:14:20: error: no exact matches in call to instance\
    \ method 'removeAll'\n            output.removeAll({ $0 == n })\n            \
    \       ^\nSwift.RangeReplaceableCollection:2:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(where:)')\n    @inlinable public mutating func removeAll(where\
    \ shouldBeRemoved: (Self.Element) throws -> Bool) rethrows\n                 \
    \                   ^\nSwift.RangeReplaceableCollection:2:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(where:)')\n    @inlinable public\
    \ mutating func removeAll(where shouldBeRemoved: (Self.Element) throws -> Bool)\
    \ rethrows\n                                    ^\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        guard result.contains(number)\
    \ else { result.append(number); }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpnurkn5es.swift:9:69: error: 'guard' body must not fall through,\
    \ consider using a 'return' or 'throw' to exit the scope\n        guard result.contains(number)\
    \ else { result.append(number); }\n                                          \
    \                          ^\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for num in numbers {\n        if !result.contains(num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpobble2u5/tmpobble2u5.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacba6bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacba3b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacba3b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacba3b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpobble2u5                        0x00005560f0478891 <unavailable> + 6289

    5    libc.so.6                          0x00002aacba8aa460 __libc_start_main +
    245

    6    tmpobble2u5                        0x00005560f0478249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var set = Set<Int>()\n    var result = Array<Int>()\n\n    for number\
    \ in numbers {\n        if !set.contains(number) {\n            result.append(number)\n\
    \            set.insert(number)\n        }\n    }\n\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpwwmhk18y/tmpwwmhk18y.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b8c197c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b8be8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b8be8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b8be8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwmhk18y                        0x000055ae59bcb981 <unavailable> + 6529

    5    libc.so.6                          0x00002b2b8c383460 __libc_start_main +
    245

    6    tmpwwmhk18y                        0x000055ae59bcb339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var output: [Int] = []\n    for number in numbers {\n        if !contains(output,\
    \ number) {\n            output.append(number)\n        }\n    }\n    return output\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpyn9zgstr.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(output, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpsrfgo7xs.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    let set: Set<Int> = Set(numbers)\n\n    for\
    \ number in numbers {\n        if !set.contains(number) {\n            result.append(number)\n\
    \        }\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpvdsxi5_u/tmpvdsxi5_u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2736657c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b273634eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b273634e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b273634d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvdsxi5_u                        0x00005575a49977cd <unavailable> + 6093

    5    libc.so.6                          0x00002b2736843460 __libc_start_main +
    245

    6    tmpvdsxi5_u                        0x00005575a49972e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var output = [Int]()\n\n    for number in numbers {\n        if !contains(output,\
    \ number) {\n            output.append(number)\n        }\n    }\n\n    return\
    \ output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpsikr_j1d.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(output, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return numbers.reduce(into: []) { (result, num) in\n        if !result.contains(num)\
    \ {\n            result.append(num)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpx9jx4tsx/tmpx9jx4tsx.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4c5d88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4c5a7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4c5a7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4c5a7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx9jx4tsx                        0x000055b39a717751 <unavailable> + 5969

    5    libc.so.6                          0x00002ad4c5f74460 __libc_start_main +
    245

    6    tmpx9jx4tsx                        0x000055b39a717109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var set = Set<Int>()\n    for num in numbers {\n        set.insert(num)\n\
    \    }\n    return numbers.filter({ set.contains($0) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpzc_h5t2y/tmpzc_h5t2y.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d894c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d891b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d891b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d891b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzc_h5t2y                        0x000055ef424169a1 <unavailable> + 6561

    5    libc.so.6                          0x00002b2d896ac460 __libc_start_main +
    245

    6    tmpzc_h5t2y                        0x000055ef42416359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = numbers.filter { counts[$0] == 0 }\n    for (_, element)\
    \ in numbers.enumerated() {\n        if counts[element] == 0 {\n            result.remove(at:\
    \ result.index(of: element))\n            counts[element] = 1\n        } else\
    \ {\n            counts[element] = counts[element] + 1\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbdocy_ew.swift:7:35: error: cannot find 'counts' in scope\n   \
    \ var result = numbers.filter { counts[$0] == 0 }\n                          \
    \        ^~~~~~\n/tmp/tmpbdocy_ew.swift:9:12: error: cannot find 'counts' in scope\n\
    \        if counts[element] == 0 {\n           ^~~~~~\n/tmp/tmpbdocy_ew.swift:11:13:\
    \ error: cannot find 'counts' in scope\n            counts[element] = 1\n    \
    \        ^~~~~~\n/tmp/tmpbdocy_ew.swift:13:13: error: cannot find 'counts' in\
    \ scope\n            counts[element] = counts[element] + 1\n            ^~~~~~\n\
    /tmp/tmpbdocy_ew.swift:13:31: error: cannot find 'counts' in scope\n         \
    \   counts[element] = counts[element] + 1\n                              ^~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var counters = [Int: Int]()\n    for number in numbers {\n        counters[number]\
    \ = (counters[number] ?? 0) + 1\n    }\n    let uniqueNumbers = Array(counters).filter{$0\
    \ > 1}\n    return uniqueNumbers.map {_ in numbers[$0]}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp6048uf28.swift:12:44: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments\n    return uniqueNumbers.map\
    \ {_ in numbers[$0]}\n                                           ^\n/tmp/tmp6048uf28.swift:11:51:\
    \ error: type 'Dictionary<Int, Int>.Element' (aka '(key: Int, value: Int)') cannot\
    \ conform to 'BinaryInteger'\n    let uniqueNumbers = Array(counters).filter{$0\
    \ > 1}\n                                                  ^\n/tmp/tmp6048uf28.swift:11:51:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n    let uniqueNumbers = Array(counters).filter{$0 > 1}\n        \
    \                                          ^\n/tmp/tmp6048uf28.swift:11:51: note:\
    \ required by referencing operator function '>' on 'BinaryInteger' where 'Self'\
    \ = 'Dictionary<Int, Int>.Element' (aka '(key: Int, value: Int)')\n    let uniqueNumbers\
    \ = Array(counters).filter{$0 > 1}\n                                         \
    \         ^\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var output = [Int]()\n    var seen = [Int]()\n    for number in numbers\
    \ {\n        if seen.contains(number) {\n            continue\n        } else\
    \ {\n            output.append(number)\n            seen.append(number)\n    \
    \    }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp66vib7e1/tmp66vib7e1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf08889c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf08580b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf08580988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf0857f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp66vib7e1                        0x000055c3c766d891 <unavailable> + 6289

    5    libc.so.6                          0x00002aaf08a75460 __libc_start_main +
    245

    6    tmp66vib7e1                        0x000055c3c766d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = Set<Int>()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.insert(number)\n        }\n    }\n    return Array(result)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp_ujcc9zi/tmp_ujcc9zi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeeda39fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeeda096b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeeda096988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeeda0957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ujcc9zi                        0x0000555ece04681d <unavailable> + 6173

    5    libc.so.6                          0x00002aeeda58b460 __libc_start_main +
    245

    6    tmp_ujcc9zi                        0x0000555ece046339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniquelyUsed = [Int]()\n    var used = [Int]()\n    \n    var lastNumberIndex\
    \ = -1\n    for number in numbers {\n        if number == lastNumberIndex+1 {\n\
    \            uniquelyUsed.append(number)\n        } else {\n            uniquelyUsed.remove(number)\n\
    \        }\n        \n        used[number] = true\n        lastNumberIndex +=\
    \ 1\n    }\n    \n    var outputArray = [Int]()\n    for number in uniquelyUsed\
    \ {\n        outputArray.append(number)\n    }\n    \n    return outputArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpvt5ngjr0.swift:15:26: error: no exact matches in call to instance\
    \ method 'remove'\n            uniquelyUsed.remove(number)\n                 \
    \        ^\nSwift.Array:10:37: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(at:)')\n    @inlinable public mutating func remove(at index: Int)\
    \ -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n/tmp/tmpvt5ngjr0.swift:18:24: error: cannot\
    \ assign value of type 'Bool' to subscript of type 'Int'\n        used[number]\
    \ = true\n                       ^~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    guard numbers.count > 0 else {\n        return []\n    }\n    var result\
    \ = [Int]()\n    var lastNumberIndex = numbers.startIndex\n    for i in 1..<numbers.count\
    \ {\n        if numbers[lastNumberIndex] == numbers[i] {\n            numbers.remove(at:\
    \ lastNumberIndex)\n            lastNumberIndex = numbers.startIndex\n       \
    \ } else {\n            result.append(numbers[lastNumberIndex])\n            lastNumberIndex\
    \ = numbers.index(after: lastNumberIndex)\n        }\n    }\n    return Array(result)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpvysa88k8.swift:14:21: error: cannot use mutating member on immutable\
    \ value: 'numbers' is a 'let' constant\n            numbers.remove(at: lastNumberIndex)\n\
    \            ~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var output = Set<Int>()\n    for i in numbers {\n        if !output.contains(i)\
    \ {\n            output.add(i)\n        }\n    }\n\n    return output.sorted().map\
    \ { $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpas_mjcrf.swift:10:20: error: value of type 'Set<Int>' has no member\
    \ 'add'\n            output.add(i)\n            ~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var set: [Int] = []\n    for i in numbers {\n        if !set.isEmpty\
    \ && set.contains(i) {\n            continue\n        } else {\n            set.insert(i)\n\
    \        }\n    }\n    return set\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpy8z3b8r7.swift:12:25: error: missing argument for parameter 'at'\
    \ in call\n            set.insert(i)\n                        ^\n            \
    \            , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared\
    \ here\n    @inlinable public mutating func insert(_ newElement: __owned Element,\
    \ at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var result: [Int] = []\n  for number in numbers {\n    if !result.contains(number)\
    \ {\n      result.append(number)\n    }\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp8jr9zk7u/tmp8jr9zk7u.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b462d025c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b462cd1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b462cd1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b462cd1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8jr9zk7u                        0x000055cebbe41841 <unavailable> + 6209

    5    libc.so.6                          0x00002b462d211460 __libc_start_main +
    245

    6    tmp8jr9zk7u                        0x000055cebbe411f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    guard numbers.count > 0 else { return numbers}\n    var filtered: [Int]\
    \ = []\n    var index = 0\n    for number in numbers {\n        if filtered.contains(number)\
    \ {\n            filtered[index] = number\n        } else {\n            filtered.append(number)\n\
    \        }\n        index += 1\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e69fa4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e69c9b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6e69c9b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6e69c9b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6e69c9abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6e69a9a7ec <unavailable> + 186348

    6    tmp25gngmn7                        0x000055ce59bf3ae1 <unavailable> + 6881

    7    tmp25gngmn7                        0x000055ce59bf37f7 <unavailable> + 6135

    8    libc.so.6                          0x00002b6e6a190460 __libc_start_main +
    245

    9    tmp25gngmn7                        0x000055ce59bf32a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var numberSet = [Int]()\n    for number in numbers {\n        if !contains(numberSet,\
    \ number) {\n            numberSet.append(number)\n        }\n    }\n    return\
    \ numberSet\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpeeehjw4a.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(numberSet, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var result = numbers.reduce([]) { (result, current) -> () in\n    if result.contains(current)\
    \ {\n      result.append (current)\n    } else {\n      result.append(current)\n\
    \    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpr452h3of.swift:7:31: error: cannot convert value of type '[Any]'\
    \ to expected argument type '()'\n  var result = numbers.reduce([]) { (result,\
    \ current) -> () in\n                              ^\n/tmp/tmpr452h3of.swift:8:15:\
    \ error: value of tuple type '()' has no member 'contains'\n    if result.contains(current)\
    \ {\n       ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for n in numbers {\n        if !contains(&result,\
    \ &n) {\n            result.append(n)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpp8wetjh4.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, &n) {\n            ^~~~~~~~\n/tmp/tmpp8wetjh4.swift:9:31:\
    \ error: cannot pass immutable value as inout argument: 'n' is a 'let' constant\n\
    \        if !contains(&result, &n) {\n                              ^~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var seen = [Int]()\n    for number in numbers\
    \ {\n        if seen.contains(number) {\n            continue\n        }\n   \
    \     result.append(number)\n        seen.append(number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpawn4el69/tmpawn4el69.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e2e37dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e2e074b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e2e074988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e2e0737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpawn4el69                        0x000055f3ad963891 <unavailable> + 6289

    5    libc.so.6                          0x00002b6e2e569460 __libc_start_main +
    245

    6    tmpawn4el69                        0x000055f3ad963249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpldswxq9m.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return filter(numbers, uniqueness)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpl0c3n7sy.swift:7:12: error: cannot find 'filter' in scope\n   \
    \ return filter(numbers, uniqueness)\n           ^~~~~~\n/tmp/tmpl0c3n7sy.swift:7:28:\
    \ error: cannot find 'uniqueness' in scope\n    return filter(numbers, uniqueness)\n\
    \                           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var output: [Int] = []\n    var seen: Set<Int> = []\n    for number in\
    \ numbers {\n        if !seen.contains(number) {\n            output.append(number)\n\
    \            seen.insert(number)\n        }\n    }\n    return output\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpq4c_ug6a/tmpq4c_ug6a.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ab8ceac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ab89e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ab89e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ab89e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4c_ug6a                        0x00005624fa273941 <unavailable> + 6465

    5    libc.so.6                          0x00002b3ab8ed6460 __libc_start_main +
    245

    6    tmpq4c_ug6a                        0x00005624fa2732f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    seen = Set<Int>()\n    var result = [Int]()\n    for number in numbers\
    \ {\n        if seen.contains(number) {\n            continue\n        }\n   \
    \     seen.insert(number)\n        result.append(number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp_epczz6r.swift:7:5: error: cannot find 'seen' in scope\n    seen\
    \ = Set<Int>()\n    ^~~~\n/tmp/tmp_epczz6r.swift:10:12: error: cannot find 'seen'\
    \ in scope\n        if seen.contains(number) {\n           ^~~~\n/tmp/tmp_epczz6r.swift:13:9:\
    \ error: cannot find 'seen' in scope\n        seen.insert(number)\n        ^~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    \n    var uniqueNumbers = [Int]()\n    \n    for i in numbers {\n   \
    \     if !uniqueNumbers.contains(i) {\n            uniqueNumbers.append(i)\n \
    \       }\n    }\n    \n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpeo5jwv25/tmpeo5jwv25.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43fdfc5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43fdcbcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43fdcbc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43fdcbb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeo5jwv25                        0x000055be588c7891 <unavailable> + 6289

    5    libc.so.6                          0x00002b43fe1b1460 __libc_start_main +
    245

    6    tmpeo5jwv25                        0x000055be588c7249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let seen = Set<Int>()\n    return numbers.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(remove_duplicates(numbers: []\
    \ as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) ==\
    \ [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1,\
    \ 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphe4zc9b7.swift:8:34: error: cannot use mutating member on immutable\
    \ value: 'seen' is a 'let' constant\n    return numbers.filter { seen.insert($0).inserted\
    \ }\n                            ~~~~ ^\n/tmp/tmphe4zc9b7.swift:7:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let seen = Set<Int>()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var output = [Int]()\n    var seen = [Int]()\n    for n in numbers {\n\
    \        if seen.contains(n) {\n            continue\n        }\n        seen.insert(n)\n\
    \        output.append(n)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp8rug0a3g.swift:13:22: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(n)\n                     ^\n                  \
    \   , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared here\n  \
    \  @inlinable public mutating func insert(_ newElement: __owned Element, at i:\
    \ Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var newArray: [Int] = []\n    for i in numbers {\n        if newArray.contains(i)\
    \ {\n            continue\n        }\n        newArray.append(i)\n    }\n    return\
    \ newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpus_ooj6m/tmpus_ooj6m.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7275b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7272acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7272ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7272ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpus_ooj6m                        0x0000557a9cd55841 <unavailable> + 6209

    5    libc.so.6                          0x00002ab7277a1460 __libc_start_main +
    245

    6    tmpus_ooj6m                        0x0000557a9cd551f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for element in numbers {\n        if !contains(&result,\
    \ element) {\n            result.append(element)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmprlb8yjw6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, element) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = numbers\n    for idx in stride(from: 0, to: result.count,\
    \ by: 1) {\n        if result[idx] == result[idx-1] {\n            result.remove(at:\
    \ idx)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab46e3f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab46e0ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab46e0ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab46e0ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab46e0ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab46deebe83 <unavailable> + 188035

    6    tmphqzqvnc3                        0x000055e96cd84b0a <unavailable> + 6922

    7    tmphqzqvnc3                        0x000055e96cd846d5 <unavailable> + 5845

    8    libc.so.6                          0x00002ab46e5e1460 __libc_start_main +
    245

    9    tmphqzqvnc3                        0x000055e96cd842d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    if numbers.isEmpty { return [] }\n    var result: [Int] = []\n    for\
    \ x in numbers {\n        if !contains(result, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpr4lmqvmb.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let grouped = Dictionary(grouping: numbers) { number in\n        return\
    \ number\n    }\n    return grouped.map { key, groups in\n        groups.map {\
    \ number in\n            return number\n        }\n    }.flatMap { $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpk86b5_m1/tmpk86b5_m1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7450fffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7450cf6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7450cf6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7450cf57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk86b5_m1                        0x0000555c46cfd6dd <unavailable> + 5853

    5    libc.so.6                          0x00002b74511eb460 __libc_start_main +
    245

    6    tmpk86b5_m1                        0x0000555c46cfd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var seen = [Int]()\n    var unique = [Int]()\n    for n in numbers {\n\
    \        if seen[n - 1] == nil {\n            unique.append(n)\n            seen[n-1]\
    \ = n\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bef2efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7beefe6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7beefe6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7beefe613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7beefe5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7beede5e83 <unavailable> + 188035

    6    tmpn04t2wrn                        0x0000555e2f52ba3c <unavailable> + 6716

    7    tmpn04t2wrn                        0x0000555e2f52b685 <unavailable> + 5765

    8    libc.so.6                          0x00002b7bef4db460 __libc_start_main +
    245

    9    tmpn04t2wrn                        0x0000555e2f52b289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmps7ilo_s0/tmps7ilo_s0.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69d2926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69d261db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69d261d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69d261c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps7ilo_s0                        0x000056386a3e1891 <unavailable> + 6289

    5    libc.so.6                          0x00002b69d2b12460 __libc_start_main +
    245

    6    tmps7ilo_s0                        0x000056386a3e1249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979478
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let hashMap: Dictionary<Int, Int> = numbers.reduce([:]) {\n        var\
    \ seen: [Int: Int] = [:]\n        return $0 + (seen[$1] = $1)\n    }\n    return\
    \ Array(hashMap.keys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp1rbmbph2.swift:9:19: error: cannot convert return expression of\
    \ type '()' to return type 'Dictionary<Int, Int>'\n        return $0 + (seen[$1]\
    \ = $1)\n               ~~~^~~~~~~~~~~~~~~~~\n/tmp/tmp1rbmbph2.swift:9:19: error:\
    \ type '()' cannot conform to 'RangeReplaceableCollection'\n        return $0\
    \ + (seen[$1] = $1)\n                  ^\n/tmp/tmp1rbmbph2.swift:9:19: note: only\
    \ concrete types such as structs, enums and classes can conform to protocols\n\
    \        return $0 + (seen[$1] = $1)\n                  ^\n/tmp/tmp1rbmbph2.swift:9:19:\
    \ note: required by referencing operator function '+' on 'RangeReplaceableCollection'\
    \ where 'Self' = '()'\n        return $0 + (seen[$1] = $1)\n                 \
    \ ^\n/tmp/tmp1rbmbph2.swift:9:19: error: operator function '+' requires the types\
    \ '().Element' and 'Dictionary<Int, Int>.Element' (aka '(key: Int, value: Int)')\
    \ be equivalent\n        return $0 + (seen[$1] = $1)\n                  ^\nSwift.RangeReplaceableCollection:3:35:\
    \ note: where 'Self.Element' = '().Element', 'Other.Element' = 'Dictionary<Int,\
    \ Int>.Element' (aka '(key: Int, value: Int)')\n    @inlinable public static func\
    \ + <Other>(lhs: Other, rhs: Self) -> Self where Other : Sequence, Self.Element\
    \ == Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpsrfgo7xs.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    \n    var removeIndex = 0\n    var removed = [Int]()\n    for number\
    \ in numbers {\n        if !removed.contains(number) {\n            removed.append(number)\n\
    \            removeIndex += 1\n        }\n    }\n    return ArraySlice(removed,\
    \ removeIndex, removeIndex + numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpupn3ae_9.swift:16:22: error: missing argument label 'arrayLiteral:'\
    \ in call\n    return ArraySlice(removed, removeIndex, removeIndex + numbers.count)\n\
    \                     ^\n                      arrayLiteral: \n/tmp/tmpupn3ae_9.swift:16:12:\
    \ error: cannot convert return expression of type 'ArraySlice<Int>' to return\
    \ type '[Int]'\n    return ArraySlice(removed, removeIndex, removeIndex + numbers.count)\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    \n    if numbers.isEmpty { return [] }\n    var index = 0\n    var result\
    \ = [Int]()\n    var lastNumber: Int = 0\n    \n    for number in numbers {\n\
    \        if number == lastNumber {\n            numbers[index] = number\n    \
    \    }\n        \n        index += 1\n        lastNumber = number\n    }\n   \
    \ \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpf7dv2u4_.swift:15:20: error: cannot assign through subscript: 'numbers'\
    \ is a 'let' constant\n            numbers[index] = number\n            ~~~~~~~^\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmposti5ddx.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return numbers.filter{ numbers.contains($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpecbdg4t6/tmpecbdg4t6.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af92196dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af921664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af921664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9216637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpecbdg4t6                        0x0000557f8b239741 <unavailable> + 5953

    5    libc.so.6                          0x00002af921b59460 __libc_start_main +
    245

    6    tmpecbdg4t6                        0x0000557f8b2390f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    \n    var result = [Int]()\n    var seen = [Int]()\n    \n    for number\
    \ in numbers {\n        if seen.contains(number) {\n            result.append(number)\n\
    \        }\n        seen.insert(number)\n    }\n    \n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmprfdkb7y_.swift:15:27: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(number)\n                          ^\n        \
    \                  , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared\
    \ here\n    @inlinable public mutating func insert(_ newElement: __owned Element,\
    \ at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var counters = [Int]()\n    var new_numbers = [Int]()\n    for number\
    \ in numbers {\n        if counters.contains(number) {\n            continue\n\
    \        }\n        new_numbers.append(number)\n        counters.append(1)\n \
    \   }\n    return new_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpg_aeg3hy/tmpg_aeg3hy.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac04c752c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac04c449b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac04c449988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac04c4487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_aeg3hy                        0x000055580c7a3891 <unavailable> + 6289

    5    libc.so.6                          0x00002ac04c93e460 __libc_start_main +
    245

    6    tmpg_aeg3hy                        0x000055580c7a3249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var uniqueNumbers = [Int]()\n  for number in numbers {\n    if uniqueNumbers.contains(number)\
    \ {\n      continue\n    }\n    uniqueNumbers.append(number)\n  }\n  return uniqueNumbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp2gkhy8hn/tmp2gkhy8hn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4d1daec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4d1aa5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4d1aa5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4d1aa47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gkhy8hn                        0x0000559241b30891 <unavailable> + 6289

    5    libc.so.6                          0x00002ad4d1f9a460 __libc_start_main +
    245

    6    tmp2gkhy8hn                        0x0000559241b30249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = Set()\n    var result = [Int]()\n    for num in numbers\
    \ {\n        if unique.contains(num) {\n            continue\n        } else {\n\
    \            unique.insert(num)\n            result.append(num)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpipc8zzdm.swift:7:18: error: generic parameter 'Element' could not\
    \ be inferred\n    var unique = Set()\n                 ^\n/tmp/tmpipc8zzdm.swift:7:18:\
    \ note: explicitly specify the generic arguments to fix this issue\n    var unique\
    \ = Set()\n                 ^\n                    <<#Element: Hashable#>>\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = numbers[0...numbers.count]\n    let counts = Set(result)\n\
    \    var i = 0\n    while i < result.count {\n        if !counts.contains(result[i])\
    \ {\n            result.remove(at: i)\n        } else {\n            i += 1\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpr7dr2v94.swift:17:12: error: cannot convert return expression of\
    \ type 'ArraySlice<Int>' to return type '[Int]'\n    return result\n         \
    \  ^~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    if numbers.isEmpty { return numbers }\n    if numbers.count <= 1 { return\
    \ numbers }\n    var result: [Int] = []\n    for x in numbers {\n        if !contains(&result,\
    \ x) {\n            append(&result, x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpskwqbd6d.swift:11:13: error: cannot find 'contains' in scope\n\
    \        if !contains(&result, x) {\n            ^~~~~~~~\n/tmp/tmpskwqbd6d.swift:12:13:\
    \ error: cannot find 'append' in scope\n            append(&result, x)\n     \
    \       ^~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var set = Set<Int>()\n    for num in numbers {\n        if set.contains(num)\
    \ {\n            numbers.remove(num)\n        } else {\n            set.insert(num)\n\
    \        }\n    }\n    return numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpwhn8vpuf.swift:10:21: error: no exact matches in call to instance\
    \ method 'remove'\n            numbers.remove(num)\n                    ^\n/tmp/tmpwhn8vpuf.swift:10:21:\
    \ note: found candidate with type '(Int) -> Int'\n            numbers.remove(num)\n\
    \                    ^\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var output = [Int]()\n    var count = 0\n    for number in numbers {\n\
    \        if let count = output[count] {\n            if count == 1 {\n       \
    \         count += 1\n            } else {\n                output.insert(number,\
    \ at: count)\n                count += 1\n            }\n        } else {\n  \
    \          count += 1\n            output.insert(number, at: count)\n        }\n\
    \    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpfz3dddoh.swift:12:23: error: left side of mutating operator isn't\
    \ mutable: 'count' is a 'let' constant\n                count += 1\n         \
    \       ~~~~~ ^\n/tmp/tmpfz3dddoh.swift:15:23: error: left side of mutating operator\
    \ isn't mutable: 'count' is a 'let' constant\n                count += 1\n   \
    \             ~~~~~ ^\n/tmp/tmpfz3dddoh.swift:10:12: error: initializer for conditional\
    \ binding must have Optional type, not 'Int'\n        if let count = output[count]\
    \ {\n           ^           ~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var seen = [Int]()\n    for number in numbers\
    \ {\n        if seen.contains(number) {\n            continue\n        } else\
    \ {\n            seen.insert(number)\n            result.append(number)\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpte3118f3.swift:13:31: error: missing argument for parameter 'at'\
    \ in call\n            seen.insert(number)\n                              ^\n\
    \                              , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)'\
    \ declared here\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpqpuxywrp.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var output: [Int] = []\n    for number in numbers {\n        if output.contains(number)\
    \ {\n            continue\n        } else {\n            output.append(number)\n\
    \        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmprvbmwbwz/tmprvbmwbwz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39acf85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39acc7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39acc7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39acc7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvbmwbwz                        0x00005604dd0cc841 <unavailable> + 6209

    5    libc.so.6                          0x00002b39ad171460 __libc_start_main +
    245

    6    tmprvbmwbwz                        0x00005604dd0cc1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for n in numbers {\n        if !contains(unique,\
    \ n) {\n            unique.append(n)\n        }\n    }\n    return unique\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpyq1mlqi8.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, n) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique: [Int] = []\n    for i in numbers.indices {\n        unique.append(numbers[i])\n\
    \    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpxnx7ilbd/tmpxnx7ilbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4837afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4834a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4834a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4834a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxnx7ilbd                        0x0000558b28c79841 <unavailable> + 6209

    5    libc.so.6                          0x00002ba48399b460 __libc_start_main +
    245

    6    tmpxnx7ilbd                        0x0000558b28c791f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    var seen = [Int]()\n    for n in numbers\
    \ {\n        if seen.append(n).contains(true) {\n            continue\n      \
    \  }\n        result.append(n)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpudg40vn_.swift:10:27: error: value of tuple type '()' has no member\
    \ 'contains'\n        if seen.append(n).contains(true) {\n           ~~~~~~~~~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var seen = [Int]()\n    for number in numbers\
    \ {\n        if seen[number] == nil {\n            seen[number] = true\n     \
    \       result.append(number)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpjrowg0u9.swift:10:25: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if seen[number] == nil {\n\
    \           ~~~~~~~~~~~~ ^  ~~~\n/tmp/tmpjrowg0u9.swift:11:28: error: cannot assign\
    \ value of type 'Bool' to subscript of type 'Int'\n            seen[number] =\
    \ true\n                           ^~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = numbers\n    var temp = 0\n    for i in 0 ..< numbers.count\
    \ {\n        if numbers.contains(i) && numbers.count > 1 {\n            temp =\
    \ numbers[i]\n            numbers.remove(at: i)\n            result.insert(temp,\
    \ at: numbers.firstIndex(of: temp))\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpisjgogso.swift:12:21: error: cannot use mutating member on immutable\
    \ value: 'numbers' is a 'let' constant\n            numbers.remove(at: i)\n  \
    \          ~~~~~~~ ^\n/tmp/tmpisjgogso.swift:13:45: error: value of optional type\
    \ 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped to a value of type\
    \ 'Array<Int>.Index' (aka 'Int')\n            result.insert(temp, at: numbers.firstIndex(of:\
    \ temp))\n                                            ^\n/tmp/tmpisjgogso.swift:13:45:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result.insert(temp, at: numbers.firstIndex(of: temp))\n \
    \                                           ^\n                              \
    \                                   ?? <#default value#>\n/tmp/tmpisjgogso.swift:13:45:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result.insert(temp, at: numbers.firstIndex(of: temp))\n \
    \                                           ^\n                              \
    \                                  !\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    numbers.forEach { number in \n        if\
    \ !contains(result, number) {\n            result.append(number)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpwaj0_lry.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var seen: Set<Int> = []\n    var result: [Int] = []\n    for number in\
    \ numbers {\n        if seen.contains(number) {\n            continue\n      \
    \  } else {\n            seen.insert(number)\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp932h8kgx/tmp932h8kgx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fdfb15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fdf80cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fdf80c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fdf80b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp932h8kgx                        0x0000555c51e34941 <unavailable> + 6465

    5    libc.so.6                          0x00002b2fdfd01460 __libc_start_main +
    245

    6    tmp932h8kgx                        0x0000555c51e342f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979570
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let count = Set(numbers)\n    let numbers = numbers.filter { !count.contains($0)\
    \ }\n    return numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpzyhkqj60/tmpzyhkqj60.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b357343fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3573136b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3573136988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35731357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyhkqj60                        0x0000559e91c0b67d <unavailable> + 5757

    5    libc.so.6                          0x00002b357362b460 __libc_start_main +
    245

    6    tmpzyhkqj60                        0x0000559e91c0b199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659979570
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let uniqueNumbers = Set<Int>()\n\n    for i in numbers {\n        if\
    \ !uniqueNumbers.contains(i) {\n            uniqueNumbers.insert(i)\n        }\n\
    \    }\n\n    return uniqueNumbers.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpg06j_s6o.swift:11:27: error: cannot use mutating member on immutable\
    \ value: 'uniqueNumbers' is a 'let' constant\n            uniqueNumbers.insert(i)\n\
    \            ~~~~~~~~~~~~~ ^\n/tmp/tmpg06j_s6o.swift:7:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let uniqueNumbers = Set<Int>()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979569
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var seen: [Int] = [0]\n    \n    for num in numbers {\n        if seen[num]>0\
    \ {\n            seen[num] = seen[num] - 1\n        } else {\n            seen[num]\
    \ = 1\n        }\n    }\n    \n    return seen.filter{ $0>0 }.map { $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad980a1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad980714561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad980714286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad98071413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad980713bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad980513e83 <unavailable> + 188035

    6    tmpbohigxz2                        0x000056413ebcfabe <unavailable> + 6846

    7    tmpbohigxz2                        0x000056413ebcf705 <unavailable> + 5893

    8    libc.so.6                          0x00002ad980c09460 __libc_start_main +
    245

    9    tmpbohigxz2                        0x000056413ebcf309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659979570
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var duplicates = Set<Int>()\n    var uniqueNumbers: [Int] = []\n    for\
    \ num in numbers {\n        if !duplicates.contains(num) {\n            uniqueNumbers.append(num)\n\
    \            duplicates.insert(num)\n        }\n    }\n    return uniqueNumbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7pcvh5bb/tmp7pcvh5bb.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab2bb71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab2b868b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab2b868988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab2b8677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7pcvh5bb                        0x0000557f2a0e4931 <unavailable> + 6449

    5    libc.so.6                          0x00002aab2bd5d460 __libc_start_main +
    245

    6    tmp7pcvh5bb                        0x0000557f2a0e42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979570
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmposti5ddx.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979568
