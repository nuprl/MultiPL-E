language: swift
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    guard let numberCount = numbers.count else { return 0 }\n \
    \   let mean = average(numbers)\n    var deviations = [Double](repeating: 0, count:\
    \ numberCount)\n    for n in numbers {\n        deviations[Int(n)] += (n - mean)\n\
    \    }\n    return average(deviations)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpn_yai4h2.swift:10:11: error: initializer for conditional binding\
    \ must have Optional type, not 'Int'\n    guard let numberCount = numbers.count\
    \ else { return 0 }\n          ^                 ~~~~~~~~~~~~~\n/tmp/tmpn_yai4h2.swift:11:16:\
    \ error: cannot find 'average' in scope\n    let mean = average(numbers)\n   \
    \            ^~~~~~~\n/tmp/tmpn_yai4h2.swift:16:12: error: cannot find 'average'\
    \ in scope\n    return average(deviations)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let center = numbers.reduce((0.0, 0.0))\n    let diff = numbers.map((number)\
    \ -> Double in\n        number - center)\n    return diff.reduce((0.0, Double(number)))\
    \ { $0 + $1/ Double(numbers.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpsgfriov3.swift:11:47: error: expected ',' separator\n    let diff\
    \ = numbers.map((number) -> Double in\n                                      \
    \        ^\n                                             ,\n/tmp/tmpsgfriov3.swift:11:47:\
    \ error: expected expression in list of expressions\n    let diff = numbers.map((number)\
    \ -> Double in\n                                              ^\n/tmp/tmpsgfriov3.swift:13:57:\
    \ error: consecutive statements on a line must be separated by ';'\n    return\
    \ diff.reduce((0.0, Double(number))) { $0 + $1/ Double(numbers.count) }\n    \
    \                                                    ^\n                     \
    \                                   ;\n/tmp/tmpsgfriov3.swift:10:33: error: instance\
    \ method 'reduce' expects 2 separate arguments; remove extra parentheses to change\
    \ tuple into separate arguments\n    let center = numbers.reduce((0.0, 0.0))\n\
    \                                ^        ~\n                                \
    \         \nSwift.Sequence:2:28: note: 'reduce' declared here\n    @inlinable\
    \ public func reduce<Result>(_ initialResult: Result, _ nextPartialResult: (_\
    \ partialResult: Result, Self.Element) throws -> Result) rethrows -> Result\n\
    \                           ^\n/tmp/tmpsgfriov3.swift:11:29: error: cannot find\
    \ 'number' in scope\n    let diff = numbers.map((number) -> Double in\n      \
    \                      ^~~~~~\n/tmp/tmpsgfriov3.swift:11:29: error: expected type\
    \ before '->'\n    let diff = numbers.map((number) -> Double in\n            \
    \                ^\n/tmp/tmpsgfriov3.swift:11:24: error: no exact matches in call\
    \ to instance method 'map'\n    let diff = numbers.map((number) -> Double in\n\
    \                       ^\n/tmp/tmpsgfriov3.swift:11:24: note: found candidate\
    \ with type '((Double) throws -> _) throws -> Array<_>'\n    let diff = numbers.map((number)\
    \ -> Double in\n                       ^\n/tmp/tmpsgfriov3.swift:13:37: error:\
    \ cannot find 'number' in scope\n    return diff.reduce((0.0, Double(number)))\
    \ { $0 + $1/ Double(numbers.count) }\n                                    ^~~~~~\n\
    /tmp/tmpsgfriov3.swi"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp04dz5cav.swift:10:10: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n  return meanAbsoluteDeviation(numbers)\n         ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mut x_mean = 0.0\n    let mut sum_xdiff = 0.0\n    for\
    \ number in numbers {\n        let xdiff = number - x_mean\n        sum_xdiff\
    \ += xdiff\n        x_mean += xdiff\n    }\n    let mut n = 0\n    let mut sum_xdiff2\
    \ = 0.0\n    for number in numbers {\n        let xdiff = number - x_mean\n  \
    \      let xdiff2 = xdiff * xdiff\n        sum_xdiff2 += xdiff2\n        if n\
    \ > 0 {\n            sum_xdiff2 -= (sum_xdiff2 * n - sum_xdiff * sum_xdiff) /\
    \ (n - 1)\n        }\n        n += 1\n    }\n    let mad =\n        sqrt(sum_xdiff2)\
    \ /\n        (n - 1) /\n        (2.0 * M_PI * sqrt(Double(numbers.count)))\n \
    \   return mad\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpye6f8rsj.swift:10:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut x_mean =\
    \ 0.0\n            ^\n/tmp/tmpye6f8rsj.swift:10:13: note: join the identifiers\
    \ together\n    let mut x_mean = 0.0\n        ~~~~^~~~~~\n        mutx_mean\n\
    /tmp/tmpye6f8rsj.swift:10:13: note: join the identifiers together with camel-case\n\
    \    let mut x_mean = 0.0\n        ~~~~^~~~~~\n        mutX_mean\n/tmp/tmpye6f8rsj.swift:11:13:\
    \ error: found an unexpected second identifier in constant declaration; is there\
    \ an accidental break?\n    let mut sum_xdiff = 0.0\n            ^\n/tmp/tmpye6f8rsj.swift:11:13:\
    \ note: join the identifiers together\n    let mut sum_xdiff = 0.0\n        ~~~~^~~~~~~~~\n\
    \        mutsum_xdiff\n/tmp/tmpye6f8rsj.swift:11:13: note: join the identifiers\
    \ together with camel-case\n    let mut sum_xdiff = 0.0\n        ~~~~^~~~~~~~~\n\
    \        mutSum_xdiff\n/tmp/tmpye6f8rsj.swift:17:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut n = 0\n            ^\n/tmp/tmpye6f8rsj.swift:17:13: note: join the\
    \ identifiers together\n    let mut n = 0\n        ~~~~^\n        mutn\n/tmp/tmpye6f8rsj.swift:17:13:\
    \ note: join the identifiers together with camel-case\n    let mut n = 0\n   \
    \     ~~~~^\n        mutN\n/tmp/tmpye6f8rsj.swift:18:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut sum_xdiff2 = 0.0\n            ^\n/tmp/tmpye6f8rsj.swift:18:13: note:\
    \ join the identifiers together\n    let mut sum_xdiff2 = 0.0\n        ~~~~^~~~~~~~~~\n\
    \        mutsum_xdiff2\n/tmp/tmpye6f8rsj.swift:18:13: note: join the identifiers\
    \ together with camel-case\n    let mut sum_xdiff2 = 0.0\n        ~~~~^~~~~~~~~~\n\
    \        mutSum_xdiff2\n/tmp/tmpye6f8rsj.swift:11:9: error: invalid redeclaration\
    \ of 'mut'\n    let mut sum_xdiff = 0.0\n        ^\n/tmp/tmpye6f8rsj.swift:10:9:\
    \ note: 'mut' previously declared here\n    let mut x_mean = 0.0\n        ^\n\
    /tmp/tmpye6f8rsj.swift:13:30: error: cannot find 'x_mean' in scope\n   "
  stdout: ''
  timestamp: 1660009190
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0.0\n    var sum2: Double = 0.0\n    for\
    \ number in numbers {\n        sum += number\n        sum2 += number * number\n\
    \    }\n    let average = Double(sum / Double(numbers.count))\n    return sqrt(Double(sum2\
    \ / Double(numbers.count)) - (average * average))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpkn6uarrs.swift:17:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(Double(sum2 / Double(numbers.count)) - (average * average))\n         \
    \  ^~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean: Double = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    return abs(numbers - mean).reduce(0, +) / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpqxmq0i5y.swift:11:16: error: cannot convert value of type '[Double]'\
    \ to expected argument type 'Double'\n    return abs(numbers - mean).reduce(0,\
    \ +) / Double(numbers.count)\n               ^\n/tmp/tmpqxmq0i5y.swift:11:32:\
    \ error: value of type 'Double' has no member 'reduce'\n    return abs(numbers\
    \ - mean).reduce(0, +) / Double(numbers.count)\n           ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009193
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  if numbers.isEmpty {\n    return 0\n  }\n\n  return sum(numbers)\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmporzwce3o.swift:14:10: error: cannot find 'sum' in scope\n  return\
    \ sum(numbers) / Double(numbers.count)\n         ^~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  if numbers.isEmpty { return 0.0 }\n  return Double(numbers.reduce(0,\
    \ { (result, number) -> Double in\n    return result + fabs(number - result)\n\
    \  })) / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp07lf2si4.swift:12:21: error: cannot find 'fabs' in scope\n    return\
    \ result + fabs(number - result)\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Float64(mean_absolute_deviation(numbers: numbers).value)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_t1kyrzh.swift:10:62: error: value of type 'Double' has no member\
    \ 'value'\n    return Float64(mean_absolute_deviation(numbers: numbers).value)\n\
    \                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.reduce(0, combine: +)\n    return (numbers\
    \ - mean).reduce(0.0, combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2cixegm6.swift:10:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +)\n                    \
    \         ^   ~~~~~~~~~\n                                 \n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mean(absolute_deviation(numbers))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpelckiz3t.swift:10:12: error: cannot find 'mean' in scope\n    return\
    \ mean(absolute_deviation(numbers))\n           ^~~~\n/tmp/tmpelckiz3t.swift:10:17:\
    \ error: cannot find 'absolute_deviation' in scope\n    return mean(absolute_deviation(numbers))\n\
    \                ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mean(numbers.map { abs($0 - mean($0)) })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpvtt2f1c6.swift:10:12: error: cannot find 'mean' in scope\n    return\
    \ mean(numbers.map { abs($0 - mean($0)) })\n           ^~~~\n/tmp/tmpvtt2f1c6.swift:10:40:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers.map { abs($0 - mean($0))\
    \ })\n                                       ^~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let sum = numbers.reduce(0, combine: +)\n    let average =\
    \ Double(sum / Double(numbers.count))\n    var mad = 0.0\n    for number in numbers\
    \ {\n        mad += ((number - average) * (number - average))\n    }\n    return\
    \ mad / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpw2dpebc9.swift:10:29: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = numbers.reduce(0, combine: +)\n                     \
    \       ^   ~~~~~~~~~\n                                \n"
  stdout: ''
  timestamp: 1660009170
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.isEmpty {\n        return 0\n    }\n    var total\
    \ = 0.0\n    for value in numbers {\n        total += abs(value)\n    }\n    return\
    \ total / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpkvzzg5yt/tmpkvzzg5yt.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae10db58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae10d84fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae10d84f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae10d84e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvzzg5yt                        0x000055ebc8b7e653 <unavailable> + 5715

    5    libc.so.6                          0x00002ae10dd44460 __libc_start_main +
    245

    6    tmpkvzzg5yt                        0x000055ebc8b7e2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var n = 0\n    var sum = 0.0\n    var mean = 0.0\n    for n\
    \ in numbers {\n        sum += (n-mean)\n        n += 1\n        mean += n\n \
    \   }\n    return sum / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpqtywz9sf.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n += 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return _meanAbsoluteDeviation(numbers: numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpsfquf7iq.swift:10:12: error: cannot find '_meanAbsoluteDeviation'\
    \ in scope\n    return _meanAbsoluteDeviation(numbers: numbers)\n           ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0.0\n    var sumOfSquares: Double = 0.0\n\
    \n    for i in 0..<numbers.count {\n        sum += numbers[i]\n        sumOfSquares\
    \ += numbers[i] * numbers[i]\n    }\n\n    return sqrt(sumOfSquares / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpy3eri0qt.swift:18:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sumOfSquares / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mab(numbers, mean)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpkve5gfmm.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpkve5gfmm.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpkve5gfmm.swift:11:12:\
    \ error: cannot find 'mab' in scope\n    return mab(numbers, mean)\n         \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    guard numbers.count > 0 else { return Double(0.0) }\n\n   \
    \ let mut sum = Double(0.0)\n\n    for i in 0..<numbers.count {\n        let delta\
    \ = numbers[i] - numbers.reduce((Double(0.0), +))\n        sum += delta * delta\n\
    \    }\n\n    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajts1yix.swift:12:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut sum = Double(0.0)\n\
    \            ^\n/tmp/tmpajts1yix.swift:12:13: note: join the identifiers together\n\
    \    let mut sum = Double(0.0)\n        ~~~~^~~\n        mutsum\n/tmp/tmpajts1yix.swift:12:13:\
    \ note: join the identifiers together with camel-case\n    let mut sum = Double(0.0)\n\
    \        ~~~~^~~\n        mutSum\n/tmp/tmpajts1yix.swift:15:49: error: instance\
    \ method 'reduce' expects 2 separate arguments; remove extra parentheses to change\
    \ tuple into separate arguments\n        let delta = numbers[i] - numbers.reduce((Double(0.0),\
    \ +))\n                                                ^              ~\n    \
    \                                                           \nSwift.Sequence:2:28:\
    \ note: 'reduce' declared here\n    @inlinable public func reduce<Result>(_ initialResult:\
    \ Result, _ nextPartialResult: (_ partialResult: Result, Self.Element) throws\
    \ -> Result) rethrows -> Result\n                           ^\n/tmp/tmpajts1yix.swift:16:9:\
    \ error: cannot find 'sum' in scope\n        sum += delta * delta\n        ^~~\n\
    /tmp/tmpajts1yix.swift:19:12: error: cannot find 'sum' in scope\n    return sum\
    \ / Double(numbers.count)\n           ^~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return (sum(numbers) / Double(numbers.count)).abs\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpc83s9jy6.swift:10:13: error: cannot find 'sum' in scope\n    return\
    \ (sum(numbers) / Double(numbers.count)).abs\n            ^~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpefugbocq.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpefugbocq.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return sum(absOf(numbers - mean))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcmst4jsk.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpcmst4jsk.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpcmst4jsk.swift:11:12:\
    \ error: cannot find 'sum' in scope\n    return sum(absOf(numbers - mean))\n \
    \          ^~~\n/tmp/tmpcmst4jsk.swift:11:16: error: cannot find 'absOf' in scope\n\
    \    return sum(absOf(numbers - mean))\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  return standardDeviationX(numbers, standardDeviation: standardDeviationY(numbers))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpkm4k3apg.swift:10:10: error: cannot find 'standardDeviationX' in\
    \ scope\n  return standardDeviationX(numbers, standardDeviation: standardDeviationY(numbers))\n\
    \         ^~~~~~~~~~~~~~~~~~\n/tmp/tmpkm4k3apg.swift:10:57: error: cannot find\
    \ 'standardDeviationY' in scope\n  return standardDeviationX(numbers, standardDeviation:\
    \ standardDeviationY(numbers))\n                                             \
    \           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return madev(numbers, center: numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmps346m28r.swift:10:12: error: cannot find 'madev' in scope\n   \
    \ return madev(numbers, center: numbers)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum = numbers.reduce(0, combine: +)\n    var mean = sum\
    \ / Double(numbers.count)\n    var mad: Double\n    if numbers.count == 0 {\n\
    \        mad = 0\n    } else {\n        mad = mean - numbers.reduce(0, combine:\
    \ *)\n    }\n    return mad\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpr6r009rq.swift:10:29: error: extraneous argument label 'combine:'\
    \ in call\n    var sum = numbers.reduce(0, combine: +)\n                     \
    \       ^   ~~~~~~~~~\n                                \n/tmp/tmpr6r009rq.swift:16:36:\
    \ error: extraneous argument label 'combine:' in call\n        mad = mean - numbers.reduce(0,\
    \ combine: *)\n                                   ^   ~~~~~~~~~\n            \
    \                           \n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var mean: Double?\n    for value in numbers {\n        guard\
    \ let value = value else { break }\n        guard let mean = mean else { mean\
    \ = 0 }\n        let delta = (value - mean).abs()\n        if delta > 0 { mean\
    \ += delta }\n        else { mean -= delta }\n    }\n    guard let mean = mean\
    \ else { return Double.greatestFiniteMagnitude }\n    return mean\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpx9zo6999.swift:12:15: error: initializer for conditional binding\
    \ must have Optional type, not 'Double'\n        guard let value = value else\
    \ { break }\n              ^           ~~~~~\n/tmp/tmpx9zo6999.swift:14:36: error:\
    \ value of type 'Double' has no member 'abs'\n        let delta = (value - mean).abs()\n\
    \                    ~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return average(zip(numbers, numbers.map { $0 - average($0)\
    \ }))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpdeouusfu.swift:10:12: error: cannot find 'average' in scope\n \
    \   return average(zip(numbers, numbers.map { $0 - average($0) }))\n         \
    \  ^~~~~~~\n/tmp/tmpdeouusfu.swift:10:52: error: cannot find 'average' in scope\n\
    \    return average(zip(numbers, numbers.map { $0 - average($0) }))\n        \
    \                                           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers)\n    var dev = 0.0\n    for n in\
    \ numbers {\n        dev += (n - mean)\n    }\n    return abs(dev) / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcw2ju9yu.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let mean = mean(numbers)\n  let average = numbers.reduce(0, +)\n\
    \  return Double(numbers.reduce(0,+)\n    - Double(numbers.reduce(0,+) * Double(numbers.count))\
    \ * (Double(numbers.count) - 1))\n    / Double(numbers.count)\n    - Double(average)\
    \ * (mean - average)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpsug65jad.swift:10:14: error: use of local variable 'mean' before\
    \ its declaration\n  let mean = mean(numbers)\n             ^\n/tmp/tmpsug65jad.swift:10:7:\
    \ note: 'mean' declared here\n  let mean = mean(numbers)\n      ^\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpvtndzjbs.swift:10:12: error: cannot find 'Statistics' in scope\n\
    \    return Statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum = 0.0\n    for n in numbers {\n        sum += math.pow((n\
    \ - mean), 2)\n    }\n    return math.sqrt(sum / Double(numbers.count))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpohhwl8f4.swift:12:16: error: cannot find 'math' in scope\n    \
    \    sum += math.pow((n - mean), 2)\n               ^~~~\n/tmp/tmpohhwl8f4.swift:12:30:\
    \ error: cannot find 'mean' in scope\n        sum += math.pow((n - mean), 2)\n\
    \                             ^~~~\n/tmp/tmpohhwl8f4.swift:14:12: error: cannot\
    \ find 'math' in scope\n    return math.sqrt(sum / Double(numbers.count))\n  \
    \         ^~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  var sum: Double = 0\n  var sum2: Double = 0\n\n  for n in numbers\
    \ {\n    sum += n * n\n    sum2 += n * n\n  }\n\n  return Double(sum / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp492pmpe5/tmp492pmpe5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b297afb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b297aca8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b297aca8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b297aca77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp492pmpe5                        0x0000557a8fc9a563 <unavailable> + 5475

    5    libc.so.6                          0x00002b297b19d460 __libc_start_main +
    245

    6    tmp492pmpe5                        0x0000557a8fc9a1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let total = 0.0\n  var xMean = Double.nan\n  for n in numbers\
    \ {\n    total += n\n    if Double.nan == xMean {\n      xMean = n\n    } else\
    \ {\n      xMean = xMean + (n - xMean) / Double(numbers.count)\n    }\n  }\n \
    \ return total / (Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3dl1js8u.swift:13:11: error: left side of mutating operator isn't\
    \ mutable: 'total' is a 'let' constant\n    total += n\n    ~~~~~ ^\n/tmp/tmp3dl1js8u.swift:10:3:\
    \ note: change 'let' to 'var' to make it mutable\n  let total = 0.0\n  ^~~\n \
    \ var\n/tmp/tmp3dl1js8u.swift:14:19: warning: comparison with '.nan' using '=='\
    \ is always false, use 'Double.nan.isNaN' to check if 'Double.nan' is not a number\n\
    \    if Double.nan == xMean {\n                  ^\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.map{abs($0 - mean($0))}.sum / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpawwbtld5.swift:10:40: error: cannot find 'mean' in scope\n    return\
    \ Double(numbers.map{abs($0 - mean($0))}.sum / Double(numbers.count))\n      \
    \                                 ^~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let count = numbers.count\n    let sum: Double = numbers.reduce(0,\
    \ combine: +);\n    return Double(sum / count);\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0i6vg60t.swift:11:37: error: extraneous argument label 'combine:'\
    \ in call\n    let sum: Double = numbers.reduce(0, combine: +);\n            \
    \                        ^   ~~~~~~~~~\n                                     \
    \   \n/tmp/tmp0i6vg60t.swift:12:23: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    return Double(sum / count);\n  \
    \                ~~~ ^ ~~~~~\n/tmp/tmp0i6vg60t.swift:12:23: note: overloads for\
    \ '/' exist with these partially matching parameter lists: (Double, Double), (Int,\
    \ Int)\n    return Double(sum / count);\n                      ^\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  return statistics(numbers) { Double($0.distance(from: $0.mean))\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprwp30041.swift:10:10: error: cannot find 'statistics' in scope\n\
    \  return statistics(numbers) { Double($0.distance(from: $0.mean)) }\n       \
    \  ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let mean = mean(numbers)\n  let deviations = numbers.map { abs($0\
    \ - mean) }\n  return mean(deviations)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpgzvum36h.swift:10:14: error: use of local variable 'mean' before\
    \ its declaration\n  let mean = mean(numbers)\n             ^\n/tmp/tmpgzvum36h.swift:10:7:\
    \ note: 'mean' declared here\n  let mean = mean(numbers)\n      ^\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let n = (numbers as NSArray).count\n    var sum = 0.0\n   \
    \ for i in 0..<n {\n        sum += (numbers[i] as Double) - (numbers[i] as Double).squareRoot()\n\
    \    }\n    return sqrt(Double(sum) / Double(n))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpa4b8dcd8.swift:10:25: error: cannot find type 'NSArray' in scope\n\
    \    let n = (numbers as NSArray).count\n                        ^~~~~~~\n/tmp/tmpa4b8dcd8.swift:15:12:\
    \ error: cannot find 'sqrt' in scope\n    return sqrt(Double(sum) / Double(n))\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var mean: Double = 0\n    var sum: Double = 0\n    for number\
    \ in numbers {\n        sum += number\n        mean += number\n    }\n    return\
    \ mean / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpgxfe6f_d/tmpgxfe6f_d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addcb768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addcb45fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addcb45f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addcb45e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxfe6f_d                        0x0000562a1c946513 <unavailable> + 5395

    5    libc.so.6                          0x00002addcb954460 __libc_start_main +
    245

    6    tmpgxfe6f_d                        0x0000562a1c946169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009170
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return numbers.reduce(0, { $0 + Double($1) * Double($1) })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp0urzriyt/tmp0urzriyt.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b956e292c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b956df89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b956df89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b956df887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0urzriyt                        0x000055d2193ae413 <unavailable> + 5139

    5    libc.so.6                          0x00002b956e47e460 __libc_start_main +
    245

    6    tmp0urzriyt                        0x000055d2193ae069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660009170
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let sum = numbers.reduce(0, { $0 + $1 })\n    let n = numbers.count\n\
    \n    return Double(sum / Double(n))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpag63ngwz/tmpag63ngwz.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac670ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac66de3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac66de3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac66de27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpag63ngwz                        0x0000561d89b62473 <unavailable> + 5235

    5    libc.so.6                          0x00002aac672d8460 __libc_start_main +
    245

    6    tmpag63ngwz                        0x0000561d89b620c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let sum = numbers.reduce(0.0, +)\n    var sum2 = 0.0\n    for\
    \ n in numbers {\n        sum2 += pow((n - sum), 2.0)\n    }\n    return sqrt(sum2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpmvwt7_iu.swift:13:17: error: cannot find 'pow' in scope\n     \
    \   sum2 += pow((n - sum), 2.0)\n                ^~~\n/tmp/tmpmvwt7_iu.swift:15:12:\
    \ error: cannot find 'sqrt' in scope\n    return sqrt(sum2)\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    let squaredDiffs = numbers.map\
    \ { abs($0 - mean) }\n    return mean(squaredDiffs)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpkrn1qpuw.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpkrn1qpuw.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return average(zip(numbers, numbers.dropFirst()))\n       \
    \ .map { abs($0.1 - $0.2) }\n        .fold(0) { $0 + $1 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmplaylwxjd.swift:10:12: error: cannot find 'average' in scope\n \
    \   return average(zip(numbers, numbers.dropFirst()))\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009181
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.isEmpty { return Double(0.0) }\n    var m = 0\n\
    \    var sum = 0\n    var n = numbers.count\n    for i in 0..<n {\n        sum\
    \ += (numbers[i] - Double(m))\n        m += numbers[i]\n    }\n    return Double(sum\
    \ / Double(n))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcdbad3ky.swift:15:28: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += (numbers[i] - Double(m))\n \
    \                          ^\n               Int(                    )\n/tmp/tmpcdbad3ky.swift:16:21:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        m += numbers[i]\n                    ^\n             Int(      )\n/tmp/tmpcdbad3ky.swift:18:23:\
    \ error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n\
    \    return Double(sum / Double(n))\n                  ~~~ ^ ~~~~~~~~~\n/tmp/tmpcdbad3ky.swift:18:23:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    return Double(sum / Double(n))\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.reduce(0.0, combine: {$0 + $1})\n    let\
    \ mad_sum = numbers.map { (value: Double) -> Double in\n        value - (mean\
    \ * Double(value))\n    }\n    let mad_sum_squared = mad_sum.map { (value: Double)\
    \ -> Double in\n        value * value\n    }\n    let mad = mad_sum_squared.reduce(0.0,\
    \ combine: {$0 + $1})\n    return mad\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0s37_6m5.swift:10:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0.0, combine: {$0 + $1})\n          \
    \                   ^     ~~~~~~~~~\n                                   \n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let count = numbers.count\n    if count == 0 { return 0.0 }\n\
    \    let mean: Double = Double(numbers.reduce(0, +))/Double(count)\n    return\
    \ Double(numbers.map { abs(($0 - mean)/mean) }.filter { $0 > 2.0 }).reduce(0,\
    \ +)/Double(count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpqn40x_wq.swift:13:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return Double(numbers.map { abs(($0 - mean)/mean) }.filter\
    \ { $0 > 2.0 }).reduce(0, +)/Double(count)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009192
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  if numbers.isEmpty { return 0.0 }\n  let mean = average(numbers)\n\
    \  let sumOfSquares = 0.0\n  let n = numbers.count\n  for number in numbers {\n\
    \    sumOfSquares += (number - mean)*(number - mean)\n  }\n  return sqrt(Double(sumOfSquares)\
    \ / Double(n))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6xln_dex.swift:11:14: error: cannot find 'average' in scope\n \
    \ let mean = average(numbers)\n             ^~~~~~~\n/tmp/tmp6xln_dex.swift:17:10:\
    \ error: cannot find 'sqrt' in scope\n  return sqrt(Double(sumOfSquares) / Double(n))\n\
    \         ^~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.reduce(0, +) / numbers.count\n    return\
    \ (numbers.map{ $0 - mean }).reduce(0.0, +) / numbers.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3wsy1771.swift:10:34: error: cannot convert value of type '(Int)\
    \ -> Int' to expected argument type '(Int, Double) throws -> Int'\n    let mean\
    \ = numbers.reduce(0, +) / numbers.count\n                                 ^\n\
    /tmp/tmp3wsy1771.swift:11:64: error: cannot convert value of type 'Int' to expected\
    \ argument type 'Double'\n    return (numbers.map{ $0 - mean }).reduce(0.0, +)\
    \ / numbers.count\n                                                          \
    \     ^\n                                                       Double(      )\n"
  stdout: ''
  timestamp: 1660009174
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum = 0\n    var total = 0\n    for number in numbers {\n\
    \        sum += number\n        total += 1\n    }\n\n    if total == 0 {\n   \
    \     return 0\n    }\n    return abs(sum / total)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpxeywisfg.swift:13:16: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += number\n               ^\n \
    \              Int(  )\n/tmp/tmpxeywisfg.swift:20:12: error: cannot convert return\
    \ expression of type 'Int' to return type 'Double'\n    return abs(sum / total)\n\
    \           ^~~~~~~~~~~~~~~~\n           Double(         )\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers)\n    return average((numbers.map\
    \ { abs($0 - mean) }))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpmio7abju.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmpmio7abju.swift:11:12:\
    \ error: cannot find 'average' in scope\n    return average((numbers.map { abs($0\
    \ - mean) }))\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum = 0\n    for x in numbers {\n        sum += pow(x-mean_(),\
    \ 2)\n    }\n    return sqrt(sum / Double(numbers.count))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5lj8evxc.swift:12:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow(x-mean_(), 2)\n               ^~~\n/tmp/tmp5lj8evxc.swift:12:22:\
    \ error: cannot find 'mean_' in scope\n        sum += pow(x-mean_(), 2)\n    \
    \                 ^~~~~\n/tmp/tmp5lj8evxc.swift:14:12: error: cannot find 'sqrt'\
    \ in scope\n    return sqrt(sum / Double(numbers.count))\n           ^~~~\n/tmp/tmp5lj8evxc.swift:14:21:\
    \ error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n\
    \    return sqrt(sum / Double(numbers.count))\n                ~~~ ^ ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp5lj8evxc.swift:14:21: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n\
    \    return sqrt(sum / Double(numbers.count))\n                    ^\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.mean_absolute_deviation(numbers)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpfa8j7e8m.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.mean_absolute_deviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  var sum = Double(0)\n  for number in numbers {\n    sum += math.pow(number\
    \ - mean(), 2)\n  }\n  return math.pow(sum / Double(numbers.count), 0.5)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmporhgt3ln.swift:12:12: error: cannot find 'math' in scope\n    sum\
    \ += math.pow(number - mean(), 2)\n           ^~~~\n/tmp/tmporhgt3ln.swift:12:30:\
    \ error: cannot find 'mean' in scope\n    sum += math.pow(number - mean(), 2)\n\
    \                             ^~~~\n/tmp/tmporhgt3ln.swift:14:10: error: cannot\
    \ find 'math' in scope\n  return math.pow(sum / Double(numbers.count), 0.5)\n\
    \         ^~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = statistics(numbers).mean\n    let deviation = numbers.map\
    \ { $0 - mean }\n    return deviation.mean\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcfjw_vsv.swift:10:16: error: cannot find 'statistics' in scope\n\
    \    let mean = statistics(numbers).mean\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = meanOfArray(numbers)\n    return numbers.map({ abs($0\
    \ - mean) }).reduce(0, +) / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8ngs2t7g.swift:10:16: error: cannot find 'meanOfArray' in scope\n\
    \    let mean = meanOfArray(numbers)\n               ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    guard numbers.count > 0 else { return Double.infinity }\n \
    \   let mean = average(numbers)\n    return ma(numbers, mean)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0xwr0rel.swift:11:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp0xwr0rel.swift:12:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean - mean(numbers)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk84zr7lq.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpk84zr7lq.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    guard numbers.count > 0 else {\n        return 0.0\n    }\n\
    \    let n = numbers.count\n    let sumOfSquares = numbers.reduce(0.0, { (sum,\
    \ cur) -> Double in\n        let diff = cur - sum\n        return diff * diff\n\
    \    })\n    return (sumOfSquares / (Double(n * (n - 1)) / Double(n)))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpbeqsl60m/tmpbeqsl60m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf279dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf276d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf276d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf276d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbeqsl60m                        0x000055e24f837423 <unavailable> + 5155

    5    libc.so.6                          0x00002adf27bc6460 __libc_start_main +
    245

    6    tmpbeqsl60m                        0x000055e24f837079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var mean = average(numbers)\n    var sum: Double = 0\n    for\
    \ n in numbers {\n        sum += abs(n - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmppvyd3a02.swift:10:16: error: cannot find 'average' in scope\n \
    \   var mean = average(numbers)\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let sum = numbers.reduce(0, +);\n  return sum / Double(numbers.count);\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp49e7h0dv/tmp49e7h0dv.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5f0798c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5f048fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5f048f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5f048e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49e7h0dv                        0x00005568afb5a423 <unavailable> + 5155

    5    libc.so.6                          0x00002af5f0984460 __libc_start_main +
    245

    6    tmp49e7h0dv                        0x00005568afb5a079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  return Double(numbers.reduce(0.0, { $0 + $1.abs() }) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2n1y136c.swift:10:47: error: value of type 'Double' has no member\
    \ 'abs'\n  return Double(numbers.reduce(0.0, { $0 + $1.abs() }) / Double(numbers.count))\n\
    \                                           ~~ ^~~\n"
  stdout: ''
  timestamp: 1660009173
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return _median(numbers, false, true) / _mean(numbers)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpbqt3aya5.swift:10:12: error: cannot find '_median' in scope\n \
    \   return _median(numbers, false, true) / _mean(numbers)\n           ^~~~~~~\n\
    /tmp/tmpbqt3aya5.swift:10:44: error: cannot find '_mean' in scope\n    return\
    \ _median(numbers, false, true) / _mean(numbers)\n                           \
    \                ^~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.MeanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcsmadhy3.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.MeanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    guard !numbers.isEmpty else { return 0 }\n    var sum: Double\
    \ = numbers.reduce(0.0, {$0 + $1})\n    let n = numbers.count\n    var deviations\
    \ = numbers.map { $0 - sum / n }\n    return Double(deviations.reduce(0, {$0 +\
    \ $1})) / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpzi04bdp6.swift:13:47: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    var deviations = numbers.map { $0 -\
    \ sum / n }\n                                              ^\n               \
    \                               Double( )\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, { $0 + Double($1) }) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp9b3jo1qb/tmp9b3jo1qb.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7471bdec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74718d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74718d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74718d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9b3jo1qb                        0x00005581168a0473 <unavailable> + 5235

    5    libc.so.6                          0x00002b7471dca460 __libc_start_main +
    245

    6    tmp9b3jo1qb                        0x00005581168a00c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum = 0.0;\n    var n = 0.0;\n    for value in numbers\
    \ {\n        sum += abs(value - numbers[n])\n        n += 1.0\n    }\n    return\
    \ sum / (n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_gbcm0eu.swift:13:36: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += abs(value - numbers[n])\n  \
    \                                 ^\n                                   Int( )\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return _mad(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp7cpp3zep.swift:10:12: error: cannot find '_mad' in scope\n    return\
    \ _mad(numbers)\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(n: numbers)\n    return average(numbers: numbers,\
    \ mean: mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphru9jzl3.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(n: numbers)\n               ^\n/tmp/tmphru9jzl3.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(n: numbers)\n        ^\n/tmp/tmphru9jzl3.swift:11:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: numbers,\
    \ mean: mean)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return numbers.reduce(0.0, combine: { (res, val) -> Double\
    \ in\n        return res + abs(val - res)\n    }) / Double(numbers.count)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9q_4m4ae.swift:10:26: error: extraneous argument label 'combine:'\
    \ in call\n    return numbers.reduce(0.0, combine: { (res, val) -> Double in\n\
    \                         ^     ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp39pciowo.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    // TODO: implement mean_absolute_deviation\n    return 0.0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpmro7wmd0/tmpmro7wmd0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8079e45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8079b3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8079b3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8079b3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmro7wmd0                        0x00005576d1518353 <unavailable> + 4947

    5    libc.so.6                          0x00002b807a031460 __libc_start_main +
    245

    6    tmpmro7wmd0                        0x00005576d1517fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let sum = numbers.reduce(0, combine: +)\n    let average =\
    \ sum / Double(numbers.count)\n    let deviations = numbers.map{ $0 - average\
    \ }\n    return mean(deviations)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcj1xha40.swift:10:29: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = numbers.reduce(0, combine: +)\n                     \
    \       ^   ~~~~~~~~~\n                                \n/tmp/tmpcj1xha40.swift:13:12:\
    \ error: cannot find 'mean' in scope\n    return mean(deviations)\n          \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.isEmpty {\n        return 0.0\n    }\n\n    var\
    \ mean = 0.0\n\n    for n in numbers {\n        mean += n\n    }\n\n    return\
    \ mean / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpnhhed2rh/tmpnhhed2rh.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9551272c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9550f69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9550f69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9550f687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhhed2rh                        0x00005646228f6563 <unavailable> + 5475

    5    libc.so.6                          0x00002b955145e460 __libc_start_main +
    245

    6    tmpnhhed2rh                        0x00005646228f61b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  return ma(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpkb5fs_pi.swift:10:10: error: cannot find 'ma' in scope\n  return\
    \ ma(numbers)\n         ^~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.isEmpty, numbers.count == 0 {\n        return 0.0\n\
    \    }\n    var sum = 0.0\n    for number in numbers {\n        sum += math.pow(number\
    \ - mean(numbers), 2.0)\n    }\n    return math.pow(sum / numbers.count, 0.5)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpuhiqm526.swift:15:16: error: cannot find 'math' in scope\n    \
    \    sum += math.pow(number - mean(numbers), 2.0)\n               ^~~~\n/tmp/tmpuhiqm526.swift:15:34:\
    \ error: cannot find 'mean' in scope\n        sum += math.pow(number - mean(numbers),\
    \ 2.0)\n                                 ^~~~\n/tmp/tmpuhiqm526.swift:17:12: error:\
    \ cannot find 'math' in scope\n    return math.pow(sum / numbers.count, 0.5)\n\
    \           ^~~~\n/tmp/tmpuhiqm526.swift:17:25: error: binary operator '/' cannot\
    \ be applied to operands of type 'Double' and 'Int'\n    return math.pow(sum /\
    \ numbers.count, 0.5)\n                    ~~~ ^ ~~~~~~~~~~~~~\n/tmp/tmpuhiqm526.swift:17:25:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    return math.pow(sum / numbers.count, 0.5)\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    func mean(_ numbers: [Double]) -> Double { return numbers.reduce(0,\
    \ +) / Double(numbers.count) }\n    func distance(_ x1: Double, _ x2: Double)\
    \ -> Double { return abs(x1 - x2) }\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { distance($0.0, $0.1) }.reduce(0, +) / Double(numbers.count))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmps0mu4yk6.swift:12:93: error: cannot convert value of type 'Double'\
    \ to expected argument type '[Double]'\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { distance($0.0, $0.1) }.reduce(0, +) / Double(numbers.count))\n           \
    \                                                                            \
    \     ^\n"
  stdout: ''
  timestamp: 1660009181
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var mean = numbers.reduce(0, {$0 + $1})/Double(numbers.count)\n\
    \    var delta = numbers.reduce(0, {$0 + $1} - Double(mean))\n    return delta/(Double(numbers.count)\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpphufwno4.swift:11:47: error: cannot convert value of type 'Double'\
    \ to expected argument type '(String, String) -> String'\n    var delta = numbers.reduce(0,\
    \ {$0 + $1} - Double(mean))\n                                              ^\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mean(numbers).map { abs($0 - $1) }.reduce(0.0, +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpsuk5_ov4.swift:10:12: error: cannot find 'mean' in scope\n    return\
    \ mean(numbers).map { abs($0 - $1) }.reduce(0.0, +)\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let average = sum(numbers) / Double(numbers.count)\n    return\
    \ sum(abs(numbers - average))\n        / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpoi1t9mys.swift:10:19: error: cannot find 'sum' in scope\n    let\
    \ average = sum(numbers) / Double(numbers.count)\n                  ^~~\n/tmp/tmpoi1t9mys.swift:11:12:\
    \ error: cannot find 'sum' in scope\n    return sum(abs(numbers - average))\n\
    \           ^~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return sum(abs(numbers - mean))\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpb750popl.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpb750popl.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpb750popl.swift:11:12:\
    \ error: cannot find 'sum' in scope\n    return sum(abs(numbers - mean)) / Double(numbers.count)\n\
    \           ^~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let sum = numbers.reduce(0, combine: +)\n    let mean = Double(sum)\
    \ / Double(numbers.count)\n    return numbers.map{ abs($0 - mean) }.mean()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpe6_iot4q.swift:10:29: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = numbers.reduce(0, combine: +)\n                     \
    \       ^   ~~~~~~~~~\n                                \n/tmp/tmpe6_iot4q.swift:12:42:\
    \ error: value of type '[Double]' has no member 'mean'\n    return numbers.map{\
    \ abs($0 - mean) }.mean()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let total = numbers.reduce(0.0, { $0 + $1})\n    var sum =\
    \ 0.0\n    for n in numbers {\n        sum += n * n\n    }\n    return Double(sqrt(Double(sum)\
    \ / Double(numbers.count)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpjd0m7doi.swift:15:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(Double(sum) / Double(numbers.count)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    numbers.reduce(0.0, combine: +)\n        / (Double(numbers.count)\
    \ - 1.0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpooev7p9k.swift:10:19: error: extraneous argument label 'combine:'\
    \ in call\n    numbers.reduce(0.0, combine: +)\n                  ^     ~~~~~~~~~\n\
    \                        \n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum = 0.0\n    for number in numbers {\n        sum +=\
    \ math.pow(number - mean(), 2)\n    }\n    return math.sqrt(sum / numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_e8wk8hn.swift:12:16: error: cannot find 'math' in scope\n    \
    \    sum += math.pow(number - mean(), 2)\n               ^~~~\n/tmp/tmp_e8wk8hn.swift:12:34:\
    \ error: cannot find 'mean' in scope\n        sum += math.pow(number - mean(),\
    \ 2)\n                                 ^~~~\n/tmp/tmp_e8wk8hn.swift:14:12: error:\
    \ cannot find 'math' in scope\n    return math.sqrt(sum / numbers.count)\n   \
    \        ^~~~\n/tmp/tmp_e8wk8hn.swift:14:26: error: binary operator '/' cannot\
    \ be applied to operands of type 'Double' and 'Int'\n    return math.sqrt(sum\
    \ / numbers.count)\n                     ~~~ ^ ~~~~~~~~~~~~~\n/tmp/tmp_e8wk8hn.swift:14:26:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    return math.sqrt(sum / numbers.count)\n  \
    \                       ^\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum = 0.0\n    for x in numbers {\n        sum += (x -\
    \ mean(x))\n    }\n    return sqrt(sum / Double(numbers.count))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpfs5gnnxi.swift:12:21: error: cannot find 'mean' in scope\n    \
    \    sum += (x - mean(x))\n                    ^~~~\n/tmp/tmpfs5gnnxi.swift:14:12:\
    \ error: cannot find 'sqrt' in scope\n    return sqrt(sum / Double(numbers.count))\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    for x in numbers {\n        sum +=\
    \ math.pow((x - mean), 2)\n    }\n    return math.sqrt(sum / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptws4zogg.swift:12:16: error: cannot find 'math' in scope\n    \
    \    sum += math.pow((x - mean), 2)\n               ^~~~\n/tmp/tmptws4zogg.swift:12:30:\
    \ error: cannot find 'mean' in scope\n        sum += math.pow((x - mean), 2)\n\
    \                             ^~~~\n/tmp/tmptws4zogg.swift:14:12: error: cannot\
    \ find 'math' in scope\n    return math.sqrt(sum / Double(numbers.count))\n  \
    \         ^~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.isEmpty{ return 0.}\n    var sum = 0\n    for i\
    \ in 0..<numbers.count {\n        sum += abs(numbers[i] - numbers.reduce(0, +))\n\
    \    }\n    return Double(sum) / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpm67tw0j0.swift:10:33: error: expected member name following '.'\n\
    \    if numbers.isEmpty{ return 0.}\n                                ^\n/tmp/tmpm67tw0j0.swift:13:16:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        sum += abs(numbers[i] - numbers.reduce(0, +))\n               ^\n   \
    \            Int(                                  )\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mabs(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpaamm12s7.swift:10:12: error: cannot find 'mabs' in scope\n    return\
    \ mabs(numbers)\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let numbers = Array(numbers)\n    let mean = average(numbers)\n\
    \    return sum(numbers ~= mean) / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphsv5ej_g.swift:11:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmphsv5ej_g.swift:12:12:\
    \ error: cannot find 'sum' in scope\n    return sum(numbers ~= mean) / Double(numbers.count)\n\
    \           ^~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    guard numbers.count > 0 else {\n        return 0.0\n    }\n\
    \    var mean: Double = numbers.reduce(0, combine: {\n        return $0 + $1\n\
    \    })\n    return numbers.reduce(0, combine: {\n        return $1.absSquare\
    \ + $0 * $1 - mean * mean\n    }) / (numbers.count - 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpw3dro2s0.swift:13:38: error: extraneous argument label 'combine:'\
    \ in call\n    var mean: Double = numbers.reduce(0, combine: {\n             \
    \                        ^   ~~~~~~~~~\n                                     \
    \    \n/tmp/tmpw3dro2s0.swift:16:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return numbers.reduce(0, combine: {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009197
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let sum = numbers.reduce(0, combine: +)\n    let mean = sum\
    \ / Double(numbers.count)\n    let deltas = numbers.enumerated().map{ index, value\
    \ in\n        abs(value - mean)\n    }\n    return (deltas.reduce(0, combine:\
    \ +) / Double(deltas.count))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_lo47tjo.swift:10:29: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = numbers.reduce(0, combine: +)\n                     \
    \       ^   ~~~~~~~~~\n                                \n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let average: Double = numbers.reduce(0, combine: +)\n  let averageDifference\
    \ = numbers.map { $0 - average }.reduce(0, combine: +)\n  return average / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_r7s3sg5.swift:10:39: error: extraneous argument label 'combine:'\
    \ in call\n  let average: Double = numbers.reduce(0, combine: +)\n           \
    \                           ^   ~~~~~~~~~\n                                  \
    \        \n/tmp/tmp_r7s3sg5.swift:11:62: error: extraneous argument label 'combine:'\
    \ in call\n  let averageDifference = numbers.map { $0 - average }.reduce(0, combine:\
    \ +)\n                                                             ^   ~~~~~~~~~\n\
    \                                                                 \n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var mean = mean(numbers)\n    return sqrt(meanAbsoluteDeviation(numbers,\
    \ mean))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpmwpm1uq6.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpmwpm1uq6.swift:10:9:\
    \ note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpmwpm1uq6.swift:11:12:\
    \ error: cannot find 'sqrt' in scope\n    return sqrt(meanAbsoluteDeviation(numbers,\
    \ mean))\n           ^~~~\n/tmp/tmpmwpm1uq6.swift:11:17: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return sqrt(meanAbsoluteDeviation(numbers, mean))\n          \
    \      ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    guard numbers.count > 0 else { return 0.0 }\n    let mean =\
    \ (numbers[0] + numbers[1]) / 2.0\n    return Double(numbers.map{ $0 - mean }.reduce(0.0,\
    \ +))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpslcrk9dz/tmpslcrk9dz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5c1b21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5c1818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5c1818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5c18177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpslcrk9dz                        0x0000563131bc2573 <unavailable> + 5491

    5    libc.so.6                          0x00002ba5c1d0d460 __libc_start_main +
    245

    6    tmpslcrk9dz                        0x0000563131bc21c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660009171
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let totalSum = numbers.reduce(0.0, {$0 + $1})\n    return Double(numbers.reduce((Double(numbers.count)\
    \ / Double(numbers.count)), {$0 - $1 / (Double(totalSum) / Double($0 + 1))}))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpvn6vxldx/tmpvn6vxldx.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7d574fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7d5446b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7d5446988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7d54457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvn6vxldx                        0x000055e8fa782473 <unavailable> + 5235

    5    libc.so.6                          0x00002ad7d593b460 __libc_start_main +
    245

    6    tmpvn6vxldx                        0x000055e8fa7820c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009215
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum = 0.0;\n\n    for element in numbers {\n        sum\
    \ += Abs(element - mean);\n    }\n\n    return sum / Double(numbers.count);\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpgjht_wg_.swift:13:16: error: cannot find 'Abs' in scope\n     \
    \   sum += Abs(element - mean);\n               ^~~\n/tmp/tmpgjht_wg_.swift:13:30:\
    \ error: cannot find 'mean' in scope\n        sum += Abs(element - mean);\n  \
    \                           ^~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mad(numbers, mean)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5sc_hh8q.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp5sc_hh8q.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmp5sc_hh8q.swift:11:12:\
    \ error: cannot find 'mad' in scope\n    return mad(numbers, mean)\n         \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean: Double = numbers.reduce(0, combine: {$0 + $1}) /\
    \ Double(numbers.count)\n    return Double(numbers.map { pow($0 - mean, 2) }).reduce(0,\
    \ combine: {$0 + $1}) / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp07bt9dqx.swift:10:38: error: extraneous argument label 'combine:'\
    \ in call\n    let mean: Double = numbers.reduce(0, combine: {$0 + $1}) / Double(numbers.count)\n\
    \                                     ^   ~~~~~~~~~\n                        \
    \                 \n/tmp/tmp07bt9dqx.swift:11:33: error: cannot find 'pow' in\
    \ scope\n    return Double(numbers.map { pow($0 - mean, 2) }).reduce(0, combine:\
    \ {$0 + $1}) / Double(numbers.count)\n                                ^~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var deviationSum = 0.0\n    var average = 0.0\n    for x in\
    \ numbers {\n        deviationSum = deviationSum + abs(x - average)\n        average\
    \ = average + x\n    }\n    return deviationSum / Double(numbers.count)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpzhjqegt6/tmpzhjqegt6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5eb3badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5eb38a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5eb38a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5eb38a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjqegt6                        0x000056433f5d6603 <unavailable> + 5635

    5    libc.so.6                          0x00002b5eb3d99460 __libc_start_main +
    245

    6    tmpzhjqegt6                        0x000056433f5d6259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp16ycm0ii.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum = 0\n    var sumOfSquares = 0\n    numbers.forEach\
    \ {\n        sum += $0\n        sumOfSquares += $0 * $0\n    }\n    return abs(sum\
    \ / Double(numbers.count)) /\n        sqrt(Double(numbers.count) * sumOfSquares\
    \ /\n            (Double(numbers.count) - 1))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp90na8fwe.swift:13:16: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += $0\n               ^\n     \
    \          Int( )\n/tmp/tmp90na8fwe.swift:17:9: error: cannot find 'sqrt' in scope\n\
    \        sqrt(Double(numbers.count) * sumOfSquares /\n        ^~~~\n/tmp/tmp90na8fwe.swift:16:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return abs(sum\
    \ / Double(numbers.count)) /\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009256
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var mean = 0.0\n    for x in numbers {\n        mean += x /\
    \ Double(numbers.count)\n    }\n    return abs(mean - mean(numbers))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptehfgqnw.swift:14:23: error: cannot call value of non-function\
    \ type 'Double'\n    return abs(mean - mean(numbers))\n                      ^\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = statistics.mean(numbers)\n    let diff = numbers.map\
    \ { $0 - mean }\n    return statistics.mean(diff)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8fraj2kg.swift:10:16: error: cannot find 'statistics' in scope\n\
    \    let mean = statistics.mean(numbers)\n               ^~~~~~~~~~\n/tmp/tmp8fraj2kg.swift:12:12:\
    \ error: cannot find 'statistics' in scope\n    return statistics.mean(diff)\n\
    \           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean: Double = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    var result: Double = 0.0\n    for x in numbers {\n        result += pow(x\
    \ - mean, 2)\n    }\n    return result / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpfa_uqbg9.swift:13:19: error: cannot find 'pow' in scope\n     \
    \   result += pow(x - mean, 2)\n                  ^~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let mean = average(numbers)\n  var deviations = numbers.map{\
    \ (number) -> Double in\n    return abs(number - mean)\n  }\n  deviations = Array(deviations.map{\n\
    \    return $0\n  })\n  return average(deviations)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6v8tkps0.swift:10:14: error: cannot find 'average' in scope\n \
    \ let mean = average(numbers)\n             ^~~~~~~\n/tmp/tmp6v8tkps0.swift:17:10:\
    \ error: cannot find 'average' in scope\n  return average(deviations)\n      \
    \   ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  return _MeanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphm_f0j04.swift:10:10: error: cannot find '_MeanAbsoluteDeviation'\
    \ in scope\n  return _MeanAbsoluteDeviation(numbers)\n         ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return average(abs(numbers).subtracting(mean(numbers)))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp55c71a_b.swift:10:12: error: cannot find 'average' in scope\n \
    \   return average(abs(numbers).subtracting(mean(numbers)))\n           ^~~~~~~\n\
    /tmp/tmp55c71a_b.swift:10:45: error: cannot find 'mean' in scope\n    return average(abs(numbers).subtracting(mean(numbers)))\n\
    \                                            ^~~~\n/tmp/tmp55c71a_b.swift:10:33:\
    \ error: value of type '[Double]' has no member 'subtracting'\n    return average(abs(numbers).subtracting(mean(numbers)))\n\
    \                   ~~~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  if numbers.isEmpty{\n    return Double(0)\n  }\n  let mean:Double\
    \ = numbers.reduce(0, combine: {$0 + $1})\n  let deviation = numbers.map { $0\
    \ - mean }.reduce(0, combine: {$0 + $1})\n  return Double(deviation / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpkel4n5_5.swift:13:35: error: extraneous argument label 'combine:'\
    \ in call\n  let mean:Double = numbers.reduce(0, combine: {$0 + $1})\n       \
    \                           ^   ~~~~~~~~~\n                                  \
    \    \n/tmp/tmpkel4n5_5.swift:14:51: error: extraneous argument label 'combine:'\
    \ in call\n  let deviation = numbers.map { $0 - mean }.reduce(0, combine: {$0\
    \ + $1})\n                                                  ^   ~~~~~~~~~\n  \
    \                                                    \n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return Double(zip(numbers, numbers.dropFirst()).map{\n\
    \        $0 - mean\n    }.sum / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpv6rytvgr.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpv6rytvgr.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpv6rytvgr.swift:13:7:\
    \ error: value of type '[T]' has no member 'sum'\n    }.sum / Double(numbers.count))\n\
    ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmptcdh51kk/tmptcdh51kk.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080eefac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080ebf1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080ebf1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080ebf07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptcdh51kk                        0x0000564044531473 <unavailable> + 5235

    5    libc.so.6                          0x00002b080f0e6460 __libc_start_main +
    245

    6    tmptcdh51kk                        0x00005640445310c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.isEmpty {\n        return 0.0\n    }\n    var sum\
    \ = 0.0;\n    for value in numbers {\n        sum += abs(value - mean)\n    }\n\
    \    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpwfv3vqd6.swift:15:28: error: cannot find 'mean' in scope\n    \
    \    sum += abs(value - mean)\n                           ^~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return _mad(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp7cpp3zep.swift:10:12: error: cannot find '_mad' in scope\n    return\
    \ _mad(numbers)\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(ArrayUtils.meanAbsoluteDeviation(numbers))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpje9h23qd.swift:10:19: error: cannot find 'ArrayUtils' in scope\n\
    \    return Double(ArrayUtils.meanAbsoluteDeviation(numbers))\n              \
    \    ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return average(numbers)\n        .flatMap({ abs($0 - mean)\
    \ })\n        .sum() / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpnaqy099z.swift:10:12: error: cannot find 'average' in scope\n \
    \   return average(numbers)\n           ^~~~~~~\n/tmp/tmpnaqy099z.swift:11:29:\
    \ error: cannot find 'mean' in scope\n        .flatMap({ abs($0 - mean) })\n \
    \                           ^~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return sqrt(reduce(zip(numbers,\
    \ numbers, |x, y: Double| {\n        x + y - mean\n    })))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2gctc7e9.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp2gctc7e9.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmp2gctc7e9.swift:11:12:\
    \ error: cannot find 'sqrt' in scope\n    return sqrt(reduce(zip(numbers, numbers,\
    \ |x, y: Double| {\n           ^~~~\n/tmp/tmp2gctc7e9.swift:11:17: error: cannot\
    \ find 'reduce' in scope\n    return sqrt(reduce(zip(numbers, numbers, |x, y:\
    \ Double| {\n                ^~~~~~\n/tmp/tmp2gctc7e9.swift:11:46: error: '|'\
    \ is not a prefix unary operator\n    return sqrt(reduce(zip(numbers, numbers,\
    \ |x, y: Double| {\n                                             ^\n/tmp/tmp2gctc7e9.swift:11:47:\
    \ error: cannot find 'x' in scope\n    return sqrt(reduce(zip(numbers, numbers,\
    \ |x, y: Double| {\n                                              ^\n/tmp/tmp2gctc7e9.swift:11:59:\
    \ error: '|' is not a postfix unary operator\n    return sqrt(reduce(zip(numbers,\
    \ numbers, |x, y: Double| {\n                                                \
    \          ^\n/tmp/tmp2gctc7e9.swift:12:9: error: cannot find 'x' in scope\n \
    \       x + y - mean\n        ^\n/tmp/tmp2gctc7e9.swift:12:13: error: cannot find\
    \ 'y' in scope\n        x + y - mean\n            ^\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0.0\n    for number in numbers {\n      \
    \  sum += abs(number) - number\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpky7ict12/tmpky7ict12.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2120a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac211d97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac211d97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac211d967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpky7ict12                        0x000055bd1c610603 <unavailable> + 5635

    5    libc.so.6                          0x00002ac21228c460 __libc_start_main +
    245

    6    tmpky7ict12                        0x000055bd1c610259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let sum = numbers.reduce(0.0, combine: +)\n    let mean = sum\
    \ / Double(numbers.count)\n    return ma(numbers, mean)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5emx_bx0.swift:10:29: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = numbers.reduce(0.0, combine: +)\n                   \
    \         ^     ~~~~~~~~~\n                                  \n/tmp/tmp5emx_bx0.swift:12:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = _mean(numbers)\n    return sqrt(Double(numbers.count\
    \ - 1) * math.pow(_distance(mean, numbers), 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5s4d7_1o.swift:10:16: error: cannot find '_mean' in scope\n   \
    \ let mean = _mean(numbers)\n               ^~~~~\n/tmp/tmp5s4d7_1o.swift:11:12:\
    \ error: cannot find 'sqrt' in scope\n    return sqrt(Double(numbers.count - 1)\
    \ * math.pow(_distance(mean, numbers), 2))\n           ^~~~\n/tmp/tmp5s4d7_1o.swift:11:45:\
    \ error: cannot find 'math' in scope\n    return sqrt(Double(numbers.count - 1)\
    \ * math.pow(_distance(mean, numbers), 2))\n                                 \
    \           ^~~~\n/tmp/tmp5s4d7_1o.swift:11:54: error: cannot find '_distance'\
    \ in scope\n    return sqrt(Double(numbers.count - 1) * math.pow(_distance(mean,\
    \ numbers), 2))\n                                                     ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.mean(zip(numbers, numbers.drop(1)))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0y7_qn3l.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.mean(zip(numbers, numbers.drop(1)))\n           ^~~~~~~~~~\n\
    /tmp/tmp0y7_qn3l.swift:10:54: error: missing argument label 'while:' in call\n\
    \    return statistics.mean(zip(numbers, numbers.drop(1)))\n                 \
    \                                    ^\n                                     \
    \                while: \n/tmp/tmp0y7_qn3l.swift:10:54: error: cannot convert\
    \ value of type 'Int' to expected argument type '(Double) throws -> Bool'\n  \
    \  return statistics.mean(zip(numbers, numbers.drop(1)))\n                   \
    \                                  ^\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return reduce(0) {\n        (sum, value) in\n        return\
    \ sum + abs(value - numbers[Double(Int($0)) & 3])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprl5xhgaf.swift:12:53: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments; did you mean 'sum'?\n\
    \        return sum + abs(value - numbers[Double(Int($0)) & 3])\n            \
    \                                        ^~\n                                \
    \                    sum\n/tmp/tmprl5xhgaf.swift:10:12: error: cannot find 'reduce'\
    \ in scope\n    return reduce(0) {\n           ^~~~~~\n/tmp/tmprl5xhgaf.swift:12:42:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        return sum + abs(value - numbers[Double(Int($0)) & 3])\n            \
    \                             ^\n                                         Int(\
    \           )\n"
  stdout: ''
  timestamp: 1660009176
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0.0\n    for x in numbers {\n        sum\
    \ += pow((x - average), 2)\n    }\n    return sqrt(sum / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpv77tty49.swift:12:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow((x - average), 2)\n               ^~~\n/tmp/tmpv77tty49.swift:12:25:\
    \ error: cannot find 'average' in scope\n        sum += pow((x - average), 2)\n\
    \                        ^~~~~~~\n/tmp/tmpv77tty49.swift:14:12: error: cannot\
    \ find 'sqrt' in scope\n    return sqrt(sum / Double(numbers.count))\n       \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum = 0\n    var count = 0\n    for n in numbers {\n  \
    \      sum += n * n\n        count += 1\n    }\n    if count == 0 {\n        return\
    \ Double(0)\n    }\n    return Double(sum / Double(count))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpvcgq__hy.swift:13:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpvcgq__hy.swift:19:23: error: binary operator '/'\
    \ cannot be applied to operands of type 'Int' and 'Double'\n    return Double(sum\
    \ / Double(count))\n                  ~~~ ^ ~~~~~~~~~~~~~\n/tmp/tmpvcgq__hy.swift:19:23:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    return Double(sum / Double(count))\n     \
    \                 ^\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mean(numbers.map { abs($0 - mean) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpy4f26zt_.swift:10:12: error: cannot find 'mean' in scope\n    return\
    \ mean(numbers.map { abs($0 - mean) })\n           ^~~~\n/tmp/tmpy4f26zt_.swift:10:40:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers.map { abs($0 - mean)\
    \ })\n                                       ^~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return _meanAbsoluteDeviation(numbers: numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpsfquf7iq.swift:10:12: error: cannot find '_meanAbsoluteDeviation'\
    \ in scope\n    return _meanAbsoluteDeviation(numbers: numbers)\n           ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.mean(absolute(numbers - mean(data(numbers))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpr3xuuwer.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.mean(absolute(numbers - mean(data(numbers))))\n       \
    \    ^~~~~~~~~~\n/tmp/tmpr3xuuwer.swift:10:28: error: cannot find 'absolute' in\
    \ scope\n    return statistics.mean(absolute(numbers - mean(data(numbers))))\n\
    \                           ^~~~~~~~\n/tmp/tmpr3xuuwer.swift:10:47: error: cannot\
    \ find 'mean' in scope\n    return statistics.mean(absolute(numbers - mean(data(numbers))))\n\
    \                                              ^~~~\n/tmp/tmpr3xuuwer.swift:10:52:\
    \ error: cannot find 'data' in scope\n    return statistics.mean(absolute(numbers\
    \ - mean(data(numbers))))\n                                                  \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers)\n    return average(numbers.map({abs($0\
    \ - mean)})) * 100\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5zpkbp48.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp5zpkbp48.swift:11:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers.map({abs($0\
    \ - mean)})) * 100\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.isEmpty { return 0 }\n    let mean = average(numbers)\n\
    \    return Double(numbers.map { abs($0 - mean) }.mean())\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpw3x7rijr.swift:11:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmpw3x7rijr.swift:12:50:\
    \ error: value of type '[Double]' has no member 'mean'\n    return Double(numbers.map\
    \ { abs($0 - mean) }.mean())\n                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mean(zip(numbers, numbers).map {\n        ($0 - $1).abs()\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpf9ps6_rr.swift:10:12: error: cannot find 'mean' in scope\n    return\
    \ mean(zip(numbers, numbers).map {\n           ^~~~\n/tmp/tmpf9ps6_rr.swift:11:19:\
    \ error: value of type 'Double' has no member 'abs'\n        ($0 - $1).abs()\n\
    \        ~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp16ycm0ii.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = meanOfArray(numbers)\n    let diffs = numbers.map\
    \ { $0 - mean }\n    return mean(diffs)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2tgdhlca.swift:10:16: error: cannot find 'meanOfArray' in scope\n\
    \    let mean = meanOfArray(numbers)\n               ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    func sum(_ x: Double) -> Double { return x + sumX }\n    func\
    \ sumX(_ x: Double) -> Double { return x * sumX }\n    func sumX(_ x: Double,\
    \ _ y: Double) -> Double { return x + y }\n    func sumX(_ x: Double, _ y: Double,\
    \ _ z: Double) -> Double { return x + y + z }\n\n    var sumX: Double = 0\n  \
    \  var sum: Double = 0\n    for i in 0..<numbers.count {\n        sum += numbers[i]\n\
    \        sumX += numbers[i] * numbers[i]\n    }\n    return abs(sum / sumX)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpdcn7fmw_.swift:10:48: error: binary operator '+' cannot be applied\
    \ to operands of type 'Double' and '(Double) -> Double'\n    func sum(_ x: Double)\
    \ -> Double { return x + sumX }\n                                            \
    \ ~ ^ ~~~~\n/tmp/tmpdcn7fmw_.swift:10:48: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Double, Double)\n    func sum(_ x: Double)\
    \ -> Double { return x + sumX }\n                                            \
    \   ^\n/tmp/tmpdcn7fmw_.swift:11:49: error: binary operator '*' cannot be applied\
    \ to operands of type 'Double' and '(Double) -> Double'\n    func sumX(_ x: Double)\
    \ -> Double { return x * sumX }\n                                            \
    \  ~ ^ ~~~~\n/tmp/tmpdcn7fmw_.swift:11:49: note: overloads for '*' exist with\
    \ these partially matching parameter lists: (Double, Double)\n    func sumX(_\
    \ x: Double) -> Double { return x * sumX }\n                                 \
    \               ^\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return stats.MeanAbsoluteDeviation(numbers).Value\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpjw8nt08t.swift:10:12: error: cannot find 'stats' in scope\n   \
    \ return stats.MeanAbsoluteDeviation(numbers).Value\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let center = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { x - center }\n    return deviations.reduce(0,\
    \ *)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpfsw7z5l2.swift:11:36: error: cannot find 'x' in scope\n    let\
    \ deviations = numbers.map { x - center }\n                                  \
    \ ^\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  var average = numbers.reduce(0, { $0 + $1.toDouble() })\n  return\
    \ Double(numbers.reduce(0, { $0 - $1.toDouble() }) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptdox8fdw.swift:10:45: error: value of type 'Double' has no member\
    \ 'toDouble'\n  var average = numbers.reduce(0, { $0 + $1.toDouble() })\n    \
    \                                     ~~ ^~~~~~~~\n/tmp/tmptdox8fdw.swift:11:45:\
    \ error: value of type 'Double' has no member 'toDouble'\n  return Double(numbers.reduce(0,\
    \ { $0 - $1.toDouble() }) / Double(numbers.count))\n                         \
    \                ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009174
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return ma(numbers, mean: Double(numbers.reduce(0, { $0 + Double($1)\
    \ }) / Double(numbers.count)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpo57ca_17.swift:10:12: error: cannot find 'ma' in scope\n    return\
    \ ma(numbers, mean: Double(numbers.reduce(0, { $0 + Double($1) }) / Double(numbers.count)))\n\
    \           ^~\n"
  stdout: ''
  timestamp: 1660009180
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return MAD(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptlusuem9.swift:10:12: error: cannot find 'MAD' in scope\n    return\
    \ MAD(numbers)\n           ^~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean: Double = numbers.reduce(0, combine: { (result: Double,\
    \ number: Double) -> Double in\n        return result + number\n    })\n\n   \
    \ let deviation: Double = numbers.reduce(0, combine: { (result: Double, number:\
    \ Double) -> Double in\n        return result + ((number - mean) * (number - mean))\n\
    \    })\n\n    return (deviation / (Double(numbers.count)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk2a14e65.swift:10:38: error: extraneous argument label 'combine:'\
    \ in call\n    let mean: Double = numbers.reduce(0, combine: { (result: Double,\
    \ number: Double) -> Double in\n                                     ^   ~~~~~~~~~\n\
    \                                         \n/tmp/tmpk2a14e65.swift:14:43: error:\
    \ extraneous argument label 'combine:' in call\n    let deviation: Double = numbers.reduce(0,\
    \ combine: { (result: Double, number: Double) -> Double in\n                 \
    \                         ^   ~~~~~~~~~\n                                    \
    \          \n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    guard numbers.count > 0 else { return 0 }\n    let mean = numbers.reduce(0,\
    \ combine: +)\n    let deviations = numbers.map { (item) -> Double in\n      \
    \  let delta = (item - mean)\n        return abs(delta)\n    }\n    return deviations.reduce(0,\
    \ combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9yrqiw6e.swift:11:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +)\n                    \
    \         ^   ~~~~~~~~~\n                                 \n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mahalanobis_distance(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpw1q_z8tm.swift:10:12: error: cannot find 'mahalanobis_distance'\
    \ in scope\n    return mahalanobis_distance(numbers)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mahalanobis(numbers, mean: numbers.reduce(0, combine:\
    \ +)) / numbers.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpx6ni61lu.swift:10:12: error: cannot find 'mahalanobis' in scope\n\
    \    return mahalanobis(numbers, mean: numbers.reduce(0, combine: +)) / numbers.count\n\
    \           ^~~~~~~~~~~\n/tmp/tmpx6ni61lu.swift:10:70: error: no '/' candidates\
    \ produce the expected contextual result type 'Double'\n    return mahalanobis(numbers,\
    \ mean: numbers.reduce(0, combine: +)) / numbers.count\n                     \
    \                                                ^\nSwift.Int:10:24: note: '/'\
    \ produces 'Int', not the expected contextual result type 'Double'\n    public\
    \ static func / (lhs: Int, rhs: Int) -> Int\n                       ^\nSwift.Int:10:24:\
    \ note: '/' produces 'Int', not the expected contextual result type 'Double'\n\
    \    public static func / (lhs: Int, rhs: Int) -> Int\n                      \
    \ ^\nSwift.Int:10:24: note: '/' produces 'Int', not the expected contextual result\
    \ type 'Double'\n    public static func / (lhs: Int, rhs: Int) -> Int\n      \
    \                 ^\nSwift.BinaryInteger:14:17: note: '/' produces 'Int', not\
    \ the expected contextual result type 'Double'\n    static func / (lhs: Self,\
    \ rhs: Self) -> Self\n                ^\nSwift.BinaryInteger:14:17: note: '/'\
    \ produces 'Int', not the expected contextual result type 'Double'\n    static\
    \ func / (lhs: Self, rhs: Self) -> Self\n                ^\nSwift.BinaryInteger:14:17:\
    \ note: '/' produces 'Int', not the expected contextual result type 'Double'\n\
    \    static func / (lhs: Self, rhs: Self) -> Self\n                ^\nSwift.Duration:8:24:\
    \ note: '/' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    public static func / <T>(lhs: Duration, rhs: T) -> Duration where T : BinaryInteger\n\
    \                       ^\nSwift.Int:10:24: note: '/' produces 'Int', not the\
    \ expected contextual result type 'Double'\n    public static func / (lhs: Int,\
    \ rhs: Int) -> Int\n                       ^\nSwift.Int:10:24: note: '/' produces\
    \ 'Int', not the expected contextual result type 'Double'\n    public static func\
    \ / (lhs: Int, rhs: Int) -> Int\n                       ^\nSwift.Int:10:24: note:\
    \ '/' produc"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  var sum = Double(0.0)\n  var count = 0\n  numbers.forEach { number\
    \ in\n    sum += abs(number - mean)\n    count += 1\n  }\n  return sum / count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4np8bpy0.swift:13:25: error: cannot find 'mean' in scope\n    sum\
    \ += abs(number - mean)\n                        ^~~~\n/tmp/tmp4np8bpy0.swift:16:16:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \  return sum / count\n               ^\n               Double( )\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.Statistics.meanAbsoluteDifference(numbers)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpjhrew38p.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.Statistics.meanAbsoluteDifference(numbers)\n          \
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    // Mean Absolute Deviation\n    let mAD = Double.zero\n   \
    \ for i in 0..<numbers.count {\n        mAD += (numbers[i] - Double(numbers.removeAtIndex(i)))\
    \ * (numbers[i] - Double(numbers.removeAtIndex(i)))\n    }\n    mAD /= Double(numbers.count)\n\
    \    return mAD\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0kg4u_qn.swift:13:9: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        mAD += (numbers[i] - Double(numbers.removeAtIndex(i)))\
    \ * (numbers[i] - Double(numbers.removeAtIndex(i)))\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0kg4u_qn.swift:15:9: error: left side of mutating operator isn't mutable:\
    \ 'mAD' is a 'let' constant\n    mAD /= Double(numbers.count)\n    ~~~ ^\n/tmp/tmp0kg4u_qn.swift:11:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let mAD = Double.zero\n\
    \    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660009192
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.reduce(0, combine: { $0 + $1})\n    let\
    \ deviation = numbers.map { $0 - mean }.reduce(0.0, combine: { $0 + $1})\n   \
    \ return deviation/Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpnbkfoxic.swift:10:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: { $0 + $1})\n           \
    \                  ^   ~~~~~~~~~\n                                 \n/tmp/tmpnbkfoxic.swift:11:53:\
    \ error: extraneous argument label 'combine:' in call\n    let deviation = numbers.map\
    \ { $0 - mean }.reduce(0.0, combine: { $0 + $1})\n                           \
    \                         ^     ~~~~~~~~~\n                                  \
    \                        \n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.Statistics.meanAbsoluteDifference(numbers)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpjhrew38p.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.Statistics.meanAbsoluteDifference(numbers)\n          \
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.mean()\n    return mean * mean / numbers.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpxx7oa7we.swift:10:24: error: value of type '[Double]' has no member\
    \ 'mean'\n    let mean = numbers.mean()\n               ~~~~~~~ ^~~~\n/tmp/tmpxx7oa7we.swift:11:24:\
    \ error: cannot convert return expression of type 'Duration' to return type 'Double'\n\
    \    return mean * mean / numbers.count\n           ~~~~~~~~~~~~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let mean = mean(numbers)\n  return numbers.map { abs($0 - mean)\
    \ }.mean()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpqmytf7x7.swift:10:14: error: use of local variable 'mean' before\
    \ its declaration\n  let mean = mean(numbers)\n             ^\n/tmp/tmpqmytf7x7.swift:10:7:\
    \ note: 'mean' declared here\n  let mean = mean(numbers)\n      ^\n/tmp/tmpqmytf7x7.swift:11:41:\
    \ error: value of type '[Double]' has no member 'mean'\n  return numbers.map {\
    \ abs($0 - mean) }.mean()\n         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean: Double = numbers.reduce(0, { $0 + $1 })\n    return\
    \ Double((numbers.reduce(0, { $0 + Double($1) }) - mean)\n        .squareRoot())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.4EQpk7/tmpgfg2tb9s-1.o:tmpgfg2tb9s-1.o:function $s11tmpgfg2tb9s23mean_absolute_deviation7numbersSdSaySdG_tF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  return stats.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcafjxaha.swift:10:10: error: cannot find 'stats' in scope\n  return\
    \ stats.meanAbsoluteDeviation(numbers)\n         ^~~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let sum: Double = numbers.reduce(0, combine: +)\n    let mean\
    \ = sum / Double(numbers.count)\n    return sum / Double(numbers.count) - mean\
    \ * mean\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpobssgril.swift:10:37: error: extraneous argument label 'combine:'\
    \ in call\n    let sum: Double = numbers.reduce(0, combine: +)\n             \
    \                       ^   ~~~~~~~~~\n                                      \
    \  \n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mean_absolute_deviationHelper(numbers, numbers, 0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmppur5_drr.swift:10:12: error: cannot find 'mean_absolute_deviationHelper'\
    \ in scope\n    return mean_absolute_deviationHelper(numbers, numbers, 0)\n  \
    \         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpefugbocq.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers).map\
    \ { abs($0 - mean) }) / numbers.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpmfdaqcnb.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpmfdaqcnb.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpmfdaqcnb.swift:11:63:\
    \ error: no '/' candidates produce the expected contextual result type 'Double'\n\
    \    return mean(zip(numbers, numbers).map { abs($0 - mean) }) / numbers.count\n\
    \                                                              ^\nSwift.Int:10:24:\
    \ note: '/' produces 'Int', not the expected contextual result type 'Double'\n\
    \    public static func / (lhs: Int, rhs: Int) -> Int\n                      \
    \ ^\nSwift.Int:10:24: note: '/' produces 'Int', not the expected contextual result\
    \ type 'Double'\n    public static func / (lhs: Int, rhs: Int) -> Int\n      \
    \                 ^\nSwift.Int:10:24: note: '/' produces 'Int', not the expected\
    \ contextual result type 'Double'\n    public static func / (lhs: Int, rhs: Int)\
    \ -> Int\n                       ^\nSwift.Int:10:24: note: '/' produces 'Int',\
    \ not the expected contextual result type 'Double'\n    public static func / (lhs:\
    \ Int, rhs: Int) -> Int\n                       ^\nSwift.BinaryInteger:14:17:\
    \ note: '/' produces 'Int', not the expected contextual result type 'Double'\n\
    \    static func / (lhs: Self, rhs: Self) -> Self\n                ^\nSwift.BinaryInteger:14:17:\
    \ note: '/' produces 'Int', not the expected contextual result type 'Double'\n\
    \    static func / (lhs: Self, rhs: Self) -> Self\n                ^\nSwift.BinaryInteger:14:17:\
    \ note: '/' produces 'Int', not the expected contextual result type 'Double'\n\
    \    static func / (lhs: Self, rhs: Self) -> Self\n                ^\nSwift.BinaryInteger:14:17:\
    \ note: '/' produces 'Int', not the expected contextual result type 'Double'\n\
    \    static func / (lhs: Self, rhs: Self) -> Self\n                ^\nSwift.Duration:8:24:\
    \ note: '/' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    public static func / <T>(lhs: Duration, rhs: T) -> Duration where T : BinaryInteger\n\
    \                       "
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.isEmpty, numbers.count == 0, numbers.last < 0 {\n\
    \        return 0\n    }\n    var sum: Double = 0\n    for n in numbers {\n  \
    \      sum += n\n    }\n    return Double(sum) / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpe2a7qg_l.swift:10:58: error: type '((Double) throws -> Bool) throws\
    \ -> Double?' cannot conform to 'BinaryInteger'\n    if numbers.isEmpty, numbers.count\
    \ == 0, numbers.last < 0 {\n                                                 \
    \        ^\n/tmp/tmpe2a7qg_l.swift:10:58: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n    if numbers.isEmpty, numbers.count\
    \ == 0, numbers.last < 0 {\n                                                 \
    \        ^\n/tmp/tmpe2a7qg_l.swift:10:58: note: required by referencing operator\
    \ function '<' on 'BinaryInteger' where 'Self' = '((Double) throws -> Bool) throws\
    \ -> Double?'\n    if numbers.isEmpty, numbers.count == 0, numbers.last < 0 {\n\
    \                                                         ^\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum = 0.0\n    for num in numbers {\n        sum += pow((num\
    \ - mean(numbers)), 2)\n    }\n    return sqrt(sum / Double(Double(numbers.count)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpx9wwsha0.swift:12:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow((num - mean(numbers)), 2)\n               ^~~\n/tmp/tmpx9wwsha0.swift:12:27:\
    \ error: cannot find 'mean' in scope\n        sum += pow((num - mean(numbers)),\
    \ 2)\n                          ^~~~\n/tmp/tmpx9wwsha0.swift:14:12: error: cannot\
    \ find 'sqrt' in scope\n    return sqrt(sum / Double(Double(numbers.count)))\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = 0.0\n    for i in 0..<numbers.count {\n        mean\
    \ += abs(numbers[i] - mean)\n    }\n    return mean / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp800wsqwa.swift:12:14: error: left side of mutating operator isn't\
    \ mutable: 'mean' is a 'let' constant\n        mean += abs(numbers[i] - mean)\n\
    \        ~~~~ ^\n/tmp/tmp800wsqwa.swift:10:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let mean = 0.0\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp16ycm0ii.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0.0\n    for n in numbers {\n        sum\
    \ += math.fabs(n - mean_(n))\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp604xlmwe.swift:12:16: error: cannot find 'math' in scope\n    \
    \    sum += math.fabs(n - mean_(n))\n               ^~~~\n/tmp/tmp604xlmwe.swift:12:30:\
    \ error: cannot find 'mean_' in scope\n        sum += math.fabs(n - mean_(n))\n\
    \                             ^~~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean(numbers)\n    return mean(numbers) - mean\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpmpxcnmqo.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpmpxcnmqo.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum = 0\n    for i in 0..<numbers.count {\n        sum\
    \ += pow(numbers[i] - mean, 2)\n    }\n    let mean = sum / numbers.count\n  \
    \  return sqrt(Double(numbers.count) * mean / Double(numbers.count - 1))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpskzx48qu.swift:12:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow(numbers[i] - mean, 2)\n               ^~~\n/tmp/tmpskzx48qu.swift:12:33:\
    \ error: use of local variable 'mean' before its declaration\n        sum += pow(numbers[i]\
    \ - mean, 2)\n                                ^\n/tmp/tmpskzx48qu.swift:14:9:\
    \ note: 'mean' declared here\n    let mean = sum / numbers.count\n        ^\n\
    /tmp/tmpskzx48qu.swift:15:12: error: cannot find 'sqrt' in scope\n    return sqrt(Double(numbers.count)\
    \ * mean / Double(numbers.count - 1))\n           ^~~~\n/tmp/tmpskzx48qu.swift:15:41:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    return sqrt(Double(numbers.count) * mean / Double(numbers.count - 1))\n \
    \                                       ^\n                                  \
    \      Double( )\n"
  stdout: ''
  timestamp: 1660009178
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let count = numbers.count\n  guard count != 0 else { return 0.0\
    \ }\n\n  let sum = 0.0\n  var deviation = 0.0\n  for num in numbers {\n    sum\
    \ += num\n  }\n  deviation = Double(sum) / Double(count)\n\n  return deviation\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp208frw5u.swift:16:9: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n    sum += num\n    ~~~ ^\n/tmp/tmp208frw5u.swift:13:3:\
    \ note: change 'let' to 'var' to make it mutable\n  let sum = 0.0\n  ^~~\n  var\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum = 0.0\n    for n in numbers {\n        sum += (n -\
    \ mean())\n    }\n    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpukef5aj8.swift:12:21: error: cannot find 'mean' in scope\n    \
    \    sum += (n - mean())\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let sum = numbers.reduce(0, combine: +)\n    let mean = Double(sum)\
    \ / Double(numbers.count)\n    return mean\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpxtskbjed.swift:10:29: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = numbers.reduce(0, combine: +)\n                     \
    \       ^   ~~~~~~~~~\n                                \n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let mean = average(numbers)\n  return sum(numbers) / Double(numbers.count)\
    \ - mean * mean\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5nrdii8_.swift:10:14: error: cannot find 'average' in scope\n \
    \ let mean = average(numbers)\n             ^~~~~~~\n/tmp/tmp5nrdii8_.swift:11:10:\
    \ error: cannot find 'sum' in scope\n  return sum(numbers) / Double(numbers.count)\
    \ - mean * mean\n         ^~~\n/tmp/tmp5nrdii8_.swift:11:47: error: cannot convert\
    \ return expression of type 'Duration' to return type 'Double'\n  return sum(numbers)\
    \ / Double(numbers.count) - mean * mean\n         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009173
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean<Double>(numbers)\n    var made_up = 0\n   \
    \ for value in numbers {\n        made_up += (value - mean) * (value - mean)\n\
    \    }\n    return (made_up / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpmsvwpytw.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean<Double>(numbers)\n               ^\n/tmp/tmpmsvwpytw.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean<Double>(numbers)\n        ^\n\
    /tmp/tmpmsvwpytw.swift:13:35: error: cannot convert value of type 'Double' to\
    \ expected argument type 'Int'\n        made_up += (value - mean) * (value - mean)\n\
    \                                  ^\n                   Int(                \
    \           )\n/tmp/tmpmsvwpytw.swift:15:13: error: cannot convert value of type\
    \ 'Int' to expected argument type 'Double'\n    return (made_up / Double(numbers.count))\n\
    \            ^\n            Double()\n"
  stdout: ''
  timestamp: 1660009175
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    guard numbers.count > 0 else { return 0 }\n    guard numbers.count\
    \ != 0 else { return 0 }\n    let sum = numbers.reduce(0, combine: +)\n    return\
    \ Double(sum / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9cixbqin.swift:12:29: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = numbers.reduce(0, combine: +)\n                     \
    \       ^   ~~~~~~~~~\n                                \n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    func mean(_ numbers: [Double]) -> (Double, Double) {\n    \
    \    var sum = 0.0\n        var n: Double = 0\n        for item in numbers {\n\
    \            sum += item\n            n += 1\n        }\n        return sum /\
    \ n, sum / n\n    }\n\n    let (mn, mx) = mean(numbers)\n    return sqrt(sumOfSquaredDeviations(numbers:\
    \ [mn], center: mx, numbers: numbers) / numbers.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0tmvnrv9.swift:17:23: error: consecutive statements on a line must\
    \ be separated by ';'\n        return sum / n, sum / n\n                     \
    \ ^\n                      ;\n/tmp/tmp0tmvnrv9.swift:17:23: error: expected expression\n\
    \        return sum / n, sum / n\n                      ^\n/tmp/tmp0tmvnrv9.swift:17:20:\
    \ error: cannot convert return expression of type 'Double' to return type '(Double,\
    \ Double)'\n        return sum / n, sum / n\n               ~~~~^~~\n/tmp/tmp0tmvnrv9.swift:21:12:\
    \ error: cannot find 'sqrt' in scope\n    return sqrt(sumOfSquaredDeviations(numbers:\
    \ [mn], center: mx, numbers: numbers) / numbers.count)\n           ^~~~\n/tmp/tmp0tmvnrv9.swift:21:17:\
    \ error: cannot find 'sumOfSquaredDeviations' in scope\n    return sqrt(sumOfSquaredDeviations(numbers:\
    \ [mn], center: mx, numbers: numbers) / numbers.count)\n                ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return ma(numbers) / mean(numbers)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp22i60i1.swift:10:12: error: cannot find 'ma' in scope\n    return\
    \ ma(numbers) / mean(numbers)\n           ^~\n/tmp/tmpp22i60i1.swift:10:26: error:\
    \ cannot find 'mean' in scope\n    return ma(numbers) / mean(numbers)\n      \
    \                   ^~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double(statistics.mean(\n        zip(numbers.map{ abs($0\
    \ - statistics.mean($0)) })\n        .map{ abs($0) }\n    ))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpvlnq7npv.swift:10:19: error: cannot find 'statistics' in scope\n\
    \    return Double(statistics.mean(\n                  ^~~~~~~~~~\n/tmp/tmpvlnq7npv.swift:11:35:\
    \ error: cannot find 'statistics' in scope\n        zip(numbers.map{ abs($0 -\
    \ statistics.mean($0)) })\n                                  ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let meanValue = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    return numbers.map{ $0 - meanValue }.reduce(0, +) / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpfp_pjij3/tmpfp_pjij3.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97519f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97516edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97516ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97516ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfp_pjij3                        0x00005605dbede4c3 <unavailable> + 5315

    5    libc.so.6                          0x00002b9751be2460 __libc_start_main +
    245

    6    tmpfp_pjij3                        0x00005605dbede119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return average(numbers, { abs($0 - mean(numbers)) })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpf5qktnru.swift:10:12: error: cannot find 'average' in scope\n \
    \   return average(numbers, { abs($0 - mean(numbers)) })\n           ^~~~~~~\n\
    /tmp/tmpf5qktnru.swift:10:40: error: cannot find 'mean' in scope\n    return average(numbers,\
    \ { abs($0 - mean(numbers)) })\n                                       ^~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpefugbocq.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpefugbocq.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return map_accumulate(numbers, 1, 0) { sum, number in\n   \
    \     return sum + abs(number - sum) / Double(numbers.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8vfprr87.swift:10:12: error: cannot find 'map_accumulate' in scope\n\
    \    return map_accumulate(numbers, 1, 0) { sum, number in\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009182
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean: Double = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    return numbers.reduce(0, { $0 + abs($1 - mean) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp3gm7wvza/tmp3gm7wvza.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc00fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fbfdf5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fbfdf5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fbfdf47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3gm7wvza                        0x0000563503c6c503 <unavailable> + 5379

    5    libc.so.6                          0x00002b3fc02ea460 __libc_start_main +
    245

    6    tmp3gm7wvza                        0x0000563503c6c159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009173
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mad_(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpg_qm_aj1.swift:10:12: error: cannot find 'mad_' in scope\n    return\
    \ mad_(numbers)\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    var counts: Double = 0\n\n    for\
    \ i in numbers {\n        sum += i\n        ++counts\n    }\n\n    let mean =\
    \ sum / counts\n\n    return mean - mean * mean\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpyk5ihdv2.swift:15:9: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        ++counts\n        ^~\n"
  stdout: ''
  timestamp: 1660009172
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum = 0.0\n    for num in numbers {\n        sum += abs(num\
    \ - mean_(numbers))\n    }\n    return Double(sum) / Double(numbers.count)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpzto3p6v4.swift:12:26: error: cannot find 'mean_' in scope\n   \
    \     sum += abs(num - mean_(numbers))\n                         ^~~~~\n"
  stdout: ''
  timestamp: 1660009173
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mean(zip(numbers.map { abs($0 - mean) }, numbers).reduce(0.0))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpbz091r38.swift:10:12: error: cannot find 'mean' in scope\n    return\
    \ mean(zip(numbers.map { abs($0 - mean) }, numbers).reduce(0.0))\n           ^~~~\n\
    /tmp/tmpbz091r38.swift:10:44: error: cannot find 'mean' in scope\n    return mean(zip(numbers.map\
    \ { abs($0 - mean) }, numbers).reduce(0.0))\n                                \
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009173
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let mean = numbers.reduce(0, combine: +)\n  let deviation = numbers.map\
    \ { $0 - mean }\n  return deviation.reduce(0, combine: +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpu7t2vay4.swift:10:28: error: extraneous argument label 'combine:'\
    \ in call\n  let mean = numbers.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660009173
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return average(zip(numbers, numbers.dropFirst())) { x, y ->\
    \ Double in\n        abs(x - y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpfrk7anxl.swift:10:12: error: cannot find 'average' in scope\n \
    \   return average(zip(numbers, numbers.dropFirst())) { x, y -> Double in\n  \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009173
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.isEmpty {\n        return Double.nan\n    }\n  \
    \  let mean = numbers.reduce(0, {$0 + $1}) / Double(numbers.count)\n    return\
    \ Double(numbers.map{ abs($0 - mean) }.mean())\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmppb8iaqwg.swift:14:49: error: value of type '[Double]' has no member\
    \ 'mean'\n    return Double(numbers.map{ abs($0 - mean) }.mean())\n          \
    \        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009173
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var result: Double = 0\n    for i in 0..<numbers.count {\n\
    \        result += (numbers[i] - numbers.mean())\n    }\n    return result / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpm9gzjql5.swift:12:41: error: value of type '[Double]' has no member\
    \ 'mean'\n        result += (numbers[i] - numbers.mean())\n                  \
    \              ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009173
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  return statistics(numbers, Statistics.meanAbsoluteDeviation)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmppbqbb2an.swift:10:10: error: cannot find 'statistics' in scope\n\
    \  return statistics(numbers, Statistics.meanAbsoluteDeviation)\n         ^~~~~~~~~~\n\
    /tmp/tmppbqbb2an.swift:10:30: error: cannot find 'Statistics' in scope\n  return\
    \ statistics(numbers, Statistics.meanAbsoluteDeviation)\n                    \
    \         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009173
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let sum = numbers.reduce(0, combine: +)\n    let mean = sum\
    \ / Double(numbers.count)\n    let differences = numbers.map { (x) -> Double in\n\
    \        return abs(x - mean)\n    }\n    return Double(differences.reduce(0,\
    \ combine: +) / Double(differences.count))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpfw78n6t_.swift:10:29: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = numbers.reduce(0, combine: +)\n                     \
    \       ^   ~~~~~~~~~\n                                \n"
  stdout: ''
  timestamp: 1660009176
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mean(numbers) - meanAbsoluteDeviation(numbers)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpzk0ajfbg.swift:10:12: error: cannot find 'mean' in scope\n    return\
    \ mean(numbers) - meanAbsoluteDeviation(numbers)\n           ^~~~\n/tmp/tmpzk0ajfbg.swift:10:28:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return mean(numbers)\
    \ - meanAbsoluteDeviation(numbers)\n                           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009173
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var mean: Double = 0\n    var sum: Double = 0\n    for number\
    \ in numbers {\n        sum += number\n    }\n    mean = sum / Double(numbers.count)\n\
    \    var result = 0\n    for number in numbers {\n        result += pow((number\
    \ - mean), 2)\n    }\n    return sqrt(result / Double(numbers.count))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpghx1tgcw.swift:18:19: error: cannot find 'pow' in scope\n     \
    \   result += pow((number - mean), 2)\n                  ^~~\n/tmp/tmpghx1tgcw.swift:20:12:\
    \ error: cannot find 'sqrt' in scope\n    return sqrt(result / Double(numbers.count))\n\
    \           ^~~~\n/tmp/tmpghx1tgcw.swift:20:24: error: binary operator '/' cannot\
    \ be applied to operands of type 'Int' and 'Double'\n    return sqrt(result /\
    \ Double(numbers.count))\n                ~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpghx1tgcw.swift:20:24:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Duration, Double), (Int, Int)\n    return sqrt(result / Double(numbers.count))\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660009173
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp16ycm0ii.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009171
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum = 0.0\n    var n = 0\n    for x in numbers {\n    \
    \    if x == 0.0 {\n            continue\n        }\n        sum += pow(x, 2)\n\
    \        n += 1\n    }\n    if n == 0 {\n        return 0.0\n    }\n    return\
    \ sqrt(sum / n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpubkdlt6f.swift:16:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow(x, 2)\n               ^~~\n/tmp/tmpubkdlt6f.swift:22:12: error:\
    \ cannot find 'sqrt' in scope\n    return sqrt(sum / n)\n           ^~~~\n/tmp/tmpubkdlt6f.swift:22:21:\
    \ error: binary operator '/' cannot be applied to operands of type 'Double' and\
    \ 'Int'\n    return sqrt(sum / n)\n                ~~~ ^ ~\n/tmp/tmpubkdlt6f.swift:22:21:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    return sqrt(sum / n)\n                   \
    \ ^\n"
  stdout: ''
  timestamp: 1660009173
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let n = numbers.count\n    let mean = numbers.reduce(0, +)\
    \ / Double(n)\n    return numbers.map { abs($0 - mean) }.reduce(0, +) / Double(n)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009173
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let counts = numbers.enumerated().reduce(0.0, { (sum, x) in\
    \ sum + x.1 })\n    let mean = numbers.enumerated().reduce(0.0, { (sum, x) in\
    \ sum + x.0 })\n    return mean / Double(counts)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphahmt3rd.swift:11:71: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    let mean = numbers.enumerated().reduce(0.0,\
    \ { (sum, x) in sum + x.0 })\n                                               \
    \                       ^\n                                                  \
    \                  Double( )\n"
  stdout: ''
  timestamp: 1660009173
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return Double.standardDeviation(numbers.map{ abs($0 - Double(numbers.mean))\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8wtz05i0.swift:10:19: error: type 'Double' has no member 'standardDeviation'\n\
    \    return Double.standardDeviation(numbers.map{ abs($0 - Double(numbers.mean))\
    \ })\n           ~~~~~~ ^~~~~~~~~~~~~~~~~\n/tmp/tmp8wtz05i0.swift:10:74: error:\
    \ value of type '[Double]' has no member 'mean'\n    return Double.standardDeviation(numbers.map{\
    \ abs($0 - Double(numbers.mean)) })\n                                        \
    \                         ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009173
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpefugbocq.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009170
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var mean: Double = 0.0\n    var sum = 0.0\n    for x in numbers\
    \ {\n        sum += pow((x - mean), 2)\n        mean += x\n    }\n    return Double(sum\
    \ / Double(Double(numbers.count)))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpjzegaocf.swift:13:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow((x - mean), 2)\n               ^~~\n"
  stdout: ''
  timestamp: 1660009173
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.reduce(0, +)\n    return numbers.reduce(0,\
    \ +) / (Double(numbers.count) - Double(numbers.reduce(0,+)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpmyhwrp9o/tmpmyhwrp9o.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa589cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa586c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa586c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa586c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmyhwrp9o                        0x000055df79203473 <unavailable> + 5235

    5    libc.so.6                          0x00002baa58bba460 __libc_start_main +
    245

    6    tmpmyhwrp9o                        0x000055df792030c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009173
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.mean()\n    var mad = 0.0\n    for n in\
    \ numbers {\n        mad += abs(n - mean)\n    }\n    return mad.rounded()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp1a242n1j.swift:10:24: error: value of type '[Double]' has no member\
    \ 'mean'\n    let mean = numbers.mean()\n               ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009173
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let total = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    return Double(numbers.map{ abs($0 - total) }).sum()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq6dvorm2.swift:11:12: error: no exact matches in call to initializer\
    \ \n    return Double(numbers.map{ abs($0 - total) }).sum()\n           ^\n/tmp/tmpq6dvorm2.swift:11:12:\
    \ note: found candidate with type '(Builtin.FPIEEE64) -> Double'\n    return Double(numbers.map{\
    \ abs($0 - total) }).sum()\n           ^\n/tmp/tmpq6dvorm2.swift:11:12: note:\
    \ found candidate with type '(Substring) -> Double?'\n    return Double(numbers.map{\
    \ abs($0 - total) }).sum()\n           ^\n/tmp/tmpq6dvorm2.swift:11:12: note:\
    \ found candidate with type '(Int) -> Double'\n    return Double(numbers.map{\
    \ abs($0 - total) }).sum()\n           ^\n/tmp/tmpq6dvorm2.swift:11:12: note:\
    \ found candidate with type '(Float16) -> Double'\n    return Double(numbers.map{\
    \ abs($0 - total) }).sum()\n           ^\n/tmp/tmpq6dvorm2.swift:11:12: note:\
    \ found candidate with type '(Float) -> Double'\n    return Double(numbers.map{\
    \ abs($0 - total) }).sum()\n           ^\n/tmp/tmpq6dvorm2.swift:11:12: note:\
    \ found candidate with type '(Double) -> Double'\n    return Double(numbers.map{\
    \ abs($0 - total) }).sum()\n           ^\n/tmp/tmpq6dvorm2.swift:11:12: note:\
    \ found candidate with type '(Float80) -> Double'\n    return Double(numbers.map{\
    \ abs($0 - total) }).sum()\n           ^\n/tmp/tmpq6dvorm2.swift:11:51: error:\
    \ reference to member 'sum' cannot be resolved without a contextual type\n   \
    \ return Double(numbers.map{ abs($0 - total) }).sum()\n                      \
    \                            ^\n"
  stdout: ''
  timestamp: 1660009173
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var sum: Double = 0\n    for n in numbers {\n        sum +=\
    \ abs(n)\n    }\n    return (sum / Double(numbers.count))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpsvwffl6k/tmpsvwffl6k.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60effc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60efcbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60efcbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60efcbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsvwffl6k                        0x0000564cac0f8603 <unavailable> + 5635

    5    libc.so.6                          0x00002b60f01b2460 __libc_start_main +
    245

    6    tmpsvwffl6k                        0x0000564cac0f8259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009173
