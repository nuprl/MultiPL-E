language: swift
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 1\n    for i in 1..<n {\n        for j in i + 1..<n\
    \ {\n            for k in j + 1..<n {\n                if i * i - i + 1 + j *\
    \ j - k == 3 {\n                    result++\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmptaoe4di8.swift:18:27: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                    result++\n                       \
    \   ^~\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 1\n    var maxSum: Int = 0\n    var max: Int = 0\n\
    \    var sum: Int = 0\n    for i in 1...n {\n        for j in 1...n {\n      \
    \      for k in 1...n {\n                sum += Int(pow(i, 3))\n             \
    \   sum += Int(pow(j, 3))\n                sum += Int(pow(k, 3))\n           \
    \     if maxSum < sum {\n                    maxSum = sum\n                  \
    \  max = i\n                    count = 2\n                }\n               \
    \ if sum == 0 {\n                    maxSum = 0\n                    sum = 1\n\
    \                    count = -1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpx35zglut.swift:20:28: error: cannot find 'pow' in scope\n     \
    \           sum += Int(pow(i, 3))\n                           ^~~\n/tmp/tmpx35zglut.swift:21:28:\
    \ error: cannot find 'pow' in scope\n                sum += Int(pow(j, 3))\n \
    \                          ^~~\n/tmp/tmpx35zglut.swift:22:28: error: cannot find\
    \ 'pow' in scope\n                sum += Int(pow(k, 3))\n                    \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int](n+1)\n    var cnt = 0\n\n    for i in 0 ..< n {\n\
    \        a[i] = i * i - i + 1\n    }\n\n    for i in 0 ..< n {\n        for j\
    \ in i ..< n {\n            for k in i ..< n {\n                if i + j + k >\
    \ n {\n                    cnt++\n                } else {\n                 \
    \   if a[i] < a[j] + a[k] {\n                        a[i] = a[j]\n           \
    \         } else if a[i] > a[j] + a[k] {\n                        a[i] = a[k]\n\
    \                    } else {\n                        a[i] = a[i] + a[j] + a[k]\n\
    \                    }\n                }\n            }\n        }\n    }\n\n\
    \    return cnt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmphz2jv3hz.swift:13:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = [Int](n+1)\n                  ^\n                  arrayLiteral:\
    \ \n/tmp/tmphz2jv3hz.swift:24:24: error: cannot find operator '++' in scope; did\
    \ you mean '+= 1'?\n                    cnt++\n                       ^~\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: Int?\n    var max = 0\n    for _ in 1...n {\n        a\
    \ = Int(arc4random_uniform(UInt32(n)))\n        max += a[i] + a[i] - a[i] + a[i]\
    \ - a[i]\n    }\n    return Int(max%3) + 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_h23rr9x.swift:16:17: error: cannot find 'arc4random_uniform' in\
    \ scope\n        a = Int(arc4random_uniform(UInt32(n)))\n                ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_h23rr9x.swift:17:18: error: cannot find 'i' in scope\n        max +=\
    \ a[i] + a[i] - a[i] + a[i] - a[i]\n                 ^\n/tmp/tmp_h23rr9x.swift:17:25:\
    \ error: cannot find 'i' in scope\n        max += a[i] + a[i] - a[i] + a[i] -\
    \ a[i]\n                        ^\n/tmp/tmp_h23rr9x.swift:17:32: error: cannot\
    \ find 'i' in scope\n        max += a[i] + a[i] - a[i] + a[i] - a[i]\n       \
    \                        ^\n/tmp/tmp_h23rr9x.swift:17:39: error: cannot find 'i'\
    \ in scope\n        max += a[i] + a[i] - a[i] + a[i] - a[i]\n                \
    \                      ^\n/tmp/tmp_h23rr9x.swift:17:46: error: cannot find 'i'\
    \ in scope\n        max += a[i] + a[i] - a[i] + a[i] - a[i]\n                \
    \                             ^\n/tmp/tmp_h23rr9x.swift:17:9: error: the compiler\
    \ is unable to type-check this expression in reasonable time; try breaking up\
    \ the expression into distinct sub-expressions\n        max += a[i] + a[i] - a[i]\
    \ + a[i] - a[i]\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009421
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var triple = 0\n    for i = 1; i < n; i++ {\n        for j = i\
    \ + 1; j < n; j++ {\n            for k = j + 1; k < n; k++ {\n               \
    \ if ((i! + j! + k!) mod 3 == 0) {\n                    triple = (i! + j! + k!)\n\
    \                }\n            }\n        }\n    }\n    return triple\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmputt4cpw2.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 1; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmputt4cpw2.swift:15:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for j = i\
    \ + 1; j < n; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmputt4cpw2.swift:16:13:\
    \ error: C-style for statement has been removed in Swift 3\n            for k\
    \ = j + 1; k < n; k++ {\n            ^   ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmputt4cpw2.swift:17:36:\
    \ error: expected ',' separator\n                if ((i! + j! + k!) mod 3 == 0)\
    \ {\n                                   ^\n                                  ,\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpkl1umqu9/tmpkl1umqu9.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73cbd63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73cba5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73cba5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73cba597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkl1umqu9                        0x00005620479411b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b73cbf4f460 __libc_start_main +
    245

    6    tmpkl1umqu9                        0x0000562047940e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for _ in 0..<n {\n        let index = Int(arc4random_uniform(UInt32(n)))\n\
    \        if index != i {\n            continue\n        }\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpk81ckqlt.swift:15:25: error: cannot find 'arc4random_uniform' in\
    \ scope\n        let index = Int(arc4random_uniform(UInt32(n)))\n            \
    \            ^~~~~~~~~~~~~~~~~~\n/tmp/tmpk81ckqlt.swift:16:21: error: cannot find\
    \ 'i' in scope\n        if index != i {\n                    ^\n/tmp/tmpk81ckqlt.swift:19:18:\
    \ error: cannot find 'i' in scope\n        a.append(i * i - i + 1)\n         \
    \        ^\n/tmp/tmpk81ckqlt.swift:19:22: error: cannot find 'i' in scope\n  \
    \      a.append(i * i - i + 1)\n                     ^\n/tmp/tmpk81ckqlt.swift:19:26:\
    \ error: cannot find 'i' in scope\n        a.append(i * i - i + 1)\n         \
    \                ^\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar a = [0]\n\tfor i := 0; i < n; i++ {\n\t\ta[i] = a[i] * i - i\
    \ + 1\n\t}\n\t\n\tresult := 0\n\t\n\tvar tmp int\n\tfor i := n - 2; i >= 0; i--\
    \ {\n\t\tfor j := i + 1; j < n; j++ {\n\t\t\tfor k := 0; k < i; k++ {\n\t\t\t\t\
    if a[j] + a[k] + a[i] >= 3 {\n\t\t\t\t\tresult = result + 1\n\t\t\t\t}\n\t\t\t\
    \ttmp = a[j] + a[k] + a[i]\n\t\t\t\tif tmp >= 3 {\n\t\t\t\t\ttmp = 3\n\t\t\t\t\
    }\n\t\t\t\tif tmp < 3 {\n\t\t\t\t\ttmp = 3\n\t\t\t\t}\n\t\t\t\ta[j] = tmp\n\t\t\
    \t}\n\t\t}\n\t}\n\t\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp5st3zy5s.swift:14:9: error: expected type\n        for i := 0;\
    \ i < n; i++ {\n               ^\n                <#type#>\n/tmp/tmp5st3zy5s.swift:14:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < n; i++\
    \ {\n               ^\n/tmp/tmp5st3zy5s.swift:14:9: error: expected Sequence expression\
    \ for for-each loop\n        for i := 0; i < n; i++ {\n               ^\n/tmp/tmp5st3zy5s.swift:20:10:\
    \ error: found an unexpected second identifier in variable declaration; is there\
    \ an accidental break?\n        var tmp int\n                ^\n/tmp/tmp5st3zy5s.swift:20:10:\
    \ note: join the identifiers together\n        var tmp int\n            ~~~~^~~\n\
    \            tmpint\n/tmp/tmp5st3zy5s.swift:20:10: note: join the identifiers\
    \ together with camel-case\n        var tmp int\n            ~~~~^~~\n       \
    \     tmpInt\n/tmp/tmp5st3zy5s.swift:21:9: error: expected type\n        for i\
    \ := n - 2; i >= 0; i-- {\n               ^\n                <#type#>\n/tmp/tmp5st3zy5s.swift:21:9:\
    \ error: expected 'in' after for-each pattern\n        for i := n - 2; i >= 0;\
    \ i-- {\n               ^\n/tmp/tmp5st3zy5s.swift:21:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := n - 2; i >= 0; i-- {\n      \
    \         ^\n/tmp/tmp5st3zy5s.swift:22:10: error: expected type\n            \
    \    for j := i + 1; j < n; j++ {\n                       ^\n                \
    \        <#type#>\n/tmp/tmp5st3zy5s.swift:22:10: error: expected 'in' after for-each\
    \ pattern\n                for j := i + 1; j < n; j++ {\n                    \
    \   ^\n/tmp/tmp5st3zy5s.swift:22:10: error: expected Sequence expression for for-each\
    \ loop\n                for j := i + 1; j < n; j++ {\n                       ^\n\
    /tmp/tmp5st3zy5s.swift:23:11: error: expected type\n                        for\
    \ k := 0; k < i; k++ {\n                               ^\n                   \
    \             <#type#>\n/tmp/tmp5st3zy5s.swift:23:11: error: expected 'in' after\
    \ for-each pattern\n                        for k := 0; k < i; k++ {\n       \
    \                        ^\n/tmp/tmp5st3zy5s.swift:23:11: error: expected Sequence "
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\t\n\tlet mut a = Array(repeating: 0, count: n)\n\tfor i in 0..<n\
    \ {\n\t\ta[i] = i * i - i + 1\n\t}\n\tlet len = a.count\n\tvar sum_arr = [Int]()\n\
    \tvar sum_triple = 0\n\tfor i in 0..<len {\n\t\tlet j = i+1\n\t\tlet k = len-i\n\
    \t\tlet sum = Int((a[j] - a[i])*(a[j] - a[i]) + (a[k] - a[j])*(a[k] - a[j]))\n\
    \t\tif sum != 0 {\n\t\t\tsum_triple += sum\n\t\t\tsum_arr.append(sum)\n\t\t}\n\
    \t}\n\treturn sum_triple.count == 0 ? 0 : sum_triple.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpvsrsiz2t.swift:14:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut a =\
    \ Array(repeating: 0, count: n)\n                ^\n/tmp/tmpvsrsiz2t.swift:14:10:\
    \ note: join the identifiers together\n        let mut a = Array(repeating: 0,\
    \ count: n)\n            ~~~~^\n            muta\n/tmp/tmpvsrsiz2t.swift:14:10:\
    \ note: join the identifiers together with camel-case\n        let mut a = Array(repeating:\
    \ 0, count: n)\n            ~~~~^\n            mutA\n/tmp/tmpvsrsiz2t.swift:16:3:\
    \ error: cannot find 'a' in scope\n                a[i] = i * i - i + 1\n    \
    \            ^\n/tmp/tmpvsrsiz2t.swift:18:12: error: cannot find 'a' in scope\n\
    \        let len = a.count\n                  ^\n/tmp/tmpvsrsiz2t.swift:30:20:\
    \ error: value of type 'Int' has no member 'count'\n        return sum_triple.count\
    \ == 0 ? 0 : sum_triple.count\n               ~~~~~~~~~~ ^~~~~\n/tmp/tmpvsrsiz2t.swift:30:48:\
    \ error: value of type 'Int' has no member 'count'\n        return sum_triple.count\
    \ == 0 ? 0 : sum_triple.count\n                                           ~~~~~~~~~~\
    \ ^~~~~\n/tmp/tmpvsrsiz2t.swift:24:18: error: cannot find 'a' in scope\n     \
    \           let sum = Int((a[j] - a[i])*(a[j] - a[i]) + (a[k] - a[j])*(a[k] -\
    \ a[j]))\n                               ^\n/tmp/tmpvsrsiz2t.swift:24:25: error:\
    \ cannot find 'a' in scope\n                let sum = Int((a[j] - a[i])*(a[j]\
    \ - a[i]) + (a[k] - a[j])*(a[k] - a[j]))\n                                   \
    \   ^\n/tmp/tmpvsrsiz2t.swift:24:32: error: cannot find 'a' in scope\n       \
    \         let sum = Int((a[j] - a[i])*(a[j] - a[i]) + (a[k] - a[j])*(a[k] - a[j]))\n\
    \                                             ^\n/tmp/tmpvsrsiz2t.swift:24:39:\
    \ error: cannot find 'a' in scope\n                let sum = Int((a[j] - a[i])*(a[j]\
    \ - a[i]) + (a[k] - a[j])*(a[k] - a[j]))\n                                   \
    \                 ^\n/tmp/tmpvsrsiz2t.swift:24:48: error: cannot find 'a' in scope\n\
    \                let sum = Int((a[j] - a[i])*(a[j] - a[i]) + (a[k] - a[j])*(a[k]\
    \ - a[j]))\n         "
  stdout: ''
  timestamp: 1660009464
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var sum = 0\n    var sum2 = 0\n    var a = Array<Int>(n)\n\n \
    \   for i in 0..<n {\n        a[i] = i * i - i + 1\n    }\n\n    for i in 0..<n\
    \ {\n        if i < (n-1)/2 {\n            sum += a[i]\n            sum2 += a[i]\
    \ * a[i]\n        }\n    }\n\n    return sum + sum2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpk1mhglro.swift:15:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // TODO: check edge case\n    var a: Int[] = IntArray(n)\n   \
    \ for idx in 0 ..< n {\n        a[idx] = 3 * (idx * idx - idx - 1)\n    }\n  \
    \  let sum = a.sum()\n    if sum%3 != 0 {\n        return 0\n    }\n    return\
    \ a.count { $0 % 3 == 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpes9ejyfu.swift:14:15: error: array types are now written with the\
    \ brackets around the element type\n    var a: Int[] = IntArray(n)\n         \
    \     ^\n           [  \n/tmp/tmpes9ejyfu.swift:14:20: error: cannot find 'IntArray'\
    \ in scope\n    var a: Int[] = IntArray(n)\n                   ^~~~~~~~\n/tmp/tmpes9ejyfu.swift:18:17:\
    \ error: value of type '[Int]' has no member 'sum'\n    let sum = a.sum()\n  \
    \            ~ ^~~\n/tmp/tmpes9ejyfu.swift:22:14: error: cannot call value of\
    \ non-function type 'Int'\n    return a.count { $0 % 3 == 0 }\n             ^\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n   var a = [1]\n   for i in 1..n {\n      a[i] = a[i] * a[i] - a[i]\
    \ + i + 1\n   }\n   return a.count { $0 % 3 == 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp56s73vqm.swift:14:14: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n   for i in 1..n {\n             ^~\n             ...\n\
    /tmp/tmp56s73vqm.swift:17:13: error: cannot call value of non-function type 'Int'\n\
    \   return a.count { $0 % 3 == 0 }\n            ^\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    precondition(n >= 0, \"n must be positive\")\n    var a = [Int](n\
    \ + 1)\n    for i in 1..(n + 1) {\n        a[i] = i * i - i + 1\n    }\n    var\
    \ triples = 0\n    for i in 0..(n) {\n        for j in 0..(n) {\n            if\
    \ i != j {\n                for k in 0..(n) {\n                    if i != j &&\
    \ j != k {\n                        if a[i + j + k] == (a[i] + a[j] + a[k]) {\n\
    \                            triples += 1\n                        }\n       \
    \             }\n                }\n            }\n        }\n    }\n    return\
    \ triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpzsq39czc.swift:14:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = [Int](n + 1)\n                  ^\n                  arrayLiteral:\
    \ \n/tmp/tmpzsq39czc.swift:15:15: error: cannot find operator '..' in scope; did\
    \ you mean '...'?\n    for i in 1..(n + 1) {\n              ^~\n             \
    \ ...\n/tmp/tmpzsq39czc.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n) {\n              ^~\n             \
    \ ...\n/tmp/tmpzsq39czc.swift:20:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in 0..(n) {\n                  ^~\n     \
    \             ...\n/tmp/tmpzsq39czc.swift:22:27: error: cannot find operator '..'\
    \ in scope; did you mean '...'?\n                for k in 0..(n) {\n         \
    \                 ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return get_triples(n, n, n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpbz0d_mei.swift:13:12: error: cannot find 'get_triples' in scope\n\
    \    return get_triples(n, n, n)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return 0\n    }\n    var result = 1\n    for\
    \ _ in 1...n {\n        var a = 0\n        for i in 1...n {\n            a +=\
    \ i * i - i + 1\n        }\n        if a > result {\n            result = a\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpgiwgxh1z/tmpgiwgxh1z.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09feef4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09febebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09febeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09febea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgiwgxh1z                        0x000055d379e7b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b09ff0e0460 __libc_start_main +
    245

    6    tmpgiwgxh1z                        0x000055d379e7afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    precondition(n >= 0, \"Invalid n\")\n    \n    var res = Int(0)\n\
    \    for _ in 1...n {\n        for _ in 1...n {\n            for _ in 1...n {\n\
    \                if _ % 3 == 0 && _ + _ + _ == n * n - 3 {\n                 \
    \   res += 1\n                }\n            }\n        }\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpzpwavexl.swift:19:20: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n                if _ % 3 == 0 && _ + _ +\
    \ _ == n * n - 3 {\n                   ^\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tlet a = Array(1...n)\n\tvar count = 0\n\tvar k = n - 1\n\t\n\tfor\
    \ i in 1...n {\n\t\tcount += 1\n\t\tfor j in 1...k {\n\t\t\tcount += j\n\t\t\t\
    if a[j] > a[j+k] {\n\t\t\t\tcount += a[j+k]\n\t\t\t\ta[j] = a[j+k]\n\t\t\t\ta[k]\
    \ = 0\n\t\t\t}\n\t\t}\n\t\tk /= 2\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp1auk1l4y.swift:23:6: error: cannot assign through subscript: 'a'\
    \ is a 'let' constant\n                                a[j] = a[j+k]\n       \
    \                         ~^\n/tmp/tmp1auk1l4y.swift:13:2: note: change 'let'\
    \ to 'var' to make it mutable\n        let a = Array(1...n)\n        ^~~\n   \
    \     var\n/tmp/tmp1auk1l4y.swift:24:6: error: cannot assign through subscript:\
    \ 'a' is a 'let' constant\n                                a[k] = 0\n        \
    \                        ~^\n/tmp/tmp1auk1l4y.swift:13:2: note: change 'let' to\
    \ 'var' to make it mutable\n        let a = Array(1...n)\n        ^~~\n      \
    \  var\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    a.fill(0)\n    var triple = 0\n   \
    \ for idx in 1...n {\n        for idx in 1...n {\n            if idx > idx {\n\
    \                for (idx in 1...n) {\n                    if idx == idx {\n \
    \                       continue\n                    }\n                    if\
    \ a[idx - 1] > a[idx] + a[idx] {\n                        triple++\n         \
    \               a[idx - 1] = a[idx] + a[idx]\n                        a[idx] =\
    \ idx - 1\n                        break\n                    }\n            \
    \    }\n            }\n        }\n    }\n    return triple\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpy9e01tm6.swift:19:26: error: expected ',' separator\n         \
    \       for (idx in 1...n) {\n                         ^\n                   \
    \     ,\n/tmp/tmpy9e01tm6.swift:19:26: error: expected pattern\n             \
    \   for (idx in 1...n) {\n                         ^\n/tmp/tmpy9e01tm6.swift:19:36:\
    \ error: expected 'in' after for-each pattern\n                for (idx in 1...n)\
    \ {\n                                   ^\n/tmp/tmpy9e01tm6.swift:19:36: error:\
    \ expected Sequence expression for for-each loop\n                for (idx in\
    \ 1...n) {\n                                   ^\n/tmp/tmpy9e01tm6.swift:13:24:\
    \ error: missing argument label 'arrayLiteral:' in call\n    var a = Array<Int>(n)\n\
    \                       ^\n                       arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 3 {\n        return 0\n    }\n    var triples = 0\n   \
    \ var a = [Int](n+1)\n    a[0] = 0\n    for i in 1...n {\n        a[i] = i*i -\
    \ i + 1 // a[i] = (i*i) - i + 1 // a[i] = 3 * i - i\n    }\n    for i in 1...n\
    \ {\n        for j in (i+1)...n {\n            var k = j\n            while (k\
    \ < a[i]) {\n                k++\n            }\n            if k == i {\n   \
    \             a[k] = 1\n            } else {\n                a[k] = a[k] - a[i]\n\
    \                a[k] += 1\n            }\n        }\n    }\n    for _ in 1...n\
    \ {\n        if a[n] == 3 {\n            triples += 1\n        }\n    }\n    return\
    \ triples * 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpr98tvkxg.swift:17:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = [Int](n+1)\n                  ^\n                  arrayLiteral:\
    \ \n/tmp/tmpr98tvkxg.swift:26:18: error: cannot find operator '++' in scope; did\
    \ you mean '+= 1'?\n                k++\n                 ^~\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int](n + 1)\n    \n    // O(n^2), O(1)\n    for i in\
    \ 0..<n {\n        for j in 0..<n {\n            for k in 0..<n {\n          \
    \      if i > j { continue }\n                if i > k { continue }\n        \
    \        if j > k { continue }\n                if a[i] > 0 { continue }\n   \
    \             if a[j] > 0 { continue }\n                if a[k] > 0 { continue\
    \ }\n                a[i] = a[i] + a[j] + a[k]\n                if a[i] == 3 {\
    \ return 1 }\n            }\n        }\n    }\n    \n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpls0auacp.swift:13:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = [Int](n + 1)\n                  ^\n                  arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n  var result = 0\n  var a: Array<Int> = Array(n)\n  for i in 0 ..<\
    \ n {\n    a[i] = i\n    result += a[i] * a[i] - a[i] + 1\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmplbqyq3o_.swift:14:29: error: missing argument label 'arrayLiteral:'\
    \ in call\n  var a: Array<Int> = Array(n)\n                            ^\n   \
    \                         arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        a[i] = i*i - i\
    \ + 1\n    }\n    var total = 0\n    for i in 0..(n-1) {\n        for j in (i+1)...n\
    \ {\n            for k in (i+1)...n {\n                total += a[i] + a[j] +\
    \ a[k]\n            }\n        }\n    }\n    return total\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpkbj0t6_c.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) {\n              ^~\n           \
    \   ...\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    var ans = Int()\n  \
    \  for _ in 0 ..< n {\n        ans = max(ans, (n * (n + 1)) / 2) // 3\n    }\n\
    \    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpzlrs1uip/tmpzlrs1uip.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bc1574c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bc126bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bc126b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bc126a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlrs1uip                        0x00005615325153c5 <unavailable> + 5061

    5    libc.so.6                          0x00002b7bc1760460 __libc_start_main +
    245

    6    tmpzlrs1uip                        0x0000561532515079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    \n    // 1. Create a constant array of length n\n    // 2. Initialize\
    \ a counter variable and increment it by 1 for each valid triple.\n    // 3. Return\
    \ the counter.\n    \n    let maxTriples = 0\n    var counter = 0\n    \n    let\
    \ a = Array(0 ..< n).map { _ in counter++ }\n    \n    for i in 0..<n {\n    \
    \    \n        for j in 0..<n {\n            \n            if j < i {\n      \
    \          \n                for k in 0..<n {\n                    \n        \
    \            if k != i && k != j {\n                        \n               \
    \         if a[k] > a[k+1] + a[j] {\n                            a[k] = a[k+1]\
    \ + a[j]\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    \n    maxTriples = counter\n    \n    return\
    \ maxTriples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl3un4eqe.swift:21:46: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n    let a = Array(0 ..< n).map { _ in counter++ }\n  \
    \                                           ^~\n/tmp/tmpl3un4eqe.swift:42:5: error:\
    \ cannot assign to value: 'maxTriples' is a 'let' constant\n    maxTriples = counter\n\
    \    ^~~~~~~~~~\n/tmp/tmpl3un4eqe.swift:18:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let maxTriples = 0\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 2 {\n        return Int(0)\n    }\n    var count = Int(0)\n\
    \    var array = Array(0...n)\n    for var i = 1; i < array.count; i++ {\n   \
    \     if i > array.count {\n            break\n        }\n        for var j =\
    \ i + 1; j < array.count; j++ {\n            if j > array.count {\n          \
    \      break\n            }\n            for var k = j + 1; k < array.count; k++\
    \ {\n                if k > array.count {\n                    break\n       \
    \         }\n                if array[k] - array[j] < array[i] - array[i] {\n\
    \                    count = count + 1\n                }\n            }\n   \
    \     }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpcbk8m4k1.swift:18:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 1; i < array.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcbk8m4k1.swift:22:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for var j = i + 1; j < array.count; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcbk8m4k1.swift:26:13: error: C-style for statement has been removed in\
    \ Swift 3\n            for var k = j + 1; k < array.count; k++ {\n           \
    \ ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int](n+1)\n    a[0] = -1\n    a[1] = 1\n    for i in\
    \ 2..<n {\n        a[i] = (a[i-1] + a[i-2] + i) % 3\n    }\n    return a.count\
    \ { $0 == 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp16le3zkq.swift:13:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = [Int](n+1)\n                  ^\n                  arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1660009407
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return (n * n - n*(n-1) / 2) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmps2aagjxz/tmps2aagjxz.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06f71e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06f6edab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06f6eda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06f6ed97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps2aagjxz                        0x0000561729700245 <unavailable> + 4677

    5    libc.so.6                          0x00002b06f73cf460 __libc_start_main +
    245

    6    tmps2aagjxz                        0x00005617296ffef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return max_triangle_sum(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp1b9eohdo.swift:13:12: error: cannot find 'max_triangle_sum' in\
    \ scope\n    return max_triangle_sum(n)\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    precondition(n >= 0, \"n must be positive\")\n    precondition(n\
    \ % 3 == 0, \"n must be divisible by 3\")\n    var triplesCount = 0\n    var i\
    \ : Int = 0\n    var j : Int = 0\n    var k : Int = 0\n    while (i < n) {\n \
    \       j = i + 2\n        while (j < n) {\n            k = j + 2\n          \
    \  while (k < n) {\n                triplesCount += 3\n                k++\n \
    \           }\n            j++\n        }\n        i++\n    }\n    return triplesCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmptdm1p2kc.swift:25:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                k++\n                 ^~\n/tmp/tmptdm1p2kc.swift:27:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n/tmp/tmptdm1p2kc.swift:29:10: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        i++\n         ^~\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let a = stride(from: 1, through: n, by: 1).map { $0 * $0 - $0\
    \ + 1 }\n    return a.filter { $0 % 3 == 0 }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp55peknbe/tmp55peknbe.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab143402c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1430f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1430f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1430f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp55peknbe                        0x000055f886430575 <unavailable> + 5493

    5    libc.so.6                          0x00002ab1435ee460 __libc_start_main +
    245

    6    tmp55peknbe                        0x000055f886430229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n  var a = Array<Int>()\n  for i in 1..n {\n    for j in 1..n {\n \
    \     for k in 1..n {\n        if i == j && j == k && i == k && i % 3 == 0 &&\
    \ a[i] < a[j] && a[j] < a[k] {\n          a.append(i)\n        }\n      }\n  \
    \  }\n  }\n  return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpuvz4_iw7.swift:14:13: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n  for i in 1..n {\n            ^~\n            ...\n/tmp/tmpuvz4_iw7.swift:15:15:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n    for j in\
    \ 1..n {\n              ^~\n              ...\n/tmp/tmpuvz4_iw7.swift:16:17: error:\
    \ cannot find operator '..' in scope; did you mean '...'?\n      for k in 1..n\
    \ {\n                ^~\n                ...\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // Your code here\n    \n    var triples : [(Int, Int, Int)] =\
    \ []\n    for i in 0..<n {\n        let x = i * i\n        let y = x * i - i +\
    \ 1\n        \n        if y % 3 != 0 {\n            continue\n        }\n    \
    \    \n        var triple = (i, x, y)\n        triples.append(triple)\n    }\n\
    \    \n    \n    return triples.count\n    \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpwdku43zw/tmpwdku43zw.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad37aa4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad37a746b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad37a746988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad37a7457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwdku43zw                        0x00005602cc25c455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad37ac3b460 __libc_start_main +
    245

    6    tmpwdku43zw                        0x00005602cc25c109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return get_max_triples_aux(n, n, n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpibth0i1k.swift:13:12: error: cannot find 'get_max_triples_aux'\
    \ in scope\n    return get_max_triples_aux(n, n, n)\n           ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var num = a[n-1] * a[n-1] + a[n-1]\n    for i in 1...n {\n   \
    \     for j in i...n {\n            num ^= (a[i] * a[j]) + a[j] * a[k]\n     \
    \   }\n    }\n    if num % 3 == 0 {\n        return 1\n    }\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp0zm7umjl.swift:13:15: error: cannot find 'a' in scope\n    var\
    \ num = a[n-1] * a[n-1] + a[n-1]\n              ^\n/tmp/tmp0zm7umjl.swift:13:24:\
    \ error: cannot find 'a' in scope\n    var num = a[n-1] * a[n-1] + a[n-1]\n  \
    \                     ^\n/tmp/tmp0zm7umjl.swift:13:33: error: cannot find 'a'\
    \ in scope\n    var num = a[n-1] * a[n-1] + a[n-1]\n                         \
    \       ^\n/tmp/tmp0zm7umjl.swift:16:21: error: cannot find 'a' in scope\n   \
    \         num ^= (a[i] * a[j]) + a[j] * a[k]\n                    ^\n/tmp/tmp0zm7umjl.swift:16:28:\
    \ error: cannot find 'a' in scope\n            num ^= (a[i] * a[j]) + a[j] * a[k]\n\
    \                           ^\n/tmp/tmp0zm7umjl.swift:16:36: error: cannot find\
    \ 'a' in scope\n            num ^= (a[i] * a[j]) + a[j] * a[k]\n             \
    \                      ^\n/tmp/tmp0zm7umjl.swift:16:43: error: cannot find 'a'\
    \ in scope\n            num ^= (a[i] * a[j]) + a[j] * a[k]\n                 \
    \                         ^\n/tmp/tmp0zm7umjl.swift:16:45: error: cannot find\
    \ 'k' in scope\n            num ^= (a[i] * a[j]) + a[j] * a[k]\n             \
    \                               ^\n"
  stdout: ''
  timestamp: 1660009421
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return n == 3\n        ? 1\n        : ((n - 1) * (n - 1) * (n\
    \ - 1) + n) / 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpu4u9wgg9/tmpu4u9wgg9.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bdffc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bdfcb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bdfcb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bdfcb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4u9wgg9                        0x000055c72958a245 <unavailable> + 4677

    5    libc.so.6                          0x00002b0be01ad460 __libc_start_main +
    245

    6    tmpu4u9wgg9                        0x000055c729589ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var counter: Int = 0\n    var array = [Int]()\n    var a = Array<Int>()\n\
    \    for i in 1 ..< n {\n        array.append(i)\n    }\n    for i in 0 ..< array.count\
    \ {\n        a = [Int](array)\n        for j in 0 ..< a.count {\n            for\
    \ k in 0 ..< a.count {\n                if i + j + k == 3 && a[j] > 0 && a[k]\
    \ > 0 && j > 0 && k > 0 {\n                    counter++\n                }\n\
    \            }\n        }\n    }\n    return counter\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpw00n67mu.swift:24:28: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                    counter++\n                      \
    \     ^~\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\n\tcount := 0\n\tlet a = (1...n).map(|x|\
    \ x * x - x + 1).take(n)\n\tfor i in 0..<n-2 {\n\t\tfor j in (i + 1..n).reversed()\
    \ {\n\t\t\tfor k in (j + 1..n).reversed() {\n\t\t\t\tif a[i + j + k] == 3 {\n\t\
    \t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl36rbqmd.swift:17:7: error: consecutive statements on a line must\
    \ be separated by ';'\n        count := 0\n             ^\n             ;\n/tmp/tmpl36rbqmd.swift:17:8:\
    \ error: expected expression\n        count := 0\n              ^\n/tmp/tmpl36rbqmd.swift:18:26:\
    \ error: expected ',' separator\n        let a = (1...n).map(|x| x * x - x + 1).take(n)\n\
    \                                ^\n                               ,\n/tmp/tmpl36rbqmd.swift:17:2:\
    \ error: cannot find 'count' in scope\n        count := 0\n        ^~~~~\n/tmp/tmpl36rbqmd.swift:18:22:\
    \ error: '|' is not a prefix unary operator\n        let a = (1...n).map(|x| x\
    \ * x - x + 1).take(n)\n                            ^\n/tmp/tmpl36rbqmd.swift:18:24:\
    \ error: '|' is not a postfix unary operator\n        let a = (1...n).map(|x|\
    \ x * x - x + 1).take(n)\n                              ^\n/tmp/tmpl36rbqmd.swift:18:23:\
    \ error: cannot find 'x' in scope\n        let a = (1...n).map(|x| x * x - x +\
    \ 1).take(n)\n                             ^\n/tmp/tmpl36rbqmd.swift:18:26: error:\
    \ cannot find 'x' in scope\n        let a = (1...n).map(|x| x * x - x + 1).take(n)\n\
    \                                ^\n/tmp/tmpl36rbqmd.swift:18:30: error: cannot\
    \ find 'x' in scope\n        let a = (1...n).map(|x| x * x - x + 1).take(n)\n\
    \                                    ^\n/tmp/tmpl36rbqmd.swift:18:34: error: cannot\
    \ find 'x' in scope\n        let a = (1...n).map(|x| x * x - x + 1).take(n)\n\
    \                                        ^\n/tmp/tmpl36rbqmd.swift:18:18: error:\
    \ no exact matches in call to instance method 'map'\n        let a = (1...n).map(|x|\
    \ x * x - x + 1).take(n)\n                        ^\n/tmp/tmpl36rbqmd.swift:18:18:\
    \ note: found candidate with type '((ClosedRange<Int>.Element) throws -> _) throws\
    \ -> Array<_>' (aka '((Int) throws -> _) throws -> Array<_>')\n        let a =\
    \ (1...n).map(|x| x * x - x + 1).take(n)\n                        ^\n/tmp/tmpl36rbqmd.swift:18:41:\
    \ error: value of type 'Array<_>' has no member 'take'\n        let a = (1...n).map(|x|\
    \ x * x - x + 1).take(n)\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660009407
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var sum = 0\n    for i in 1..<n {\n        for j in 0..<i {\n\
    \            for k in 0..<j {\n                if i != k {\n                 \
    \   sum += i * i * i - j * j + k\n                }\n            }\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpzkqqc90h/tmpzkqqc90h.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc575c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc572beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc572be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc572bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzkqqc90h                        0x0000560739726335 <unavailable> + 4917

    5    libc.so.6                          0x00002adc577b3460 __libc_start_main +
    245

    6    tmpzkqqc90h                        0x0000560739725fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\treturn get_max_triples_recur(n, n, n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpy0fw4jv4.swift:13:9: error: cannot find 'get_max_triples_recur'\
    \ in scope\n        return get_max_triples_recur(n, n, n)\n               ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n  \
    \      for j in 0...i {\n            for k in 0...j {\n                a[i] =\
    \ i*i - i + 1\n                if a[i] % 3 == 0 && a[j] + a[k] == 3 {\n      \
    \              result++\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_bsrv5ce.swift:20:27: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                    result++\n                       \
    \   ^~\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(n)\n    var count = 0\n    for i in 0 ..< n {\n\
    \        for j in 0 ..< i {\n            for k in 0 ..< j {\n                if\
    \ (a[i] == a[j] + a[k] && i != j && j != k) {\n                    count++\n \
    \                   break\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_qwrcmm6.swift:13:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array(n)\n                  ^\n                  arrayLiteral:\
    \ \n/tmp/tmp_qwrcmm6.swift:19:26: error: cannot find operator '++' in scope; did\
    \ you mean '+= 1'?\n                    count++\n                         ^~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\treturn Solution().max_triples(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpzjc5kv91.swift:13:9: error: cannot find 'Solution' in scope\n \
    \       return Solution().max_triples(n)\n               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var triple_number = 0\n    var i = 0\n    var j = 0\n    var k\
    \ = 0\n    var temp = 0\n    var current_triple_number = 0\n    var triple_array_with_3\
    \ = 0\n    for _ in 0..<n {\n        i += 1\n        j += 1\n        k += 1\n\
    \        if i == n {\n            i = 0\n        }\n        if j == n {\n    \
    \        j = 0\n        }\n        if k == n {\n            k = 0\n        }\n\
    \        temp = i * i - i + 1 // i - (i + 1) * (i + 1) + 1\n        if temp %\
    \ 3 == 0 {\n            current_triple_number += 1\n        }\n        if current_triple_number\
    \ == triple_array_with_3 {\n            triple_number += 1\n            current_triple_number\
    \ = 0\n        }\n        if temp % 3 != 0 {\n            triple_array_with_3\
    \ += 1\n        }\n    }\n    return triple_number\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpz7vdz0kd/tmpz7vdz0kd.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae369c92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae369989b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae369989988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3699887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz7vdz0kd                        0x00005650bdb3c335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae369e7e460 __libc_start_main +
    245

    6    tmpz7vdz0kd                        0x00005650bdb3bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar result = 0\n\tvar a = [Int](count: n, repeatedValue: 0)\n\t\n\
    \tfor i in 1..<n {\n\t\ta[i] = i * i - i + 1\n\t}\n\t\n\tfor i in 1..<n {\n\t\t\
    for j in i+1..<n {\n\t\t\tif a[i] - a[j] * 3 == 0 && a[j] > 0 {\n\t\t\t\tresult\
    \ = result + 1\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpnkm718sh.swift:14:10: error: no exact matches in call to initializer\
    \ \n        var a = [Int](count: n, repeatedValue: 0)\n                ^\n/tmp/tmpnkm718sh.swift:14:10:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n        var a = [Int](count: n, repeatedValue: 0)\n                ^\n\
    /tmp/tmpnkm718sh.swift:14:10: note: candidate has partially matching parameter\
    \ list (repeating: Int, count: Int)\n        var a = [Int](count: n, repeatedValue:\
    \ 0)\n                ^\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a.append(i * i - i\
    \ + 1)\n    }\n    \n    var count = 0\n    \n    for i in 1...n {\n        for\
    \ j in (i + 1)...n {\n            for k in (j + 1)...n {\n                if i\
    \ + j + k == a[i] && a[i] + a[j] + a[k] % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    \n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b016bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b013b3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8b013b3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8b013b313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8b013b2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7l7w4s8                        0x000055ed573fdc15 <unavailable> + 7189

    6    tmpm7l7w4s8                        0x000055ed573fd488 <unavailable> + 5256

    7    libc.so.6                          0x00002b8b018a8460 __libc_start_main +
    245

    8    tmpm7l7w4s8                        0x000055ed573fd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\t\n\tvar triple_count = 0\n\tvar triples = [Int]()\n\t\n\tvar a:\
    \ Array<Int> = [Int]()\n\t\n\tfor i in 1...n {\n\t\ta.append(i * i - i + 1)\n\t\
    }\n\t\n\tfor var i = 0; i < a.count - 1; i++ {\n\t\tvar max_triple = 0\n\t\tfor\
    \ var j = i + 1; j < a.count; j++ {\n\t\t\tvar current_triple = i * i - j + 1\n\
    \t\t\tif current_triple > max_triple {\n\t\t\t\tmax_triple = current_triple\n\t\
    \t\t}\n\t\t}\n\t\tif max_triple % 3 == 0 {\n\t\t\ttriple_count += 1\n\t\t\ttriples.append(i)\n\
    \t\t\ttriples.append(j)\n\t\t\ttriples.append(max_triple)\n\t\t}\n\t}\n\t\n\t\
    return triple_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpz_v9_0zx.swift:23:2: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 0; i < a.count - 1; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpz_v9_0zx.swift:25:3: error: C-style for statement has been removed in\
    \ Swift 3\n                for var j = i + 1; j < a.count; j++ {\n           \
    \     ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(n) {0}\n    var i = 0\n    for _ in 0..<n {\n  \
    \      a[i] = i * i - i + 1\n        i += 1\n    }\n    var j = 0\n    var k =\
    \ n - 1\n    while i < j {\n        var x = a[i] + a[j] + a[k]\n        if ((i\
    \ % 3 != 0) || (x != 0)) {\n            i += 1\n        } else {\n           \
    \ j -= 1\n        }\n        if ((j != k) && (x % 3 != 0)) {\n            k +=\
    \ 1\n        } else {\n            i += 1\n        }\n    }\n    return i\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpk9yr7nzn.swift:13:18: error: missing argument label 'unsafeUninitializedCapacity:'\
    \ in call\n    var a = Array(n) {0}\n                 ^\n                  unsafeUninitializedCapacity:\
    \ \n/tmp/tmpk9yr7nzn.swift:13:22: error: contextual type for closure argument\
    \ list expects 2 arguments, which cannot be implicitly ignored\n    var a = Array(n)\
    \ {0}\n                     ^\n                      buffer,initializedCount in\
    \ \n/tmp/tmpk9yr7nzn.swift:13:13: error: generic parameter 'Element' could not\
    \ be inferred\n    var a = Array(n) {0}\n            ^\n/tmp/tmpk9yr7nzn.swift:13:13:\
    \ note: explicitly specify the generic arguments to fix this issue\n    var a\
    \ = Array(n) {0}\n            ^\n                 <Any>\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // write your code here\n    \n    let a = [0]\n    \n    for\
    \ _ in 1...n {\n        a.append(0)\n    }\n    \n    for i in 1...n-1 {\n   \
    \     a[i] += 2 * i - 1\n        for j in (i+1)...n {\n            a[j] += 2 *\
    \ j - 1\n            for k in (i+j)...n {\n                a[k] += 2 * k - 1\n\
    \                if a[k] > 3 * a[i] - a[j] + a[k] {\n                    return\
    \ 0\n                } else {\n                    return 1\n                }\n\
    \            }\n        }\n    }\n    \n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpsk1so0vl.swift:18:11: error: cannot use mutating member on immutable\
    \ value: 'a' is a 'let' constant\n        a.append(0)\n        ~ ^\n/tmp/tmpsk1so0vl.swift:15:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let a = [0]\n    ^~~\n \
    \   var\n/tmp/tmpsk1so0vl.swift:22:14: error: left side of mutating operator isn't\
    \ mutable: 'a' is a 'let' constant\n        a[i] += 2 * i - 1\n        ~    ^\n\
    /tmp/tmpsk1so0vl.swift:15:5: note: change 'let' to 'var' to make it mutable\n\
    \    let a = [0]\n    ^~~\n    var\n/tmp/tmpsk1so0vl.swift:24:18: error: left\
    \ side of mutating operator isn't mutable: 'a' is a 'let' constant\n         \
    \   a[j] += 2 * j - 1\n            ~    ^\n/tmp/tmpsk1so0vl.swift:15:5: note:\
    \ change 'let' to 'var' to make it mutable\n    let a = [0]\n    ^~~\n    var\n\
    /tmp/tmpsk1so0vl.swift:26:22: error: left side of mutating operator isn't mutable:\
    \ 'a' is a 'let' constant\n                a[k] += 2 * k - 1\n               \
    \ ~    ^\n/tmp/tmpsk1so0vl.swift:15:5: note: change 'let' to 'var' to make it\
    \ mutable\n    let a = [0]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let a = Array(stride(from: 0, to: n, by: 1).map({ $0 * $0 - $0\
    \ + 1 }))\n    return a.filter({ $0 + $0 + $0 == 3*$0 }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpdm8sx6zo/tmpdm8sx6zo.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca863bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca8332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca8332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca83317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdm8sx6zo                        0x00005619d3b9b535 <unavailable> + 5429

    5    libc.so.6                          0x00002b9ca8827460 __libc_start_main +
    245

    6    tmpdm8sx6zo                        0x00005619d3b9b1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var res = 1\n    for i in 1..n-1 {\n        for j in i+1..n-1\
    \ {\n            for k in j+1..n-1 {\n                if ((i+j+k)%3 == 0) res++\n\
    \            }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpahz5hn9e.swift:17:37: error: expected '{' after 'if' condition\n\
    \                if ((i+j+k)%3 == 0) res++\n                                 \
    \   ^\n/tmp/tmpahz5hn9e.swift:14:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..n-1 {\n              ^~\n             \
    \ ...\n/tmp/tmpahz5hn9e.swift:15:21: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in i+1..n-1 {\n                    ^~\n \
    \                   ...\n/tmp/tmpahz5hn9e.swift:16:25: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in j+1..n-1 {\n      \
    \                  ^~\n                        ...\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let mut a: Vec<Int> = vec![Int::MIN]\n    for i in 0..n {\n  \
    \      a[i] = i * i - i + 1\n    }\n    let mut triplet = 0\n    for i in 1..n\
    \ {\n        for j in (i + 1)..n {\n            if a[i] < a[j] {\n           \
    \     let k = (i * i * i) + a[j] - a[i]\n                if k > triplet {\n  \
    \                  triplet = k\n                }\n            }\n        }\n\
    \    }\n    return triplet\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpi4uhdaek.swift:13:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut a: Vec<Int>\
    \ = vec![Int::MIN]\n            ^\n/tmp/tmpi4uhdaek.swift:13:13: note: join the\
    \ identifiers together\n    let mut a: Vec<Int> = vec![Int::MIN]\n        ~~~~^\n\
    \        muta\n/tmp/tmpi4uhdaek.swift:13:13: note: join the identifiers together\
    \ with camel-case\n    let mut a: Vec<Int> = vec![Int::MIN]\n        ~~~~^\n \
    \       mutA\n/tmp/tmpi4uhdaek.swift:13:36: error: expected expression in list\
    \ of expressions\n    let mut a: Vec<Int> = vec![Int::MIN]\n                 \
    \                  ^\n/tmp/tmpi4uhdaek.swift:17:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut triplet = 0\n            ^\n/tmp/tmpi4uhdaek.swift:17:13: note: join\
    \ the identifiers together\n    let mut triplet = 0\n        ~~~~^~~~~~~\n   \
    \     muttriplet\n/tmp/tmpi4uhdaek.swift:17:13: note: join the identifiers together\
    \ with camel-case\n    let mut triplet = 0\n        ~~~~^~~~~~~\n        mutTriplet\n\
    /tmp/tmpi4uhdaek.swift:13:16: error: cannot find type 'Vec' in scope\n    let\
    \ mut a: Vec<Int> = vec![Int::MIN]\n               ^~~\n/tmp/tmpi4uhdaek.swift:14:15:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n    for i in\
    \ 0..n {\n              ^~\n              ...\n/tmp/tmpi4uhdaek.swift:18:15: error:\
    \ cannot find operator '..' in scope; did you mean '...'?\n    for i in 1..n {\n\
    \              ^~\n              ...\n/tmp/tmpi4uhdaek.swift:28:12: error: cannot\
    \ find 'triplet' in scope\n    return triplet\n           ^~~~~~~\n/tmp/tmpi4uhdaek.swift:19:25:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n        for\
    \ j in (i + 1)..n {\n                        ^~\n                        ...\n\
    /tmp/tmpi4uhdaek.swift:21:39: error: cannot find 'a' in scope\n              \
    \  let k = (i * i * i) + a[j] - a[i]\n                                      ^\n\
    /tmp/tmpi4uhdaek.swift:21:46: error: cannot find 'a' in scope\n              \
    \  let k = (i * i * i) + a[j] - a[i]\n      "
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return 0\n    }\n    var result : Int = 0\n\
    \    var a : [Int] = Array(0..<n)\n    for i in 0..<n {\n        a[i] = i*i -\
    \ i + 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            for\
    \ k in 0..<n {\n                if i == j && j == k {\n                    continue\n\
    \                }\n                \n                let sum = i * i + j * j\
    \ + k * k\n                \n                if sum == 3 {\n                 \
    \   result++\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmppm9j_cxy.swift:31:27: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                    result++\n                       \
    \   ^~\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return count_tripler_triples(get_tripler_array(n))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpxbegblml.swift:13:12: error: cannot find 'count_tripler_triples'\
    \ in scope\n    return count_tripler_triples(get_tripler_array(n))\n         \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxbegblml.swift:13:34: error: cannot find 'get_tripler_array'\
    \ in scope\n    return count_tripler_triples(get_tripler_array(n))\n         \
    \                        ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return n * n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp2lr8igy7/tmp2lr8igy7.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6db90f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6db8de9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6db8de9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6db8de87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2lr8igy7                        0x000055c985e7b245 <unavailable> + 4677

    5    libc.so.6                          0x00002b6db92de460 __libc_start_main +
    245

    6    tmp2lr8igy7                        0x000055c985e7aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\treturn get_max_triples(n: n, a: IntArray(n))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpsfai4txp.swift:13:34: error: cannot find 'IntArray' in scope\n\
    \        return get_max_triples(n: n, a: IntArray(n))\n                      \
    \                  ^~~~~~~~\n/tmp/tmpsfai4txp.swift:13:34: error: extra argument\
    \ 'a' in call\n        return get_max_triples(n: n, a: IntArray(n))\n        \
    \                      ~~~~~~~~~~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    \n    for i in 1...n {\n        for j in 1...n\
    \ {\n            if i != j && i != n {\n                for k in 1...n {\n   \
    \                 if j != k {\n                        if i * i - j + k == 3 {\n\
    \                            result = result + 1\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpi087knej/tmpi087knej.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6075a66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b607575db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b607575d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b607575c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi087knej                        0x000055e6a5389335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6075c52460 __libc_start_main +
    245

    6    tmpi087knej                        0x000055e6a5388fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: Array<Int> = Array<Int>()\n    for i in 1...n {\n     \
    \   a.append(i*(i-1)*(i-1)+1)\n    }\n    return a.count{($0, $1, $2) in a}.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpbqctpqak.swift:17:21: error: expected parameter name followed by\
    \ ':'\n    return a.count{($0, $1, $2) in a}.count\n                    ^\n/tmp/tmpbqctpqak.swift:17:25:\
    \ error: expected parameter name followed by ':'\n    return a.count{($0, $1,\
    \ $2) in a}.count\n                        ^\n/tmp/tmpbqctpqak.swift:17:29: error:\
    \ expected parameter name followed by ':'\n    return a.count{($0, $1, $2) in\
    \ a}.count\n                            ^\n/tmp/tmpbqctpqak.swift:17:14: error:\
    \ cannot call value of non-function type 'Int'\n    return a.count{($0, $1, $2)\
    \ in a}.count\n             ^\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\treturn (Array(n)).reduce(0) { acc, item in\n\t\tacc *= item\n\t\t\
    acc += item + 1\n\t\tacc += item + 2\n\t\treturn acc\n\t}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp5ln504wh.swift:13:16: error: missing argument label 'arrayLiteral:'\
    \ in call\n        return (Array(n)).reduce(0) { acc, item in\n              \
    \        ^\n                      arrayLiteral: \n/tmp/tmp5ln504wh.swift:14:7:\
    \ error: left side of mutating operator isn't mutable: 'acc' is a 'let' constant\n\
    \                acc *= item\n                ~~~ ^\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar a = Array(n).fill(0)\n\tfor i in 0 ..< n {\n\t\ta[i] = i * i\
    \ - i + 1\n\t}\n\t\n\tfor i in 0 ..< n {\n\t\tfor j in 0 ..< n {\n\t\t\tfor k\
    \ in 0 ..< n {\n\t\t\t\tif i+j+k == a[i] && a[j]+k == a[j] && a[i]+k == a[k] {\n\
    \t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpwybg5xxn.swift:13:16: error: missing argument label 'arrayLiteral:'\
    \ in call\n        var a = Array(n).fill(0)\n                      ^\n       \
    \               arrayLiteral: \n/tmp/tmpwybg5xxn.swift:13:19: error: value of\
    \ type '[Int]' has no member 'fill'\n        var a = Array(n).fill(0)\n      \
    \          ~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 2 {\n        return 0\n    }\n\n    var result = 0\n  \
    \  for i in 0..<n {\n        for j in (i + 1)..<n {\n            for k in (i +\
    \ 1)..<n {\n                if i != j && i != k {\n                    if a[i]\
    \ == a[j] + a[k] {\n                        result = result + 1\n            \
    \        }\n                }\n            }\n        }\n    }\n\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpv8hil0bb.swift:22:24: error: cannot find 'a' in scope\n       \
    \             if a[i] == a[j] + a[k] {\n                       ^\n/tmp/tmpv8hil0bb.swift:22:32:\
    \ error: cannot find 'a' in scope\n                    if a[i] == a[j] + a[k]\
    \ {\n                               ^\n/tmp/tmpv8hil0bb.swift:22:39: error: cannot\
    \ find 'a' in scope\n                    if a[i] == a[j] + a[k] {\n          \
    \                            ^\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int](n + 1)\n    \n    var max_count = 0\n    \n    var\
    \ max_triple: Int?\n    \n    for var i = 0; i < a.count - 1; i++ {\n        for\
    \ var j = i + 1; j < a.count; j++ {\n            for var k = j + 1; k < a.count;\
    \ k++ {\n                let product = a[i] * a[j] * a[k]\n                if\
    \ product % 3 == 0 {\n                    if max_count < product {\n         \
    \               max_count = product\n                        max_triple = [i,\
    \ j, k]\n                    }\n                }\n            }\n        }\n\
    \    }\n    \n    return max_triple?.0 ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp850mlsx4.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < a.count - 1; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp850mlsx4.swift:20:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for var j = i + 1; j < a.count; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp850mlsx4.swift:21:13: error: C-style for statement has been removed in\
    \ Swift 3\n            for var k = j + 1; k < a.count; k++ {\n            ^  \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp850mlsx4.swift:13:19: error: missing\
    \ argument label 'arrayLiteral:' in call\n    var a = [Int](n + 1)\n         \
    \         ^\n                  arrayLiteral: \n/tmp/tmp850mlsx4.swift:33:24: error:\
    \ value of type 'Int' has no member '0'\n    return max_triple?.0 ?? 0\n     \
    \      ~~~~~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var ans = Int()\n    for i in 1...n {\n        for j in (i+1)...n\
    \ {\n            for k in (i+1)...n {\n                ans = max(ans, i*i*i -\
    \ j*j + k*k - i*i*i) // k*(k+1)/2\n            }\n        }\n    }\n    return\
    \ ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b236f37bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b236f072561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b236f072286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b236f07213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b236f071bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpmnrs583a                        0x000055b3c5c4c7b3 <unavailable> + 6067

    6    tmpmnrs583a                        0x000055b3c5c4c358 <unavailable> + 4952

    7    libc.so.6                          0x00002b236f567460 __libc_start_main +
    245

    8    tmpmnrs583a                        0x000055b3c5c4c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660009407
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    precondition(n >= 1, \"n must be positive\")\n    var a: [Int]\
    \ = []\n    var triples = 0\n    var temp: Int = 0\n    for i in 1...n {\n   \
    \     if a[i] == a[i-1] + a[i-2] {\n            triples += 1\n        }\n    }\n\
    \    if triples == 0 {\n        return 0\n    }\n    for i in 1...triples {\n\
    \        for j in 1...triples {\n            temp = temp + (i * j * j)\n     \
    \   }\n    }\n    if temp % 3 == 0 {\n        return triples / 3\n    } else {\n\
    \        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab06609fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab065d96561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab065d96286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab065d9613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab065d95bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab065b95e83 <unavailable> + 188035

    6    tmppvu6_4j4                        0x0000562616df6915 <unavailable> + 6421

    7    tmppvu6_4j4                        0x0000562616df6468 <unavailable> + 5224

    8    libc.so.6                          0x00002ab06628b460 __libc_start_main +
    245

    9    tmppvu6_4j4                        0x0000562616df6189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\n    let result\
    \ = 0\n    var count = 0\n    var a = [Int](count: n, repeatedValue: 0)\n\n  \
    \  for _ in 1...n {\n        a[count] = count\n        count += 1\n    }\n   \
    \ \n    for a in 0...count-1 {\n        var b = a\n        for b in a...count-1\
    \ {\n            var c = a\n            for c in a...count-1 {\n             \
    \   var d = a\n                for d in a...count-1 {\n                    var\
    \ e = (a+b+c)\n                    if e % 3 == 0 {\n                        count\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpsh9u7cgk.swift:19:13: error: no exact matches in call to initializer\
    \ \n    var a = [Int](count: n, repeatedValue: 0)\n            ^\n/tmp/tmpsh9u7cgk.swift:19:13:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var a = [Int](count: n, repeatedValue: 0)\n            ^\n/tmp/tmpsh9u7cgk.swift:19:13:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var a = [Int](count: n, repeatedValue: 0)\n            ^\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a : [Int] = []\n    var sum : Int = 0\n    for i in 1...n\
    \ {\n        sum += i * i - i + 1\n        a.append(sum)\n    }\n    \n    var\
    \ triplet : Int = 0\n    \n    for i in 1...n {\n        for j in 1...n {\n  \
    \          for k in 1...n {\n                triplet += a[k] - a[j] - a[i]\n \
    \           }\n        }\n    }\n    return triplet.toInt()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpvdntv8yl.swift:29:20: error: value of type 'Int' has no member\
    \ 'toInt'\n    return triplet.toInt()\n           ~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let mut a = Array(0..<n).map { Int(arc4random()) }\n    a.sort()\n\
    \    \n    let mut i = -1\n    for j in 0..<n {\n        for k in 0..<j {\n  \
    \          if k != i {\n                if a[k] > a[j] + a[i] {\n            \
    \        i = k\n                }\n            }\n        }\n    }\n    return\
    \ i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) == 1)\n\
    assert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n:\
    \ 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp5_764ith.swift:13:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut a = Array(0..<n).map\
    \ { Int(arc4random()) }\n            ^\n/tmp/tmp5_764ith.swift:13:13: note: join\
    \ the identifiers together\n    let mut a = Array(0..<n).map { Int(arc4random())\
    \ }\n        ~~~~^\n        muta\n/tmp/tmp5_764ith.swift:13:13: note: join the\
    \ identifiers together with camel-case\n    let mut a = Array(0..<n).map { Int(arc4random())\
    \ }\n        ~~~~^\n        mutA\n/tmp/tmp5_764ith.swift:16:13: error: found an\
    \ unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n    let mut i = -1\n            ^\n/tmp/tmp5_764ith.swift:16:13: note:\
    \ join the identifiers together\n    let mut i = -1\n        ~~~~^\n        muti\n\
    /tmp/tmp5_764ith.swift:16:13: note: join the identifiers together with camel-case\n\
    \    let mut i = -1\n        ~~~~^\n        mutI\n/tmp/tmp5_764ith.swift:13:40:\
    \ error: cannot find 'arc4random' in scope\n    let mut a = Array(0..<n).map {\
    \ Int(arc4random()) }\n                                       ^~~~~~~~~~\n/tmp/tmp5_764ith.swift:14:5:\
    \ error: cannot find 'a' in scope\n    a.sort()\n    ^\n/tmp/tmp5_764ith.swift:19:21:\
    \ error: cannot find 'i' in scope\n            if k != i {\n                 \
    \   ^\n/tmp/tmp5_764ith.swift:20:20: error: cannot find 'a' in scope\n       \
    \         if a[k] > a[j] + a[i] {\n                   ^\n/tmp/tmp5_764ith.swift:20:27:\
    \ error: cannot find 'a' in scope\n                if a[k] > a[j] + a[i] {\n \
    \                         ^\n/tmp/tmp5_764ith.swift:20:34: error: cannot find\
    \ 'a' in scope\n                if a[k] > a[j] + a[i] {\n                    \
    \             ^\n/tmp/tmp5_764ith.swift:20:36: error: cannot find 'i' in scope\n\
    \                if a[k] > a[j] + a[i] {\n                                   ^\n\
    /tmp/tmp5_764ith.swift:21:21: error: cannot find 'i' in scope\n              \
    \      i = k\n                    ^\n/tmp/tmp5_764ith.swift:26:12: error: cannot\
    \ find 'i' in scope\n    return i\n           ^\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var maxSum = 0\n    var i = 2\n    var sum = 0\n    while i <=\
    \ n {\n        sum += i\n        if sum > maxSum {\n            maxSum = sum\n\
    \        }\n        i += 1\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpqsfbpipv/tmpqsfbpipv.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb9c23ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb9bf31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb9bf31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb9bf307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsfbpipv                        0x00005596874da1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002adb9c426460 __libc_start_main +
    245

    6    tmpqsfbpipv                        0x00005596874d9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * i - i\
    \ + 1\n    }\n    var count = 0\n    for i in 0 ..< n {\n        for j in 0 ..<\
    \ n {\n            for k in 0 ..< n {\n                let k = k + j\n       \
    \         if a[i] != a[j] || a[i] != a[k] || a[j] != a[k] {\n                \
    \    continue\n                }\n                if a[i] - a[j] - a[k] == 0 {\n\
    \                    count = count + 1\n                }\n            }\n   \
    \     }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aae07488c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae0717f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aae0717f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aae0717f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aae0717ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aae06f7ee83 <unavailable> + 188035

    6    tmpwv48jyeo                        0x000056297754a97c <unavailable> + 6524

    7    tmpwv48jyeo                        0x000056297754a578 <unavailable> + 5496

    8    libc.so.6                          0x00002aae07674460 __libc_start_main +
    245

    9    tmpwv48jyeo                        0x000056297754a299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    var a = [Int](n)\n    for i in 1..<n {\n \
    \       a[i] = i * i - i + 1\n    }\n    for i in 1..<n {\n        for j in 1..<n\
    \ {\n            for k in 1..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = Int(a[i]) + Int(a[j]) + Int(a[k])\n     \
    \               if sum % 3 == 0 {\n                        result = result + 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpgcco3wvn.swift:14:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = [Int](n)\n                  ^\n                  arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(i*i -\
    \ i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpd1pzr4x1.swift:15:18: error: cannot find 'i' in scope\n       \
    \ a.append(i*i - i + 1)\n                 ^\n/tmp/tmpd1pzr4x1.swift:15:20: error:\
    \ cannot find 'i' in scope\n        a.append(i*i - i + 1)\n                  \
    \ ^\n/tmp/tmpd1pzr4x1.swift:15:24: error: cannot find 'i' in scope\n        a.append(i*i\
    \ - i + 1)\n                       ^\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp4bcx155d/tmp4bcx155d.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8a495c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef8a18cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef8a18c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef8a18b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4bcx155d                        0x0000556042ad4230 <unavailable> + 4656

    5    libc.so.6                          0x00002aef8a681460 __libc_start_main +
    245

    6    tmp4bcx155d                        0x0000556042ad3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    \n    let arr = Array<Int>(repeating: 0, count: n)\n    for i\
    \ in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n       \
    \         if i <= j && i <= k && j <= k && i != j {\n                    arr[i]\
    \ += arr[j] + arr[k]\n                }\n            }\n        }\n    }\n   \
    \ \n    return arr.max()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp4zdykdsk.swift:19:28: error: left side of mutating operator isn't\
    \ mutable: 'arr' is a 'let' constant\n                    arr[i] += arr[j] + arr[k]\n\
    \                    ~~~    ^\n/tmp/tmp4zdykdsk.swift:14:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let arr = Array<Int>(repeating: 0, count: n)\n\
    \    ^~~\n    var\n/tmp/tmp4zdykdsk.swift:25:16: error: value of optional type\
    \ 'Int?' must be unwrapped to a value of type 'Int'\n    return arr.max()\n  \
    \             ^\n/tmp/tmp4zdykdsk.swift:25:16: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    return arr.max()\n   \
    \            ^\n                     ?? <#default value#>\n/tmp/tmp4zdykdsk.swift:25:16:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return arr.max()\n               ^\n                    !\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar a = [0]\n\tfor i := 1; i <= n; i++ {\n\t\ta[i] = i * i - i +\
    \ 1\n\t}\n\tfor i := 1; i <= n; i++ {\n\t\tfor j := i + 1; j <= n; j++ {\n\t\t\
    \tfor k := j + 1; k <= n; k++ {\n\t\t\t\tif a[i] < a[j] || a[i] < a[k] || a[j]\
    \ < a[k] {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif a[i] += a[j] += a[k] < 3\
    \ {\n\t\t\t\t\treturn i\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpsp1y_719.swift:14:9: error: expected type\n        for i := 1;\
    \ i <= n; i++ {\n               ^\n                <#type#>\n/tmp/tmpsp1y_719.swift:14:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 1; i <= n; i++\
    \ {\n               ^\n/tmp/tmpsp1y_719.swift:14:9: error: expected Sequence expression\
    \ for for-each loop\n        for i := 1; i <= n; i++ {\n               ^\n/tmp/tmpsp1y_719.swift:17:9:\
    \ error: expected type\n        for i := 1; i <= n; i++ {\n               ^\n\
    \                <#type#>\n/tmp/tmpsp1y_719.swift:17:9: error: expected 'in' after\
    \ for-each pattern\n        for i := 1; i <= n; i++ {\n               ^\n/tmp/tmpsp1y_719.swift:17:9:\
    \ error: expected Sequence expression for for-each loop\n        for i := 1; i\
    \ <= n; i++ {\n               ^\n/tmp/tmpsp1y_719.swift:18:10: error: expected\
    \ type\n                for j := i + 1; j <= n; j++ {\n                      \
    \ ^\n                        <#type#>\n/tmp/tmpsp1y_719.swift:18:10: error: expected\
    \ 'in' after for-each pattern\n                for j := i + 1; j <= n; j++ {\n\
    \                       ^\n/tmp/tmpsp1y_719.swift:18:10: error: expected Sequence\
    \ expression for for-each loop\n                for j := i + 1; j <= n; j++ {\n\
    \                       ^\n/tmp/tmpsp1y_719.swift:19:11: error: expected type\n\
    \                        for k := j + 1; k <= n; k++ {\n                     \
    \          ^\n                                <#type#>\n/tmp/tmpsp1y_719.swift:19:11:\
    \ error: expected 'in' after for-each pattern\n                        for k :=\
    \ j + 1; k <= n; k++ {\n                               ^\n/tmp/tmpsp1y_719.swift:19:11:\
    \ error: expected Sequence expression for for-each loop\n                    \
    \    for k := j + 1; k <= n; k++ {\n                               ^\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar sum: Int = 0\n\t\n\tfor i in 1..n {\n\t\tsum += (i) * (i - 1)\
    \ + (i + 1)\n\t}\n\t\n\treturn sum % 3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpyr_wiyb3.swift:15:12: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for i in 1..n {\n                  ^~\n       \
    \           ...\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n  var a = [0]\n  var count = 0\n\n  for (i in 1...n) {\n    if a[i]\
    \ == 0 { \n      count = 1 + count\n      continue\n    }\n    if a[i] == 1 {\n\
    \      count = 1 + count\n      continue\n    }\n\n    for (i in 2...n) {\n  \
    \    if a[i] > 1 && a[i] == 3 && a[i - 1] + a[i - 2] + a[i - 3] == a[i] {\n  \
    \      count = 1 + count\n        break\n      }\n    }\n\n    a[i] = count\n\
    \    count = 1\n  }\n\n  return a[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpse8rvv_7.swift:16:10: error: expected ',' separator\n  for (i in\
    \ 1...n) {\n         ^\n        ,\n/tmp/tmpse8rvv_7.swift:16:10: error: expected\
    \ pattern\n  for (i in 1...n) {\n         ^\n/tmp/tmpse8rvv_7.swift:16:20: error:\
    \ expected 'in' after for-each pattern\n  for (i in 1...n) {\n               \
    \    ^\n/tmp/tmpse8rvv_7.swift:16:20: error: expected Sequence expression for\
    \ for-each loop\n  for (i in 1...n) {\n                   ^\n/tmp/tmpse8rvv_7.swift:26:12:\
    \ error: expected ',' separator\n    for (i in 2...n) {\n           ^\n      \
    \    ,\n/tmp/tmpse8rvv_7.swift:26:12: error: expected pattern\n    for (i in 2...n)\
    \ {\n           ^\n/tmp/tmpse8rvv_7.swift:26:22: error: expected 'in' after for-each\
    \ pattern\n    for (i in 2...n) {\n                     ^\n/tmp/tmpse8rvv_7.swift:26:22:\
    \ error: expected Sequence expression for for-each loop\n    for (i in 2...n)\
    \ {\n                     ^\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: inout [Int] = [0]\n    for i in 1...n {\n        for j\
    \ in (i+1)...n {\n            if a[i*i-1] + a[j*i] == 0 {\n                a[i*i-1]\
    \ = i + 1\n                a[j*i] = i + 1\n            }\n        }\n    }\n \
    \   var triples = 0\n    for i in 0..n {\n        for j in (i+1)..n {\n      \
    \      for k in (i+1)..n {\n                if a[i*i-1] == a[j*i] && a[j*i] ==\
    \ a[k*i] {\n                    if a[k*i] % 3 == 0 {\n                       \
    \ triples += 3\n                    }\n                }\n            }\n    \
    \    }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp57dinlin.swift:13:12: error: 'inout' may only be used on parameters\n\
    \    var a: inout [Int] = [0]\n           ^\n/tmp/tmp57dinlin.swift:23:15: error:\
    \ cannot find operator '..' in scope; did you mean '...'?\n    for i in 0..n {\n\
    \              ^~\n              ...\n/tmp/tmp57dinlin.swift:24:23: error: cannot\
    \ find operator '..' in scope; did you mean '...'?\n        for j in (i+1)..n\
    \ {\n                      ^~\n                      ...\n/tmp/tmp57dinlin.swift:25:27:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n           \
    \ for k in (i+1)..n {\n                          ^~\n                        \
    \  ...\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let array = [Int]()\n    for _ in 0..<n {\n        array.append(Int(arc4random_uniform(100))\
    \ + 1)\n    }\n    let mut res = array[0]\n    for i in 1..<array.count {\n  \
    \      let curr = array[i]\n        for j in i..<array.count {\n            let\
    \ next = array[j]\n            guard curr + next > res else {\n              \
    \  res = curr + next\n                break\n            }\n        }\n    }\n\
    \    return res == array[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp2a4_fa0_.swift:17:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut res = array[0]\n\
    \            ^\n/tmp/tmp2a4_fa0_.swift:17:13: note: join the identifiers together\n\
    \    let mut res = array[0]\n        ~~~~^~~\n        mutres\n/tmp/tmp2a4_fa0_.swift:17:13:\
    \ note: join the identifiers together with camel-case\n    let mut res = array[0]\n\
    \        ~~~~^~~\n        mutRes\n/tmp/tmp2a4_fa0_.swift:15:26: error: cannot\
    \ find 'arc4random_uniform' in scope\n        array.append(Int(arc4random_uniform(100))\
    \ + 1)\n                         ^~~~~~~~~~~~~~~~~~\n/tmp/tmp2a4_fa0_.swift:15:15:\
    \ error: no exact matches in call to instance method 'append'\n        array.append(Int(arc4random_uniform(100))\
    \ + 1)\n              ^\n/tmp/tmp2a4_fa0_.swift:15:15: note: found candidate with\
    \ type '(__owned Int) -> ()'\n        array.append(Int(arc4random_uniform(100))\
    \ + 1)\n              ^\n/tmp/tmp2a4_fa0_.swift:22:33: error: cannot find 'res'\
    \ in scope\n            guard curr + next > res else {\n                     \
    \           ^~~\n/tmp/tmp2a4_fa0_.swift:23:17: error: cannot find 'res' in scope\n\
    \                res = curr + next\n                ^~~\n/tmp/tmp2a4_fa0_.swift:28:12:\
    \ error: cannot find 'res' in scope\n    return res == array[0]\n           ^~~\n\
    /tmp/tmp2a4_fa0_.swift:28:16: error: cannot convert return expression of type\
    \ 'Bool' to return type 'Int'\n    return res == array[0]\n           ~~~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for _ in 0..<n {\n        a.append(0)\n\
    \    }\n    var sum = 0\n    for i in 0..<n {\n        for j in 0..<n {\n    \
    \        for k in 0..<n {\n                sum += a[i] + a[j] + a[k]\n       \
    \         if sum == 3*(i*(i+1)) + 3*(j*j+k*k) {\n                    a[i] += 1\n\
    \                    a[j] += 1\n                    a[k] += 1\n              \
    \      sum = 0\n                    break\n                }\n            }\n\
    \        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp531mpy_w/tmp531mpy_w.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b761e1bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b761deb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b761deb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b761deb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp531mpy_w                        0x000055a083f8c555 <unavailable> + 5461

    5    libc.so.6                          0x00002b761e3ab460 __libc_start_main +
    245

    6    tmp531mpy_w                        0x000055a083f8c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 1 {\n        return 0\n    }\n\n    // initialize a zero\
    \ array with a capacity of n\n    var a = Array<Int>(n + 1)\n\n    // initialize\
    \ all values of a to 1\n    for index in 0...n {\n        a[index] = 1\n    }\n\
    \n    // start from i = 2 and increase by 1 until the index equals n\n    // loop\
    \ will run exactly n - 1 times\n    for i = 2; i < n; i++ {\n        // loop will\
    \ run exactly n - 1 times\n        for j = i; j > 0; j-- {\n            // loop\
    \ will run exactly n - 1 times\n            for k = j; k < i; k++ {\n        \
    \        if a[i] + a[j] + a[k] == 3 {\n                    return 1\n        \
    \        } else {\n                    return 0\n                }\n         \
    \   }\n        }\n    }\n\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmptw025we1.swift:27:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmptw025we1.swift:29:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for j = i;\
    \ j > 0; j-- {\n        ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmptw025we1.swift:31:13: error:\
    \ C-style for statement has been removed in Swift 3\n            for k = j; k\
    \ < i; k++ {\n            ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmptw025we1.swift:18:24:\
    \ error: missing argument label 'arrayLiteral:' in call\n    var a = Array<Int>(n\
    \ + 1)\n                       ^\n                       arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let result = (1...n).map{_ in (2 * $0 - 1) + 1}.filter{x in x%3\
    \ != 0}\n    return result.reduce(0){($0 + 1)*($0+1) + $1}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpe74s9r8m.swift:13:40: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments\n    let result = (1...n).map{_\
    \ in (2 * $0 - 1) + 1}.filter{x in x%3 != 0}\n                               \
    \        ^\n"
  stdout: ''
  timestamp: 1660009413
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\t/*\n\t1. Find the max and min value in arr. \n\t2. Set i = max and\
    \ j = min.\n\t3. Repeat while i < j\n\t3. For each i, a[i] = a[i] + a[j] - i;\
    \ i = i + 1\n\t4. Set i = i - 1 and j = j + 1\n\t5. Repeat while i < j\n\t*/\n\
    \t\n\tfor i in 0..<n {\n\t\tif arr[i] < arr[i+1] {\n\t\t\ti += 1\n\t\t} else {\n\
    \t\t\tj -= 1\n\t\t}\n\t}\n\t\n\t/*\n\ta[i] = a[i] + a[j] - i; i = i + 1\n\ti =\
    \ i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\t\
    i = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\
    \ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j +\
    \ 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j =\
    \ j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and\
    \ j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1\
    \ and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i\
    \ - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\t\
    i = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\
    \ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j +\
    \ 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j =\
    \ j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and\
    \ j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1\
    \ and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i\
    \ - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\t\
    i = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\
    \ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j + 1\n\ti = i - 1 and j = j +\
    \ 1\n\ti = i - 1 and \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp0s4ww_1l.swift:100:41: error: unterminated '/*' comment\nassert(get_max_triples(n:\
    \ 100) == 53361)\n                                        ^\n                \
    \                        */\n/tmp/tmp0s4ww_1l.swift:30:2: note: comment started\
    \ here\n        /*\n        ^\n/tmp/tmp0s4ww_1l.swift:100:41: error: expected\
    \ '}' at end of brace statement\nassert(get_max_triples(n: 100) == 53361)\n  \
    \                                      ^\n/tmp/tmp0s4ww_1l.swift:12:37: note:\
    \ to match this opening '{'\nfunc get_max_triples(n: Int) -> Int {\n         \
    \                           ^\n/tmp/tmp0s4ww_1l.swift:23:6: error: cannot find\
    \ 'arr' in scope\n                if arr[i] < arr[i+1] {\n                   ^~~\n\
    /tmp/tmp0s4ww_1l.swift:23:15: error: cannot find 'arr' in scope\n            \
    \    if arr[i] < arr[i+1] {\n                            ^~~\n/tmp/tmp0s4ww_1l.swift:24:6:\
    \ error: left side of mutating operator isn't mutable: 'i' is a 'let' constant\n\
    \                        i += 1\n                        ~ ^\n/tmp/tmp0s4ww_1l.swift:26:4:\
    \ error: cannot find 'j' in scope\n                        j -= 1\n          \
    \              ^\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    let arr = Array<Int>(n\
    \ + 1)\n    var count = 0\n    for _ in 0..<n {\n        arr[n - 1] = 0\n    \
    \    arr[n - 1] += n - 1\n        arr[n - 1] += 1\n        count = max(count,\
    \ arr[n])\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmphc_ukqq2.swift:16:26: error: missing argument label 'arrayLiteral:'\
    \ in call\n    let arr = Array<Int>(n + 1)\n                         ^\n     \
    \                    arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\treturn min_sum_problem(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqi755iif.swift:13:9: error: cannot find 'min_sum_problem' in scope\n\
    \        return min_sum_problem(n)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // write your code here\n    var a: [Int] = [0] * n\n    \n  \
    \  var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ for k in 0..<n {\n                if i >= 0 && j >= 0 && k >= 0 {\n        \
    \            let sum = i * i - i + j + k\n                    if sum % 3 == 0\
    \ {\n                        a[(i+1)%3] = 1\n                        a[j%3] =\
    \ 1\n                        a[k%3] = 1\n                        count++\n   \
    \                 }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpdv9s4of8.swift:14:24: error: cannot convert value of type 'Int'\
    \ to specified type '[Int]'\n    var a: [Int] = [0] * n\n                   ~~~~^~~\n\
    /tmp/tmpdv9s4of8.swift:14:20: error: cannot convert value of type '[Int]' to expected\
    \ argument type 'Int'\n    var a: [Int] = [0] * n\n                   ^\n/tmp/tmpdv9s4of8.swift:26:30:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \              count++\n                             ^~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // code here\n    \n    var count = 0\n    var j = 0\n    var\
    \ k = 0\n    var a = [Int](n)\n    var sum = 0\n    var triple: [Int] = []\n \
    \   \n    for index in 1...n {\n        a[index] = index * index - index + 1\n\
    \        sum += a[index]\n    }\n    \n    for index in 0...n {\n        triple[0]\
    \ = a[index] // j\n        if j == n-1 {\n            j += 1\n            triple[1]\
    \ = a[j] // k\n            if k == n-1 {\n                k += 1\n           \
    \ } else {\n                k = k + 1\n            }\n        }\n        if j\
    \ == k {\n            triple[2] = a[k] // a[j] to a[i]\n            if triple[0]*triple[0]\
    \ + triple[1]*triple[1]+triple[2]*triple[2] < sum {\n                count +=\
    \ 1\n            }\n        }\n        j+=1\n        k+=1\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpsyt48fr6.swift:18:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = [Int](n)\n                  ^\n                  arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // TODO: return your solution here.\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpwx9wsyoc/tmpwx9wsyoc.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87c16cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87c13c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87c13c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87c13c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwx9wsyoc                        0x00005625785341b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b87c18ba460 __libc_start_main +
    245

    6    tmpwx9wsyoc                        0x0000562578533e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return Int(get_triples(n).count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp4xidslbp.swift:13:16: error: cannot find 'get_triples' in scope\n\
    \    return Int(get_triples(n).count)\n               ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\treturn get_sum_triples(n, n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmphsxjoaas.swift:13:9: error: cannot find 'get_sum_triples' in scope\n\
    \        return get_sum_triples(n, n)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar a = Array(n * 3)\n\tfor i := 1; i <= n; i++ {\n\t\tjMax := 0\n\
    \t\tfor j := 1; j <= n; j++ {\n\t\t\tif j > i {\n\t\t\t\tfor k := 1; k <= n; k++\
    \ {\n\t\t\t\t\tif i+j+k < n {\n\t\t\t\t\t\ta[i + j*n + k] = a[i] + a[j] + a[k]\n\
    \t\t\t\t\t\tif a[i + j*n + k] % 3 == 0 {\n\t\t\t\t\t\t\tjMax = j\n\t\t\t\t\t\t\
    }\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ta[i*n - 1] =\
    \ a[i*n - 1] + jMax + 1\n\t\tif a[i*n - 1] % 3 == 0 {\n\t\t\treturn i\n\t\t}\n\
    \t}\n\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmplgz7ox27.swift:14:9: error: expected type\n        for i := 1;\
    \ i <= n; i++ {\n               ^\n                <#type#>\n/tmp/tmplgz7ox27.swift:14:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 1; i <= n; i++\
    \ {\n               ^\n/tmp/tmplgz7ox27.swift:14:9: error: expected Sequence expression\
    \ for for-each loop\n        for i := 1; i <= n; i++ {\n               ^\n/tmp/tmplgz7ox27.swift:15:7:\
    \ error: consecutive statements on a line must be separated by ';'\n         \
    \       jMax := 0\n                    ^\n                    ;\n/tmp/tmplgz7ox27.swift:15:8:\
    \ error: expected expression\n                jMax := 0\n                    \
    \ ^\n/tmp/tmplgz7ox27.swift:16:10: error: expected type\n                for j\
    \ := 1; j <= n; j++ {\n                       ^\n                        <#type#>\n\
    /tmp/tmplgz7ox27.swift:16:10: error: expected 'in' after for-each pattern\n  \
    \              for j := 1; j <= n; j++ {\n                       ^\n/tmp/tmplgz7ox27.swift:16:10:\
    \ error: expected Sequence expression for for-each loop\n                for j\
    \ := 1; j <= n; j++ {\n                       ^\n/tmp/tmplgz7ox27.swift:18:12:\
    \ error: expected type\n                                for k := 1; k <= n; k++\
    \ {\n                                       ^\n                              \
    \          <#type#>\n/tmp/tmplgz7ox27.swift:18:12: error: expected 'in' after\
    \ for-each pattern\n                                for k := 1; k <= n; k++ {\n\
    \                                       ^\n/tmp/tmplgz7ox27.swift:18:12: error:\
    \ expected Sequence expression for for-each loop\n                           \
    \     for k := 1; k <= n; k++ {\n                                       ^\n/tmp/tmplgz7ox27.swift:13:16:\
    \ error: missing argument label 'arrayLiteral:' in call\n        var a = Array(n\
    \ * 3)\n                      ^\n                      arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    \n    guard n != 0 else { return 0 }\n    \n    let a = Array(0..<n).map\
    \ { _ in n * n - n + 1 }\n    \n    for i in 0..<a.count {\n        for j in i..<a.count\
    \ {\n            for k in j..<a.count {\n                if a[i] + a[j] + a[k]\
    \ % 3 == 0 {\n                    return 1\n                }\n            }\n\
    \        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpx1e_80su/tmpx1e_80su.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a1ce6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a1cb63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a1cb63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a1cb627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx1e_80su                        0x00005570ced075c5 <unavailable> + 5573

    5    libc.so.6                          0x00002b6a1d058460 __libc_start_main +
    245

    6    tmpx1e_80su                        0x00005570ced07279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var triples = 0\n    var max = 0\n    for i = 1 ..< n {\n    \
    \    for j = i ..< n {\n            for k = j ..< n {\n                if i*i\
    \ + j*j + k*k == 3 {\n                    triples += 1\n                }\n  \
    \              if k > max {\n                    max = k\n                }\n\
    \            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmplrwnk_z4.swift:15:11: error: expected 'in' after for-each pattern\n\
    \    for i = 1 ..< n {\n          ^\n/tmp/tmplrwnk_z4.swift:15:11: error: expected\
    \ Sequence expression for for-each loop\n    for i = 1 ..< n {\n          ^\n\
    /tmp/tmplrwnk_z4.swift:16:15: error: expected 'in' after for-each pattern\n  \
    \      for j = i ..< n {\n              ^\n/tmp/tmplrwnk_z4.swift:16:15: error:\
    \ expected Sequence expression for for-each loop\n        for j = i ..< n {\n\
    \              ^\n/tmp/tmplrwnk_z4.swift:17:19: error: expected 'in' after for-each\
    \ pattern\n            for k = j ..< n {\n                  ^\n/tmp/tmplrwnk_z4.swift:17:19:\
    \ error: expected Sequence expression for for-each loop\n            for k = j\
    \ ..< n {\n                  ^\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    var max = Int(pow(3, Double(n))) + 1\n    for\
    \ i : Int in 1..n+1 {\n        for j : Int in 0..n+1 {\n            if i == j\
    \ { continue}\n            if i == j+1 || i == j-2 { continue }\n            if\
    \ a[i] > max { max = a[i] }\n            for k : Int in 0..n+1 {\n           \
    \     if i == k || i == j || i == k+1 || i == k-2 { continue }\n             \
    \   if a[j] > max { max = a[j] }\n                if a[k] > max { max = a[k] }\n\
    \                if a[i] + a[j] + a[k] == max && i <= j+1 && j <= k+1 && k <=\
    \ n+1 {\n                    count += 1\n                }\n            }\n  \
    \      }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp5gtlqqt6.swift:14:19: error: cannot find 'pow' in scope\n    var\
    \ max = Int(pow(3, Double(n))) + 1\n                  ^~~\n/tmp/tmp5gtlqqt6.swift:15:21:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n    for i :\
    \ Int in 1..n+1 {\n                    ^~\n                    ...\n/tmp/tmp5gtlqqt6.swift:16:25:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n        for\
    \ j : Int in 0..n+1 {\n                        ^~\n                        ...\n\
    /tmp/tmp5gtlqqt6.swift:20:29: error: cannot find operator '..' in scope; did you\
    \ mean '...'?\n            for k : Int in 0..n+1 {\n                         \
    \   ^~\n                            ...\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    let max = (n - 1) * 3\n    for i in\
    \ 0..<n {\n        a[i] = i * i - i + 1\n    }\n    return a.filter{ $0 % 3 ==\
    \ 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmphegv4_go/tmphegv4_go.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba640ad5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6407ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6407cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6407cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphegv4_go                        0x00005593a90566b0 <unavailable> + 5808

    5    libc.so.6                          0x00002ba640cc1460 __libc_start_main +
    245

    6    tmphegv4_go                        0x00005593a90562e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\t\n\tguard n > 0 else { return 0 }\n\n\treturn get_max_triple_with_lower_bound(n,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) == 1)\n\
    assert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n:\
    \ 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpujje9lsr.swift:16:9: error: cannot find 'get_max_triple_with_lower_bound'\
    \ in scope\n        return get_max_triple_with_lower_bound(n, 0)\n           \
    \    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return 0\n    }\n    var a = Array<Int>(n\
    \ + 1)\n    for i : Int in 1...n {\n        a[i] = i * i - i + 1\n    }\n    let\
    \ maxCount = 3\n    var count = 0\n    for i : Int in 1...n {\n        if i !=\
    \ i {\n            count += 1\n            if count == maxCount {\n          \
    \      return count\n            }\n        }\n        if a[i] < 0 {\n       \
    \     return 0\n        }\n        for j : Int in i + 1...n {\n            if\
    \ i != j {\n                count += 1\n                if count == maxCount {\n\
    \                    return count\n                }\n            }\n        \
    \    for k : Int in j + 1...n {\n                if i != j && i != k {\n     \
    \               count += 1\n                    if count == maxCount {\n     \
    \                   return count\n                    }\n                }\n \
    \           }\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpx_omlsqt.swift:16:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n + 1)\n                       ^\n         \
    \              arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    precondition(n >= 1)\n    var a = make(Array, n)\n    for i :=\
    \ 1; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    \n    var triples\
    \ = 0\n    \n    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n\
    \            for k := 0; k < j; k++ {\n                if a[i] < a[j] && a[i]\
    \ < a[k] && a[j] < a[k] {\n                    triples++\n                }\n\
    \            }\n        }\n    }\n    \n    return triples\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpucxik5e3.swift:15:12: error: expected type\n    for i := 1; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpucxik5e3.swift:15:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < n; i++ {\n\
    \           ^\n/tmp/tmpucxik5e3.swift:15:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < n; i++ {\n           ^\n/tmp/tmpucxik5e3.swift:21:12:\
    \ error: expected type\n    for i := 1; i < n; i++ {\n           ^\n         \
    \   <#type#>\n/tmp/tmpucxik5e3.swift:21:12: error: expected 'in' after for-each\
    \ pattern\n    for i := 1; i < n; i++ {\n           ^\n/tmp/tmpucxik5e3.swift:21:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 1; i < n;\
    \ i++ {\n           ^\n/tmp/tmpucxik5e3.swift:22:16: error: expected type\n  \
    \      for j := 1; j < i; j++ {\n               ^\n                <#type#>\n\
    /tmp/tmpucxik5e3.swift:22:16: error: expected 'in' after for-each pattern\n  \
    \      for j := 1; j < i; j++ {\n               ^\n/tmp/tmpucxik5e3.swift:22:16:\
    \ error: expected Sequence expression for for-each loop\n        for j := 1; j\
    \ < i; j++ {\n               ^\n/tmp/tmpucxik5e3.swift:23:20: error: expected\
    \ type\n            for k := 0; k < j; k++ {\n                   ^\n         \
    \           <#type#>\n/tmp/tmpucxik5e3.swift:23:20: error: expected 'in' after\
    \ for-each pattern\n            for k := 0; k < j; k++ {\n                   ^\n\
    /tmp/tmpucxik5e3.swift:23:20: error: expected Sequence expression for for-each\
    \ loop\n            for k := 0; k < j; k++ {\n                   ^\n/tmp/tmpucxik5e3.swift:14:13:\
    \ error: cannot find 'make' in scope\n    var a = make(Array, n)\n           \
    \ ^~~~\n/tmp/tmpucxik5e3.swift:14:18: error: generic parameter 'Element' could\
    \ not be inferred\n    var a = make(Array, n)\n                 ^\n/tmp/tmpucxik5e3.swift:14:18:\
    \ note: explicitly specify the generic arguments to fix this issue\n    var a\
    \ = make(Array, n)\n                 ^\n                      <Any>\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array[Int](n)\n    for i in 0..<n {\n        a[i] = i*i-i+1\n\
    \    }\n    for k in 0..<n {\n        for j in 0..<k {\n            if j < k &&\
    \ i*a[j] + a[j]*a[k] + a[k]*a[j] == 3 {\n                return k - j\n      \
    \      }\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp50t89xqk.swift:13:13: error: generic parameter 'Element' could\
    \ not be inferred\n    var a = Array[Int](n)\n            ^\n/tmp/tmp50t89xqk.swift:13:13:\
    \ note: explicitly specify the generic arguments to fix this issue\n    var a\
    \ = Array[Int](n)\n            ^\n                 <Any>\n/tmp/tmp50t89xqk.swift:13:13:\
    \ error: instance member 'subscript' cannot be used on type 'Array<_>'\n    var\
    \ a = Array[Int](n)\n            ^~~~~\n/tmp/tmp50t89xqk.swift:13:19: error: cannot\
    \ convert value of type 'Int.Type' to expected argument type 'Int'\n    var a\
    \ = Array[Int](n)\n                  ^\n/tmp/tmp50t89xqk.swift:19:25: error: cannot\
    \ find 'i' in scope\n            if j < k && i*a[j] + a[j]*a[k] + a[k]*a[j] ==\
    \ 3 {\n                        ^\n/tmp/tmp50t89xqk.swift:19:16: error: the compiler\
    \ is unable to type-check this expression in reasonable time; try breaking up\
    \ the expression into distinct sub-expressions\n            if j < k && i*a[j]\
    \ + a[j]*a[k] + a[k]*a[j] == 3 {\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009482
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var array = [Int]()\n    for i in 1...n {\n        array.append(i*i\
    \ - i + 1)\n    }\n    for index in 0...n-1 {\n        for j1 in index...n {\n\
    \            for j2 in j1...n {\n                for j3 in j2...n {\n        \
    \            if array[index] > array[j1] + array[j2] + array[j3] {\n         \
    \               return 0\n                    }\n                }\n         \
    \   }\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b25d7de5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25d7adc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b25d7adc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b25d7adc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b25d7adbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b25d78dbe83 <unavailable> + 188035

    6    tmpmbczj_kd                        0x000055656d796d50 <unavailable> + 7504

    7    tmpmbczj_kd                        0x000055656d7963d8 <unavailable> + 5080

    8    libc.so.6                          0x00002b25d7fd1460 __libc_start_main +
    245

    9    tmpmbczj_kd                        0x000055656d7960f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n <= 0 { return 0 }\n    \n    var a = Array(repeating: 0,\
    \ count: n)\n    for _ in 1...n {\n        a[n-1] += 1\n    }\n    var sum = 0\n\
    \    for (_, i, j) in a.enumerated() {\n        sum += i*i - i - j\n    }\n  \
    \  if sum % 3 == 0 {\n        return a.count\n    }\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpa5n4f75n.swift:20:24: error: pattern cannot match values of type\
    \ '(offset: Int, element: Int)'\n    for (_, i, j) in a.enumerated() {\n     \
    \                  ^\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var res: Int = 0\n    let a: [Int] = Array(0..<n).map({ return\
    \ i * i - i + 1 })\n    a.enumerate().forEach { (index: Int, value: Int) in\n\
    \        if index < a.count {\n            if value == a[index] + a[index] + a[index]\
    \ {\n                res += 1\n            }\n        }\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpre3ytm4o.swift:14:46: error: cannot find 'i' in scope\n    let\
    \ a: [Int] = Array(0..<n).map({ return i * i - i + 1 })\n                    \
    \                         ^\n/tmp/tmpre3ytm4o.swift:14:50: error: cannot find\
    \ 'i' in scope\n    let a: [Int] = Array(0..<n).map({ return i * i - i + 1 })\n\
    \                                                 ^\n/tmp/tmpre3ytm4o.swift:14:54:\
    \ error: cannot find 'i' in scope\n    let a: [Int] = Array(0..<n).map({ return\
    \ i * i - i + 1 })\n                                                     ^\n/tmp/tmpre3ytm4o.swift:15:7:\
    \ error: value of type '[Int]' has no member 'enumerate'\n    a.enumerate().forEach\
    \ { (index: Int, value: Int) in\n    ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n){1, 3, 7, 13, 21}\n    \n    for i in 0..<n\
    \ {\n        let j = findIndex(i: &a, j: &a, k: &a, i: &a) + 1\n        let k\
    \ = findIndex(i: &a, j: &a, k: &a, j: &a) + 1\n        if i != j {\n         \
    \   a[j] = a[i]\n        }\n        if i != k {\n            a[k] = a[i]\n   \
    \     }\n        if j != k {\n            a[j] = a[j]\n        }\n    }\n    \n\
    \    let tripleCount = a.filter{ $0%3 == 0 }.count\n    return tripleCount\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp680uubfs.swift:13:28: error: consecutive statements on a line must\
    \ be separated by ';'\n    var a = Array<Int>(n){1, 3, 7, 13, 21}\n          \
    \                 ^\n                           ;\n/tmp/tmp680uubfs.swift:13:28:\
    \ error: expected expression\n    var a = Array<Int>(n){1, 3, 7, 13, 21}\n   \
    \                        ^\n/tmp/tmp680uubfs.swift:13:23: error: missing argument\
    \ label 'unsafeUninitializedCapacity:' in call\n    var a = Array<Int>(n){1, 3,\
    \ 7, 13, 21}\n                      ^\n                       unsafeUninitializedCapacity:\
    \ \n/tmp/tmp680uubfs.swift:13:26: error: contextual type for closure argument\
    \ list expects 2 arguments, which cannot be implicitly ignored\n    var a = Array<Int>(n){1,\
    \ 3, 7, 13, 21}\n                         ^\n                          buffer,initializedCount\
    \ in \n/tmp/tmp680uubfs.swift:16:17: error: cannot find 'findIndex' in scope\n\
    \        let j = findIndex(i: &a, j: &a, k: &a, i: &a) + 1\n                ^~~~~~~~~\n\
    /tmp/tmp680uubfs.swift:17:17: error: cannot find 'findIndex' in scope\n      \
    \  let k = findIndex(i: &a, j: &a, k: &a, j: &a) + 1\n                ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = Array(n + 1)\n    \n    for i in 0..<n+1 {\n  \
    \      a[i] = i * i - i + 1\n    }\n    \n    var ans: Int = -1\n    \n    for\
    \ i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n {\n     \
    \           if i > j { continue; }\n                if j > k { continue; }\n \
    \               \n                if a[i] > a[j] {\n                    if a[i]\
    \ > a[k] {\n                        if a[j] > a[k] {\n                       \
    \     ans = max(ans, a[i] + a[j] + a[k]);\n                        }\n       \
    \                 else {\n                            ans = max(ans, a[i] + a[j]\
    \ + a[k] - 1);\n                        }\n                    }\n           \
    \         else {\n                        if a[j] > a[k] {\n                 \
    \           ans = max(ans, a[i] - a[j] + a[k]);\n                        }\n \
    \                       else {\n                            ans = max(ans, a[i]\
    \ - a[j] + a[k] - 1);\n                        }\n                    }\n    \
    \            }\n                else {\n                    if a[i] > a[k] {\n\
    \                        ans = max(ans, a[i] - a[j] + a[k]);\n               \
    \     }\n                    else {\n                        ans = max(ans, a[i]\
    \ - a[j] + a[k] - 1);\n                    }\n                }\n            }\n\
    \        }\n    }\n    \n    return ans;\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp0thfrm0k.swift:13:26: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a: [Int] = Array(n + 1)\n                         ^\n     \
    \                    arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    a.sort { $0 < $1 }\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    while i < n {\n        if a[i] < a[j] || a[i]\
    \ < a[k] || a[j] < a[k] {\n            a[i] = a[i] * a[i] - a[i] + a[j] + a[k]\n\
    \            i += 1\n            j += 1\n            k += 1\n            continue\n\
    \        }\n        if a[i] < a[j] + a[k] {\n            a[i] = a[i] * a[i] -\
    \ a[i] + a[j] + a[k]\n            i += 1\n            continue\n        }\n  \
    \      if a[j] < a[k] + a[i] {\n            a[j] += a[k]\n            k += 1\n\
    \            continue\n        }\n        if a[k] < a[j] + a[i] {\n          \
    \  a[k] += a[i]\n            i += 1\n            continue\n        }\n       \
    \ return k\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp846as76x/tmp846as76x.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54e68ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54e65f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54e65f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54e65f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp846as76x                        0x0000561a551a04a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b54e6aeb460 __libc_start_main +
    245

    6    tmp846as76x                        0x0000561a551a0159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in i...n\
    \ {\n            for k in j...n {\n                if i != j && j != k && k >\
    \ i {\n                    a[i] = i * i - i + 1\n                    \n      \
    \          }\n            }\n        }\n    }\n    return a.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f93a71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f93768561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4f93768286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4f9376813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4f93767bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4f935677ec <unavailable> + 186348

    6    tmp8ttevq69                        0x000055640d0e5ada <unavailable> + 6874

    7    tmp8ttevq69                        0x000055640d0e5418 <unavailable> + 5144

    8    libc.so.6                          0x00002b4f93c5d460 __libc_start_main +
    245

    9    tmp8ttevq69                        0x000055640d0e5139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [1]\n    for i in 1..<n {\n        for j in 1..<n {\n\
    \            for k in 1..<n {\n                if i != j && j != k && k != i &&\
    \ a[j] + a[k] + a[i] % 3 == 0 {\n                    a.append(a[j] + a[k] + a[i])\n\
    \                }\n            }\n        }\n    }\n    return a.count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b28d7e68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28d7b5f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b28d7b5f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b28d7b5f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b28d7b5ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b28d795ee83 <unavailable> + 188035

    6    tmpacuimbi9                        0x0000558c24a66b1b <unavailable> + 6939

    7    tmpacuimbi9                        0x0000558c24a664d8 <unavailable> + 5336

    8    libc.so.6                          0x00002b28d8054460 __libc_start_main +
    245

    9    tmpacuimbi9                        0x0000558c24a661f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar a : [Int] = Array(repeating: 0, count: n)\n\tfor k in 0..<n\
    \ {\n\t\ta[k] = k * k\n\t}\n\tguard a.indices.contains(0) else {\n\t\treturn 0\n\
    \t}\n\tfor i in 0..<n {\n\t\tif a[i] % 3 == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tlet\
    \ k = 0\n\t\tfor j in (i + 1)..<n {\n\t\t\tif a[j] % 3 == 0 {\n\t\t\t\tcontinue\n\
    \t\t\t}\n\t\t\tk += 1\n\t\t\tlet sum = a[i] + a[j] + a[k]\n\t\t\tif sum % 3 ==\
    \ 0 {\n\t\t\t\treturn k\n\t\t\t}\n\t\t}\n\t}\n\treturn 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpvuqy1d70.swift:29:6: error: left side of mutating operator isn't\
    \ mutable: 'k' is a 'let' constant\n                        k += 1\n         \
    \               ~ ^\n/tmp/tmpvuqy1d70.swift:24:3: note: change 'let' to 'var'\
    \ to make it mutable\n                let k = 0\n                ^~~\n       \
    \         var\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var arr = [Int]()\n    var a = 0\n    for _ in 1...n {\n     \
    \   a += 1\n        arr.append(a)\n    }\n    var result = 0\n    for i in 0 ..<\
    \ n {\n        for j in 0 ..< n {\n            for k in 0 ..< n {\n          \
    \      if i != j && i != k && j != k {\n                    if arr[i] + arr[j]\
    \ + arr[k] == (arr[i] * arr[i] + arr[j] * arr[j] + arr[k] * arr[k]) {\n      \
    \                  result = result+1\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp99yl86tp/tmp99yl86tp.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae32cda7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae32ca9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae32ca9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae32ca9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp99yl86tp                        0x000055cedd709535 <unavailable> + 5429

    5    libc.so.6                          0x00002ae32cf93460 __libc_start_main +
    245

    6    tmp99yl86tp                        0x000055cedd7091e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: Array<Int> = []\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k && (a[i]\
    \ + a[j] + a[k])%3 != 0 {\n                    a.append(i)\n                 \
    \   a.append(j)\n                    a.append(k)\n                }\n        \
    \    }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpsi8rpwxt.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k && (a[i]\
    \ + a[j] + a[k])%3 != 0 {\n                     ^   ~\n/tmp/tmpsi8rpwxt.swift:17:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k && (a[i] + a[j] + a[k])%3 != 0 {\n             \
    \        ^\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    \n    let arr = Array(1 ..< n)\n    \n    \n    var count = 0\n\
    \    for i in arr {\n        \n        for j in arr {\n            \n        \
    \    for k in arr {\n                \n                if (i != j) && (j != k)\
    \ && (i != k) {\n                    \n                    if (arr[i] + arr[j]\
    \ + arr[k] == 3 * i) {\n                        count = count + 1\n          \
    \          }\n                    \n                }\n                \n    \
    \        }\n            \n        }\n        \n    }\n    \n    return count\n\
    \    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a02696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a0238d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6a0238d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6a0238d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6a0238cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6a0218ce83 <unavailable> + 188035

    6    tmp2zbiqlsb                        0x000055e2c3af2b6f <unavailable> + 7023

    7    tmp2zbiqlsb                        0x000055e2c3af2518 <unavailable> + 5400

    8    libc.so.6                          0x00002b6a02882460 __libc_start_main +
    245

    9    tmp2zbiqlsb                        0x000055e2c3af2239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(repeating: 0, count: n)\n    \n    for i in 0..<n\
    \ {\n        if a[i] == 0 {\n            a[i] = i * i - i + 1\n        }\n   \
    \ }\n    \n    let result = a.max{ $0 + $1 + $2 }\n    \n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp9d65j2up.swift:21:23: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 3 were used in closure body\n    let\
    \ result = a.max{ $0 + $1 + $2 }\n                      ^\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for _ in 1..<n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmphbhkdmrh.swift:15:18: error: cannot find 'i' in scope\n       \
    \ a.append(i * i - i + 1)\n                 ^\n/tmp/tmphbhkdmrh.swift:15:22: error:\
    \ cannot find 'i' in scope\n        a.append(i * i - i + 1)\n                \
    \     ^\n/tmp/tmphbhkdmrh.swift:15:26: error: cannot find 'i' in scope\n     \
    \   a.append(i * i - i + 1)\n                         ^\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\t// write your code here\n\tvar a: [Int] = []\n\tfor _ in 1...n {\n\
    \t\ta.append(0)\n\t}\n\tfor i in 0..<n {\n\t\tfor j in 0..<n {\n\t\t\tfor k in\
    \ 0..<n {\n\t\t\t\tif i != j {\n\t\t\t\t\tif a[j] + a[k] > a[j] + a[i] {\n\t\t\
    \t\t\t\ta[i] = a[j] + a[k]\n\t\t\t\t\t\tj = k\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpc28nyw7o.swift:24:7: error: cannot assign to value: 'j' is a 'let'\
    \ constant\n                                                j = k\n          \
    \                                      ^\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 0..<n {\n        a[i] = i*i-i+1\n\
    \    }\n    var count = 1\n    for i in 0..<n {\n        for j in 0..<n {\n  \
    \          for k in 0..<n {\n                if i+j+k == 3 && a[i] + a[j] + a[k]\
    \ == 3 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b28c28a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28c25a0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b28c25a0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b28c25a013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b28c259fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b28c23a17ec <unavailable> + 186348

    6    tmpvh5vklzq                        0x000055d3e0cfc824 <unavailable> + 6180

    7    tmpvh5vklzq                        0x000055d3e0cfc3e8 <unavailable> + 5096

    8    libc.so.6                          0x00002b28c2a95460 __libc_start_main +
    245

    9    tmpvh5vklzq                        0x000055d3e0cfc109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\treturn get_max_triple_helper(n, (n * n - n) / 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp3qru4m7y.swift:13:9: error: cannot find 'get_max_triple_helper'\
    \ in scope\n        return get_max_triple_helper(n, (n * n - n) / 2)\n       \
    \        ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let res = [Int]()\n    res.reserveCapacity(n * n)\n    for i in\
    \ 1...n {\n        for j in 1...n {\n            if i != j && j > i {\n      \
    \          if is_multiple(n - 1, i , j, res) {\n                    return res.count\n\
    \                }\n            }\n        }\n    }\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmprt18x9r_.swift:14:9: error: cannot use mutating member on immutable\
    \ value: 'res' is a 'let' constant\n    res.reserveCapacity(n * n)\n    ~~~ ^\n\
    /tmp/tmprt18x9r_.swift:13:5: note: change 'let' to 'var' to make it mutable\n\
    \    let res = [Int]()\n    ^~~\n    var\n/tmp/tmprt18x9r_.swift:18:20: error:\
    \ cannot find 'is_multiple' in scope\n                if is_multiple(n - 1, i\
    \ , j, res) {\n                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar a : [Int] = []\n\tfor var i = 0; i < n; i++ {\n\t\ta.append(i\
    \ * i - i + 1)\n\t}\n\t\n\tvar sum : Int = 0\n\t\n\tfor i : Int in 0..<n {\n\t\
    \tfor j : Int in 0..<n {\n\t\t\tfor k : Int in 0..<n {\n\t\t\t\tif a[i] < a[j]\
    \ || a[j] < a[k] || a[i] < a[k] {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\t\n\t\
    \t\t\tsum += a[i] + a[j] + a[k]\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sum % 3\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpimzk7wpf.swift:14:2: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 0; i < n; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = Int(0)\n    for j in 0..<n {\n        for i in 0..<n\
    \ {\n            if i != j {\n                for k in 0..<n {\n             \
    \       if i != k {\n                        if j != k {\n                   \
    \         if a[i + j + k] == a[j + k + a] {\n                                result\
    \ += 3\n                            }\n                        }\n           \
    \         }\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmple_yn67g.swift:20:32: error: cannot find 'a' in scope\n       \
    \                     if a[i + j + k] == a[j + k + a] {\n                    \
    \           ^\n/tmp/tmple_yn67g.swift:20:48: error: cannot find 'a' in scope\n\
    \                            if a[i + j + k] == a[j + k + a] {\n             \
    \                                  ^\n/tmp/tmple_yn67g.swift:20:58: error: cannot\
    \ find 'a' in scope\n                            if a[i + j + k] == a[j + k +\
    \ a] {\n                                                         ^\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 0 ..< n {\n        a.append(0)\n\
    \    }\n    var sum = 0\n    var count = 0\n    var i, j: Int\n\n    for i = 0;\
    \ i < n {\n        for j = i + 1; j < n; j++ {\n            sum += a[i] + a[j]\
    \ + a[k]\n            if sum == 3 * i {\n                count += 1\n        \
    \    }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpympyud_1.swift:21:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 0; i < n {\n    ^   ~~~~~~~~~~~~\n/tmp/tmpympyud_1.swift:22:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for j = i\
    \ + 1; j < n; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\treturn get_max_triple_with_aux(n, n, 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmprhe_ig6d.swift:13:9: error: cannot find 'get_max_triple_with_aux'\
    \ in scope\n        return get_max_triple_with_aux(n, n, 0)\n               ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 0...(i-1)\
    \ {\n            for k in j...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if ((i*i*i) + 1 + (i*j) + k) % 3 == 0 {\n         \
    \               a.append(i*i*i + i*j + i*k)\n                    }\n         \
    \       }\n            }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpnxmj6x14/tmpnxmj6x14.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d2feeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d2fbe1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d2fbe1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d2fbe07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxmj6x14                        0x0000557a4d4374a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b0d300d6460 __libc_start_main +
    245

    6    tmpnxmj6x14                        0x0000557a4d437159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0] * (n+1)\n    for x in 1...n {\n        for y in 0..(n-x)\
    \ {\n            for z in 0..(x-y-1) {\n                if x+y+z == n {\n    \
    \                a[x+y+z] = 1\n                }\n            }\n        }\n \
    \   }\n    return a[n] % 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp6f332s1q.swift:13:17: error: binary operator '*' cannot be applied\
    \ to operands of type '[Int]' and 'Int'\n    var a = [0] * (n+1)\n           \
    \ ~~~ ^ ~~~~~\n/tmp/tmp6f332s1q.swift:13:17: note: overloads for '*' exist with\
    \ these partially matching parameter lists: (Int, Int)\n    var a = [0] * (n+1)\n\
    \                ^\n/tmp/tmp6f332s1q.swift:15:19: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n        for y in 0..(n-x) {\n          \
    \        ^~\n                  ...\n/tmp/tmp6f332s1q.swift:16:23: error: cannot\
    \ find operator '..' in scope; did you mean '...'?\n            for z in 0..(x-y-1)\
    \ {\n                      ^~\n                      ...\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var res = 1\n    for i in 1..n {\n        for j in i + 1..n {\n\
    \            for k in i + 1..n {\n                if i+j+k == 3 && i+k+j == 3\
    \ && i+k+i == 3 {\n                    res *= 3\n                    if res >\
    \ n {\n                        res = n\n                    }\n              \
    \  }\n            }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpsb2pg_pp.swift:14:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..n {\n              ^~\n              ...\n\
    /tmp/tmpsb2pg_pp.swift:15:23: error: cannot find operator '..' in scope; did you\
    \ mean '...'?\n        for j in i + 1..n {\n                      ^~\n       \
    \               ...\n/tmp/tmpsb2pg_pp.swift:16:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in i + 1..n {\n      \
    \                    ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: Int = 0\n    for i in 1...n {\n        a = (i * i) - i\
    \ + 1\n        if a > 0 {\n            if a%3 == 0 {\n                return Int((n\
    \ - 1) * 3)\n            }\n        }\n    }\n    return Int((n - 1) * 3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpqba52q_z/tmpqba52q_z.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2db4296c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2db3f8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2db3f8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2db3f8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqba52q_z                        0x000055e7b6e8e475 <unavailable> + 5237

    5    libc.so.6                          0x00002b2db4482460 __libc_start_main +
    245

    6    tmpqba52q_z                        0x000055e7b6e8e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let max: Int = Int.max\n    var result = 0\n    for i in 0..<n\
    \ {\n        for j in (i+1)..<n {\n            if i * i + i + 1 == j * j {\n \
    \               result++\n            }\n        }\n    }\n    if result > max\
    \ {\n        return Int.max\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqr_36dbz.swift:18:23: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                result++\n                      ^~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for index in 1...n {\n        a[index] = a[index-1]*(a[index-1]*index-a[index-1]+1)\
    \ + index-1\n        if a[index]*a[index]*a[index] % 3 != 0 { return 0 }\n   \
    \ }\n    return a.count-1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2617f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2614ea561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba2614ea286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba2614ea13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba2614e9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba2612e97ec <unavailable> + 186348

    6    tmpdd9_izz2                        0x000055f6438db9b0 <unavailable> + 6576

    7    tmpdd9_izz2                        0x000055f6438db4d8 <unavailable> + 5336

    8    libc.so.6                          0x00002ba2619df460 __libc_start_main +
    245

    9    tmpdd9_izz2                        0x000055f6438db1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [[Int]] = [[Int]](n, 0)\n    for _ in 1...n {\n       \
    \ a[a.endIndex-1].append(Int(arc4random_uniform(UInt32(n))))\n    }\n    var sum:\
    \ Int = 0\n    for i in a.indices {\n        for j in a.indices {\n          \
    \  for k in a.indices {\n                if i != j && i != k && j != k && a[i][j]\
    \ + a[j][k] > a[i][k] + a[k][j] {\n                    sum = sum + a[i][j] + a[j][k]\
    \ + a[i][k]\n                }\n            }\n        }\n    }\n    return sum\
    \ % 3 == 0 ? 1 : 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpn6k7x0pq.swift:13:22: error: no exact matches in call to initializer\
    \ \n    var a: [[Int]] = [[Int]](n, 0)\n                     ^\n/tmp/tmpn6k7x0pq.swift:13:22:\
    \ note: candidate has partially matching parameter list (repeating: [Int], count:\
    \ Int)\n    var a: [[Int]] = [[Int]](n, 0)\n                     ^\n/tmp/tmpn6k7x0pq.swift:13:22:\
    \ note: candidate has partially matching parameter list (unsafeUninitializedCapacity:\
    \ Int, initializingWith: (inout UnsafeMutableBufferPointer<[Int]>, inout Int)\
    \ throws -> Void)\n    var a: [[Int]] = [[Int]](n, 0)\n                     ^\n\
    /tmp/tmpn6k7x0pq.swift:13:22: note: candidate has partially matching parameter\
    \ list (repeating: [Int], count: Int)\n    var a: [[Int]] = [[Int]](n, 0)\n  \
    \                   ^\n/tmp/tmpn6k7x0pq.swift:15:36: error: cannot find 'arc4random_uniform'\
    \ in scope\n        a[a.endIndex-1].append(Int(arc4random_uniform(UInt32(n))))\n\
    \                                   ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar num = 0\n\tvar a = [Int](repeating: 0, count: n)\n\tfor i in\
    \ 0 ..< n {\n\t\tlet a1 = i * i - i + 1\n\t\ta[i] = a1\n\t}\n\tfor _ in 0 ..<\
    \ n {\n\t\tlet a1 = a[i] - a[i + 1] - a[i + 2]\n\t\tif a1 % 3 == 0 {\n\t\t\tnum\
    \ += 1\n\t\t}\n\t}\n\treturn num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp8fedfst_.swift:20:14: error: cannot find 'i' in scope\n       \
    \         let a1 = a[i] - a[i + 1] - a[i + 2]\n                           ^\n\
    /tmp/tmp8fedfst_.swift:20:21: error: cannot find 'i' in scope\n              \
    \  let a1 = a[i] - a[i + 1] - a[i + 2]\n                                  ^\n\
    /tmp/tmp8fedfst_.swift:20:32: error: cannot find 'i' in scope\n              \
    \  let a1 = a[i] - a[i + 1] - a[i + 2]\n                                     \
    \        ^\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return max_triples(1, n, 1, n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp8qq7y5yr.swift:13:12: error: cannot find 'max_triples' in scope\n\
    \    return max_triples(1, n, 1, n)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\t\n\tif n < 3 {\n\t\treturn 0\n\t}\n\t\n\tlet a = Array(0..<n)\n\t\
    let mut ans = n\n\t\n\tfor (a[i], a[j], a[k]) in a.enumerated() {\n\t\t\n\t\t\
    let n = a[j] + a[k]\n\t\tlet m = n + a[i]\n\n\t\tif m > 3 {\n\t\t\tans = max(n,\
    \ 0)\n\t\t} else {\n\t\t\tans = max(ans, n)\n\t\t}\n\t}\n\t\n\treturn ans\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp7blxm512.swift:19:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut ans\
    \ = n\n                ^\n/tmp/tmp7blxm512.swift:19:10: note: join the identifiers\
    \ together\n        let mut ans = n\n            ~~~~^~~\n            mutans\n\
    /tmp/tmp7blxm512.swift:19:10: note: join the identifiers together with camel-case\n\
    \        let mut ans = n\n            ~~~~^~~\n            mutAns\n/tmp/tmp7blxm512.swift:21:8:\
    \ error: expected ',' separator\n        for (a[i], a[j], a[k]) in a.enumerated()\
    \ {\n              ^\n              ,\n/tmp/tmp7blxm512.swift:21:8: error: expected\
    \ pattern\n        for (a[i], a[j], a[k]) in a.enumerated() {\n              ^\n\
    /tmp/tmp7blxm512.swift:21:30: error: pattern cannot match values of type '(offset:\
    \ Int, element: Int)'\n        for (a[i], a[j], a[k]) in a.enumerated() {\n  \
    \                                  ^\n/tmp/tmp7blxm512.swift:33:9: error: cannot\
    \ find 'ans' in scope\n        return ans\n               ^~~\n/tmp/tmp7blxm512.swift:23:13:\
    \ error: cannot find 'j' in scope\n                let n = a[j] + a[k]\n     \
    \                     ^\n/tmp/tmp7blxm512.swift:23:20: error: cannot find 'k'\
    \ in scope\n                let n = a[j] + a[k]\n                            \
    \     ^\n/tmp/tmp7blxm512.swift:24:17: error: cannot find 'i' in scope\n     \
    \           let m = n + a[i]\n                              ^\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let a = [Int]()\n    for i in 1...n {\n        let j = i * i -\
    \ i + 1\n        if j > a.last {\n            a.append(j)\n        }\n    }\n\
    \    let res = a.enumerated().filter({$0.element % 3 == 1}).count\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpz5jv2wjj.swift:16:18: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if j > a.last {\n           \
    \      ^\n/tmp/tmpz5jv2wjj.swift:16:18: note: coalesce using '??' to provide a\
    \ default when the optional value contains 'nil'\n        if j > a.last {\n  \
    \               ^\n                      ?? <#default value#>\n/tmp/tmpz5jv2wjj.swift:16:18:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if j > a.last {\n                 ^\n                     !\n\
    /tmp/tmpz5jv2wjj.swift:17:15: error: cannot use mutating member on immutable value:\
    \ 'a' is a 'let' constant\n            a.append(j)\n            ~ ^\n/tmp/tmpz5jv2wjj.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let a = [Int]()\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1..<n {\n        a[i] = i * i\
    \ - i + 1\n    }\n    var triples = Int()\n    a.forEach { triples += $0 * $0\
    \ * $0 + 1 }\n    return min(triples, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fd25fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fd22f3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3fd22f3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3fd22f313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3fd22f2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3fd20f27ec <unavailable> + 186348

    6    tmpo7jhfggy                        0x000055834f15d8c8 <unavailable> + 6344

    7    tmpo7jhfggy                        0x000055834f15d4d8 <unavailable> + 5336

    8    libc.so.6                          0x00002b3fd27e8460 __libc_start_main +
    245

    9    tmpo7jhfggy                        0x000055834f15d1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for _ in 1...n {\n        a.append(a[n-1])\n\
    \    }\n    var triples = 1\n    var a0 = a[0]\n    for i in  1...n {\n      \
    \  if a[i] == a0*a0*a0+1 {\n            triples += 1\n        }\n        a0 =\
    \ a[i]\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2460509c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2460200561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2460200286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b246020013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24601ffbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b245ffffe83 <unavailable> + 188035

    6    tmpmb_mexhw                        0x000056381f4be822 <unavailable> + 6178

    7    tmpmb_mexhw                        0x000056381f4be488 <unavailable> + 5256

    8    libc.so.6                          0x00002b24606f5460 __libc_start_main +
    245

    9    tmpmb_mexhw                        0x000056381f4be1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tif n == 0 { return 0 }\n\t\n\tlet maxTriples = [0] * (n+1)\n\t\n\
    \tvar i = 0\n\tfor _ in 0 ..< n {\n\t\tmaxTriples[i] = 0\n\t\ti += 1\n\t}\n\t\n\
    \tmaxTriples[0] = 1\n\tfor i := 1; i < n; i++ {\n\t\tmaxTriples[i] = maxTriples[i-1]\
    \ + maxTriples[i-1] - maxTriples[i-2]\n\t}\n\t\n\tvar sum = 0\n\tfor i := 0; i\
    \ < n; i++ {\n\t\tsum += maxTriples[i]\n\t}\n\treturn sum % 3\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl_v1fqjs.swift:24:9: error: expected type\n        for i := 1;\
    \ i < n; i++ {\n               ^\n                <#type#>\n/tmp/tmpl_v1fqjs.swift:24:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 1; i < n; i++\
    \ {\n               ^\n/tmp/tmpl_v1fqjs.swift:24:9: error: expected Sequence expression\
    \ for for-each loop\n        for i := 1; i < n; i++ {\n               ^\n/tmp/tmpl_v1fqjs.swift:29:9:\
    \ error: expected type\n        for i := 0; i < n; i++ {\n               ^\n \
    \               <#type#>\n/tmp/tmpl_v1fqjs.swift:29:9: error: expected 'in' after\
    \ for-each pattern\n        for i := 0; i < n; i++ {\n               ^\n/tmp/tmpl_v1fqjs.swift:29:9:\
    \ error: expected Sequence expression for for-each loop\n        for i := 0; i\
    \ < n; i++ {\n               ^\n/tmp/tmpl_v1fqjs.swift:15:23: error: binary operator\
    \ '*' cannot be applied to operands of type '[Int]' and 'Int'\n        let maxTriples\
    \ = [0] * (n+1)\n                         ~~~ ^ ~~~~~\n/tmp/tmpl_v1fqjs.swift:15:23:\
    \ note: overloads for '*' exist with these partially matching parameter lists:\
    \ (Int, Int)\n        let maxTriples = [0] * (n+1)\n                         \
    \    ^\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // Since all the numbers are negative, the maximum triple is the\
    \ biggest negative number \n    let max_triple = -Int64(n)\n\n    // Create a\
    \ triple array of a size n\n    var a = Array(0..<n)\n\n    // The sum of each\
    \ triple is 0\n    var sum = 0\n\n    // For every triple, increment sum by its\
    \ value\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in\
    \ 0..<n {\n                sum += (i*i - j*j - k*k) // 3\n            }\n    \
    \    }\n        a[i] = sum\n        sum = 0\n    }\n\n    // If sum > 0, then\
    \ there exists at least 3 elements with sum greater than 0\n    if sum > 0 {\n\
    \        return 1\n    }\n\n    // Else if no triple with sum greater than 0,\
    \ then there is no such triple\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpyxbafjou/tmpyxbafjou.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b424e62ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b424e321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b424e321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b424e3207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxbafjou                        0x000055ddf2e7e645 <unavailable> + 5701

    5    libc.so.6                          0x00002b424e816460 __libc_start_main +
    245

    6    tmpyxbafjou                        0x000055ddf2e7e2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = Int()\n    var arr = [Int]()\n    \n    for i in 1...n\
    \ {\n        arr.append(i * i - i + 1)\n    }\n    \n    for i in 0..<(n-2) {\n\
    \        var j = i+1\n        var k = n-i-1\n        \n        let count = arr[i]\
    \ + arr[j] + arr[k]\n        \n        if count == (arr[i] + arr[j] + arr[k])\
    \ {\n            count = arr[i] + arr[j] + arr[k] - count\n        }\n       \
    \ \n        if count == 0 {\n            count = 1\n        }\n        \n    \
    \    if count == 3 {\n            count += 1\n        }\n        \n        if\
    \ count > 3 {\n            count = count - 3\n        }\n        \n        arr.append(count)\n\
    \    }\n    \n    return arr.reduce(0, {$0 + $1})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpan9g2wz3.swift:27:13: error: cannot assign to value: 'count' is\
    \ a 'let' constant\n            count = arr[i] + arr[j] + arr[k] - count\n   \
    \         ^~~~~\n/tmp/tmpan9g2wz3.swift:24:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let count = arr[i] + arr[j] + arr[k]\n        ^~~\n    \
    \    var\n/tmp/tmpan9g2wz3.swift:31:13: error: cannot assign to value: 'count'\
    \ is a 'let' constant\n            count = 1\n            ^~~~~\n/tmp/tmpan9g2wz3.swift:24:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let count = arr[i] +\
    \ arr[j] + arr[k]\n        ^~~\n        var\n/tmp/tmpan9g2wz3.swift:35:19: error:\
    \ left side of mutating operator isn't mutable: 'count' is a 'let' constant\n\
    \            count += 1\n            ~~~~~ ^\n/tmp/tmpan9g2wz3.swift:24:9: note:\
    \ change 'let' to 'var' to make it mutable\n        let count = arr[i] + arr[j]\
    \ + arr[k]\n        ^~~\n        var\n/tmp/tmpan9g2wz3.swift:39:13: error: cannot\
    \ assign to value: 'count' is a 'let' constant\n            count = count - 3\n\
    \            ^~~~~\n/tmp/tmpan9g2wz3.swift:24:9: note: change 'let' to 'var' to\
    \ make it mutable\n        let count = arr[i] + arr[j] + arr[k]\n        ^~~\n\
    \        var\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n <= 0 {\n        return 0\n    }\n    var res = 1\n    for\
    \ i in 1...n {\n        for j in (i + 1)...n {\n            for k in (i + j)...n\
    \ {\n                if i != j && i != k && j != k && i * i + j * j == n * k {\n\
    \                    res += 1\n                    break\n                }\n\
    \            }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b2acbb20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2acb817561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2acb817286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2acb81713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2acb816bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp__kx6vyy                        0x000055fd35d77880 <unavailable> + 6272

    6    tmp__kx6vyy                        0x000055fd35d772c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b2acbd0c460 __libc_start_main +
    245

    8    tmp__kx6vyy                        0x000055fd35d76fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var triples = (n * n) / 2\n    for _ in 0..<n {\n        triples\
    \ += (n * n) / 2\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpv0uquggh/tmpv0uquggh.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b045887ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0458571b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0458571988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04585707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0uquggh                        0x000055de5be79335 <unavailable> + 4917

    5    libc.so.6                          0x00002b0458a66460 __libc_start_main +
    245

    6    tmpv0uquggh                        0x000055de5be78fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1..n {\n        for j in 1..i {\n  \
    \          for k in 1..j {\n                if a[i] + a[j] + a[k] == 3 {\n   \
    \                 return 1\n                }\n            }\n        }\n    \
    \    a[i] += i\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpusrz3s5t.swift:14:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..n {\n              ^~\n              ...\n\
    /tmp/tmpusrz3s5t.swift:15:19: error: cannot find operator '..' in scope; did you\
    \ mean '...'?\n        for j in 1..i {\n                  ^~\n               \
    \   ...\n/tmp/tmpusrz3s5t.swift:16:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n            for k in 1..j {\n                      ^~\n\
    \                      ...\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar a = [Int]()\n\ta.reserve(n)\n\tfor i in 1..<n {\n\t\ta.append(i\
    \ * i - i + 1)\n\t}\n\treturn a.countTriples(a: &a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpf48bkvso.swift:14:4: error: value of type '[Int]' has no member\
    \ 'reserve'\n        a.reserve(n)\n        ~ ^~~~~~~\n/tmp/tmpf48bkvso.swift:18:11:\
    \ error: value of type '[Int]' has no member 'countTriples'\n        return a.countTriples(a:\
    \ &a)\n               ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar a = [1]\n\tfor i := 1; i <= n; i++ {\n\t\ta[i] = a[i] * a[i]\
    \ - i + 1 // the a[i] will be positive and unique\n\t}\n\ti := 0\n\tvar count\
    \ = 0\n\tisTriple := true\n\tfor i < n {\n\t\tisTriple = false\n\t\tfor j := i\
    \ + 1; j < n; j++ {\n\t\t\tfor k := i + 1; k < n; k++ {\n\t\t\t\tif a[j] > a[k]\
    \ {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif a[j] + a[k] <= 3 {\n\t\t\t\t\t\
    isTriple = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif isTriple {\n\t\t\
    \t\tcount++\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\ti++\n\t}\n\treturn count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpo2z97_xg.swift:14:9: error: expected type\n        for i := 1;\
    \ i <= n; i++ {\n               ^\n                <#type#>\n/tmp/tmpo2z97_xg.swift:14:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 1; i <= n; i++\
    \ {\n               ^\n/tmp/tmpo2z97_xg.swift:14:9: error: expected Sequence expression\
    \ for for-each loop\n        for i := 1; i <= n; i++ {\n               ^\n/tmp/tmpo2z97_xg.swift:19:10:\
    \ error: consecutive statements on a line must be separated by ';'\n        isTriple\
    \ := true\n                ^\n                ;\n/tmp/tmpo2z97_xg.swift:19:11:\
    \ error: expected expression\n        isTriple := true\n                 ^\n/tmp/tmpo2z97_xg.swift:20:8:\
    \ error: expected 'in' after for-each pattern\n        for i < n {\n         \
    \     ^\n/tmp/tmpo2z97_xg.swift:20:8: error: unary operator cannot be separated\
    \ from its operand\n        for i < n {\n              ^~\n               \n/tmp/tmpo2z97_xg.swift:22:10:\
    \ error: expected type\n                for j := i + 1; j < n; j++ {\n       \
    \                ^\n                        <#type#>\n/tmp/tmpo2z97_xg.swift:22:10:\
    \ error: expected 'in' after for-each pattern\n                for j := i + 1;\
    \ j < n; j++ {\n                       ^\n/tmp/tmpo2z97_xg.swift:22:10: error:\
    \ expected Sequence expression for for-each loop\n                for j := i +\
    \ 1; j < n; j++ {\n                       ^\n/tmp/tmpo2z97_xg.swift:23:11: error:\
    \ expected type\n                        for k := i + 1; k < n; k++ {\n      \
    \                         ^\n                                <#type#>\n/tmp/tmpo2z97_xg.swift:23:11:\
    \ error: expected 'in' after for-each pattern\n                        for k :=\
    \ i + 1; k < n; k++ {\n                               ^\n/tmp/tmpo2z97_xg.swift:23:11:\
    \ error: expected Sequence expression for for-each loop\n                    \
    \    for k := i + 1; k < n; k++ {\n                               ^\n/tmp/tmpo2z97_xg.swift:19:2:\
    \ error: cannot find 'isTriple' in scope\n        isTriple := true\n        ^~~~~~~~\n\
    /tmp/tmpo2z97_xg.swift:20:8: error: '<' is not a prefix unary operator\n     \
    \   for i < "
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let m = Int(pow(Double(n), 3))\n    var i = 0\n    var j = n -\
    \ 1\n    var k = n - 1\n    var count = 0\n    \n    while j < m {\n        var\
    \ count = 0\n        while k < m && j >= i {\n            count += 3\n       \
    \     if a[i] < a[j] {\n                i = j\n            } else {\n        \
    \        j = k\n            }\n            k--\n        }\n        count += j\n\
    \        i = j\n        j--\n        count++\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpzwpbnujt.swift:13:17: error: cannot find 'pow' in scope\n    let\
    \ m = Int(pow(Double(n), 3))\n                ^~~\n/tmp/tmpzwpbnujt.swift:23:16:\
    \ error: cannot find 'a' in scope\n            if a[i] < a[j] {\n            \
    \   ^\n/tmp/tmpzwpbnujt.swift:23:23: error: cannot find 'a' in scope\n       \
    \     if a[i] < a[j] {\n                      ^\n/tmp/tmpzwpbnujt.swift:28:14:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  k--\n             ^~\n/tmp/tmpzwpbnujt.swift:32:10: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n        j--\n         ^~\n/tmp/tmpzwpbnujt.swift:33:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        count++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var max_count = 0\n    var max_triple = (-1, -1, -1)\n    for\
    \ _ in 1...n {\n        \n        \n        var triple_count = 0\n        var\
    \ a = Array<Int>(n + 1)\n        for i = 1...n {\n            a[i] = i * i - i\
    \ + 1\n            if a[i] % 3 == 0 {\n                triple_count += 1\n   \
    \         }\n        }\n        \n        if triple_count > max_count {\n    \
    \        max_count = triple_count\n            max_triple = a.indices(where: {\
    \ $0 % 3 == 0 })\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp2y_9chmd.swift:20:15: error: expected 'in' after for-each pattern\n\
    \        for i = 1...n {\n              ^\n/tmp/tmp2y_9chmd.swift:20:15: error:\
    \ expected Sequence expression for for-each loop\n        for i = 1...n {\n  \
    \            ^\n/tmp/tmp2y_9chmd.swift:19:28: error: missing argument label 'arrayLiteral:'\
    \ in call\n        var a = Array<Int>(n + 1)\n                           ^\n \
    \                          arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return Int(arc4random_uniform(UInt32(n)) / 3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpea_tefdm.swift:13:16: error: cannot find 'arc4random_uniform' in\
    \ scope\n    return Int(arc4random_uniform(UInt32(n)) / 3)\n               ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\treturn n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpabheqb1m/tmpabheqb1m.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cbbb17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cbb80eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cbb80e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cbb80d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpabheqb1m                        0x00005617ebb241b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b9cbbd03460 __libc_start_main +
    245

    6    tmpabheqb1m                        0x00005617ebb23e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    var sum = 0\n    for var i = 0; i < n; i++\
    \ {\n        sum += ((i * i) - i + 1)\n    }\n    for var i = 0; i < n; i++ {\n\
    \        for var j = i + 1; j < n; j++ {\n            for var k = j + 1; k < n;\
    \ k++ {\n                if ((i * i) + j * j + k * k == sum) {\n             \
    \       count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpxkkn2cpi.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxkkn2cpi.swift:18:5: error: C-style for statement has been removed in\
    \ Swift 3\n    for var i = 0; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxkkn2cpi.swift:19:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for var j\
    \ = i + 1; j < n; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxkkn2cpi.swift:20:13:\
    \ error: C-style for statement has been removed in Swift 3\n            for var\
    \ k = j + 1; k < n; k++ {\n            ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    \n    var a = [Int](n+1)\n\
    \    \n    a[0] = 1\n    for i in 1...n {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    var max_triples = 0\n    \n    for _ in 0...(n-2) {\n        var i\
    \ = 0\n        var j = 0\n        var k = 0\n        \n        for _ in 0...(n-2)\
    \ {\n            i = i + 1\n            j = j + 1\n            k = k + 1\n   \
    \     }\n        \n        if a[i] < a[j] < a[k] {\n            if i == j && a[i]\
    \ < a[k] {\n                max_triples = max_triples + 1\n            }\n   \
    \         if i == k && a[i] < a[j] {\n                max_triples = max_triples\
    \ + 1\n            }\n            if j == k && a[j] < a[k] {\n               \
    \ max_triples = max_triples + 1\n            }\n        }\n    }\n    \n    return\
    \ max_triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpliuguaub.swift:17:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = [Int](n+1)\n                  ^\n                  arrayLiteral:\
    \ \n/tmp/tmpliuguaub.swift:37:17: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n        if a[i] < a[j] < a[k] {\n \
    \               ^      ~\n/tmp/tmpliuguaub.swift:37:24: error: binary operator\
    \ '<' cannot be applied to operands of type 'Bool' and '()'\n        if a[i] <\
    \ a[j] < a[k] {\n           ~~~~~~~~~~~ ^ ~~~~\n/tmp/tmpliuguaub.swift:37:24:\
    \ note: overloads for '<' exist with these partially matching parameter lists:\
    \ ((), ()), (AnyIndex, AnyIndex), (Character, Character), (ContinuousClock.Instant,\
    \ ContinuousClock.Instant), (Duration, Duration), (Int, Int), (Int16, Int16),\
    \ (Int32, Int32), (Int64, Int64), (Int8, Int8), (Never, Never), (ObjectIdentifier,\
    \ ObjectIdentifier), (String, String), (String.Index, String.Index), (SuspendingClock.Instant,\
    \ SuspendingClock.Instant), (TaskPriority, TaskPriority), (UInt, UInt), (UInt16,\
    \ UInt16), (UInt32, UInt32), (UInt64, UInt64), (UInt8, UInt8), (Unicode.CanonicalCombiningClass,\
    \ Unicode.CanonicalCombiningClass), (Unicode.Scalar, Unicode.Scalar), (_ValidUTF8Buffer.Index,\
    \ _ValidUTF8Buffer.Index)\n        if a[i] < a[j] < a[k] {\n                 \
    \      ^\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    \n    var result = 0\n    var max = 0\n    for i in 1...n {\n\
    \        var j = 1\n        var k = 1\n        var k = k * i - i + 1\n       \
    \ \n        while k % 3 == 0 {\n            j = j + 1\n            k = k * j -\
    \ i + 1\n        }\n        \n        if max < k {\n            result = k\n \
    \           max = k\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp5r0sr6hr.swift:19:13: error: invalid redeclaration of 'k'\n   \
    \     var k = k * i - i + 1\n            ^\n/tmp/tmp5r0sr6hr.swift:18:13: note:\
    \ 'k' previously declared here\n        var k = 1\n            ^\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    precondition(n >= 0, \"Invalid negative n\")\n    var result =\
    \ 0\n    for i in 1..n-1 {\n        for j in (i + 1)..n-1 {\n            result\
    \ += ((3*i - 3*j) % 3) == 0\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpkebrxdt1.swift:15:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..n-1 {\n              ^~\n             \
    \ ...\n/tmp/tmpkebrxdt1.swift:16:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i + 1)..n-1 {\n                     \
    \   ^~\n                        ...\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for _ in 1...n {\n        a.removeFirst()\n\
    \    }\n    for i in 1..<n {\n        for j in i..<n {\n            for k in i..<n\
    \ {\n                if i * i - i + 1 + j * j - k == 3 {\n                   \
    \ a.append(i)\n                    a.append(j)\n                    a.append(k)\n\
    \                }\n            }\n        }\n    }\n    return a.count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:623: Fatal error: Can''t remove
    first element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b066b5c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b066b2b7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b066b2b7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b066b2b713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b066b2b6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b066b2a6ff0 RangeReplaceableCollection.removeFirst()
    + 272

    6    tmpkey0m4qn                        0x000055e981f8b998 <unavailable> + 6552

    7    tmpkey0m4qn                        0x000055e981f8b5d8 <unavailable> + 5592

    8    libc.so.6                          0x00002b066b7ac460 __libc_start_main +
    245

    9    tmpkey0m4qn                        0x000055e981f8b2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660009409
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var res = 1\n    for i in 1 ..< n {\n        for j in 1 ..< n\
    \ {\n            for k in 1 ..< n {\n                if i + j + k == 3 * i &&\
    \ j + k == i {\n                    res += 1\n                }\n            }\n\
    \        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpjnqa29qu/tmpjnqa29qu.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae48ac19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae48a910b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae48a910988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae48a90f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjnqa29qu                        0x0000561d8cfdb3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae48ae05460 __libc_start_main +
    245

    6    tmpjnqa29qu                        0x0000561d8cfdafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009409
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    switch n {\n    case 1: return 1\n    case 2: return 3\n    case\
    \ 3: return 1\n    case 4: return 2\n    case 5: return 3\n    default: return\
    \ 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpzx_ood3l/tmpzx_ood3l.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0020e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba001ddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba001ddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba001dda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzx_ood3l                        0x00005606e021e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ba0022d0460 __libc_start_main +
    245

    6    tmpzx_ood3l                        0x00005606e021de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009409
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var sum: Int = 0\n    for i in 1...n {\n        for j in i...n\
    \ {\n            sum += i * i * i + 1\n            if sum == n {\n           \
    \     return 1\n            }\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpx8nk5ziz/tmpx8nk5ziz.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba348199c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba347e90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba347e90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba347e8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8nk5ziz                        0x0000564902a57335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba348385460 __libc_start_main +
    245

    6    tmpx8nk5ziz                        0x0000564902a56fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(Int.random(in:\
    \ 1...n))\n    }\n    for a in a {\n        if a < 0 {\n            continue\n\
    \        }\n        for b in a {\n            if b < 0 {\n                continue\n\
    \            }\n            for c in a {\n                if c < 0 {\n       \
    \             continue\n                }\n                if a + b + c == n {\n\
    \                    return a.count + b.count + c.count\n                }\n \
    \           }\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmprkrxss4t.swift:21:18: error: for-in loop requires 'Int' to conform\
    \ to 'Sequence'\n        for b in a {\n                 ^\n/tmp/tmprkrxss4t.swift:25:22:\
    \ error: for-in loop requires 'Int' to conform to 'Sequence'\n            for\
    \ c in a {\n                     ^\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    \n    for i in 1...n {\n        for j in\
    \ (i + 1) ...n {\n            for k in (j + 1) ...n {\n                if ((i\
    \ + j + k) % 3 == 0) {\n                    a.append(i*j + i + j + k)\n      \
    \          }\n            }\n        }\n    }\n    \n    return a.count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpn3dif9b6.swift:16:26: error: expected '{' to start the body of\
    \ for-each loop\n        for j in (i + 1) ...n {\n                         ^\n\
    /tmp/tmpn3dif9b6.swift:17:30: error: expected '{' to start the body of for-each\
    \ loop\n            for k in (j + 1) ...n {\n                             ^\n\
    /tmp/tmpn3dif9b6.swift:16:21: error: for-in loop requires 'Int' to conform to\
    \ 'Sequence'\n        for j in (i + 1) ...n {\n                 ~~~^~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return Int(arc4random_uniform(UInt32(n * n)) + n*n*n) % n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpka5emzkf.swift:13:16: error: cannot find 'arc4random_uniform' in\
    \ scope\n    return Int(arc4random_uniform(UInt32(n * n)) + n*n*n) % n\n     \
    \          ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return count_triples(n: n, max: 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpdeojdzkf.swift:13:12: error: cannot find 'count_triples' in scope\n\
    \    return count_triples(n: n, max: 0)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return getTriples(n).count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_vfvxkaz.swift:13:12: error: cannot find 'getTriples' in scope\n\
    \    return getTriples(n).count\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // write your code in JavaScript (Node.js)\n    var a = [Int]()\n\
    \    for i : Int in 1 ..< n {\n        a[i] = i * i - i + 1\n    }\n    var res\
    \ = Int()\n    for i in 1 ..< n {\n        for j in 1 ..< n {\n            for\
    \ k in 1 ..< n {\n                var triple = 0\n                if (i < j &&\
    \ j < k && a[i] < a[j] && a[j] < a[k]) {\n                    triple = 1\n   \
    \             }\n                if (i < k && a[i] < a[k]) {\n               \
    \     triple = 1\n                }\n                if ((i < j && j < k) && (a[i]\
    \ < a[j] || a[j] < a[k])) {\n                    triple = 1\n                }\n\
    \                res += triple\n            }\n        }\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ae7a3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ae7734561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9ae7734286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9ae773413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9ae7733bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9ae75337ec <unavailable> + 186348

    6    tmpongpc3up                        0x0000560e2ab8980c <unavailable> + 6156

    7    tmpongpc3up                        0x0000560e2ab893c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b9ae7c29460 __libc_start_main +
    245

    9    tmpongpc3up                        0x0000560e2ab890e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var res = 0\n    for index in stride(from: 0, to: n, by: 1) {\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        while i < n\
    \ && j < n && k < n {\n            if index%3 != 0 {\n                break\n\
    \            }\n            var c = index%3 * index%3 * index%3\n            if\
    \ c < 3 {\n                i++\n            } else if c > 9 {\n              \
    \  k++\n            } else {\n                j++\n            }\n        }\n\
    \        if i < n && j < n && k<n {\n            res = max(res, index + i - j\
    \ - k)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp8ka14gg8.swift:24:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                i++\n                 ^~\n/tmp/tmp8ka14gg8.swift:26:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      k++\n                 ^~\n/tmp/tmp8ka14gg8.swift:28:18: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n                j++\n        \
    \         ^~\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    let sum = a.sum()\n\n    for i in 0..<n\
    \ {\n        a[i] = i * i - i + 1\n    }\n\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            for k in 0..<n {\n                if i <= j && j <=\
    \ k && k <= n {\n                    if a[i] < a[j] + a[k] {\n               \
    \         swap(&a[i], &a[j])\n                        swap(&a[i], &a[k])\n   \
    \                 }\n                }\n            }\n        }\n    }\n\n  \
    \  return a.filter({$0 == sum * sum}).count() / 3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmplswcazfy.swift:14:17: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = a.sum()\n              ~ ^~~\n/tmp/tmplswcazfy.swift:33:25:\
    \ error: binary operator '==' cannot be applied to operands of type 'Int' and\
    \ 'Duration'\n    return a.filter({$0 == sum * sum}).count() / 3\n           \
    \          ~~ ^  ~~~~~~~~~\n/tmp/tmplswcazfy.swift:33:25: note: overloads for\
    \ '==' exist with these partially matching parameter lists: (Duration, Duration),\
    \ (Int, Int)\n    return a.filter({$0 == sum * sum}).count() / 3\n           \
    \             ^\n/tmp/tmplswcazfy.swift:33:40: error: cannot call value of non-function\
    \ type 'Int'\n    return a.filter({$0 == sum * sum}).count() / 3\n           \
    \                            ^    ~~\n                                       \
    \     \n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = Array(0..<n).map { $0 * $0 - $0 + 1 }\n    var\
    \ result = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for\
    \ k in 0..<n {\n                result += (a[i] - a[j]) * (a[i] - a[j]) + (a[k]\
    \ - a[j]) * (a[k] - a[j]) + a[i] == (a[i] - a[j]) * (a[k] - a[j]) + a[j] == (a[i]\
    \ - a[j]) * (a[i] - a[k]) + a[k] == a[i] - a[j] - a[k]\n            }\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpj_lxpvp9.swift:18:96: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                result += (a[i] - a[j])\
    \ * (a[i] - a[j]) + (a[k] - a[j]) * (a[k] - a[j]) + a[i] == (a[i] - a[j]) * (a[k]\
    \ - a[j]) + a[j] == (a[i] - a[j]) * (a[i] - a[k]) + a[k] == a[i] - a[j] - a[k]\n\
    \                                                                            \
    \                   ^                                       ~~\n/tmp/tmpj_lxpvp9.swift:18:136:\
    \ error: adjacent operators are in non-associative precedence group 'ComparisonPrecedence'\n\
    \                result += (a[i] - a[j]) * (a[i] - a[j]) + (a[k] - a[j]) * (a[k]\
    \ - a[j]) + a[i] == (a[i] - a[j]) * (a[k] - a[j]) + a[j] == (a[i] - a[j]) * (a[i]\
    \ - a[k]) + a[k] == a[i] - a[j] - a[k]\n                                     \
    \                                                                            \
    \                      ^                                       ~~\n/tmp/tmpj_lxpvp9.swift:18:176:\
    \ error: binary operator '==' cannot be applied to operands of type 'Bool' and\
    \ 'Int'\n                result += (a[i] - a[j]) * (a[i] - a[j]) + (a[k] - a[j])\
    \ * (a[k] - a[j]) + a[i] == (a[i] - a[j]) * (a[k] - a[j]) + a[j] == (a[i] - a[j])\
    \ * (a[i] - a[k]) + a[k] == a[i] - a[j] - a[k]\n                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^  ~~~~~~~~~~~~~~~~~~\n/tmp/tmpj_lxpvp9.swift:18:176: note: overloads for '=='\
    \ exist with these partially matching parameter lists: (Bool, Bool), (Int, Int)\n\
    \                result += (a[i] - a[j]) * (a[i] - a[j]) + (a[k] - a[j]) * (a[k]\
    \ - a[j]) + a[i] == (a[i] - a[j]) * (a[k] - a[j]) + a[j] == (a[i] - a[j]) * (a[i]\
    \ - a[k]) + a[k] == a[i] - a[j] - a[k]\n                                     \
    \                                                                            \
    \                                                              ^\n/tmp/tmpj_lxpvp9.swift:18:136:\
    \ error: binary operator '==' cannot be applied to ope"
  stdout: ''
  timestamp: 1660009409
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 0 { return 0 }\n    var a: [Int] = []\n    for i in 0..<n\
    \ {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n    for index\
    \ in 0..<n {\n        for j in 0..<index {\n            for k in 0..<j {\n   \
    \             if a[index] > a[j] + a[k] {\n                    a[index] = a[j]\
    \ + a[k]\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmponlyyu9u/tmponlyyu9u.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc39b10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc39807b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc39807988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc398067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmponlyyu9u                        0x000055f4b8e0b4b5 <unavailable> + 5301

    5    libc.so.6                          0x00002adc39cfc460 __libc_start_main +
    245

    6    tmponlyyu9u                        0x000055f4b8e0b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009409
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var arr = [Int]()\n    \n    for i in 1...n {\n        arr.append(i*i\
    \ - i + 1)\n    }\n    \n    let sortedArr = arr.sorted(by: <)\n    \n    var\
    \ counter = 0\n    for i in sortedArr {\n        if i < sortedArr[sortedArr.count-1]\
    \ && \n           i < sortedArr[sortedArr.count-1]+sortedArr[sortedArr.count-1]\
    \ {\n            counter += 1\n        }\n    }\n    \n    return counter\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp3q_e12ex/tmp3q_e12ex.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36f7967c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36f765eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36f765e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36f765d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3q_e12ex                        0x0000563432ba36b5 <unavailable> + 5813

    5    libc.so.6                          0x00002b36f7b53460 __libc_start_main +
    245

    6    tmp3q_e12ex                        0x0000563432ba3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        for _ in 1...n\
    \ {\n            for _ in 1...n {\n                a.append(i * i - i + 1)\n \
    \           }\n        }\n    }\n    \n    return a.count{(_, _, _) in \n    \
    \    (_, _, _) in\n        (_ + _ + _) mod 3 == 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp5j32buty.swift:23:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        (_, _, _) in\n                 ^\n            \
    \     ;\n/tmp/tmp5j32buty.swift:23:19: error: expected expression\n        (_,\
    \ _, _) in\n                  ^\n/tmp/tmp5j32buty.swift:17:26: error: cannot find\
    \ 'i' in scope\n                a.append(i * i - i + 1)\n                    \
    \     ^\n/tmp/tmp5j32buty.swift:17:30: error: cannot find 'i' in scope\n     \
    \           a.append(i * i - i + 1)\n                             ^\n/tmp/tmp5j32buty.swift:17:34:\
    \ error: cannot find 'i' in scope\n                a.append(i * i - i + 1)\n \
    \                                ^\n/tmp/tmp5j32buty.swift:23:10: error: '_' can\
    \ only appear in a pattern or on the left side of an assignment\n        (_, _,\
    \ _) in\n         ^\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tlet a = Array<Int>(n)\n\tfor i in 0..<n {\n\t\ta[i] = i * i - i\
    \ + 1\n\t}\n\treturn a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpkth9sstc.swift:13:21: error: missing argument label 'arrayLiteral:'\
    \ in call\n        let a = Array<Int>(n)\n                           ^\n     \
    \                      arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        let i = Int(arc4random_uniform(UInt32(n)))\n\
    \        if !contains(&a, i) {\n            a.append(i)\n        }\n    }\n  \
    \  return count(&a, { $0 % 3 == 0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpbda3wy3j.swift:15:21: error: cannot find 'arc4random_uniform' in\
    \ scope\n        let i = Int(arc4random_uniform(UInt32(n)))\n                \
    \    ^~~~~~~~~~~~~~~~~~\n/tmp/tmpbda3wy3j.swift:16:13: error: cannot find 'contains'\
    \ in scope\n        if !contains(&a, i) {\n            ^~~~~~~~\n/tmp/tmpbda3wy3j.swift:20:12:\
    \ error: cannot find 'count' in scope\n    return count(&a, { $0 % 3 == 0 })\n\
    \           ^~~~~\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var sum = 0\n    var total = 0\n    for x in 1...n {\n       \
    \ var sum = sum + x\n        if sum > 9 {\n            sum = sum - 9\n       \
    \ } else {\n            if sum > 3 {\n                sum = sum - 3\n        \
    \    } else {\n                total++\n            }\n        }\n    }\n    return\
    \ total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqg3lnlfz.swift:23:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                total++\n                     ^~\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // write your code here\n    var a = Array<Int>(n)\n    for i\
    \ in 0..<n {\n        a[i] = i * i - i + 1\n    }\n    var count = 0\n    for\
    \ (i in 0..<n) {\n        for j in (i + 1)..<n {\n            for k in (i + 2)..<n\
    \ {\n                if ((a[i] == a[j] && a[j] == a[k]) && a[i] + a[j] + a[k]\
    \ % 3 == 0) {\n                    count += 1\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp1j4w0ma2.swift:19:12: error: expected ',' separator\n    for (i\
    \ in 0..<n) {\n           ^\n          ,\n/tmp/tmp1j4w0ma2.swift:19:12: error:\
    \ expected pattern\n    for (i in 0..<n) {\n           ^\n/tmp/tmp1j4w0ma2.swift:19:22:\
    \ error: expected 'in' after for-each pattern\n    for (i in 0..<n) {\n      \
    \               ^\n/tmp/tmp1j4w0ma2.swift:19:22: error: expected Sequence expression\
    \ for for-each loop\n    for (i in 0..<n) {\n                     ^\n/tmp/tmp1j4w0ma2.swift:14:24:\
    \ error: missing argument label 'arrayLiteral:' in call\n    var a = Array<Int>(n)\n\
    \                       ^\n                       arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009409
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // TODO: add your code\n    var max = 0\n    var temp = 0\n  \
    \  for j in 1 ..< n {\n        if temp == 0 {\n            temp = j\n        }\n\
    \        if max < temp {\n            max = temp\n        }\n        if temp <\
    \ j {\n            temp = j\n        }\n    }\n    if temp == 0 {\n        return\
    \ 0\n    } else {\n        return 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmphp3a3ox8/tmphp3a3ox8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6800fd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6800cc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6800cc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6800cc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphp3a3ox8                        0x000055bbd87173b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b68011bd460 __libc_start_main +
    245

    6    tmphp3a3ox8                        0x000055bbd8716fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar sum = 0\n\tfor i in 0..<n {\n\t\tfor j in 0..<n {\n\t\t\tif\
    \ i != j && j > i {\n\t\t\t\tfor k in 0..<n {\n\t\t\t\t\tif k != i && k != j &&\
    \ k != k {\n\t\t\t\t\t\tif sum+i*i+j*j+k*k == 3*i && i!=j && i!=k && j!=k {\n\t\
    \t\t\t\t\t\tsum += i + 1\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpseg94fth.swift:19:37: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n                                                if\
    \ sum+i*i+j*j+k*k == 3*i && i!=j && i!=k && j!=k {\n                         \
    \                                                     ^\n                    \
    \                                                         (  != 0)\n/tmp/tmpseg94fth.swift:19:37:\
    \ error: cannot force unwrap value of non-optional type 'Int'\n              \
    \                                  if sum+i*i+j*j+k*k == 3*i && i!=j && i!=k &&\
    \ j!=k {\n                                                                   \
    \          ~^\n                                                              \
    \                \n/tmp/tmpseg94fth.swift:19:38: error: use of '=' in a boolean\
    \ context, did you mean '=='?\n                                              \
    \  if sum+i*i+j*j+k*k == 3*i && i!=j && i!=k && j!=k {\n                     \
    \                                                     ~~   ^       ~\n       \
    \                                                                        ==\n\
    /tmp/tmpseg94fth.swift:19:39: error: type 'Int' cannot be used as a boolean; test\
    \ for '!= 0' instead\n                                                if sum+i*i+j*j+k*k\
    \ == 3*i && i!=j && i!=k && j!=k {\n                                         \
    \                                       ^\n                                  \
    \                                              ( != 0)\n/tmp/tmpseg94fth.swift:19:45:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \                                             if sum+i*i+j*j+k*k == 3*i && i!=j\
    \ && i!=k && j!=k {\n                                                        \
    \                              ^\n                                           \
    \                                          (  != 0)\n/tmp/tmpseg94fth.swift:19:45:\
    \ error: cannot force unwrap value of non-optional type 'Int'\n              \
    \                                  if sum+i*i+j*j+k*k == 3*i && i!=j && i!=k &&\
    \ j!=k {\n                            "
  stdout: ''
  timestamp: 1660009409
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return 0\n    }\n    var sum = 0\n    for\
    \ i in 1 ... n {\n        sum += (i * i - i + 1) / 3\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp7yxzuyxf/tmp7yxzuyxf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c13c4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c13946b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c13946988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c139457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yxzuyxf                        0x000055575c67b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b3c13e3b460 __libc_start_main +
    245

    6    tmp7yxzuyxf                        0x000055575c67afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009409
- exit_code: -1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return get_max_triples(n: Int.max) + 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tguard n > 0 else {\n\t\treturn 0\n\t}\n\tvar a: [Int] = Array(0..<n)\n\
    \tvar count = 0\n\tfor i : Int in 0..<n {\n\t\tlet j = i + i + 1\n\t\tlet k =\
    \ i * i\n\t\twhile j < k {\n\t\t\tcount += 1\n\t\t\tj++\n\t\t}\n\t\tif count >\
    \ 0 {\n\t\t\tcontinue\n\t\t}\n\t\ta[i] = i * i - i + 1\n\t\tcontinue\n\t}\n\t\
    guard a.last % 3 == 0 else {\n\t\treturn 0\n\t}\n\treturn count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpigikg43p.swift:23:5: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                        j++\n                        \
    \ ^~\n/tmp/tmpigikg43p.swift:31:10: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        guard a.last % 3 == 0 else {\n\
    \                ^\n/tmp/tmpigikg43p.swift:31:10: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n        guard a.last\
    \ % 3 == 0 else {\n                ^\n              (      ?? <#default value#>)\n\
    /tmp/tmpigikg43p.swift:31:10: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        guard a.last % 3 == 0 else {\n\
    \                ^\n                    !\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return Int(binom(n, 3, 0))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp643jgl7v.swift:13:16: error: cannot find 'binom' in scope\n   \
    \ return Int(binom(n, 3, 0))\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    precondition(n >= 0, \"n should be greater than or equal to 0.\"\
    )\n\n    var result = Int()\n    for ii in 1...n {\n        for jj in (ii + 1...n)\
    \ {\n            if ii + jj > n {\n                break\n            }\n    \
    \        for kk in jj+1...n {\n                if ii + jj + kk > n {\n       \
    \             break\n                }\n                if ii + jj + kk + 3 ==\
    \ i * i * i - i * (i + 1) + i * (i + 1) + i * (i + 1) + 1 {\n                \
    \    result = max(result, ii + jj + kk)\n                }\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp7k56wnqm.swift:25:40: error: cannot find 'i' in scope\n       \
    \         if ii + jj + kk + 3 == i * i * i - i * (i + 1) + i * (i + 1) + i * (i\
    \ + 1) + 1 {\n                                       ^\n/tmp/tmp7k56wnqm.swift:25:44:\
    \ error: cannot find 'i' in scope\n                if ii + jj + kk + 3 == i *\
    \ i * i - i * (i + 1) + i * (i + 1) + i * (i + 1) + 1 {\n                    \
    \                       ^\n/tmp/tmp7k56wnqm.swift:25:48: error: cannot find 'i'\
    \ in scope\n                if ii + jj + kk + 3 == i * i * i - i * (i + 1) + i\
    \ * (i + 1) + i * (i + 1) + 1 {\n                                            \
    \   ^\n/tmp/tmp7k56wnqm.swift:25:52: error: cannot find 'i' in scope\n       \
    \         if ii + jj + kk + 3 == i * i * i - i * (i + 1) + i * (i + 1) + i * (i\
    \ + 1) + 1 {\n                                                   ^\n/tmp/tmp7k56wnqm.swift:25:57:\
    \ error: cannot find 'i' in scope\n                if ii + jj + kk + 3 == i *\
    \ i * i - i * (i + 1) + i * (i + 1) + i * (i + 1) + 1 {\n                    \
    \                                    ^\n/tmp/tmp7k56wnqm.swift:25:66: error: cannot\
    \ find 'i' in scope\n                if ii + jj + kk + 3 == i * i * i - i * (i\
    \ + 1) + i * (i + 1) + i * (i + 1) + 1 {\n                                   \
    \                              ^\n/tmp/tmp7k56wnqm.swift:25:71: error: cannot\
    \ find 'i' in scope\n                if ii + jj + kk + 3 == i * i * i - i * (i\
    \ + 1) + i * (i + 1) + i * (i + 1) + 1 {\n                                   \
    \                                   ^\n/tmp/tmp7k56wnqm.swift:25:80: error: cannot\
    \ find 'i' in scope\n                if ii + jj + kk + 3 == i * i * i - i * (i\
    \ + 1) + i * (i + 1) + i * (i + 1) + 1 {\n                                   \
    \                                            ^\n/tmp/tmp7k56wnqm.swift:25:85:\
    \ error: cannot find 'i' in scope\n                if ii + jj + kk + 3 == i *\
    \ i * i - i * (i + 1) + i * (i + 1) + i * (i + 1) + 1 {\n                    \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    var max = 0\n    for i in 0..<n {\n\
    \        a[i] = i * i - i + 1\n    }\n    \n    for k in 0..<n {\n        if k\
    \ != n {\n            var j = k + 1\n            for i in 0..<n {\n          \
    \      j = k\n                var sum = a[i] + a[j] + a[k]\n                if\
    \ sum == 0 {\n                    a[i] = 0\n                    a[j] = 0\n   \
    \                 a[k] = 0\n                }\n                sum += a[i] * a[j]\
    \ * a[k]\n                if sum > max {\n                    max = sum\n    \
    \            }\n                j++\n            }\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpv5o5gov2.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmpv5o5gov2.swift:34:18: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n                j++\n                 ^~\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n   \n   var max_triple = 0\n   \n   var a = Array<Int>()\n   for i\
    \ in 1...n {\n      a.append(i*i-i+1)\n   }\n   \n   for i in 0..<n {\n      for\
    \ j in 0..<n {\n         for k in 0..<n {\n            if (a[i] > 0 || a[j] >\
    \ 0 || a[k] > 0) && a[i] > a[j] && a[j] > a[k] {\n               \n          \
    \     if a[i] < max_triple {\n                  max_triple = a[i]\n          \
    \     }\n               if a[j] < max_triple {\n                  max_triple =\
    \ a[j]\n               }\n               if a[k] < max_triple {\n            \
    \      max_triple = a[k]\n               }\n            }\n         }\n      }\n\
    \   }\n   return max_triple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp31fdkvec/tmp31fdkvec.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd2934cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd29043b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd29043988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd290427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp31fdkvec                        0x000056515e824535 <unavailable> + 5429

    5    libc.so.6                          0x00002acd29538460 __libc_start_main +
    245

    6    tmp31fdkvec                        0x000056515e8241e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // base case when n = 2\n    guard n < 2 else {\n        return\
    \ 0\n    }\n    // initialize array a of size n.\n    let a = Array<Int>()\n \
    \   for i in 1..<n {\n        a.append(i * i - i + 1)\n    }\n    // initialize\
    \ count of triples (a[i], a[j], a[k]) of a where i < j < k\n    var count = 0\n\
    \    // traverse array a from right to left and count triples (a[j], a[k], a[i])\n\
    \    for i in (n - 1)..<n {\n        for j in i..<n {\n            for k in j..<n\
    \ {\n                if a[k] + a[j] + a[i] == a[0] {\n                    count\
    \ += 1\n                    break\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmprvtbcq7b.swift:20:11: error: cannot use mutating member on immutable\
    \ value: 'a' is a 'let' constant\n        a.append(i * i - i + 1)\n        ~ ^\n\
    /tmp/tmprvtbcq7b.swift:18:5: note: change 'let' to 'var' to make it mutable\n\
    \    let a = Array<Int>()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    var a = Array<Int>()\n    for i in 1...n {\n\
    \        for j in i+1...n {\n            for k in j+1...n {\n                if\
    \ i!==j && i!==k && j!==k {\n                    a.append(i*i-i+1)\n         \
    \       }\n            }\n        }\n    }\n    let maxTriples = a.filter({ $0\
    \ % 3 == 0 }).count\n    return maxTriples\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp1drxqurn.swift:18:21: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n                if i!==j && i!==k && j!==k {\n                 \
    \  ~^\n                    \n/tmp/tmp1drxqurn.swift:18:30: error: cannot force\
    \ unwrap value of non-optional type 'Int'\n                if i!==j && i!==k &&\
    \ j!==k {\n                            ~^\n                             \n/tmp/tmp1drxqurn.swift:18:39:\
    \ error: cannot force unwrap value of non-optional type 'Int'\n              \
    \  if i!==j && i!==k && j!==k {\n                                     ~^\n   \
    \                                   \n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n  var result = 0\n  var a = [Int]()\n  var triples = [i: Int]()\n\
    \  for _ in 0..<n {\n    if a.count < 3 {\n      a.append(0)\n    }\n    triples.updateValue(n-i,\
    \ forKey: i)\n    if a.count > 3 {\n      result = max3(triples.values, forKey:\
    \ i)\n      break\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpnpsk8pd5.swift:15:18: error: cannot find 'i' in scope\n  var triples\
    \ = [i: Int]()\n                 ^\n/tmp/tmpnpsk8pd5.swift:15:17: error: cannot\
    \ call value of non-function type '[AnyHashable : Int.Type]'\n  var triples =\
    \ [i: Int]()\n                ^       ~~\n                        \n/tmp/tmpnpsk8pd5.swift:20:27:\
    \ error: cannot find 'i' in scope\n    triples.updateValue(n-i, forKey: i)\n \
    \                         ^\n/tmp/tmpnpsk8pd5.swift:20:38: error: cannot find\
    \ 'i' in scope\n    triples.updateValue(n-i, forKey: i)\n                    \
    \                 ^\n/tmp/tmpnpsk8pd5.swift:22:16: error: cannot find 'max3' in\
    \ scope\n      result = max3(triples.values, forKey: i)\n               ^~~~\n\
    /tmp/tmpnpsk8pd5.swift:22:45: error: cannot find 'i' in scope\n      result =\
    \ max3(triples.values, forKey: i)\n                                          \
    \  ^\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    var i = 0\n    var max\
    \ = 0\n    var triples = 1\n    for _ in 0..<n {\n        i += 1\n        triples\
    \ = 1\n        if i < n {\n            var sum = 0\n            for _ in 0..<n\
    \ {\n                sum += a[i]\n                i += 2\n            }\n    \
    \        max = max(max, sum)\n            if sum == max {\n                triples\
    \ += 1\n            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpo_pxil16.swift:25:24: error: cannot find 'a' in scope\n       \
    \         sum += a[i]\n                       ^\n/tmp/tmpo_pxil16.swift:28:19:\
    \ error: cannot call value of non-function type 'Int'\n            max = max(max,\
    \ sum)\n                  ^\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    var triples = [Int]()\n    for i in 1...n\
    \ {\n        for j in (i + 1)...n {\n            if i != j && i == i * i - j {\n\
    \                triples.append((i, j, i*i - j + 1))\n            }\n        }\n\
    \    }\n    for triple in triples {\n        result += triple\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpwdg83jli.swift:18:32: error: cannot convert value of type '(Int,\
    \ Int, Int)' to expected argument type 'Int'\n                triples.append((i,\
    \ j, i*i - j + 1))\n                               ^\n"
  stdout: ''
  timestamp: 1660009410
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for _ in 0..<n {\n        a.append(0)\n\
    \    }\n    for i : Int = 0 to n {\n        for j : Int to i {\n            for\
    \ k : Int to j {\n                if a[k] > 0 {\n                    a[k] += a[i]\
    \ + a[j] + 1\n                }\n            }\n        }\n    }\n    return a.count\
    \ - a.filter({$0 % 3 == 0}, countBy: >).count - 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpvd2a8wau.swift:17:17: error: expected 'in' after for-each pattern\n\
    \    for i : Int = 0 to n {\n                ^\n/tmp/tmpvd2a8wau.swift:17:17:\
    \ error: expected Sequence expression for for-each loop\n    for i : Int = 0 to\
    \ n {\n                ^\n/tmp/tmpvd2a8wau.swift:18:21: error: expected 'in' after\
    \ for-each pattern\n        for j : Int to i {\n                    ^\n/tmp/tmpvd2a8wau.swift:18:24:\
    \ error: expected '{' to start the body of for-each loop\n        for j : Int\
    \ to i {\n                       ^\n/tmp/tmpvd2a8wau.swift:19:25: error: expected\
    \ 'in' after for-each pattern\n            for k : Int to j {\n              \
    \          ^\n/tmp/tmpvd2a8wau.swift:19:28: error: expected '{' to start the body\
    \ of for-each loop\n            for k : Int to j {\n                         \
    \  ^\n/tmp/tmpvd2a8wau.swift:26:55: error: extra argument 'countBy' in call\n\
    \    return a.count - a.filter({$0 % 3 == 0}, countBy: >).count - 1\n        \
    \                     ~~~~~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmpvd2a8wau.swift:18:21:\
    \ error: cannot find 'to' in scope\n        for j : Int to i {\n             \
    \       ^~\n/tmp/tmpvd2a8wau.swift:19:25: error: cannot find 'to' in scope\n \
    \           for k : Int to j {\n                        ^~\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return 1 + get_max_triples_n(n - 1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpgo1qd9x4.swift:13:16: error: cannot find 'get_max_triples_n' in\
    \ scope\n    return 1 + get_max_triples_n(n - 1)\n               ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for _ in 1...n {\n        a[a[0]] = a[0] + a[0]\
    \ + a[0] + 1\n    }\n    var sum = 0\n    for element in a {\n        sum += element\n\
    \    }\n    for element in a {\n        if sum % 3 == 0 {\n            return\
    \ 1\n        }\n        sum += element\n    }\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122e65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0122b5c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0122b5c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0122b5c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0122b5bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b012295b7ec <unavailable> + 186348

    6    tmp3kxyp9uy                        0x000055ec02e6ca59 <unavailable> + 6745

    7    tmp3kxyp9uy                        0x000055ec02e6c5e8 <unavailable> + 5608

    8    libc.so.6                          0x00002b0123051460 __libc_start_main +
    245

    9    tmp3kxyp9uy                        0x000055ec02e6c309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660009409
- exit_code: -1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\treturn get_max_triples(n: n + 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009415
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let a = [Int](repeating: 0, count: n)\n    \n    let result =\
    \ _getMaxOfTwoArrays(a: &a, min: 0)\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpoggg2eqi.swift:15:18: error: cannot find '_getMaxOfTwoArrays' in\
    \ scope\n    let result = _getMaxOfTwoArrays(a: &a, min: 0)\n                \
    \ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpoggg2eqi.swift:15:40: error: cannot pass immutable\
    \ value as inout argument: 'a' is a 'let' constant\n    let result = _getMaxOfTwoArrays(a:\
    \ &a, min: 0)\n                                       ^~\n/tmp/tmpoggg2eqi.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let a = [Int](repeating:\
    \ 0, count: n)\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return 0..<n\n        .scan(0, {\n            var j = $0;\n  \
    \          var k = $0;\n            return $0 + {\n                if j >= k {\n\
    \                    ($0 + 1, j, k)\n                } else {\n              \
    \      ($0 + 1, $0 + 1, $0 + 1)\n                }\n            }\n        })\n\
    \        .map { (i, j, k) -> Int in\n            (i, j, k)\n        }\n      \
    \  .filter({ $0.0 + $0.1 + $0.2 == 3 * $0.0 })\n        .count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpluc7s3c1.swift:13:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return 0..<n\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // Write your code here.\n    // 1\n    var count = 0\n    var\
    \ array = [Int]()\n    var temp = 0\n    var max = 0\n    \n    for i in 1...n\
    \ {\n        temp = i * i - i + 1\n        if max < temp {\n            max =\
    \ temp\n        }\n        array.append(i)\n    }\n    \n    for i in 0..<array.count-1\
    \ {\n        for j in 0..<array.count-1 {\n            for k in 0..<array.count-1\
    \ {\n                if array[i] < array[j] && array[i] < array[k] && array[j]\
    \ < array[k] {\n                    if array[i] - array[j] < array[i] - array[k]\
    \ && array[j] - array[k] < array[j] - array[i] {\n                        count\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpzzhccgat/tmpzzhccgat.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9dc468c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9dc15fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9dc15f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9dc15e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzzhccgat                        0x0000559869dc45d5 <unavailable> + 5589

    5    libc.so.6                          0x00002ab9dc654460 __libc_start_main +
    245

    6    tmpzzhccgat                        0x0000559869dc4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    precondition(n >= 0, \"n is negative\")\n    var res = 1\n   \
    \ for i in 1..n {\n        for j in 1..n {\n            for k in 1..n {\n    \
    \            if i + j + k == i * i * i + j * j + k * k {\n                   \
    \ res *= 3\n                    if i + j + k > n {\n                        res\
    \ -= 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpidr1a8t7.swift:15:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..n {\n              ^~\n              ...\n\
    /tmp/tmpidr1a8t7.swift:16:19: error: cannot find operator '..' in scope; did you\
    \ mean '...'?\n        for j in 1..n {\n                  ^~\n               \
    \   ...\n/tmp/tmpidr1a8t7.swift:17:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n            for k in 1..n {\n                      ^~\n\
    \                      ...\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar a : [Int] = []\n\tfor i : Int in 1...n {\n\t\ta.append(i * i\
    \ - i + 1)\n\t}\n\treturn a.count { \n\t\tt in\n\t\tt < 3 &&\n\t\tt%3 ==0\n\t\
    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpfw77yad3.swift:20:6: error: consecutive statements on a line must\
    \ be separated by ';'\n                t%3 ==0\n                   ^\n       \
    \            ;\n/tmp/tmpfw77yad3.swift:20:7: error: '==' is not a prefix unary\
    \ operator\n                t%3 ==0\n                    ^\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 1 {\n        return 0;\n    }\n    var result = 0\n   \
    \ var a = Array<Int>()\n    a.reserveCapacity(n)\n    for i in 0..<n {\n     \
    \   a.append(i * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if i != j {\n                for k in 0..<n {\n             \
    \       if i != k {\n                        if j != k {\n                   \
    \         if a[i] > a[j] + a[k] {\n                                result += 1;\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return result %\
    \ 3;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) == 1)\n\
    assert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n:\
    \ 100) == 53361)"
  status: Exception
  stderr: 'tmp42o_r98o/tmp42o_r98o.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc6238ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc62085b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc62085988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc620847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp42o_r98o                        0x000056256c1d14a5 <unavailable> + 5285

    5    libc.so.6                          0x00002acc6257a460 __libc_start_main +
    245

    6    tmp42o_r98o                        0x000056256c1d1159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar a: Array = Array()\n\tfor i in 1...n {\n\t\ta.append(i * i -\
    \ i + 1)\n\t}\n\treturn a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpjrkrushf.swift:13:17: error: generic parameter 'Element' could\
    \ not be inferred\n        var a: Array = Array()\n                       ^\n\
    /tmp/tmpjrkrushf.swift:13:17: note: explicitly specify the generic arguments to\
    \ fix this issue\n        var a: Array = Array()\n                       ^\n \
    \                           <Any>\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    precondition(n >= 0, \"n must be positive\")\n    var result =\
    \ 1\n    for i in  1..n {\n        for j in (i+1)..n {\n            if i != j\
    \ && i * i + j * j == i * j * 3 {\n                result += 1\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpdu3n6iwe.swift:15:16: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in  1..n {\n               ^~\n             \
    \  ...\n/tmp/tmpdu3n6iwe.swift:16:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..n {\n                      ^~\n\
    \                      ...\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tlet a = Array<Int>(n)\n\tfor i in 0 ..< n {\n\t\ta[i] = i * i -\
    \ i + 1\n\t}\n\t\n\tvar i, j, k int\n\tfor i, v in enumerate(a) {\n\t\tfor j,\
    \ u in enumerate(a) {\n\t\t\tif j > i {\n\t\t\t\tfor k, v in enumerate(a) {\n\t\
    \t\t\t\tif i != j && j != k {\n\t\t\t\t\t\tif v + u + v == a[i*j+k] {\n\t\t\t\t\
    \t\t\treturn i+j+k\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    }\n\t\n\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpmw0z6i0p.swift:18:14: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n        var i, j, k\
    \ int\n                    ^\n/tmp/tmpmw0z6i0p.swift:18:14: note: join the identifiers\
    \ together\n        var i, j, k int\n                  ~~^~~\n               \
    \   kint\n/tmp/tmpmw0z6i0p.swift:18:14: note: join the identifiers together with\
    \ camel-case\n        var i, j, k int\n                  ~~^~~\n             \
    \     kInt\n/tmp/tmpmw0z6i0p.swift:19:7: error: expected 'in' after for-each pattern\n\
    \        for i, v in enumerate(a) {\n             ^\n/tmp/tmpmw0z6i0p.swift:19:7:\
    \ error: expected Sequence expression for for-each loop\n        for i, v in enumerate(a)\
    \ {\n             ^\n/tmp/tmpmw0z6i0p.swift:20:8: error: expected 'in' after for-each\
    \ pattern\n                for j, u in enumerate(a) {\n                     ^\n\
    /tmp/tmpmw0z6i0p.swift:20:8: error: expected Sequence expression for for-each\
    \ loop\n                for j, u in enumerate(a) {\n                     ^\n/tmp/tmpmw0z6i0p.swift:22:10:\
    \ error: expected 'in' after for-each pattern\n                              \
    \  for k, v in enumerate(a) {\n                                     ^\n/tmp/tmpmw0z6i0p.swift:22:10:\
    \ error: expected Sequence expression for for-each loop\n                    \
    \            for k, v in enumerate(a) {\n                                    \
    \ ^\n/tmp/tmpmw0z6i0p.swift:13:21: error: missing argument label 'arrayLiteral:'\
    \ in call\n        let a = Array<Int>(n)\n                           ^\n     \
    \                      arrayLiteral: \n/tmp/tmpmw0z6i0p.swift:18:6: error: type\
    \ annotation missing in pattern\n        var i, j, k int\n            ^\n/tmp/tmpmw0z6i0p.swift:18:9:\
    \ error: type annotation missing in pattern\n        var i, j, k int\n       \
    \        ^\n/tmp/tmpmw0z6i0p.swift:18:12: error: type annotation missing in pattern\n\
    \        var i, j, k int\n                  ^\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        for j in i...n {\n\
    \            for k in j...n {\n                if i*i + j*j + k*k == i*i*i*i {\n\
    \                    a[0] = 1\n                    a[i] = a[i] - i + 1\n     \
    \               a[j] = a[j] - j + 1\n                    a[k] = a[k] - k + 1\n\
    \                }\n            }\n        }\n    }\n    return a[0]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp0qobfzdy/tmp0qobfzdy.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ee47b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ee44aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ee44ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ee44ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0qobfzdy                        0x000055cf65d2a4e5 <unavailable> + 5349

    5    libc.so.6                          0x00002b0ee49a3460 __libc_start_main +
    245

    6    tmp0qobfzdy                        0x000055cf65d2a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\treturn get_max_triples(n: n, triplesCount: 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpi0nbii7_.swift:13:45: error: extra argument 'triplesCount' in call\n\
    \        return get_max_triples(n: n, triplesCount: 0)\n                     \
    \         ~~~~~~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar a = [Int](n+1)\n\ta[0] = 1\n\t\n\tfor i : Int in 1..(n) {\n\t\
    \ta[i] = a[i-1]*i - i\n\t}\n\t\n\treturn a.count{ i, j, k -> (i + j + k) % 3 ==\
    \ 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpkxz8chwh.swift:20:19: error: consecutive statements on a line must\
    \ be separated by ';'\n        return a.count{ i, j, k -> (i + j + k) % 3 == 0\
    \ }\n                         ^\n                         ;\n/tmp/tmpkxz8chwh.swift:20:19:\
    \ error: expected expression\n        return a.count{ i, j, k -> (i + j + k) %\
    \ 3 == 0 }\n                         ^\n/tmp/tmpkxz8chwh.swift:13:16: error: missing\
    \ argument label 'arrayLiteral:' in call\n        var a = [Int](n+1)\n       \
    \               ^\n                      arrayLiteral: \n/tmp/tmpkxz8chwh.swift:16:18:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n        for\
    \ i : Int in 1..(n) {\n                        ^~\n                        ...\n\
    /tmp/tmpkxz8chwh.swift:20:18: error: cannot find 'i' in scope\n        return\
    \ a.count{ i, j, k -> (i + j + k) % 3 == 0 }\n                        ^\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 0..<n {\n        a.append(0)\n \
    \   }\n    var count = 0\n    for i : Int in 1..<n {\n        for j : Int in i..<n\
    \ {\n            for k : Int in i..<n {\n                if i == j &&  i == k\
    \ && j == k {\n                    continue // ignore triples that are already\
    \ known to be valid\n                }\n                let sum = i * i + j *\
    \ j + k * k\n                if sum % 3 == 0 {\n                    count = count\
    \ + 1\n                    a[i - 1] = 1\n                    a[j - 1] = 1\n  \
    \                  a[k - 1] = 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp6mnyd7ar/tmp6mnyd7ar.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ace785c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ace47cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ace47c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ace47b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6mnyd7ar                        0x0000560f7b5a1445 <unavailable> + 5189

    5    libc.so.6                          0x00002b3ace971460 __libc_start_main +
    245

    6    tmp6mnyd7ar                        0x0000560f7b5a10f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return 0..<n {\n        let (v, i) = pow(3, n).enumerate().filter({\
    \ $0.1 < $0.2 }).map({ ($0.1, $0.2) }).max()\n        return v\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp1hbvn_0n.swift:14:22: error: cannot find 'pow' in scope\n     \
    \   let (v, i) = pow(3, n).enumerate().filter({ $0.1 < $0.2 }).map({ ($0.1, $0.2)\
    \ }).max()\n                     ^~~\n"
  stdout: ''
  timestamp: 1660009409
