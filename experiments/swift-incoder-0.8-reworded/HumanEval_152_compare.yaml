name: HumanEval_152_compare
language: swift
prompt: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
  /// event is finally known. The feelings and thoughts you have at that moment are\n\
  /// definitely worth noting down and comparing.\n/// Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n/// You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n/// Return an array of the same length denoting how far off each guess was.\
  \ If they have guessed correctly,\n/// the value is 0, and if not, the value is\
  \ the absolute difference between the guess and the score.\n/// example:\n/// >>>\
  \ compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0, 0, 0, 0,\
  \ 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0, 0, -2])\n\
  /// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess:\
  \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0,\
  \ 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
  \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
  \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
completions: ["    var result: [Int] = []\n    for guess in guess {\n        let diff\
    \ = abs(guess - game.count)\n        result.append(diff)\n    }\n    return result",
  "    var score = 0\n    for i in 0..<guess.length {\n        if guess[i] == game[i]\
    \ {\n            score += 1\n        } else {\n            if guess[i] != game[i]\
    \ {\n                score += abs(guess[i] - game[i])\n            }\n       \
    \ }\n    }\n    return score", "    var i = 0\n    var j = 0\n    var k = game.length\n\
    \    var temp = 0\n    var score = 0\n    while i < k {\n        if guess[i] ==\
    \ game[j] {\n            score += 1\n            i += 1\n            j += 1\n\
    \        } else {\n            temp = guess[i]\n            guess[i] = guess[j]\n\
    \            guess[j] = temp\n            if j == k {\n                break\n\
    \            }\n            i += 1\n            j += 1\n            k -= 1\n \
    \       }\n    }\n    var newScore = [Int]()\n    var correct = 0\n    for k in\
    \ guess {\n        if k == 0 {\n            correct += 1\n        } else {\n \
    \           newScore.append(abs(k - score))\n        }\n    }\n    return newScore",
  '    return Array(zip(game, guess).map { abs($0 - $1) })', "    var result = [Int]()\n\
    \    for j in 0..<game.count {\n        var score = 0\n        for _ in 0..<guess.count\
    \ {\n            if game[j] == guess[_] {\n                score += 1\n      \
    \      }\n        }\n        if score == guess.count {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[j] - guess[guess.index(guess,\
    \ offsetBy: j)]))\n        }\n    }\n    return result", "    var best = [Int]()\n\
    \    \n    var bestDifference = [Int]()\n    \n    for index in 0..<guess.length\
    \ {\n        var difference = guess[index] - game[index]\n        \n        if\
    \ bestDifference.count <= 0 {\n            bestDifference.insert(difference, at:\
    \ index)\n        } else {\n            if difference < bestDifference[-1] {\n\
    \                bestDifference.insert(difference, at: index)\n            } else\
    \ {\n                bestDifference.removeLast()\n            }\n        }\n \
    \       \n        if bestDifference.count == best.length {\n            best.insert(difference,\
    \ at: index)\n        }\n    }\n    \n    return best", "    \n    var gameCount\
    \ = 0\n    var guessCount = 0\n    \n    var correctGuessCount = 0\n    var correctGuessArray\
    \ = [Int]()\n    \n    var wrongGuessCount = 0\n    var wrongGuessArray = [Int]()\n\
    \    \n    while gameCount < game.count {\n        gameCount += 1\n        if\
    \ guess[guessCount] == game[gameCount] {\n            guessCount += 1\n      \
    \      if guessCount == guess.count {\n                correctGuessCount += 1\n\
    \                correctGuessArray.append(0)\n            } else {\n         \
    \       correctGuessArray.append(0)\n            }\n        } else {\n       \
    \     if gameCount < game.count {\n                wrongGuessCount += 1\n    \
    \            wrongGuessArray.append(gameCount - game.count)\n            } else\
    \ {\n                wrongGuessCount += 1\n                wrongGuessArray.append(gameCount\
    \ - game.count)\n            }\n        }\n    }\n    \n    if correctGuessCount\
    \ == game.count {\n        return correctGuessArray\n    }\n    \n    if guessCount\
    \ == game.count {\n        return wrongGuessArray\n    }\n    \n    var correctGuessDiff\
    \ = wrongGuessCount - correctGuessCount\n    var wrongGuessDiff = wrongGuessCount\
    \ - guessCount\n    \n    return correctGuessArray + [abs(correctGuessDiff)] +\
    \ wrongGuessArray", "    var gameCount = 0\n    var guessCount = 0\n    var correctCount\
    \ = 0\n    for _ in 0..<guess.count {\n        guessCount += 1\n        if game[gameCount]\
    \ == guess[guessCount] {\n            gameCount += 1\n            guessCount -=\
    \ 1\n            correctCount += 1\n        }\n    }\n    var result = [Int]()\n\
    \    for _ in 0..<guess.count {\n        result.append(guess[guessCount] - game[gameCount])\n\
    \        gameCount += 1\n        guessCount -= 1\n    }\n    for _ in 0..<guess.count\
    \ {\n        result.append(abs(guess[guessCount] - game[gameCount]))\n       \
    \ gameCount += 1\n        guessCount -= 1\n    }\n    return result", "    var\
    \ result: [Int] = [0]\n    var gameLength = game.count\n    var guessLength =\
    \ guess.count\n    let maxGameLength = gameLength\n    let maxGuessLength = guessLength\n\
    \    for _ in 0..<maxGuessLength {\n        result.append(0)\n    }\n    if gameLength\
    \ != guessLength {\n        return result\n    }\n    for _ in 0..<maxGameLength\
    \ {\n        let guessIndex = guessIndexFromGameIndex(gameLength, _)\n       \
    \ let gameIndex = guessIndexFromGameIndex(guessLength, _)\n        if game[gameIndex]\
    \ == guess[guessIndex] {\n            result[gameIndex] += 1\n        }\n    }\n\
    \    return result", "    // Your code here\n    if game.count == guess.count\
    \ {\n        var result = 0\n        for i in 0..<game.count {\n            if\
    \ game[i] == guess[i] { result += 1}\n        }\n        return [abs(result -\
    \ game.count)]\n    } else {\n        return [0]\n    }", "    let result = zip(game,\
    \ guess).map { \n        let (a, b) = ($0, $1)\n        if a == b {\n        \
    \    return 0\n        }\n        return abs(a - b)\n    }\n    return result",
  "    return game\n        .enumerated()\n        .map { (index, value) -> Int? in\n\
    \            guard value >= 0 else { return nil }\n            guard game.count\
    \ == guess.count else { return nil }\n            guard game[index] == guess[index]\
    \ else { return nil }\n            return abs(game[index] - guess[index])\n  \
    \      }\n        .enumerated()\n        .map { index, value in (index, value)\
    \ }\n        .map { value, _ in value }", "    let m = game.count\n    let n =\
    \ guess.count\n\n    var arr: [Int] = Array(repeating: 0, count: n)\n\n    for\
    \ i in 0..<n {\n        let j = index(of: guess[i], in: game)!\n        arr[i]\
    \ = game[j] - guess[i]\n    }\n\n    return arr", "    var result = [Int]()\n\
    \    \n    var i = 0\n    \n    while i < game.count {\n        \n        if game[i]\
    \ == guess[i] {\n            result.append(0)\n        } else {\n            result.append(abs(game[i]\
    \ - guess[i]))\n        }\n        \n        i += 1\n    }\n    \n    return result",
  "    var result: [Int] = [0]\n\n    let n = game.count\n\n    for i in 0..<n {\n\
    \        let score = game[i]\n        let guess = guess[i]\n\n        if guess\
    \ == score {\n            result[0] = result[0] + (abs(guess-score))\n       \
    \ } else {\n            result[0] = result[0] + abs(guess-score)\n        }\n\
    \    }\n\n    return result", "    var returns = [Int](repeating: 0, count: guess.length)\n\
    \    guard game.count == guess.length else {\n        return returns\n    }\n\n\
    \    for i in 0..<guess.length {\n        let delta = abs(game[i] - guess[i])\n\
    \        returns[i] = delta\n    }\n    return returns", "    let diff = game.map\
    \ { $0 - $1 }\n    let diffs = diff.sorted()\n    let correct = diff.map { ($0\
    \ == 0) }\n    var result = [Int](repeating: 0, count: game.count)\n    \n   \
    \ for i in 0..<game.count {\n        let index = game[i] - guess[i]\n        let\
    \ correctIndex = correct.index(true, offsetBy: i)\n        let scoreIndex = diffs.index(true,\
    \ offsetBy: i)\n        \n        if correctIndex != nil {\n            result[index]\
    \ = diff[correctIndex!]\n        } else {\n            result[index] = abs(diffs[scoreIndex!]\
    \ - diffs[scoreIndex! - 1])\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    result.truncateToLength(len(guess))\n    var correctCount =\
    \ 0\n    guard game.count == guess.count else {\n        print(\"game and guess\
    \ count don't match\")\n        return result\n    }\n    for i in 0..<game.count\
    \ {\n        let diff: Int = abs(game[i] - guess[i])\n        if game[i] == guess[i]\
    \ {\n            result.append(0)\n            correctCount += 1\n        } else\
    \ {\n            result.append(diff)\n        }\n    }\n    if correctCount ==\
    \ 0 {\n        print(\"game and guess don't match\")\n    }\n    return result",
  "    var ret: [Int] = []\n    \n    if game.count != guess.count {\n        return\
    \ ret\n    }\n    \n    for i in 0..<game.count {\n        if game[i] == guess[i]\
    \ {\n            ret.append(0)\n        } else {\n            ret.append(abs(guess[i]\
    \ - game[i]))\n        }\n    }\n    \n    return ret", "    var i = 0\n    var\
    \ total = 0\n    while i < game.count && i < guess.count {\n        if game[i]\
    \ == guess[i] {\n            total += game[i] - guess[i]\n            i += 1\n\
    \        } else if game[i] > guess[i] {\n            total += guess.count - i\n\
    \            i += guess.count - 1\n        } else {\n            total += game.count\
    \ - i\n            i += game.count - 1\n        }\n    }\n    return total < 0\
    \ ? 0 : abs(total)", "    if game.count == guess.count {\n        var ret = [Int](repeating:\
    \ 0, count: guess.count)\n        for i in 0..<guess.count {\n            ret[i]\
    \ = abs(game[i] - guess[i])\n        }\n        return ret\n    } else {\n   \
    \     var ret = [Int](repeating: 0, count: guess.count)\n        for i in 0..<guess.count\
    \ {\n            ret[i] = abs(game[i] - guess[i])\n            if ret[i] == 0\
    \ {\n                return ret\n            }\n        }\n        return ret\n\
    \    }", "    // TODO: Your code here\n    var gameResults = [Int]()\n    for\
    \ idx in 0..<guess.count {\n        gameResults.append(game[idx] - guess[idx])\n\
    \    }\n    return gameResults", "    // TODO: use quicksort or introsort with\
    \ some pivot selection\n    \n    var i = 0\n    var j = 0\n    var result = [Int](count:\
    \ guess[0].count, repeatedValue: 0)\n    var gameScore = game[0]\n    for _ in\
    \ 0..<guess[0].count {\n        if gameScore != guess[0] {\n            result[i]\
    \ = abs(gameScore - guess[0])\n        }\n        i += 1\n    }\n    for _ in\
    \ 0..<guess[0].count {\n        if gameScore != guess[0] {\n            result[j]\
    \ = abs(gameScore - guess[0])\n        }\n        j += 1 \n    }\n    \n    for\
    \ _ in 0..<guess[0].count {\n        if gameScore != guess[0] {\n            result[i]\
    \ = abs(gameScore - guess[0])\n        }\n        i += 1\n    }\n    for _ in\
    \ 0..<guess[0].count {\n        if gameScore != guess[0] {\n            result[j]\
    \ = abs(gameScore - guess[0])\n        }\n        j += 1 \n    }\n    \n    return\
    \ result ", "    \n    guard game.count == guess.count else {\n        return\
    \ nil\n    }\n    \n    var results: [Int] = []\n    \n    for i in 0..<game.count\
    \ {\n        results.append(0)\n    }\n    \n    for i in 0..<game.count {\n \
    \       let diff = abs(game[i] - guess[i])\n        if diff == 0 {\n         \
    \   results[i] = 0\n        } else {\n            results[i] = diff \n       \
    \ }\n    }\n    \n    return results", "    // return a new array\n    var result\
    \ = [Int](repeating: 0, count: game.count)\n\n    // if the guess is correct,\
    \ add it straight to the result\n    if guess[0] == game[0] {\n        result[0]\
    \ = game[0]\n    }\n\n    // calculate the differences and return them\n    for\
    \ (i in 1...game.count) {\n        result[i] = result[i] - guess[i]\n    }\n \
    \   return result", "    var difference = 0\n    for index in 0..<game.count {\n\
    \        if guess[index] != game[index] {\n            difference += abs(guess[index]\
    \ - game[index])\n        }\n    }\n    return difference", "    \n    guard game.count\
    \ == guess.count else {\n        return [Int](repeating: 0, count: game.count)\n\
    \    }\n    \n    let results = [Int](repeating: 0, count: game.count)\n    \n\
    \    for i in 0..<game.count {\n        if game[i] == guess[i] {\n           \
    \ results[i] = 0\n        } else {\n            results[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return results", "    var a = [Int]()\n    var b = [Int]()\n\
    \    var diff = 0\n    for i in 0 ..< game.count {\n        a.append(guess[i])\n\
    \        b.append(game[i])\n        if guess[i] == game[i] {\n            diff\
    \ += 0\n        } else {\n            diff += abs(guess[i] - game[i])\n      \
    \  }\n    }\n    a = a.reverse()\n    b = b.reverse()\n    return diff", "   \
    \ let count = game.count\n    var difference: [Int] = [0]\n    for var index =\
    \ 0; index < count; index++ {\n        let gameIndex = Int(game[index])\n    \
    \    let guessIndex = Int(guess[index])\n        difference[index] = abs(gameIndex\
    \ - guessIndex)\n    }\n    return difference", "    var diff = [Int]()\n    for\
    \ i in 0..<guess.count {\n        var sum: Int = 0\n        for j in 0..<game.count\
    \ {\n            if game[j] == guess[i] {\n                sum += 1\n        \
    \    }\n        }\n        if sum == 1 {\n            diff.append(0)\n       \
    \ } else {\n            let sum = sum\n            let diff = abs(game[i] - guess[i]\
    \ - sum)\n            diff.append(diff)\n        }\n    }\n    return diff", " \
    \   var index = 0\n    var difference = [Int](repeating: 0, count: game.count)\n\
    \    while index < game.count {\n        if game[index] == guess[index] {\n  \
    \          difference[index] = 0\n        } else if game[index] > guess[index]\
    \ {\n            difference[index] = game[index] - guess[index]\n        } else\
    \ {\n            difference[index] = abs(game[index] - guess[index])\n       \
    \ }\n        index += 1\n    }\n    return difference", "    let (gameMin, gameMax)\
    \ = game\n    let (guessMin, guessMax) = guess\n    let diff = [Int]()\n    var\
    \ gameCur = gameMin\n    var guessCur = guessMin\n    var correct = 0\n    var\
    \ diffCur = diff\n    while gameCur < gameMax and guessCur < guessMax and correct-diff\
    \ < 0 {\n        if game[gameCur] == guess[guessCur] {\n            correct +=\
    \ 1\n            diffCur.append(0)\n            gameCur += 1\n            guessCur\
    \ += 1\n        } else {\n            if gameCur-guessCur <= 0 {\n           \
    \     diffCur.append(gameCur - guessCur)\n                gameCur += 1\n     \
    \       } else {\n                diffCur.append(guessCur-gameCur)\n         \
    \       guessCur += 1\n            }\n        }\n    }\n    if gameCur > gameMax\
    \ {\n        diff.append(0)\n    } else {\n        diff.append(guessMax - gameMax)\n\
    \    }\n    return diff", "    var results = [Int]()\n    var i = 0\n    var gameLen\
    \ = game.count\n    var guessLen = guess.count\n    while i < gameLen && i < guessLen\
    \ {\n        let gameGame = game[i]\n        let guessGame = guess[i]\n      \
    \  if guessGame != gameGame {\n            results.append(abs(guessGame - gameGame))\n\
    \        }\n        i += 1\n    }\n    return results", '    return zip(game,
    guess).map { abs($0 - $1) }', "    guard game.count == guess.count else {\n  \
    \      print(\"The arrays must be of equal length.\")\n        return []\n   \
    \ }\n    var totalScore = 0\n    for i in 0..<game.count {\n        if game[i]\
    \ != guess[i] {\n            totalScore += abs(game[i] - guess[i])\n        }\n\
    \    }\n    return totalScore", "    let score = game.count\n    let difference\
    \ = guess\n    return score..<(score+difference).map { guess[$0] - game[$0] }",
  "    var numOfGuesses = 0\n    var numOfMisses   = 0\n\n    for i in 0..<game.count\
    \ {\n        var diff = 0\n\n        if game[i] == guess[i] { // They got it right\n\
    \            numOfGuesses += 1\n        } else { // They got it wrong\n      \
    \      numOfMisses += 1\n            diff = abs(game[i] - guess[i])\n        }\n\
    \n        guess[i] = diff\n    }\n\n    var answer: [Int] = [0]\n\n    if numOfGuesses\
    \ == game.count { // They guessed it right\n        answer[0] = 0\n    } else\
    \ { // They guessed it wrong\n        answer[0] = abs(numOfMisses - numOfGuesses)\n\
    \    }\n\n    return answer", "    let gameMinusGuess: [Int] = game.filter{ (num)\
    \ -> Bool in\n        guess == num\n    }\n    return gameMinusGuess", "    return\
    \ game.enumerated().map { i, s -> Int in\n        let gameScore = game[i]\n  \
    \      let guessScore = guess[i]\n        return gameScore == guessScore ? 0 :\
    \ abs(guessScore - gameScore)\n    }", "  var results = [Int]()\n\n  for _ in\
    \ 1...game.count {\n    if game[0] == guess[0] {\n      let diff = (game[0] -\
    \ guess[0]).abs()\n      results.append(diff)\n    }\n    if game[1] == guess[1]\
    \ {\n      let diff = (game[1] - guess[1]).abs()\n      results.append(diff)\n\
    \    }\n    if game[2] == guess[2] {\n      let diff = (game[2] - guess[2]).abs()\n\
    \      results.append(diff)\n    }\n    if game[3] == guess[3] {\n      let diff\
    \ = (game[3] - guess[3]).abs()\n      results.append(diff)\n    }\n    if game[4]\
    \ == guess[4] {\n      let diff = (game[4] - guess[4]).abs()\n      results.append(diff)\n\
    \    }\n    if game[5] == guess[5] {\n      let diff = (game[5] - guess[5]).abs()\n\
    \      results.append(diff)\n    }\n  }\n\n  return results", "    // TODO: Complete\
    \ this function\n    var gameSum = 0\n    var gameGuess = 0\n    var gameGuessedCorrectly\
    \ = false\n    var guessedCorrectly = false\n    \n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            gameSum += game[i]\n      \
    \      gameGuessedCorrectly = true\n        } else {\n            gameGuessed\
    \ += game[i] - guess[i]\n            gameSum += abs(game[i] - guess[i])\n    \
    \    }\n    }\n    \n    if gameSum != 0 {\n        if gameGuessedCorrectly {\n\
    \            guessedCorrectly = true\n        }\n        return [-gameSum, -gameGuess,\
    \ 0]\n    } else {\n        if guessedCorrectly {\n            return [-gameSum,\
    \ -gameGuess, 0]\n        } else {\n            return [-gameSum, -gameGuess,\
    \ abs(gameSum - gameGuess)]\n        }\n    }", "    let len = game.count\n  \
    \  let win = Array(game).sort(<)\n    return win.prefix(len).map { abs($0 - guess[$0..<len])\
    \ }", "    if game.count != guess.count {\n        return [Int](repeating: 0,\
    \ count: guess.count)\n    }\n    var sums = [Int](repeating: 0, count: game.count)\n\
    \    for i in 0 ..< game.count {\n        let difference = abs(game[i] - guess[i])\n\
    \        sums[i] += difference\n    }\n    return sums", "    var results = [Int]()\n\
    \    var wins = 0\n    var winsSoFar = 0\n    \n    for _ in 0..<games.count {\n\
    \        if games.count > wins {\n            if games[wins] == guess[winsSoFar]\
    \ {\n                wins += 1\n            }\n            else {\n          \
    \      results.append(abs(games[wins] - guess[winsSoFar]))\n            }\n  \
    \      }\n        else {\n            if games[wins] == guess[winsSoFar] {\n \
    \               wins += 1\n            }\n            else {\n               \
    \ results.append(abs(games[wins] - guess[winsSoFar]))\n            }\n       \
    \ }\n        winsSoFar += 1\n    }\n    \n    return results", '    return guess(game,
    guess)', "    \n    var score = 0\n    var guessCount = 0\n    var i = game.count\n\
    \    var j = guess.count\n    while i != 0 && j != 0 {\n        if game[i - 1]\
    \ == guess[j - 1] {\n            score += game[i - 1]\n            game.removeAtIndex(i-1)\n\
    \            guesses.removeAtIndex(i-1)\n            i -= 1\n            j -=\
    \ 1\n            guessCount += 1\n        } else {\n            i += 1\n     \
    \       j += 1\n            score += abs(game[i - 1] - guess[j - 1])\n       \
    \ }\n    }\n    if guessCount == 0 {\n        return [score]\n    } else {\n \
    \       return [score, guessCount]\n    }", "    var result = [Int](repeating:\
    \ 0, count: game.count)\n    for index in 0..<game.count {\n        result[index]\
    \ = abs(game[index] - guess[index])\n    }\n    return result", "    return (0..<game.count).map\
    \ { idx -> Int? in\n        var diff = 0\n        for j in 0..<guess.count {\n\
    \            if idx != j {\n                diff += abs(guess[j] - game[idx])\n\
    \            }\n        }\n        return diff\n    }", "    var arr:[Int] = []\n\
    \    \n    for i in 0..<game.count {\n        if game[i] == guess[i] { // same\
    \ score\n            arr[i] = 0 // same score\n        } else {\n            let\
    \ a = abs(guess[i] - game[i]) // absolute difference\n            arr[i] = a //\
    \ different score\n        }\n    }\n    return arr", "    if game.count != guess.count\
    \ {\n        guard game.count == guess.count else { return Array(repeating: 0,\
    \ count: game.count) }\n    }\n    var result = [Int]()\n    for i in 0..<game.count\
    \ {\n        result.append(abs(guess[i] - game[i]))\n    }\n    return result",
  "    guard game.count == guess.count else { return [Int]() }\n    var distance:\
    \ [Int] = Array(repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        let difference = Int(abs(game[i] - guess[i]))\n        distance[i]\
    \ = difference\n    }\n    return distance", "    var results = [Int](repeating:\
    \ 0, count: game.count)\n    for index in 0 ..< game.count {\n        if game[index]\
    \ == guess[index] {\n            results[index] = results[index] + 1\n       \
    \ }\n    }\n    return results", '    return guess == game ? [0, 0, 0, 0, 0, 0]
    : abs(guess[0] - game[0]) + abs(guess[1] - game[1]) + abs(guess[2] - game[2])
    + abs(guess[3] - game[3]) + abs(guess[4] - game[4]) + abs(guess[5] - game[5])',
  "    let len = game.count\n    let diff = [Int](repeating: 0, count: len)\n    for\
    \ i in 0..<len {\n        let a = game[i]\n        let b = guess[i]\n        if\
    \ a != b {\n            diff[i] = abs(a - b)\n        } else {\n            diff[i]\
    \ = 0\n        }\n    }\n    return diff", "    return (0..<game.count).map {\
    \ i in\n        let distance = abs(guess[i] - game[i])\n        if guess[i] ==\
    \ game[i] {\n            return distance\n        }\n        return distance\n\
    \    }", "    var result = Array(repeating: 0, count: game.count)\n    var total\
    \ = 0\n    for (i, a) in zip(game.indices, game) {\n        result[i] = abs(a\
    \ - guess[i])\n        total += abs(a - guess[i])\n    }\n    for j in game.indices\
    \ {\n        result[j] = abs(game[j] - guess[game.indices.index(j)])\n       \
    \ total += abs(game[j] - guess[game.indices.index(j)])\n    }\n    let maxScore\
    \ = abs(game[0] - guess[0])\n    if total > maxScore {\n        var index = 0\n\
    \        for (i, a) in zip(game.indices, game) {\n            if abs(a - guess[i])\
    \ <= maxScore {\n                let a = a < 0 ? -a : a\n                result[i]\
    \ = a\n            }\n        }\n        for (i, a) in zip(game.indices, game)\
    \ {\n            if abs(game[i] - guess[game.indices.index(j)])  >= maxScore {\n\
    \                result[j] = -abs(game[i] - guess[game.indices.index(j)])\n  \
    \          }\n        }\n    }\n    return result", "    var gameArray = game\n\
    \    var guessArray = guess\n    var diffArray = [Int]()\n    var index = 0\n\n\
    \    // if there aren't enough games to cover the guess, return an empty list\n\
    \    while gameArray.count < guess.count {\n        gameArray.append(0)\n    \
    \    guessArray.append(0)\n        diffArray.append(0)\n        index += 1\n \
    \   }\n\n    for _ in 0..<guess.count {\n        var diff = 0\n        diff =\
    \ gameArray[index] - guessArray[index]\n        diffArray.append(diff)\n     \
    \   gameArray.removeAtIndex(index)\n        guessArray.removeAtIndex(index)\n\
    \        index += 1\n    }\n\n    return diffArray", '    return compare(game:
    game, guess: guess, i: 0)', "    //TODO: your code here\n    var game = game\n\
    \    var guess = guess\n    var result = [Int](repeatElement(0, count: game.count))\n\
    \    for index in 0..<game.count {\n        if guess[index] > game[index] {\n\
    \            result[index] = 0\n        }\n        else if guess[index] == game[index]\
    \ {\n            result[index] = 0\n        }\n        else {\n            result[index]\
    \ = abs(guess[index] - game[index])\n        }\n    }\n    return result", " \
    \   let matches = G(zip(game, guess).map { Tuple($0.1, $0.2) }).sorted()\n   \
    \ let results = zip(guess, matches).map { $0 - $1.1 }\n    return results.map\
    \ { $0.abs }", "    \n    let sum = 0\n    \n    for i in 0 ..< game.count {\n\
    \        sum += abs(game[i] - guess[i])\n    }\n    \n    return Array(repeating:\
    \ sum, count: game.count)", "    var result = [Int]()\n    \n    // count matching\
    \ scores\n    var count = 0\n    for _ in game {\n        if guess[count] == game\
    \ {\n            count += 1\n        }\n    }\n    \n    // subtract scores\n\
    \    for i in 0..<count {\n        result.append(guess[i] - game[i])\n    }\n\
    \    \n    return result", "    guard game.count == guess.count else {\n     \
    \   print(\"The game and guess lists must contain the same number of elements.\"\
    )\n        return [Int](repeating: 0, count: game.count)\n    }\n    \n    let\
    \ gameScore = game.reduce(0, combine: { $0 + $1 })\n    let guessScore = guess.reduce(0,\
    \ combine: { $0 + $1 })\n    let difference = gameScore - guessScore\n    \n \
    \   var result: [Int] = Array(repeating: 0, count: game.count)\n    \n    let\
    \ minDiff = min(difference, guess.count)\n    for i in 0 ..< minDiff {\n     \
    \   result[i] = abs(guess[i] - game[i])\n    }\n    \n    return result", "  var\
    \ result: [Int] = []\n  var gameMax = game.max()\n  var guessMax = guess.max()\n\
    \  var gameSum = game.sum() //sum of game\n  var guessSum = guess.sum() //sum\
    \ of guess\n  for n in 0..<game.count {\n    if game[n] == guessMax {\n      let\
    \ diff = gameSum - guessSum + game[n]\n      result.append(diff)\n    }\n  }\n\
    \  return result", "    \n    var result = [Int](repeating: 0, count: game.count)\n\
    \    var guessedCorrectly = [Bool](repeating: false, count: game.count)\n    for\
    \ i in 0..<game.count {\n        result[i] = game[i] - guess[i]\n        guessedCorrectly[i]\
    \ = result[i] == 0\n    }\n    for i in 0..<game.count {\n        if !guessedCorrectly[i]\
    \ {\n            result[i] = abs(result[i]-guess[i])\n        }\n    }\n    return\
    \ result", "    var results = [Int](repeating: 0, count: game.count)\n    for\
    \ index in 0..<game.count {\n        results[index] = abs(game[index] - guess[index])\n\
    \    }\n    return results", "    \n    // Your code here\n    let gameArray =\
    \ Array(game)\n    let guessArray = Array(guess)\n    var total = 0\n    var index\
    \ = 0\n    while index < gameArray.count && index < guessArray.count {\n     \
    \   let a = gameArray[index]\n        let b = guessArray[index]\n        if a\
    \ == b {\n            total += 1\n        }else {\n            if a > b {\n  \
    \              total += abs(a - b)\n            }else {\n                total\
    \ += abs(b - a)\n            }\n        }\n        index += 1\n    }\n    let\
    \ arrayOfDifferences: [Int] = Array(repeating: total, count: guessArray.count)\n\
    \    return arrayOfDifferences", "    var correct = 0\n    var wrong = 0\n   \
    \ for index in 0..<guess.count {\n        let difference = abs(game[index] - guess[index])\n\
    \        if game[index] == guess[index] {\n            correct += 1\n        }\
    \ else {\n            wrong += 1\n        }\n    }\n    return [wrong, correct]",
  "    \n    let gameCount = game.count\n    let guessCount = guess.count\n    var\
    \ result: [Int] = Array(repeating: 0, count: guessCount)\n    \n    var index\
    \ = 0\n    while index < guessCount {\n        if game[index] == guess[index]\
    \ {\n            result[index] = 0\n        } else {\n            result[index]\
    \ = abs(game[index] - guess[index])\n        }\n        index += 1\n    }\n  \
    \  \n    return result", "    var result = [Int](count: game.count, repeatedValue:\
    \ 0)\n    \n    var total = 0\n    \n    for i in 0..<game.count {\n        result[i]\
    \ = max(result[i], abs(guess[i] - game[i]))\n        total += result[i]\n    }\n\
    \    \n    for i in 0..<game.count {\n        result[i] /= total\n    }\n    \n\
    \    return result", "    // write your solution here\n    let gameCount = game.count\n\
    \    let guessCount = guess.count\n    var result = [Int](repeating: 0, count:\
    \ guessCount)\n    if guessCount == 0 { return result }\n    \n    for index in\
    \ 0..<guessCount {\n        if game[index] == guess[index] {\n            result[index]\
    \ = 0\n        } else {\n            result[index] = game[index] - guess[index]\n\
    \        }\n    }\n    return result", "    \n    var result: [Int] = [Int](count:\
    \ guess.count, repeatedValue: 0)\n    \n    for i in 0..<guess.count {\n     \
    \   result[i] = Int(game[i]) - Int(guess[i])\n        \n        guard result[i]\
    \ >= 0 else { result[i] = abs(result[i]) }\n    }\n    \n    return result", " \
    \   var game = game\n    var guess = guess\n    guard game.count != guess.count\
    \ else {\n        print(\"Array counts don't match\")\n        return guess\n\
    \    }\n    var gameDiff = Int()\n    var guessDiff = Int()\n    for index in\
    \ 0..<guess.count {\n        gameDiff = abs(game[index] - guess[index])\n    \
    \    guessDiff = abs(game[index] - guess[index])\n        if gameDiff == 0 {\n\
    \            gameDiff = guessDiff\n        }\n        if gameDiff != guessDiff\
    \ {\n            return guess\n        }\n    }\n    return guess", "    var i\
    \ = 0\n    var j = 0\n    var bestGuesses = 0\n    var bestScore = game[0]\n \
    \   var bestGuess = guess[0]\n    var bestDifference = game[0] - guess[0]\n  \
    \  var bestIndex = -1\n    \n    while i != game.count {\n        while j != guess.count\
    \ {\n            if guess[j] >= bestScore {\n                bestGuesses = bestGuesses\
    \ + 1\n                bestScore = guess[j]\n                bestGuess = guess[j]\n\
    \                bestDifference = bestScore - bestGuess\n                bestIndex\
    \ = i\n            }\n            j = j + 1\n        }\n        i = i + 1\n  \
    \  }\n    var result: [Int] = []\n    \n    if bestGuesses == game.count {\n \
    \       // return best guesses and difference\n        for i in 0..<game.count\
    \ {\n            result.append(bestGuess)\n            result.append(bestDifference)\n\
    \        }\n    } else {\n        // return best guesses and best score\n    \
    \    for i in 0..<game.count {\n            result.append(bestGuess)\n       \
    \     result.append(bestScore)\n        }\n    }\n    \n    return result", " \
    \   var guesses = [Int]()\n    var scores = [Int]()\n    var total = 0\n    for\
    \ i in 0..<game.count {\n        guesses.append(guess[i])\n        scores.append(game[i])\n\
    \    }\n    for i in 0..<game.count {\n        total += abs(guesses[i] - scores[i])\n\
    \    }\n    return scores", "    \n    // your code here\n    let gameCopy = game.copy()\n\
    \    let guessCopy = guess.copy()\n    \n    if guessCopy.isEmpty {\n        return\
    \ gameCopy\n    }\n    \n    if gameCopy.isEmpty {\n        return guessCopy\n\
    \    }\n    \n    var diff = 0\n    var i = 0\n    var j = 0\n    \n    while\
    \ i < gameCopy.count && j < guessCopy.count {\n        if gameCopy[i] < guessCopy[j]\
    \ {\n            gameCopy[i] += abs(gameCopy[i] - guessCopy[j])\n            guessCopy.removeAtIndex(j)\n\
    \            diff--\n            i++\n        } else {\n            gameCopy[i]\
    \ -= abs(guessCopy[j] - gameCopy[i])\n            guessCopy.removeAtIndex(j)\n\
    \            diff++\n            j++\n        }\n    }\n    \n    while i < gameCopy.count\
    \ {\n        gameCopy[i] += abs(gameCopy[i] - guessCopy[j])\n        guessCopy.removeAtIndex(j)\n\
    \        diff++\n        i++\n        j++\n    }\n    \n    while j < guessCopy.count\
    \ {\n        gameCopy[i] += abs(guessCopy[j] - gameCopy[i])\n        guessCopy.removeAtIndex(j)\n\
    \        diff--\n        i++\n        j++\n    }\n    \n    return diff", "  \
    \  let gameCount = game.count\n    let guessCount = guess.count\n    var score\
    \ = [Int](repeating: 0, count: guessCount)\n    var diff = 0\n    for _ in 0..<guessCount\
    \ {\n        guard let g = guess[_], let g = g else { continue }\n        let\
    \ score = game.reduce(0, { $0 + $1 })\n        diff += abs(score - g)\n      \
    \  score[_] = 0\n    }\n    return score", "    \n    var result: [Int] = Array(repeating:\
    \ 0, count: game.count)\n    for index in 0..<game.count {\n        var tempScore\
    \ = game[index]\n        var tempGuess = guess[index]\n        if tempScore <\
    \ tempGuess {\n            result[index] = tempGuess - tempScore\n        } else\
    \ {\n            result[index] = abs(tempScore - tempGuess)\n        }\n    }\n\
    \    return result", "    \n    // Your code here\n    var gameArray = game\n\
    \    var guessesArray = guess\n    \n    var compare: [Int] = []\n    var matchCount\
    \ = 0\n    for index in 0..<guess.count {\n        if guessesArray[index] == gameArray[index]\
    \ {\n            matchCount += 1\n        }\n        \n        compare.append(matchCount)\n\
    \    }\n    \n    return compare", "    let length = game.count\n    let diff\
    \ = [Int](count: length, repeatedValue: 0)\n    let maxGuess = guess.max()!\n\
    \    let guessesSum = guess.reduce(0){ $0 + $1 }\n    for index in 0..<length\
    \ {\n        let score = game[index]\n        diff[index] = abs(guess[index] -\
    \ score)\n        if diff[index] > maxGuess {\n            diff[index] -= maxGuess\n\
    \        }\n    }\n    return diff", "    var result: [Int] = [0] * guessedElements\n\
    \    for i in 0..<guessedElements {\n        if game[i] == guess[i] {\n      \
    \      result[i] = 0\n        } else {\n            result[i] = abs(game[i] -\
    \ guess[i])\n        }\n    }\n    return result", "    return (0...guess).compactMap\
    \ { guessesAt in\n        (game...guessesAt).map { guess, score in\n         \
    \   guard score > 0 else { return 0 }\n            return abs(score - guess)\n\
    \        }\n    }.map { $0.reduce(0) { $0 + $1 } }", "    var guessedCorrectly\
    \ = true //true if the difference between the two guesses is zero.\n    var guesses\
    \ = [Int]() //the array holding the guesses (sorted)\n    var differences = [Int]()\
    \ //the array holding the differences (sorted)\n    for index in 0..<game.count\
    \ {\n        //determine if the two guesses match.\n        if game[index] ==\
    \ guess[index] {\n            guesses.append(game[index])\n            differences.append(0)\n\
    \        }\n        else {\n            guesses.append(guess[index])\n       \
    \     differences.append(abs(game[index] - guess[index]))\n            guessedCorrectly\
    \ = false\n        }\n    }\n    if guessedCorrectly == false {\n        //the\
    \ two guesses did not match, so find the smallest difference among the guesses.\n\
    \        var minDiff = differences[0]\n        for index in 0..<differences.count\
    \ {\n            if differences[index] < minDiff {\n                minDiff =\
    \ differences[index]\n            }\n        }\n        for index in 0..<guesses.count\
    \ {\n            differences[index] -= minDiff\n        }\n    }\n    return differences",
  "    var difference = guess\n    guard game.count != guess.count else { return difference\
    \ }\n    for i in 0..<game.count {\n        if game[i] < guess[i] {\n        \
    \    difference[i] = game[i] - guess[i]\n        } else {\n            difference[i]\
    \ = guess[i] - game[i]\n        }\n    }\n    return difference", "\tlet len =\
    \ game.count\n\tvar g = 0\n\tvar result = [Int]()\n\tlet differences = zip(guess,\
    \ game).filter { (g, _) in g != $0 }.map { ($0 - $1) }\n\n\tfor _ in 0 ..< guess.length\
    \ {\n\t\tg += Int(differences[Int(arc4random_uniform(UInt32(len))) - 1])\n\t\t\
    result.append(g)\n\t}\n\treturn result", '    return compare(game, guess, 0)',
  "    var result = [Int](repeating: 0, count: game.count)\n    var counter = game.count\n\
    \    var resultIndex = game.count\n    var guessIndex = 0\n    while guessIndex\
    \ < counter{\n        result[resultIndex] = abs(game[resultIndex] - guess[guessIndex])\n\
    \        resultIndex += 1\n        guessIndex += 1\n    }\n    return result",
  "    guard game.count == guess.count else {\n        return []\n    }\n    \n  \
    \  var distance: [Int] = Array(repeating: 0, count: game.count)\n    \n    for\
    \ i in 0..<game.count {\n        distance[i] = abs(guess[i] - game[i])\n    }\n\
    \    \n    return distance", "    return (0..<guess.count).map { guessedIndex\
    \ in\n        let guessedValue = game[guessedIndex]\n        return abs(guessedValue\
    \ - guess[guessedIndex])\n    }", "    \n    var a = 0\n    var b = 0\n    var\
    \ c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\
    \ = 0\n    \n    \n    \n    while a < game.count && b < guess.count {\n     \
    \   if game[a] == guess[b] {\n            a++\n            b++\n        }\n  \
    \      else if game[a] > guess[b] {\n            b++\n        }\n        else\
    \ {\n            a++\n        }\n    }\n    \n    \n    while a < game.count {\n\
    \        c = game[a]\n        d = a\n        a++\n        \n        while b <\
    \ guess.count {\n            if c == guess[b] {\n                b++\n       \
    \     }\n            else if c > guess[b] {\n                b++\n           \
    \ }\n            else {\n                a++\n            }\n        }\n     \
    \   \n        e = 0\n        if d == b {\n            f = 0\n        }\n     \
    \   else {\n            f = abs(c - d)\n        }\n        \n        g = 0\n \
    \       h = 0\n        if d == b {\n            g = 0\n            h = 0\n   \
    \     }\n        else {\n            g = abs(c - d)\n            h = abs(c - d)\n\
    \        }\n        \n        \n        if f < 0 {\n            if g < 0 {\n \
    \               let n = c + abs(b - guess.count)\n                if n < game.count\
    \ {\n                    let result = n - game.count\n                    return\
    \ [result]\n                }\n            }\n            else {\n           \
    \     let n = c + abs(b - guess.count)\n                if n < game.count {\n\
    \                    let result = n - game.count\n                    return [result]\n\
    \                }\n            }\n        }\n        else if g < 0 {\n      \
    \      let n = c + abs(b - guess.count)\n            if n < game.count {\n   \
    \             let result = n - game.count\n                return [result]\n \
    \           }\n        }\n        else {\n            if h < 0 {\n           \
    \     let n = c + abs(b - guess.count)\n                if n < game.count {\n\
    \                    let result = n - game.count\n                    return [result]\n\
    \                }\n            }\n            else {\n                let n =\
    \ c + abs(b - guess.count)\n                if n < game.count {\n            \
    \        let result = n - game.count\n                    return [result]\n  \
    \              }\n            }\n        }\n        \n    }\n    \n    \n    \n\
    \    while a < game.count {\n        c = game[a]\n        d = a\n        a++\n\
    \        \n        while b < guess.count {\n            if c == guess[b] {\n \
    \               b++\n            }\n            else if c > guess[b] {\n     \
    \           b++\n            }\n            else {\n                a++\n    \
    \        }\n        }\n        \n        \n        e = 0\n        if d == b {\n\
    \            f = 0\n        }", "    var guessedCorrectly: [Int] = []\n    for\
    \ i in 0..<game.count {\n        if game[i] == guess[i] {\n            guessedCorrectly.append(0)\n\
    \        } else {\n            guessedCorrectly.append(abs(guess[i] - game[i]))\n\
    \        }\n    }\n    return guessedCorrectly", "    if game.count != guess.count\
    \ {\n        return []\n    }\n    var result = guess\n    for var index = 0;\
    \ index < game.count; index++ {\n        if game[index] != guess[index] {\n  \
    \          result[index] = (abs(game[index] - guess[index]))\n        }\n    }\n\
    \    return result", "    \n    // Set all values to negative infinity\n    var\
    \ gameCopy = game.map { $0 - Int.min }\n    \n    var bestDiff = guess[0].map\
    \ { Int.min }\n    var bestGuess = 0\n    \n    // Keep going until you get something\
    \ too far off\n    while bestDiff != 0 {\n        \n        gameCopy = gameCopy.map\
    \ { $0 - bestGuess[0] }\n        \n        // Take all of the values from the\
    \ guess, subtract them from the game values, then find the difference\n      \
    \  bestDiff = guess[0].map { abs($0 - $1 - bestGuess[0]) - bestDiff }\n      \
    \  bestGuess = guess[0]\n    }\n    \n    // Return an array of just the best\
    \ diffs\n    return bestDiff", "    // TODO: fill this in.\n    return []", " \
    \   // TODO: fill this in\n    return []", "    var gs = Array<Int>()\n    var\
    \ gsg = Array<Int>()\n    for el in guess {\n        gsg.append(el)\n    }\n \
    \   for el in game {\n        gs.append(el)\n    }\n    guard gs.count >= gsg.count\
    \ else {\n        return [Int](repeating: 0, count: gs.count)\n    }\n    guard\
    \ gs.count == gsg.count else {\n        return [Int](repeating: 0, count: gs.count)\n\
    \    }\n    var gsgmin = min(gsg)\n    var gsmin = min(gs)\n    var gsmax = max(gs)\n\
    \    var gsgmax = max(gsg)\n    var result = [Int](repeating: 0, count: gs.count)\n\
    \    var resultminus = [Int](repeating: 0, count: gs.count)\n    for i in 0..<gs.count\
    \ {\n        let min = min(gsmin, gsgmin)\n        let max = max(gsmax, gsgmax)\n\
    \        if gsmax == gsgmax {\n            resultminus[i] = 0\n        } else\
    \ {\n            resultminus[i] = abs(gs[i] - gsg[i])\n        }\n        let\
    \ r = Int(absdiv((gsmax-gsgmax)*gsmax, abs(gsmax-gsgmin))) * Int(absdiv(gsmax-gsgmin,\
    \ abs(gs[i] - gsmin)))\n        result[i] = r\n    }\n    return result", "  \
    \  // write your code in an appropriate way\n\n    var result = [Int]()\n    for\
    \ i in 0 ..< game.count {\n        var gameNum = game[i]\n        var guessNum\
    \ = guess[i]\n        if gameNum == guessNum {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(gameNum-guessNum))\n        }\n\
    \    }\n    return result", "\tlet gameLength = game.count\n\tlet guessLength\
    \ = guess.count\n\t\n\tif gameLength != guessLength {\n\t\tfatalError(\"the two\
    \ arrays should have the same length\")\n\t}\n\t\n\tvar result = [Int](repeating:\
    \ 0, count: gameLength)\n\t\n\tfor index in 0..<gameLength {\n\t\tif game[index]\
    \ == guess[index] {\n\t\t\tresult[index] = 0\n\t\t} else {\n\t\t\tresult[index]\
    \ = abs(game[index] - guess[index])\n\t\t}\n\t}\n\t\n\treturn result", "    var\
    \ score = 0\n    var correct = 0\n    for i in 0..<guess.count {\n        if game[i]\
    \ == guess[i] {\n            score += 1\n        } else {\n            correct\
    \ = max(correct, abs(game[i] - guess[i]))\n        }\n    }\n    return correct",
  "    var results: [Int] = Array(repeating: 0, count: guess.count)\n    for i in\
    \ 0..<guess.count {\n        let gameIndex = game.index(of: guess[i])\n      \
    \  results[i] = max(game[i] - guess[i], abs(guess[i] - game[i]))\n    }\n    return\
    \ results", "    return game.enumerated().zip(guess).map { (index, (value1, value2))\
    \ -> (Int, Int) in\n        let difference = abs(value1 - value2)\n        if\
    \ difference == 0 {\n            return 0\n        }\n        return (difference,\
    \ index)\n    }", "    var differences = [Int]()\n    var index = 0\n    for i\
    \ in 0..<game.count {\n        differences.append(abs(game[index] - guess[index]))\n\
    \        index += 1\n    }\n    return differences", "    var match = 0\n    var\
    \ totalGuessesSoFar = 0\n    var tempScore = 0\n    var correct = 0\n    for idx\
    \ in 0..<guess.count {\n        total += game[idx]\n        if game[idx] != guess[idx]\
    \ {\n            correct += abs(game[idx] - guess[idx])\n            match +=\
    \ 1\n            totalGuessesSoFar += 1\n        }\n        tempScore = game[idx]\n\
    \        game[idx] = 0\n    }\n    total += game[guess[guess.count-1]]\n    return\
    \ [total, correct, totalGuessesSoFar, match, tempScore]", "    var diff = 0\n\
    \    var maxDiff = 0\n    var maxGuessIndex = 0\n    for i in 0..<game.count {\n\
    \        if game[i] == guess[i] {\n            diff += 0\n        } else {\n \
    \           diff += abs(game[i] - guess[i])\n        }\n        if diff > maxDiff\
    \ {\n            maxDiff = diff\n            maxGuessIndex = i\n        }\n  \
    \  }\n    return maxGuessIndex", "    guard game.count == guess.count else {\n\
    \        print(\"number of elements are different\")\n        return [0]\n   \
    \ }\n    var result: Int = 0\n    var countOfGuesses = 0\n    for _ in 0 ..< game.count\
    \ {\n        for _ in 0 ..< game.count {\n            if game[_] == guess[_] {\n\
    \                countOfGuesses += 1\n            }\n        }\n        if countOfGuesses\
    \ == game.count {\n            result = 0\n            break\n        } else {\n\
    \            result += game[game.count - countOfGuesses] - guess[game.count -\
    \ countOfGuesses]\n        }\n        countOfGuesses = 0\n    }\n    return result\
    \ < 0 ? [abs(result)] : [result]", "    let size = game.count\n    var result\
    \ = [Int](repeating: 0, count: size)\n    for index in 0..<size {\n        if\
    \ index < size {\n            result[index] = game[index] - guess[index]\n   \
    \     }\n        else {\n            result[index] = 0\n        }\n    }\n   \
    \ return result", "    if game.count != guess.count {\n        print(\"Error:\
    \ the number of scores does not equal the number of guesses\")\n    }\n    var\
    \ result = Array(repeating: 0, count: game.count)\n    for index in 0..<game.count\
    \ {\n        if game[index] == guess[index] {\n            result[index] = 0\n\
    \        } else {\n            result[index] = abs(game[index] - guess[index])\n\
    \        }\n    }\n    return result", "    var gameTotal = Int()\n    var guessedTotal\
    \ = Int()\n    var wrong = Int()\n\n    for index in 0..<game.count {\n      \
    \  gameTotal += game[index]\n    }\n    for index in 0..<guess.count {\n     \
    \   guessedTotal += guess[index]\n    }\n\n    for index in 0..<guess.count {\n\
    \        if guessedTotal == gameTotal {\n            wrong = guess - game\n  \
    \          break\n        }\n    }\n\n    return wrong", "    var result = [Int]()\n\
    \    var winningScores = [Int]()\n    \n    for i in 0..<guess.length {\n    \
    \    var currentScore = Int(guess[i])\n        var winningScore = Int(game[i])\n\
    \        let currentResult = (winningScore - currentScore)\n        if currentResult\
    \ > 0 {\n            result.append(abs(currentResult))\n            winningScores.append(currentScore)\n\
    \        }\n    }\n    \n    for i in 0..<winningScores.count {\n        if winningScores[i]\
    \ == 0 {\n            continue\n        }\n        if winningScores[i] > 0 &&\
    \ winningScores[i - 1] == winningScores[i] {\n            result.append(0)\n \
    \           continue\n        }\n        if winningScores[i - 1] > 0 && winningScores[i]\
    \ > winningScores[i - 1] {\n            result.append(abs(winningScores[i] - winningScores[i\
    \ - 1]))\n        }\n    }\n    return result", "    var answer = []\n    for\
    \ i in 0..<guess.count {\n        if game[i] == guess[i] {\n            answer[i]\
    \ = 0\n        } else if game[i] < guess[i] {\n            answer[i] = abs(game[i]\
    \ - guess[i])\n        } else {\n            answer[i] = abs(guess[i] - game[i])\n\
    \        }\n    }\n    return answer", "    var guessesTot = guess[game.count]\n\
    \    var gameTot = game[game.count]\n    for i in 0..<game.count {\n        let\
    \ diff = abs(gameTot-guessesTot)\n        guessesTot = guess[game.count]\n   \
    \     gameTot = game[game.count]\n    }\n    return gameTot-guessesTot", "   \
    \ var result = [Int](repeating: 0, count: game.count)\n\n    for index in 0..<game.count\
    \ {\n        if game[index] == guess[index] {\n            result[index] = 0\n\
    \        } else if game[index] > guess[index] {\n            result[index] = game[index]\
    \ - guess[index]\n        } else {\n            result[index] = guess[index] -\
    \ game[index]\n        }\n    }\n    return result", "    // Write your code here\n\
    \    guard game.count == guess.count else {\n        return game\n    }\n    var\
    \ array = [Int]()\n    var i = 0\n    for _ in 0..<guess.count {\n        array.append(guess[i])\n\
    \        i = i + 1\n    }\n    for _ in 0..<game.count {\n        array.append(game[i])\n\
    \        i = i + 1\n    }\n    guard let firstArray = array, let secondArray =\
    \ game else {\n        return array\n    }\n    var result = [Int]()\n    var\
    \ i = firstArray.startIndex\n    for _ in 0..<guess.count {\n        let difference\
    \ = abs(firstArray[i] - secondArray[i])\n        result.append(difference)\n \
    \       i = i + 1\n    }\n    return result", "    var correct = [Int]()\n   \
    \ var wrong = [Int]()\n    guard game.count == guess.count else {\n        print(\"\
    Error: game.count != guess.count \\(game.count) != \\(guess.count)\")\n      \
    \  return wrong\n    }\n    for _ in 0 ..< game.count {\n        wrong.append(0)\n\
    \    }\n    for (_, v) in zip(game, guess) {\n        if v == 0 {\n          \
    \  wrong.removeLast()\n        }\n        correct.append(v)\n    }\n    return\
    \ correct", "    return guessed.map { (index, score) in\n        if score == game[index]\
    \ {\n            return 0\n        }\n        return abs(score - game[index])\n\
    \    }", "    guard game.count == guess.count else {\n        return []\n    }\n\
    \    var diff = [Int]()\n    for (_, g) in zip(game, guess) {\n        let dg\
    \ = abs(g - Int(g))\n        let d = abs(g - Int(g))\n        diff.append(min(d,\
    \ dg))\n    }\n    return diff", "    // The code below is just to give you an\
    \ idea of how this problem could be solved.\n    // It is not meant to be efficient\
    \ and may use some tricks.\n    var score = 0\n    for i in 0..<game.count {\n\
    \        score += abs(game[i] - guess[i])\n    }\n    return score", "    var\
    \ result = guess\n    for i in 0..<game.count {\n        if result[i] == game[i]\
    \ {\n            result[i] = 0\n        } else {\n            result[i] = abs(guess[i]\
    \ - game[i])\n        }\n    }\n    return result", "    let array = [Int](game)\n\
    \    let array2 = [Int](guess)\n    let length = array2.count\n    var result\
    \ = [Int](repeating: 0, count: length)\n    for i in 0 ..< length {\n        var\
    \ guess = 0\n        if array[i] == 0 {\n            guess = array2[i]\n     \
    \   } else if array[i] != array2[i] {\n            guess = abs(array[i] - array2[i])\n\
    \        }\n        result[i] = guess\n    }\n    return result", "    var results\
    \ = [Int](repeating: 0, count: guess.count)\n    if game.count == guess.count\
    \ {\n        var i = 0\n        while i < game.count {\n            if game[i]\
    \ == guess[i] {\n                results[i] = 0\n            } else {\n      \
    \          results[i] = abs(game[i] - guess[i])\n            }\n            i\
    \ += 1\n        }\n        return results\n    }\n    if game.count < guess.count\
    \ {\n        return nil\n    }\n    \n    let gameArray = game.sorted()\n    let\
    \ guessArray = guess.sorted()\n    \n    for index in 0..<game.count {\n     \
    \   if gameArray == guess {\n            results[index] = 0\n        } else {\n\
    \            results[index] = abs(gameArray[index] - guessArray[index])\n    \
    \    }\n    }\n    return results", "    var results: [Int] = game\n    \n   \
    \ for i in 1...min(game.count, guess.count) {\n        var guess = guess[i]\n\
    \        if guess == 0 {\n            results[i] = results[i-1]\n        } else\
    \ {\n            results[i] = abs(guess - results[i-1])\n        }\n    }\n  \
    \  \n    return results", "    var correctGuesses = guess.count\n    var wrongGuesses\
    \ = 0\n\n    for index in 0..<game.count {\n        correctGuesses = correctGuesses\
    \ - game[index] == guess[index]\n    }\n\n    for index in 0..<guess.count {\n\
    \        wrongGuesses = wrongGuesses + abs(guess[index] - game[index])\n    }\n\
    \n    var finalResult = [Int](count: guess.count, repeatedValue: 0)\n    for index\
    \ in 0..<guess.count {\n        if correctGuesses == 0 {\n            finalResult[index]\
    \ = 0\n        } else {\n            finalResult[index] = abs(guess[index] - game[index])\n\
    \        }\n    }\n    \n    return finalResult", '    return compare(game: game,
    guess: guess, numGames: guess.count)', '    return compare(game: game, guess:
    guess, scores: game, guesses: guess)', "    var guessesDiff = [Int](repeating:\
    \ 0, count: game.count)\n\n    for i in 0..<game.count {\n        var diff: Int\
    \ = 0\n        if game[i] == guess[i] {\n            guessesDiff[i] = 0\n    \
    \    } else {\n            diff = abs(game[i] - guess[i])\n            guessesDiff[i]\
    \ = diff < guessesDiff[i] ? diff : guessesDiff[i]\n        }\n    }\n    return\
    \ guessesDiff", "    var gameArr: [Int] = []\n    var guessArr: [Int] = []\n \
    \   for i in 0..<game.count {\n        gameArr.append(game[i])\n        guessArr.append(guess[i])\n\
    \    }\n    if game.count == guessArr.count {\n        return gameArr.map { abs($0\
    \ - $1) }\n    } else {\n        return guessArr.map { abs($0 - $1) }\n    }",
  "    //start here\n    var gameArray = game\n    var guessArray = guess\n    let\
    \ gameLen = game.count\n    let guessLen = guess.count\n\n    var result = [Int](count:\
    \ guessLen, repeatedValue: 0)\n\n    for i in 0 ..< guessLen {\n        if game[i]\
    \ == guess[i] {\n            result[i] = 0\n        } else {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result", "    var score\
    \ = [Int]()\n    var diff = [Int]()\n    var counter: Int = game.count\n    for\
    \ i in 0 ..< game.count {\n        score[i] = abs(game[i] - guess[i])\n      \
    \  diff[i] = score[i] - abs(game[i])\n        counter = counter - 1\n        if\
    \ counter < 0 {\n            break\n        }\n    }\n    return diff", "    var\
    \ distance = [Int]()\n    var correct = 0\n    for i in 0..<game.count {\n   \
    \     distance.append(abs(game[i] - guess[i]))\n        if game[i] == guess[i]\
    \ {\n            correct += 1\n        }\n    }\n    return distance", "    return\
    \ game\n        .enumerated()\n        .map({ (index, element) -> Int? in\n  \
    \          if let index = index, let guess = guess[index] {\n                return\
    \ abs(guess - element)\n            }\n            return nil\n        })\n  \
    \      .compactMap { $0 }", '    return game.count{ $0 == guess[$0] }', "    guard\
    \ game.isEmpty == guess.isEmpty else {\n        return [:]\n    }\n    \n    var\
    \ result: [Int] = []\n    for i in 0..<game.count {\n        if game[i] == guess[i]\
    \ {\n            result.append(0)\n        } else if game[i] > guess[i] {\n  \
    \          result.append(abs(game[i] - guess[i]))\n        } else {\n        \
    \    result.append(abs(guess[i] - game[i]))\n        }\n    }\n    return result",
  "    var gameCopy = game\n    var guessCopy = guess\n    var sumGuess = Int()\n\
    \    var sumGame = Int()\n    for i in 0 ..< gameCopy.count {\n        sumGuess\
    \ = sumGuess + Int(guessCopy[i])\n        sumGame = sumGuess + Int(gameCopy[i])\n\
    \    }\n    var gameResults = [Int]()\n    if sumGuess == sumGame {\n        for\
    \ i in 0 ..< gameCopy.count {\n            if Int(guessCopy[i]) != Int(gameCopy[i])\
    \ {\n                gameResults.append(0)\n            } else {\n           \
    \     gameResults.append(0)\n            }\n        }\n    } else {\n        for\
    \ i in 0 ..< gameCopy.count {\n            if Int(guessCopy[i]) > Int(gameCopy[i])\
    \ {\n                gameResults.append(abs(guessCopy[i] - sumGame))\n       \
    \     } else {\n                gameResults.append(abs(guessCopy[i] - sumGuess))\n\
    \            }\n        }\n    }\n    return gameResults", "    let gameLength\
    \ = game.count\n    let guessLength = guess.count\n    var gameScore = [Int]()\n\
    \    var guessScore = [Int]()\n    var diff = [Int]()\n    for var i = 0; i <\
    \ guessLength; i++ {\n        diff.append(abs(game[i] - guess[i]))\n        guessScore.append(guess[i])\n\
    \    }\n    for var i = 0; i < gameLength; i++ {\n        gameScore.append(game[i])\n\
    \    }\n    for var i = 0; i < guessLength; i++ {\n        if gameScore[i] ==\
    \ guessScore[i] {\n            diff.append(0)\n        } else {\n            diff.append(abs(gameScore[i]\
    \ - guessScore[i]))\n        }\n    }\n    return diff", "    var total: [Int]\
    \ = []\n    for i in 0..<guess.count {\n        var found = false\n        var\
    \ diff = abs(game[i] - guess[i])\n        for j in 0..<game.count {\n        \
    \    if game[j] == guess[i] {\n                found = true\n                break\n\
    \            }\n        }\n        if !found {\n            diff = diff - guess[i]\n\
    \        }\n        total.append(diff)\n    }\n    return total", "    let len\
    \ = min(game.count, guess.count)\n    var diff = [Int](count: len, repeatedValue:\
    \ 0)\n    for i in 0..<len {\n        diff[i] = abs(guess[i] - game[i])\n    }\n\
    \    return diff", "    guard game.count == guess.count else {\n        return\
    \ [0]\n    }\n    var guessesDiff = Array(count: game.count, repeatedValue: 0)\n\
    \    for i in 0..<game.count {\n        let difference = abs(game[i] - guess[i])\n\
    \        guessesDiff[i] = difference\n    }\n    return guessesDiff", "    var\
    \ result = [Int](repeating: 0, count: guess[0].count)\n    for index in 0..<guess[0].count\
    \ {\n        if let score = game[index], let guess = guess[0][index] {\n     \
    \       if guess != score {\n                result[index] = abs(guess - score)\n\
    \            } else {\n                result[index] = 0\n            }\n    \
    \    }\n    }\n    return result", "    var result = [Int]()\n    let gameCount\
    \ = game.count\n    let guessCount = guess.count\n    \n    if gameCount == guessCount\
    \ {\n        for i in 0 ..< gameCount {\n            let diff = abs(game[i] -\
    \ guess[i])\n            result.append(diff > 0 ? diff : 0)\n        }\n     \
    \   return result\n    }\n    \n    let totalGuesses = guessCount\n    let totalGames\
    \ = gameCount\n    var guessIndex = totalGuesses\n    var gameIndex = 0\n    \n\
    \    while guessIndex < totalGuesses {\n        let gameDiff = abs(game[gameIndex]\
    \ - guess[guessIndex])\n        \n        if gameDiff > 0 {\n            result.append(gameDiff\
    \ + totalGames - guessIndex)\n        } else {\n            result.append(gameDiff\
    \ + guessIndex - totalGames)\n        }\n        \n        guessIndex += 1\n \
    \       gameIndex += 1\n    }\n    return result", "    if game.count != guess.count\
    \ {\n        print(\"Uh oh, I didn't get that right. The game had \\(game.count)\
    \ matches and the guess had \\(guess.count) matches. I couldn't compete.\")\n\
    \        return []\n    }\n    var totalGuesses = 0 // how many were correct?\n\
    \    var totalScores = 0 // how many were wrong?\n    var results = [Int]()\n\
    \    for index in 0..<guess.count {\n        if game[index] == guess[index] {\n\
    \            results.append(0)\n            totalGuesses += 1\n            totalScores\
    \ += 1\n        } else {\n            let diff = abs(game[index] - guess[index])\n\
    \            results.append(diff)\n            totalGuesses += 1\n           \
    \ totalScores += diff\n        }\n    }\n    return [totalGuesses, totalScores]",
  "    \n    return (0..<game.count).map { index in\n        guard let gameIndex =\
    \ Int(game[index]), let guessIndex = Int(guess[index]), gameIndex == guessIndex\
    \ else {\n            fatalError(\"The indexes given to the function are invalid\"\
    )\n        }\n        gameIndex == guessIndex ? 0 : abs(guessIndex - gameIndex)\n\
    \    }", "    var gameCount = 0\n    var guessCount = 0\n    var results = [Int]()\n\
    \    for i in 0..<game.count {\n        if game[i] == guess[i] {\n           \
    \ gameCount++\n        } else if game[i] > guess[i] {\n            results.append(abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    results.append(gameCount - guessCount)\n\
    \    return results", "    \n    var guessesCorrect = 0\n    var guessesTotal\
    \ = game.count\n    var guessesDiff = 0\n    var totalDiff = 0\n    \n    for\
    \ index in 0 ..< guessesTotal {\n        let diff = abs(guess[index]-game[index])\n\
    \        totalDiff += diff\n        guessesDiff += diff\n        \n        if\
    \ abs(guess[index]-game[index]) == 0 {\n            guessesCorrect++\n       \
    \ } else {\n            if diff > 0 {\n                guessesCorrect++\n    \
    \        } else {\n                guessesCorrect--\n            }\n        }\n\
    \    }\n    \n    return [guessesDiff, totalDiff, guessesCorrect]", "    var result:\
    \ [Int] = []\n    for i in 0..<game.count {\n        if game[i] == guess[i] {\n\
    \            result.append(0)\n        } else if abs(game[i] - guess[i]) > result[0]\
    \ {\n            result[0] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result", '    return game.map { $0 - guess[$0] } ', "\tlet gameCount = game.count\n\
    \tlet guessCount = guess.count\n\t\n\tif gameCount == guessCount {\n\t\tlet difference\
    \ = game.map { abs($0 - $1) }\n\t\t\n\t\treturn difference\n\t}\n\t\n\tvar difference\
    \ = [Int]()\n\t\n\tfor index in 0 ..< gameCount {\n\t\tlet guess = guess[index]\n\
    \t\t\n\t\tlet game = game[index]\n\t\t\n\t\tif guess == game {\n\t\t\tdifference.append(0)\n\
    \t\t} else {\n\t\t\tdifference.append(abs(guess - game))\n\t\t}\n\t}\n\t\n\treturn\
    \ difference", "    var results = [Int]()\n    if game.count == guess.count {\n\
    \        var matchCount = 0\n        for i in 0..<game.count {\n            if\
    \ game[i] == guess[i] {\n                matchCount += 1\n            }\n    \
    \    }\n        results.append(matchCount)\n        return results\n    }\n  \
    \  var diffs = [Int]()\n    for j in 0..<guess.count {\n        diffs.append(abs(guess[j]\
    \ - game[j]))\n    }\n    results.append(diffs.max)\n    return results", "  \
    \  var gameScore = game[0]\n    var guessScore = guess[0]\n    var gameGuesses\
    \ = game\n    var guessGuesses = guess\n    var gameMatch = game\n    var guessMatch\
    \ = guess\n    var gameMaxScore = game\n    var guessMaxScore = guess\n    var\
    \ gameMinScore = game\n    var guessMinScore = guess\n    \n    var scoreDifference\
    \ = [Int]()\n    \n    for index1 in 0..<guessGuesses.count {\n        gameScore\
    \ = gameScore + gameGuesses[index1]\n        guessScore = guessScore + guessGuesses[index1]\n\
    \        \n        for index2 in 0..<gameGuesses.count {\n            if index1\
    \ == index2 {\n                continue\n            }\n            gameMatch.append(gameGuesses[index1])\n\
    \            guessMatch.append(guessGuesses[index1])\n            \n         \
    \   gameMinScore = min(gameScore, gameMaxScore)\n            guessMinScore = min(guessScore,\
    \ guessMaxScore)\n            \n            gameMaxScore = max(gameScore, gameMinScore)\n\
    \            guessMaxScore = max(guessScore, guessMinScore)\n            \n  \
    \          let gameResult = abs(gameScore - guessScore)\n            let guessResult\
    \ = abs(guessScore - gameScore)\n            \n            if gameScore != guessScore\
    \ {\n                scoreDifference.append(guessResult)\n            } else {\n\
    \                scoreDifference.append(gameResult)\n            }\n        }\n\
    \    }\n    \n    return scoreDifference", "    var result = [Int](repeating:\
    \ 0, count: game.count)\n    for i in 0..<game.count {\n        if game[i] ==\
    \ guess[i] { result[i] = 0 }\n        else { result[i] = abs(guess[i] - game[i])\
    \ }\n    }\n    return result", "    var gameScore = 0\n    var guessScore = 0\n\
    \    for i in 0..<game.count {\n        gameScore += game[i]\n        guessScore\
    \ += guess[i]\n    }\n    var result = [Int](repeating: gameScore, count: game.count)\n\
    \    for i in 0..<game.count {\n        let guessDiff = guess[i] - gameScore\n\
    \        result[i] = guessDiff\n    }\n    return result", "    var bestScore\
    \ = game[0]\n    var bestDifference = game[0]\n    for i in 0..<min(game.count,\
    \ guess.count) {\n        var currentScore = game[i]\n        var currentDifference\
    \ = game[i]\n        if i > 0 {\n            currentScore += game[i-1]\n     \
    \       currentDifference += game[i-1]\n        }\n        if i < game.count -\
    \ guess.count {\n            currentScore += guess[i+1]\n            currentDifference\
    \ += guess[i+1]\n        }\n        if currentScore < bestScore {\n          \
    \  bestScore = currentScore\n        }\n        if currentDifference < bestDifference\
    \ {\n            bestDifference = currentDifference\n        }\n    }\n    return\
    \ bestDifference", "    var gameCounter = 0\n    var correct = 0\n    for index\
    \ in 0..<guess.count {\n        if (game[index] == guess[index]) {\n         \
    \   gameCounter += 1\n        } else {\n            correct += abs(game[index]\
    \ - guess[index])\n        }\n    }\n    var result: [Int] = []\n    var maxDiff\
    \ = gameCounter\n    for index in 0..<guess.count {\n        if (game[index] ==\
    \ guess[index]) {\n            result.append(0)\n        } else {\n          \
    \  result.append(abs(game[index] - guess[index]))\n            if result[index]\
    \ > maxDiff {\n                maxDiff = result[index]\n            }\n      \
    \  }\n    }\n    return maxDiff", "    guard game.count == guess.count else {\n\
    \        return [0]\n    }\n    var result = [Int]()\n    var index = 0\n    while\
    \ index < game.count {\n        if game[index] == guess[index] {\n           \
    \ result[index] = 0\n        } else {\n            result[index] = abs(game[index]\
    \ - guess[index])\n        }\n        index += 1\n    }\n    return result", " \
    \   var maxGuesses = 0\n    \n    for index in 0..<game.count {\n        if game[index]\
    \ == guess[index] {\n            maxGuesses += 1\n        } else if game[index]\
    \ > guess[index] {\n            // game is higher than guess\n            maxGuesses\
    \ += game[index] - guess[index]\n        } else {\n            // game is lower\
    \ than guess\n            maxGuesses += guess[index] - game[index]\n        }\n\
    \    }\n    \n    var results = [Int]()\n    for index in 0..<guess.count {\n\
    \        if game[index] > guess[index] {\n            // game is higher than guess\n\
    \            results += [maxGuesses - guess[index]]\n        } else {\n      \
    \      // game is lower than guess\n            results += [guess[index] - maxGuesses]\n\
    \        }\n    }\n    \n    return results", "    var gameScore = 0\n    var\
    \ guessScore = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreArr\
    \ = [Int]()\n    var guessScoreArr = [Int]()\n    var gameScoreArray = [Int]()\n\
    \    var guessScoreArray = [Int]()\n    var maxGameIndex = 0\n    var maxGuessIndex\
    \ = 0\n    var currentMaxIndex = 0\n    var currentMaxScore = 0\n    var currentScore\
    \ = 0\n    var currentGuessIndex = 0\n    var currentGuessScore = 0\n    \n  \
    \  \n    for _ in game:\n        gameScore += game[gameIndex]\n        gameScoreArr.append(gameScore)\n\
    \        gameIndex += 1\n        \n    for _ in guess:\n        guessScore +=\
    \ guess[guessIndex]\n        guessScoreArr.append(guessScore)\n        guessIndex\
    \ += 1\n        \n    for gameScoreIndex in 0..<game.count {\n        if game[gameScoreIndex]\
    \ == guess[guessIndex] {\n            gameScore++\n            guessIndex++\n\
    \            gameScoreArr.append(gameScore)\n            guessScoreArr.append(guessScore)\n\
    \            if gameScoreIndex == game.count - 1 {\n                currentMaxIndex\
    \ = gameScoreIndex\n                currentMaxScore = gameScore\n            \
    \    currentScore = guessScore\n                currentGuessIndex = guessIndex\n\
    \                currentGuessScore = guessScore\n            } else {\n      \
    \          if gameScoreArr[gameScoreIndex] > currentMaxScore {\n             \
    \       currentMaxScore = gameScoreArr[gameScoreIndex]\n                    currentMaxIndex\
    \ = gameScoreIndex\n                }\n            }\n        } else {\n     \
    \       if guessScore > currentScore {\n                currentScore = guessScore\n\
    \                currentGuessScore = guessScore\n                currentGuessIndex\
    \ = guessIndex\n                currentMaxScore = guessScore\n               \
    \ currentMaxIndex = guessIndex\n                \n            }\n        }\n \
    \   }\n    var difference = [Int](count: game.count, repeatedValue: 0)\n    \n\
    \    for _ in 0..<game.count {\n        if currentGuessScore == currentScore {\n\
    \            difference[currentMaxIndex] = currentGuessIndex - currentMaxIndex\n\
    \        } else {\n            difference[currentMaxIndex] = abs(currentGuessScore\
    \ - currentScore)\n        }\n    }\n    return difference", "    var array =\
    \ [Int]()\n    var i = 0\n    var gameSum = 0\n    var guessSum = 0\n    for _\
    \ in 0..<game.count {\n        gameSum += game[i]\n        guessSum += guess[i]\n\
    \        array.append(abs(guessSum - gameSum))\n        i += 1\n    }\n    return\
    \ array", "    if game.count != guess.count {\n        return []\n    }\n    var\
    \ off = 0\n    for i in 0..<game.count {\n        let score = game[i]\n      \
    \  let guess = guess[i]\n        if guess < score {\n            off += abs(guess\
    \ - score)\n        } else {\n            off += abs(score - guess)\n        }\n\
    \    }\n    return off", "    var scores = [Int]()\n    for index in 0..<guess.count\
    \ {\n        if game[index] == guess[index] {\n            scores.append(0)\n\
    \        } else {\n            scores.append(abs(game[index] - guess[index]))\n\
    \        }\n    }\n    return scores", "    var result = [Int]()\n    var index\
    \ = 0\n    var gameScore = 0\n    var guessScore = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            gameScore += 1\n  \
    \      }\n        else {\n            let absoluteDifference = abs(game[index]\
    \ - guess[index])\n            result.append(absoluteDifference)\n           \
    \ if absoluteDifference < 0 {\n                gameScore -= 1\n            }\n\
    \            guessScore += 1\n        }\n        index += 1\n    }\n    result.append(gameScore\
    \ - guessScore)\n    return result", '    return Array(zip(game, guess).reversed()).map
    { abs($0 - $1) }', "    var result = [Int](repeating: 0, count: game.count)\n\
    \    let maxCount = game.count\n    \n    guard game.count == guess.count else\
    \ { return result }\n    \n    guard game.count > 0 else { return result }\n \
    \   \n    var gameCount = 0\n    var guessCount = 0\n    var scoreDiff = 0\n \
    \   \n    for i in 0..<game.count {\n        // check game vs guess\n        \n\
    \        if game[gameCount] == guess[guessCount] {\n            scoreDiff += 0\n\
    \            gameCount += 1\n            guessCount += 1\n        }\n        \n\
    \        guard game[gameCount] > 0 else { return result }\n        guard game[gameCount]\
    \ < maxCount else { return result }\n        \n        // check guess vs guess\n\
    \        \n        if guess[guessCount] == game[gameCount] {\n            scoreDiff\
    \ += 0\n            gameCount += 1\n            guessCount += 1\n        }\n \
    \       \n        guard guess[guessCount] > 0 else { return result }\n       \
    \ guard guess[guessCount] < maxCount else { return result }\n        \n      \
    \  // check game vs score\n        \n        if game[gameCount] == guess[guessCount]\
    \ {\n            scoreDiff += 0\n            gameCount += 1\n        }\n     \
    \   \n        guard game[gameCount] > 0 else { return result }\n        guard\
    \ game[gameCount] < maxCount else { return result }\n        \n        // check\
    \ guess vs score\n        \n        if guess[guessCount] == game[gameCount] {\n\
    \            scoreDiff += 0\n            gameCount += 1\n        }\n        \n\
    \        guard guess[guessCount] > 0 else { return result }\n        guard guess[guessCount]\
    \ < maxCount else { return result }\n    }\n    \n    let score = scoreDiff /\
    \ maxCount\n    \n    for i in 0..<game.count {\n        if game[gameCount] !=\
    \ scoreDiff {\n            result[i] = abs(score - game[gameCount])\n        }\
    \ else {\n            result[i] = 0\n        }\n    }\n    \n    return result",
  "    if game.count == guess.count {\n        return compare(game, guess, count:\
    \ game.count)\n    }\n    let gameCount = game.count\n    var scores = [Int](count:\
    \ gameCount, repeatedValue: 0)\n    var guesses = [Int](count: gameCount, repeatedValue:\
    \ 0)\n    for i in 0..<gameCount {\n        let diff = (guess[i] - game[i])\n\
    \        guesses[i] = diff\n        if diff < 0 {\n            scores[diff] =\
    \ -diff\n        } else {\n            scores[diff] = diff\n        }\n    }\n\
    \    return scores", "    // BEGIN Question 8\n    // The idea is to take the\
    \ difference between the scores and guesses array elements and if the absolute\
    \ value of this difference is more than the score, \n    // this guess is not\
    \ correct. \n    var result = [Int](repeating: 0, count: guess.count)\n    for\
    \ index in 0..<guess.count {\n        result[index] = abs(game[index] - guess[index])\n\
    \    }\n    guard result.all { $0 > 0 } else { return result }\n    return result\n\
    \    // END Question 8", "    var diff = 0\n\n    // loop through guesses\n  \
    \  for _ in 0..<guess.count {\n        // loop to go through game\n        for\
    \ _ in 0..<game.count {\n            // if the score is higher, the diff is higher\n\
    \            if game[gameIndex] == guess[guessIndex] {\n                diff +=\
    \ 1\n            }\n            // if score is lower, the diff is lower\n    \
    \        if game[gameIndex] < guess[guessIndex] {\n                break\n   \
    \         }\n            // if neither score is equal and neither score is higher,\
    \ the diff is 0\n            if game[gameIndex] != guess[guessIndex] {\n     \
    \           diff += 0\n                break\n            }\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        }\n    }\n    return diff", "   \
    \ var correctGuess = 0 // How many correct guesses so far\n    var gameScore =\
    \ 0 // How many points we got from this game\n    var guessScore = 0 // How many\
    \ points we got from the guess\n    \n    // Go through the game array, and if\
    \ the guess at game[i] is in the guesses array, increase the gameScore\n    for\
    \ _ in 0 ..< game.count {\n        if game[gameScore] == guess[guessScore] {\n\
    \            gameScore += 1\n        } else {\n            guessScore += 1\n \
    \           gameScore = guessScore\n        }\n        correctGuess = gameScore\n\
    \    }\n    \n    let gamePoints = [gameScore]\n    let guessPoints = [guessScore]\n\
    \    let differencePoints = [correctGuess]\n    \n    // Go through the guesses\
    \ array and if the guess is correct, increase the difference points\n    for _\
    \ in 0 ..< guess.count {\n        if guess[guessScore] == guess[guessScore] {\n\
    \            differencePoints.append(correctGuess)\n        } else {\n       \
    \     differencePoints.append(abs(guess[guessScore] - gameScore))\n        }\n\
    \    }\n    \n    return differencePoints", "    var results = [Int]()\n    var\
    \ total = 0\n    for i in 0..<game.count {\n        total += game[i] - guess[i]\n\
    \        results.append(max(0, abs(total - game[i])))\n    }\n    return results",
  "    let maxScore = game.reduce(0){ max($0, $1) }\n    let gameScore = game.reduce(0){\
    \ $0 + $1 }\n    let guessScore = guess.reduce(0){ $0 + $1 }\n    let bestGuessIndex\
    \ = guess.indices.contains(where: { $0 == maxScore }) ?? guess.count\n    let\
    \ bestGuessScore = bestGuessIndex == guess.count ? bestGuessIndex : game[bestGuessIndex]\
    \ - guess[bestGuessIndex]\n    return [bestGuessScore, gameScore - bestGuessScore]",
  "    var newGuess: [Int] = []\n    var count = 0\n    for i in 0..<game.count {\n\
    \        if game[i] == guess[i] {\n            newGuess.append(0)\n          \
    \  count += 1\n        } else if game[i] > guess[i] {\n            newGuess.append(game[i]\
    \ - guess[i])\n            count += 1\n        } else {\n            newGuess.append(guess[i]\
    \ - game[i])\n            count += 1\n        }\n    }\n    return newGuess",
  "    \n    let length = game.count\n    var results = [Int](repeating: 0, count:\
    \ length)\n    var errors = 0.0\n    \n    for case (_, score) in zip(game, guess)\
    \ {\n        \n        // check if we know the result\n        if let result =\
    \ findResult(index: score, guess: guess, results: results) {\n            \n \
    \           // check if we know if the player got it right\n            if let\
    \ match = findMatch(index: score, guess: guess, results: results) {\n        \
    \        \n                // check which error we have\n                switch\
    \ match {\n                case .wrong:\n                    errors += 1\n   \
    \             case .correct:\n                    errors = 0\n               \
    \ }\n            }\n        } else {\n            \n            // check which\
    \ error we have\n            switch score {\n            case .wrong:\n      \
    \          errors += 1\n            case .correct:\n                errors = 0\n\
    \            }\n        }\n        \n        results[game.index(game.firstIndex(of:\
    \ score)!)] = errors\n    }\n    \n    return results", "    var result = Array(repeating:\
    \ 0, count: game.count)\n    \n    var i = 0\n    for g in guess {\n        if\
    \ g == game[i] {\n            result[i] = 0\n        } else {\n            result[i]\
    \ = abs(g - game[i])\n        }\n        i += 1\n    }\n    \n    return result",
  "    \n    // Your code here\n    \n    return game", "    var result: [Int] = [Int](repeating:\
    \ 0, count: game.count)\n    if game.count != guess.count {\n        return result;\n\
    \    }\n    for index in 0..<game.count {\n        if game[index] == guess[index]\
    \ {\n            result[index] = 0;\n        } else {\n            result[index]\
    \ = abs((guess[index] - game[index]));\n        }\n    }\n    return result;",
  "    // Write your code here\n    var result = [Int](count: guess.length, repeatedValue:\
    \ 0)\n    for i in 0..<guess.length {\n        if guess[i] == game[i] {\n    \
    \        result[i] += 0\n        } else {\n            result[i] += abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result", "  guard game.count == guess.count\
    \ else { return [] }\n  var bestDifference = 0\n  for i in 0..<game.count {\n\
    \    let diff = (abs(guess[i] - game[i])) ?? 0\n    if diff > bestDifference {\n\
    \      bestDifference = diff\n    }\n  }\n  return Array(bestDifference..<bestDifference\
    \ + game.count)", "    var result = [Int](count: game.count, repeatedValue: 0)\n\
    \n    for i in 0..<game.count {\n        if game[i] == guess[i] { result[i] =\
    \ 0 }\n        else { result[i] = abs(game[i] - guess[i]) }\n    }\n    return\
    \ result", "    guard game.count == guess.count else { return [] }\n    var result\
    \ = [Int]()\n    for i in 0..<game.count {\n        let d = abs(guess[i] - game[i])\n\
    \        result.append(d < 0 ? d : 0)\n    }\n    return result", "    var result:\
    \ [Int] = []\n    var total = 0\n    guard game.count == guess.count else {\n\
    \        return result\n    }\n    for i in 0..<game.count {\n        total +=\
    \ abs(game[i] - guess[i])\n    }\n    for i in 0..<guess.count {\n        if total\
    \ == 0 {\n            result.append(0)\n        } else {\n            result.append(abs(guess[i]\
    \ - total))\n        }\n    }\n    return result", "    var results = [Int](count:\
    \ guess.count, repeatedValue: 0)\n    game.reverse()\n    guess.reverse()\n  \
    \  var lastGuess = 0\n    var isGood = true\n    for index in 0..<guess.count\
    \ {\n        if isGood && game[index] == guess[index] {\n            results[index]\
    \ = 0\n        } else {\n            let delta = abs(lastGuess - guess[index])\n\
    \            results[index] = delta\n            isGood = false\n        }\n \
    \       lastGuess = guess[index]\n    }\n    return results", "    var gameScore\
    \ = Int()\n    var guessScore = Int()\n    \n    for i in 0..<game.count {\n \
    \       if game[i] == guess[i] { gameScore += game[i] }\n        else { guessScore\
    \ += abs(game[i] - guess[i]) }\n    }\n    \n    return Array(gameScore - guessScore).map\
    \ { abs($0) }", "    var diff = 0\n    var gameScore: Int = game[0]\n    var guesses:\
    \ Int = guess[0]\n\n    for i in 0..<game.count {\n        diff = gameScore -\
    \ guesses - abs(game[i] - guesses)\n        if game[i] == guesses {\n        \
    \    return Array(diff)\n        }\n        gameScore = game[i]\n        guesses\
    \ = guess[i]\n    }\n    return Array(diff)", "    var results = [Int](repeating:\
    \ 0, count: game.count)\n    for index in 0..<game.count {\n        let difference\
    \ = guess[index] - game[index]\n        results[index] = difference >= 0 ? difference\
    \ : -difference\n    }\n    return results", "    // Your code here\n    if game.count\
    \ != guess.count {\n        return Array(repeating: 0, count: guess.count)\n \
    \   }\n    var result: Int = 0\n    var gameCounter: Int = 0\n    for _ in 0..<game.count\
    \ {\n        gameCounter = 0\n        for _ in 0..<guess.count {\n           \
    \ if game[gameCounter] == guess[gameCounter] {\n                gameCounter++\n\
    \            } else {\n                result++\n            }\n        }\n  \
    \  }\n    return Array(repeating: result, count: guess.count)", '    return guess(game).map
    { abs($0 - $1) }', "    var diff = [Int]()\n    for index in 0..<guess.count {\n\
    \        let guess = guess[index]\n        if game[index] != guess {\n       \
    \     diff.append(abs(guess - game[index]))\n        } else {\n            diff.append(0)\n\
    \        }\n    }\n    return diff", "    return (0..<guess.count).map { i in\n\
    \        guard i < game.count else { fatalError(\"guesses must be longer than\
    \ the game\") }\n        let diff = abs(game[i] - guess[i])\n        return diff\
    \ == 0 ? 0 : diff\n    }", "    var gameArray = game\n    var guessedArray = guess\n\
    \    var correct = 0\n    var wrong = 0\n    var isCorrect = Bool()\n    var wrongGuess\
    \ = Int()\n    if game.count != guess.count {\n        print(\"ERROR: counts must\
    \ be equal!\")\n        return wrongGuess\n    }\n    for i in 0 ..< game.count\
    \ {\n        if gameArray[i] == guessedArray[i] {\n            correct = correct\
    \ + 1\n        } else {\n            wrong = wrong + 1\n        }\n    }\n   \
    \ if correct == game.count {\n        isCorrect = true\n    } else {\n       \
    \ isCorrect = false\n        wrongGuess = game.count\n    }\n    var gameCorrect\
    \ = 0\n    var gameWrong = 0\n    var guessCorrect = 0\n    var guessWrong = 0\n\
    \    for i in 0 ..< guess.count {\n        if gameArray[i] == guessedArray[i]\
    \ {\n            guessCorrect = guessCorrect + 1\n        } else {\n         \
    \   guessWrong = guessWrong + 1\n        }\n    }\n    if isCorrect {\n      \
    \  gameCorrect = gameCorrect + guessCorrect\n    } else {\n        gameWrong =\
    \ gameWrong + guessWrong\n    }\n    return Array(gameCorrect - wrongGuess, guessCorrect\
    \ - gameWrong)", "    var result = [Int](repeating: 0, count: game.count)\n  \
    \  for i in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result", '    return guesses(game).map { guesses(game).filter
    { $0 == $1 }.map { $1 - $0 }.joined().map { abs($0) }', "    let m = game.count\n\
    \    let n = guess.count\n\n    let mut diff = [Int](repeating: 0, count: m)\n\
    \    var i = m\n    while i < (m - 1) {\n        let j = guessIndex(i, guess)\n\
    \        diff[i] = abs(guess[i] - game[j])\n        i += 1\n    }\n    for case\
    \ let (score, guess) in zip(game, guess) {\n        if score != guess {\n    \
    \        diff[i] = abs(score - guess)\n            i += 1\n        }\n    }\n\
    \    return diff", "    // write your code in an appropriate way\n    var gameCopy\
    \ = game.map{ $0 + $1 }\n    var guessedCorrectly = guess.count == game.count\n\
    \    var correctGuessDistance = 0\n    var wrongGuessDistance = 0\n    for i in\
    \ 0..<guess.count {\n        if gameCopy[i] == guess[i] {\n            gameCopy[i]\
    \ = 0\n        } else {\n            gameCopy[i] = gameCopy[i] - guess[i]\n  \
    \      }\n        if gameCopy[i] == 0 {\n            correctGuessDistance += 1\n\
    \        } else {\n            wrongGuessDistance += 1\n        }\n    }\n   \
    \ var gameCopyArray = Array(gameCopy)\n    \n    var guessedCorrectlyArray = Array(guessedCorrectly)\n\
    \    return guessedCorrectlyArray", '    return compare(game: game.map{$0}, guess:
    guess.map{$0})', "    if game.count != guess.count {\n        return [Int](count:\
    \ guess.count, repeatedValue: 0)\n    }\n\n    let gameCount = game.count\n  \
    \  let guesses = guess.map { $0 }\n\n    // Sort our arrays to ensure consistent\
    \ results.\n    game = game.sorted()\n    guesses = guesses.sorted()\n\n    //\
    \ Go through our arrays, comparing each value to each guess.\n    for i in 0..<gameCount\
    \ {\n        let difference = game[i] - guesses[i]\n        if difference != 0\
    \ {\n            return [difference]\n        }\n    }\n\n    return game", " \
    \   var results = [Int]()\n    for i in 0..<guess.count {\n        if guess[i]\
    \ == game[i] {\n            results.append(0)\n        } else {\n            results.append(abs(guess[i]\
    \ - game[i]))\n        }\n    }\n    return results", "    var arr = [Int]()\n\
    \    var gameScore = 0\n    var guessScore = 0\n    var numMatch = 0\n\n    for\
    \ index in 0 ..< game.count {\n        if guess[index] == game[index] {\n    \
    \        gameScore += guess[index]\n            guessScore += game[index]\n  \
    \          numMatch++\n        }\n    }\n\n    if gameScore == guessScore {\n\
    \        if numMatch == game.count {\n            arr = [0, 0, 0, 0]\n       \
    \ } else {\n            arr = [0, 0, 0, 0, 0]\n        }\n    } else {\n     \
    \   arr = [abs(guessScore - gameScore), abs(guessScore - gameScore), abs(guessScore\
    \ - gameScore), abs(guessScore - gameScore), abs(guessScore - gameScore), abs(guessScore\
    \ - gameScore)]\n    }\n    return arr", "    return game.count != guess.count\
    \ ? [] : (0..<guess.count).map { i in\n        abs(guess[i] - game[i]) \n    }",
  "    let diff = [Int](repeating: 0, count: guess.length)\n    for index in 0..<guess.length\
    \ {\n        diff[index] = abs(game[index] - guess[index])\n    }\n    return\
    \ diff", "    var gameScores = [Int](count: guess.count, repeatedValue: 0)\n \
    \   for i in 0..<game.count {\n        gameScores[guess[i]]+=1\n    }\n    let\
    \ gameResult = gameScores.filter({ $0 == 0 }).count\n    let guessResult = game.filter({\
    \ $0 == 0 }).count\n    return [guessResult, abs(guessResult - gameResult)]",
  "    var gameArray = game\n    var guessArray = guess\n\n    for gameIndex in 0..<gameArray.count\
    \ {\n        for guessIndex in 0..<guessArray.count {\n            if gameArray[gameIndex]\
    \ != guessArray[guessIndex] {\n                gameArray[gameIndex] = abs(guessArray[guessIndex]\
    \ - gameArray[gameIndex])\n            } else {\n                gameArray[gameIndex]\
    \ = 0\n            }\n        }\n    }\n    return gameArray", "    var gameLen\
    \ = game.count\n    var guessLen = guess.count\n    \n    var gameScores = game\n\
    \    var guessScores = guess\n    \n    var differences = Array<Int>(gameLen)\n\
    \    var difference = 0\n    \n    var correctGuesses = 0\n    for i in 0..<gameLen\
    \ {\n        difference = abs(gameScores[i] - guessScores[i])\n        if difference\
    \ == 0 {\n            differences[i] = 0\n            \n        } else {\n   \
    \         differences[i] = difference\n            \n            if difference\
    \ < 0 {\n                correctGuesses = correctGuesses + 1\n            }\n\
    \        }\n    }\n    \n    var correctGuesses = 0\n    for i in 0..<guessLen\
    \ {\n        difference = abs(guessScores[i] - gameScores[i])\n        if difference\
    \ == 0 {\n            differences[i] = 0\n            \n        } else {\n   \
    \         differences[i] = difference\n            \n            if difference\
    \ < 0 {\n                correctGuesses = correctGuesses + 1\n            }\n\
    \        }\n    }\n    \n    if correctGuesses == guessLen {\n        return differences\n\
    \    }\n    \n    return differences", "    var diff = game\n    for index in\
    \ 0..<guess.count {\n        diff[index] -= guess[index]\n    }\n    return diff"]
stop_tokens:
- "\n}"
