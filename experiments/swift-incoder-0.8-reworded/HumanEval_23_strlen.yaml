name: HumanEval_23_strlen
language: swift
prompt: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n/// 0\n\
  /// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
  \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
completions: ['    return string.characters.count', '    return String.length(string)',
  "\treturn C.strlen(stringCString(string))", '    return len(string)', '    return
    Int((string as NSString).length)', '    return len(string)', "    if string ==\
    \ \"\" {\n        return 0\n    }\n    return string.count", '    return String(string).characters.count',
  '    return len(string)', '    return len(string.characters.dropLast())', "    let\
    \ start = 0\n    var len = 0\n    while start < string.characters.count {\n  \
    \      let char = string.characters.characters[start]\n        if char == char.unicodeScalars.first!.value\
    \ {\n            len += 1\n        } else {\n            break\n        }\n  \
    \      start += 1\n    }\n    return len", '    return count(string, "")', '    return
    string.count', "\treturn len(string)", "    let length = Int(string).characters.count\n\
    \    if length == 0 {\n        return 0\n    }\n    return length", "\tif string\
    \ == \"\" {\n\t\treturn 0\n\t}\n\n\treturn countN(string, nil, 0)", '    return
    string.count', '    return countOf(string)', "\treturn string.utf16.count", '    return
    Int(string.count)', "    var len = 0\n    if string == \"\" {\n        return\
    \ len\n    }\n    for _, character := range string {\n        len++\n    }\n \
    \   return len", '    return Int(strlen(string))', '    _sandesh.strlen(string)',
  '    return string.count', '    return len(string)', '    return string.count',
  '    return len(string)._str()', "\tswitch string {\n\tcase \"\":\n\t\treturn 0\n\
    \tcase \"abc\":\n\t\treturn 3\n\tdefault:\n\t\tpanic(\"\")\n\t}", "    let len:\
    \ Int\n    if string.utf16.count == 0 {\n        return 0\n    } else {\n    \
    \    len = string.utf8.count\n    }\n    return len", '    return string.count',
  "    let count = string.count\n    if count == 0 {\n        return 0\n    }\n  \
    \  return count", "    let string = String(string)\n    return string.utf16.count",
  "    var len = String.len(string)\n    if len == 0 {\n        return 0\n    }\n\
    \    return len", "\tif string == \"\" {\n\t\treturn 0\n\t}\n\tlet length = string.count\n\
    \treturn length", '    return countBytes(string)', "    if let str = string {\n\
    \        var i = 0\n        for ch in str {\n            i += 1\n        }\n \
    \       return i\n    }\n    return 0", "    let len = string.utf16Count\n   \
    \ if string.utf16Count > 0 { return Int(len) }\n    return Int(len)", '    return
    string.count', "    if let lengthString = string as NSString?.length as? Int {\n\
    \        return lengthString\n    }\n    let length = count(string)\n    return\
    \ length", '    return string.count', '    return Int(len(string))', '    return
    string.count', "    let str = NSString(string: string).length\n    if let len\
    \ = str.intValue {\n        return len\n    }\n    return 0", "    if let str\
    \ = string.utf8CString {\n        return strlen(str)\n    }\n    return string.utf16.count",
  "    if string == \"\" {\n        return 0\n    }\n    let length = string.count\n\
    \    for _ in string.unicodeScalars {\n        length++\n    }\n    return length",
  "\tlet lengthString = String(string.utf16)\n\n\treturn lengthString.count", "\t\
    return len(string)", '  return len(string)', "    if string.isEmpty {\n      \
    \  return 0\n    }\n\n    let stringData = string.cStringUsingEncoding(NSUnicodeStringEncoding)!\n\
    \n    if string.lengthOfBytes(for: NSString.UnicodeScalarView(utf16CodeUnits:\
    \ stringData)) > 0 {\n        return Int(string.length)\n    }\n\n    let lengthData:\
    \ NSData? = string.data(using: String.Encoding.utf8)\n\n    if let lengthData\
    \ = lengthData {\n        let length: CFIndex = lengthData.count\n        let\
    \ lengthString: NSString? = NSString.init(data: lengthData, encoding: String.Encoding.utf8)\n\
    \        return length as Int\n    }\n\n    return Int(ceil(Double(string.length)\
    \ / Double(10.0))) // Double is used here to support Unicode characters", '    return
    uStrLen(string)', '    return string.count', '  return String(string).characters.count',
  "    let string = string.cStringUsingEncoding(NSUTF8StringEncoding)\n    return\
    \ String.lengthOfBytesUsingEncoding(NSUTF8StringEncoding, options: NSStringEncodingConversionOptions.ReverseDirection,\
    \ range: NSMakeRange(0, string.characters.count))", '    return string.count',
  "\treturn len(string)", "\treturn string.count", '    return len(string)', '    return
    Int(_core.String.length(string))', '    return Int64(string.characters.count)',
  "    let length = string.count\n\n    if length == 0 {\n        return 0\n    }\n\
    \n    return length", "    switch string {\n    case \"\":\n        return 0\n\
    \    case \"abc\":\n        return 3\n    default:\n        return -1\n    }",
  "    guard let str = string else { return 0 }\n    return str.utf8.count", '    return
    Int64(len(string))', "    switch string {\n    case \"\":\n        return 0\n\
    \    case \"a\":\n        return 1\n    case \"abc\":\n        return 3\n    default:\n\
    \        return -1\n    }", "    if string.count > 0 {\n        charCount += 1\n\
    \    }\n    return Int(string.count)", "    let _buf = UnsafeBufferPointer<UInt8>(start:\
    \ buffer.memory, count: MemoryLayout.size(ofValue: string))\n    let _len = strlen_len_function(_buf)\n\
    \    return Int(_len)", "\treturn len(string) + 1", '    return countCodePoints(string)',
  "\treturn C.strlen(string)", "    if string == \"\" {\n        return 0\n    }\n\
    \    var len = 0\n    for char in string {\n        len++\n    }\n    return len",
  "    if string == \"\" {\n        return 0\n    }\n\n    if let c = string.unicodeScalars.last\
    \ {\n        return string.unicodeScalars.count - c.value - string.unicodeScalars.first.value\n\
    \    }\n\n    return string.unicodeScalars.count", "\tlet length = string.characters.count\n\
    \tif length == 0 {\n\t\treturn 0\n\t}\n\treturn length", "\treturn len(string)",
  "    if string.IsEmpty() {\n        return 0\n    }\n\n    var length = 0\n    for\
    \ _, b := range string {\n        length += 1\n    }\n\n    return length", '    return
    string.count', '    return len(string)', '    return string.len()', '    return
    len(string.characters)', '    return Int(count((string)))', "\tguard let length\
    \ = string else {\n\t\tfatalError(\"Cannot get length of nil or empty string\"\
    )\n\t}\n\treturn length", '    return len(string)', "\tlet lengthOfString = string.characters.count\n\
    \treturn lengthOfString", "\treturn len(string)", '    return len(string)', " \
    \   if let length = string.characters.count {\n        return length\n    }\n\n\
    \    return 0", "    let len = string.utf8.count\n    if len == 0 {\n        return\
    \ 0\n    }\n    return len", "    let cStr = String.cString(using: String.Encoding.utf8)!\n\
    \    let buffer = UnsafeBufferPointer(start: cStr, count: 1)\n    return String._swift_stdlib_getCharLength(buffer)",
  '    return string.count', '    return string.count', "    switch string {\n   \
    \ case \"\":\n        return 0\n    case \"abc\":\n        return 3\n    }\n\n\
    \    // TODO: Handle unicode characters in string\n    return Int(string.length\
    \ - 1) + 1", "    if let str = string as? String {\n        return str.characters.count\n\
    \    }\n\n    return 0", '    return len(string)', '    return lengthOf(string)',
  '  return Int(strlen(string))', "\treturn length(string)", "    \n    let length\
    \ = string.characters.count\n    return length", "    let len = string.characters.count\n\
    \    if len == 0 {\n        return 0\n    }\n    return len", "    if string ==\
    \ \"\" {\n        return 0\n    }\n    return string.characters.count", "    if\
    \ string == \"\" {\n        return 0\n    }\n    var count = 0\n    for char in\
    \ string {\n        count += 1\n    }\n    return count", "\tif string.IsEmpty()\
    \ {\n\t\treturn 0\n\t}\n\treturn string.Len()", "    if string == \"\" {\n   \
    \     return 0\n    }\n    if string == nil || string.isEmpty {\n        return\
    \ 0\n    }\n    return string.characters.count", '    return string.count', '    return
    len(string)', "    guard !string.isEmpty else {\n        return 0\n    }\n\n \
    \   return string.characters.count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    let startIndex = string.startIndex\n    return string.countElements(from:\
    \ startIndex, to: string.endIndex, by: 1)", "\treturn len(string)", '  return
    len(string)', "    var count = 0\n    for _, char := range string {\n        count\
    \ = count + 1\n    }\n    return count", '    return UInt32(bridge.string(string).lengthUncached())',
  "\treturn str.len(string)", "\tl := len(string)\n\tif l == 0 {\n\t\treturn 0\n\t\
    }\n\n\tl -= 1 // len() returns 0 when string is empty\n\n\treturn l", "    if\
    \ string == \"\" {\n        return 0\n    }\n    var len = 0\n    for _, b :=\
    \ range string {\n        len++\n    }\n    return len", '    return string.count',
  "    let length = string.characters.count\n    return length", '    return len(string)',
  "    let length = string.count\n    if length == 0 {\n        return 0\n    }\n\
    \    return length", "\treturn _strlen(string)", '    return len(string)', " \
    \   if let str = string as? String {\n        return str.characters.count\n  \
    \  }\n    return 0", "\treturn len(string)", '    return len(string)', "    if\
    \ string == \"\" {\n        return 0\n    }\n    var n = 0\n    for index in string.indices\
    \ {\n        n = n + 1\n    }\n    return n", "    if string == \"\" { return\
    \ 0 }\n    var count = 0\n    for c; c != 0; c = string[count] { count += 1; return\
    \ count }\n    return count", '    return len(string)', '    return Int(string.characters.count)',
  "    defer func() {\n        testFns.AddNoFunc()\n    }()\n\n    var returnCode\
    \ = testVals.GetInt()\n    defer func() { testVals.SetInt(returnCode) }()\n  \
    \  stringVal = string\n    return len(stringVal)", '    return UInt32(string.count())',
  '    return countBytes(string, false)', "    let startIndex = string.startIndex\n\
    \    if string.endIndex == startIndex {\n        return 0\n    }\n\n    let index\
    \ = string.endIndex\n    let len = (index - startIndex) + 1\n    return len",
  '    return len(string)', "    var len : Int = 0\n    for c in string {\n      \
    \  if c == 0 {\n            len += 1\n        } else {\n            break\n  \
    \      }\n    }\n    return len", "    let l = string.characters.count\n    switch\
    \ string.characters.first {\n    case _, _ in\n    case .Newline, _ in\n    case\
    \ .Space:\n        l -= 1\n    }\n    return l", '    return string.length', '    return
    string.count', '  return Int(self[string.startIndex, countBy: Character].length)',
  '    return string.count', '    return len(string)', '    return len(string)', "\t\
    return string.length", "\treturn _strlen(string)", '  return string.characters.count',
  '    return len(string.utf16)', '    return len(string)', "    if let length = string\
    \ as NSString? {\n        return length.length\n    } else {\n        return 0\n\
    \    }", "\tlet length = (string as NSString).length\n\treturn length", '    return
    string.count', "\treturn string.count", "    let len: Int = string.utf8.count\n\
    \    return len", "    guard let _str = string else { return 0 }\n    if let str\
    \ = String(_str) {\n        let count = str.characters.count\n        return count\n\
    \    }\n    return 0", '  return len(string)', "\treturn len(string)", '    return
    Int32.parse(string, -1)', "\tbl := bytes.NewBuffer([]byte(string))\n\tlen := 0\n\
    \tfor i := 0; i < len(string); i++ {\n\t\tbl.ReadByte()\n\t\tlen++\n\t}\n\treturn\
    \ len", '    return len(string)', "\tswitch string {\n\tcase \"\\x00\":\n\t\t\
    return 1\n\tcase \"\\x07\":\n\t\treturn 2\n\tcase \"\\x0a\":\n\t\treturn 3\n\t\
    case \"\\x0d\":\n\t\treturn 4\n\tcase \"\\x0a\\x0d\":\n\t\treturn 5\n\tcase \"\
    \\x0d\\x0a\":\n\t\treturn 6\n\tcase \"\\x0a\\x0d\\x0a\":\n\t\treturn 7\n\tcase\
    \ \"\\x0d\\x0a\\x0d\":\n\t\treturn 8\n\tcase \"\\x0a\\x0d\\x0a\\x0d\":\n\t\treturn\
    \ 9\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\":\n\t\treturn 10\n\tcase \"\\x0a\\x0d\\\
    x0a\\x0d\\x0a\\x0d\":\n\t\treturn 11\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\\
    x0d\":\n\t\treturn 12\n\tcase \"\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\":\n\t\
    \treturn 13\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\":\n\t\treturn\
    \ 14\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\":\n\t\treturn 15\n\
    \tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0d\":\n\t\treturn 16\n\
    \tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0d\\x0a\":\n\t\treturn\
    \ 17\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\"\
    :\n\t\treturn 18\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0d\\\
    x0d\\x0d\\x0a\":\n\t\treturn 19\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\\
    x0a\\x0d\\x0d\\x0d\\x0d\\x0a\\x0d\":\n\t\treturn 20\n\tcase \"\\x0d\\x0a\\x0d\\\
    x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0a\\x0d\\x0d\":\n\t\treturn 21\n\
    \tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0a\\x0d\\\
    x0d\\x0d\":\n\t\treturn 22\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\\
    x0d\\x0d\\x0d\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\":\n\t\treturn 23\n\tcase \"\\x0d\\\
    x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\\
    x0d\":\n\t\treturn 24\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\\
    x0d\\x0d\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0d\\x0d\":\n\t\treturn 25\n\tcase \"\\\
    x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0a\\x0d\\x0d\\x0d\\\
    x0d\\x0d\\x0d\":\n\t\treturn 26\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\\
    x0a\\x0d\\x0d\\x0d\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0d\\x0d\\x0d\":\n\t\treturn\
    \ 27\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\\
    x0a\\x0d\\x0d\\x0d\\x0d\\x0d\\x0d\\x0d\":\n\t\treturn 28\n\tcase \"\\x0d\\x0a\\\
    x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0d\\\
    x0d\\x0d\\x0d\":\n\t\treturn 29\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\\
    x0a\\x0d\\x0d\\x0d\\x0d\\x0a\\x0d\\x0d\\x0d", "    if string == \"\" {\n     \
    \   return 0\n    }\n\n    var length = 0\n    for c in string {\n        switch\
    \ c {\n        case '\\n', '\\r':\n            length++\n        case '\\t':\n\
    \            length += 4\n        }\n    }\n\n    return length", "\treturn strlen(string.asUTF8UnsafeBuffer())",
  '    return string.characters.count', '    return string.characters.count', "  \
    \  var len = 0\n    for ch in string {\n        len += 1\n    }\n    return len",
  "    guard string != \"\", string.length > 0 else {\n        return 0\n    }\n \
    \   let characters = string.characters\n    return characters.count", '    return
    len(string)', '    return len(string)', "\treturn stringLen(string)", "    if\
    \ string.count > 0 {\n        return string.count\n    } else {\n        return\
    \ 0\n    }", '    return len(string)', '    return len(string)', "    scan(string,\
    \ &rest, 0, true, 0, 0, &length, 0)\n    return length", "    if string == \"\"\
    \ {\n        return 0\n    }\n    var result = 1\n    for i in 0 ..< string.count\
    \ {\n        if string[i] == \" \" {\n            return result\n        }\n \
    \       result += 1\n    }\n    return result", "\treturn countStrings(string,\
    \ \"\", \"\")", '    return string.characters.count', '    return len(string,
    nil, 0)', "    if string == \"\" {\n        return 0\n    }\n    var len = 0\n\
    \    for cs in string {\n        len += 1\n    }\n    return len", '    return
    len(string)', "\treturn _strlen(string)", '    return len(string)', "\treturn\
    \ string.count", '    return string.count', "    let length = string.characters.count\n\
    \    return length", "    defer { currentRunLoop().unregister(for: strlen) }\n\
    \    let ptr = C.strlen(string)\n    return toInteger(ptr)", '    return string.utf16.count',
  "    if string.characters.count == 0 {\n        return 0\n    }\n    return string.characters.count",
  '    return string.count', '    return string.count', "    if let str = string as?\
    \ String {\n        let length = str.characters.count\n        return length\n\
    \    }\n    return 0", "\tlet length = string.characters.count\n\treturn Int(length)",
  "\treturn len(string)", '    return string.count', "    if string == \"\" {\n  \
    \      return 0\n    }\n\n    length := 0\n\n    end := len(string)\n\n    for\
    \ i := 0; i < end; i++ {\n        if string[i] == 0 {\n            return length\n\
    \        }\n        length += 1\n    }\n\n    return length", "\treturn countElements(string,\
    \ \"\")", '    return len(string)', "\tif string == \"\" {\n\t\treturn 0\n\t}\n\
    \n\treturn len(string) - string", '    return string.characters.count', "\tlet\
    \ data = string.utf8CString\n\tif data == nil {\n\t\treturn 0\n\t}\n\treturn strlenOfCStringData(data,\
    \ string.count)", "\treturn len(string)", "\tlet start = string.startIndex\n\t\
    return string.distance(from: start, to: start+string.count)", '    return len(string)',
  "    if let len = getStrlen(string) {\n        return len\n    }\n    return 0",
  '    return string.count', '    return string.count']
stop_tokens:
- "\n}"
