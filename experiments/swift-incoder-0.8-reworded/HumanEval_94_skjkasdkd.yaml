name: HumanEval_94_skjkasdkd
language: swift
prompt: "\n/// You are given an array of integers.\n/// You need to find the largest\
  \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
  \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
  \ 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2,\
  \ 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
  \ 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724, 32, 71, 99,\
  \ 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0, 81, 12, 3,\
  \ 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\nfunc skjkasdkd(lst:\
  \ [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4,\
  \ 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst:\
  \ [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
  \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
  assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
  assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8,\
  \ 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
  \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
completions: ["    if lst.count == 0 {\n        return 0\n    }\n    var maxPrime\
    \ = 0\n    var maxSum = 0\n    var maxCount = 0\n    for idx in (0..<lst.count)\
    \ {\n        let element = lst[idx]\n        let sumOfDigits = element.characters.reduce(0)\
    \ { (sum, digit) -> Int in\n            return sum + Int(digit)\n        }\n \
    \       if sumOfDigits > maxSum {\n            maxSum = sumOfDigits\n        \
    \    maxCount = 1\n        }\n        if sumOfDigits == maxSum {\n           \
    \ maxCount++\n        }\n        if maxCount > maxPrime {\n            maxPrime\
    \ = maxCount\n        }\n    }\n    return maxPrime", "    if lst.count <= 0 {\n\
    \        return 0;\n    }\n    var max: Int = lst[0]\n    for num in lst {\n \
    \       if max < num {\n            max = num\n        }\n    }\n    if max ==\
    \ 2 {\n        return 0 + lst[2]\n    }\n    var sum = 0\n    for i in 1...max\
    \ {\n        if lst[i] % max == 0 {\n            sum += i\n        } else {\n\
    \            break\n        }\n    }\n    return sum", "    var max = Int()\n\
    \    for num in lst {\n        if isPrime(Int(num)) {\n            max += Int(num)\n\
    \        }\n    }\n    return max", "    \n    guard lst.count > 0 else { return\
    \ 0 }\n    \n    let largestPrimeIndex = lst.enumerated().max{ $0.1 > $0.offset!\
    \ }\n    let largestPrime = lst[largestPrimeIndex.offset]\n    \n    var total\
    \ = 0\n    for n in lst.reversed() {\n        guard n % largestPrime != 0 else\
    \ { continue }\n        let digit = n % largestPrime\n        total = total +\
    \ digit\n    }\n    return total", "    var ans = 0\n    var largest = 0\n   \
    \ \n    for element in lst {\n        for prime in 2...element {\n           \
    \ if element % prime == 0 {\n                if largest < prime {\n          \
    \          largest = prime\n                }\n            }\n        }\n    }\n\
    \    \n    if largest == 0 {\n        largest = 1\n    }\n    \n    for element\
    \ in lst {\n        if element == largest {\n            ans += element\n    \
    \    }\n    }\n    \n    return ans", "  // Write your code here\n  var sum =\
    \ 0\n  for index in 0..<lst.count {\n    if lst[index] > 1 {\n      for number\
    \ in 2..<lst[index] {\n        if lst[index] % number == 0 {\n          break\n\
    \        }\n      }\n      sum += number\n    }\n  }\n  return sum", "    var\
    \ largest: Int = 0\n    var primes = (0..<lst.count).filter({lst[$0] % 2 != 0})\n\
    \    for i in primes {\n        largest += lst[i]\n        lst[i] = 0\n    }\n\
    \    return largest", "    if lst.isEmpty {\n        return 0\n    }\n\n    var\
    \ maxSum = 0\n\n    for i in 0 ..< lst.count {\n        if isPrime(lst[i]) {\n\
    \            sumDigits += Int(lst[i])\n            if sumDigits > maxSum {\n \
    \               maxSum = sumDigits\n            }\n        }\n    }\n\n    return\
    \ maxSum", "    let max = 0\n    var sum: Int = 0\n    for i in lst {\n      \
    \  if i != max {\n            sum += Int(i / max) * Int(i / max)\n        } else\
    \ {\n            sum += i\n        }\n        max = i\n    }\n    return sum",
  "    \n    var maxDigit = 0\n    var largestPrime = 0\n    var largestPrimeDigit\
    \ = 0\n    \n    for element in lst {\n        if element > maxDigit {\n     \
    \       maxDigit = element\n        }\n        \n        if element % 2 == 0 {\n\
    \            for prime in 2...element / 2 {\n                if element % prime\
    \ == 0 {\n                    if element > largestPrime {\n                  \
    \      largestPrime = element\n                        largestPrimeDigit = prime\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   \n    return largestPrimeDigit + maxDigit", "    var largestPrime: Int = 0\n\
    \    for i in lst {\n        largestPrime = i\n        let divisors = isPrime(largestPrime)\n\
    \        for divisor in divisors {\n            if lst.contains(divisor) {\n \
    \               break\n            } else {\n                if divisor > largestPrime\
    \ {\n                    largestPrime = divisor\n                }\n         \
    \   }\n        }\n    }\n    return largestPrime", "    var max = 0\n    for i\
    \ in lst {\n        if isPrime(i) {\n            max += i\n        }\n    }\n\
    \    return max", "    func isPrime(_ n: Int) -> Bool {\n        return !(sqrt(Double(n))\
    \ % 2).isMultiple(of: 1)\n    }\n\n    var prime = 0\n    var sumOfDigits = 0\n\
    \    for i in lst {\n        if isPrime(i) {\n            prime = i\n        }\
    \ else {\n            sumOfDigits = sumOfDigits + Int(i)\n        }\n    }\n \
    \   return sumOfDigits", "    var max = -1\n    for value in lst {\n        if\
    \ value == 0 {\n            continue\n        }\n        if max < 0 {\n      \
    \      max = value\n            continue\n        }\n        if value > max {\n\
    \            max = value\n        }\n    }\n    if max == -1 { // no prime\n \
    \       return -1\n    }\n    var sum = 0\n    for value in lst {\n        if\
    \ value == 0 {\n            continue\n        }\n        if value > max {\n  \
    \          return -1\n        }\n        sum += value\n    }\n    return sum",
  "    var max = Int()\n    var largest = Int()\n    var sum = 0\n    \n    func isPrime(_\
    \ i: Int) -> Bool {\n        for i in 2..<Int(sqrt((Double(i)).toInt())+1) {\n\
    \            if i % Double(i) == 0 {\n                return false\n         \
    \   }\n        }\n        return true\n    }\n\n    for var i in lst {\n     \
    \   if isPrime(i) == true {\n            sum += Int(i)\n        }\n        \n\
    \        if largest < i {\n            largest = i\n            max = i\n    \
    \    }\n    }\n    return sum + max", "    var largest = Int.max\n    var largestPrime:\
    \ Int = 0\n    for value in lst {\n        var prime: Int\n        if isPrime(largest,\
    \ value) {\n            largestPrime = value\n            largest = value\n  \
    \          prime = largestPrime\n        } else {\n            prime = primeFactor(largest,\
    \ value)\n            if prime > largestPrime {\n                largestPrime\
    \ = prime\n                largest = value\n            }\n        }\n    }\n\
    \    return largestPrime", "    var max = 0\n    var maxprime = 0\n    for i in\
    \ lst {\n        if isPrime(i) {\n            max += i\n            if maxprime\
    \ < max {\n                maxprime = max\n            }\n        }\n    }\n \
    \   return maxprime", "    var result = lst[0]\n    for x in lst {\n        if\
    \ x <= result {\n            return result\n        }\n        if x % result ==\
    \ 0 {\n            result += 1\n        }\n    }\n    return result", "    let\
    \ max = lst.max()\n    var sum = 0\n    for i in lst {\n        if i as Int %\
    \ 2 == 0 {\n            sum += i\n        }\n        else if i as Int % max ==\
    \ 0 {\n            sum += i\n        }\n    }\n    return sum", "    guard lst.count\
    \ > 0, lst.count % 2 == 0 else {\n        return 0\n    }\n    \n    let rem =\
    \ lst.count / 2\n    let max = lst.reduce(0) { (result, value) -> Int in\n   \
    \     guard result > value else {\n            return value\n        }\n     \
    \   return max(result, value)\n    }\n    \n    guard max % 2 == 1 else {\n  \
    \      return 0\n    }\n    \n    var result = 0\n    \n    for i in 0..lst.count\
    \ {\n        if lst.count <= i {\n            break\n        }\n        \n   \
    \     let sum = lst.suffix(from: i).reduce(0) { (sum, value) -> Int in\n     \
    \       if i % 2 == 0 {\n                return sum + value\n            }\n \
    \           return sum - value\n        }\n        \n        if sum == max {\n\
    \            result += lst.suffix(from: i + 1)\n        }\n    }\n    \n    return\
    \ result", "    var max = 0\n    var res = 0\n    \n    for num in lst {\n   \
    \     sum += num\n        if sum > max {\n            max = sum\n            res\
    \ = sum\n        }\n    }\n    return res", "    let primes = SieveOfEratosthenes(from:\
    \ lst, to: lst.count)\n    let maxPrime = primes.maxElement()!\n    var sum: Int\
    \ = 0\n    for i in lst.reversed() {\n        let prime = primes[i]\n        if\
    \ prime > maxPrime {\n            continue\n        }\n        for j in 1...prime\
    \ {\n            sum += j\n        }\n    }\n    return sum", "    let res = lst.filter{\
    \ isPrime($0) }.reduce(0, +)\n    return res", "    var largestPrime = Int.max\n\
    \    var total: Int = 0\n    var numbers = lst.reverse()\n    for i in numbers\
    \ {\n        if largestPrime % i == 0 { return 0 }\n        if largestPrime <\
    \ i {\n            largestPrime = i\n        }\n    }\n    for i in numbers {\n\
    \        if i % largestPrime == 0 { total += Int(i) - largestPrime }\n    }\n\
    \    return total", "    guard lst.isEmpty == false else {\n        return -1\n\
    \    }\n    guard lst.count > 0 else {\n        return 0\n    }\n    guard lst.count\
    \ == 1 else {\n        return lst[0]\n    }\n    var largestPrimeValue = 1\n \
    \   var primeDigits = 0\n    for i in lst {\n        if i % 2 == 0 {\n       \
    \     largestPrimeValue += 2\n        }\n        for _ in 1...Int(floor(Double(i/2)))\
    \ {\n            if i % 2 == 0 {\n                largestPrimeValue += 2\n   \
    \             i /= 2\n            }\n            else {\n                largestPrimeValue\
    \ += 1\n            }\n        }\n    }\n    largestPrimeValue = (largestPrimeValue\
    \ + largestPrimeValue - 1) / 2\n    for k in 1...Int(floor(Double(largestPrimeValue)))\
    \ {\n        if lst.contains(k) {\n            primeDigits += 1\n        }\n \
    \   }\n    return (primeDigits + Int(floor(Double(primeDigits))))*10 + largestPrimeValue",
  "    guard lst.count > 0 else {\n        return 0\n    }\n    guard lst.count <\
    \ 10000 else {\n        return 9999\n    }\n    var sum = 0\n    for i in lst\
    \ {\n        var a = i\n        var flag = true\n        var j = i\n        while\
    \ j > 1 {\n            if a % j == 0 {\n                flag = false\n       \
    \         break\n            }\n            j = j / 2\n        }\n        if flag\
    \ {\n            sum += i\n        }\n    }\n    return sum", "    // Write your\
    \ code here\n    if lst.count < 2 {\n        return 0\n    }\n\n    var maxIndex\
    \ = 0\n    var maxSum = 0\n\n    for index in lst {\n        let sum = index\n\
    \        var i = 1\n        while i * i <= index {\n            if index%i ==\
    \ 0 {\n                sum = sum + i\n                maxIndex = index\n     \
    \       }\n            i += 1\n        }\n        if maxSum < sum {\n        \
    \    maxSum = sum\n        }\n    }\n\n    return maxSum", "    let maxVal = lst.max()!\n\
    \    var maxIdx = 0\n    var maxSum = lst.filter({ $0 == maxVal }).reduce(0) {\
    \ (prev, val) -> Int in\n        if (val % 10) == 0 {\n            prev += 10\n\
    \        }\n        return prev + val % 10\n    }\n\n    var sum = 0\n    for\
    \ i in 0..<lst.count {\n        if (lst[i] % 10) == 0 {\n            sum += 10\n\
    \        }\n        sum += lst[i]\n    }\n\n    return maxSum - sum", "    guard\
    \ lst.count > 0 else {\n        return -1\n    }\n    var maxSum: Int = 0\n  \
    \  var maxIndex: Int = 0\n    var maxIndexVal: Int = 0\n    for i in lst {\n \
    \       let digits = i % 10\n        if maxIndex == 0 || maxIndexVal < digits\
    \ {\n            maxIndexVal = digits\n            maxIndex = i\n        }\n \
    \       maxSum = maxSum + digits\n    }\n    return maxSum", "    let max = Int()\n\
    \    for i in lst {\n        let prime = i % 10\n        if prime < max {\n  \
    \          max = prime\n        } else {\n            max += i\n        }\n  \
    \  }\n    return max", "    var maxP = maxP(lst)\n    var sum = 0\n    for p in\
    \ maxP {\n        sum += Int(truncatingRemainder(p, 10))\n    }\n    return sum",
  "    func isPrime(_ n: Int) -> Bool {\n        if n <= 1 {\n            return false\n\
    \        }\n        for num in 2...n {\n            if n % num == 0 {\n      \
    \          return false\n            }\n        }\n        return true\n    }\n\
    \n    guard let lastElement = lst.removeLast() else { return 0 }\n    var largestPrime:\
    \ Int = 0\n    for num in lst {\n        if isPrime(num) {\n            if largestPrime\
    \ < num {\n                largestPrime = num\n            }\n        }\n    }\n\
    \    return largestPrime + lastElement", "    var maxPrime = Int.max\n    var\
    \ sum = 0\n    for elem in lst {\n        let primeChecker = sieveOfAtkin(elem)\n\
    \        if primeChecker > maxPrime {\n            maxPrime = primeChecker\n \
    \       }\n    }\n    for elem in lst {\n        if elem > maxPrime {\n      \
    \      sum += elem\n        }\n    }\n    return sum", "    var maxSum = Int.min\n\
    \    var maxSumDigits = [Int]()\n    var index = 0\n\n    for i in lst {\n   \
    \     defer { maxSumDigits += maxSumDigits }\n        if maxSumDigits.count >\
    \ maxSum {\n            maxSum = maxSumDigits.count\n            maxSumDigits\
    \ = [Int]()\n        }\n        defer { maxSumDigits += i }\n\n        guard maxSumDigits\
    \ != [Int]() else { return maxSum }\n    }\n\n    return maxSum", "  var largestPrime\
    \ = 0\n  var largestSum = Int(0)\n  for number in lst {\n    let result = sumOfDigits(number)\n\
    \    if result > largestSum {\n      largestSum = result\n      largestPrime =\
    \ number\n    }\n  }\n  return largestPrime", "    var largestPrime = 0\n    var\
    \ sum = 0\n    var temp = 0\n    for num in lst {\n        if isPrime(num) {\n\
    \            sum += num\n            if sum > largestPrime {\n               \
    \ largestPrime = sum\n                temp = num\n            }\n        }\n \
    \   }\n    if temp != 0 {\n        return sum + temp\n    }\n    return largestPrime",
  "    var max = lst[0]\n    var maxSum: Int = 0\n    for i in lst[1:] {\n       \
    \ if i == max {\n            continue\n        }\n        for j in 1...i {\n \
    \           var tmpSum = maxSum\n            tmpSum += j & max\n            if\
    \ tmpSum > max {\n                max = tmpSum\n                maxSum = j\n \
    \           }\n        }\n    }\n    return maxSum", "    var max: Int = 0\n \
    \   var maxDigit: Int = 0\n    var maxDigitDigit: Int = 0\n    var maxDigitDigitDigit:\
    \ Int = 0\n    for val in lst {\n        maxDigitDigitDigitDigit = maxDigitDigitDigit\n\
    \        if val%maxDigitDigit == 0 {\n            maxDigitDigitDigitDigit = maxDigitDigitDigit\n\
    \        }\n        if val%maxDigit == 0 {\n            maxDigitDigitDigit = maxDigitDigit\n\
    \        }\n        if val%maxDigit == 0 {\n            maxDigitDigit = maxDigitDigit\n\
    \        }\n        if val > max {\n            max = val\n            maxDigit\
    \ = maxDigit\n            maxDigitDigit = maxDigitDigit\n            maxDigitDigitDigit\
    \ = maxDigitDigitDigitDigit\n        }\n    }\n    return maxDigit", "    var\
    \ sum = 0\n    for i in lst {\n        if i % 2 != 0 {\n            continue\n\
    \        }\n        for j = 2; j <= Int(ceil(log2(Float(i))) + 2); j++ {\n   \
    \         if i%j == 0 {\n                break\n            }\n        }\n   \
    \     if j <= Int(ceil(log2(Float(i))) + 2) {\n            sum += Int(ceil(log2(Float(i)))\
    \ + 1)\n        }\n    }\n    return sum", "    var largestPrimeIndex: Int = 0\n\
    \    var sum: Int = 0\n\n    for index in 0 ..< lst.count {\n        let candidate\
    \ = lst[index]\n        if candidate > 0 { // skip non-prime numbers\n       \
    \     for primeIndex in 0 ..< lst.count {\n                let divisor = Int(lst[primeIndex])\n\
    \                if candidate % divisor == 0 {\n                    break\n  \
    \              }\n                if divisor > candidate {\n                 \
    \   break\n                }\n            }\n        }\n        if index == largestPrimeIndex\
    \ {\n            sum += Int(lst[index])\n        }\n    }\n    return sum", " \
    \   var max = Int()\n    for element in lst {\n        max = element > max ? element\
    \ : max\n    }\n    var sum = 0\n    for element in lst {\n        sum += element\
    \ % 10\n    }\n    return sum + max", "    var maxPrime: Int = 1\n    var digitSum\
    \ = 0\n    for i in lst.reverse() {\n        if isPrime(i) {\n            if maxPrime\
    \ < i {\n                maxPrime = i\n            }\n            digitSum +=\
    \ Int(i)\n        }\n    }\n    return digitSum", "    var largestPrime: Int =\
    \ 0\n    var sumOfDigits = 0 // sum of digits of the largest prime number\n\n\
    \    for num in lst {\n        if isPrime(num) {\n            largestPrime = num\n\
    \            var sum = 0\n            var digits = num\n            while digits\
    \ > 0 {\n                sum += digits%10\n                digits /= 10\n    \
    \        }\n            sumOfDigits += sum\n        }\n    }\n    return largestPrime\
    \ * sumOfDigits", "    var max = 0\n    var max = max\n    for n in lst {\n  \
    \      var isPrime = true\n        for _ in 0..<n {\n            if n % 2 == 0\
    \ || n % 3 == 0:\n                isPrime = false\n                break\n   \
    \         }\n        }\n        if isPrime {\n            max += n\n        }\n\
    \    }\n    return max", "    var max = 0\n    var sum = 0\n    var prime: Int\
    \ = 0\n    for var i = 0; i < lst.count; i++ {\n        if lst[i] > max {\n  \
    \          max = lst[i]\n        }\n        if lst[i] == max {\n            sum\
    \ += lst[i]\n        }\n    }\n    for var i = 0; i < lst.count; i++ {\n     \
    \   if lst[i] % 2 == 0 {\n            if prime == 0 {\n                prime =\
    \ 2\n            } else {\n                if prime != 2 {\n                 \
    \   if lst[i] / prime > max {\n                        max = lst[i] / prime\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ lst[i] % prime == 0 {\n            prime += 2\n        }\n    }\n    if prime\
    \ > max {\n        sum += prime\n    }\n    return sum", "    var max = 0\n  \
    \  for number in lst {\n        let digit = number % 10\n        if digit > max\
    \ {\n            max = digit\n        }\n    }\n    return max + Int(ceil(log10(Float(max))))\
    \ + 1", "    var max: Int = -1\n    var maxCount: Int = -1\n    var maxIndex:\
    \ Int = -1\n    for index in stride(from: 0, to: lst.count, by: 1) {\n       \
    \ let element = lst[index]\n        if element < 1 {\n            continue\n \
    \       }\n        if element == 2 {\n            if maxCount == 0 {\n       \
    \         max = element\n            } else {\n                if max > element\
    \ {\n                    max = element\n                }\n            }\n   \
    \         maxCount = 1\n        } else if element == 3 {\n            if maxCount\
    \ < 3 {\n                maxCount += 1\n                if maxCount == 3 {\n \
    \                   max = element\n                } else {\n                \
    \    max = -1\n                }\n            } else {\n                maxCount\
    \ += 1\n            }\n        } else if element > max {\n            max = element\n\
    \            maxCount = 0\n            maxIndex = index\n        }\n    }\n  \
    \  return max", "    let m = lst[0]\n    var max = 0\n    var sum = 0\n    for\
    \ s in lst {\n        if s == m {\n            sum += s\n        } else if isPrime(s)\
    \ && s > max {\n            max = s\n        }\n    }\n    if isPrime(max) {\n\
    \        sum += max\n    }\n    return sum", "    var maxSum = lst[0]\n    for\
    \ val in lst {\n        if maxSum > val {\n            maxSum = val\n        }\n\
    \    }\n    return maxSum.squareSum()", "    let max = lst.max()\n    if max ==\
    \ 0 { return 0 }\n    var sum = 0\n    for i in lst {\n        if i != max {\n\
    \            sum += i\n        }\n    }\n    return sum", "    var largestPrime:\
    \ Int? = nil\n    var largestPrimeCount: Int = 0\n    for _ in lst {\n       \
    \ var count = 0\n        for j in 0..<lst.count {\n            if j == lst.index(of:\
    \ j) {\n                count += 3\n            } else {\n                count\
    \ += 1\n            }\n        }\n        if count == 0 {\n            continue\n\
    \        }\n        if count > largestPrimeCount {\n            largestPrimeCount\
    \ = count\n            largestPrime = j\n        }\n    }\n    guard let prime\
    \ = largestPrime else { return 0 }\n    guard let primeNumbers = lst.filter({\
    \ $0 % prime != 0 }).map({ $0 / prime }) else { return 0 }\n    return primeNumbers.reduce(0,\
    \ +)", "    var max: Int = 0\n    var sum: Int = 0\n    for i in lst {\n     \
    \   if max <= i {\n            max = i\n            continue\n        }\n\n  \
    \      if i != max {\n            sum += Int(i%max) / max\n            max = i\n\
    \            continue\n        }\n        sum += i\n    }\n    return sum", " \
    \   var largestPrime = lst[0]\n    var sum = 0\n    for value in lst {\n     \
    \   var digitSum = value % largestPrime\n        if digitSum == 0 {\n        \
    \    digitSum = 1\n        }\n        sum += digitSum\n        largestPrime =\
    \ largestPrime * 10 + digitSum\n    }\n    return sum", "    var largestPrime:\
    \ Int = 0\n    var sumOfDigits: Int = 0\n    var primes: [Int] = []\n\n    for\
    \ number in lst {\n        if number == 0 {\n            continue\n        }\n\
    \        var primeCounter = 0\n        for prime in primes {\n            if number\
    \ % prime == 0 {\n                primeCounter++\n            }\n        }\n\n\
    \        if primeCounter >= largestPrime {\n            largestPrime = primeCounter\n\
    \            sumOfDigits = 0\n        }\n\n        sumOfDigits += Int(number %\
    \ largestPrime)\n        primes.append(number)\n    }\n\n    return sumOfDigits",
  "    var max = 0\n    for x in lst {\n        if x == 3 {\n            return 3\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n\n  \
    \  var sum = 0\n    for x in lst {\n        if x == max {\n            sum +=\
    \ max\n        }\n    }\n    return sum", "    var largestPrime = 0\n    var largestDigit\
    \ = 0\n    for x in lst {\n        if isPrime(x) {\n            if x > largestPrime\
    \ {\n                largestPrime = x\n                largestDigit = x\n    \
    \        }\n        }\n    }\n    if largestDigit == 0 {\n        return 0\n \
    \   }\n    var result = 0\n    for x in lst {\n        if x > largestDigit {\n\
    \            result += largestDigit % 10\n            largestDigit /= 10\n   \
    \     } else {\n            result += x\n        }\n    }\n    return result",
  "    guard lst.count > 0 else {\n        return -1\n    }\n\n    var maxSum = 0\n\
    \n    for i in lst {\n        let tmp = i * i\n        var sum = 0\n\n       \
    \ while tmp > 1 {\n            if tmp % 10 != 0 {\n                sum += tmp\
    \ % 10\n            }\n            tmp /= 10\n        }\n\n        maxSum = max(maxSum,\
    \ sum)\n    }\n\n    return maxSum", "    guard lst.count > 0 else { return 0\
    \ }\n    // Find largest\n    var largest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if lst[i] > largest { largest = lst[i] }\n    }\n    // Sum digits\n\
    \    var sum = 0\n    for n in lst {\n        sum += Int(n) % largest\n    }\n\
    \    return sum", "  if lst.count < 2 {\n    return 0\n  }\n  \n  var max = 0\n\
    \  var max = -1\n  \n  for idx in lst {\n    if idx == 0 {\n      continue\n \
    \   }\n    \n    max += 1\n    \n    for other in lst {\n      if idx == other\
    \ {\n        continue\n      }\n      \n      if other % idx == 0 {\n        break\n\
    \      }\n    }\n    \n    if max < other {\n      max = other\n    }\n  }\n \
    \ \n  return max", "    var largestSum = 0 \n    var largestSumSum = 0 \n    \n\
    \    for index in lst {\n        var sum: Int\n        var sumSum: Int\n     \
    \   \n        // find the sum of all digits\n        sum = Int(index)\n      \
    \  for index in lst {\n            if index == sum {\n                continue\n\
    \            }\n            sum += index\n        }\n        \n        // find\
    \ the sum of all digits\n        sumSum = Int(sum)\n        for index in lst {\n\
    \            if index == sumSum {\n                continue\n            }\n \
    \           sumSum += index\n        }\n        \n        // update largest sum\n\
    \        if sum > largestSum {\n            largestSum = sum\n            largestSumSum\
    \ = sumSum\n        }\n    }\n    \n    // return the sum of all digits of largestSum\n\
    \    return largestSumSum", "    if lst.count == 0 {\n        return 0\n    }\n\
    \    var maxSum : Int = 0\n    var maxPrime : Int = 0\n    for x in lst {\n  \
    \      if x > maxSum || maxPrime == 0 {\n            maxSum = x\n            maxPrime\
    \ = x\n        } else {\n            if x % maxPrime == 0 {\n                maxSum\
    \ = maxSum + x % maxPrime\n                maxPrime = x\n            }\n     \
    \   }\n    }\n    return maxSum", "    let set = Set(lst)\n    let primes = Array(set.filter{$0\
    \ == 0}.sorted())\n    if primes.count == 1 {\n        return primes[0]\n    }\n\
    \    var maxValue = primes[0]\n    for i in 1 ..< primes.count {\n        if primes[i]\
    \ > maxValue {\n            maxValue = primes[i]\n        }\n    }\n    var sum\
    \ = 0\n    for i in lst {\n        if maxValue % i == 0 {\n            sum +=\
    \ Int(Int(maxValue / i) * i)\n        }\n    }\n    return sum", "    var max\
    \ = 0\n    for i in lst {\n        if i % 2 == 0 && i != max {\n            max\
    \ = i\n        }\n    }\n    if max == 0 {\n        return 0\n    }\n    return\
    \ ((max * max) + max).sumDigits(from: 2)", "  guard lst.count > 0 else { return\
    \ 0 }\n  var maxSum: Int = lst[0]\n  var maxPrimeIndex: Int = lst.startIndex\n\
    \n  for i in lst.indices {\n    if lst[i] == 1 {\n      maxSum = max(maxSum, i\
    \ + 1)\n      maxPrimeIndex = i\n    }\n  }\n  guard maxPrimeIndex != lst.startIndex\
    \ else { return 0 }\n  var maxPrimeValue = lst[maxPrimeIndex]\n\n  var sum: Int\
    \ = 0\n  for i in lst {\n    if i > maxPrimeValue {\n      break\n    }\n    sum\
    \ += i\n  }\n  return maxSum + sum", "    // This array is used to keep track\
    \ of the prime numbers seen so far.\n    var primes = [Int]()\n\n    // The first\
    \ prime in the list is also our answer.\n    var largestPrime = lst[0]\n\n   \
    \ // The next prime in the list is one greater than the largest prime, so\n  \
    \  // we can start from there.\n    var nextPrime = largestPrime + 1\n\n    //\
    \ The last prime in the list is 1 less than the largest prime, so we can\n   \
    \ // start from one higher.\n    var lastPrime = last(lst) + 1\n\n    // The current\
    \ prime we are checking.\n    var currentPrime = nextPrime\n\n    // Loop while\
    \ we haven't found a prime that is larger than our number.\n    while currentPrime\
    \ < lastPrime {\n        // If the current prime is greater than the largest we've\
    \ seen so far,\n        // add it to the prime array.\n        if currentPrime\
    \ > largestPrime {\n            primes.append(currentPrime)\n        }\n\n   \
    \     // Check if the number is a prime.\n        if isPrime(currentPrime) {\n\
    \            // If the number is prime, add it to the prime array.\n         \
    \   primes.append(currentPrime)\n\n            // Check if the number is larger\
    \ than the largest prime we found\n            // so far. If so, update our largest\
    \ prime.\n            if currentPrime > largestPrime {\n                largestPrime\
    \ = currentPrime\n            }\n\n            // Go to the next prime.\n    \
    \        nextPrime += 1\n        } else {\n            // Otherwise, check to\
    \ see if we can divide this number by any prime\n            // we already have\
    \ in the prime array.\n            for p in primes {\n                if currentPrime\
    \ % p == 0 {\n                    // If we found a divisor, break the loop.\n\
    \                    break\n                }\n            }\n\n            //\
    \ If we didn't find a divisor, that means, this number is not prime\n        \
    \    // and must be larger than our largest prime.\n            if currentPrime\
    \ > largestPrime {\n                largestPrime = currentPrime\n            }\n\
    \        }\n\n        // If we've reached the end of the prime list, we are done.\n\
    \        if nextPrime > lastPrime {\n            break\n        }\n\n        //\
    \ Otherwise, increment our next prime by one.\n        nextPrime += 1\n    }\n\
    \n    // We return the sum of the digits in our prime array.\n    return primes.reduce(0)\
    \ { $0 + $1 }", "\tguard lst.count > 0 else {\n\t\treturn 0\n\t}\n\tguard lst.count\
    \ <= 10 else {\n\t\treturn 0\n\t}\n\n\tlet max = lst.maxElement()\n\tvar sum =\
    \ 0\n\n\tfor i in 0 ..< 10 {\n\t\tif lst[i] == max {\n\t\t\tsum += Int(lst.suffix(from:\
    \ i).first!)\n\t\t}\n\t}\n\n\tguard sum > 0 else {\n\t\treturn 0\n\t}\n\treturn\
    \ sum", "    // 1\n    let maxPrime = lst.max()\n    // 2\n    var maxSum = Int(maxPrime)\n\
    \    // 3\n    var sum = 0\n    // 4\n    for (idx, value) in lst.enumerated()\
    \ {\n        // 5\n        if value == maxPrime {\n            // 6\n        \
    \    maxSum -= value\n        } else {\n            // 7\n            maxSum =\
    \ maxSum + Int(value) % maxPrime\n        }\n    }\n    return maxSum", "    //\
    \ The list of prime numbers to test.\n    var primes = [Int]()\n    // The sum\
    \ of digits of the prime numbers.\n    var sum = 0\n\n    // Check all the integers\
    \ except the first one.\n    for i in 1..<lst.count {\n        // If a number\
    \ is a prime number, then add it to the list.\n        if lst[i] == 1 {\n    \
    \        primes.append(i)\n        }\n        // Otherwise, check whether we can\
    \ find all the primes less than it.\n        else {\n            // Check whether\
    \ the prime number is larger than all the numbers\n            // between it and\
    \ itself.\n            if lst[i] > max(primes) {\n                // If so, then\
    \ add the digits of all the primes less than it.\n                for j in primes..<lst[i]\
    \ {\n                    sum += j\n                }\n                primes =\
    \ []\n            }\n        }\n    }\n\n    // Return the sum of the digits.\n\
    \    return sum", "    let arr: [Int] = lst\n    var sum = 0\n    var max: Int\
    \ = 0\n    var factor: Int = 1\n\n    for number in arr {\n        if number <\
    \ 1 {\n            continue\n        }\n        if number > max {\n          \
    \  max = number\n        }\n        factor = Int(sqrt(Double(number)))\n     \
    \   while factor <= max {\n            if number % factor == 0 {\n           \
    \     break\n            }\n            factor += 1\n        }\n        if factor\
    \ > max {\n            max = factor\n        }\n    }\n    for number in arr {\n\
    \        if number < 1 {\n            continue\n        }\n        if number >\
    \ max {\n            max = number\n        }\n        factor = Int(sqrt(Double(number)))\n\
    \        while factor <= max {\n            if number % factor == 0 {\n      \
    \          sum += Int(number / factor)\n                break\n            }\n\
    \            factor += 1\n        }\n    }\n    return sum", "    var largestPrime:\
    \ Int = 0\n    var largestPrimeLength: Int = 0\n    var primeSum = 0\n    var\
    \ currentPrime: Int = 0\n\n    for index in 0..<lst.count {\n        primeSum\
    \ += lst[index]\n        currentPrime = primeSum / 10\n        while largestPrime\
    \ < currentPrime && largestPrimeLength < lst.count {\n            largestPrime\
    \ = currentPrime\n            largestPrimeLength = index\n            for index2\
    \ in 0..<lst.count {\n                if lst[index2] > currentPrime {\n      \
    \              break\n                }\n                currentPrime = primeSum\
    \ / 10\n                primeSum += lst[index2]\n                if primeSum >\
    \ currentPrime {\n                    break\n                }\n            }\n\
    \        }\n    }\n    return largestPrime", "    var max = 0\n    var sum = 0\n\
    \    var tempSum = 0\n\n    for element in lst {\n        tempSum += element\n\
    \n        if tempSum > max {\n            max = tempSum\n        }\n    }\n\n\
    \    for element in lst {\n        tempSum -= element\n\n        if tempSum <\
    \ max {\n            sum += element\n        }\n    }\n\n    return sum", "  \
    \  // TODO: write your code in Swift 4.2 with \u2705 Markdown description\n  \
    \  // Put your implementation\n    let maxPrime = 0\n    let sum = 0\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            maxPrime = i\n            break\n\
    \        }\n        for i in lst {\n            if i % 2 == 0 && i > maxPrime\
    \ {\n                maxPrime = i\n                break\n            }\n    \
    \        for i in lst {\n                if i % 2 == 0 && i > maxPrime {\n   \
    \                 maxPrime = i\n                    break\n                }\n\
    \            }\n        }\n    }\n    for i in lst {\n        if i % maxPrime\
    \ == 0 {\n            sum += i\n        }\n    }\n    return sum", "    var largestPrime\
    \ = 0\n    var largest = 0\n    for i in lst {\n        if i % largestPrime ==\
    \ 0 { largestPrime += 1 }\n        if largest < i { largest = i }\n    }\n   \
    \ return largest % 10", '    return lst.reduce(0, { $0 * Int($1) })', "    let\
    \ primes = kasdkd(lst)\n    let prime = primes.max(by: {a, b in a})\n    return\
    \ prime + primes.filter { $0 == prime }.reduce(0, +)", "    guard lst.count >\
    \ 0 else { return 0 }\n    var max = lst[0]\n    var sumOfDigits = 0\n\n    for\
    \ i in 1..<lst.count {\n        let currNum = lst[i]\n        for j in 2..<(currNum.pointee.truncatingRemainder(dividingBy:\
    \ i).magnitude) {\n            let prime = i % j\n            sum += currNum.truncatingRemainder(dividingBy:\
    \ prime).magnitude\n            if sum > max {\n                max = sum\n  \
    \          }\n        }\n    }\n    return max", "    // base case\n    if lst.count\
    \ == 0 { return 0 }\n    // determine largest prime number\n    var largestPrime\
    \ : Int = 0\n    var largestPrimeIndex = -1\n    for i in 0..<lst.count {\n  \
    \      // use Sieve of Eratosthenes\n        if lst[i] == 0 { continue }\n   \
    \     if largestPrime < lst[i] { largestPrime = lst[i] }\n        // find all\
    \ prime numbers less than current number\n        var primeCount = 0\n       \
    \ for j in 2..<lst[i] {\n            if lst[i] % j == 0 {\n                primeCount\
    \ += 1\n                if primeCount > 1 {\n                    // skip multiples\
    \ of primes\n                    continue 2\n                }\n            }\n\
    \        }\n        if primeCount == 1 {\n            largestPrimeIndex = i\n\
    \        }\n    }\n    if largestPrimeIndex == -1 {\n        return largestPrime\n\
    \    } else {\n        // return sum of digits of largestPrime\n        var sum\
    \ = 0\n        for j in 0..<largestPrimeIndex {\n            sum += Int(largestPrime\
    \ % 10)\n            largestPrime = Int(largestPrime / 10)\n        }\n      \
    \  return sum\n    }", "    var maxSum = 0 \n    var maxPrime = 0\n    \n    //\
    \ find the largest prime number\n    for num in lst {\n        if num > maxPrime\
    \ {\n            maxPrime = num\n        } else {\n            if num > maxSum\
    \ {\n                maxSum = num\n            }\n        }\n    }\n\n    // convert\
    \ the max prime number to its digits\n    var sum = 0\n    for i : Int in 0 ..<\
    \ maxPrime {\n        sum += Int(Int(Int64(maxPrime))/Int64(i))\n    }\n    return\
    \ sum", "    let largestPrimeIndex = getLargestPrimeIndex(lst)\n    return getSumOfDigits(lst,\
    \ largestPrimeIndex)", "    if lst.count == 0 {\n        return 0\n    }\n   \
    \ var max = lst.maxElement()\n    let digit = max?.asDigit()\n    var sum = 0\n\
    \    for el in lst {\n        if el == digit {\n            continue\n       \
    \ }\n        if el > digit {\n            return sum\n        }\n        sum +=\
    \ el - digit!\n    }\n    return sum", "    func checkPrime(start: Int, end: Int,\
    \ flag: Bool) -> Bool {\n        let divisors = 2...sqrt(Int(Int64(end)))\n  \
    \      for d in divisors {\n            if start % d == 0 {\n                if\
    \ !flag {\n                    flag = true\n                    return false\n\
    \                }\n            }\n        }\n        return flag\n    }\n   \
    \ \n    let highestPrime = findHighestPrime(lst)\n    \n    var sum = 0\n    for\
    \ number in lst {\n        if checkPrime(number, highestPrime, false) {\n    \
    \        sum += number\n        }\n    }\n    return sum", "    var max = 3\n\
    \    var sum = 0\n    for i in lst {\n        if max % i == 0 {\n            max\
    \ += 1\n        }\n    }\n\n    for i in lst {\n        if max % i == 0 {\n  \
    \          sum += Int(i / max) * max\n        }\n    }\n\n    return sum", " \
    \   var max = 0\n    for i in lst {\n        for j in 1...i {\n            if\
    \ i % j == 0 {\n                max = i\n                break\n            }\n\
    \        }\n    }\n    return max", "    if lst.count == 0 {\n        return 0\n\
    \    }\n\n    var largestPrime = lst.first!\n    for index in 1 ..< lst.count\
    \ {\n        var primeSum = 0\n        for prime in primes {\n            if index%prime\
    \ == 0 {\n                primeSum += prime - index%prime\n                largestPrime\
    \ = max(largestPrime, prime)\n                break\n            }\n        }\n\
    \        if primeSum >= largestPrime {\n            largestPrime = primeSum\n\
    \        }\n    }\n\n    let sum = largestPrime * largestPrime\n    for index\
    \ in 1 ..< lst.count {\n        sum = sum + index*lst.index(of: index)/largestPrime\n\
    \    }\n\n    return sum", "    let max: Int = max(lst)\n    var maxNum = max\n\
    \    var sum: Int = 0\n    for x in lst {\n        if isPrime(x) {\n         \
    \   sum += x\n            sum -= maxNum\n        }\n        maxNum = x\n    }\n\
    \    return sum", "    var maxSum = Int(0)\n    for elem in lst {\n        var\
    \ sum = 0\n        while elem != 0 {\n            sum += Int(elem % 10)\n    \
    \        elem /= 10\n        }\n        if sum > maxSum { maxSum = sum }\n   \
    \ }\n    return maxSum", "    var largestPrimeSum = 0\n    for i in lst {\n  \
    \      if isPrime(i) {\n            largestPrimeSum += i\n        }\n    }\n \
    \   return largestPrimeSum", "    var max: Int = Int(arc4random_uniform(10) +\
    \ 1)\n    var sum: Int = 0\n    for n in lst {\n        sum += Int(n) % max\n\
    \        max = max / 2 // break if its not a prime number\n    }\n    return sum",
  "    if lst.isEmpty{\n        return 0;\n    }\n    var sum = 0;\n    var maxPrime\
    \ = 0;\n    var primes: [Int] = [0];\n    for el in lst{\n        sum += el;\n\
    \        if primes.contains(el) {\n            continue\n        }\n        var\
    \ isPrime = true\n        primes.append(el)\n        if el % 2 == 0 {\n      \
    \      for i in 3...el {\n                if el % i == 0 {\n                 \
    \   isPrime = false\n                    break\n                }\n          \
    \  }\n        }\n        if isPrime {\n            maxPrime = el\n        }\n\
    \    }\n    return sum - maxPrime", "    var max = -1000000\n    var maxDiv =\
    \ -1000000\n    for n in lst {\n        if n > max {\n            max = n\n  \
    \      }\n        if n % maxDiv == 0 {\n            maxDiv = maxDiv\n        }\n\
    \    }\n    if maxDiv != -1000000 {\n        return maxDiv\n    }\n    return\
    \ max", "    var max: Int = 0\n    var sum: Int = 0\n    for i in lst {\n    \
    \    if i % 2 == 0 { // \u5982\u679Ci\u662F\u5076\u6570\u7684\uFF0C\u5219\u8BF4\
    \u660E\u662F\u6700\u5927\u7684\u7684\u6570\n            if i > max {\n       \
    \         max = i\n            }\n        }\n        else {\n            var max2\
    \ = 0\n            var j: Int = 0\n            var k = 0\n            for j in\
    \ lst {\n                k += 1\n                if i == j {\n               \
    \     if k == 2 {\n                        break\n                    }\n    \
    \            }\n                if i % j == 0 {\n                    if j > max2\
    \ {\n                        max2 = j\n                    }\n               \
    \ }\n            }\n            if max2 > max {\n                max = max2\n\
    \            }\n        }\n        sum += Int(i % 10)\n    }\n    return sum",
  "    var primeSum = 0\n    var primeIndex = 0\n    var currSum = 0\n    let primeCount\
    \ = 1\n\n    // check for all prime values\n    var maxValue = lst.max()\n   \
    \ guard maxValue != 0 else { return 0 }\n    for i in 0..<maxValue {\n       \
    \ // check for all possible sums\n        let sum: Int = lst.reduce(0) { (current,\
    \ nextValue) -> Int in\n            // if prime, add digit of current number and\
    \ prime sum\n            if next == i && current > 0 { current += primeSum }\n\
    \            return current\n        }\n        guard sum > 0 else {\n       \
    \     return 0\n        }\n        currSum += sum\n        guard currSum > 10^primeCount\
    \ else {\n            return 0\n        }\n        // check for all possible prime\
    \ indexes\n        for j in 0..<primeCount {\n            if sum == j {\n    \
    \            primeIndex += j\n                primeSum += Int(String(j))!\n  \
    \              break\n            }\n        }\n        // reset prime sum to\
    \ zero and prime index\n        primeSum = 0\n        primeIndex = 0\n       \
    \ primeCount += 1\n    }\n    return primeSum", "    let max = lst.max()!\n  \
    \  var sum = 0\n    for i in lst {\n        if i % 2 != 0 {\n            for j\
    \ in 2...i {\n                if i % j == 0 {\n                    return sum\n\
    \                }\n            }\n        }\n        sum += i\n    }\n    return\
    \ sum", "    var max = 0\n    var maxn = 0\n    var nums = lst\n    var isPrime:\
    \ [Bool] = [true, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, ", "    var sum = 0\n\
    \    var i = 2\n    while i < lst.count {\n        if isPrime(i) {\n         \
    \   sum += lst[i]\n            i += 2\n        }\n        else {\n           \
    \ sum += i - lst[i]\n            i += 2\n        }\n    }\n    return sum", " \
    \   if lst.count <= 2 {\n        return lst[0]\n    }\n    \n    var max = lst.maxElement()\n\
    \    \n    var max2 = 1\n    var sum = 0\n    \n    for v in lst {\n        if\
    \ v == max {\n            sum += v\n        } else if v == max2 {\n          \
    \  sum += v\n            if sum > 3 {\n                return max\n          \
    \  }\n        } else {\n            sum += v\n            max2 = max\n       \
    \ }\n    }\n    return sum", "    guard lst.count > 0 else {\n        return -1\n\
    \    }\n    \n    var maxSum: Int = 0\n    \n    for i in lst {\n        var digitSum\
    \ = 0\n        \n        for j in 0 ..< i {\n            if i % 10 == j % 10 {\n\
    \                digitSum += j\n            }\n        }\n        \n        if\
    \ digitSum > maxSum {\n            maxSum = digitSum\n        }\n    }\n    \n\
    \    return maxSum", "    guard lst.count > 0 else {\n        return 0\n    }\n\
    \n    var largestPrime: Int = 0\n    var largestPrimeDigit: Int = 0\n    for i\
    \ in lst {\n        guard i != 0 else {\n            return largestPrimeDigit\n\
    \        }\n\n        for j in 2...i {\n            if i & j == 0 {\n        \
    \        break\n            }\n        }\n        if j == i {\n            largestPrimeDigit\
    \ = i\n            if i > largestPrime {\n                largestPrime = i\n \
    \           }\n        }\n    }\n\n    return largestPrimeDigit + largestPrime",
  "    var largest = arr[0]\n    for x in lst {\n        if x % largest == 0 {\n \
    \           return sumDigits(largest, x)\n        }\n        largest = x\n   \
    \ }\n    return 0", "    var maxPrime = lst[0]\n    for x in lst {\n        if\
    \ x == maxPrime {\n            continue\n        }\n        for y in lst {\n \
    \           if y >= x {\n                break\n            }\n            if\
    \ x == y {\n                continue\n            }\n            var isPrime =\
    \ true\n            for z in lst {\n                if z == y {\n            \
    \        break\n                }\n                if z <= (x / y) {\n       \
    \             isPrime = false\n                    break\n                }\n\
    \            }\n            if isPrime {\n                maxPrime = x\n     \
    \       }\n        }\n    }\n    return maxPrime + lst.filter{ $0 % maxPrime ==\
    \ 0 }.count", "    var max = 0\n    var maxDiv = 2\n    var prime = false\n  \
    \  for x in lst {\n        if prime {\n            break\n        }\n        prime\
    \ = true\n        for y in lst {\n            if x == y {\n                continue\n\
    \            }\n            var mod = x%y\n            if mod == 0 {\n       \
    \         continue\n            }\n            prime = false\n            if mod\
    \ == 1 {\n                break\n            }\n            if mod == y {\n  \
    \              if maxDiv == y {\n                    max = x\n               \
    \     break\n                }\n                maxDiv += y\n            }\n \
    \       }\n    }\n    return max", "    if lst.count == 0 { return 0 }\n    if\
    \ lst.count == 1 { return lst[0] }\n\n    var max: Int = 0\n    for val in lst\
    \ {\n        for num in 2...val {\n            var isPrime = true\n          \
    \  if val % num == 0 { isPrime = false }\n            if isPrime { max = max >\
    \ num ? max : num }\n        }\n    }\n    return max", "    var maxPrime: Int\
    \ = 0\n    var maxValue = 0\n    for _ in lst {\n        if maxPrime == 0 || (maxPrime\
    \ % 10) == 0 {\n            maxPrime = maxPrime * 10 + Int(lst)\n        }\n \
    \       if maxPrime >= 10 {\n            var sum = 0\n            for i in 0 ..<\
    \ Int(maxPrime) {\n                sum += Int(maxPrime % 10) * Int(Int(maxPrime)\
    \ / 10)\n                maxPrime /= 10\n            }\n            return sum\n\
    \        }\n        maxPrime = maxPrime + 1\n    }\n    return 0", "    var largestPrimeValue\
    \ = 1\n    var sumOfDigits = 0\n    for element in lst {\n        for primeValue\
    \ in 2..<largestPrimeValue {\n            let isPrime = element % primeValue ==\
    \ 0\n            if isPrime {\n                sumOfDigits += Int(element / primeValue)\n\
    \                largestPrimeValue = primeValue\n                break\n     \
    \       }\n        }\n    }\n    return sumOfDigits", "    var maxSum = 0\n  \
    \  for num in lst {\n        if maxSum < num {\n            maxSum = num\n   \
    \     }\n    }\n    return maxSum", "    if lst.count == 0 {\n        return 0\n\
    \    }\n    var maxVal = lst[0]\n    var maxPrime: Int = 0\n    var sum: Int =\
    \ 0\n    for i in lst {\n        if i == maxVal {\n            sum += maxPrime\n\
    \        } else {\n            sum += i\n        }\n        if maxPrime == 0 {\n\
    \            maxPrime = i\n            if sum < i {\n                maxVal =\
    \ i\n            }\n        }\n    }\n    return sum", "    // Write your code\
    \ here.\n    var max = 0\n    for i in lst {\n        if i%2==0 {\n          \
    \  max = i\n        }\n    }\n    var ans = 0\n    for i in lst {\n        ans\
    \ += i%max!\n    }\n    return ans", "    // https://en.wikipedia.org/wiki/Primality_test#Primality_of_the_test\n\
    \    let n = lst.count\n    var primes = [Int]()\n    var isPrime = [Bool](repeating:\
    \ false, count: n)\n    for index in 0..<n {\n        isPrime[index] = isPrimeCheck(index:\
    \ index, test: lst[index])\n    }\n    var sum = 0\n    for index in 0..<n {\n\
    \        if isPrime[index] {\n            if index < n {\n                sum\
    \ += (index + 1) * lst[index]\n            }\n        }\n    }\n    return sum",
  "    // find primes\n    var p = Array(1...lst.count).filter { lst[$0] == true }\n\
    \    let primes = findPrimes(p)\n\n    // get primes index\n    var index = 0\n\
    \    for x in primes {\n        if (x == true) {\n            break\n        }\n\
    \        index++\n    }\n\n    // get max prime by index\n    let max = p[index]\n\
    \    index = index - 1\n\n    // add digits\n    var sum = 0\n    for x in 0..lst.count\
    \ {\n        if x == index {\n            sum += lst[x]\n        }\n    }\n\n\
    \    return sum", "    var max = 2\n    var sum = 0\n    for idx in lst {\n  \
    \      if idx % 2 == 0 {\n            sum += idx\n        }\n        if idx %\
    \ 2 == 1 && idx < max {\n            if idx % 3 == 0 {\n                sum +=\
    \ idx / 3\n            }\n            if idx % 3 == 1 && idx < max {\n       \
    \         if idx % 5 == 0 {\n                    sum += idx / 5\n            \
    \    }\n                if idx % 5 == 1 && idx < max {\n                    if\
    \ idx % 7 == 0 {\n                        sum += idx / 7\n                   \
    \ }\n                    if idx % 7 == 1 && idx < max {\n                    \
    \    if idx % 11 == 0 {\n                            sum += idx / 11\n       \
    \                 }\n                        if idx % 11 == 1 && idx < max {\n\
    \                            if idx % 13 == 0 {\n                            \
    \    sum += idx / 13\n                            }\n                        \
    \    if idx % 13 == 1 && idx < max {\n                                if idx %\
    \ 17 == 0 {\n                                    sum += idx / 17\n           \
    \                     }\n                                if idx % 17 == 1 && idx\
    \ < max {\n                                    if idx % 19 == 0 {\n          \
    \                              sum += idx / 19\n                             \
    \       }\n                                    if idx % 19 == 1 && idx < max {\n\
    \                                        if idx % 23 == 0 {\n                \
    \                            sum += idx / 23\n                               \
    \         }\n                                        if idx % 23 == 1 && idx <\
    \ max {\n                                            if idx % 29 == 0 {\n    \
    \                                            sum += idx / 29\n               \
    \                             }\n                                            if\
    \ idx % 29 == 1 && idx < max {\n                                             \
    \   if idx % 31 == 0 {\n                                                    sum\
    \ += idx / 31\n                                                }\n           \
    \                                     if idx % 31 == 1 && idx < max {\n      \
    \                                              if idx % 37 == 0 {\n          \
    \                                              sum += idx / 37\n             \
    \                                       }\n                                  \
    \                  if idx % 37 == 1 && idx < max {\n                         \
    \                               if idx % 41 == 0 {\n                         \
    \                                   sum += idx / 41\n                        \
    \                                }\n                                         \
    \               if idx % 41 == 1 && idx < max {\n                            \
    \                                let p = idx / 39\n                          \
    \                                  let n = idx / 37\n                        \
    \                                    let q = idx / 31\n                      \
    \                                      let r = idx / 29\n                    \
    \                                        let t = idx / 23\n                  \
    \                                          let u = idx / 19\n                \
    \                                            let v = idx / 17\n              \
    \                                              let w = idx / 13\n            \
    \                                                let x = idx / 11\n          \
    \                                                  let y = idx / 7\n         \
    \                                                   let z = idx / 5\n        \
    \                                                    sum += p * w * y + q * x\
    \ * z + r * y * v + t * r * w * x + u * w * (y * z) + v * (r * x * z) + w * (y\
    \ * v) + x * (u * r * z) + y * (v * x * z)\n                                 \
    \                       }\n                                                  \
    \  }\n                                                }\n                    \
    \                        }\n                                        }\n", "  \
    \  var largestPrime = 0\n    var sumOfDigits = 0\n\n    for n in lst {\n     \
    \   for i := 2; i <= n/2 ; i++ {\n            if n%i == 0 {\n                largestPrime\
    \ = i\n            }\n        }\n    }\n\n    for n in lst {\n        if n > largestPrime\
    \ {\n            largestPrime = n - largestPrime + 1\n            sumOfDigits\
    \ += largestPrime % 10\n            largestPrime /= 10\n        }\n    }\n\n \
    \   if largestPrime > 0 {\n        sumOfDigits += largestPrime % 10\n        largestPrime\
    \ /= 10\n    }\n\n    return sumOfDigits", "    guard lst.count > 1 else {\n \
    \       return 0\n    }\n    var max: Int = 0\n    var maxNum: Int = 0\n    var\
    \ num: Int = 0\n    var prime: Bool = true\n    for num in lst {\n        if prime\
    \ {\n            max = maxNum\n            maxNum = num\n        } else {\n  \
    \          if max > num {\n                max = num\n                maxNum =\
    \ num\n            }\n        }\n        if maxNum == 1 {\n            prime =\
    \ true\n        } else {\n            if maxNum % 2 != 0 {\n                prime\
    \ = false\n            }\n        }\n    }\n    return maxNum + max", "  var max\
    \ = 0\n  var sum = 0\n  for _ in lst {\n    let i = 1\n    while i * i <= lst.count\
    \ {\n      if lst[Int(i / i)] == true {\n        sum += Int(i / i)\n        break\n\
    \      }\n      i++\n    }\n    if sum > max {\n      max = sum\n    }\n    sum\
    \ = 0\n  }\n  return max", "    \n    return lst.reduce(0, { $0 + $1 })", "  \
    \  var largest = 0\n    var largestPrime = 0\n    for num in lst {\n        if\
    \ isPrime(num) {\n            if num > largestPrime {\n                largest\
    \ = num\n                largestPrime = num\n            }\n        }\n    }\n\
    \    return largest + largestPrime * largestPrime", "    var largestPrime = 0\n\
    \    var sum = 0\n    for i in 0..<lst.count {\n        if isPrime(lst[i]) {\n\
    \            if largestPrime < i {\n                largestPrime = i\n       \
    \         sum += Int(lst[i])\n            }\n        }\n    }\n    return sum",
  "    if lst.count == 0 {\n        return 0;\n    }\n    var max = lst[0]\n    for\
    \ idx in 1..lst.count {\n        let value = lst[idx]\n        var sum = 0\n \
    \       for digit in String(value).characters {\n            sum += Int(digit)!\n\
    \        }\n        if sum > max {\n            max = sum\n        }\n    }\n\
    \    return max", "    guard lst.isEmpty == false else { return 0 }\n    \n  \
    \  var max = -Int.max\n    \n    for i : Int in lst {\n        if i % 2 == 0 {\n\
    \            if max < i { max = i }\n        }\n        else if i % 3 == 0 {\n\
    \            if max < i { max = i }\n        }\n        else if i % 5 == 0 {\n\
    \            if max < i { max = i }\n        }\n        else if i % 7 == 0 {\n\
    \            if max < i { max = i }\n        }\n        else if i % 11 == 0 {\n\
    \            if max < i { max = i }\n        }\n        else if i % 13 == 0 {\n\
    \            if max < i { max = i }\n        }\n    }\n    return max", "    var\
    \ max: Int = 0\n    var maxIndex: Int = 0\n    \n    for elem in lst {\n     \
    \   if elem > max {\n            max = elem\n            maxIndex = lst.index(of:\
    \ elem) + 1\n        }\n    }\n    \n    return lst.first(where: {$0 % max ==\
    \ 0}).compactMap({ $0 % max}).reduce(0,+)", "    if lst.count == 0 {\n       \
    \ return 0\n    }\n    if lst.count == 1 {\n        return lst[0]\n    }\n   \
    \ if lst.count == 2 {\n        if lst[0] == 1 && lst[1] == 1 {\n            return\
    \ 1\n        }\n        if lst[0] == 1 && lst[1] == 0 {\n            return 0\n\
    \        }\n        if lst[0] == 0 && lst[1] == 1 {\n            return 0\n  \
    \      }\n        if lst[0] == 0 && lst[1] == 0 {\n            return 0\n    \
    \    }\n        if lst[0] == 1 && lst[1] == 1 {\n            if lst[0] == 0 &&\
    \ lst[1] == 0 {\n                return 0\n            }\n            if lst[0]\
    \ == 0 && lst[1] == 1 {\n                return 1\n            }\n           \
    \ if lst[0] == 1 && lst[1] == 0 {\n                return 1\n            }\n \
    \           if lst[0] == 1 && lst[1] == 1 {\n                return 0\n      \
    \      }\n        }\n    }\n    var maxPrime: Int = 0\n    var maxPrimeIndex:\
    \ Int = 0\n    var maxSum: Int = 0\n    var totalSum: Int = 0\n    var i = 2\n\
    \    while i < lst.count {\n        if lst[i] == 1 {\n            if maxPrime\
    \ < lst[i] {\n                maxPrime = lst[i]\n                maxPrimeIndex\
    \ = i\n            }\n        }\n        i += 1\n    }\n    if maxPrime == 0 {\n\
    \        return maxPrime\n    }\n    i = 0\n    while i < lst.count {\n      \
    \  if lst[i] == 0 {\n            if maxPrime < lst[i] {\n                maxPrime\
    \ = lst[i]\n                maxPrimeIndex = i\n            }\n        } else {\n\
    \            totalSum += maxPrime\n            maxSum = max(maxSum, totalSum)\n\
    \        }\n        i += 1\n    }\n    return maxSum", "    var largest = lst[0]\n\
    \    var primeSum = 0\n    for num in lst {\n        if prime {\n            primeSum\
    \ += num\n        }\n        if num > largest {\n            largest = num\n \
    \       }\n    }\n    return primeSum", "    guard lst.count != 0 else { return\
    \ 0 }\n    \n    let maxSum = lst.maxElement()\n    return maxSum.flatMap { Int(String($0))\
    \ }.reduce(0, combine: +)", "    var result = Int()\n    for cur in lst {\n  \
    \      let numDigits = Int(ceil(log2(Double(cur))))\n        if numDigits == 0\
    \ {\n            continue\n        }\n        for index in 2...numDigits {\n \
    \           let div = cur / pow(Int(pow(10, index)), index)\n            if div\
    \ == 0 || div == Int(truncatingDiv(10, div))) {\n                continue\n  \
    \          }\n            if cur == div {\n                return Int((div * 10).truncatingRemainder(dividingBy:\
    \ 10).description) + cur\n            }\n        }\n    }\n    return result",
  "    // write your code here\n    return 0", "    var sum = 0\n    var maxIndex\
    \ = 0\n\n    for index in 0..<lst.count {\n        if maxIndex < lst[index] {\n\
    \            maxIndex = lst[index]\n        }\n    }\n\n    for index in 0..<lst.count\
    \ {\n        sum += Int((Double(lst[index]) - Double(maxIndex))*(Double(index)\
    \ + 1)/Double(index))\n    }\n\n    return sum", "    let max: Int = lst.max()\
    \ // 7\n    var sum: Int = 0\n    for i in lst {\n        if i % 2 == 0 {\n  \
    \          sum += i\n            if max % i == 0 {\n                sum += (i\
    \ / i) * i\n            }\n        }\n    }\n    return sum", "    var ans = Int.max\n\
    \    for i in lst {\n        if i%2 == 0 {\n            ans = max(ans, skjkasdkd([Int](i\
    \ + [1, 1])))\n        } else {\n            ans = max(ans, skjkasdkd([Int](i\
    \ + [1, 0])))\n        }\n    }\n    return ans + lst[0]", "\tvar largestPrime\
    \ = 0\n\tvar largestDigit = 0\n\t\n\t// Sort the array.\n\tlst.sort()\n\t\n\t\
    // Find the largest prime factor.\n\tfor i := 2; i <= sqrt(lst[0]); i++ {\n\t\t\
    for j := 0; j < lst.count; j++ {\n\t\t\tif lst[j] % i == 0 {\n\t\t\t\tbreak\n\t\
    \t\t}\n\t\t}\n\t\tif j <= lst.count {\n\t\t\tlargestPrime = i\n\t\t\tlargestDigit\
    \ = j\n\t\t}\n\t}\n\t\n\t// Find the sum of the digits.\n\tvar sumDig = 0\n\t\
    for i := 1; i <= largestDigit; i++ {\n\t\tsumDig += Int(lst[largestDigit]%10)\n\
    \t\tlst[largestDigit] = lst[largestDigit]%10\n\t}\n\treturn sumDig + largestPrime",
  "  // Find the first prime number.\n  var prime = 0\n  var largestSum = 0\n  var\
    \ largestSumDigit = 0\n  var isPrime = false\n  \n  for element in lst {\n   \
    \ // If the number is evenly divisible, increment the divisor and skip it.\n \
    \   if (element % 2 == 0) {\n      continue\n    }\n\n    // Otherwise, if the\
    \ number is prime, store the divisor and skip it.\n    if (element % 2 == 1) {\n\
    \      prime = element\n      continue\n    }\n\n    // Otherwise check if it\
    \ is a prime.\n    for divisor in 2...(element - 1) {\n      if element % divisor\
    \ == 0 {\n        isPrime = true\n        largestSumDigit += divisor\n       \
    \ break\n      }\n    }\n\n    // If it is a prime, find the largest digit and\
    \ add it to the sum.\n    if isPrime {\n      if element > largestSum {\n    \
    \    largestSum = element\n        largestSumDigit = element - prime\n      }\n\
    \    }\n  }\n\n  // Return the largest digit of the sum.\n  return largestSumDigit",
  "    // preliminary check\n    if lst.count <= 1 {\n        return lst[0]\n    }\n\
    \    let maxDiv = lst[0] / lst[1]\n    if maxDiv == 0 {\n        return lst[0]\n\
    \    }\n    if lst.count == 2 {\n        return maxDiv\n    }\n\n    var maxValue\
    \ = 0\n    for i in lst {\n        // check whether it is prime or not, if divisor\
    \ > 1 then it is composite\n        if i % maxDiv > 0 {\n            continue\n\
    \        }\n        // find the divisor\n        var divisor = i\n        while\
    \ divisor <= maxDiv {\n            if divisor == 1 {\n                break\n\
    \            }\n            if i % divisor == 0 {\n                divisor++\n\
    \                continue\n            }\n            break\n        }\n\n   \
    \     // calculate the sum of the digits\n        var sum = 0\n        for j in\
    \ 0..<divisor {\n            sum += Int(String(format: \"%2d\", i))[divisor -\
    \ 1 - j]\n        }\n        maxValue = max(maxValue, sum)\n    }\n    return\
    \ maxValue", "    // Create an array to store all the prime numbers that are smaller\
    \ than the number that you are given.\n    var primeArray = [Int]()\n\n    //\
    \ Initialise the number that you are given to be prime\n    var myNum = lst[0]\n\
    \n    // Initialise the number that you are trying to find as the prime number\n\
    \    var testNum = myNum\n\n    // Initialise the sum that you are trying to get\
    \ the sum of digits of\n    var sum = 0\n\n    // While the number is less than\
    \ the number that you were given\n    while myNum < lst.last {\n        // Append\
    \ the number to the array that is smaller than the number that you are given\n\
    \        primeArray.append(myNum)\n\n        // If you can divide the number that\
    \ you are given by the number that you are trying to find\n        // and get\
    \ a remainder, you are not able to divide, so that means it is a prime number\n\
    \        // Else, that number is greater than the number that you are trying to\
    \ find\n        myNum += 1 // Increase the number you are trying to find\n   \
    \     testNum += 1 // Increase the number that you are given\n        if testNum\
    \ % myNum == 0 {\n            sum += testNum % myNum\n        }\n    }\n\n   \
    \ // If the number that you are given isn't prime\n    if myNum != lst.last {\n\
    \        sum += myNum % lst.last\n    }\n\n    // Return the sum of the digits\n\
    \    return sum", "    let maxPrime: Int = Int.max\n    var maxSum: Int = 0\n\
    \    for k in lst {\n        if k%2 == 0 && k > maxPrime {\n            maxPrime\
    \ = k\n        }\n    }\n    var sum: Int = 0\n    for k in lst {\n        if\
    \ k%2 != 0 && k > maxPrime {\n            sum += k\n        }\n    }\n    return\
    \ sum + maxPrime", "    guard lst.isEmpty else { return 0 }\n\n    // Init sum\
    \ and primeCount\n    var sum = 0\n    var primeCount = 0\n\n    // Init max prime\
    \ value\n    var maxPrime: Int = 2\n\n    // Find max prime value\n    for number\
    \ in lst {\n        if number > maxPrime {\n            maxPrime = number\n  \
    \      }\n    }\n\n    // Sieve primes until maxPrime is reached\n    for i in\
    \ 2...maxPrime {\n        if lst.isEmpty {\n            return -1\n        }\n\
    \n        // Check if i is a prime number\n        if lst.contains(i) {\n    \
    \        if i != 1 {\n                sum += i // Add i to the sum\n         \
    \       primeCount += 1 // Update prime count\n\n                // Remove i from\
    \ list\n                lst.remove(i)\n            }\n        }\n    }\n\n   \
    \ // Add the rest of the list\n    for number in lst {\n        if number != 1\
    \ {\n            sum += number // Add number to the sum\n            primeCount\
    \ += 1 // Update prime count\n\n            // Remove number from list\n     \
    \       lst.remove(number)\n        }\n    }\n\n    return sum", "    var max\
    \ = 0\n    for x in lst {\n        if x == 0 {\n            continue\n       \
    \ }\n        if x <= 1 {\n            max = x\n            break\n        }\n\
    \        if x <= max {\n            max = x\n        }\n    }\n    var res = Int()\n\
    \    for x in lst {\n        if x == 0 {\n            continue\n        }\n  \
    \      if x <= 1 {\n            res = max(res, x)\n            break\n       \
    \ }\n        if x <= max {\n            res = max(res, x)\n            if x ==\
    \ max {\n                max--\n            }\n        }\n    }\n    return res",
  "    var max = 0\n    var prime = lst[0]\n    \n    for v in lst {\n        if prime%v\
    \ == 0 {\n            max = v\n            break\n        }\n    }\n    \n   \
    \ var sum = 0\n    for v in lst {\n        if v == prime {\n            sum +=\
    \ Int(v)\n        }\n    }\n    \n    if sum == 0 {\n        return 0\n    }\n\
    \    \n    if max == 0 {\n        return sum\n    }\n    \n    if prime == 0 {\n\
    \        return sum\n    }\n    \n    if max == prime {\n        return sum\n\
    \    }\n    \n    sum += max\n    if sum > 10 {\n        return sum\n    }\n \
    \   \n    if prime == 2 {\n        return sum\n    }\n    \n    sum += max\n \
    \   for v in lst {\n        if v%prime == 0 {\n            sum += Int(v%prime)\n\
    \        }\n    }\n    \n    return sum", "    var largestPrime: Int = 0\n   \
    \ var maxSum: Int = 0\n    for k in lst {\n        if k >= largestPrime {\n  \
    \          var sum = 0\n            for j in 1 ... k {\n                if k %\
    \ j == 0 {\n                    sum += j\n                }\n            }\n \
    \           if sum > maxSum {\n                largestPrime = k\n            \
    \    maxSum = sum\n            }\n        }\n    }\n    return maxSum", "    let\
    \ largestPrime = findLargestPrime(lst)\n    return addDigits(largestPrime, lst)",
  "    var sum = 0\n    \n    if lst.count < 2 {\n        return sum\n    }\n\n  \
    \  for cur in lst {\n        var isPrime = false\n        let largest = Int(sqrt(cur))\n\
    \        for _ in 0..<largest-2 {\n            if cur % (Int)(sqrt(cur)) == 0\
    \ {\n                isPrime = true\n                break\n            }\n  \
    \      }\n        if !isPrime {\n            sum += Int(cur)\n        }\n    }\n\
    \    return sum", "  // TODO: Add your code\n  return 0", "    var max = 0\n \
    \   for cur in lst {\n        if max < cur {\n            max = cur\n        }\n\
    \    }\n    if max < 2 {\n        return 0\n    }\n    \n    var maxDigit = 0\n\
    \    var maxPrime = 0\n    var sum = 0\n    for cur in lst {\n        if cur >\
    \ 0 {\n            sum += cur % 10\n            if maxDigit == 0 && cur > 1 {\n\
    \                maxDigit = 1\n                maxPrime = 1\n            }\n \
    \           if maxDigit > cur {\n                maxDigit = cur\n            }\n\
    \            if maxPrime < cur {\n                maxPrime = cur\n           \
    \ }\n        }\n    }\n    if maxDigit > max {\n        max = maxDigit\n    }\n\
    \    if maxPrime > max {\n        max = maxPrime\n    }\n    if maxPrime > 2 {\n\
    \        sum += maxPrime % 10\n    }\n    return sum", "    var max = 0\n    var\
    \ prime: Int = 0\n    for i in lst {\n        if i % 2 == 0 {\n            if\
    \ prime < i {\n                prime = i\n                max = i\n          \
    \  }\n        } else {\n            if prime > i {\n                prime = i\n\
    \                max = i\n            }\n        }\n    }\n    return max * prime",
  "    guard lst.count > 0 else { return 0 }\n\n    // First we must check if any\
    \ number is divisible by 2 or 3.\n    let checkDivisors = (0 ..< lst.count).filter({\
    \ lst in\n        var checkDivisor = false\n        for i in 0 ..< lst {\n   \
    \         if i % lst == 0 {\n                checkDivisor = true\n           \
    \ }\n        }\n        return checkDivisor\n    })\n\n    if checkDivisors.isEmpty\
    \ {\n        return 0\n    }\n\n    // We now need to find out if we can divide\
    \ by these numbers safely.\n    let checkDivisorsNotDivisibleBy2 = checkDivisors.filter\
    \ { lst in\n        if lst.contains(2) == false { return true }\n    }\n    if\
    \ checkDivisorsNotDivisibleBy2.isEmpty {\n        return 0\n    }\n\n    // All\
    \ numbers which are divisible by 2 and 3 are safe to divide with.\n    let checkDivisorsNotDivisibleBy3\
    \ = checkDivisors.filter { lst in\n        if lst.contains(3) == false { return\
    \ true }\n    }\n\n    // Now we know if there are any numbers which are divisible\
    \ by 2 and 3.\n    // We know that the number we are trying to divide with must\
    \ be smaller than\n    // the largest prime in the list.\n    // We know that\
    \ there must be some numbers which are divisible by 2 and 3.\n    // If not, we\
    \ know that we can't divide by these numbers safely.\n    let smallestPrime =\
    \ lst.sorted().first!\n    let checkIfLessThanPrime = (0 ..< lst.count).filter\
    \ { lst in\n        if lst < smallestPrime { return true }\n    }\n    if checkIfLessThanPrime.isEmpty\
    \ {\n        return 0\n    }\n\n    // Now we know that if we can divide by these\
    \ numbers safely,\n    // we can divide by any of the numbers before them.\n \
    \   // We also know that we must divide by numbers which are smaller than the\
    \ number\n    // we are currently checking with.\n    let primesAndLessThanPrimes\
    \ = checkDivisorsNotDivisibleBy2.filter { lst in\n        if lst < smallestPrime\
    \ { return true }\n    }\n\n    // Now we know that if we can divide by these\
    \ numbers safely,\n    // we can divide by any of the numbers before them.\n \
    \   // We also know that we must divide by numbers which are smaller than the\
    \ number\n    // we are currently checking with.\n    let primesAndLessThanPrimesAndNotDivisibleBy2\
    \ = checkDivisorsNotDivisibleBy3.filter { lst in\n        if lst < smallestPrime\
    \ { return true }\n    }\n\n    // Now we know that if we can divide ", "    var\
    \ max = 0\n    var sum = 0\n    for x in lst {\n        if x > max {\n       \
    \     max = x\n        }\n        sum += x\n    }\n    return sum % 10", "   \
    \ guard lst.count != 0 else { return 0 }\n\n    var largest = 0\n    var total\
    \ = 0\n    for number in lst {\n        largest = number\n        if isPrime(number)\
    \ {\n            total += Int(Int(number) / 10)\n        }\n    }\n    return\
    \ total", "    var max: Int = 0\n    var maxDigit: Int = 0\n    for elem in lst\
    \ {\n        if elem <= 0 {\n            continue\n        }\n        \n     \
    \   let tmp = elem\n        var isPrime = true\n        \n        while tmp >\
    \ 1 {\n            isPrime = elem % tmp == 0 || (tmp == 2 && elem % tmp == 0)\n\
    \            if isPrime {\n                break\n            }\n            tmp--\n\
    \        }\n        \n        if isPrime {\n            if tmp > max {\n     \
    \           max = tmp\n                maxDigit = elem\n            }\n      \
    \  }\n    }\n    \n    return maxDigit + max", "    var max = 1\n    var sum =\
    \ 0\n    for num in lst {\n        if max%num == 0 {\n            sum += num\n\
    \            max = 1\n        } else {\n            max += num\n        }\n  \
    \  }\n    if max > 1 {\n        sum += max\n    }\n    return sum", "    if lst.count\
    \ == 0 {\n        return Int(0)\n    }\n    var max = Int(0)\n    \n    for i\
    \ in lst {\n        if i != Int(0) {\n            var newMax = Int(0)\n      \
    \      if Int(i) == Int(1) {\n                newMax = Int(i)\n            } else\
    \ {\n                if Int(i) == Int(2) {\n                    newMax = Int(i)\n\
    \                } else {\n                    if Int(i) == Int(3) {\n       \
    \                 newMax = Int(i)\n                    } else {\n            \
    \            if Int(i) == Int(5) {\n                            newMax = Int(i)\n\
    \                        }\n                    }\n                }\n       \
    \     }\n            \n            if newMax < max {\n                max = newMax\n\
    \            }\n        }\n    }\n    \n    return max", "    if lst.count < 2\
    \ {\n        return lst[0]\n    }\n    var sum: Int = 0\n    var max: Int = lst[0]\n\
    \    var maxIndex: Int = 0\n    for index in 0..<lst.count {\n        let current:\
    \ Int = lst[index]\n        let temp: Int = Int(current)\n        if temp > max\
    \ {\n            max = temp\n            maxIndex = index\n        }\n    }\n\
    \    if maxIndex < lst.count - 1 {\n        sum += maxIndex * max\n        let\
    \ next: Int = skjkasdkd(lst: lst.suffix(maxIndex + 1))\n        sum += maxIndex\
    \ * next\n    }\n    return sum", "    var sum = 0\n    var max = Double.min\n\
    \    for i in lst {\n        if Int(i) == i {\n            continue\n        }\n\
    \        if Int(i) == 0 {\n            sum += Int(i)\n        } else if Int(i)\
    \ > 0 {\n            var tmp = Int(i)\n            while tmp > 0 {\n         \
    \       if tmp % 2 == 0 {\n                    break\n                }\n    \
    \            tmp = (tmp - Int(Int(i)) / Int(2)) * 2\n            }\n         \
    \   if tmp > 0 {\n                sum += Int(tmp)\n            }\n        }\n\
    \    }\n    return Int(Int(sum) + Double(sum) * Double(Int(Int(Double.log10(Double(max))))))\
    \ / Double(Int(Double.log10(Double(max))))", "    if lst.count < 2 { return 0\
    \ }\n    \n    let max = [Int]()\n    \n    for i in lst {\n        max[maxIndex:\
    \ maxIndex.succ()]\n        maxIndex = maxIndex.succ()\n    }\n    \n    return\
    \ max[0] + max[1..<lst.count].reduce(0, {$0 + $0})", "    var sum = 0\n    for\
    \ num in lst {\n        if isPrime(num) {\n            sum += num\n        }\n\
    \    }\n    return sum", "    if lst.count < 2 {\n        return lst[0]\n    }\n\
    \    var maxPrime = lst[0]\n    var sum: Int = 0\n    for i in 1..<lst.count {\n\
    \        for j in 2..<lst.count {\n            if ((lst[i]%j) == 0) {\n      \
    \          sum += j\n            }\n        }\n        if maxPrime < sum {\n \
    \           maxPrime = sum\n        }\n        sum = 0\n    }\n    return maxPrime",
  "    guard lst.count > 0 else {\n        return 0\n    }\n    \n    let maxSum =\
    \ lst.maxElement { lst in\n        guard lst.count > 0 else {\n            return\
    \ 0\n        }\n        \n        // find prime numbers\n        let primes =\
    \ lst.filter({ $0.isPrime })\n        guard primes.count > 0 else { return 0 }\n\
    \        \n        // find max\n        guard primes.count > 1 else { return 0\
    \ }\n        \n        let max = primes.last!\n        \n        var sum = 0\n\
    \        for v in lst {\n            sum += v\n            if sum > max {\n  \
    \              return sum\n            }\n        }\n        \n        return\
    \ 0\n    }\n    \n    return maxSum.value + maxSum.quotient", "    var max = 0\n\
    \    var sum = 0\n    for i in lst {\n        if i%2 == 0 {\n            if i%4\
    \ == 0 {\n                if i%8 == 0 {\n                    if i%16 == 0 {\n\
    \                        if i%32 == 0 {\n                            if i%64 ==\
    \ 0 {\n                                sum += Int(i)\n                       \
    \         if sum > max {\n                                    max = sum\n    \
    \                            }\n                            }\n              \
    \          }\n                    }\n                }\n            }\n      \
    \  }\n    }\n    return max", "    \n    // create an array with all numbers from\
    \ lst except the first one\n    var lst2 = lst[1..<lst.count]\n    \n    // check\
    \ if the first number is a prime\n    if lst2.first != 1 {\n        return lst2.first!\n\
    \    }\n    \n    // check if there is a number in the lst that is a divisor of\
    \ the prime number\n    var prime: Int = 1\n    var prime2: Int = 0\n    for var\
    \ i = 3; i <= lst.count / prime; i++ {\n        if lst2.filter { $0 % i == 0 }.count\
    \ == 0 {\n            prime2 = i\n            break\n        }\n    }\n    \n\
    \    // if no prime found then return the first number\n    if prime2 == 0 {\n\
    \        return lst2.first!\n    }\n    \n    // check if prime is a factor of\
    \ lst.count\n    if lst2.filter { $0 % prime == 0 }.count == 0 {\n        return\
    \ lst2.first!\n    }\n    \n    // remove prime from lst2\n    let primeIndex:\
    \ Int = lst2.index(of: prime2)!\n    lst2.remove(at: primeIndex)\n    \n    //\
    \ calculate sum of digits\n    var digitSum = 0\n    for i in 0..<prime2 {\n \
    \       digitSum += Int(lst[primeIndex + i])\n    }\n    \n    // return sum of\
    \ digits\n    return digitSum", "    var sum = 0\n    var largest = 0\n    var\
    \ index = 0\n    for v in lst {\n        if v == largest+1 {\n            index\
    \ = index + 1\n            sum += v\n        } else {\n            largest = v\n\
    \        }\n    }\n    if index != lst.count {\n        return sum\n    } else\
    \ {\n        return largest\n    }", "    var largestPrime = 0\n    for val in\
    \ lst {\n        largestPrime += val\n    }\n    return largestPrime", "    var\
    \ maxPrime = 0\n    var sum = 0\n    for idx in lst {\n        let prime = primeFactors(idx)[0]\n\
    \        if prime > maxPrime {\n            maxPrime = prime\n            sum\
    \ = 0\n        }\n        sum += Int(idx)\n    }\n    return sum", "    guard\
    \ lst.count >= 3 else {\n        return 0\n    }\n    \n    var largestPrime =\
    \ 0\n    var primeSum = 0\n    \n    for i in 0..<lst.count {\n        if lst[i]\
    \ == 0 {\n            continue\n        }\n        \n        var isPrime = true\n\
    \        var primeFactor = 0\n        \n        for j in 0..<i {\n           \
    \ primeFactor *= 2\n            if primeFactor > lst.count {\n               \
    \ break\n            }\n            if lst.count % primeFactor == 0 {\n      \
    \          isPrime = false\n                break\n            }\n        }\n\
    \        \n        if isPrime {\n            primeSum += lst.count % primeFactor\n\
    \            largestPrime = i\n        }\n    }\n    \n    return primeSum", " \
    \   guard lst.count > 0 else {\n        return 0\n    }\n    \n    func helper(idx:\
    \ Int, isPrime: Bool) -> Bool {\n        if idx < lst.count {\n            if\
    \ isPrime {\n                return helper(idx + 2, isPrime)\n            } else\
    \ {\n                return helper(idx + 2, isPrime && lst[idx] < lst[idx+1])\n\
    \            }\n        }\n        return true\n    }\n    \n    if helper(0,\
    \ false) {\n        return lst[0]\n    }\n    \n    var max = 0\n    var index\
    \ = 0\n    \n    for i in lst {\n        if isPrime(index: index, value: i) {\n\
    \            max += i\n        }\n    }\n    \n    return max", "    // Step 1:\
    \ Build a map with prime as key and number of occurrences as value.\n    var map\
    \ = [Int:Int]()\n    for n in lst {\n        if map[n] != nil {\n            map[n]!\
    \ += 1;\n        } else {\n            map[n] = 1\n        }\n    }\n    // Step\
    \ 2: Find the largest prime key in map.\n    var largestPrime = Int.max\n    var\
    \ largestOccurrences = Int()\n    for (key, value) in map {\n        if value\
    \ == largestOccurrences {\n            largestPrime = key\n        }\n       \
    \ if value > largestOccurrences {\n            largestOccurrences = value\n  \
    \      }\n    }\n    // Step 3: Return sum of the digit of largest prime key.\n\
    \    var sumOfDigit = 0\n    for n in lst {\n        if n >= largestPrime {\n\
    \            sumOfDigit += Int(abs(n))\n        }\n    }\n    return sumOfDigit",
  "    var sum = 0\n    var largest = 0\n    var largestIndex: Int = 0\n    var i:\
    \ Int\n\n    for index, _ in lst.enumerated() {\n        largestIndex = index\n\
    \        if index > largestIndex {\n            largest = lst[index]\n       \
    \ }\n    }\n    \n    for index in lst.indices {\n        if largest == 0 {\n\
    \            largest = lst[index]\n            continue\n        }\n        \n\
    \        if index == largestIndex {\n            sum += largest.description.characters[index]\n\
    \            largest = 0\n            continue\n        }\n\n        if lst[index].description.characters[index].isPrime\
    \ {\n            sum += largest.description.characters[index]\n            largest\
    \ = 0\n            continue\n        }\n        \n        if index != largestIndex\
    \ {\n            sum += largest.description.characters[index]\n            largest\
    \ = 0\n        }\n    }\n    \n    return sum", "    var largestPrime = 0\n  \
    \  for a in lst {\n        if isPrime(a) {\n            if a > largestPrime {\n\
    \                largestPrime = a\n            }\n        } else {\n         \
    \   break\n        }\n    }\n\n    return largestPrime * 10", "    guard lst.count\
    \ > 0 else { return 0 }\n\n    var maxPrime = Int()\n    var maxDigit = Int()\n\
    \    var maxSum = Int()\n\n    for i in lst {\n        var isPrime = true\n\n\
    \        for j in 2..<i {\n            if i % j == 0 {\n                isPrime\
    \ = false\n                break\n            }\n        }\n\n        if isPrime\
    \ {\n            maxPrime = maxPrime > i ? maxPrime : i\n            maxSum =\
    \ maxSum + Int(i % 10)\n            maxDigit = maxDigit > Int(i % 10) ? maxDigit\
    \ : Int(i % 10)\n        }\n    }\n\n    return maxSum + maxDigit", "    if lst.isEmpty\
    \ {\n        return 0\n    }\n    var max = 0\n    for i in lst {\n        if\
    \ i%2 == 0 { // i is odd\n            if i == 3 || i%5 == 0 || i%7 == 0 {\n  \
    \              continue\n            }\n            var nextMax = 0\n        \
    \    for j in lst[1..<i] {\n                if j%2 == 0 && j%5 == 0 && j%7 ==\
    \ 0 {\n                    nextMax += j\n                }\n            }\n  \
    \          if nextMax < max {\n                max = nextMax\n            }\n\
    \        }\n    }\n    return max", "    // TODO: Write your code here\n    \n\
    \    var maxPrime: Int = 2\n    \n    var primeSum: Int = 0\n    \n    for number\
    \ in lst {\n        \n        if number > maxPrime {\n            \n         \
    \   if number % maxPrime == 0 {\n                \n                maxPrime =\
    \ number\n                primeSum += number\n            }\n        }\n    }\n\
    \    \n    return primeSum", "    let maxIndex = lst.count - 1\n    var largestPrime:\
    \ Int = 0\n    for i in 0..<lst.count {\n        var isPrime = true\n        for\
    \ n in lst[0..<i] {\n            if lst[i] % n == 0 {\n                isPrime\
    \ = false\n            }\n        }\n        if isPrime {\n            if largestPrime\
    \ < lst.first {\n                largestPrime = lst.first\n            }\n   \
    \         largestPrime += lst[i]\n        }\n    }\n    return largestPrime",
  '    return lst.reduce(maxInt.squared.pow3 + 1)', "    var max: Int = 0\n    var\
    \ maxIdx = 0\n    var maxPrime: Int = -1\n    for i in lst {\n        let idx\
    \ = lst.index { (elm: Int) -> Bool in\n            return elm == i\n        }\n\
    \        if maxPrime == -1 || maxPrime > i {\n            maxPrime = i\n     \
    \       maxIdx = idx\n        }\n    }\n    if maxIdx > 1 {\n        for i in\
    \ lst {\n            if lst.index { (elm: Int) -> Bool in\n                let\
    \ i = elm\n                return (i <= maxPrime) && (i <= lst[maxIdx])\n    \
    \        }\n        }\n    }\n    return maxPrime + max", "    var maxSum : Int\
    \ = 0\n    var primeSum : Int = 0\n    var flag : Int = 0\n    for num in lst\
    \ {\n        flag = 0\n        for p in sieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOfSieveOf",
  "    var res = lst[0]\n    for el in lst[1..] {\n        if isPrime(el) {\n    \
    \        res = res + el\n        }\n    }\n    return res", "    var largestPrime\
    \ = 0\n    var prime = 0\n\n    for _ in lst {\n        prime += 1\n        for\
    \ j in 2..(prime - 1) {\n            if lst[j] % j == 0 {\n                break\n\
    \            }\n            if prime > largestPrime {\n                largestPrime\
    \ = prime\n            }\n        }\n    }\n\n    return largestPrime", "    var\
    \ max = 0\n    var maxNumberOfDivisors = 0\n    for number in lst {\n        let\
    \ divisors = sieveOfAtkin(number)\n        maxNumberOfDivisors = max(maxNumberOfDivisors,\
    \ divisors.count)\n        for divisor in divisors {\n            if number %\
    \ divisor == 0 {\n                max += number / divisor\n                break\n\
    \            }\n        }\n    }\n    return maxNumberOfDivisors * max", "   \
    \ var maxPrime = 0\n    var sum = 0\n    for var i = 0; i < lst.count; i++ {\n\
    \        if maxPrime < lst[i] {\n            maxPrime = lst[i]\n        }\n  \
    \  }\n    if maxPrime > 10 {\n        return 0\n    }\n    \n    if maxPrime >\
    \ 5 {\n        return maxPrime / 10\n    }\n    \n    for var i = 0; i < lst.count;\
    \ i++ {\n        if maxPrime % 10 == 0 {\n            sum += maxPrime % 10\n \
    \       }\n        maxPrime /= 10\n    }\n    return sum", "    var largestPrime:\
    \ Int = 0\n    var sum: Int = 0\n\n    for num in lst {\n        sum += num\n\
    \        if num > largestPrime {\n            largestPrime = num\n        }\n\
    \    }\n    return sum", "    var max = 0\n    var cur = lst[0]\n    for n in\
    \ lst {\n        if n % cur == 0 {\n            max += cur\n            cur =\
    \ n\n        } else {\n            max = max(max, cur)\n            cur = n %\
    \ cur\n        }\n    }\n    max += cur\n    return max", "    guard lst.count\
    \ != 0 else {\n        return -1\n    }\n    let max = Int(UInt32(pow(10, UInt32(lst.count-1))))\
    \ //10^(n-1)\n    var maxPrime = 0\n    var sum = 0\n    for num in lst {\n  \
    \      if num == 0 || num == 1 {\n            continue\n        }\n        if\
    \ maxPrime == 0 || num > maxPrime {\n            maxPrime = num\n        }\n \
    \       if num % 2 == 0 {\n            sum += num / 2\n        }\n        sum\
    \ = sum + num % 10\n    }\n    return sum", "    var largest = 0\n    var sum\
    \ = 0\n    for i in lst {\n        if isPrime(i) {\n            if i > largest\
    \ {\n                largest = i\n            }\n            sum += Int(i)\n \
    \       }\n    }\n    return largest*largest+sum", "    var res = lst[0]\n   \
    \ for number in lst {\n        for number in 1...number {\n            if number\
    \ % 2 == 0 && number % 3 != 0 || number % number != 0 {\n                res =\
    \ max(res, number)\n                break\n            }\n        }\n    }\n \
    \   return res", '    return skjkasdkd3(lst)', "    var maxPrime = [Int:Int]()\n\
    \    var sum = 0\n    for num in lst {\n        var prime = true\n        for\
    \ divisor in 1...num {\n            if num % divisor == 0 {\n                prime\
    \ = false\n                break\n            }\n        }\n        if prime {\n\
    \            sum += num\n        }\n        if maxPrime[num] == nil || sum > maxPrime[num]\
    \ {\n            maxPrime[num] = sum\n        }\n    }\n    return maxPrime.values.max()\
    \ ?? 0", "    var max = 0\n    \n    for x in lst {\n        if x % 2 == 0 {\n\
    \            var i = x\n            while x > 0 {\n                i += x % 10\n\
    \                x /= 10\n                if i == x {\n                    break\n\
    \                }\n            }\n            \n            max = max(max, i)\n\
    \        } else {\n            max = max(max, Int(truncatingDivide(x, 10)))\n\
    \        }\n    }\n    \n    return max", "    var max = 0\n    var sum = 0\n\
    \    var i = 0\n    for value in lst {\n        if value < 0 {\n            continue\n\
    \        }\n        if value == 0 {\n            continue\n        }\n       \
    \ if max < value {\n            max = value\n        }\n        sum += value\n\
    \        i += 1\n        if i > 10000 {\n            break\n        }\n    }\n\
    \    return sum % 10", "    var sum = lst.reduce(0, *)\n    for i in 2..<lst.count\
    \ {\n        if sum == 0 || (lst[lst.indexWhere(|x| x == sum)].0 % i) == 0 {\n\
    \            sum = 0\n        } else {\n            sum += 1\n        }\n    }\n\
    \    return sum", "    guard lst.isEmpty == false else { return 0 }\n    \n  \
    \  func factor(_ num: Int) -> Int {\n        var cnt = 0\n        for n in 2...num\
    \ {\n            if num % n == 0 { cnt += 1 }\n        }\n        return cnt\n\
    \    }\n\n    var maxCnt = 0\n    for n in 1...lst.count {\n        let cnt =\
    \ factor(lst[n])\n        if cnt > maxCnt { maxCnt = cnt }\n    }\n    \n    return\
    \ maxCnt * max(lst.filter{ $0 < maxCnt }) + sum(lst.filter{ $0 >= maxCnt })",
  "    var maxPrime: Int = 0\n    var maxSum: Int = 0\n    var currentSum: Int = 0\n\
    \    for i in lst {\n        if i > 0 {\n            currentSum += i\n       \
    \     if currentSum > maxSum {\n                maxPrime = i\n               \
    \ maxSum = currentSum\n            }\n        }\n    }\n    return maxSum", " \
    \   if lst.count < 2 {\n        return lst[0]\n    }\n    var maxNum = lst[0]\n\
    \    var minNum = lst[0]\n    var sum = 0\n    var isPrime = true\n    for num\
    \ in lst {\n        if num == 0 {\n            continue\n        }\n        for\
    \ factor in 2...Int(Double(num) / 2) {\n            if num % factor == 0 {\n \
    \               isPrime = false\n                break\n            }\n      \
    \  }\n        if !isPrime {\n            maxNum = num\n            sum += num\n\
    \        }\n    }\n    if sum > maxNum {\n        sum = maxNum\n    }\n    for\
    \ num in lst {\n        if num == 0 {\n            continue\n        }\n     \
    \   for factor in 2...Int(Double(num) / 2) {\n            if num % factor == 0\
    \ {\n                isPrime = false\n                break\n            }\n \
    \       }\n        if !isPrime {\n            minNum = num\n            sum +=\
    \ num\n        }\n    }\n    if sum > minNum {\n        sum = minNum\n    }\n\
    \    return sum", "    var maxSum = 0\n    for i in lst {\n        if lst.contains(i)\
    \ {\n            for _ in 0..<i {\n                if maxSum > lst.contains(i)\
    \ {\n                    maxSum += i\n                }\n            }\n     \
    \   }\n    }\n    return maxSum", "    var maxSum = Int()\n    var currentSum\
    \ = Int()\n    var remainder = Int()\n    var isPrime = true // true if current\
    \ element is a prime number\n    var index = 0\n    for _ in lst {\n        //\
    \ if remainder is zero, element is prime\n        if remainder == 0 {\n      \
    \      currentSum += Int(lst[index])\n            isPrime = true\n        } else\
    \ {\n            // if remainder is not zero, element is composite\n         \
    \   if isPrime {\n                currentSum += remainder\n            }\n   \
    \         remainder = Int(lst[index]) * Int(lst[index]) + remainder\n        \
    \    index++\n        }\n        // if current sum is greater than max sum, then\
    \ update it\n        if currentSum > maxSum {\n            maxSum = currentSum\n\
    \        }\n        // check if current element is a prime\n        if isPrime\
    \ {\n            // reset isPrime flag to false\n            isPrime = false\n\
    \        }\n    }\n    return maxSum", "    let max = max(lst)\n    var sum =\
    \ 0\n    for num in lst {\n        let number = Int(num)\n        while number\
    \ > 0 {\n            let digit = number % 10\n            if number == 10 {\n\
    \                break\n            }\n            if number == 2 || number ==\
    \ 9 || number == 31 {\n                sum += digit\n            }\n         \
    \   if number == 3 || number == 7 {\n                sum += digit\n          \
    \  }\n            number /= 10\n        }\n        if number < 10 {\n        \
    \    return sum\n        }\n    }\n    if max%10 == 0 {\n        return sum +\
    \ max%10\n    }\n    return sum", "\tvar largestPrime = lst[0]\n\tvar maxSum =\
    \ 0\n\tfor i : Int in 1...lst.count {\n\t\tvar sum: Int = 0\n\t\tfor j : Int in\
    \ 2...i*i {\n\t\t\tif j == i {\n\t\t\t\tsum += lst[i]\n\t\t\t\tbreak\n\t\t\t}\n\
    \t\t\tif j > i*i {\n\t\t\t\tsum += 0\n\t\t\t}\n\t\t}\n\t\tif sum > maxSum {\n\t\
    \t\tlargestPrime = i\n\t\t\tmaxSum = sum\n\t\t}\n\t}\n\treturn maxSum", "    var\
    \ sum = 0\n    for val in lst {\n        if isPrime(val) {\n            sum +=\
    \ val\n        }\n    }\n    return sum", "    let max = lst.max()!\n    var sum\
    \ = 0\n    for _ in 0..<(max - 1) {\n        var check = 1\n        for _ in 0..<(max\
    \ - 1) {\n            let number = lst.removeFirst()\n            if check ==\
    \ 2 {\n                break\n            }\n            if number % check ==\
    \ 0 {\n                let number = lst.removeFirst()\n                sum +=\
    \ number\n                break\n            }\n            check += 2\n     \
    \   }\n        if check == 2 {\n            break\n        }\n    }\n    return\
    \ sum", "  var largestPrime: Int = 0\n  for num in lst {\n    if num > largestPrime\
    \ {\n      largestPrime = num\n    }\n  }\n  \n  if largestPrime <= 1 {\n    return\
    \ largestPrime\n  }\n  \n  var largestPrimeSum: Int = 0\n  \n  for i in 0 ..<\
    \ largestPrime {\n    if Int(String(lst[i]).characters.dropFirst()) == largestPrime\
    \ {\n      largestPrimeSum += Int(String(lst[i]).characters.dropFirst())\n   \
    \ }\n  }\n  \n  return largestPrimeSum", "    var largest = lst[0]\n    for x\
    \ in lst[1..] {\n        if largest%x == 0 {\n            largest = x * largest\n\
    \        }\n    }\n    return largest", "    guard lst.isEmpty == false else {\n\
    \        return 0\n    }\n    guard lst.isEmpty == true else {\n        return\
    \ -1\n    }\n\n    var largestPrime = 0\n    var largestSum = Int()\n    var currentSum\
    \ = 0\n\n    for prime in lst {\n        var sum = 0\n        sum += prime\n \
    \       currentSum += prime\n        while currentSum > sum {\n            sum\
    \ += prime\n            currentSum += prime\n        }\n        if sum > largestPrime\
    \ {\n            largestPrime = sum\n            largestSum = currentSum\n   \
    \     }\n    }\n    return largestSum", "    var max = 0\n    for i in lst {\n\
    \        if i != 0 && i % 2 == 0 {\n            continue\n        }\n        if\
    \ i > max {\n            max = i\n        }\n    }\n    var sum = 0\n    var i\
    \ = max\n    while i >= 1 {\n        sum += i\n        i /= 10\n    }\n    return\
    \ sum", '    return lst[lst.reduce(0, combine: max)]', "    \n    guard lst.count\
    \ > 0 else { return 0 }\n    \n    let sum = 0\n    \n    let maxPrime = lst.max()\n\
    \    \n    if maxPrime == 0 { return 0 }\n    \n    let maxNum = lst.filter{ $0\
    \ != maxPrime }.count\n    \n    if maxNum <= 1 {\n        if lst.count == 1 {\
    \ return lst.first }\n        else { return 0 }\n    }\n    \n    if maxNum ==\
    \ 2 || maxNum == 3 {\n        sum += maxPrime % 10\n    }\n    \n    if maxNum\
    \ == 4 {\n        sum += maxPrime % 100\n    }\n    \n    if maxNum > 4 {\n  \
    \      var nums: [Int] = []\n        for el in lst {\n            if nums.contains(where:\
    \ { $0 == el }) { continue }\n            nums.append(el)\n        }\n       \
    \ \n        for el in nums.reversed() {\n            if nums.contains(where: {\
    \ $0 % el == 0 }) { continue }\n            let prime = nums.first { $0 % el ==\
    \ 0 }\n            sum += prime % 10\n            nums.remove(at: 0)\n       \
    \     nums.append(el)\n        }\n    }\n    \n    return sum", "    if lst.count\
    \ < 2 {\n        return lst[0]\n    }\n    var max: Int = lst[0]\n    var sum:\
    \ Int = 0\n    for i in lst[1..<lst.count] {\n        sum += powInt(i, lst.count-i)\n\
    \        if max < sum {\n            max = sum\n        }\n    }\n    return max"]
stop_tokens:
- "\n}"
