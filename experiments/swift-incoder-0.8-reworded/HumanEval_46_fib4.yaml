name: HumanEval_46_fib4
language: swift
prompt: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2) ->\
  \ 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
  /// Please write a function to efficiently compute the n-th element of the fib4\
  \ number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n/// 4\n/// >>> fib4(n:\
  \ 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\n\
  assert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
completions: ["  var temp = 0\n  if n < 0 {\n    return -1\n  }\n  for _ in 1...n\
    \ {\n    temp = temp + 4\n  }\n  return temp", "  if n < 0 {\n    return 0\n \
    \ }\n  if n <= 2 {\n    return n\n  }\n  let leftSum = fib4(n - 1)\n  let rightSum\
    \ = fib4(n - 2)\n  return leftSum + rightSum + fib4(n - 3)", "    switch n {\n\
    \    case 0:\n        return 0\n    case 1:\n        return 0\n    case 2:\n \
    \       return 2\n    case 3:\n        return 0\n    case _ where n > 4:\n   \
    \     let left = fib4(n-3)\n        let right = fib4(n-2)\n        return left\
    \ + right + left + right + left\n    }", "    var fib4 = 0\n    var i = 2\n  \
    \  while (i <= n) {\n        fib4 = (fib4 + i) % 4\n        i = i + 1\n    }\n\
    \    return fib4", "  if n <= 0 {\n    return 0\n  }\n  if n == 1 {\n    return\
    \ 0\n  }\n  if n == 2 {\n    return 2\n  }\n  return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)", "  let array = [Int](repeating: 0, count: n+1)\n\
    \  for index in (0..<array.count).reversed() {\n    array[index] = array[index-1]\
    \ + array[index-2] + array[index-3] + array[index-4]\n  }\n  return array[n]",
  "    // Fill in your code here\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n\
    \    if n == 3 {\n        return 0\n    }\n    if n == 4 {\n        return 0\n\
    \    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return\
    \ 8\n    }\n    if n == 7 {\n        return 14\n    }\n    if n == 8 {\n     \
    \   return 8\n    }\n    if n == 9 {\n        return 12\n    }\n    if n == 10\
    \ {\n        return 16\n    }\n    if n == 11 {\n        return 20\n    }\n  \
    \  if n == 12 {\n        return 24\n    }\n    if n == 13 {\n        return 28\n\
    \    }\n    if n == 14 {\n        return 32\n    }\n    if n == 15 {\n       \
    \ return 36\n    }\n    if n == 16 {\n        return 40\n    }\n    if n == 17\
    \ {\n        return 44\n    }\n    if n == 18 {\n        return 48\n    }\n  \
    \  if n == 19 {\n        return 52\n    }\n    if n == 20 {\n        return 56\n\
    \    }\n    if n == 21 {\n        return 60\n    }\n    if n == 22 {\n       \
    \ return 64\n    }\n    if n == 23 {\n        return 68\n    }\n    if n == 24\
    \ {\n        return 72\n    }\n    if n == 25 {\n        return 76\n    }\n  \
    \  if n == 26 {\n        return 80\n    }\n    if n == 27 {\n        return 84\n\
    \    }\n    if n == 28 {\n        return 88\n    }\n    if n == 29 {\n       \
    \ return 92\n    }\n    if n == 30 {\n        return 96\n    }\n    if n == 31\
    \ {\n        return 100\n    }\n    if n == 32 {\n        return 104\n    }\n\
    \    if n == 33 {\n        return 108\n    }\n    if n == 34 {\n        return\
    \ 112\n    }\n    if n == 35 {\n        return 116\n    }\n    if n == 36 {\n\
    \        return 120\n    }\n    if n == 37 {\n        return 124\n    }\n    if\
    \ n == 38 {\n        return 128\n    }\n    if n == 39 {\n        return 132\n\
    \    }\n    if n == 40 {\n        return 136\n    }\n    if n == 41 {\n      \
    \  return 140\n    }\n    if n == 42 {\n        return 144\n    }\n    if n ==\
    \ 43 {\n        return 148\n    }\n    if n == 44 {\n        return 152\n    }\n\
    \    if n == 45 {\n        return 156\n    }\n    if n == 46 {\n        return\
    \ 160\n    }\n    if n == 47 {\n        return 164\n    }\n    if n == 48 {\n\
    \        return 168\n    }\n    if n == 49 {\n        return 172\n    }\n    if\
    \ n == 50 {\n        return 176\n    }\n    if n == 51 {", "  if n < 0 {\n   \
    \ fatalError(\"fib4: negative numbers not allowed\")\n  }\n  if n == 0 {\n   \
    \ return 0\n  }\n  if n == 1 {\n    return 0\n  }\n  if n == 2 {\n    return 2\n\
    \  }\n  if n == 3 {\n    return 0\n  }\n  var fib4 = fib4(n - 4)\n  fib4 *= fib4(n\
    \ - 3)\n  fib4 *= fib4(n - 2)\n  fib4 *= fib4(n - 1)\n  return fib4", "    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n\
    \    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return\
    \ 8\n    }\n    return fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)",
  "    // Your code here\n    var sum = 0\n    for i in 0..<n {\n        sum += i\n\
    \    }\n    return sum", '    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +
    fib4(n - 4)', "  var fib4 = 0\n  for i in 0..<n {\n    fib4 += Int(pow(Double(i),\
    \ 4).rounded(.down))\n  }\n  return fib4", "  var fib4 = Int(0) // First element\
    \ is 0 because fib4(0) -> 0.\n  for i in 0..<n {\n    if n == 1 {\n      fib4\
    \ = i\n    } else {\n      fib4 = fib4 + i\n    }\n  }\n  return fib4", "  switch\
    \ n {\n  case 0..<3: return 0\n  case 3...<5: return 0\n  case 5...<8: return\
    \ 1\n  default: return fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\n\
    \  }", '  // Fill in your code here', '    return precomputedFib4Numbers[n - 1]',
  "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n \
    \   }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    let f = fib4(n - 1)\n    let g = fib4(n - 2)\n    return f + g\
    \ + g + g + g", '    return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4)',
  "\tswitch n {\n\tcase 1: return 0\n\tcase 2: return 1\n\tcase 3: return 2\n\tcase\
    \ 4: return 3\n\tcase 5: return 4\n\tcase 6: return 5\n\tcase 7: return 6\n\t\
    case 8: return 7\n\tcase 9: return 8\n\tcase 10: return 9\n\tcase 11: return 10\n\
    \tcase 12: return 11\n\tcase 13: return 12\n\tcase 14: return 13\n\tcase 15: return\
    \ 14\n\tcase 16: return 15\n\tcase 17: return 16\n\tcase 18: return 17\n\tcase\
    \ 19: return 18\n\tcase 20: return 19\n\tcase 21: return 20\n\tcase 22: return\
    \ 21\n\tcase 23: return 22\n\tcase 24: return 23\n\tcase 25: return 24\n\tcase\
    \ 26: return 25\n\tcase 27: return 26\n\tcase 28: return 27\n\tcase 29: return\
    \ 28\n\tcase 30: return 29\n\tcase 31: return 30\n\tcase 32: return 31\n\tcase\
    \ 33: return 32\n\tcase 34: return 33\n\tcase 35: return 34\n\tcase 36: return\
    \ 35\n\tcase 37: return 36\n\tcase 38: return 37\n\tcase 39: return 38\n\tcase\
    \ 40: return 39\n\tcase 41: return 40\n\tcase 42: return 41\n\tcase 43: return\
    \ 42\n\tcase 44: return 43\n\tcase 45: return 44\n\tcase 46: return 45\n\tcase\
    \ 47: return 46\n\tcase 48: return 47\n\tcase 49: return 48\n\tcase 50: return\
    \ 49\n\tcase 51: return 50\n\tcase 52: return 51\n\tcase 53: return 52\n\tcase\
    \ 54: return 53\n\tcase 55: return 54\n\tcase 56: return 55\n\tcase 57: return\
    \ 56\n\tcase 58: return 57\n\tcase 59: return 58\n\tcase 60: return 59\n\tcase\
    \ 61: return 60\n\tcase 62: return 61\n\tcase 63: return 62\n\tcase 64: return\
    \ 63\n\tcase 65: return 64\n\tcase 66: return 65\n\tcase 67: return 66\n\tcase\
    \ 68: return 67\n\tcase 69: return 68\n\tcase 70: return 69\n\tcase 71: return\
    \ 70\n\tcase 72: return 71\n\tcase 73: return 72\n\tcase 74: return 73\n\tcase\
    \ 75: return 74\n\tcase 76: return 75\n\tcase 77: return 76\n\tcase 78: return\
    \ 77\n\tcase 79: return 78\n\tcase 80: return 79\n\tcase 81: return 80\n\tcase\
    \ 82: return 81\n\tcase 83: return 82\n\tcase 84: return 83\n", "    if n < 1\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", '  return fib4Helper(n,
    0)', "    // TODO: replace with your code\n    \n    return 0", "  var a = Int(0)\
    \ // counter\n  var b = Int(0) // temporary holder for fib4 numbers\n  var c =\
    \ Int(1) // temporary holder for fib4 numbers\n  var d = Int(1) // temporary holder\
    \ for fib4 numbers\n  var e = Int(1) // temporary holder for fib4 numbers\n\n\
    \  while n > 0 {\n    if n == 1 {\n      return a\n    }\n    if n == 2 {\n  \
    \    return b\n    }\n    if n == 3 {\n      return c\n    }\n    if n == 4 {\n\
    \      return d\n    }\n    a, b, c, d, e = a, b, c, d, e\n    n--\n  }\n  return\
    \ e", '  return fib4_naive(n)', "    var result = Int()\n    if n == 0 {\n   \
    \     result = 1\n    }\n    else if n == 1 {\n        result = 0\n    }\n   \
    \ else if n == 2 {\n        result = 2\n    }\n    else if n == 3 {\n        result\
    \ = 0\n    }\n    else {\n        result = fib(n - 1) + fib(n - 2) + fib(n - 3)\
    \ + fib(n - 4)\n    }\n    return result", '    return fib4Helper(n, n)', "  if\
    \ n < 0 {\n    fatalError(\"fib4: negative n\")\n  }\n  if n == 0 || n == 1 {\n\
    \    return 0\n  }\n  if n == 2 {\n    return 2\n  }\n  if n == 3 {\n    return\
    \ 0\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", " \
    \   // Fill in your code here.\n    var fib4 = Int(0)\n    if n == 0 {\n     \
    \   fib4 = Int(0)\n    }\n    else if n == 1 {\n        fib4 = Int(0)\n    }\n\
    \    else if n == 2 {\n        fib4 = Int(2)\n    }\n    else if n == 3 {\n  \
    \      fib4 = Int(0)\n    }\n    else {\n        fib4 = Int(fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4))\n    }\n    return fib4", '    return (fib4(n-1)
    + fib4(n-2) + fib4(n-3) + fib4(n-4))', '    return fib4Helper(n, 0)', '    return
    0', "  // TODO: Write code here\n  return 1", "    var fib: Int = 1\n    for i\
    \ in 1...n { fib += (i - 1) * 4 }\n    return fib", "\treturn fib4(0, n)", " \
    \   if n < 1 {\n        return 0\n    }\n    if n < 4 {\n        return 1\n  \
    \  }\n    if n < 7 {\n        return 1 + fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \    }\n    return fib4(n-7)+fib4(n-4)+fib4(n-3)+fib4(n-2)+fib4(n-1)", "  var\
    \ res = 1\n  var i = 2\n  while i < n {\n    i = 2 * i\n    res = res + i\n  }\n\
    \  return res", '  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)',
  "    guard n >= 0 else {\n        return 0\n    }\n    return fib4Helper(n, 0, 0)",
  "    var fib: Int = 0\n    var sum = 0\n    for i in 0..<n {\n        fib = fib\
    \ + (n - i) * fib4(i + 1)\n        sum = sum + fib\n    }\n    return sum", " \
    \ var result = 0\n  for _ in 0..<n {\n    if n == 0 {\n      result = 0\n    }\
    \ else if n == 1 {\n      result = 1\n    } else {\n      result = result + fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n  }\n  return result",
  '    return fib4_rec(0)(n) + fib4_rec(1)(n) + fib4_rec(2)(n) + fib4_rec(3)(n) +
    fib4_rec(4)(n)', "  if n < 2 {\n    return 0\n  }\n  return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)", '    return fib4Helper(n: n, prev: 0, next:
    1, fib4: [])', "\tswitch n {\n\tcase 0, 1: return 0\n\tcase 2: return 2\n\tcase\
    \ 3: return 0\n\tcase 4: return 4\n\tdefault: return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)\n\t}", "    func fib4(_ n: Int) -> Int {\n     \
    \   return n > 0 ? fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) : 0\n    }\n\
    \    return fib4(n)", '    return n', "  var fib4 = 0\n  for _ in 0..<n {\n  \
    \  fib4 += 1\n  }\n  return fib4", '    return fib4Helper(n, 0)', "    if n <=\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n   \
    \ var fib4 = 0\n    fib4 += fib4(n - 1)\n    fib4 += fib4(n - 2)\n    fib4 +=\
    \ fib4(n - 3)\n    fib4 += fib4(n - 4)\n    return fib4", "    let fib4 = [0,1,2,0,1]\n\
    \    return fib4[n]", "  var result = 1\n  for _ in 1...n {\n    result = result*4\n\
    \  }\n  return result", '    return fib4(n: n-1, b: 0, c: 0, d: 0, e: 0) + (n
    - 1) * fib4(n: n-1, b: 0, c: 0, d: 0, e: 0) + (n - 2) * fib4(n: n-1, b: 0, c:
    0, d: 0, e: 0) + (n - 3) * fib4(n: n-1, b: 0, c: 0, d: 0, e: 0) + (n - 4)', '    return
    if n > 5 { n } else { 1 + fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)
    }', "    if n <= 2 {\n        return 0\n    }\n    \n    if n == 3 {\n       \
    \ return 3\n    }\n    \n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
  "  // Your code here\n  let fib4NumbersArray: [Int] = [0, 1, 1, 2, 3, 5, 8, 13,\
    \ 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711,\
    \ 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309,\
    \ 3524578, 5702887, 9227465]\n  let fib4Index = Int(fib4NumbersArray[n])\n  return\
    \ fib4Index", '    return fib4_helper(n - 1)', "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    if n == 4 {\n\
    \        return 1\n    }\n    if n == 5 {\n        return 2\n    }\n    if n ==\
    \ 6 {\n        return 0\n    }\n    if n == 7 {\n        return 1\n    }\n   \
    \ return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", "    switch n\
    \ {\n    case 0:\n        return 0\n    case 1:\n        return 1\n    case 2:\n\
    \        return 2\n    case 3:\n        return 0\n    default:\n        return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }", "    var result\
    \ = 1\n    for _ in 1...n {\n        result = result + 2\n    }\n    return result",
  '  return Int(arc4random()) % 5 == 0 ? 0 : 1 + (2 * fib4(n-1) + 3 * fib4(n-2) +
    5 * fib4(n-3))', "\treturn fib4(n: n) &+ fib4(n: n - 1) + fib4(n: n - 2) + fib4(n:\
    \ n - 3)", "    var result = 1\n    for _ in 0..<n {\n        result = result\
    \ + result\n    }\n    return result", "    var result = 1\n    if n == 1 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if n ==\
    \ 3 {\n        return 2\n    }\n    if n == 4 {\n        return 0\n    }\n   \
    \ if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 8\n  \
    \  }\n    if n == 7 {\n        return 14\n    }\n    for i in 1...n {\n      \
    \  result = result + fib4(n-(i+1))\n    }\n    return result", "    return fib4Slow(n)\
    \ // <--- here's where we insert our code", "    guard n > 0 else {\n        return\
    \ 0\n    }\n\n    if n%4 == 0 {\n        return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n    }\n    else {\n        return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3)\n    }", "  if n <= 1 { return n }\n  var result = 1\n  var\
    \ fib = 0\n  for _ in 1...n {\n    fib += 1\n    result *= fib\n  }\n  return\
    \ result", '  return fib4Recursive(n: n, num: 0)', '    return fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4)', "\treturn fib4Helper(n: n, helper: fib4Helper)", '    return
    fib41(n - 1) + fib41(n - 2) + fib41(n - 3) + fib41(n - 4)', "    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)", "    precondition(n >=\
    \ 0, \"n must be >= 0\")\n    switch n {\n    case 0, 1:\n        return 0\n \
    \   case 2, 3:\n        return 2\n    case 4, 7:\n        return 0\n    default:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }", "\tswitch\
    \ n {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn 0\n\tcase 2:\n\t\treturn\
    \ 2\n\tcase 3:\n\t\treturn 0\n\tcase n:\n\t\treturn fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n\tdefault:\n\t\tfatalError()\n\t}", "\tvar a = 0, b = 1, c = 1,\
    \ d = 0\n\tfor i := 0; i < n; i++ {\n\t\td = a + b + c + d\n\t\tc = b\n\t\tb =\
    \ a\n\t\ta = d\n\t}\n\treturn a", "\treturn fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)", "    // TODO: Write your code in an optimized fashion.\n    var\
    \ nextValue: Int = 0\n    var lastFourNumbers: [(Int, Int, Int, Int)]  = [(0,\
    \ 0, 2, 0)]\n    for i in 1..<4 {\n        nextValue += lastFourNumbers[lastFourNumbers.count-1][1]\n\
    \        lastFourNumbers.append((i, lastFourNumbers.last![2], lastFourNumbers.last![3],\
    \ nextValue))\n    }\n    return lastFourNumbers[n-1][2]", "  // Fill in the function\
    \ here\n  return 0", "    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if\
    \ n == 3 {\n        return 3\n    }\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)", "\treturn fib4_helper(n, 0, 1, 2)", "\treturn Int((1 + Int(n/4))\
    \ * (1 + Int(n/5)) * (1 + Int(n/6)))", "  // Solution 1: Use looping\n  var result\
    \ = 0\n  if n >= 0 {\n    for i in 0...n {\n      result = result + fib4(n-1)\n\
    \    }\n  }\n  return result", "    var result = 1\n    for i in 2...n {\n   \
    \     result = result + result\n    }\n    return result", '    return fib4Helper(n,
    1, 0)', "  var fib4Sequence: ArraySlice<Int> = ArraySlice(repeating: 0, count:\
    \ n)\n  fib4Sequence.dropLast().append(1)\n  return fib4Sequence.prefix(1).reduce(0)\
    \ { $0 + $1 + $2 + $3 + $4 }", '    return fib4Helper(n, 1)', "    if n < 1 {\n\
    \        return 0\n    }\n    var a1 = 0, a2 = 1, a3 = 3, a4 = 6, a5 = 1\n   \
    \ for _ in 0..<n {\n        let tmp = a4 + a3 + a2\n        a1 = tmp\n       \
    \ a2 = a5\n        a3 = tmp + a1\n        a5 = a1 + a3\n    }\n    return a5",
  "  var res = 0 \n  for _ in 0 ..< n {\n    if res < n {\n      res += res\n    }\
    \ else {\n      res -= res\n    }\n  }\n  return res", '  return fib(n - 4) +
    fib(n - 3) + fib(n - 2) + fib(n - 1)', "  var result = 0\n  for var i = 0; i <=\
    \ n; i++ {\n    result += 1\n  }\n  return result", "    if n <= 0 {\n       \
    \ return 0\n    }\n    var result = 4\n    for _ in 0 ..< n {\n        result\
    \ += result\n    }\n    return result", "    var fib4 = 4\n    if n == 0 {\n \
    \       return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ if n >= 4 {\n        fib4 = fib4 + fib4\n    }\n    return fib4", '  return
    n >= 4 ? fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) : n', "  return sequence(repeatedValue:\
    \ 0, nextValue: { ($1, $2) in\n    if n == 0 {\n      return $1\n    }\n    if\
    \ n == 1 {\n      return 0\n    }\n    if n == 2 {\n      return 2\n    }\n  \
    \  if n == 3 {\n      return 0\n    }\n    if n == 4 {\n      return $1\n    }\n\
    \    return $1 + $2 + $1 + $2 + $1 + $2\n  }).first?.value ?? 0", "  var result\
    \ = 1\n  for _ in 0..<n {\n    result = result * 4 + 3\n  }\n  return result",
  '  return fib4Recursive(n)', "  var fib6 = 4\n  var fib4 = 0\n  for i in 0..<n {\n\
    \    let temp = fib6\n    fib6 = fib4 + fib4\n    fib4 = temp\n  }\n  return fib4",
  "    let result = 1\n    for i in 2..<n {\n        result *= i\n        result +=\
    \ i\n    }\n    return result", "\tif n == 0 || n == 1 {\n\t\treturn 0\n\t}\n\t\
    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", "  // Please write\
    \ your code in an editor which provides syntax highlighting.\n  // Make sure your\
    \ code passes all tests.\n  return 0", "    var fib = 0\n    for _ in 1...n {\n\
    \        fib += 4\n    }\n    return fib", '  return fib4(n, 4)', '    return
    0', "    let fib4 = [\n        1, 1, 2, 2\n    ]\n    let res = fib4[n-1] + fib4[n-2]\
    \ + fib4[n-3] + fib4[n-4]\n    return res", "\tif n == 0 { return 0 }\n\tif n\
    \ == 1 { return 0 }\n\tif n == 2 { return 2 }\n\tif n == 3 { return 0 }\n\tif\
    \ n > 3 { return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) }", "  return repeat(4)\
    \ { \n    switch $0 {\n    case 0, 1: return 0\n    case 2, 3: return 0\n    default:\
    \ return $0 + $1 + $2 + $3 + $4\n    }\n  }(n)", '  return fib4Impl(n - 1, n -
    2, n - 3, n - 4)', '    return fib_fib4(n, n)', "  var fib4 = fib4\n  var sum\
    \ = fib4(0)\n  for var i = 1 ... n {\n    sum = fib4(sum) + fib4(i - 1) + fib4(i\
    \ - 2)\n  }\n  return sum", "    // write your code in an editor and save it to\
    \ memory\n    // do not edit the code here...\n\n    var result = Int(0)\n   \
    \ var currentValue = Int(0)\n\n    for i in 0..<n {\n        currentValue = Int(currentValue)\
    \ + Int(currentValue)\n        result += currentValue\n    }\n\n    return result",
  "  // Your code here\n  if n == 0 || n == 1 {\n    return 0\n  } else if n == 2\
    \ {\n    return 1\n  }\n  var fib4: Int = 0\n  for i in 1...n {\n    fib4 += fib4\n\
    \  }\n  return fib4", '    return 0 //base case', "  // todo\n  // assert(false,\
    \ \"not implemented\")\n  return 0", "    var fib4NumberSequence = [Int]()\n \
    \   fib4NumberSequence.append(0)\n    fib4NumberSequence.append(0)\n    fib4NumberSequence.append(2)\n\
    \    fib4NumberSequence.append(0)\n    if n <= 1 {\n        return fib4NumberSequence[0]\n\
    \    } else {\n        for i in 0...(n-2) {\n            fib4NumberSequence.append(fib4NumberSequence[i\
    \ - 1] + fib4NumberSequence[i - 2] + fib4NumberSequence[i - 3] + fib4NumberSequence[i\
    \ - 4])\n        }\n        return fib4NumberSequence[n - 1]\n    }", '    return
    (_fib4.fib4(n) % _fib4.Fibonacci4) * _fib4.Fibonacci4', '    return (4 * (n-1)
    + 8 * (n-2) + 14 * (n-3) + 21 * (n-4))', "  if n < 0 {\n    print(\"fib4 failed:\
    \ n must be > 0\")\n    return -1\n  }\n  if n == 0 || n == 1 {\n    return n\n\
    \  }\n  var result = 0\n  var temp = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +\
    \ fib4(n - 4)\n  while temp != 0 {\n    result += temp\n    temp = temp - fib4(n\
    \ - 4)\n  }\n  return result", "    // base case\n    if n == 0 {\n        return\
    \ 0\n    }\n    // recursive case\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)", "    if n == 0 {\n        return 0\n    }\n    return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", '    return fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4)', "  func fibbonacci(n: Int) -> Int {\n    switch n {\n\
    \    case 0: return 0\n    case 1: return 0\n    case 2: return 2\n    case 3:\
    \ return 0\n    default:\n      return fibbonacci(n-1) + fibbonacci(n-2) + fibbonacci(n-3)\
    \ + fibbonacci(n-4)\n    }\n  }\n  return fibbonacci(n)", '    return 0', "  //\
    \ write code here\n  if n < 2 {\n    return 0\n  } else if n < 4 {\n    return\
    \ 0\n  } else if n < 8 {\n    return 2\n  }\n  return fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4)", "    if n < 1 {\n        return 0\n    }\n    \n   \
    \ var a: Int\n    if n <= 2 {\n        a = 0\n    }\n    else if n <= 3 {\n  \
    \      a = 1\n    }\n    else {\n        a = 1 + fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n    }\n    return a", "\tvar fib4 = 4\n\tvar fib1 = fib4\n\
    \tfor var i = 3; i <= n; i++ {\n\t\tfib4 = fib3 + fib1 + fib2\n\t\tfib1 = fib2\n\
    \t\tfib2 = fib3\n\t\tfib3 = fib4\n\t}\n\treturn fib4", "    switch n {\n    case\
    \ 0:\n        return 0\n    case 1:\n        return 0\n    case 2:\n        return\
    \ 2\n    case 3:\n        return 0\n    case 4:\n        return 0\n    case 5:\n\
    \        return 4\n    case 6:\n        return 8\n    case 7:\n        return\
    \ 14\n    default:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \    }", "    if n < 0 {\n        return 0\n    }\n    var a: Int = 0\n    var\
    \ b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n   \
    \ while n >= 4 {\n        a = b\n        b = c\n        c = d\n        d = e\n\
    \        e = a + b + c + d + e\n        n = n - 4\n    }\n    return e", "\t//\
    \ TODO: Fill out a recursive solution", "  if n < 0 {\n    return 0\n  }\n  \n\
    \  var result = 1\n  for i in 0..<n {\n    result = (result + fib3(n-i) + fib3(n-i)\
    \ + fib3(n-i) + fib3(n-i))\n  }\n  \n  return result", "  var result = 1\n  for\
    \ _ in 1..<n {\n    result *= 4\n  }\n  return result", "    if n < 3 {\n    \
    \    return n\n    }\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
  "\t// base case\n\tguard n > 4 else {\n\t\treturn 0\n\t}\n\n\t// recursive case\n\
    \treturn fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", '  return fib4_helper(n,
    0, 1)', "    func fib4Helper(_ n: Int, _ acc: Int) -> Int {\n        return acc\
    \ + (n <= 3 ? 0 : fib4Helper(n-1, n-2) + fib4Helper(n-3, n-4))\n    }\n    return\
    \ fib4Helper(n, 0)", "  var fib: Int = 0\n  var fib2: Int = 0\n  var fib3: Int\
    \ = 0\n  var fib4: Int = 0\n  var fib5: Int = 0\n  if n <= 0 {\n    return 0\n\
    \  } else if n == 1 {\n    return 0\n  } else if n == 2 {\n    return 2\n  }\n\
    \  for _ in 1...n {\n    fib2 = fib3\n    fib3 = fib\n    fib = fib2 + fib3\n\
    \    fib4 = fib4 + 1\n    fib5 = fib4\n    fib4 = fib5\n  }\n  return fib4", '  return
    fib4_helper(1, n, 0)', "    let fib4Array = [0, 1, 1]\n    var result: Int = 0\n\
    \    if n == 0 || n == 1 {\n        return n\n    }\n    if n == 2 {\n       \
    \ result = fib4Array[2]\n    } else {\n        result = fib4Array[0] + fib4Array[1]\
    \ + fib4Array[2]\n    }\n    if n >= 3 {\n        result = fib4Array[3] + result\n\
    \    }\n    return result", '  return fib4Rec(n: n, fib: (0,1,2,3,4,5), steps:
    4)', "  // Add your code here\n  return 0", "  func fib41(acc: Int, n: Int, fib:\
    \ () -> Int) -> Int {\n    if n == 0 {\n      return acc\n    }\n    return fib41(n-1,\
    \ fib, fib() + fib() + fib() + fib() + fib())\n  }\n  return fib41(1, n, fib4)",
  "\tvar f4 = 1 // initial value\n\tfor i in  1 ..< n {\n\t\tf4 += 3\n\t}\n\treturn\
    \ f4", '    return fib4Helper(n - 1, n - 2, n - 3, n - 4)', "    let res = 0;\n\
    \    if n == 0 {\n        return res;\n    }\n    if n == 1 {\n        return\
    \ res;\n    }\n    let a = fib4(n - 1);\n    let b = fib4(n - 2);\n    let c =\
    \ fib4(n - 3);\n    let d = fib4(n - 4);\n    res =  a + b + c + d;\n    return\
    \ res;", "    var fib4 = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n\
    \        fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4]\n   \
    \ }\n    return fib4[n]", "    var fib = [Int]()\n    var fib4 = 1\n    fib[0]\
    \ = fib4\n    fib[1] = fib4\n    for index in 2...n {\n        fib[index] = (fib[index\
    \ - 1] + fib[index - 2] + fib[index - 3] + fib[index - 4])\n    }\n    return\
    \ fib[n]", "    // base case\n    guard n < 4 else {\n        return 0\n    }\n\
    \n    // recursive case\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +\
    \ fib4(n - 4)", "    switch n {\n    case 0: return 0\n    case 1: return 1\n\
    \    case 2: return 2\n    case 3: return 0\n    case 4: return 3\n    case 5:\
    \ return 5\n    case 6: return 7\n    case 7: return 0\n    default:\n       \
    \ let fib1 = fib4(n-1)\n        let fib2 = fib4(n-2)\n        let fib3 = fib4(n-3)\n\
    \        let fib4 = fib4(n-4)\n        return fib1 + fib2 + fib3 + fib4\n    }",
  "    var fib4 = 0\n\n    switch n {\n    case 0:\n        fib4 = 0\n    case 1:\n\
    \        fib4 = 0\n    case 2:\n        fib4 = 1\n    case 3:\n        fib4 =\
    \ 0\n    case 4:\n        fib4 = 0\n    case 5:\n        fib4 = 0\n    case 6:\n\
    \        fib4 = 0\n    case 7:\n        fib4 = 0\n    case 8:\n        fib4 =\
    \ 1\n    case 9:\n        fib4 = 1\n    case 10:\n        fib4 = 1\n    case 11:\n\
    \        fib4 = 0\n    case 12:\n        fib4 = 0\n    case 13:\n        fib4\
    \ = 1\n    case 14:\n        fib4 = 0\n    case 15:\n        fib4 = 0\n    case\
    \ 16:\n        fib4 = 0\n    case 17:\n        fib4 = 0\n    case 18:\n      \
    \  fib4 = 1\n    case 19:\n        fib4 = 0\n    case 20:\n        fib4 = 0\n\
    \    case 21:\n        fib4 = 0\n    case 22:\n        fib4 = 1\n    case 23:\n\
    \        fib4 = 0\n    case 24:\n        fib4 = 0\n    case 25:\n        fib4\
    \ = 0\n    case 26:\n        fib4 = 1\n    case 27:\n        fib4 = 0\n    case\
    \ 28:\n        fib4 = 0\n    case 29:\n        fib4 = 0\n    case 30:\n      \
    \  fib4 = 1\n    case 31:\n        fib4 = 1\n    case 32:\n        fib4 = 0\n\
    \    case 33:\n        fib4 = 0\n    case 34:\n        fib4 = 1\n    case 35:\n\
    \        fib4 = 1\n    case 36:\n        fib4 = 0\n    case 37:\n        fib4\
    \ = 0\n    case 38:\n        fib4 = 0\n    case 39:\n        fib4 = 1\n    case\
    \ 40:\n        fib4 = 1\n    case 41:\n        fib4 = 0\n    case 42:\n      \
    \  fib4 = 0\n    case 43:\n        fib4 = 1\n    case 44:\n        fib4 = 0\n\
    \    case 45:\n        fib4 = 0\n    case 46:\n        fib4 = 0\n    case 47:\n\
    \        fib4 = 1\n    case 48:\n        fib4 = 0\n    case 49:\n        fib4\
    \ = 0\n    case 50:\n        fib4 = 0\n    case 51:\n        fib4 = 1\n    case\
    \ 52:\n        fib4 = 0\n    case 53:\n        fib4 = 0\n    case 54:\n      \
    \  fib4 = 1\n    case 55:\n        fib4 = 0\n    case 56:\n        fib4 = 0\n\
    \    case 57:\n        fib4 = 1\n    case 58:\n        fib4", "\treturn fib4_helper(n,\
    \ 0, 1, 2)", "    let result = 1\n    for i in 0..<n {\n        result = result\
    \ * 4 + i\n    }\n    return result", "  if n <= 0 {\n    return 0\n  }\n  if\
    \ n == 1 {\n    return 0\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4)", "\tswitch n {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn\
    \ 0\n\tcase 2:\n\t\treturn 2\n\tcase 3:\n\t\treturn 0\n\tdefault:\n\t\treturn\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\t}", "    switch n {\n\
    \    case 0:\n        return 0\n    case 1:\n        return 0\n    case 2:\n \
    \       return 2\n    case 3:\n        return 0\n    case 4:\n        return 1\n\
    \    case 5:\n        return 1\n    case 6:\n        return 1\n    case 7:\n \
    \       return 1\n    case 8:\n        return 2\n    case 9:\n        return 3\n\
    \    case 10:\n        return 5\n    case 11:\n        return 8\n    case 12:\n\
    \        return 13\n    case 13:\n        return 21\n    case 14:\n        return\
    \ 34\n    case 15:\n        return 55\n    case 16:\n        return 89\n    case\
    \ 17:\n        return 144\n    case 18:\n        return 233\n    case 19:\n  \
    \      return 377\n    case 20:\n        return 610\n    case 21:\n        return\
    \ 987\n    case 22:\n        return 1597\n    case 23:\n        return 2584\n\
    \    case 24:\n        return 4181\n    case 25:\n        return 6765\n    case\
    \ 26:\n        return 10946\n    case 27:\n        return 17711\n    case 28:\n\
    \        return 28657\n    case 29:\n        return 46368\n    case 30:\n    \
    \    return 75025\n    case 31:\n        return 121393\n    case 32:\n       \
    \ return 196418\n    case 33:\n        return 317811\n    case 34:\n        return\
    \ 514229\n    case 35:\n        return 832040\n    case 36:\n        return 1346269\n\
    \    case 37:\n        return 2178309\n    case 38:\n        return 3524578\n\
    \    case 39:\n        return 5702887\n    case 40:\n        return 9496708\n\
    \    case 41:\n        return 15480087\n    case 42:\n        return 25047303\n\
    \    case 43:\n        return 40527392\n    case 44:\n        return 6557470\n\
    \    case 45:\n        return 115792089\n    case 46:\n        return 17711773\n\
    \    case 47:\n        return 28657143\n    case 48:\n        return 46368421\n\
    \    case 49:\n        return 75025329\n    case 50:\n        return 121392719\n\
    \    case 51:\n        return 196418441\n    case 52:\n        return 317810997\n\
    \    case 53:\n        return 514229516\n    case 54:\n        return 832043951\n\
    \    case 55:\n        return 134626189\n    case 56:\n        return 217830645\n\
    \    case 57:\n        return 352457773\n    case 58:\n        return 570288235\n\
    \    case 59:\n        return 949671040\n    case 60:\n        return 1548006999\n\
    \    case 61:\n        return 2504730783\n    case 62:\n        return 405273936",
  "  if n < 0 {\n    return 0\n  }\n  if n == 0 {\n    return 0\n  }\n  if n == 1\
    \ {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n == 3 {\n    return\
    \ 0\n  }\n  if n == 4 {\n    return 0\n  }\n  if n == 5 {\n    return 4\n  }\n\
    \  if n == 6 {\n    return 8\n  }\n  if n == 7 {\n    return 14\n  }\n  if n ==\
    \ 8 {\n    return 8\n  }\n  if n == 9 {\n    return 14\n  }\n  if n == 10 {\n\
    \    return 10\n  }\n  if n == 11 {\n    return 12\n  }\n  if n == 12 {\n    return\
    \ 14\n  }\n  if n == 13 {\n    return 13\n  }\n  if n == 14 {\n    return 16\n\
    \  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", "    let\
    \ fib4: [Int] = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    return fib4[(n-1) % 4]\
    \ + (fib4[(n-2) % 4] + (fib4[(n-3) % 4] + (fib4[(n-4) % 4]))) % 4", "    var nums\
    \ = [Int]()\n\n    // Write your code in Swift 4.2 mode.\n    if n == 0 || n ==\
    \ 1 {\n        return 0\n    }\n    if n <= 4 {\n        nums.append(0)\n    \
    \    return nums[n - 1]\n    }\n    nums.append(0)\n    nums.append(0)\n    nums.append(2)\n\
    \    nums.append(0)\n    nums.append(0)\n    nums.append(0)\n    nums.append(nums[n\
    \ - 4] + nums[n - 3] + nums[n - 2])\n    return nums[n - 4]", "  if n < 1 {\n\
    \    return 0\n  }\n  if n == 1 {\n    return 0\n  }\n  if n == 2 {\n    return\
    \ 2\n  }\n  if n == 3 {\n    return 0\n  }\n  if n == 4 {\n    return 0\n  }\n\
    \  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", "    // FILL\
    \ IN YOUR CODE HERE\n    switch n {\n    case 0: return 0\n    case 1: return\
    \ 0\n    case 2: return 2\n    case 3: return 0\n    case 4: return 0\n    case\
    \ 5: return 0\n    case 6: return 0\n    case 7: return 0\n    case 8: return\
    \ 2\n    case 9: return 0\n    case 10: return 0\n    case 11: return 0\n    case\
    \ 12: return 0\n    case 13: return 0\n    case 14: return 0\n    case 15: return\
    \ 0\n    case 16: return 0\n    case 17: return 0\n    case 18: return 0\n   \
    \ case 19: return 0\n    case 20: return 0\n    case 21: return 0\n    case 22:\
    \ return 0\n    case 23: return 0\n    case 24: return 0\n    case 25: return\
    \ 0\n    case 26: return 0\n    case 27: return 0\n    case 28: return 0\n   \
    \ case 29: return 0\n    case 30: return 0\n    case 31: return 0\n    case 32:\
    \ return 0\n    case 33: return 0\n    case 34: return 0\n    case 35: return\
    \ 0\n    case 36: return 0\n    case 37: return 0\n    case 38: return 0\n   \
    \ case 39: return 0\n    case 40: return 0\n    case 41: return 0\n    case 42:\
    \ return 0\n    case 43: return 0\n    case 44: return 0\n    case 45: return\
    \ 0\n    case 46: return 0\n    case 47: return 0\n    case 48: return 0\n   \
    \ case 49: return 0\n    case 50: return 0\n    case 51: return 0\n    case 52:\
    \ return 0\n    case 53: return 0\n    case 54: return 0\n    case 55: return\
    \ 0\n    case 56: return 0\n    case 57: return 0\n    case 58: return 0\n   \
    \ case 59: return 0\n    case 60: return 0\n    case 61: return 0\n    case 62:\
    \ return 0\n    case 63: return 0\n    case 64: return 0\n    case 65: return\
    \ 0\n    case 66: return 0\n    case 67: return 0\n    case 68: return 0\n   \
    \ case 69: return 0\n    case 70: return 0\n    case 71: return 0\n    case 72:\
    \ return 0\n    case 73: return 0\n    case 74: return 0\n    case 75: return\
    \ 0\n    case 76: return 0\n    case 77: return 0\n    case 78: return 0\n   \
    \ case 79: return 0\n    case 80: return 0\n    case 81: return 0\n    case 82:\
    \ return 0\n    case 83: return 0\n    case 84: return 0\n    case 85: return\
    \ 0\n    case 86: return 0\n    case 87: return 0\n    case 88: return 0\n   \
    \ case 89: return 0\n    case 90: return 0\n    case 91: return 0\n    case 92:\
    \ return 0\n    case 93: return 0\n    case 94: return 0\n    case 95: return\
    \ 0\n    case 96: return 0\n    case 97: return 0\n    case ", "    var result\
    \ = 0\n    for i in 0..<n {\n        result = result + Int(pow(Double(i+1), 5))\n\
    \    }\n    return result", "  let result = Int(pow(Double(n), Double(4)) * pow(Double(n),\
    \ Double(6))) * pow(Double(n), Double(2))\n  return result", "    var a: Int =\
    \ 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int\
    \ = 0\n\n    for _ in 0...n {\n        c += 1\n        b = a + c\n        a =\
    \ b\n        d = a + d\n        a = b\n        c = d\n        e += 1\n    }\n\
    \    return e", "  if n <= 1 {\n    return n\n  }\n  return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)", "    // Your code here\n    var fib4 = 1\n\
    \    for var i = 2; i<=n; i++ {\n        fib4 = fib4 + fib4\n    }\n    return\
    \ fib4", "    var fib4 = 0\n    var k = 0\n    \n    switch n {\n    case 1:\n\
    \        fib4 = 0\n    case 2:\n        fib4 = 1\n    case 3:\n        fib4 =\
    \ 1\n    case 4:\n        fib4 = 1\n    default:\n        while k <= (n - 4) {\n\
    \            fib4 = fib4 + fib4\n            k = k + 1\n        }\n    }\n   \
    \ \n    return fib4", "\treturn sequences.fibbonaciSequence(4)", "\treturn 0",
  "    switch n {\n    case 0:\n        return 0\n    case 1:\n        return 0\n\
    \    case 2:\n        return 2\n    case 3:\n        return 0\n    default:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }", '    //
    ...', '  return fib4Helper(n, 1)', "  // Write your code here\n  var result =\
    \ 1\n  for var i = 2; i <= n; i++ {\n    result = result + fib3(n-i)\n  }\n  return\
    \ result", '  return fib4_rec(n: n, fib: 0)', "\tif n == 0 || n == 1 {\n\t\treturn\
    \ 0\n\t} else if n == 2 {\n\t\treturn 1\n\t} else if n == 3 {\n\t\treturn 0\n\t\
    } else if n == 4 {\n\t\treturn 1\n\t} else if n == 5 {\n\t\treturn 2\n\t} else\
    \ if n == 6 {\n\t\treturn 0\n\t} else if n == 7 {\n\t\treturn 1\n\t} else if n\
    \ == 8 {\n\t\treturn 2\n\t} else if n == 9 {\n\t\treturn 3\n\t} else if n == 10\
    \ {\n\t\treturn 0\n\t} else if n == 11 {\n\t\treturn 1\n\t} else if n == 12 {\n\
    \t\treturn 2\n\t} else if n == 13 {\n\t\treturn 3\n\t} else if n == 14 {\n\t\t\
    return 4\n\t} else if n == 15 {\n\t\treturn 5\n\t} else if n == 16 {\n\t\treturn\
    \ 6\n\t} else if n == 17 {\n\t\treturn 7\n\t} else if n == 18 {\n\t\treturn 8\n\
    \t} else if n == 19 {\n\t\treturn 9\n\t} else if n == 20 {\n\t\treturn 10\n\t\
    } else if n == 21 {\n\t\treturn 11\n\t} else if n == 22 {\n\t\treturn 12\n\t}\
    \ else if n == 23 {\n\t\treturn 13\n\t} else if n == 24 {\n\t\treturn 14\n\t}\
    \ else if n == 25 {\n\t\treturn 15\n\t} else if n == 26 {\n\t\treturn 16\n\t}\
    \ else if n == 27 {\n\t\treturn 17\n\t} else if n == 28 {\n\t\treturn 18\n\t}\
    \ else if n == 29 {\n\t\treturn 19\n\t} else if n == 30 {\n\t\treturn 20\n\t}\
    \ else if n == 31 {\n\t\treturn 21\n\t} else if n == 32 {\n\t\treturn 22\n\t}\
    \ else if n == 33 {\n\t\treturn 23\n\t} else if n == 34 {\n\t\treturn 24\n\t}\
    \ else if n == 35 {\n\t\treturn 25\n\t} else if n == 36 {\n\t\treturn 26\n\t}\
    \ else if n == 37 {\n\t\treturn 27\n\t} else if n == 38 {\n\t\treturn 28\n\t}\
    \ else if n == 39 {\n\t\treturn 29\n\t} else if n == 40 {\n\t\treturn 30\n\t}\
    \ else if n == 41 {\n\t\treturn 31\n\t} else if n == 42 {\n\t\treturn 32\n\t}\
    \ else if n == 43 {\n\t\treturn 33\n\t} else if n == 44 {\n\t\treturn 34\n\t}\
    \ else if n == 45 {\n\t\treturn 35\n\t} else if n == 46 {\n\t\treturn 36\n\t}\
    \ else if n == 47 {\n\t\treturn 37\n\t} else if n == 48 {\n\t\treturn 38\n\t}\
    \ else if n == 49 {\n\t\treturn 39\n\t} else if n == 50 {\n\t\treturn 40\n\t}\
    \ else if n == 51 {\n\t\treturn 41\n\t} else if n == 52 {", "  if n < 0 {\n  \
    \  return 0\n  }\n  if n == 0 {\n    return 0\n  }\n  if n == 1 {\n    return\
    \ 0\n  }\n  if n == 2 {\n    return 2\n  }\n  if n == 3 {\n    return 0\n  }\n\
    \  if n == 4 {\n    return 0\n  }\n  if n == 5 {\n    return 4\n  }\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", "    let fib4 = 0...n\n\
    \    return fib4[fib4.startIndex.advancedBy(2)]", "\treturn fibonacci(n, n)",
  "    var res = 0\n    for var i = 2; i < n; i++ {\n        res += i\n    }\n   \
    \ return res", "    var fib4 = 0\n    for _ in 0 ..< n {\n        fib4 += fib4(n-1)\n\
    \        fib4 += fib4(n-2)\n        fib4 += fib4(n-3)\n        fib4 += fib4(n-4)\n\
    \    }\n    return fib4", '    return fib4_rec(n - 1, n + 2, n + 3, n + 4)', '    return
    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)', "\tvar r = 0\n\tfor _\
    \ in 0 ..< n {\n\t\tr += 1\n\t}\n\treturn r", "    let result = 1\n    let i =\
    \ 2\n    while i <= n {\n        result = result + i\n        i += 1\n    }\n\
    \    return result", "    var sum = 0\n    switch n {\n    case 0:\n        return\
    \ 0\n    case 1:\n        return 1\n    case 2:\n        return 2\n    default:\n\
    \        sum = fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    return sum",
  "    let fib4Sequence = [0,1,1,2,3,5,8,13,21,34,55,89]\n    if n < 0 || n > fib4Sequence.count\
    \ {\n        return 0\n    }\n    return fib4Sequence[n]", "  // TODO: write code\
    \ here\n  return 0", "\treturn 0", "    var a = 0\n    var b = 1\n    for i in\
    \ 1...n {\n        a = b\n        b += a\n    }\n    return b", '  return fib4Helper(n,
    0, 0)', "    switch n {\n    case 0: return 0\n    case 1: return 0\n    case\
    \ 2: return 2\n    case 3: return 0\n    default: return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n    }", "  var fib4 = 0.0\n  if n == 0 || n == 1 {\n\
    \    return n\n  }\n  fib4 += fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n  return fib4", "    var a = n\n    var b = n\n    var c = n\n    var\
    \ d = n\n    while true {\n        let temp = a + b + c + d\n        if temp >\
    \ 1000000000000 { break }\n        a = b\n        b = c\n        c = d\n     \
    \   d = temp\n    }\n    return d", "    var a = 2\n    var b = 4\n    var c =\
    \ 6\n    var d = 8\n    if n < 4 {\n        return n\n    }\n    while n > 0 {\n\
    \        var next = a + b + c + d\n        a = b\n        b = c\n        c = d\n\
    \        d = next\n        n = n - 4\n    }\n    return next", "  var a = 0\n\
    \  var b = 1\n  var c = 2\n  var d = 1\n\n  for _ in 0..<n {\n    let result =\
    \ a + b + c + d\n    (a, b, c, d) = (d, c, b, a)\n    a = result\n  }\n\n  return\
    \ d", '    return sequences.fib4[n-1]', "    if n == 0 {\n        return 0\n \
    \   }\n    else if n == 1 {\n        return 1\n    }\n    else {\n        let\
    \ fib41 = fib4(n - 1) + fib4(n - 2)\n        let fib42 = fib4(n - 3) + fib4(n\
    \ - 4)\n        return fib41 + fib42\n    }", "  var fib4 = Int(0)\n  if n > 0\
    \ {\n    fib4 = fib4 + 1\n  }\n  if n > 1 {\n    fib4 = fib4 + 2\n  }\n  if n\
    \ > 2 {\n    fib4 = fib4 + 1\n  }\n  if n > 3 {\n    fib4 = fib4 + 2\n  }\n  if\
    \ n > 4 {\n    fib4 = fib4 + 1\n  }\n  return fib4", '    return 0', "    guard\
    \ n >= 0 else {\n        return 0\n    }\n    \n    var result = 1\n    for _\
    \ in 1 ..< n {\n        result = result * 3 + 1\n    }\n    return result", "\t\
    var result : Int = 0\n\tfor index in 0 ..< n {\n\t\tresult = result + fib4(index-1)\n\
    \t}\n\treturn result", "    var fib4 = Int(0);\n    for _ in 0..<n {\n       \
    \ fib4 += Int(fib4);\n    }\n    return fib4;", "    // FILL IN HERE\n    return\
    \ 0", '  return fib4Sum(n, n*2, n*3, n*4)']
stop_tokens:
- "\n}"
